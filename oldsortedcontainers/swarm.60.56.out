Random testing using config=Config(noExceptionMatch=False, generalize=False, localize=False, speed='FAST', probs=None, LOCBaseline=0.2, noAlphaConvert=False, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, html=None, keepLast=False, stopWhenNoCoverage=None, generateLOC=None, computeFeatureStats=False, Pmutate=0.0, timeout=60, output='failure.10616.test', markov=None, noSwarmDependencies=False, startExploit=0.0, maxMustHitBranch=None, useHints=False, silentFail=False, highLowSwarm=None, maxMustHitStatement=None, progress=False, postCover=False, swarmLength=None, noCover=False, noEnumerateEnabled=False, full=True, swarmP=0.5, coverFile='coverage.out', markovP=1.0, swarmProbs=None, genDepth=None, exploitCeiling=0.1, logging=None, noCheck=False, throughput=False, uncaught=False, swarmSwitch=None, verbose=False, reducePool=False, exploit=None, fastQuickAnalysis=False, total=False, verboseExploit=False, swarm=True, sequenceP=1.0, biasLOC=None, timedProgress=30, relax=False, ddmin=False, stutter=None, readQuick=False, verboseActions=False, quickAnalysis=False, noReassign=False, sequenceSize=3, LOCProbs=False, sequencesFromTests=None, maxTests=-1, trackMaxCoverage=None, useQuickSequences=False, exploitBestHint=1, failedLogging=None, stopWhenStatements=None, greedyStutter=False, seed=None, stopWhenHitStatement=None, uniqueValuesAnalysis=False, normalize=False, startExploitStall=0, enumerateEnabled=False, internal=False, profile=False, multiple=True, stopWhenBranches=None, running=False, compareFails=False, Pcrossover=0.2, stopWhenHitBranch=None, depth=100, showActions=False)
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x11eea4c68>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 703164, in act11970
    self.p_list[4].extend(self.p_list[0])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
Original test has 69 steps

SAVING TEST AS failure.10616.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
sval3 = 'x'                                                              # STEP 0
ACTION: sval3 = 'x' 
sval3 = None : <type 'NoneType'>
=> sval3 = 'x' : <type 'str'>
==================================================
sval9 = 'q'                                                              # STEP 1
ACTION: sval9 = 'q' 
sval9 = None : <type 'NoneType'>
=> sval9 = 'q' : <type 'str'>
==================================================
sval5 = 'h'                                                              # STEP 2
ACTION: sval5 = 'h' 
sval5 = None : <type 'NoneType'>
=> sval5 = 'h' : <type 'str'>
==================================================
list4 = sortedcontainers.SortedList()                                    # STEP 3
ACTION: list4 = sortedcontainers.SortedList() 
list4 = None : <type 'NoneType'>
list_REF4 = None : <type 'NoneType'>
=> list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: list_REF4 = [] 
=> list_REF4 = [] : <type 'list'>
==================================================
sval4 = 'n'                                                              # STEP 4
ACTION: sval4 = 'n' 
sval4 = None : <type 'NoneType'>
=> sval4 = 'n' : <type 'str'>
==================================================
ival5 = 18                                                               # STEP 5
ACTION: ival5 = 18 
ival5 = None : <type 'NoneType'>
=> ival5 = 18 : <type 'int'>
==================================================
list0 = sortedcontainers.SortedList()                                    # STEP 6
ACTION: list0 = sortedcontainers.SortedList() 
list0 = None : <type 'NoneType'>
list_REF0 = None : <type 'NoneType'>
=> list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: list_REF0 = [] 
=> list_REF0 = [] : <type 'list'>
==================================================
ival8 = 4                                                                # STEP 7
ACTION: ival8 = 4 
ival8 = None : <type 'NoneType'>
=> ival8 = 4 : <type 'int'>
==================================================
sval2 = 'k'                                                              # STEP 8
ACTION: sval2 = 'k' 
sval2 = None : <type 'NoneType'>
=> sval2 = 'k' : <type 'str'>
==================================================
val2 = ival5                                                             # STEP 9
ACTION: val2 = ival5 
ival5 = 18 : <type 'int'>
val2 = None : <type 'NoneType'>
=> val2 = 18 : <type 'int'>
==================================================
val6 = sval5                                                            # STEP 10
ACTION: val6 = sval5 
sval5 = 'h' : <type 'str'>
val6 = None : <type 'NoneType'>
=> val6 = 'h' : <type 'str'>
==================================================
val8 = ival8                                                            # STEP 11
ACTION: val8 = ival8 
ival8 = 4 : <type 'int'>
val8 = None : <type 'NoneType'>
=> val8 = 4 : <type 'int'>
==================================================
list0.irange(minimum=val8,maximum=val6,inclusive=(False,False))         # STEP 12
ACTION: list0.irange(minimum=val8,maximum=val6,inclusive=(False,False)) 
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val8 = 4 : <type 'int'>
val6 = 'h' : <type 'str'>
list_REF0 = [] : <type 'list'>
REFERENCE ACTION: list_REF0.irange(minimum=val8,maximum=val6,inclusive=(False,False)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
list4.add(val8)                                                         # STEP 13
ACTION: list4.add(val8) 
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val8 = 4 : <type 'int'>
list_REF4 = [] : <type 'list'>
=> list4 = SortedList([4], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: sortListAdd(list_REF4,val8) 
=> list_REF4 = [4] : <type 'list'>
==================================================
sval8 = 'y'                                                             # STEP 14
ACTION: sval8 = 'y' 
sval8 = None : <type 'NoneType'>
=> sval8 = 'y' : <type 'str'>
==================================================
list0.irange(minimum=val8,maximum=val8,inclusive=(False,False),reverse=True)  # STEP 15
ACTION: list0.irange(minimum=val8,maximum=val8,inclusive=(False,False),reverse=True) 
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val8 = 4 : <type 'int'>
list_REF0 = [] : <type 'list'>
REFERENCE ACTION: list_REF0.irange(minimum=val8,maximum=val8,inclusive=(False,False),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
list0.remove(val8)                                                      # STEP 16
ACTION: list0.remove(val8) 
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val8 = 4 : <type 'int'>
list_REF0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> 4 not in list
REFERENCE ACTION: list_REF0.remove(val8) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.ValueError'> list.remove(x): x not in list
==================================================
list4.irange(minimum=val8,maximum=val8,inclusive=(True,False))          # STEP 17
ACTION: list4.irange(minimum=val8,maximum=val8,inclusive=(True,False)) 
list4 = SortedList([4], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val8 = 4 : <type 'int'>
list_REF4 = [4] : <type 'list'>
REFERENCE ACTION: list_REF4.irange(minimum=val8,maximum=val8,inclusive=(True,False)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
ival6 = 3                                                               # STEP 18
ACTION: ival6 = 3 
ival6 = None : <type 'NoneType'>
=> ival6 = 3 : <type 'int'>
==================================================
list4.irange(minimum=val2,maximum=val6,inclusive=(True,False))          # STEP 19
ACTION: list4.irange(minimum=val2,maximum=val6,inclusive=(True,False)) 
list4 = SortedList([4], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val2 = 18 : <type 'int'>
val6 = 'h' : <type 'str'>
list_REF4 = [4] : <type 'list'>
REFERENCE ACTION: list_REF4.irange(minimum=val2,maximum=val6,inclusive=(True,False)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
list0.irange(minimum=val6,maximum=val8,inclusive=(True,False))          # STEP 20
ACTION: list0.irange(minimum=val6,maximum=val8,inclusive=(True,False)) 
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val6 = 'h' : <type 'str'>
val8 = 4 : <type 'int'>
list_REF0 = [] : <type 'list'>
REFERENCE ACTION: list_REF0.irange(minimum=val6,maximum=val8,inclusive=(True,False)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
ival5 = ival8 - ival8                                                   # STEP 21
ACTION: ival5 = ival8 - ival8 
ival8 = 4 : <type 'int'>
ival5 = 18 : <type 'int'>
=> ival5 = 0 : <type 'int'>
==================================================
ival8 = ival5 * ival6                                                   # STEP 22
ACTION: ival8 = ival5 * ival6 
ival5 = 0 : <type 'int'>
ival6 = 3 : <type 'int'>
ival8 = 4 : <type 'int'>
=> ival8 = 0 : <type 'int'>
==================================================
ival6 = ival5 - ival6                                                   # STEP 23
ACTION: ival6 = ival5 - ival6 
ival5 = 0 : <type 'int'>
ival6 = 3 : <type 'int'>
=> ival6 = -3 : <type 'int'>
==================================================
sval0 = 'p'                                                             # STEP 24
ACTION: sval0 = 'p' 
sval0 = None : <type 'NoneType'>
=> sval0 = 'p' : <type 'str'>
==================================================
val7 = sval9                                                            # STEP 25
ACTION: val7 = sval9 
sval9 = 'q' : <type 'str'>
val7 = None : <type 'NoneType'>
=> val7 = 'q' : <type 'str'>
==================================================
list4.irange(minimum=val7,maximum=val2,inclusive=(False,False),reverse=True)  # STEP 26
ACTION: list4.irange(minimum=val7,maximum=val2,inclusive=(False,False),reverse=True) 
list4 = SortedList([4], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val7 = 'q' : <type 'str'>
val2 = 18 : <type 'int'>
list_REF4 = [4] : <type 'list'>
REFERENCE ACTION: list_REF4.irange(minimum=val7,maximum=val2,inclusive=(False,False),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
sval9 = 'k'                                                             # STEP 27
ACTION: sval9 = 'k' 
sval9 = 'q' : <type 'str'>
=> sval9 = 'k' : <type 'str'>
==================================================
ival0 = 16                                                              # STEP 28
ACTION: ival0 = 16 
ival0 = None : <type 'NoneType'>
=> ival0 = 16 : <type 'int'>
==================================================
list0.irange(minimum=val8,maximum=val7,inclusive=(False,False))         # STEP 29
ACTION: list0.irange(minimum=val8,maximum=val7,inclusive=(False,False)) 
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val8 = 4 : <type 'int'>
val7 = 'q' : <type 'str'>
list_REF0 = [] : <type 'list'>
REFERENCE ACTION: list_REF0.irange(minimum=val8,maximum=val7,inclusive=(False,False)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
val1 = sval8                                                            # STEP 30
ACTION: val1 = sval8 
sval8 = 'y' : <type 'str'>
val1 = None : <type 'NoneType'>
=> val1 = 'y' : <type 'str'>
==================================================
val2 = ival0                                                            # STEP 31
ACTION: val2 = ival0 
ival0 = 16 : <type 'int'>
val2 = 18 : <type 'int'>
=> val2 = 16 : <type 'int'>
==================================================
list0.irange(minimum=val7,maximum=val2,inclusive=(False,True),reverse=True)  # STEP 32
ACTION: list0.irange(minimum=val7,maximum=val2,inclusive=(False,True),reverse=True) 
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val7 = 'q' : <type 'str'>
val2 = 16 : <type 'int'>
list_REF0 = [] : <type 'list'>
REFERENCE ACTION: list_REF0.irange(minimum=val7,maximum=val2,inclusive=(False,True),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
list4.add(val2)                                                         # STEP 33
ACTION: list4.add(val2) 
list4 = SortedList([4], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val2 = 16 : <type 'int'>
list_REF4 = [4] : <type 'list'>
=> list4 = SortedList([4, 16], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: sortListAdd(list_REF4,val2) 
=> list_REF4 = [4, 16] : <type 'list'>
==================================================
list4.irange(minimum=val8,maximum=val8,inclusive=(False,False))         # STEP 34
ACTION: list4.irange(minimum=val8,maximum=val8,inclusive=(False,False)) 
list4 = SortedList([4, 16], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val8 = 4 : <type 'int'>
list_REF4 = [4, 16] : <type 'list'>
REFERENCE ACTION: list_REF4.irange(minimum=val8,maximum=val8,inclusive=(False,False)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
ival1 = 4                                                               # STEP 35
ACTION: ival1 = 4 
ival1 = None : <type 'NoneType'>
=> ival1 = 4 : <type 'int'>
==================================================
list0.irange(minimum=val8,maximum=val1,inclusive=(False,False),reverse=True)  # STEP 36
ACTION: list0.irange(minimum=val8,maximum=val1,inclusive=(False,False),reverse=True) 
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val8 = 4 : <type 'int'>
val1 = 'y' : <type 'str'>
list_REF0 = [] : <type 'list'>
REFERENCE ACTION: list_REF0.irange(minimum=val8,maximum=val1,inclusive=(False,False),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
ival3 = ival8 - ival8                                                   # STEP 37
ACTION: ival3 = ival8 - ival8 
ival8 = 0 : <type 'int'>
ival3 = None : <type 'NoneType'>
=> ival3 = 0 : <type 'int'>
==================================================
ival9 = 3                                                               # STEP 38
ACTION: ival9 = 3 
ival9 = None : <type 'NoneType'>
=> ival9 = 3 : <type 'int'>
==================================================
sval7 = 'r'                                                             # STEP 39
ACTION: sval7 = 'r' 
sval7 = None : <type 'NoneType'>
=> sval7 = 'r' : <type 'str'>
==================================================
val9 = ival6                                                            # STEP 40
ACTION: val9 = ival6 
ival6 = -3 : <type 'int'>
val9 = None : <type 'NoneType'>
=> val9 = -3 : <type 'int'>
==================================================
list4.irange(minimum=val2,maximum=val7,inclusive=(True,False))          # STEP 41
ACTION: list4.irange(minimum=val2,maximum=val7,inclusive=(True,False)) 
list4 = SortedList([4, 16], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val2 = 16 : <type 'int'>
val7 = 'q' : <type 'str'>
list_REF4 = [4, 16] : <type 'list'>
REFERENCE ACTION: list_REF4.irange(minimum=val2,maximum=val7,inclusive=(True,False)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
ival0 = ival5 * ival5                                                   # STEP 42
ACTION: ival0 = ival5 * ival5 
ival5 = 0 : <type 'int'>
ival0 = 16 : <type 'int'>
=> ival0 = 0 : <type 'int'>
==================================================
ival8 = 12                                                              # STEP 43
ACTION: ival8 = 12 
ival8 = 0 : <type 'int'>
=> ival8 = 12 : <type 'int'>
==================================================
list0.islice(start=ival9,stop=ival9)                                    # STEP 44
ACTION: list0.islice(start=ival9,stop=ival9) 
ival9 = 3 : <type 'int'>
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF0 = [] : <type 'list'>
REFERENCE ACTION: list_REF0.islice(start=ival9,stop=ival9) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'islice'
==================================================
ival5 = ival3 - ival9                                                   # STEP 45
ACTION: ival5 = ival3 - ival9 
ival3 = 0 : <type 'int'>
ival9 = 3 : <type 'int'>
ival5 = 0 : <type 'int'>
=> ival5 = -3 : <type 'int'>
==================================================
ival7 = ival3 * ival9                                                   # STEP 46
ACTION: ival7 = ival3 * ival9 
ival3 = 0 : <type 'int'>
ival9 = 3 : <type 'int'>
ival7 = None : <type 'NoneType'>
=> ival7 = 0 : <type 'int'>
==================================================
list4.irange(minimum=val7,maximum=val2,inclusive=(False,False),reverse=True)  # STEP 47
ACTION: list4.irange(minimum=val7,maximum=val2,inclusive=(False,False),reverse=True) 
list4 = SortedList([4, 16], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val7 = 'q' : <type 'str'>
val2 = 16 : <type 'int'>
list_REF4 = [4, 16] : <type 'list'>
REFERENCE ACTION: list_REF4.irange(minimum=val7,maximum=val2,inclusive=(False,False),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
list4.islice(start=ival1,stop=ival3)                                    # STEP 48
ACTION: list4.islice(start=ival1,stop=ival3) 
ival1 = 4 : <type 'int'>
ival3 = 0 : <type 'int'>
list4 = SortedList([4, 16], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = [4, 16] : <type 'list'>
REFERENCE ACTION: list_REF4.islice(start=ival1,stop=ival3) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'islice'
==================================================
list4.islice(start=ival1,stop=ival8,reverse=True)                       # STEP 49
ACTION: list4.islice(start=ival1,stop=ival8,reverse=True) 
ival1 = 4 : <type 'int'>
ival8 = 12 : <type 'int'>
list4 = SortedList([4, 16], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = [4, 16] : <type 'list'>
REFERENCE ACTION: list_REF4.islice(start=ival1,stop=ival8,reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'islice'
==================================================
list4.islice(start=ival6,stop=ival7)                                    # STEP 50
ACTION: list4.islice(start=ival6,stop=ival7) 
ival6 = -3 : <type 'int'>
ival7 = 0 : <type 'int'>
list4 = SortedList([4, 16], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = [4, 16] : <type 'list'>
REFERENCE ACTION: list_REF4.islice(start=ival6,stop=ival7) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'islice'
==================================================
ival4 = ival9 - ival3                                                   # STEP 51
ACTION: ival4 = ival9 - ival3 
ival9 = 3 : <type 'int'>
ival3 = 0 : <type 'int'>
ival4 = None : <type 'NoneType'>
=> ival4 = 3 : <type 'int'>
==================================================
ival9 = ival3 * ival6                                                   # STEP 52
ACTION: ival9 = ival3 * ival6 
ival3 = 0 : <type 'int'>
ival6 = -3 : <type 'int'>
ival9 = 3 : <type 'int'>
=> ival9 = 0 : <type 'int'>
==================================================
del list4 [ival8 : ival4]                                               # STEP 53
ACTION: del list4 [ival8 : ival4] 
ival8 = 12 : <type 'int'>
ival4 = 3 : <type 'int'>
list4 = SortedList([4, 16], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = [4, 16] : <type 'list'>
REFERENCE ACTION: del list_REF4 [ival8 : ival4] 
==================================================
list4.islice(start=ival7,stop=ival8)                                    # STEP 54
ACTION: list4.islice(start=ival7,stop=ival8) 
ival7 = 0 : <type 'int'>
ival8 = 12 : <type 'int'>
list4 = SortedList([4, 16], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = [4, 16] : <type 'list'>
REFERENCE ACTION: list_REF4.islice(start=ival7,stop=ival8) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'islice'
==================================================
ival7 = ival0 - ival1                                                   # STEP 55
ACTION: ival7 = ival0 - ival1 
ival0 = 0 : <type 'int'>
ival1 = 4 : <type 'int'>
ival7 = 0 : <type 'int'>
=> ival7 = -4 : <type 'int'>
==================================================
ival1 = ival8 * ival5                                                   # STEP 56
ACTION: ival1 = ival8 * ival5 
ival8 = 12 : <type 'int'>
ival5 = -3 : <type 'int'>
ival1 = 4 : <type 'int'>
=> ival1 = -36 : <type 'int'>
==================================================
ival2 = ival3 - ival0                                                   # STEP 57
ACTION: ival2 = ival3 - ival0 
ival3 = 0 : <type 'int'>
ival0 = 0 : <type 'int'>
ival2 = None : <type 'NoneType'>
=> ival2 = 0 : <type 'int'>
==================================================
list0.irange(minimum=val1,maximum=val8,inclusive=(True,False))          # STEP 58
ACTION: list0.irange(minimum=val1,maximum=val8,inclusive=(True,False)) 
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val1 = 'y' : <type 'str'>
val8 = 4 : <type 'int'>
list_REF0 = [] : <type 'list'>
REFERENCE ACTION: list_REF0.irange(minimum=val1,maximum=val8,inclusive=(True,False)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
list0.islice(start=ival5,stop=ival5)                                    # STEP 59
ACTION: list0.islice(start=ival5,stop=ival5) 
ival5 = -3 : <type 'int'>
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF0 = [] : <type 'list'>
REFERENCE ACTION: list_REF0.islice(start=ival5,stop=ival5) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'islice'
==================================================
ival8 = ival5 - ival0                                                   # STEP 60
ACTION: ival8 = ival5 - ival0 
ival5 = -3 : <type 'int'>
ival0 = 0 : <type 'int'>
ival8 = 12 : <type 'int'>
=> ival8 = -3 : <type 'int'>
==================================================
ival0 = ival5 - ival1                                                   # STEP 61
ACTION: ival0 = ival5 - ival1 
ival5 = -3 : <type 'int'>
ival1 = -36 : <type 'int'>
ival0 = 0 : <type 'int'>
=> ival0 = 33 : <type 'int'>
==================================================
del list0 [ival7 : ival9]                                               # STEP 62
ACTION: del list0 [ival7 : ival9] 
ival7 = -4 : <type 'int'>
ival9 = 0 : <type 'int'>
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF0 = [] : <type 'list'>
REFERENCE ACTION: del list_REF0 [ival7 : ival9] 
==================================================
sval1 = 'e'                                                             # STEP 63
ACTION: sval1 = 'e' 
sval1 = None : <type 'NoneType'>
=> sval1 = 'e' : <type 'str'>
==================================================
list4.irange(minimum=val7,maximum=val2,inclusive=(False,False))         # STEP 64
ACTION: list4.irange(minimum=val7,maximum=val2,inclusive=(False,False)) 
list4 = SortedList([4, 16], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val7 = 'q' : <type 'str'>
val2 = 16 : <type 'int'>
list_REF4 = [4, 16] : <type 'list'>
REFERENCE ACTION: list_REF4.irange(minimum=val7,maximum=val2,inclusive=(False,False)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
ival5 = ival3 - ival7                                                   # STEP 65
ACTION: ival5 = ival3 - ival7 
ival3 = 0 : <type 'int'>
ival7 = -4 : <type 'int'>
ival5 = -3 : <type 'int'>
=> ival5 = 4 : <type 'int'>
==================================================
list0.irange(minimum=val6,maximum=val1,inclusive=(False,False),reverse=True)  # STEP 66
ACTION: list0.irange(minimum=val6,maximum=val1,inclusive=(False,False),reverse=True) 
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val6 = 'h' : <type 'str'>
val1 = 'y' : <type 'str'>
list_REF0 = [] : <type 'list'>
REFERENCE ACTION: list_REF0.irange(minimum=val6,maximum=val1,inclusive=(False,False),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
ival9 = ival1 * ival0                                                   # STEP 67
ACTION: ival9 = ival1 * ival0 
ival1 = -36 : <type 'int'>
ival0 = 33 : <type 'int'>
ival9 = 0 : <type 'int'>
=> ival9 = -1188 : <type 'int'>
==================================================
list4.extend(list0)                                                     # STEP 68
ACTION: list4.extend(list0) 
list4 = SortedList([4, 16], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = [4, 16] : <type 'list'>
list_REF0 = [] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x12040a1b8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 703164, in act11970
    self.p_list[4].extend(self.p_list[0])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #64 STEP #13 (0:00:30.001964) Mon Nov 20 17:44:25 2017 [ 396 stmts 521 branches ] (no cov+ for 8 tests) 6282 TOTAL ACTIONS (209.386291534/s)
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 86
STOPPING TESTING DUE TO TIMEOUT
25.0484683986 PERCENT COVERED
60.2187690735 TOTAL RUNTIME
125 EXECUTED
12455 TOTAL TEST OPERATIONS
4.39399981499 TIME SPENT EXECUTING TEST OPERATIONS
47.4699771404 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
3.40713024139 TIME SPENT CHECKING PROPERTIES
7.80113005638 TOTAL TIME SPENT RUNNING SUT
0.531983613968 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
sval3 = 'x'                                                              # STEP 0
sval9 = 'q'                                                              # STEP 1
sval5 = 'h'                                                              # STEP 2
list4 = sortedcontainers.SortedList()                                    # STEP 3
sval4 = 'n'                                                              # STEP 4
ival5 = 18                                                               # STEP 5
list0 = sortedcontainers.SortedList()                                    # STEP 6
ival8 = 4                                                                # STEP 7
sval2 = 'k'                                                              # STEP 8
val2 = ival5                                                             # STEP 9
val6 = sval5                                                            # STEP 10
val8 = ival8                                                            # STEP 11
list0.irange(minimum=val8,maximum=val6,inclusive=(False,False))         # STEP 12
list4.add(val8)                                                         # STEP 13
sval8 = 'y'                                                             # STEP 14
list0.irange(minimum=val8,maximum=val8,inclusive=(False,False),reverse=True)  # STEP 15
list0.remove(val8)                                                      # STEP 16
list4.irange(minimum=val8,maximum=val8,inclusive=(True,False))          # STEP 17
ival6 = 3                                                               # STEP 18
list4.irange(minimum=val2,maximum=val6,inclusive=(True,False))          # STEP 19
list0.irange(minimum=val6,maximum=val8,inclusive=(True,False))          # STEP 20
ival5 = ival8 - ival8                                                   # STEP 21
ival8 = ival5 * ival6                                                   # STEP 22
ival6 = ival5 - ival6                                                   # STEP 23
sval0 = 'p'                                                             # STEP 24
val7 = sval9                                                            # STEP 25
list4.irange(minimum=val7,maximum=val2,inclusive=(False,False),reverse=True)  # STEP 26
sval9 = 'k'                                                             # STEP 27
ival0 = 16                                                              # STEP 28
list0.irange(minimum=val8,maximum=val7,inclusive=(False,False))         # STEP 29
val1 = sval8                                                            # STEP 30
val2 = ival0                                                            # STEP 31
list0.irange(minimum=val7,maximum=val2,inclusive=(False,True),reverse=True)  # STEP 32
list4.add(val2)                                                         # STEP 33
list4.irange(minimum=val8,maximum=val8,inclusive=(False,False))         # STEP 34
ival1 = 4                                                               # STEP 35
list0.irange(minimum=val8,maximum=val1,inclusive=(False,False),reverse=True)  # STEP 36
ival3 = ival8 - ival8                                                   # STEP 37
ival9 = 3                                                               # STEP 38
sval7 = 'r'                                                             # STEP 39
val9 = ival6                                                            # STEP 40
list4.irange(minimum=val2,maximum=val7,inclusive=(True,False))          # STEP 41
ival0 = ival5 * ival5                                                   # STEP 42
ival8 = 12                                                              # STEP 43
list0.islice(start=ival9,stop=ival9)                                    # STEP 44
ival5 = ival3 - ival9                                                   # STEP 45
ival7 = ival3 * ival9                                                   # STEP 46
list4.irange(minimum=val7,maximum=val2,inclusive=(False,False),reverse=True)  # STEP 47
list4.islice(start=ival1,stop=ival3)                                    # STEP 48
list4.islice(start=ival1,stop=ival8,reverse=True)                       # STEP 49
list4.islice(start=ival6,stop=ival7)                                    # STEP 50
ival4 = ival9 - ival3                                                   # STEP 51
ival9 = ival3 * ival6                                                   # STEP 52
del list4 [ival8 : ival4]                                               # STEP 53
list4.islice(start=ival7,stop=ival8)                                    # STEP 54
ival7 = ival0 - ival1                                                   # STEP 55
ival1 = ival8 * ival5                                                   # STEP 56
ival2 = ival3 - ival0                                                   # STEP 57
list0.irange(minimum=val1,maximum=val8,inclusive=(True,False))          # STEP 58
list0.islice(start=ival5,stop=ival5)                                    # STEP 59
ival8 = ival5 - ival0                                                   # STEP 60
ival0 = ival5 - ival1                                                   # STEP 61
del list0 [ival7 : ival9]                                               # STEP 62
sval1 = 'e'                                                             # STEP 63
list4.irange(minimum=val7,maximum=val2,inclusive=(False,False))         # STEP 64
ival5 = ival3 - ival7                                                   # STEP 65
list0.irange(minimum=val6,maximum=val1,inclusive=(False,False),reverse=True)  # STEP 66
ival9 = ival1 * ival0                                                   # STEP 67
list4.extend(list0)                                                     # STEP 68
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x12040a1b8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 703164, in act11970
    self.p_list[4].extend(self.p_list[0])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
616 BRANCHES COVERED
464 STATEMENTS COVERED

Random testing using config=Config(noExceptionMatch=False, generalize=False, localize=False, speed='FAST', probs='locsample.probs', LOCBaseline=0.2, noAlphaConvert=False, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, html=None, keepLast=False, stopWhenNoCoverage=None, generateLOC=None, computeFeatureStats=False, Pmutate=0.0, timeout=60, output='failure.11177.test', markov=None, noSwarmDependencies=False, startExploit=0.0, maxMustHitBranch=None, useHints=False, silentFail=False, highLowSwarm=None, maxMustHitStatement=None, progress=False, postCover=False, swarmLength=None, noCover=False, noEnumerateEnabled=False, full=True, swarmP=0.5, coverFile='coverage.out', markovP=1.0, swarmProbs=None, genDepth=None, exploitCeiling=0.1, logging=None, noCheck=False, throughput=False, uncaught=False, swarmSwitch=None, verbose=False, reducePool=False, exploit=None, fastQuickAnalysis=False, total=False, verboseExploit=False, swarm=True, sequenceP=1.0, biasLOC=None, timedProgress=30, relax=False, ddmin=False, stutter=None, readQuick=False, verboseActions=False, quickAnalysis=False, noReassign=False, sequenceSize=3, LOCProbs=False, sequencesFromTests=None, maxTests=-1, trackMaxCoverage=None, useQuickSequences=False, exploitBestHint=1, failedLogging=None, stopWhenStatements=None, greedyStutter=False, seed=None, stopWhenHitStatement=None, uniqueValuesAnalysis=False, normalize=False, startExploitStall=0, enumerateEnabled=False, internal=False, profile=False, multiple=True, stopWhenBranches=None, running=False, compareFails=False, Pcrossover=0.2, stopWhenHitBranch=None, depth=100, showActions=False)
TEST #15 STEP #73 (0:00:30.001513) Mon Nov 20 20:45:33 2017 [ 323 stmts 422 branches ] (no cov+ for 5 tests) 1473 TOTAL ACTIONS (49.0975238412/s)
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x120c76a28>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 702811, in act11964
    self.p_list[2].extend(self.p_list[4])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
Original test has 86 steps

SAVING TEST AS failure.11177.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
sval0 = 'W'                                                              # STEP 0
ACTION: sval0 = 'W' 
sval0 = None : <type 'NoneType'>
=> sval0 = 'W' : <type 'str'>
==================================================
set4 = sortedcontainers.SortedSet()                                      # STEP 1
ACTION: set4 = sortedcontainers.SortedSet() 
set4 = None : <type 'NoneType'>
set_REF4 = None : <type 'NoneType'>
=> set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF4 = set([]) 
=> set_REF4 = set([]) : <type 'set'>
==================================================
list2 = sortedcontainers.SortedList()                                    # STEP 2
ACTION: list2 = sortedcontainers.SortedList() 
list2 = None : <type 'NoneType'>
list_REF2 = None : <type 'NoneType'>
=> list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: list_REF2 = [] 
=> list_REF2 = [] : <type 'list'>
==================================================
list2.update(list2)                                                      # STEP 3
ACTION: list2.update(list2) 
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF2 = [] : <type 'list'>
REFERENCE ACTION: sortListMultiAdd(list_REF2,list_REF2) 
==================================================
dict2 = sortedcontainers.SortedDict()                                    # STEP 4
ACTION: dict2 = sortedcontainers.SortedDict() 
dict2 = None : <type 'NoneType'>
dict_REF2 = None : <type 'NoneType'>
=> dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF2 = {} 
=> dict_REF2 = {} : <type 'dict'>
==================================================
result = dict2 != dict2                                                  # STEP 5
ACTION: result = dict2 != dict2 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = dict_REF2 != dict_REF2 
==================================================
repr(list2)                                                              # STEP 6
ACTION: repr(list2) 
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF2 = [] : <type 'list'>
REFERENCE ACTION: repr(list_REF2) 
==================================================
set1 = sortedcontainers.SortedSet()                                      # STEP 7
ACTION: set1 = sortedcontainers.SortedSet() 
set1 = None : <type 'NoneType'>
set_REF1 = None : <type 'NoneType'>
=> set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF1 = set([]) 
=> set_REF1 = set([]) : <type 'set'>
==================================================
result = dict2 == dict2                                                  # STEP 8
ACTION: result = dict2 == dict2 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = dict_REF2 == dict_REF2 
==================================================
set0 = set1 & set1                                                       # STEP 9
ACTION: set0 = set1 & set1 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set0 = None : <type 'NoneType'>
set_REF1 = set([]) : <type 'set'>
set_REF0 = None : <type 'NoneType'>
=> set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF0 = set_REF1 & set_REF1 
=> set_REF0 = set([]) : <type 'set'>
==================================================
set2 = set1 | set1                                                      # STEP 10
ACTION: set2 = set1 | set1 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set2 = None : <type 'NoneType'>
set_REF1 = set([]) : <type 'set'>
set_REF2 = None : <type 'NoneType'>
=> set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF2 = set_REF1 | set_REF1 
=> set_REF2 = set([]) : <type 'set'>
==================================================
set3 = set4 & set4                                                      # STEP 11
ACTION: set3 = set4 & set4 
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set3 = None : <type 'NoneType'>
set_REF4 = set([]) : <type 'set'>
set_REF3 = None : <type 'NoneType'>
=> set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF3 = set_REF4 & set_REF4 
=> set_REF3 = set([]) : <type 'set'>
==================================================
list2 <= list2                                                          # STEP 12
ACTION: list2 <= list2 
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF2 = [] : <type 'list'>
REFERENCE ACTION: list_REF2 <= list_REF2 
==================================================
result = list2 != list2                                                 # STEP 13
ACTION: result = list2 != list2 
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF2 = [] : <type 'list'>
REFERENCE ACTION: result_REF = list_REF2 != list_REF2 
==================================================
set1 = set2 | set4                                                      # STEP 14
ACTION: set1 = set2 | set4 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF2 = set([]) : <type 'set'>
set_REF4 = set([]) : <type 'set'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1 = set_REF2 | set_REF4 
==================================================
ival7 = 16                                                              # STEP 15
ACTION: ival7 = 16 
ival7 = None : <type 'NoneType'>
=> ival7 = 16 : <type 'int'>
==================================================
sval9 = 'Y'                                                             # STEP 16
ACTION: sval9 = 'Y' 
sval9 = None : <type 'NoneType'>
=> sval9 = 'Y' : <type 'str'>
==================================================
dict1 = sortedcontainers.SortedDict()                                   # STEP 17
ACTION: dict1 = sortedcontainers.SortedDict() 
dict1 = None : <type 'NoneType'>
dict_REF1 = None : <type 'NoneType'>
=> dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF1 = {} 
=> dict_REF1 = {} : <type 'dict'>
==================================================
set0 ^= set0                                                            # STEP 18
ACTION: set0 ^= set0 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF0 ^= set_REF0 
==================================================
ival0 = 18                                                              # STEP 19
ACTION: ival0 = 18 
ival0 = None : <type 'NoneType'>
=> ival0 = 18 : <type 'int'>
==================================================
repr(dict1)                                                             # STEP 20
ACTION: repr(dict1) 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: repr(dict_REF1) 
==================================================
list2 > list2                                                           # STEP 21
ACTION: list2 > list2 
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF2 = [] : <type 'list'>
REFERENCE ACTION: list_REF2 > list_REF2 
==================================================
val9 = ival7                                                            # STEP 22
ACTION: val9 = ival7 
ival7 = 16 : <type 'int'>
val9 = None : <type 'NoneType'>
=> val9 = 16 : <type 'int'>
==================================================
set4 = set0 ^ set3                                                      # STEP 23
ACTION: set4 = set0 ^ set3 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
set_REF3 = set([]) : <type 'set'>
set_REF4 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF4 = set_REF0 ^ set_REF3 
==================================================
set2 = set4 - set1                                                      # STEP 24
ACTION: set2 = set4 - set1 
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF4 = set([]) : <type 'set'>
set_REF1 = set([]) : <type 'set'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF2 = set_REF4 - set_REF1 
==================================================
set2.islice(start=None,stop=None)                                       # STEP 25
ACTION: set2.islice(start=None,stop=None) 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF2.islice(start=None,stop=None) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'islice'
==================================================
val6 = ival7                                                            # STEP 26
ACTION: val6 = ival7 
ival7 = 16 : <type 'int'>
val6 = None : <type 'NoneType'>
=> val6 = 16 : <type 'int'>
==================================================
setList(list2,ival0,val9)                                               # STEP 27
ACTION: setList(list2,ival0,val9) 
ival0 = 18 : <type 'int'>
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val9 = 16 : <type 'int'>
list_REF2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: sortListSet(list_REF2,ival0,val9) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list assignment index out of range
==================================================
repr(set1)                                                              # STEP 28
ACTION: repr(set1) 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: repr(set_REF1) 
==================================================
setListSlice(list2,ival0,ival7,list2)                                   # STEP 29
ACTION: setListSlice(list2,ival0,ival7,list2) 
ival0 = 18 : <type 'int'>
ival7 = 16 : <type 'int'>
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF2 = [] : <type 'list'>
REFERENCE ACTION: sortListSetSlice(list_REF2,ival0,ival7,list_REF2) 
==================================================
set4.islice(start=ival0,stop=ival7)                                     # STEP 30
ACTION: set4.islice(start=ival0,stop=ival7) 
ival0 = 18 : <type 'int'>
ival7 = 16 : <type 'int'>
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF4 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF4.islice(start=ival0,stop=ival7) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'islice'
==================================================
list2 > list2                                                           # STEP 31
ACTION: list2 > list2 
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF2 = [] : <type 'list'>
REFERENCE ACTION: list_REF2 > list_REF2 
==================================================
set4.islice(start=ival7,stop=ival0,reverse=True)                        # STEP 32
ACTION: set4.islice(start=ival7,stop=ival0,reverse=True) 
ival7 = 16 : <type 'int'>
ival0 = 18 : <type 'int'>
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF4 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF4.islice(start=ival7,stop=ival0,reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'islice'
==================================================
dict1.islice(start=None,stop=ival0)                                     # STEP 33
ACTION: dict1.islice(start=None,stop=ival0) 
ival0 = 18 : <type 'int'>
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF1.islice(start=None,stop=ival0) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'islice'
==================================================
set2.islice(start=ival0,stop=ival0)                                     # STEP 34
ACTION: set2.islice(start=ival0,stop=ival0) 
ival0 = 18 : <type 'int'>
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF2.islice(start=ival0,stop=ival0) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'islice'
==================================================
list2 > list2                                                           # STEP 35
ACTION: list2 > list2 
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF2 = [] : <type 'list'>
REFERENCE ACTION: list_REF2 > list_REF2 
==================================================
set3 = set2 & set4                                                      # STEP 36
ACTION: set3 = set2 & set4 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF2 = set([]) : <type 'set'>
set_REF4 = set([]) : <type 'set'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF3 = set_REF2 & set_REF4 
==================================================
dict4 = sortedcontainers.SortedDict()                                   # STEP 37
ACTION: dict4 = sortedcontainers.SortedDict() 
dict4 = None : <type 'NoneType'>
dict_REF4 = None : <type 'NoneType'>
=> dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF4 = {} 
=> dict_REF4 = {} : <type 'dict'>
==================================================
set1.irange(minimum=val6,maximum=val6,inclusive=(False,True),reverse=True)  # STEP 38
ACTION: set1.irange(minimum=val6,maximum=val6,inclusive=(False,True),reverse=True) 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
val6 = 16 : <type 'int'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1.irange(minimum=val6,maximum=val6,inclusive=(False,True),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'irange'
==================================================
dict4.get(val6,val6)                                                    # STEP 39
ACTION: dict4.get(val6,val6) 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val6 = 16 : <type 'int'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF4.get(val6,val6) 
==================================================
list2.add(val9)                                                         # STEP 40
ACTION: list2.add(val9) 
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val9 = 16 : <type 'int'>
list_REF2 = [] : <type 'list'>
=> list2 = SortedList([16], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: sortListAdd(list_REF2,val9) 
=> list_REF2 = [16] : <type 'list'>
==================================================
list2.extend(list2)                                                     # STEP 41
ACTION: list2.extend(list2) 
list2 = SortedList([16], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF2 = [16] : <type 'list'>
=> list2 = SortedList([16, 16], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: sortListExtend(list_REF2,list_REF2) 
=> list_REF2 = [16, 16] : <type 'list'>
==================================================
set4 &= set2                                                            # STEP 42
ACTION: set4 &= set2 
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF4 = set([]) : <type 'set'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF4 &= set_REF2 
==================================================
val0 = ival7                                                            # STEP 43
ACTION: val0 = ival7 
ival7 = 16 : <type 'int'>
val0 = None : <type 'NoneType'>
=> val0 = 16 : <type 'int'>
==================================================
set1 = set3 | set0                                                      # STEP 44
ACTION: set1 = set3 | set0 
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF3 = set([]) : <type 'set'>
set_REF0 = set([]) : <type 'set'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1 = set_REF3 | set_REF0 
==================================================
sval1 = 'D'                                                             # STEP 45
ACTION: sval1 = 'D' 
sval1 = None : <type 'NoneType'>
=> sval1 = 'D' : <type 'str'>
==================================================
dict4 = dict1.copy()                                                    # STEP 46
ACTION: dict4 = dict1.copy() 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {} : <type 'dict'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF4 = dict_REF1.copy() 
==================================================
dict3 = dict4.copy()                                                    # STEP 47
ACTION: dict3 = dict4.copy() 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict3 = None : <type 'NoneType'>
dict_REF4 = {} : <type 'dict'>
dict_REF3 = None : <type 'NoneType'>
=> dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF3 = dict_REF4.copy() 
=> dict_REF3 = {} : <type 'dict'>
==================================================
result = (dict4.values()).count(val6)                                   # STEP 48
ACTION: result = (dict4.values()).count(val6)  
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val6 = 16 : <type 'int'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = (dict_REF4.values()).count(val6)  
==================================================
set4 = set2 ^ set0                                                      # STEP 49
ACTION: set4 = set2 ^ set0 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF2 = set([]) : <type 'set'>
set_REF0 = set([]) : <type 'set'>
set_REF4 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF4 = set_REF2 ^ set_REF0 
==================================================
set2 = set2 - set2                                                      # STEP 50
ACTION: set2 = set2 - set2 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF2 = set_REF2 - set_REF2 
==================================================
result = set4.issuperset(set3)                                          # STEP 51
ACTION: result = set4.issuperset(set3) 
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF4 = set([]) : <type 'set'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = set_REF4.issuperset(set_REF3) 
==================================================
set3 = set0 & set3                                                      # STEP 52
ACTION: set3 = set0 & set3 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF3 = set_REF0 & set_REF3 
==================================================
dict1.get(val6,None)                                                    # STEP 53
ACTION: dict1.get(val6,None) 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val6 = 16 : <type 'int'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF1.get(val6,None) 
==================================================
dict1.update(dict3)                                                     # STEP 54
ACTION: dict1.update(dict3) 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {} : <type 'dict'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF1.update(dict_REF3) 
==================================================
set1 ^= set2                                                            # STEP 55
ACTION: set1 ^= set2 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF1 = set([]) : <type 'set'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1 ^= set_REF2 
==================================================
val8 = sval1                                                            # STEP 56
ACTION: val8 = sval1 
sval1 = 'D' : <type 'str'>
val8 = None : <type 'NoneType'>
=> val8 = 'D' : <type 'str'>
==================================================
set3 > set0                                                             # STEP 57
ACTION: set3 > set0 
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF3 = set([]) : <type 'set'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF3 > set_REF0 
==================================================
setList(list2,ival7,val8)                                               # STEP 58
ACTION: setList(list2,ival7,val8) 
ival7 = 16 : <type 'int'>
list2 = SortedList([16, 16], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val8 = 'D' : <type 'str'>
list_REF2 = [16, 16] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: sortListSet(list_REF2,ival7,val8) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list assignment index out of range
==================================================
result = dict3.pop(val6,None)                                           # STEP 59
ACTION: result = dict3.pop(val6,None) 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val6 = 16 : <type 'int'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = dict_REF3.pop(val6,None) 
==================================================
set2 = set1 ^ set0                                                      # STEP 60
ACTION: set2 = set1 ^ set0 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF1 = set([]) : <type 'set'>
set_REF0 = set([]) : <type 'set'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF2 = set_REF1 ^ set_REF0 
==================================================
set3.irange(minimum=val0,maximum=val8,inclusive=(True,False),reverse=True)  # STEP 61
ACTION: set3.irange(minimum=val0,maximum=val8,inclusive=(True,False),reverse=True) 
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
val0 = 16 : <type 'int'>
val8 = 'D' : <type 'str'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF3.irange(minimum=val0,maximum=val8,inclusive=(True,False),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'irange'
==================================================
set3 = sortedcontainers.SortedSet()                                     # STEP 62
ACTION: set3 = sortedcontainers.SortedSet() 
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF3 = set([]) 
==================================================
set0 = sortedcontainers.SortedSet()                                     # STEP 63
ACTION: set0 = sortedcontainers.SortedSet() 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF0 = set([]) 
==================================================
dict2.get(val8,None)                                                    # STEP 64
ACTION: dict2.get(val8,None) 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val8 = 'D' : <type 'str'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF2.get(val8,None) 
==================================================
dict4.islice(start=None,stop=None)                                      # STEP 65
ACTION: dict4.islice(start=None,stop=None) 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF4.islice(start=None,stop=None) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'islice'
==================================================
dict0 = sortedcontainers.SortedDict()                                   # STEP 66
ACTION: dict0 = sortedcontainers.SortedDict() 
dict0 = None : <type 'NoneType'>
dict_REF0 = None : <type 'NoneType'>
=> dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF0 = {} 
=> dict_REF0 = {} : <type 'dict'>
==================================================
dict0.get(val0,val0)                                                    # STEP 67
ACTION: dict0.get(val0,val0) 
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val0 = 16 : <type 'int'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF0.get(val0,val0) 
==================================================
set4 = set4 | set3                                                      # STEP 68
ACTION: set4 = set4 | set3 
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF4 = set([]) : <type 'set'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF4 = set_REF4 | set_REF3 
==================================================
set1 = set0 ^ set2                                                      # STEP 69
ACTION: set1 = set0 ^ set2 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
set_REF2 = set([]) : <type 'set'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1 = set_REF0 ^ set_REF2 
==================================================
dict1.islice(start=ival7,stop=ival7,reverse=True)                       # STEP 70
ACTION: dict1.islice(start=ival7,stop=ival7,reverse=True) 
ival7 = 16 : <type 'int'>
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF1.islice(start=ival7,stop=ival7,reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'islice'
==================================================
list2.update(list2)                                                     # STEP 71
ACTION: list2.update(list2) 
list2 = SortedList([16, 16], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF2 = [16, 16] : <type 'list'>
=> list2 = SortedList([16, 16, 16, 16], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: sortListMultiAdd(list_REF2,list_REF2) 
=> list_REF2 = [16, 16, 16, 16] : <type 'list'>
==================================================
set2 &= set0                                                            # STEP 72
ACTION: set2 &= set0 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF2 = set([]) : <type 'set'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF2 &= set_REF0 
==================================================
dict4 = sortedcontainers.SortedDict()                                   # STEP 73
ACTION: dict4 = sortedcontainers.SortedDict() 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF4 = {} 
==================================================
result = dict2.setdefault(val8,val9)                                    # STEP 74
ACTION: result = dict2.setdefault(val8,val9) 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val8 = 'D' : <type 'str'>
val9 = 16 : <type 'int'>
dict_REF2 = {} : <type 'dict'>
=> dict2 = SortedDict(None, 1000, {'D': 16}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: result_REF = dict_REF2.setdefault(val8,val9) 
=> dict_REF2 = {'D': 16} : <type 'dict'>
==================================================
list4 = sortedcontainers.SortedList()                                   # STEP 75
ACTION: list4 = sortedcontainers.SortedList() 
list4 = None : <type 'NoneType'>
list_REF4 = None : <type 'NoneType'>
=> list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: list_REF4 = [] 
=> list_REF4 = [] : <type 'list'>
==================================================
set2 = set0 - set1                                                      # STEP 76
ACTION: set2 = set0 - set1 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
set_REF1 = set([]) : <type 'set'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF2 = set_REF0 - set_REF1 
==================================================
result = dict0 != dict3                                                 # STEP 77
ACTION: result = dict0 != dict3 
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF0 = {} : <type 'dict'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = dict_REF0 != dict_REF3 
==================================================
set0 = set2 ^ set0                                                      # STEP 78
ACTION: set0 = set2 ^ set0 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF2 = set([]) : <type 'set'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF0 = set_REF2 ^ set_REF0 
==================================================
set2.islice(start=None,stop=None)                                       # STEP 79
ACTION: set2.islice(start=None,stop=None) 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF2.islice(start=None,stop=None) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'islice'
==================================================
result = dict4 == dict1                                                 # STEP 80
ACTION: result = dict4 == dict1 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF4 = {} : <type 'dict'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = dict_REF4 == dict_REF1 
==================================================
dict1 = sortedcontainers.SortedDict()                                   # STEP 81
ACTION: dict1 = sortedcontainers.SortedDict() 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF1 = {} 
==================================================
set2 = set0 & set1                                                      # STEP 82
ACTION: set2 = set0 & set1 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
set_REF1 = set([]) : <type 'set'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF2 = set_REF0 & set_REF1 
==================================================
result = list2.count(val0)                                              # STEP 83
ACTION: result = list2.count(val0) 
list2 = SortedList([16, 16, 16, 16], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val0 = 16 : <type 'int'>
list_REF2 = [16, 16, 16, 16] : <type 'list'>
REFERENCE ACTION: result_REF = list_REF2.count(val0) 
==================================================
set3 = set2 | set3                                                      # STEP 84
ACTION: set3 = set2 | set3 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF2 = set([]) : <type 'set'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF3 = set_REF2 | set_REF3 
==================================================
list2.extend(list4)                                                     # STEP 85
ACTION: list2.extend(list4) 
list2 = SortedList([16, 16, 16, 16], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF2 = [16, 16, 16, 16] : <type 'list'>
list_REF4 = [] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x120beab90>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 702811, in act11964
    self.p_list[2].extend(self.p_list[4])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 42
STOPPING TESTING DUE TO TIMEOUT
24.0403257076 PERCENT COVERED
60.2078909874 TOTAL RUNTIME
34 EXECUTED
3328 TOTAL TEST OPERATIONS
1.81277537346 TIME SPENT EXECUTING TEST OPERATIONS
54.800112009 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
1.63981533051 TIME SPENT CHECKING PROPERTIES
3.45259070396 TOTAL TIME SPENT RUNNING SUT
0.491778373718 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
sval0 = 'W'                                                              # STEP 0
set4 = sortedcontainers.SortedSet()                                      # STEP 1
list2 = sortedcontainers.SortedList()                                    # STEP 2
list2.update(list2)                                                      # STEP 3
dict2 = sortedcontainers.SortedDict()                                    # STEP 4
result = dict2 != dict2                                                  # STEP 5
repr(list2)                                                              # STEP 6
set1 = sortedcontainers.SortedSet()                                      # STEP 7
result = dict2 == dict2                                                  # STEP 8
set0 = set1 & set1                                                       # STEP 9
set2 = set1 | set1                                                      # STEP 10
set3 = set4 & set4                                                      # STEP 11
list2 <= list2                                                          # STEP 12
result = list2 != list2                                                 # STEP 13
set1 = set2 | set4                                                      # STEP 14
ival7 = 16                                                              # STEP 15
sval9 = 'Y'                                                             # STEP 16
dict1 = sortedcontainers.SortedDict()                                   # STEP 17
set0 ^= set0                                                            # STEP 18
ival0 = 18                                                              # STEP 19
repr(dict1)                                                             # STEP 20
list2 > list2                                                           # STEP 21
val9 = ival7                                                            # STEP 22
set4 = set0 ^ set3                                                      # STEP 23
set2 = set4 - set1                                                      # STEP 24
set2.islice(start=None,stop=None)                                       # STEP 25
val6 = ival7                                                            # STEP 26
setList(list2,ival0,val9)                                               # STEP 27
repr(set1)                                                              # STEP 28
setListSlice(list2,ival0,ival7,list2)                                   # STEP 29
set4.islice(start=ival0,stop=ival7)                                     # STEP 30
list2 > list2                                                           # STEP 31
set4.islice(start=ival7,stop=ival0,reverse=True)                        # STEP 32
dict1.islice(start=None,stop=ival0)                                     # STEP 33
set2.islice(start=ival0,stop=ival0)                                     # STEP 34
list2 > list2                                                           # STEP 35
set3 = set2 & set4                                                      # STEP 36
dict4 = sortedcontainers.SortedDict()                                   # STEP 37
set1.irange(minimum=val6,maximum=val6,inclusive=(False,True),reverse=True)  # STEP 38
dict4.get(val6,val6)                                                    # STEP 39
list2.add(val9)                                                         # STEP 40
list2.extend(list2)                                                     # STEP 41
set4 &= set2                                                            # STEP 42
val0 = ival7                                                            # STEP 43
set1 = set3 | set0                                                      # STEP 44
sval1 = 'D'                                                             # STEP 45
dict4 = dict1.copy()                                                    # STEP 46
dict3 = dict4.copy()                                                    # STEP 47
result = (dict4.values()).count(val6)                                   # STEP 48
set4 = set2 ^ set0                                                      # STEP 49
set2 = set2 - set2                                                      # STEP 50
result = set4.issuperset(set3)                                          # STEP 51
set3 = set0 & set3                                                      # STEP 52
dict1.get(val6,None)                                                    # STEP 53
dict1.update(dict3)                                                     # STEP 54
set1 ^= set2                                                            # STEP 55
val8 = sval1                                                            # STEP 56
set3 > set0                                                             # STEP 57
setList(list2,ival7,val8)                                               # STEP 58
result = dict3.pop(val6,None)                                           # STEP 59
set2 = set1 ^ set0                                                      # STEP 60
set3.irange(minimum=val0,maximum=val8,inclusive=(True,False),reverse=True)  # STEP 61
set3 = sortedcontainers.SortedSet()                                     # STEP 62
set0 = sortedcontainers.SortedSet()                                     # STEP 63
dict2.get(val8,None)                                                    # STEP 64
dict4.islice(start=None,stop=None)                                      # STEP 65
dict0 = sortedcontainers.SortedDict()                                   # STEP 66
dict0.get(val0,val0)                                                    # STEP 67
set4 = set4 | set3                                                      # STEP 68
set1 = set0 ^ set2                                                      # STEP 69
dict1.islice(start=ival7,stop=ival7,reverse=True)                       # STEP 70
list2.update(list2)                                                     # STEP 71
set2 &= set0                                                            # STEP 72
dict4 = sortedcontainers.SortedDict()                                   # STEP 73
result = dict2.setdefault(val8,val9)                                    # STEP 74
list4 = sortedcontainers.SortedList()                                   # STEP 75
set2 = set0 - set1                                                      # STEP 76
result = dict0 != dict3                                                 # STEP 77
set0 = set2 ^ set0                                                      # STEP 78
set2.islice(start=None,stop=None)                                       # STEP 79
result = dict4 == dict1                                                 # STEP 80
dict1 = sortedcontainers.SortedDict()                                   # STEP 81
set2 = set0 & set1                                                      # STEP 82
result = list2.count(val0)                                              # STEP 83
set3 = set2 | set3                                                      # STEP 84
list2.extend(list4)                                                     # STEP 85
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x120beab90>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 702811, in act11964
    self.p_list[2].extend(self.p_list[4])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
600 BRANCHES COVERED
459 STATEMENTS COVERED

Random testing using config=Config(noExceptionMatch=False, generalize=False, localize=False, speed='FAST', probs='locsample.probs', LOCBaseline=0.2, noAlphaConvert=False, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, html=None, keepLast=False, stopWhenNoCoverage=None, generateLOC=None, computeFeatureStats=False, Pmutate=0.0, timeout=60, output='failure.10421.test', markov=None, noSwarmDependencies=False, startExploit=0.0, maxMustHitBranch=None, useHints=False, silentFail=False, highLowSwarm=None, maxMustHitStatement=None, progress=False, postCover=False, swarmLength=None, noCover=False, noEnumerateEnabled=False, full=True, swarmP=0.5, coverFile='coverage.out', markovP=1.0, swarmProbs=None, genDepth=None, exploitCeiling=0.1, logging=None, noCheck=False, throughput=False, uncaught=False, swarmSwitch=None, verbose=False, reducePool=False, exploit=None, fastQuickAnalysis=False, total=False, verboseExploit=False, swarm=True, sequenceP=1.0, biasLOC=None, timedProgress=30, relax=False, ddmin=False, stutter=None, readQuick=False, verboseActions=False, quickAnalysis=False, noReassign=False, sequenceSize=3, LOCProbs=False, sequencesFromTests=None, maxTests=-1, trackMaxCoverage=None, useQuickSequences=False, exploitBestHint=1, failedLogging=None, stopWhenStatements=None, greedyStutter=False, seed=None, stopWhenHitStatement=None, uniqueValuesAnalysis=False, normalize=False, startExploitStall=0, enumerateEnabled=False, internal=False, profile=False, multiple=True, stopWhenBranches=None, running=False, compareFails=False, Pcrossover=0.2, stopWhenHitBranch=None, depth=100, showActions=False)
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x11e5d0c68>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 702105, in act11952
    self.p_list[0].extend(self.p_list[2])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
Original test has 79 steps

SAVING TEST AS failure.10421.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
list0 = sortedcontainers.SortedList()                                    # STEP 0
ACTION: list0 = sortedcontainers.SortedList() 
list0 = None : <type 'NoneType'>
list_REF0 = None : <type 'NoneType'>
=> list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: list_REF0 = [] 
=> list_REF0 = [] : <type 'list'>
==================================================
dict3 = sortedcontainers.SortedDict()                                    # STEP 1
ACTION: dict3 = sortedcontainers.SortedDict() 
dict3 = None : <type 'NoneType'>
dict_REF3 = None : <type 'NoneType'>
=> dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF3 = {} 
=> dict_REF3 = {} : <type 'dict'>
==================================================
sval9 = 'p'                                                              # STEP 2
ACTION: sval9 = 'p' 
sval9 = None : <type 'NoneType'>
=> sval9 = 'p' : <type 'str'>
==================================================
dict1 = sortedcontainers.SortedDict()                                    # STEP 3
ACTION: dict1 = sortedcontainers.SortedDict() 
dict1 = None : <type 'NoneType'>
dict_REF1 = None : <type 'NoneType'>
=> dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF1 = {} 
=> dict_REF1 = {} : <type 'dict'>
==================================================
set4 = sortedcontainers.SortedSet()                                      # STEP 4
ACTION: set4 = sortedcontainers.SortedSet() 
set4 = None : <type 'NoneType'>
set_REF4 = None : <type 'NoneType'>
=> set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF4 = set([]) 
=> set_REF4 = set([]) : <type 'set'>
==================================================
result = len(dict3.keys())                                               # STEP 5
ACTION: result = len(dict3.keys())  
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF3.keys())  
==================================================
dict2 = sortedcontainers.SortedDict()                                    # STEP 6
ACTION: dict2 = sortedcontainers.SortedDict() 
dict2 = None : <type 'NoneType'>
dict_REF2 = None : <type 'NoneType'>
=> dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF2 = {} 
=> dict_REF2 = {} : <type 'dict'>
==================================================
sval5 = sval9 + sval9                                                    # STEP 7
ACTION: sval5 = sval9 + sval9 
sval9 = 'p' : <type 'str'>
sval5 = None : <type 'NoneType'>
=> sval5 = 'pp' : <type 'str'>
==================================================
result = len(dict1)                                                      # STEP 8
ACTION: result = len(dict1) 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF1) 
==================================================
dict3 = sortedcontainers.SortedDict()                                    # STEP 9
ACTION: dict3 = sortedcontainers.SortedDict() 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF3 = {} 
==================================================
sval2 = sval5 + sval5                                                   # STEP 10
ACTION: sval2 = sval5 + sval5 
sval5 = 'pp' : <type 'str'>
sval2 = None : <type 'NoneType'>
=> sval2 = 'pppp' : <type 'str'>
==================================================
set0 = set4.copy()                                                      # STEP 11
ACTION: set0 = set4.copy() 
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set0 = None : <type 'NoneType'>
set_REF4 = set([]) : <type 'set'>
set_REF0 = None : <type 'NoneType'>
=> set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF0 = set_REF4.copy() 
=> set_REF0 = set([]) : <type 'set'>
==================================================
set2 = sortedcontainers.SortedSet()                                     # STEP 12
ACTION: set2 = sortedcontainers.SortedSet() 
set2 = None : <type 'NoneType'>
set_REF2 = None : <type 'NoneType'>
=> set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF2 = set([]) 
=> set_REF2 = set([]) : <type 'set'>
==================================================
list0 >= list0                                                          # STEP 13
ACTION: list0 >= list0 
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF0 = [] : <type 'list'>
REFERENCE ACTION: list_REF0 >= list_REF0 
==================================================
list0.extend(list0)                                                     # STEP 14
ACTION: list0.extend(list0) 
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF0 = [] : <type 'list'>
REFERENCE ACTION: sortListExtend(list_REF0,list_REF0) 
==================================================
ival5 = 10                                                              # STEP 15
ACTION: ival5 = 10 
ival5 = None : <type 'NoneType'>
=> ival5 = 10 : <type 'int'>
==================================================
result = list0.pop(ival5)                                               # STEP 16
ACTION: result = list0.pop(ival5) 
ival5 = 10 : <type 'int'>
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> pop index out of range
REFERENCE ACTION: result_REF = list_REF0.pop(ival5) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> pop from empty list
==================================================
set3 = set2 & set2                                                      # STEP 17
ACTION: set3 = set2 & set2 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set3 = None : <type 'NoneType'>
set_REF2 = set([]) : <type 'set'>
set_REF3 = None : <type 'NoneType'>
=> set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF3 = set_REF2 & set_REF2 
=> set_REF3 = set([]) : <type 'set'>
==================================================
set4 = sortedcontainers.SortedSet()                                     # STEP 18
ACTION: set4 = sortedcontainers.SortedSet() 
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF4 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF4 = set([]) 
==================================================
dict4 = sortedcontainers.SortedDict()                                   # STEP 19
ACTION: dict4 = sortedcontainers.SortedDict() 
dict4 = None : <type 'NoneType'>
dict_REF4 = None : <type 'NoneType'>
=> dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF4 = {} 
=> dict_REF4 = {} : <type 'dict'>
==================================================
result = len(dict2.keys())                                              # STEP 20
ACTION: result = len(dict2.keys())  
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF2.keys())  
==================================================
setListSlice(list0,ival5,ival5,list0)                                   # STEP 21
ACTION: setListSlice(list0,ival5,ival5,list0) 
ival5 = 10 : <type 'int'>
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF0 = [] : <type 'list'>
REFERENCE ACTION: sortListSetSlice(list_REF0,ival5,ival5,list_REF0) 
==================================================
list0 >= list0                                                          # STEP 22
ACTION: list0 >= list0 
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF0 = [] : <type 'list'>
REFERENCE ACTION: list_REF0 >= list_REF0 
==================================================
result = list0.pop(ival5)                                               # STEP 23
ACTION: result = list0.pop(ival5) 
ival5 = 10 : <type 'int'>
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> pop index out of range
REFERENCE ACTION: result_REF = list_REF0.pop(ival5) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> pop from empty list
==================================================
set1 = sortedcontainers.SortedSet()                                     # STEP 24
ACTION: set1 = sortedcontainers.SortedSet() 
set1 = None : <type 'NoneType'>
set_REF1 = None : <type 'NoneType'>
=> set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF1 = set([]) 
=> set_REF1 = set([]) : <type 'set'>
==================================================
set2 = set1 & set0                                                      # STEP 25
ACTION: set2 = set1 & set0 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF1 = set([]) : <type 'set'>
set_REF0 = set([]) : <type 'set'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF2 = set_REF1 & set_REF0 
==================================================
dict1 = sortedcontainers.SortedDict()                                   # STEP 26
ACTION: dict1 = sortedcontainers.SortedDict() 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF1 = {} 
==================================================
sval7 = sval9 + sval2                                                   # STEP 27
ACTION: sval7 = sval9 + sval2 
sval9 = 'p' : <type 'str'>
sval2 = 'pppp' : <type 'str'>
sval7 = None : <type 'NoneType'>
=> sval7 = 'ppppp' : <type 'str'>
==================================================
result = sorted(list(dict3.keys()))                                     # STEP 28
ACTION: result = sorted(list(dict3.keys())) 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = sorted(list(dict_REF3.keys())) 
==================================================
setListSlice(list0,ival5,ival5,list0)                                   # STEP 29
ACTION: setListSlice(list0,ival5,ival5,list0) 
ival5 = 10 : <type 'int'>
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF0 = [] : <type 'list'>
REFERENCE ACTION: sortListSetSlice(list_REF0,ival5,ival5,list_REF0) 
==================================================
sval0 = 'h'                                                             # STEP 30
ACTION: sval0 = 'h' 
sval0 = None : <type 'NoneType'>
=> sval0 = 'h' : <type 'str'>
==================================================
dict2 = sortedcontainers.SortedDict()                                   # STEP 31
ACTION: dict2 = sortedcontainers.SortedDict() 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF2 = {} 
==================================================
result = list0.pop(ival5)                                               # STEP 32
ACTION: result = list0.pop(ival5) 
ival5 = 10 : <type 'int'>
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> pop index out of range
REFERENCE ACTION: result_REF = list_REF0.pop(ival5) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> pop from empty list
==================================================
set4.islice(start=None,stop=ival5)                                      # STEP 33
ACTION: set4.islice(start=None,stop=ival5) 
ival5 = 10 : <type 'int'>
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF4 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF4.islice(start=None,stop=ival5) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'islice'
==================================================
setListSlice(list0,ival5,ival5,list0)                                   # STEP 34
ACTION: setListSlice(list0,ival5,ival5,list0) 
ival5 = 10 : <type 'int'>
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF0 = [] : <type 'list'>
REFERENCE ACTION: sortListSetSlice(list_REF0,ival5,ival5,list_REF0) 
==================================================
setListSlice(list0,ival5,ival5,list0)                                   # STEP 35
ACTION: setListSlice(list0,ival5,ival5,list0) 
ival5 = 10 : <type 'int'>
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF0 = [] : <type 'list'>
REFERENCE ACTION: sortListSetSlice(list_REF0,ival5,ival5,list_REF0) 
==================================================
dict3 = sortedcontainers.SortedDict()                                   # STEP 36
ACTION: dict3 = sortedcontainers.SortedDict() 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF3 = {} 
==================================================
dict0 = dict1.copy()                                                    # STEP 37
ACTION: dict0 = dict1.copy() 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict0 = None : <type 'NoneType'>
dict_REF1 = {} : <type 'dict'>
dict_REF0 = None : <type 'NoneType'>
=> dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF0 = dict_REF1.copy() 
=> dict_REF0 = {} : <type 'dict'>
==================================================
result = list0.pop(ival5)                                               # STEP 38
ACTION: result = list0.pop(ival5) 
ival5 = 10 : <type 'int'>
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> pop index out of range
REFERENCE ACTION: result_REF = list_REF0.pop(ival5) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> pop from empty list
==================================================
ival5 = 8                                                               # STEP 39
ACTION: ival5 = 8 
ival5 = 10 : <type 'int'>
=> ival5 = 8 : <type 'int'>
==================================================
sval9 = sval0 + sval2                                                   # STEP 40
ACTION: sval9 = sval0 + sval2 
sval0 = 'h' : <type 'str'>
sval2 = 'pppp' : <type 'str'>
sval9 = 'p' : <type 'str'>
=> sval9 = 'hpppp' : <type 'str'>
==================================================
result = len(dict2)                                                     # STEP 41
ACTION: result = len(dict2) 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF2) 
==================================================
sval5 = sval5 + sval9                                                   # STEP 42
ACTION: sval5 = sval5 + sval9 
sval5 = 'pp' : <type 'str'>
sval9 = 'hpppp' : <type 'str'>
=> sval5 = 'pphpppp' : <type 'str'>
==================================================
dict1 = sortedcontainers.SortedDict()                                   # STEP 43
ACTION: dict1 = sortedcontainers.SortedDict() 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF1 = {} 
==================================================
setListSlice(list0,ival5,ival5,list0)                                   # STEP 44
ACTION: setListSlice(list0,ival5,ival5,list0) 
ival5 = 8 : <type 'int'>
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF0 = [] : <type 'list'>
REFERENCE ACTION: sortListSetSlice(list_REF0,ival5,ival5,list_REF0) 
==================================================
sval6 = 'k'                                                             # STEP 45
ACTION: sval6 = 'k' 
sval6 = None : <type 'NoneType'>
=> sval6 = 'k' : <type 'str'>
==================================================
setListSlice(list0,ival5,ival5,list0)                                   # STEP 46
ACTION: setListSlice(list0,ival5,ival5,list0) 
ival5 = 8 : <type 'int'>
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF0 = [] : <type 'list'>
REFERENCE ACTION: sortListSetSlice(list_REF0,ival5,ival5,list_REF0) 
==================================================
dict4.update(dict3)                                                     # STEP 47
ACTION: dict4.update(dict3) 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF4 = {} : <type 'dict'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF4.update(dict_REF3) 
==================================================
set4.update(list0)                                                      # STEP 48
ACTION: set4.update(list0) 
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
list_REF0 = [] : <type 'list'>
set_REF4 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF4.update(list_REF0) 
==================================================
list2 = sortedcontainers.SortedList()                                   # STEP 49
ACTION: list2 = sortedcontainers.SortedList() 
list2 = None : <type 'NoneType'>
list_REF2 = None : <type 'NoneType'>
=> list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: list_REF2 = [] 
=> list_REF2 = [] : <type 'list'>
==================================================
val2 = sval7                                                            # STEP 50
ACTION: val2 = sval7 
sval7 = 'ppppp' : <type 'str'>
val2 = None : <type 'NoneType'>
=> val2 = 'ppppp' : <type 'str'>
==================================================
set0.irange(minimum=val2,maximum=val2,inclusive=(False,True),reverse=True)  # STEP 51
ACTION: set0.irange(minimum=val2,maximum=val2,inclusive=(False,True),reverse=True) 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
val2 = 'ppppp' : <type 'str'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF0.irange(minimum=val2,maximum=val2,inclusive=(False,True),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'irange'
==================================================
dict4 = dict3.copy()                                                    # STEP 52
ACTION: dict4 = dict3.copy() 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF4 = dict_REF3.copy() 
==================================================
set2 &= set2                                                            # STEP 53
ACTION: set2 &= set2 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF2 &= set_REF2 
==================================================
val4 = sval2                                                            # STEP 54
ACTION: val4 = sval2 
sval2 = 'pppp' : <type 'str'>
val4 = None : <type 'NoneType'>
=> val4 = 'pppp' : <type 'str'>
==================================================
set2 > set1                                                             # STEP 55
ACTION: set2 > set1 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF2 = set([]) : <type 'set'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF2 > set_REF1 
==================================================
set0.islice(start=ival5,stop=ival5)                                     # STEP 56
ACTION: set0.islice(start=ival5,stop=ival5) 
ival5 = 8 : <type 'int'>
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF0.islice(start=ival5,stop=ival5) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'islice'
==================================================
dict0.get(val2,val2)                                                    # STEP 57
ACTION: dict0.get(val2,val2) 
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val2 = 'ppppp' : <type 'str'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF0.get(val2,val2) 
==================================================
dict4.get(val4,val2)                                                    # STEP 58
ACTION: dict4.get(val4,val2) 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val4 = 'pppp' : <type 'str'>
val2 = 'ppppp' : <type 'str'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF4.get(val4,val2) 
==================================================
ival1 = ival5 - ival5                                                   # STEP 59
ACTION: ival1 = ival5 - ival5 
ival5 = 8 : <type 'int'>
ival1 = None : <type 'NoneType'>
=> ival1 = 0 : <type 'int'>
==================================================
result = len(dict3.keys())                                              # STEP 60
ACTION: result = len(dict3.keys())  
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF3.keys())  
==================================================
result = list2.pop(ival1)                                               # STEP 61
ACTION: result = list2.pop(ival1) 
ival1 = 0 : <type 'int'>
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> pop index out of range
REFERENCE ACTION: result_REF = list_REF2.pop(ival1) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> pop from empty list
==================================================
ival6 = 14                                                              # STEP 62
ACTION: ival6 = 14 
ival6 = None : <type 'NoneType'>
=> ival6 = 14 : <type 'int'>
==================================================
list0.irange(minimum=val4,maximum=val4,inclusive=(True,False))          # STEP 63
ACTION: list0.irange(minimum=val4,maximum=val4,inclusive=(True,False)) 
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val4 = 'pppp' : <type 'str'>
list_REF0 = [] : <type 'list'>
REFERENCE ACTION: list_REF0.irange(minimum=val4,maximum=val4,inclusive=(True,False)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
list0.append(val2)                                                      # STEP 64
ACTION: list0.append(val2) 
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val2 = 'ppppp' : <type 'str'>
list_REF0 = [] : <type 'list'>
=> list0 = SortedList(['ppppp'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: sortListAppend(list_REF0,val2) 
=> list_REF0 = ['ppppp'] : <type 'list'>
==================================================
setListSlice(list0,ival5,ival5,list2)                                   # STEP 65
ACTION: setListSlice(list0,ival5,ival5,list2) 
ival5 = 8 : <type 'int'>
list0 = SortedList(['ppppp'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF0 = ['ppppp'] : <type 'list'>
list_REF2 = [] : <type 'list'>
REFERENCE ACTION: sortListSetSlice(list_REF0,ival5,ival5,list_REF2) 
==================================================
result = sorted(list(dict4.keys()))                                     # STEP 66
ACTION: result = sorted(list(dict4.keys())) 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = sorted(list(dict_REF4.keys())) 
==================================================
dict3 = sortedcontainers.SortedDict()                                   # STEP 67
ACTION: dict3 = sortedcontainers.SortedDict() 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF3 = {} 
==================================================
result = dict2.popitem(last=False)                                      # STEP 68
ACTION: result = dict2.popitem(last=False) 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF2 = {} : <type 'dict'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.KeyError'> 'popitem(): dictionary is empty'
REFERENCE ACTION: result_REF = sortDictPopitem(dict_REF2,last=False) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.KeyError'> 
==================================================
val2 in dict3                                                           # STEP 69
ACTION: val2 in dict3 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val2 = 'ppppp' : <type 'str'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: val2 in dict_REF3 
==================================================
result = len(set0)                                                      # STEP 70
ACTION: result = len(set0) 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = len(set_REF0) 
==================================================
list2 *= ival1                                                          # STEP 71
ACTION: list2 *= ival1 
ival1 = 0 : <type 'int'>
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF2 = [] : <type 'list'>
REFERENCE ACTION: sortListMultiply(list_REF2,ival1) 
==================================================
ival8 = ival5 + ival1                                                   # STEP 72
ACTION: ival8 = ival5 + ival1 
ival5 = 8 : <type 'int'>
ival1 = 0 : <type 'int'>
ival8 = None : <type 'NoneType'>
=> ival8 = 8 : <type 'int'>
==================================================
ival7 = ival5 - ival6                                                   # STEP 73
ACTION: ival7 = ival5 - ival6 
ival5 = 8 : <type 'int'>
ival6 = 14 : <type 'int'>
ival7 = None : <type 'NoneType'>
=> ival7 = -6 : <type 'int'>
==================================================
dict0 = sortedcontainers.SortedDict()                                   # STEP 74
ACTION: dict0 = sortedcontainers.SortedDict() 
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF0 = {} 
==================================================
set0 = set2 ^ set0                                                      # STEP 75
ACTION: set0 = set2 ^ set0 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF2 = set([]) : <type 'set'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF0 = set_REF2 ^ set_REF0 
==================================================
list2.irange(minimum=val4,maximum=val2,inclusive=(True,False))          # STEP 76
ACTION: list2.irange(minimum=val4,maximum=val2,inclusive=(True,False)) 
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val4 = 'pppp' : <type 'str'>
val2 = 'ppppp' : <type 'str'>
list_REF2 = [] : <type 'list'>
REFERENCE ACTION: list_REF2.irange(minimum=val4,maximum=val2,inclusive=(True,False)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
list0.irange(minimum=val2,maximum=val2,inclusive=(True,False))          # STEP 77
ACTION: list0.irange(minimum=val2,maximum=val2,inclusive=(True,False)) 
list0 = SortedList(['ppppp'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val2 = 'ppppp' : <type 'str'>
list_REF0 = ['ppppp'] : <type 'list'>
REFERENCE ACTION: list_REF0.irange(minimum=val2,maximum=val2,inclusive=(True,False)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
list0.extend(list2)                                                     # STEP 78
ACTION: list0.extend(list2) 
list0 = SortedList(['ppppp'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF0 = ['ppppp'] : <type 'list'>
list_REF2 = [] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x11e624560>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 702105, in act11952
    self.p_list[0].extend(self.p_list[2])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x11f838b00>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 702641, in act11961
    self.p_list[2].extend(self.p_list[1])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
Original test has 84 steps

SAVING TEST AS failure.10421.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
ival5 = 7                                                                # STEP 0
ACTION: ival5 = 7 
ival5 = None : <type 'NoneType'>
=> ival5 = 7 : <type 'int'>
==================================================
dict1 = sortedcontainers.SortedDict()                                    # STEP 1
ACTION: dict1 = sortedcontainers.SortedDict() 
dict1 = None : <type 'NoneType'>
dict_REF1 = None : <type 'NoneType'>
=> dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF1 = {} 
=> dict_REF1 = {} : <type 'dict'>
==================================================
set1 = sortedcontainers.SortedSet()                                      # STEP 2
ACTION: set1 = sortedcontainers.SortedSet() 
set1 = None : <type 'NoneType'>
set_REF1 = None : <type 'NoneType'>
=> set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF1 = set([]) 
=> set_REF1 = set([]) : <type 'set'>
==================================================
result = len(dict1.keys())                                               # STEP 3
ACTION: result = len(dict1.keys())  
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF1.keys())  
==================================================
result = dict1 != dict1                                                  # STEP 4
ACTION: result = dict1 != dict1 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = dict_REF1 != dict_REF1 
==================================================
result = dict1 == dict1                                                  # STEP 5
ACTION: result = dict1 == dict1 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = dict_REF1 == dict_REF1 
==================================================
set1 ^= set1                                                             # STEP 6
ACTION: set1 ^= set1 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1 ^= set_REF1 
==================================================
dict3 = dict1.copy()                                                     # STEP 7
ACTION: dict3 = dict1.copy() 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict3 = None : <type 'NoneType'>
dict_REF1 = {} : <type 'dict'>
dict_REF3 = None : <type 'NoneType'>
=> dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF3 = dict_REF1.copy() 
=> dict_REF3 = {} : <type 'dict'>
==================================================
dict3.islice(start=None,stop=ival5)                                      # STEP 8
ACTION: dict3.islice(start=None,stop=ival5) 
ival5 = 7 : <type 'int'>
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF3.islice(start=None,stop=ival5) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'islice'
==================================================
set1.islice(start=None,stop=None)                                        # STEP 9
ACTION: set1.islice(start=None,stop=None) 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1.islice(start=None,stop=None) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'islice'
==================================================
set2 = set1.copy()                                                      # STEP 10
ACTION: set2 = set1.copy() 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set2 = None : <type 'NoneType'>
set_REF1 = set([]) : <type 'set'>
set_REF2 = None : <type 'NoneType'>
=> set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF2 = set_REF1.copy() 
=> set_REF2 = set([]) : <type 'set'>
==================================================
sval3 = 'm'                                                             # STEP 11
ACTION: sval3 = 'm' 
sval3 = None : <type 'NoneType'>
=> sval3 = 'm' : <type 'str'>
==================================================
val5 = sval3                                                            # STEP 12
ACTION: val5 = sval3 
sval3 = 'm' : <type 'str'>
val5 = None : <type 'NoneType'>
=> val5 = 'm' : <type 'str'>
==================================================
dict3.update(dict1)                                                     # STEP 13
ACTION: dict3.update(dict1) 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF3.update(dict_REF1) 
==================================================
dict1.get(val5,val5)                                                    # STEP 14
ACTION: dict1.get(val5,val5) 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val5 = 'm' : <type 'str'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF1.get(val5,val5) 
==================================================
dict1.get(val5,None)                                                    # STEP 15
ACTION: dict1.get(val5,None) 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val5 = 'm' : <type 'str'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF1.get(val5,None) 
==================================================
set1 = set1 ^ set2                                                      # STEP 16
ACTION: set1 = set1 ^ set2 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF1 = set([]) : <type 'set'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1 = set_REF1 ^ set_REF2 
==================================================
result = sorted(list(dict3.keys()))                                     # STEP 17
ACTION: result = sorted(list(dict3.keys())) 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = sorted(list(dict_REF3.keys())) 
==================================================
result = dict3 != dict1                                                 # STEP 18
ACTION: result = dict3 != dict1 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = dict_REF3 != dict_REF1 
==================================================
set0 = sortedcontainers.SortedSet()                                     # STEP 19
ACTION: set0 = sortedcontainers.SortedSet() 
set0 = None : <type 'NoneType'>
set_REF0 = None : <type 'NoneType'>
=> set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF0 = set([]) 
=> set_REF0 = set([]) : <type 'set'>
==================================================
dict3 [val5]                                                            # STEP 20
ACTION: dict3 [val5] 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val5 = 'm' : <type 'str'>
dict_REF3 = {} : <type 'dict'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.KeyError'> 'm'
REFERENCE ACTION: dict_REF3 [val5] 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.KeyError'> 'm'
==================================================
dict3.irange(minimum=val5,maximum=val5,inclusive=(False,True))          # STEP 21
ACTION: dict3.irange(minimum=val5,maximum=val5,inclusive=(False,True)) 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val5 = 'm' : <type 'str'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF3.irange(minimum=val5,maximum=val5,inclusive=(False,True)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'irange'
==================================================
set3 = set2.copy()                                                      # STEP 22
ACTION: set3 = set2.copy() 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set3 = None : <type 'NoneType'>
set_REF2 = set([]) : <type 'set'>
set_REF3 = None : <type 'NoneType'>
=> set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF3 = set_REF2.copy() 
=> set_REF3 = set([]) : <type 'set'>
==================================================
set2.islice(start=None,stop=None)                                       # STEP 23
ACTION: set2.islice(start=None,stop=None) 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF2.islice(start=None,stop=None) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'islice'
==================================================
dict1.irange(minimum=val5,maximum=val5,inclusive=(False,False))         # STEP 24
ACTION: dict1.irange(minimum=val5,maximum=val5,inclusive=(False,False)) 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val5 = 'm' : <type 'str'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF1.irange(minimum=val5,maximum=val5,inclusive=(False,False)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'irange'
==================================================
repr(dict3)                                                             # STEP 25
ACTION: repr(dict3) 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: repr(dict_REF3) 
==================================================
dict1.irange(minimum=val5,maximum=val5,inclusive=(True,False),reverse=True)  # STEP 26
ACTION: dict1.irange(minimum=val5,maximum=val5,inclusive=(True,False),reverse=True) 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val5 = 'm' : <type 'str'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF1.irange(minimum=val5,maximum=val5,inclusive=(True,False),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'irange'
==================================================
result = len(dict1)                                                     # STEP 27
ACTION: result = len(dict1) 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF1) 
==================================================
dict0 = dict3.copy()                                                    # STEP 28
ACTION: dict0 = dict3.copy() 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict0 = None : <type 'NoneType'>
dict_REF3 = {} : <type 'dict'>
dict_REF0 = None : <type 'NoneType'>
=> dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF0 = dict_REF3.copy() 
=> dict_REF0 = {} : <type 'dict'>
==================================================
set4 = set0.copy()                                                      # STEP 29
ACTION: set4 = set0.copy() 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set4 = None : <type 'NoneType'>
set_REF0 = set([]) : <type 'set'>
set_REF4 = None : <type 'NoneType'>
=> set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF4 = set_REF0.copy() 
=> set_REF4 = set([]) : <type 'set'>
==================================================
set1.islice(start=None,stop=None)                                       # STEP 30
ACTION: set1.islice(start=None,stop=None) 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1.islice(start=None,stop=None) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'islice'
==================================================
dict1 [val5]                                                            # STEP 31
ACTION: dict1 [val5] 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val5 = 'm' : <type 'str'>
dict_REF1 = {} : <type 'dict'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.KeyError'> 'm'
REFERENCE ACTION: dict_REF1 [val5] 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.KeyError'> 'm'
==================================================
dict2 = dict1.copy()                                                    # STEP 32
ACTION: dict2 = dict1.copy() 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict2 = None : <type 'NoneType'>
dict_REF1 = {} : <type 'dict'>
dict_REF2 = None : <type 'NoneType'>
=> dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF2 = dict_REF1.copy() 
=> dict_REF2 = {} : <type 'dict'>
==================================================
set1 = set0.copy()                                                      # STEP 33
ACTION: set1 = set0.copy() 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1 = set_REF0.copy() 
==================================================
reversed(dict0)                                                         # STEP 34
ACTION: reversed(dict0) 
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: reversed(dict_REF0) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.TypeError'> argument to reversed() must be a sequence
==================================================
set2 = set4 ^ set4                                                      # STEP 35
ACTION: set2 = set4 ^ set4 
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF4 = set([]) : <type 'set'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF2 = set_REF4 ^ set_REF4 
==================================================
val2 = sval3                                                            # STEP 36
ACTION: val2 = sval3 
sval3 = 'm' : <type 'str'>
val2 = None : <type 'NoneType'>
=> val2 = 'm' : <type 'str'>
==================================================
dict4 = dict3.copy()                                                    # STEP 37
ACTION: dict4 = dict3.copy() 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict4 = None : <type 'NoneType'>
dict_REF3 = {} : <type 'dict'>
dict_REF4 = None : <type 'NoneType'>
=> dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF4 = dict_REF3.copy() 
=> dict_REF4 = {} : <type 'dict'>
==================================================
list1 = sortedcontainers.SortedList()                                   # STEP 38
ACTION: list1 = sortedcontainers.SortedList() 
list1 = None : <type 'NoneType'>
list_REF1 = None : <type 'NoneType'>
=> list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: list_REF1 = [] 
=> list_REF1 = [] : <type 'list'>
==================================================
dict3 [val2]                                                            # STEP 39
ACTION: dict3 [val2] 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val2 = 'm' : <type 'str'>
dict_REF3 = {} : <type 'dict'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.KeyError'> 'm'
REFERENCE ACTION: dict_REF3 [val2] 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.KeyError'> 'm'
==================================================
reversed(dict2)                                                         # STEP 40
ACTION: reversed(dict2) 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: reversed(dict_REF2) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.TypeError'> argument to reversed() must be a sequence
==================================================
list2 = sortedcontainers.SortedList()                                   # STEP 41
ACTION: list2 = sortedcontainers.SortedList() 
list2 = None : <type 'NoneType'>
list_REF2 = None : <type 'NoneType'>
=> list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: list_REF2 = [] 
=> list_REF2 = [] : <type 'list'>
==================================================
dict2.irange(minimum=val5,maximum=val5,inclusive=(True,False),reverse=True)  # STEP 42
ACTION: dict2.irange(minimum=val5,maximum=val5,inclusive=(True,False),reverse=True) 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val5 = 'm' : <type 'str'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF2.irange(minimum=val5,maximum=val5,inclusive=(True,False),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'irange'
==================================================
set0 = set1.union(set1)                                                 # STEP 43
ACTION: set0 = set1.union(set1) 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF1 = set([]) : <type 'set'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF0 = set_REF1.union(set_REF1) 
==================================================
list1.irange(minimum=val2,maximum=val2,inclusive=(False,False))         # STEP 44
ACTION: list1.irange(minimum=val2,maximum=val2,inclusive=(False,False)) 
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val2 = 'm' : <type 'str'>
list_REF1 = [] : <type 'list'>
REFERENCE ACTION: list_REF1.irange(minimum=val2,maximum=val2,inclusive=(False,False)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
setList(list1,ival5,val5)                                               # STEP 45
ACTION: setList(list1,ival5,val5) 
ival5 = 7 : <type 'int'>
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val5 = 'm' : <type 'str'>
list_REF1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: sortListSet(list_REF1,ival5,val5) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list assignment index out of range
==================================================
set4 = set1.copy()                                                      # STEP 46
ACTION: set4 = set1.copy() 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF1 = set([]) : <type 'set'>
set_REF4 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF4 = set_REF1.copy() 
==================================================
dict2 = dict3.copy()                                                    # STEP 47
ACTION: dict2 = dict3.copy() 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF2 = dict_REF3.copy() 
==================================================
set2.islice(start=None,stop=None)                                       # STEP 48
ACTION: set2.islice(start=None,stop=None) 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF2.islice(start=None,stop=None) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'islice'
==================================================
set4.islice(start=None,stop=None)                                       # STEP 49
ACTION: set4.islice(start=None,stop=None) 
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF4 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF4.islice(start=None,stop=None) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'islice'
==================================================
list2.update(list2)                                                     # STEP 50
ACTION: list2.update(list2) 
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF2 = [] : <type 'list'>
REFERENCE ACTION: sortListMultiAdd(list_REF2,list_REF2) 
==================================================
result = dict1 != dict1                                                 # STEP 51
ACTION: result = dict1 != dict1 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = dict_REF1 != dict_REF1 
==================================================
result = dict2 == dict2                                                 # STEP 52
ACTION: result = dict2 == dict2 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = dict_REF2 == dict_REF2 
==================================================
dict0.update(dict2)                                                     # STEP 53
ACTION: dict0.update(dict2) 
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF0 = {} : <type 'dict'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF0.update(dict_REF2) 
==================================================
set1.irange(minimum=val2,maximum=val2,inclusive=(False,True))           # STEP 54
ACTION: set1.irange(minimum=val2,maximum=val2,inclusive=(False,True)) 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
val2 = 'm' : <type 'str'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1.irange(minimum=val2,maximum=val2,inclusive=(False,True)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'irange'
==================================================
dict2.irange(minimum=val2,maximum=val5,inclusive=(True,False))          # STEP 55
ACTION: dict2.irange(minimum=val2,maximum=val5,inclusive=(True,False)) 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val2 = 'm' : <type 'str'>
val5 = 'm' : <type 'str'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF2.irange(minimum=val2,maximum=val5,inclusive=(True,False)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'irange'
==================================================
set1 = set4.union(set3)                                                 # STEP 56
ACTION: set1 = set4.union(set3) 
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF4 = set([]) : <type 'set'>
set_REF3 = set([]) : <type 'set'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1 = set_REF4.union(set_REF3) 
==================================================
list2.insert(ival5,val5)                                                # STEP 57
ACTION: list2.insert(ival5,val5) 
ival5 = 7 : <type 'int'>
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val5 = 'm' : <type 'str'>
list_REF2 = [] : <type 'list'>
=> list2 = SortedList(['m'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: sortListInsert(list_REF2,ival5,val5) 
=> list_REF2 = ['m'] : <type 'list'>
==================================================
result = len(dict4)                                                     # STEP 58
ACTION: result = len(dict4) 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF4) 
==================================================
dict3 [val2]                                                            # STEP 59
ACTION: dict3 [val2] 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val2 = 'm' : <type 'str'>
dict_REF3 = {} : <type 'dict'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.KeyError'> 'm'
REFERENCE ACTION: dict_REF3 [val2] 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.KeyError'> 'm'
==================================================
set4 = set0.union(set2)                                                 # STEP 60
ACTION: set4 = set0.union(set2) 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
set_REF2 = set([]) : <type 'set'>
set_REF4 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF4 = set_REF0.union(set_REF2) 
==================================================
ival1 = ival5 + ival5                                                   # STEP 61
ACTION: ival1 = ival5 + ival5 
ival5 = 7 : <type 'int'>
ival1 = None : <type 'NoneType'>
=> ival1 = 14 : <type 'int'>
==================================================
setList(list2,ival5,val5)                                               # STEP 62
ACTION: setList(list2,ival5,val5) 
ival5 = 7 : <type 'int'>
list2 = SortedList(['m'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val5 = 'm' : <type 'str'>
list_REF2 = ['m'] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: sortListSet(list_REF2,ival5,val5) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list assignment index out of range
==================================================
list1.irange(minimum=val5,maximum=val2,inclusive=(False,False),reverse=True)  # STEP 63
ACTION: list1.irange(minimum=val5,maximum=val2,inclusive=(False,False),reverse=True) 
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val5 = 'm' : <type 'str'>
val2 = 'm' : <type 'str'>
list_REF1 = [] : <type 'list'>
REFERENCE ACTION: list_REF1.irange(minimum=val5,maximum=val2,inclusive=(False,False),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
set1.islice(start=None,stop=None)                                       # STEP 64
ACTION: set1.islice(start=None,stop=None) 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1.islice(start=None,stop=None) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'islice'
==================================================
dict0 = sortedcontainers.SortedDict()                                   # STEP 65
ACTION: dict0 = sortedcontainers.SortedDict() 
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF0 = {} 
==================================================
list1.irange(minimum=val5,maximum=val5,inclusive=(False,False),reverse=True)  # STEP 66
ACTION: list1.irange(minimum=val5,maximum=val5,inclusive=(False,False),reverse=True) 
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val5 = 'm' : <type 'str'>
list_REF1 = [] : <type 'list'>
REFERENCE ACTION: list_REF1.irange(minimum=val5,maximum=val5,inclusive=(False,False),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
list2.irange(minimum=val2,maximum=val5,inclusive=(False,False),reverse=True)  # STEP 67
ACTION: list2.irange(minimum=val2,maximum=val5,inclusive=(False,False),reverse=True) 
list2 = SortedList(['m'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val2 = 'm' : <type 'str'>
val5 = 'm' : <type 'str'>
list_REF2 = ['m'] : <type 'list'>
REFERENCE ACTION: list_REF2.irange(minimum=val2,maximum=val5,inclusive=(False,False),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
result = len(dict1.values())                                            # STEP 68
ACTION: result = len(dict1.values())  
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF1.values())  
==================================================
set3 = sortedcontainers.SortedSet()                                     # STEP 69
ACTION: set3 = sortedcontainers.SortedSet() 
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF3 = set([]) 
==================================================
dict2 = sortedcontainers.SortedDict()                                   # STEP 70
ACTION: dict2 = sortedcontainers.SortedDict() 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF2 = {} 
==================================================
dict3 = sortedcontainers.SortedDict()                                   # STEP 71
ACTION: dict3 = sortedcontainers.SortedDict() 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF3 = {} 
==================================================
list2.insert(ival5,val2)                                                # STEP 72
ACTION: list2.insert(ival5,val2) 
ival5 = 7 : <type 'int'>
list2 = SortedList(['m'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val2 = 'm' : <type 'str'>
list_REF2 = ['m'] : <type 'list'>
=> list2 = SortedList(['m', 'm'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: sortListInsert(list_REF2,ival5,val2) 
=> list_REF2 = ['m', 'm'] : <type 'list'>
==================================================
reversed(set4)                                                          # STEP 73
ACTION: reversed(set4) 
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF4 = set([]) : <type 'set'>
REFERENCE ACTION: reversed(set_REF4) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.TypeError'> argument to reversed() must be a sequence
==================================================
setList(list1,ival5,val5)                                               # STEP 74
ACTION: setList(list1,ival5,val5) 
ival5 = 7 : <type 'int'>
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val5 = 'm' : <type 'str'>
list_REF1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: sortListSet(list_REF1,ival5,val5) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list assignment index out of range
==================================================
list1.update(set4)                                                      # STEP 75
ACTION: list1.update(set4) 
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
list_REF1 = [] : <type 'list'>
set_REF4 = set([]) : <type 'set'>
REFERENCE ACTION: sortListMultiAdd(list_REF1,set_REF4) 
==================================================
sval1 = 'i'                                                             # STEP 76
ACTION: sval1 = 'i' 
sval1 = None : <type 'NoneType'>
=> sval1 = 'i' : <type 'str'>
==================================================
val1 = sval1                                                            # STEP 77
ACTION: val1 = sval1 
sval1 = 'i' : <type 'str'>
val1 = None : <type 'NoneType'>
=> val1 = 'i' : <type 'str'>
==================================================
dict1 = sortedcontainers.SortedDict()                                   # STEP 78
ACTION: dict1 = sortedcontainers.SortedDict() 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF1 = {} 
==================================================
list2 <= list2                                                          # STEP 79
ACTION: list2 <= list2 
list2 = SortedList(['m', 'm'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF2 = ['m', 'm'] : <type 'list'>
REFERENCE ACTION: list_REF2 <= list_REF2 
==================================================
list2.discard(val1)                                                     # STEP 80
ACTION: list2.discard(val1) 
list2 = SortedList(['m', 'm'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val1 = 'i' : <type 'str'>
list_REF2 = ['m', 'm'] : <type 'list'>
REFERENCE ACTION: sortListDiscard(list_REF2,val1) 
==================================================
list1.update(list1)                                                     # STEP 81
ACTION: list1.update(list1) 
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF1 = [] : <type 'list'>
REFERENCE ACTION: sortListMultiAdd(list_REF1,list_REF1) 
==================================================
dict4.irange(minimum=val1,maximum=val2,inclusive=(True,False),reverse=True)  # STEP 82
ACTION: dict4.irange(minimum=val1,maximum=val2,inclusive=(True,False),reverse=True) 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val1 = 'i' : <type 'str'>
val2 = 'm' : <type 'str'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF4.irange(minimum=val1,maximum=val2,inclusive=(True,False),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'irange'
==================================================
list2.extend(list1)                                                     # STEP 83
ACTION: list2.extend(list1) 
list2 = SortedList(['m', 'm'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF2 = ['m', 'm'] : <type 'list'>
list_REF1 = [] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x11f8883b0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 702641, in act11961
    self.p_list[2].extend(self.p_list[1])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
TEST #18 STEP #2 (0:00:30.007607) Mon Nov 20 16:39:57 2017 [ 420 stmts 544 branches ] 1665 TOTAL ACTIONS (55.4859306486/s)
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 82
STOPPING TESTING DUE TO TIMEOUT
23.8464521132 PERCENT COVERED
60.2102789879 TOTAL RUNTIME
34 EXECUTED
3345 TOTAL TEST OPERATIONS
1.81192946434 TIME SPENT EXECUTING TEST OPERATIONS
54.7192094326 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
1.64851355553 TIME SPENT CHECKING PROPERTIES
3.46044301987 TOTAL TIME SPENT RUNNING SUT
0.51602602005 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
2 FAILED
0 REPEATS OF FAILURES
2 ACTUAL DISTINCT FAILURES

FAILURE 0
list0 = sortedcontainers.SortedList()                                    # STEP 0
dict3 = sortedcontainers.SortedDict()                                    # STEP 1
sval9 = 'p'                                                              # STEP 2
dict1 = sortedcontainers.SortedDict()                                    # STEP 3
set4 = sortedcontainers.SortedSet()                                      # STEP 4
result = len(dict3.keys())                                               # STEP 5
dict2 = sortedcontainers.SortedDict()                                    # STEP 6
sval5 = sval9 + sval9                                                    # STEP 7
result = len(dict1)                                                      # STEP 8
dict3 = sortedcontainers.SortedDict()                                    # STEP 9
sval2 = sval5 + sval5                                                   # STEP 10
set0 = set4.copy()                                                      # STEP 11
set2 = sortedcontainers.SortedSet()                                     # STEP 12
list0 >= list0                                                          # STEP 13
list0.extend(list0)                                                     # STEP 14
ival5 = 10                                                              # STEP 15
result = list0.pop(ival5)                                               # STEP 16
set3 = set2 & set2                                                      # STEP 17
set4 = sortedcontainers.SortedSet()                                     # STEP 18
dict4 = sortedcontainers.SortedDict()                                   # STEP 19
result = len(dict2.keys())                                              # STEP 20
setListSlice(list0,ival5,ival5,list0)                                   # STEP 21
list0 >= list0                                                          # STEP 22
result = list0.pop(ival5)                                               # STEP 23
set1 = sortedcontainers.SortedSet()                                     # STEP 24
set2 = set1 & set0                                                      # STEP 25
dict1 = sortedcontainers.SortedDict()                                   # STEP 26
sval7 = sval9 + sval2                                                   # STEP 27
result = sorted(list(dict3.keys()))                                     # STEP 28
setListSlice(list0,ival5,ival5,list0)                                   # STEP 29
sval0 = 'h'                                                             # STEP 30
dict2 = sortedcontainers.SortedDict()                                   # STEP 31
result = list0.pop(ival5)                                               # STEP 32
set4.islice(start=None,stop=ival5)                                      # STEP 33
setListSlice(list0,ival5,ival5,list0)                                   # STEP 34
setListSlice(list0,ival5,ival5,list0)                                   # STEP 35
dict3 = sortedcontainers.SortedDict()                                   # STEP 36
dict0 = dict1.copy()                                                    # STEP 37
result = list0.pop(ival5)                                               # STEP 38
ival5 = 8                                                               # STEP 39
sval9 = sval0 + sval2                                                   # STEP 40
result = len(dict2)                                                     # STEP 41
sval5 = sval5 + sval9                                                   # STEP 42
dict1 = sortedcontainers.SortedDict()                                   # STEP 43
setListSlice(list0,ival5,ival5,list0)                                   # STEP 44
sval6 = 'k'                                                             # STEP 45
setListSlice(list0,ival5,ival5,list0)                                   # STEP 46
dict4.update(dict3)                                                     # STEP 47
set4.update(list0)                                                      # STEP 48
list2 = sortedcontainers.SortedList()                                   # STEP 49
val2 = sval7                                                            # STEP 50
set0.irange(minimum=val2,maximum=val2,inclusive=(False,True),reverse=True)  # STEP 51
dict4 = dict3.copy()                                                    # STEP 52
set2 &= set2                                                            # STEP 53
val4 = sval2                                                            # STEP 54
set2 > set1                                                             # STEP 55
set0.islice(start=ival5,stop=ival5)                                     # STEP 56
dict0.get(val2,val2)                                                    # STEP 57
dict4.get(val4,val2)                                                    # STEP 58
ival1 = ival5 - ival5                                                   # STEP 59
result = len(dict3.keys())                                              # STEP 60
result = list2.pop(ival1)                                               # STEP 61
ival6 = 14                                                              # STEP 62
list0.irange(minimum=val4,maximum=val4,inclusive=(True,False))          # STEP 63
list0.append(val2)                                                      # STEP 64
setListSlice(list0,ival5,ival5,list2)                                   # STEP 65
result = sorted(list(dict4.keys()))                                     # STEP 66
dict3 = sortedcontainers.SortedDict()                                   # STEP 67
result = dict2.popitem(last=False)                                      # STEP 68
val2 in dict3                                                           # STEP 69
result = len(set0)                                                      # STEP 70
list2 *= ival1                                                          # STEP 71
ival8 = ival5 + ival1                                                   # STEP 72
ival7 = ival5 - ival6                                                   # STEP 73
dict0 = sortedcontainers.SortedDict()                                   # STEP 74
set0 = set2 ^ set0                                                      # STEP 75
list2.irange(minimum=val4,maximum=val2,inclusive=(True,False))          # STEP 76
list0.irange(minimum=val2,maximum=val2,inclusive=(True,False))          # STEP 77
list0.extend(list2)                                                     # STEP 78
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x11e624560>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 702105, in act11952
    self.p_list[0].extend(self.p_list[2])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
FAILURE 1
ival5 = 7                                                                # STEP 0
dict1 = sortedcontainers.SortedDict()                                    # STEP 1
set1 = sortedcontainers.SortedSet()                                      # STEP 2
result = len(dict1.keys())                                               # STEP 3
result = dict1 != dict1                                                  # STEP 4
result = dict1 == dict1                                                  # STEP 5
set1 ^= set1                                                             # STEP 6
dict3 = dict1.copy()                                                     # STEP 7
dict3.islice(start=None,stop=ival5)                                      # STEP 8
set1.islice(start=None,stop=None)                                        # STEP 9
set2 = set1.copy()                                                      # STEP 10
sval3 = 'm'                                                             # STEP 11
val5 = sval3                                                            # STEP 12
dict3.update(dict1)                                                     # STEP 13
dict1.get(val5,val5)                                                    # STEP 14
dict1.get(val5,None)                                                    # STEP 15
set1 = set1 ^ set2                                                      # STEP 16
result = sorted(list(dict3.keys()))                                     # STEP 17
result = dict3 != dict1                                                 # STEP 18
set0 = sortedcontainers.SortedSet()                                     # STEP 19
dict3 [val5]                                                            # STEP 20
dict3.irange(minimum=val5,maximum=val5,inclusive=(False,True))          # STEP 21
set3 = set2.copy()                                                      # STEP 22
set2.islice(start=None,stop=None)                                       # STEP 23
dict1.irange(minimum=val5,maximum=val5,inclusive=(False,False))         # STEP 24
repr(dict3)                                                             # STEP 25
dict1.irange(minimum=val5,maximum=val5,inclusive=(True,False),reverse=True)  # STEP 26
result = len(dict1)                                                     # STEP 27
dict0 = dict3.copy()                                                    # STEP 28
set4 = set0.copy()                                                      # STEP 29
set1.islice(start=None,stop=None)                                       # STEP 30
dict1 [val5]                                                            # STEP 31
dict2 = dict1.copy()                                                    # STEP 32
set1 = set0.copy()                                                      # STEP 33
reversed(dict0)                                                         # STEP 34
set2 = set4 ^ set4                                                      # STEP 35
val2 = sval3                                                            # STEP 36
dict4 = dict3.copy()                                                    # STEP 37
list1 = sortedcontainers.SortedList()                                   # STEP 38
dict3 [val2]                                                            # STEP 39
reversed(dict2)                                                         # STEP 40
list2 = sortedcontainers.SortedList()                                   # STEP 41
dict2.irange(minimum=val5,maximum=val5,inclusive=(True,False),reverse=True)  # STEP 42
set0 = set1.union(set1)                                                 # STEP 43
list1.irange(minimum=val2,maximum=val2,inclusive=(False,False))         # STEP 44
setList(list1,ival5,val5)                                               # STEP 45
set4 = set1.copy()                                                      # STEP 46
dict2 = dict3.copy()                                                    # STEP 47
set2.islice(start=None,stop=None)                                       # STEP 48
set4.islice(start=None,stop=None)                                       # STEP 49
list2.update(list2)                                                     # STEP 50
result = dict1 != dict1                                                 # STEP 51
result = dict2 == dict2                                                 # STEP 52
dict0.update(dict2)                                                     # STEP 53
set1.irange(minimum=val2,maximum=val2,inclusive=(False,True))           # STEP 54
dict2.irange(minimum=val2,maximum=val5,inclusive=(True,False))          # STEP 55
set1 = set4.union(set3)                                                 # STEP 56
list2.insert(ival5,val5)                                                # STEP 57
result = len(dict4)                                                     # STEP 58
dict3 [val2]                                                            # STEP 59
set4 = set0.union(set2)                                                 # STEP 60
ival1 = ival5 + ival5                                                   # STEP 61
setList(list2,ival5,val5)                                               # STEP 62
list1.irange(minimum=val5,maximum=val2,inclusive=(False,False),reverse=True)  # STEP 63
set1.islice(start=None,stop=None)                                       # STEP 64
dict0 = sortedcontainers.SortedDict()                                   # STEP 65
list1.irange(minimum=val5,maximum=val5,inclusive=(False,False),reverse=True)  # STEP 66
list2.irange(minimum=val2,maximum=val5,inclusive=(False,False),reverse=True)  # STEP 67
result = len(dict1.values())                                            # STEP 68
set3 = sortedcontainers.SortedSet()                                     # STEP 69
dict2 = sortedcontainers.SortedDict()                                   # STEP 70
dict3 = sortedcontainers.SortedDict()                                   # STEP 71
list2.insert(ival5,val2)                                                # STEP 72
reversed(set4)                                                          # STEP 73
setList(list1,ival5,val5)                                               # STEP 74
list1.update(set4)                                                      # STEP 75
sval1 = 'i'                                                             # STEP 76
val1 = sval1                                                            # STEP 77
dict1 = sortedcontainers.SortedDict()                                   # STEP 78
list2 <= list2                                                          # STEP 79
list2.discard(val1)                                                     # STEP 80
list1.update(list1)                                                     # STEP 81
dict4.irange(minimum=val1,maximum=val2,inclusive=(True,False),reverse=True)  # STEP 82
list2.extend(list1)                                                     # STEP 83
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x11f8883b0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 702641, in act11961
    self.p_list[2].extend(self.p_list[1])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
598 BRANCHES COVERED
458 STATEMENTS COVERED

Random testing using config=Config(noExceptionMatch=False, generalize=False, localize=False, speed='FAST', probs='locsample.probs', LOCBaseline=0.2, noAlphaConvert=False, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, html=None, keepLast=False, stopWhenNoCoverage=None, generateLOC=None, computeFeatureStats=False, Pmutate=0.0, timeout=60, output='failure.10077.test', markov=None, noSwarmDependencies=False, startExploit=0.0, maxMustHitBranch=None, useHints=False, silentFail=False, highLowSwarm=None, maxMustHitStatement=None, progress=False, postCover=False, swarmLength=None, noCover=False, noEnumerateEnabled=False, full=True, swarmP=0.5, coverFile='coverage.out', markovP=1.0, swarmProbs=None, genDepth=None, exploitCeiling=0.1, logging=None, noCheck=False, throughput=False, uncaught=False, swarmSwitch=None, verbose=False, reducePool=False, exploit=None, fastQuickAnalysis=False, total=False, verboseExploit=False, swarm=False, sequenceP=1.0, biasLOC=None, timedProgress=30, relax=False, ddmin=False, stutter=None, readQuick=False, verboseActions=False, quickAnalysis=False, noReassign=False, sequenceSize=3, LOCProbs=False, sequencesFromTests=None, maxTests=-1, trackMaxCoverage=None, useQuickSequences=False, exploitBestHint=1, failedLogging=None, stopWhenStatements=None, greedyStutter=False, seed=None, stopWhenHitStatement=None, uniqueValuesAnalysis=False, normalize=False, startExploitStall=0, enumerateEnabled=False, internal=False, profile=False, multiple=True, stopWhenBranches=None, running=False, compareFails=False, Pcrossover=0.2, stopWhenHitBranch=None, depth=100, showActions=False)
TEST #10 STEP #24 (0:00:30.027072) Mon Nov 20 15:15:01 2017 [ 314 stmts 414 branches ] (no cov+ for 1 tests) 924 TOTAL ACTIONS (30.7722309426/s)
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x120429680>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 702994, in act11967
    self.p_list[3].extend(self.p_list[2])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
Original test has 95 steps

SAVING TEST AS failure.10077.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
sval9 = 'W'                                                              # STEP 0
ACTION: sval9 = 'W' 
sval9 = None : <type 'NoneType'>
=> sval9 = 'W' : <type 'str'>
==================================================
ival1 = 13                                                               # STEP 1
ACTION: ival1 = 13 
ival1 = None : <type 'NoneType'>
=> ival1 = 13 : <type 'int'>
==================================================
list3 = sortedcontainers.SortedList()                                    # STEP 2
ACTION: list3 = sortedcontainers.SortedList() 
list3 = None : <type 'NoneType'>
list_REF3 = None : <type 'NoneType'>
=> list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: list_REF3 = [] 
=> list_REF3 = [] : <type 'list'>
==================================================
list3 > list3                                                            # STEP 3
ACTION: list3 > list3 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [] : <type 'list'>
REFERENCE ACTION: list_REF3 > list_REF3 
==================================================
setListSlice(list3,ival1,ival1,list3)                                    # STEP 4
ACTION: setListSlice(list3,ival1,ival1,list3) 
ival1 = 13 : <type 'int'>
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [] : <type 'list'>
REFERENCE ACTION: sortListSetSlice(list_REF3,ival1,ival1,list_REF3) 
==================================================
list3.islice(start=None,stop=ival1)                                      # STEP 5
ACTION: list3.islice(start=None,stop=ival1) 
ival1 = 13 : <type 'int'>
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [] : <type 'list'>
REFERENCE ACTION: list_REF3.islice(start=None,stop=ival1) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'islice'
==================================================
val6 = ival1                                                             # STEP 6
ACTION: val6 = ival1 
ival1 = 13 : <type 'int'>
val6 = None : <type 'NoneType'>
=> val6 = 13 : <type 'int'>
==================================================
list3.islice(start=ival1,stop=ival1)                                     # STEP 7
ACTION: list3.islice(start=ival1,stop=ival1) 
ival1 = 13 : <type 'int'>
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [] : <type 'list'>
REFERENCE ACTION: list_REF3.islice(start=ival1,stop=ival1) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'islice'
==================================================
result = list3.pop(ival1)                                                # STEP 8
ACTION: result = list3.pop(ival1) 
ival1 = 13 : <type 'int'>
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> pop index out of range
REFERENCE ACTION: result_REF = list_REF3.pop(ival1) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> pop from empty list
==================================================
ival2 = 9                                                                # STEP 9
ACTION: ival2 = 9 
ival2 = None : <type 'NoneType'>
=> ival2 = 9 : <type 'int'>
==================================================
dict3 = sortedcontainers.SortedDict()                                   # STEP 10
ACTION: dict3 = sortedcontainers.SortedDict() 
dict3 = None : <type 'NoneType'>
dict_REF3 = None : <type 'NoneType'>
=> dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF3 = {} 
=> dict_REF3 = {} : <type 'dict'>
==================================================
dict1 = dict3.fromkeys(list3,val6) ; result = dict1                     # STEP 11
ACTION: dict1 = dict3.fromkeys(list3,val6) ; result = dict1 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict1 = None : <type 'NoneType'>
val6 = 13 : <type 'int'>
list_REF3 = [] : <type 'list'>
dict_REF3 = {} : <type 'dict'>
dict_REF1 = None : <type 'NoneType'>
=> dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF1 = dict_REF3.fromkeys(list_REF3,val6) ; result_REF = dict_REF1 
=> dict_REF1 = {} : <type 'dict'>
==================================================
list3 < list3                                                           # STEP 12
ACTION: list3 < list3 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [] : <type 'list'>
REFERENCE ACTION: list_REF3 < list_REF3 
==================================================
val3 = ival2                                                            # STEP 13
ACTION: val3 = ival2 
ival2 = 9 : <type 'int'>
val3 = None : <type 'NoneType'>
=> val3 = 9 : <type 'int'>
==================================================
ival8 = ival2 - ival1                                                   # STEP 14
ACTION: ival8 = ival2 - ival1 
ival2 = 9 : <type 'int'>
ival1 = 13 : <type 'int'>
ival8 = None : <type 'NoneType'>
=> ival8 = -4 : <type 'int'>
==================================================
result = dict3 == dict3                                                 # STEP 15
ACTION: result = dict3 == dict3 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = dict_REF3 == dict_REF3 
==================================================
dict2 = dict3.copy()                                                    # STEP 16
ACTION: dict2 = dict3.copy() 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict2 = None : <type 'NoneType'>
dict_REF3 = {} : <type 'dict'>
dict_REF2 = None : <type 'NoneType'>
=> dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF2 = dict_REF3.copy() 
=> dict_REF2 = {} : <type 'dict'>
==================================================
list3.irange(minimum=val6,maximum=val6,inclusive=(False,False),reverse=True)  # STEP 17
ACTION: list3.irange(minimum=val6,maximum=val6,inclusive=(False,False),reverse=True) 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val6 = 13 : <type 'int'>
list_REF3 = [] : <type 'list'>
REFERENCE ACTION: list_REF3.irange(minimum=val6,maximum=val6,inclusive=(False,False),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
dict0 = dict2.copy()                                                    # STEP 18
ACTION: dict0 = dict2.copy() 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict0 = None : <type 'NoneType'>
dict_REF2 = {} : <type 'dict'>
dict_REF0 = None : <type 'NoneType'>
=> dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF0 = dict_REF2.copy() 
=> dict_REF0 = {} : <type 'dict'>
==================================================
sval2 = 'n'                                                             # STEP 19
ACTION: sval2 = 'n' 
sval2 = None : <type 'NoneType'>
=> sval2 = 'n' : <type 'str'>
==================================================
result = sorted(list(dict1.keys()))                                     # STEP 20
ACTION: result = sorted(list(dict1.keys())) 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = sorted(list(dict_REF1.keys())) 
==================================================
list3.add(val6)                                                         # STEP 21
ACTION: list3.add(val6) 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val6 = 13 : <type 'int'>
list_REF3 = [] : <type 'list'>
=> list3 = SortedList([13], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: sortListAdd(list_REF3,val6) 
=> list_REF3 = [13] : <type 'list'>
==================================================
list3.irange(minimum=val3,maximum=val3,inclusive=(False,True),reverse=True)  # STEP 22
ACTION: list3.irange(minimum=val3,maximum=val3,inclusive=(False,True),reverse=True) 
list3 = SortedList([13], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val3 = 9 : <type 'int'>
list_REF3 = [13] : <type 'list'>
REFERENCE ACTION: list_REF3.irange(minimum=val3,maximum=val3,inclusive=(False,True),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
ival1 = ival8 * ival2                                                   # STEP 23
ACTION: ival1 = ival8 * ival2 
ival8 = -4 : <type 'int'>
ival2 = 9 : <type 'int'>
ival1 = 13 : <type 'int'>
=> ival1 = -36 : <type 'int'>
==================================================
set2 = sortedcontainers.SortedSet()                                     # STEP 24
ACTION: set2 = sortedcontainers.SortedSet() 
set2 = None : <type 'NoneType'>
set_REF2 = None : <type 'NoneType'>
=> set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF2 = set([]) 
=> set_REF2 = set([]) : <type 'set'>
==================================================
dict1 = dict2.fromkeys(list3,val3) ; result = dict1                     # STEP 25
ACTION: dict1 = dict2.fromkeys(list3,val3) ; result = dict1 
list3 = SortedList([13], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val3 = 9 : <type 'int'>
list_REF3 = [13] : <type 'list'>
dict_REF2 = {} : <type 'dict'>
dict_REF1 = {} : <type 'dict'>
=> dict1 = SortedDict(None, 1000, {13: 9}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF1 = dict_REF2.fromkeys(list_REF3,val3) ; result_REF = dict_REF1 
=> dict_REF1 = {13: 9} : <type 'dict'>
==================================================
set2.irange(minimum=val6,maximum=val6,inclusive=(False,True))           # STEP 26
ACTION: set2.irange(minimum=val6,maximum=val6,inclusive=(False,True)) 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
val6 = 13 : <type 'int'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF2.irange(minimum=val6,maximum=val6,inclusive=(False,True)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'irange'
==================================================
setList(list3,ival1,val6)                                               # STEP 27
ACTION: setList(list3,ival1,val6) 
ival1 = -36 : <type 'int'>
list3 = SortedList([13], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val6 = 13 : <type 'int'>
list_REF3 = [13] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: sortListSet(list_REF3,ival1,val6) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list assignment index out of range
==================================================
dict0.irange(minimum=val6,maximum=val6,inclusive=(True,False))          # STEP 28
ACTION: dict0.irange(minimum=val6,maximum=val6,inclusive=(True,False)) 
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val6 = 13 : <type 'int'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF0.irange(minimum=val6,maximum=val6,inclusive=(True,False)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'irange'
==================================================
dict0.get(val6,val3)                                                    # STEP 29
ACTION: dict0.get(val6,val3) 
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val6 = 13 : <type 'int'>
val3 = 9 : <type 'int'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF0.get(val6,val3) 
==================================================
result = dict2 == dict3                                                 # STEP 30
ACTION: result = dict2 == dict3 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF2 = {} : <type 'dict'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = dict_REF2 == dict_REF3 
==================================================
val9 = sval9                                                            # STEP 31
ACTION: val9 = sval9 
sval9 = 'W' : <type 'str'>
val9 = None : <type 'NoneType'>
=> val9 = 'W' : <type 'str'>
==================================================
dict2 = dict2.copy()                                                    # STEP 32
ACTION: dict2 = dict2.copy() 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF2 = dict_REF2.copy() 
==================================================
set2.irange(minimum=val3,maximum=val6,inclusive=(True,False))           # STEP 33
ACTION: set2.irange(minimum=val3,maximum=val6,inclusive=(True,False)) 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
val3 = 9 : <type 'int'>
val6 = 13 : <type 'int'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF2.irange(minimum=val3,maximum=val6,inclusive=(True,False)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'irange'
==================================================
del list3 [ival2]                                                       # STEP 34
ACTION: del list3 [ival2] 
ival2 = 9 : <type 'int'>
list3 = SortedList([13], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [13] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: del list_REF3 [ival2] 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list assignment index out of range
==================================================
result = list3.index(val6)                                              # STEP 35
ACTION: result = list3.index(val6) 
list3 = SortedList([13], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val6 = 13 : <type 'int'>
list_REF3 = [13] : <type 'list'>
REFERENCE ACTION: result_REF = list_REF3.index(val6) 
==================================================
val9 in dict1                                                           # STEP 36
ACTION: val9 in dict1 
dict1 = SortedDict(None, 1000, {13: 9}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val9 = 'W' : <type 'str'>
dict_REF1 = {13: 9} : <type 'dict'>
REFERENCE ACTION: val9 in dict_REF1 
==================================================
set1 = set2 & set2                                                      # STEP 37
ACTION: set1 = set2 & set2 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set1 = None : <type 'NoneType'>
set_REF2 = set([]) : <type 'set'>
set_REF1 = None : <type 'NoneType'>
=> set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF1 = set_REF2 & set_REF2 
=> set_REF1 = set([]) : <type 'set'>
==================================================
list3+=list3                                                            # STEP 38
ACTION: list3+=list3 
list3 = SortedList([13], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [13] : <type 'list'>
=> list3 = SortedList([13, 13], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: sortListMultiAdd(list_REF3,list_REF3) 
=> list_REF3 = [13, 13] : <type 'list'>
==================================================
set2.irange(minimum=val6,maximum=val6,inclusive=(False,True))           # STEP 39
ACTION: set2.irange(minimum=val6,maximum=val6,inclusive=(False,True)) 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
val6 = 13 : <type 'int'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF2.irange(minimum=val6,maximum=val6,inclusive=(False,True)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'irange'
==================================================
ival9 = ival8 - ival2                                                   # STEP 40
ACTION: ival9 = ival8 - ival2 
ival8 = -4 : <type 'int'>
ival2 = 9 : <type 'int'>
ival9 = None : <type 'NoneType'>
=> ival9 = -13 : <type 'int'>
==================================================
ival3 = ival9 - ival9                                                   # STEP 41
ACTION: ival3 = ival9 - ival9 
ival9 = -13 : <type 'int'>
ival3 = None : <type 'NoneType'>
=> ival3 = 0 : <type 'int'>
==================================================
list3.insert(ival3,val3)                                                # STEP 42
ACTION: list3.insert(ival3,val3) 
ival3 = 0 : <type 'int'>
list3 = SortedList([13, 13], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val3 = 9 : <type 'int'>
list_REF3 = [13, 13] : <type 'list'>
=> list3 = SortedList([9, 13, 13], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: sortListInsert(list_REF3,ival3,val3) 
=> list_REF3 = [9, 13, 13] : <type 'list'>
==================================================
set1 &= set1                                                            # STEP 43
ACTION: set1 &= set1 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1 &= set_REF1 
==================================================
dict1 = dict1.fromkeys(list3,val3) ; result = dict1                     # STEP 44
ACTION: dict1 = dict1.fromkeys(list3,val3) ; result = dict1 
list3 = SortedList([9, 13, 13], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
dict1 = SortedDict(None, 1000, {13: 9}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val3 = 9 : <type 'int'>
list_REF3 = [9, 13, 13] : <type 'list'>
dict_REF1 = {13: 9} : <type 'dict'>
=> dict1 = SortedDict(None, 1000, {9: 9, 13: 9}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF1 = dict_REF1.fromkeys(list_REF3,val3) ; result_REF = dict_REF1 
=> dict_REF1 = {9: 9, 13: 9} : <type 'dict'>
==================================================
list3.irange(minimum=val6,maximum=val9,inclusive=(False,False),reverse=True)  # STEP 45
ACTION: list3.irange(minimum=val6,maximum=val9,inclusive=(False,False),reverse=True) 
list3 = SortedList([9, 13, 13], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val6 = 13 : <type 'int'>
val9 = 'W' : <type 'str'>
list_REF3 = [9, 13, 13] : <type 'list'>
REFERENCE ACTION: list_REF3.irange(minimum=val6,maximum=val9,inclusive=(False,False),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
set2.irange(minimum=val6,maximum=val3,inclusive=(False,True))           # STEP 46
ACTION: set2.irange(minimum=val6,maximum=val3,inclusive=(False,True)) 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
val6 = 13 : <type 'int'>
val3 = 9 : <type 'int'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF2.irange(minimum=val6,maximum=val3,inclusive=(False,True)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'irange'
==================================================
set0 = set2 - set1                                                      # STEP 47
ACTION: set0 = set2 - set1 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set0 = None : <type 'NoneType'>
set_REF2 = set([]) : <type 'set'>
set_REF1 = set([]) : <type 'set'>
set_REF0 = None : <type 'NoneType'>
=> set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF0 = set_REF2 - set_REF1 
=> set_REF0 = set([]) : <type 'set'>
==================================================
dict1.get(val9,val3)                                                    # STEP 48
ACTION: dict1.get(val9,val3) 
dict1 = SortedDict(None, 1000, {9: 9, 13: 9}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val9 = 'W' : <type 'str'>
val3 = 9 : <type 'int'>
dict_REF1 = {9: 9, 13: 9} : <type 'dict'>
REFERENCE ACTION: dict_REF1.get(val9,val3) 
==================================================
list2 = sortedcontainers.SortedList()                                   # STEP 49
ACTION: list2 = sortedcontainers.SortedList() 
list2 = None : <type 'NoneType'>
list_REF2 = None : <type 'NoneType'>
=> list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: list_REF2 = [] 
=> list_REF2 = [] : <type 'list'>
==================================================
result = list3.pop(ival1)                                               # STEP 50
ACTION: result = list3.pop(ival1) 
ival1 = -36 : <type 'int'>
list3 = SortedList([9, 13, 13], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [9, 13, 13] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: result_REF = list_REF3.pop(ival1) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> pop index out of range
==================================================
list3.islice(start=ival2,stop=ival9)                                    # STEP 51
ACTION: list3.islice(start=ival2,stop=ival9) 
ival2 = 9 : <type 'int'>
ival9 = -13 : <type 'int'>
list3 = SortedList([9, 13, 13], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [9, 13, 13] : <type 'list'>
REFERENCE ACTION: list_REF3.islice(start=ival2,stop=ival9) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'islice'
==================================================
dict3.irange(minimum=val3,maximum=val9,inclusive=(False,True),reverse=True)  # STEP 52
ACTION: dict3.irange(minimum=val3,maximum=val9,inclusive=(False,True),reverse=True) 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val3 = 9 : <type 'int'>
val9 = 'W' : <type 'str'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF3.irange(minimum=val3,maximum=val9,inclusive=(False,True),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'irange'
==================================================
ival8 = ival1 * ival8                                                   # STEP 53
ACTION: ival8 = ival1 * ival8 
ival1 = -36 : <type 'int'>
ival8 = -4 : <type 'int'>
=> ival8 = 144 : <type 'int'>
==================================================
ival2 = ival8 * ival2                                                   # STEP 54
ACTION: ival2 = ival8 * ival2 
ival8 = 144 : <type 'int'>
ival2 = 9 : <type 'int'>
=> ival2 = 1296 : <type 'int'>
==================================================
list3.insert(ival3,val3)                                                # STEP 55
ACTION: list3.insert(ival3,val3) 
ival3 = 0 : <type 'int'>
list3 = SortedList([9, 13, 13], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val3 = 9 : <type 'int'>
list_REF3 = [9, 13, 13] : <type 'list'>
=> list3 = SortedList([9, 9, 13, 13], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: sortListInsert(list_REF3,ival3,val3) 
=> list_REF3 = [9, 9, 13, 13] : <type 'list'>
==================================================
list3.irange(minimum=val6,maximum=val3,inclusive=(False,True))          # STEP 56
ACTION: list3.irange(minimum=val6,maximum=val3,inclusive=(False,True)) 
list3 = SortedList([9, 9, 13, 13], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val6 = 13 : <type 'int'>
val3 = 9 : <type 'int'>
list_REF3 = [9, 9, 13, 13] : <type 'list'>
REFERENCE ACTION: list_REF3.irange(minimum=val6,maximum=val3,inclusive=(False,True)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
sval7 = sval9 + sval2                                                   # STEP 57
ACTION: sval7 = sval9 + sval2 
sval9 = 'W' : <type 'str'>
sval2 = 'n' : <type 'str'>
sval7 = None : <type 'NoneType'>
=> sval7 = 'Wn' : <type 'str'>
==================================================
set3 = set1.union(set0)                                                 # STEP 58
ACTION: set3 = set1.union(set0) 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set3 = None : <type 'NoneType'>
set_REF1 = set([]) : <type 'set'>
set_REF0 = set([]) : <type 'set'>
set_REF3 = None : <type 'NoneType'>
=> set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF3 = set_REF1.union(set_REF0) 
=> set_REF3 = set([]) : <type 'set'>
==================================================
list3.update(list2)                                                     # STEP 59
ACTION: list3.update(list2) 
list3 = SortedList([9, 9, 13, 13], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [9, 9, 13, 13] : <type 'list'>
list_REF2 = [] : <type 'list'>
REFERENCE ACTION: sortListMultiAdd(list_REF3,list_REF2) 
==================================================
ival8 = ival3 * ival8                                                   # STEP 60
ACTION: ival8 = ival3 * ival8 
ival3 = 0 : <type 'int'>
ival8 = 144 : <type 'int'>
=> ival8 = 0 : <type 'int'>
==================================================
dict4 = dict0.copy()                                                    # STEP 61
ACTION: dict4 = dict0.copy() 
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict4 = None : <type 'NoneType'>
dict_REF0 = {} : <type 'dict'>
dict_REF4 = None : <type 'NoneType'>
=> dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF4 = dict_REF0.copy() 
=> dict_REF4 = {} : <type 'dict'>
==================================================
set1 = set0.copy()                                                      # STEP 62
ACTION: set1 = set0.copy() 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1 = set_REF0.copy() 
==================================================
ival3 = 15                                                              # STEP 63
ACTION: ival3 = 15 
ival3 = 0 : <type 'int'>
=> ival3 = 15 : <type 'int'>
==================================================
result = len(dict3.keys())                                              # STEP 64
ACTION: result = len(dict3.keys())  
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF3.keys())  
==================================================
set2 = set0 ^ set2                                                      # STEP 65
ACTION: set2 = set0 ^ set2 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF2 = set_REF0 ^ set_REF2 
==================================================
set3 ^= set1                                                            # STEP 66
ACTION: set3 ^= set1 
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF3 = set([]) : <type 'set'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF3 ^= set_REF1 
==================================================
sval2 = 'i'                                                             # STEP 67
ACTION: sval2 = 'i' 
sval2 = 'n' : <type 'str'>
=> sval2 = 'i' : <type 'str'>
==================================================
ival6 = ival2 - ival1                                                   # STEP 68
ACTION: ival6 = ival2 - ival1 
ival2 = 1296 : <type 'int'>
ival1 = -36 : <type 'int'>
ival6 = None : <type 'NoneType'>
=> ival6 = 1332 : <type 'int'>
==================================================
dict3 = dict2.fromkeys(set3,val3) ; result = dict3                      # STEP 69
ACTION: dict3 = dict2.fromkeys(set3,val3) ; result = dict3 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
val3 = 9 : <type 'int'>
dict_REF2 = {} : <type 'dict'>
dict_REF3 = {} : <type 'dict'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: dict_REF3 = dict_REF2.fromkeys(set_REF3,val3) ; result_REF = dict_REF3 
==================================================
set2.irange(minimum=val6,maximum=val3,inclusive=(False,True),reverse=True)  # STEP 70
ACTION: set2.irange(minimum=val6,maximum=val3,inclusive=(False,True),reverse=True) 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
val6 = 13 : <type 'int'>
val3 = 9 : <type 'int'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF2.irange(minimum=val6,maximum=val3,inclusive=(False,True),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'irange'
==================================================
result = len(dict3.keys())                                              # STEP 71
ACTION: result = len(dict3.keys())  
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF3.keys())  
==================================================
result = dict2 == dict4                                                 # STEP 72
ACTION: result = dict2 == dict4 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF2 = {} : <type 'dict'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = dict_REF2 == dict_REF4 
==================================================
set2 = set2 - set0                                                      # STEP 73
ACTION: set2 = set2 - set0 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF2 = set([]) : <type 'set'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF2 = set_REF2 - set_REF0 
==================================================
sval8 = sval9 + sval9                                                   # STEP 74
ACTION: sval8 = sval9 + sval9 
sval9 = 'W' : <type 'str'>
sval8 = None : <type 'NoneType'>
=> sval8 = 'WW' : <type 'str'>
==================================================
dict1.get(val6,None)                                                    # STEP 75
ACTION: dict1.get(val6,None) 
dict1 = SortedDict(None, 1000, {9: 9, 13: 9}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val6 = 13 : <type 'int'>
dict_REF1 = {9: 9, 13: 9} : <type 'dict'>
REFERENCE ACTION: dict_REF1.get(val6,None) 
==================================================
result = list2 != list2                                                 # STEP 76
ACTION: result = list2 != list2 
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF2 = [] : <type 'list'>
REFERENCE ACTION: result_REF = list_REF2 != list_REF2 
==================================================
dict4.irange(minimum=val9,maximum=val6,inclusive=(False,True))          # STEP 77
ACTION: dict4.irange(minimum=val9,maximum=val6,inclusive=(False,True)) 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val9 = 'W' : <type 'str'>
val6 = 13 : <type 'int'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF4.irange(minimum=val9,maximum=val6,inclusive=(False,True)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'irange'
==================================================
val6 in dict0                                                           # STEP 78
ACTION: val6 in dict0 
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val6 = 13 : <type 'int'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: val6 in dict_REF0 
==================================================
ival1 = ival8 + ival6                                                   # STEP 79
ACTION: ival1 = ival8 + ival6 
ival8 = 0 : <type 'int'>
ival6 = 1332 : <type 'int'>
ival1 = -36 : <type 'int'>
=> ival1 = 1332 : <type 'int'>
==================================================
dict1 = sortedcontainers.SortedDict()                                   # STEP 80
ACTION: dict1 = sortedcontainers.SortedDict() 
dict1 = SortedDict(None, 1000, {9: 9, 13: 9}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {9: 9, 13: 9} : <type 'dict'>
=> dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF1 = {} 
=> dict_REF1 = {} : <type 'dict'>
==================================================
del list3 [ival9]                                                       # STEP 81
ACTION: del list3 [ival9] 
ival9 = -13 : <type 'int'>
list3 = SortedList([9, 9, 13, 13], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [9, 9, 13, 13] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: del list_REF3 [ival9] 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list assignment index out of range
==================================================
set1 = set1 ^ set2                                                      # STEP 82
ACTION: set1 = set1 ^ set2 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF1 = set([]) : <type 'set'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1 = set_REF1 ^ set_REF2 
==================================================
result = dict4 != dict0                                                 # STEP 83
ACTION: result = dict4 != dict0 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF4 = {} : <type 'dict'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = dict_REF4 != dict_REF0 
==================================================
result = list3 == list3                                                 # STEP 84
ACTION: result = list3 == list3 
list3 = SortedList([9, 9, 13, 13], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [9, 9, 13, 13] : <type 'list'>
REFERENCE ACTION: result_REF = list_REF3 == list_REF3 
==================================================
dict0 [val6]                                                            # STEP 85
ACTION: dict0 [val6] 
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val6 = 13 : <type 'int'>
dict_REF0 = {} : <type 'dict'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.KeyError'> 13
REFERENCE ACTION: dict_REF0 [val6] 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.KeyError'> 13
==================================================
list3.update(set1)                                                      # STEP 86
ACTION: list3.update(set1) 
list3 = SortedList([9, 9, 13, 13], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
list_REF3 = [9, 9, 13, 13] : <type 'list'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: sortListMultiAdd(list_REF3,set_REF1) 
==================================================
list3.islice(start=None,stop=ival8)                                     # STEP 87
ACTION: list3.islice(start=None,stop=ival8) 
ival8 = 0 : <type 'int'>
list3 = SortedList([9, 9, 13, 13], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [9, 9, 13, 13] : <type 'list'>
REFERENCE ACTION: list_REF3.islice(start=None,stop=ival8) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'islice'
==================================================
dict3.update(dict0)                                                     # STEP 88
ACTION: dict3.update(dict0) 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF3.update(dict_REF0) 
==================================================
result = list2.pop(ival6)                                               # STEP 89
ACTION: result = list2.pop(ival6) 
ival6 = 1332 : <type 'int'>
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> pop index out of range
REFERENCE ACTION: result_REF = list_REF2.pop(ival6) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> pop from empty list
==================================================
sval0 = 'O'                                                             # STEP 90
ACTION: sval0 = 'O' 
sval0 = None : <type 'NoneType'>
=> sval0 = 'O' : <type 'str'>
==================================================
result = dict0.peekitem(ival9)                                          # STEP 91
ACTION: result = dict0.peekitem(ival9) 
ival9 = -13 : <type 'int'>
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF0 = {} : <type 'dict'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: result_REF = sortDictPeekitem(dict_REF0,ival9) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
==================================================
set3 = set0 | set3                                                      # STEP 92
ACTION: set3 = set0 | set3 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF3 = set_REF0 | set_REF3 
==================================================
dict4 = dict4.fromkeys(set1,val6) ; result = dict4                      # STEP 93
ACTION: dict4 = dict4.fromkeys(set1,val6) ; result = dict4 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
val6 = 13 : <type 'int'>
dict_REF4 = {} : <type 'dict'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: dict_REF4 = dict_REF4.fromkeys(set_REF1,val6) ; result_REF = dict_REF4 
==================================================
list3.extend(list2)                                                     # STEP 94
ACTION: list3.extend(list2) 
list3 = SortedList([9, 9, 13, 13], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [9, 9, 13, 13] : <type 'list'>
list_REF2 = [] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x12046f638>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 702994, in act11967
    self.p_list[3].extend(self.p_list[2])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 37
STOPPING TESTING DUE TO TIMEOUT
23.1097324544 PERCENT COVERED
60.2479021549 TOTAL RUNTIME
21 EXECUTED
2032 TOTAL TEST OPERATIONS
1.56248140335 TIME SPENT EXECUTING TEST OPERATIONS
56.2322738171 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
1.41010427475 TIME SPENT CHECKING PROPERTIES
2.9725856781 TOTAL TIME SPENT RUNNING SUT
0.516108036041 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
sval9 = 'W'                                                              # STEP 0
ival1 = 13                                                               # STEP 1
list3 = sortedcontainers.SortedList()                                    # STEP 2
list3 > list3                                                            # STEP 3
setListSlice(list3,ival1,ival1,list3)                                    # STEP 4
list3.islice(start=None,stop=ival1)                                      # STEP 5
val6 = ival1                                                             # STEP 6
list3.islice(start=ival1,stop=ival1)                                     # STEP 7
result = list3.pop(ival1)                                                # STEP 8
ival2 = 9                                                                # STEP 9
dict3 = sortedcontainers.SortedDict()                                   # STEP 10
dict1 = dict3.fromkeys(list3,val6) ; result = dict1                     # STEP 11
list3 < list3                                                           # STEP 12
val3 = ival2                                                            # STEP 13
ival8 = ival2 - ival1                                                   # STEP 14
result = dict3 == dict3                                                 # STEP 15
dict2 = dict3.copy()                                                    # STEP 16
list3.irange(minimum=val6,maximum=val6,inclusive=(False,False),reverse=True)  # STEP 17
dict0 = dict2.copy()                                                    # STEP 18
sval2 = 'n'                                                             # STEP 19
result = sorted(list(dict1.keys()))                                     # STEP 20
list3.add(val6)                                                         # STEP 21
list3.irange(minimum=val3,maximum=val3,inclusive=(False,True),reverse=True)  # STEP 22
ival1 = ival8 * ival2                                                   # STEP 23
set2 = sortedcontainers.SortedSet()                                     # STEP 24
dict1 = dict2.fromkeys(list3,val3) ; result = dict1                     # STEP 25
set2.irange(minimum=val6,maximum=val6,inclusive=(False,True))           # STEP 26
setList(list3,ival1,val6)                                               # STEP 27
dict0.irange(minimum=val6,maximum=val6,inclusive=(True,False))          # STEP 28
dict0.get(val6,val3)                                                    # STEP 29
result = dict2 == dict3                                                 # STEP 30
val9 = sval9                                                            # STEP 31
dict2 = dict2.copy()                                                    # STEP 32
set2.irange(minimum=val3,maximum=val6,inclusive=(True,False))           # STEP 33
del list3 [ival2]                                                       # STEP 34
result = list3.index(val6)                                              # STEP 35
val9 in dict1                                                           # STEP 36
set1 = set2 & set2                                                      # STEP 37
list3+=list3                                                            # STEP 38
set2.irange(minimum=val6,maximum=val6,inclusive=(False,True))           # STEP 39
ival9 = ival8 - ival2                                                   # STEP 40
ival3 = ival9 - ival9                                                   # STEP 41
list3.insert(ival3,val3)                                                # STEP 42
set1 &= set1                                                            # STEP 43
dict1 = dict1.fromkeys(list3,val3) ; result = dict1                     # STEP 44
list3.irange(minimum=val6,maximum=val9,inclusive=(False,False),reverse=True)  # STEP 45
set2.irange(minimum=val6,maximum=val3,inclusive=(False,True))           # STEP 46
set0 = set2 - set1                                                      # STEP 47
dict1.get(val9,val3)                                                    # STEP 48
list2 = sortedcontainers.SortedList()                                   # STEP 49
result = list3.pop(ival1)                                               # STEP 50
list3.islice(start=ival2,stop=ival9)                                    # STEP 51
dict3.irange(minimum=val3,maximum=val9,inclusive=(False,True),reverse=True)  # STEP 52
ival8 = ival1 * ival8                                                   # STEP 53
ival2 = ival8 * ival2                                                   # STEP 54
list3.insert(ival3,val3)                                                # STEP 55
list3.irange(minimum=val6,maximum=val3,inclusive=(False,True))          # STEP 56
sval7 = sval9 + sval2                                                   # STEP 57
set3 = set1.union(set0)                                                 # STEP 58
list3.update(list2)                                                     # STEP 59
ival8 = ival3 * ival8                                                   # STEP 60
dict4 = dict0.copy()                                                    # STEP 61
set1 = set0.copy()                                                      # STEP 62
ival3 = 15                                                              # STEP 63
result = len(dict3.keys())                                              # STEP 64
set2 = set0 ^ set2                                                      # STEP 65
set3 ^= set1                                                            # STEP 66
sval2 = 'i'                                                             # STEP 67
ival6 = ival2 - ival1                                                   # STEP 68
dict3 = dict2.fromkeys(set3,val3) ; result = dict3                      # STEP 69
set2.irange(minimum=val6,maximum=val3,inclusive=(False,True),reverse=True)  # STEP 70
result = len(dict3.keys())                                              # STEP 71
result = dict2 == dict4                                                 # STEP 72
set2 = set2 - set0                                                      # STEP 73
sval8 = sval9 + sval9                                                   # STEP 74
dict1.get(val6,None)                                                    # STEP 75
result = list2 != list2                                                 # STEP 76
dict4.irange(minimum=val9,maximum=val6,inclusive=(False,True))          # STEP 77
val6 in dict0                                                           # STEP 78
ival1 = ival8 + ival6                                                   # STEP 79
dict1 = sortedcontainers.SortedDict()                                   # STEP 80
del list3 [ival9]                                                       # STEP 81
set1 = set1 ^ set2                                                      # STEP 82
result = dict4 != dict0                                                 # STEP 83
result = list3 == list3                                                 # STEP 84
dict0 [val6]                                                            # STEP 85
list3.update(set1)                                                      # STEP 86
list3.islice(start=None,stop=ival8)                                     # STEP 87
dict3.update(dict0)                                                     # STEP 88
result = list2.pop(ival6)                                               # STEP 89
sval0 = 'O'                                                             # STEP 90
result = dict0.peekitem(ival9)                                          # STEP 91
set3 = set0 | set3                                                      # STEP 92
dict4 = dict4.fromkeys(set1,val6) ; result = dict4                      # STEP 93
list3.extend(list2)                                                     # STEP 94
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x12046f638>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 702994, in act11967
    self.p_list[3].extend(self.p_list[2])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
576 BRANCHES COVERED
439 STATEMENTS COVERED

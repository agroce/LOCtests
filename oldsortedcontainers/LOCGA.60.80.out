Random testing using config=Config(noExceptionMatch=False, generalize=False, localize=False, speed='FAST', probs='locsample.probs', LOCBaseline=0.2, noAlphaConvert=False, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, html=None, keepLast=False, stopWhenNoCoverage=None, generateLOC=None, computeFeatureStats=False, Pmutate=0.8, timeout=60, output='failure.11081.test', markov=None, noSwarmDependencies=False, startExploit=0.0, maxMustHitBranch=None, useHints=False, silentFail=False, highLowSwarm=None, maxMustHitStatement=None, progress=False, postCover=False, swarmLength=None, noCover=False, noEnumerateEnabled=False, full=True, swarmP=0.5, coverFile='coverage.out', markovP=1.0, swarmProbs=None, genDepth=None, exploitCeiling=0.1, logging=None, noCheck=False, throughput=False, uncaught=False, swarmSwitch=None, verbose=False, reducePool=False, exploit=0.8, fastQuickAnalysis=False, total=False, verboseExploit=False, swarm=False, sequenceP=1.0, biasLOC=None, timedProgress=30, relax=False, ddmin=False, stutter=None, readQuick=False, verboseActions=False, quickAnalysis=False, noReassign=False, sequenceSize=3, LOCProbs=False, sequencesFromTests=None, maxTests=-1, trackMaxCoverage=None, useQuickSequences=False, exploitBestHint=1, failedLogging=None, stopWhenStatements=None, greedyStutter=False, seed=None, stopWhenHitStatement=None, uniqueValuesAnalysis=False, normalize=False, startExploitStall=0, enumerateEnabled=False, internal=False, profile=False, multiple=True, stopWhenBranches=None, running=False, compareFails=False, Pcrossover=0.2, stopWhenHitBranch=None, depth=100, showActions=False)
** STARTING EXPLOITATION OF TESTS AT TIME 0.65337395668 AFTER 0 TESTS WITH NO NEW COVERAGE **
TEST #12 STEP #36 (0:00:30.009175) Mon Nov 20 20:13:50 2017 [ 376 stmts 490 branches ] 1136 TOTAL ACTIONS (37.8550895408/s)
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x11fd1dc68>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 702872, in act11965
    self.p_list[3].extend(self.p_list[0])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
Original test has 59 steps

SAVING TEST AS failure.11081.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
list3 = sortedcontainers.SortedList()                                    # STEP 0
ACTION: list3 = sortedcontainers.SortedList() 
list3 = None : <type 'NoneType'>
list_REF3 = None : <type 'NoneType'>
=> list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: list_REF3 = [] 
=> list_REF3 = [] : <type 'list'>
==================================================
ival9 = 11                                                               # STEP 1
ACTION: ival9 = 11 
ival9 = None : <type 'NoneType'>
=> ival9 = 11 : <type 'int'>
==================================================
list3.update(list3)                                                      # STEP 2
ACTION: list3.update(list3) 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [] : <type 'list'>
REFERENCE ACTION: sortListMultiAdd(list_REF3,list_REF3) 
==================================================
ival7 = 8                                                                # STEP 3
ACTION: ival7 = 8 
ival7 = None : <type 'NoneType'>
=> ival7 = 8 : <type 'int'>
==================================================
ival5 = 18                                                               # STEP 4
ACTION: ival5 = 18 
ival5 = None : <type 'NoneType'>
=> ival5 = 18 : <type 'int'>
==================================================
sval4 = 'w'                                                              # STEP 5
ACTION: sval4 = 'w' 
sval4 = None : <type 'NoneType'>
=> sval4 = 'w' : <type 'str'>
==================================================
reversed(list3)                                                          # STEP 6
ACTION: reversed(list3) 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [] : <type 'list'>
REFERENCE ACTION: reversed(list_REF3) 
==================================================
list3 < list3                                                            # STEP 7
ACTION: list3 < list3 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [] : <type 'list'>
REFERENCE ACTION: list_REF3 < list_REF3 
==================================================
result = list3 == list3                                                  # STEP 8
ACTION: result = list3 == list3 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [] : <type 'list'>
REFERENCE ACTION: result_REF = list_REF3 == list_REF3 
==================================================
result = list3 != list3                                                  # STEP 9
ACTION: result = list3 != list3 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [] : <type 'list'>
REFERENCE ACTION: result_REF = list_REF3 != list_REF3 
==================================================
plist1 = list3 [ival5 : ival5]                                          # STEP 10
ACTION: plist1 = list3 [ival5 : ival5] 
ival5 = 18 : <type 'int'>
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
plist1 = None : <type 'NoneType'>
list_REF3 = [] : <type 'list'>
=> plist1 = [] : <type 'list'>
REFERENCE ACTION: plist1 = list_REF3 [ival5 : ival5] 
==================================================
dict3 = sortedcontainers.SortedDict()                                   # STEP 11
ACTION: dict3 = sortedcontainers.SortedDict() 
dict3 = None : <type 'NoneType'>
dict_REF3 = None : <type 'NoneType'>
=> dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF3 = {} 
=> dict_REF3 = {} : <type 'dict'>
==================================================
result = len(dict3.keys())                                              # STEP 12
ACTION: result = len(dict3.keys())  
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF3.keys())  
==================================================
setListSlice(list3,ival7,ival5,list3)                                   # STEP 13
ACTION: setListSlice(list3,ival7,ival5,list3) 
ival7 = 8 : <type 'int'>
ival5 = 18 : <type 'int'>
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [] : <type 'list'>
REFERENCE ACTION: sortListSetSlice(list_REF3,ival7,ival5,list_REF3) 
==================================================
dict3.islice(start=None,stop=ival7)                                     # STEP 14
ACTION: dict3.islice(start=None,stop=ival7) 
ival7 = 8 : <type 'int'>
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF3.islice(start=None,stop=ival7) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'islice'
==================================================
result = dict3.popitem(last=False)                                      # STEP 15
ACTION: result = dict3.popitem(last=False) 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.KeyError'> 'popitem(): dictionary is empty'
REFERENCE ACTION: result_REF = sortDictPopitem(dict_REF3,last=False) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.KeyError'> 
==================================================
result = len(dict3)                                                     # STEP 16
ACTION: result = len(dict3) 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF3) 
==================================================
dict3.islice(start=None,stop=None)                                      # STEP 17
ACTION: dict3.islice(start=None,stop=None) 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF3.islice(start=None,stop=None) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'islice'
==================================================
sval1 = sval4 + sval4                                                   # STEP 18
ACTION: sval1 = sval4 + sval4 
sval4 = 'w' : <type 'str'>
sval1 = None : <type 'NoneType'>
=> sval1 = 'ww' : <type 'str'>
==================================================
result = dict3.peekitem(ival5)                                          # STEP 19
ACTION: result = dict3.peekitem(ival5) 
ival5 = 18 : <type 'int'>
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: result_REF = sortDictPeekitem(dict_REF3,ival5) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
==================================================
val7 = ival5                                                            # STEP 20
ACTION: val7 = ival5 
ival5 = 18 : <type 'int'>
val7 = None : <type 'NoneType'>
=> val7 = 18 : <type 'int'>
==================================================
dict0 = dict3.fromkeys(list3,val7) ; result = dict0                     # STEP 21
ACTION: dict0 = dict3.fromkeys(list3,val7) ; result = dict0 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict0 = None : <type 'NoneType'>
val7 = 18 : <type 'int'>
list_REF3 = [] : <type 'list'>
dict_REF3 = {} : <type 'dict'>
dict_REF0 = None : <type 'NoneType'>
=> dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF0 = dict_REF3.fromkeys(list_REF3,val7) ; result_REF = dict_REF0 
=> dict_REF0 = {} : <type 'dict'>
==================================================
dict0.irange(minimum=val7,maximum=val7,inclusive=(True,False))          # STEP 22
ACTION: dict0.irange(minimum=val7,maximum=val7,inclusive=(True,False)) 
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val7 = 18 : <type 'int'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF0.irange(minimum=val7,maximum=val7,inclusive=(True,False)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'irange'
==================================================
dict0.irange(minimum=val7,maximum=val7,inclusive=(False,False))         # STEP 23
ACTION: dict0.irange(minimum=val7,maximum=val7,inclusive=(False,False)) 
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val7 = 18 : <type 'int'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF0.irange(minimum=val7,maximum=val7,inclusive=(False,False)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'irange'
==================================================
val8 = sval1                                                            # STEP 24
ACTION: val8 = sval1 
sval1 = 'ww' : <type 'str'>
val8 = None : <type 'NoneType'>
=> val8 = 'ww' : <type 'str'>
==================================================
dict0.irange(minimum=val8,maximum=val8,inclusive=(False,False))         # STEP 25
ACTION: dict0.irange(minimum=val8,maximum=val8,inclusive=(False,False)) 
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val8 = 'ww' : <type 'str'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF0.irange(minimum=val8,maximum=val8,inclusive=(False,False)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'irange'
==================================================
dict3 = sortedcontainers.SortedDict()                                   # STEP 26
ACTION: dict3 = sortedcontainers.SortedDict() 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF3 = {} 
==================================================
result = dict0 != dict0                                                 # STEP 27
ACTION: result = dict0 != dict0 
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = dict_REF0 != dict_REF0 
==================================================
result = dict0.setdefault(val7,val7)                                    # STEP 28
ACTION: result = dict0.setdefault(val7,val7) 
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val7 = 18 : <type 'int'>
dict_REF0 = {} : <type 'dict'>
=> dict0 = SortedDict(None, 1000, {18: 18}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: result_REF = dict_REF0.setdefault(val7,val7) 
=> dict_REF0 = {18: 18} : <type 'dict'>
==================================================
list3.irange(minimum=val7,maximum=val8,inclusive=(False,False))         # STEP 29
ACTION: list3.irange(minimum=val7,maximum=val8,inclusive=(False,False)) 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val7 = 18 : <type 'int'>
val8 = 'ww' : <type 'str'>
list_REF3 = [] : <type 'list'>
REFERENCE ACTION: list_REF3.irange(minimum=val7,maximum=val8,inclusive=(False,False)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
dict3.get(val7,None)                                                    # STEP 30
ACTION: dict3.get(val7,None) 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val7 = 18 : <type 'int'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF3.get(val7,None) 
==================================================
list3.append(val8)                                                      # STEP 31
ACTION: list3.append(val8) 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val8 = 'ww' : <type 'str'>
list_REF3 = [] : <type 'list'>
=> list3 = SortedList(['ww'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: sortListAppend(list_REF3,val8) 
=> list_REF3 = ['ww'] : <type 'list'>
==================================================
list3.extend(list3)                                                     # STEP 32
ACTION: list3.extend(list3) 
list3 = SortedList(['ww'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = ['ww'] : <type 'list'>
=> list3 = SortedList(['ww', 'ww'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: sortListExtend(list_REF3,list_REF3) 
=> list_REF3 = ['ww', 'ww'] : <type 'list'>
==================================================
dict0.irange(minimum=val7,maximum=val8,inclusive=(False,True),reverse=True)  # STEP 33
ACTION: dict0.irange(minimum=val7,maximum=val8,inclusive=(False,True),reverse=True) 
dict0 = SortedDict(None, 1000, {18: 18}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val7 = 18 : <type 'int'>
val8 = 'ww' : <type 'str'>
dict_REF0 = {18: 18} : <type 'dict'>
REFERENCE ACTION: dict_REF0.irange(minimum=val7,maximum=val8,inclusive=(False,True),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'irange'
==================================================
del dict0 [val7]                                                        # STEP 34
ACTION: del dict0 [val7] 
dict0 = SortedDict(None, 1000, {18: 18}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val7 = 18 : <type 'int'>
dict_REF0 = {18: 18} : <type 'dict'>
=> dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: del dict_REF0 [val7] 
=> dict_REF0 = {} : <type 'dict'>
==================================================
sval7 = sval1 + sval4                                                   # STEP 35
ACTION: sval7 = sval1 + sval4 
sval1 = 'ww' : <type 'str'>
sval4 = 'w' : <type 'str'>
sval7 = None : <type 'NoneType'>
=> sval7 = 'www' : <type 'str'>
==================================================
val4 = sval7                                                            # STEP 36
ACTION: val4 = sval7 
sval7 = 'www' : <type 'str'>
val4 = None : <type 'NoneType'>
=> val4 = 'www' : <type 'str'>
==================================================
result = sorted(list(dict0.keys()))                                     # STEP 37
ACTION: result = sorted(list(dict0.keys())) 
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = sorted(list(dict_REF0.keys())) 
==================================================
dict3.irange(minimum=val7,maximum=val7,inclusive=(True,False),reverse=True)  # STEP 38
ACTION: dict3.irange(minimum=val7,maximum=val7,inclusive=(True,False),reverse=True) 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val7 = 18 : <type 'int'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF3.irange(minimum=val7,maximum=val7,inclusive=(True,False),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'irange'
==================================================
list3 >= list3                                                          # STEP 39
ACTION: list3 >= list3 
list3 = SortedList(['ww', 'ww'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = ['ww', 'ww'] : <type 'list'>
REFERENCE ACTION: list_REF3 >= list_REF3 
==================================================
ival4 = ival9 + ival7                                                   # STEP 40
ACTION: ival4 = ival9 + ival7 
ival9 = 11 : <type 'int'>
ival7 = 8 : <type 'int'>
ival4 = None : <type 'NoneType'>
=> ival4 = 19 : <type 'int'>
==================================================
dict0.irange(minimum=val7,maximum=val8,inclusive=(False,True))          # STEP 41
ACTION: dict0.irange(minimum=val7,maximum=val8,inclusive=(False,True)) 
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val7 = 18 : <type 'int'>
val8 = 'ww' : <type 'str'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF0.irange(minimum=val7,maximum=val8,inclusive=(False,True)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'irange'
==================================================
set0 = sortedcontainers.SortedSet()                                     # STEP 42
ACTION: set0 = sortedcontainers.SortedSet() 
set0 = None : <type 'NoneType'>
set_REF0 = None : <type 'NoneType'>
=> set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF0 = set([]) 
=> set_REF0 = set([]) : <type 'set'>
==================================================
list3 <= list3                                                          # STEP 43
ACTION: list3 <= list3 
list3 = SortedList(['ww', 'ww'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = ['ww', 'ww'] : <type 'list'>
REFERENCE ACTION: list_REF3 <= list_REF3 
==================================================
set2 = set0 | set0                                                      # STEP 44
ACTION: set2 = set0 | set0 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set2 = None : <type 'NoneType'>
set_REF0 = set([]) : <type 'set'>
set_REF2 = None : <type 'NoneType'>
=> set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF2 = set_REF0 | set_REF0 
=> set_REF2 = set([]) : <type 'set'>
==================================================
list0 = sortedcontainers.SortedList()                                   # STEP 45
ACTION: list0 = sortedcontainers.SortedList() 
list0 = None : <type 'NoneType'>
list_REF0 = None : <type 'NoneType'>
=> list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: list_REF0 = [] 
=> list_REF0 = [] : <type 'list'>
==================================================
ival0 = ival4 * ival5                                                   # STEP 46
ACTION: ival0 = ival4 * ival5 
ival4 = 19 : <type 'int'>
ival5 = 18 : <type 'int'>
ival0 = None : <type 'NoneType'>
=> ival0 = 342 : <type 'int'>
==================================================
ival9 = ival4 + ival0                                                   # STEP 47
ACTION: ival9 = ival4 + ival0 
ival4 = 19 : <type 'int'>
ival0 = 342 : <type 'int'>
ival9 = 11 : <type 'int'>
=> ival9 = 361 : <type 'int'>
==================================================
result = list3 == list3                                                 # STEP 48
ACTION: result = list3 == list3 
list3 = SortedList(['ww', 'ww'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = ['ww', 'ww'] : <type 'list'>
REFERENCE ACTION: result_REF = list_REF3 == list_REF3 
==================================================
set3 = set0.copy()                                                      # STEP 49
ACTION: set3 = set0.copy() 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set3 = None : <type 'NoneType'>
set_REF0 = set([]) : <type 'set'>
set_REF3 = None : <type 'NoneType'>
=> set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF3 = set_REF0.copy() 
=> set_REF3 = set([]) : <type 'set'>
==================================================
result = (dict3.keys()).count(val7)                                     # STEP 50
ACTION: result = (dict3.keys()).count(val7)  
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val7 = 18 : <type 'int'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = (dict_REF3.keys()).count(val7)  
==================================================
set0 = set2 | set2                                                      # STEP 51
ACTION: set0 = set2 | set2 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF2 = set([]) : <type 'set'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF0 = set_REF2 | set_REF2 
==================================================
dict4 = dict0.fromkeys(list3,val7) ; result = dict4                     # STEP 52
ACTION: dict4 = dict0.fromkeys(list3,val7) ; result = dict4 
list3 = SortedList(['ww', 'ww'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict4 = None : <type 'NoneType'>
val7 = 18 : <type 'int'>
list_REF3 = ['ww', 'ww'] : <type 'list'>
dict_REF0 = {} : <type 'dict'>
dict_REF4 = None : <type 'NoneType'>
=> dict4 = SortedDict(None, 1000, {'ww': 18}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF4 = dict_REF0.fromkeys(list_REF3,val7) ; result_REF = dict_REF4 
=> dict_REF4 = {'ww': 18} : <type 'dict'>
==================================================
dict2 = dict3.copy()                                                    # STEP 53
ACTION: dict2 = dict3.copy() 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict2 = None : <type 'NoneType'>
dict_REF3 = {} : <type 'dict'>
dict_REF2 = None : <type 'NoneType'>
=> dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF2 = dict_REF3.copy() 
=> dict_REF2 = {} : <type 'dict'>
==================================================
plist4 = list0 [ival7 : ival7]                                          # STEP 54
ACTION: plist4 = list0 [ival7 : ival7] 
ival7 = 8 : <type 'int'>
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
plist4 = None : <type 'NoneType'>
list_REF0 = [] : <type 'list'>
=> plist4 = [] : <type 'list'>
REFERENCE ACTION: plist4 = list_REF0 [ival7 : ival7] 
==================================================
dict0.islice(start=None,stop=ival7)                                     # STEP 55
ACTION: dict0.islice(start=None,stop=ival7) 
ival7 = 8 : <type 'int'>
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF0.islice(start=None,stop=ival7) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'islice'
==================================================
dict2.update(dict2)                                                     # STEP 56
ACTION: dict2.update(dict2) 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF2.update(dict_REF2) 
==================================================
result = sorted(list(dict0.items()))                                    # STEP 57
ACTION: result = sorted(list(dict0.items())) 
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = sorted(list(dict_REF0.items())) 
==================================================
list3.extend(list0)                                                     # STEP 58
ACTION: list3.extend(list0) 
list3 = SortedList(['ww', 'ww'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = ['ww', 'ww'] : <type 'list'>
list_REF0 = [] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x11fd4f758>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 702872, in act11965
    self.p_list[3].extend(self.p_list[0])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 185
STOPPING TESTING DUE TO TIMEOUT
23.7301279566 PERCENT COVERED
60.2144629955 TOTAL RUNTIME
25 EXECUTED
2448 TOTAL TEST OPERATIONS
1.57745337486 TIME SPENT EXECUTING TEST OPERATIONS
55.8679933548 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
1.53112268448 TIME SPENT CHECKING PROPERTIES
3.10857605934 TOTAL TIME SPENT RUNNING SUT
0.475641012192 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
list3 = sortedcontainers.SortedList()                                    # STEP 0
ival9 = 11                                                               # STEP 1
list3.update(list3)                                                      # STEP 2
ival7 = 8                                                                # STEP 3
ival5 = 18                                                               # STEP 4
sval4 = 'w'                                                              # STEP 5
reversed(list3)                                                          # STEP 6
list3 < list3                                                            # STEP 7
result = list3 == list3                                                  # STEP 8
result = list3 != list3                                                  # STEP 9
plist1 = list3 [ival5 : ival5]                                          # STEP 10
dict3 = sortedcontainers.SortedDict()                                   # STEP 11
result = len(dict3.keys())                                              # STEP 12
setListSlice(list3,ival7,ival5,list3)                                   # STEP 13
dict3.islice(start=None,stop=ival7)                                     # STEP 14
result = dict3.popitem(last=False)                                      # STEP 15
result = len(dict3)                                                     # STEP 16
dict3.islice(start=None,stop=None)                                      # STEP 17
sval1 = sval4 + sval4                                                   # STEP 18
result = dict3.peekitem(ival5)                                          # STEP 19
val7 = ival5                                                            # STEP 20
dict0 = dict3.fromkeys(list3,val7) ; result = dict0                     # STEP 21
dict0.irange(minimum=val7,maximum=val7,inclusive=(True,False))          # STEP 22
dict0.irange(minimum=val7,maximum=val7,inclusive=(False,False))         # STEP 23
val8 = sval1                                                            # STEP 24
dict0.irange(minimum=val8,maximum=val8,inclusive=(False,False))         # STEP 25
dict3 = sortedcontainers.SortedDict()                                   # STEP 26
result = dict0 != dict0                                                 # STEP 27
result = dict0.setdefault(val7,val7)                                    # STEP 28
list3.irange(minimum=val7,maximum=val8,inclusive=(False,False))         # STEP 29
dict3.get(val7,None)                                                    # STEP 30
list3.append(val8)                                                      # STEP 31
list3.extend(list3)                                                     # STEP 32
dict0.irange(minimum=val7,maximum=val8,inclusive=(False,True),reverse=True)  # STEP 33
del dict0 [val7]                                                        # STEP 34
sval7 = sval1 + sval4                                                   # STEP 35
val4 = sval7                                                            # STEP 36
result = sorted(list(dict0.keys()))                                     # STEP 37
dict3.irange(minimum=val7,maximum=val7,inclusive=(True,False),reverse=True)  # STEP 38
list3 >= list3                                                          # STEP 39
ival4 = ival9 + ival7                                                   # STEP 40
dict0.irange(minimum=val7,maximum=val8,inclusive=(False,True))          # STEP 41
set0 = sortedcontainers.SortedSet()                                     # STEP 42
list3 <= list3                                                          # STEP 43
set2 = set0 | set0                                                      # STEP 44
list0 = sortedcontainers.SortedList()                                   # STEP 45
ival0 = ival4 * ival5                                                   # STEP 46
ival9 = ival4 + ival0                                                   # STEP 47
result = list3 == list3                                                 # STEP 48
set3 = set0.copy()                                                      # STEP 49
result = (dict3.keys()).count(val7)                                     # STEP 50
set0 = set2 | set2                                                      # STEP 51
dict4 = dict0.fromkeys(list3,val7) ; result = dict4                     # STEP 52
dict2 = dict3.copy()                                                    # STEP 53
plist4 = list0 [ival7 : ival7]                                          # STEP 54
dict0.islice(start=None,stop=ival7)                                     # STEP 55
dict2.update(dict2)                                                     # STEP 56
result = sorted(list(dict0.items()))                                    # STEP 57
list3.extend(list0)                                                     # STEP 58
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x11fd4f758>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 702872, in act11965
    self.p_list[3].extend(self.p_list[0])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
594 BRANCHES COVERED
453 STATEMENTS COVERED

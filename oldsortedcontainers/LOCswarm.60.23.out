Random testing using config=Config(noExceptionMatch=False, generalize=False, localize=False, speed='FAST', probs='locsample.probs', LOCBaseline=0.2, noAlphaConvert=False, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, html=None, keepLast=False, stopWhenNoCoverage=None, generateLOC=None, computeFeatureStats=False, Pmutate=0.0, timeout=60, output='failure.9751.test', markov=None, noSwarmDependencies=False, startExploit=0.0, maxMustHitBranch=None, useHints=False, silentFail=False, highLowSwarm=None, maxMustHitStatement=None, progress=False, postCover=False, swarmLength=None, noCover=False, noEnumerateEnabled=False, full=True, swarmP=0.5, coverFile='coverage.out', markovP=1.0, swarmProbs=None, genDepth=None, exploitCeiling=0.1, logging=None, noCheck=False, throughput=False, uncaught=False, swarmSwitch=None, verbose=False, reducePool=False, exploit=None, fastQuickAnalysis=False, total=False, verboseExploit=False, swarm=True, sequenceP=1.0, biasLOC=None, timedProgress=30, relax=False, ddmin=False, stutter=None, readQuick=False, verboseActions=False, quickAnalysis=False, noReassign=False, sequenceSize=3, LOCProbs=False, sequencesFromTests=None, maxTests=-1, trackMaxCoverage=None, useQuickSequences=False, exploitBestHint=1, failedLogging=None, stopWhenStatements=None, greedyStutter=False, seed=None, stopWhenHitStatement=None, uniqueValuesAnalysis=False, normalize=False, startExploitStall=0, enumerateEnabled=False, internal=False, profile=False, multiple=True, stopWhenBranches=None, running=False, compareFails=False, Pcrossover=0.2, stopWhenHitBranch=None, depth=100, showActions=False)
TEST #13 STEP #18 (0:00:30.033672) Mon Nov 20 14:24:48 2017 [ 404 stmts 530 branches ] (no cov+ for 2 tests) 1218 TOTAL ACTIONS (40.5544818443/s)
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x120a14b00>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 702994, in act11967
    self.p_list[3].extend(self.p_list[2])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
Original test has 81 steps

SAVING TEST AS failure.9751.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
list3 = sortedcontainers.SortedList()                                    # STEP 0
ACTION: list3 = sortedcontainers.SortedList() 
list3 = None : <type 'NoneType'>
list_REF3 = None : <type 'NoneType'>
=> list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: list_REF3 = [] 
=> list_REF3 = [] : <type 'list'>
==================================================
list3 >= list3                                                           # STEP 1
ACTION: list3 >= list3 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [] : <type 'list'>
REFERENCE ACTION: list_REF3 >= list_REF3 
==================================================
list3+=list3                                                             # STEP 2
ACTION: list3+=list3 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [] : <type 'list'>
REFERENCE ACTION: sortListMultiAdd(list_REF3,list_REF3) 
==================================================
sval8 = 'w'                                                              # STEP 3
ACTION: sval8 = 'w' 
sval8 = None : <type 'NoneType'>
=> sval8 = 'w' : <type 'str'>
==================================================
result = list3 == list3                                                  # STEP 4
ACTION: result = list3 == list3 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [] : <type 'list'>
REFERENCE ACTION: result_REF = list_REF3 == list_REF3 
==================================================
ival6 = 17                                                               # STEP 5
ACTION: ival6 = 17 
ival6 = None : <type 'NoneType'>
=> ival6 = 17 : <type 'int'>
==================================================
ival5 = 17                                                               # STEP 6
ACTION: ival5 = 17 
ival5 = None : <type 'NoneType'>
=> ival5 = 17 : <type 'int'>
==================================================
ival8 = 2                                                                # STEP 7
ACTION: ival8 = 2 
ival8 = None : <type 'NoneType'>
=> ival8 = 2 : <type 'int'>
==================================================
list3.extend(list3)                                                      # STEP 8
ACTION: list3.extend(list3) 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [] : <type 'list'>
REFERENCE ACTION: sortListExtend(list_REF3,list_REF3) 
==================================================
ival7 = ival6 - ival5                                                    # STEP 9
ACTION: ival7 = ival6 - ival5 
ival6 = 17 : <type 'int'>
ival5 = 17 : <type 'int'>
ival7 = None : <type 'NoneType'>
=> ival7 = 0 : <type 'int'>
==================================================
list3 <= list3                                                          # STEP 10
ACTION: list3 <= list3 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [] : <type 'list'>
REFERENCE ACTION: list_REF3 <= list_REF3 
==================================================
list3 >= list3                                                          # STEP 11
ACTION: list3 >= list3 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [] : <type 'list'>
REFERENCE ACTION: list_REF3 >= list_REF3 
==================================================
result = list3.pop(ival6)                                               # STEP 12
ACTION: result = list3.pop(ival6) 
ival6 = 17 : <type 'int'>
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> pop index out of range
REFERENCE ACTION: result_REF = list_REF3.pop(ival6) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> pop from empty list
==================================================
set4 = sortedcontainers.SortedSet()                                     # STEP 13
ACTION: set4 = sortedcontainers.SortedSet() 
set4 = None : <type 'NoneType'>
set_REF4 = None : <type 'NoneType'>
=> set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF4 = set([]) 
=> set_REF4 = set([]) : <type 'set'>
==================================================
set4 ^= set4                                                            # STEP 14
ACTION: set4 ^= set4 
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF4 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF4 ^= set_REF4 
==================================================
set3 = set4 - set4                                                      # STEP 15
ACTION: set3 = set4 - set4 
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set3 = None : <type 'NoneType'>
set_REF4 = set([]) : <type 'set'>
set_REF3 = None : <type 'NoneType'>
=> set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF3 = set_REF4 - set_REF4 
=> set_REF3 = set([]) : <type 'set'>
==================================================
set1 = set3 & set4                                                      # STEP 16
ACTION: set1 = set3 & set4 
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set1 = None : <type 'NoneType'>
set_REF3 = set([]) : <type 'set'>
set_REF4 = set([]) : <type 'set'>
set_REF1 = None : <type 'NoneType'>
=> set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF1 = set_REF3 & set_REF4 
=> set_REF1 = set([]) : <type 'set'>
==================================================
list3 >= list3                                                          # STEP 17
ACTION: list3 >= list3 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [] : <type 'list'>
REFERENCE ACTION: list_REF3 >= list_REF3 
==================================================
set0 = set1 & set3                                                      # STEP 18
ACTION: set0 = set1 & set3 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set0 = None : <type 'NoneType'>
set_REF1 = set([]) : <type 'set'>
set_REF3 = set([]) : <type 'set'>
set_REF0 = None : <type 'NoneType'>
=> set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF0 = set_REF1 & set_REF3 
=> set_REF0 = set([]) : <type 'set'>
==================================================
list3.update(set0)                                                      # STEP 19
ACTION: list3.update(set0) 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
list_REF3 = [] : <type 'list'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: sortListMultiAdd(list_REF3,set_REF0) 
==================================================
set4 = set3.copy()                                                      # STEP 20
ACTION: set4 = set3.copy() 
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF3 = set([]) : <type 'set'>
set_REF4 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF4 = set_REF3.copy() 
==================================================
set2 = set1 & set3                                                      # STEP 21
ACTION: set2 = set1 & set3 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set2 = None : <type 'NoneType'>
set_REF1 = set([]) : <type 'set'>
set_REF3 = set([]) : <type 'set'>
set_REF2 = None : <type 'NoneType'>
=> set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF2 = set_REF1 & set_REF3 
=> set_REF2 = set([]) : <type 'set'>
==================================================
repr(list3)                                                             # STEP 22
ACTION: repr(list3) 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [] : <type 'list'>
REFERENCE ACTION: repr(list_REF3) 
==================================================
sval2 = sval8 + sval8                                                   # STEP 23
ACTION: sval2 = sval8 + sval8 
sval8 = 'w' : <type 'str'>
sval2 = None : <type 'NoneType'>
=> sval2 = 'ww' : <type 'str'>
==================================================
set2.islice(start=None,stop=None)                                       # STEP 24
ACTION: set2.islice(start=None,stop=None) 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF2.islice(start=None,stop=None) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'islice'
==================================================
set4 -= set2                                                            # STEP 25
ACTION: set4 -= set2 
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF4 = set([]) : <type 'set'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF4 -= set_REF2 
==================================================
ival1 = ival5 * ival7                                                   # STEP 26
ACTION: ival1 = ival5 * ival7 
ival5 = 17 : <type 'int'>
ival7 = 0 : <type 'int'>
ival1 = None : <type 'NoneType'>
=> ival1 = 0 : <type 'int'>
==================================================
dict0 = sortedcontainers.SortedDict()                                   # STEP 27
ACTION: dict0 = sortedcontainers.SortedDict() 
dict0 = None : <type 'NoneType'>
dict_REF0 = None : <type 'NoneType'>
=> dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF0 = {} 
=> dict_REF0 = {} : <type 'dict'>
==================================================
set3 -= set0                                                            # STEP 28
ACTION: set3 -= set0 
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF3 = set([]) : <type 'set'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF3 -= set_REF0 
==================================================
dict3 = sortedcontainers.SortedDict()                                   # STEP 29
ACTION: dict3 = sortedcontainers.SortedDict() 
dict3 = None : <type 'NoneType'>
dict_REF3 = None : <type 'NoneType'>
=> dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF3 = {} 
=> dict_REF3 = {} : <type 'dict'>
==================================================
result = sorted(list(dict0.keys()))                                     # STEP 30
ACTION: result = sorted(list(dict0.keys())) 
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = sorted(list(dict_REF0.keys())) 
==================================================
reversed(dict0)                                                         # STEP 31
ACTION: reversed(dict0) 
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: reversed(dict_REF0) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.TypeError'> argument to reversed() must be a sequence
==================================================
set0 = sortedcontainers.SortedSet()                                     # STEP 32
ACTION: set0 = sortedcontainers.SortedSet() 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF0 = set([]) 
==================================================
list3.extend(list3)                                                     # STEP 33
ACTION: list3.extend(list3) 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [] : <type 'list'>
REFERENCE ACTION: sortListExtend(list_REF3,list_REF3) 
==================================================
repr(list3)                                                             # STEP 34
ACTION: repr(list3) 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [] : <type 'list'>
REFERENCE ACTION: repr(list_REF3) 
==================================================
set4 = set3 & set4                                                      # STEP 35
ACTION: set4 = set3 & set4 
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF3 = set([]) : <type 'set'>
set_REF4 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF4 = set_REF3 & set_REF4 
==================================================
ival5 = ival6 - ival6                                                   # STEP 36
ACTION: ival5 = ival6 - ival6 
ival6 = 17 : <type 'int'>
ival5 = 17 : <type 'int'>
=> ival5 = 0 : <type 'int'>
==================================================
list3.update(set0)                                                      # STEP 37
ACTION: list3.update(set0) 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
list_REF3 = [] : <type 'list'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: sortListMultiAdd(list_REF3,set_REF0) 
==================================================
ival9 = ival5 * ival5                                                   # STEP 38
ACTION: ival9 = ival5 * ival5 
ival5 = 0 : <type 'int'>
ival9 = None : <type 'NoneType'>
=> ival9 = 0 : <type 'int'>
==================================================
val5 = ival5                                                            # STEP 39
ACTION: val5 = ival5 
ival5 = 0 : <type 'int'>
val5 = None : <type 'NoneType'>
=> val5 = 0 : <type 'int'>
==================================================
iter(set3)                                                              # STEP 40
ACTION: iter(set3) 
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: iter(set_REF3) 
==================================================
set0 = set0 & set3                                                      # STEP 41
ACTION: set0 = set0 & set3 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF0 = set_REF0 & set_REF3 
==================================================
dict0.irange(minimum=val5,maximum=val5,inclusive=(False,False))         # STEP 42
ACTION: dict0.irange(minimum=val5,maximum=val5,inclusive=(False,False)) 
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val5 = 0 : <type 'int'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF0.irange(minimum=val5,maximum=val5,inclusive=(False,False)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'irange'
==================================================
list3+=list3                                                            # STEP 43
ACTION: list3+=list3 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [] : <type 'list'>
REFERENCE ACTION: sortListMultiAdd(list_REF3,list_REF3) 
==================================================
dict0.irange(minimum=val5,maximum=val5,inclusive=(False,True),reverse=True)  # STEP 44
ACTION: dict0.irange(minimum=val5,maximum=val5,inclusive=(False,True),reverse=True) 
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val5 = 0 : <type 'int'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF0.irange(minimum=val5,maximum=val5,inclusive=(False,True),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'irange'
==================================================
set1 = sortedcontainers.SortedSet()                                     # STEP 45
ACTION: set1 = sortedcontainers.SortedSet() 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1 = set([]) 
==================================================
result = len(dict0)                                                     # STEP 46
ACTION: result = len(dict0) 
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF0) 
==================================================
ival6 = ival1 * ival1                                                   # STEP 47
ACTION: ival6 = ival1 * ival1 
ival1 = 0 : <type 'int'>
ival6 = 17 : <type 'int'>
=> ival6 = 0 : <type 'int'>
==================================================
dict0.get(val5,None)                                                    # STEP 48
ACTION: dict0.get(val5,None) 
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val5 = 0 : <type 'int'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF0.get(val5,None) 
==================================================
result = dict3.popitem()                                                # STEP 49
ACTION: result = dict3.popitem() 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.KeyError'> 'popitem(): dictionary is empty'
REFERENCE ACTION: result_REF = sortDictPopitem(dict_REF3,) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.KeyError'> 
==================================================
dict0 [val5]                                                            # STEP 50
ACTION: dict0 [val5] 
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val5 = 0 : <type 'int'>
dict_REF0 = {} : <type 'dict'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.KeyError'> 0
REFERENCE ACTION: dict_REF0 [val5] 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.KeyError'> 0
==================================================
dict3.irange(minimum=val5,maximum=val5,inclusive=(False,False))         # STEP 51
ACTION: dict3.irange(minimum=val5,maximum=val5,inclusive=(False,False)) 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val5 = 0 : <type 'int'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF3.irange(minimum=val5,maximum=val5,inclusive=(False,False)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'irange'
==================================================
set1.update(list3)                                                      # STEP 52
ACTION: set1.update(list3) 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
list_REF3 = [] : <type 'list'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1.update(list_REF3) 
==================================================
iter(set2)                                                              # STEP 53
ACTION: iter(set2) 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: iter(set_REF2) 
==================================================
ival3 = ival8 - ival9                                                   # STEP 54
ACTION: ival3 = ival8 - ival9 
ival8 = 2 : <type 'int'>
ival9 = 0 : <type 'int'>
ival3 = None : <type 'NoneType'>
=> ival3 = 2 : <type 'int'>
==================================================
set0 ^= set3                                                            # STEP 55
ACTION: set0 ^= set3 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF0 ^= set_REF3 
==================================================
val5 in dict0                                                           # STEP 56
ACTION: val5 in dict0 
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val5 = 0 : <type 'int'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: val5 in dict_REF0 
==================================================
result = list3 == list3                                                 # STEP 57
ACTION: result = list3 == list3 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [] : <type 'list'>
REFERENCE ACTION: result_REF = list_REF3 == list_REF3 
==================================================
result = list3 == list3                                                 # STEP 58
ACTION: result = list3 == list3 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [] : <type 'list'>
REFERENCE ACTION: result_REF = list_REF3 == list_REF3 
==================================================
dict3 = sortedcontainers.SortedDict()                                   # STEP 59
ACTION: dict3 = sortedcontainers.SortedDict() 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF3 = {} 
==================================================
plist4 = list3 [ival8 : ival9]                                          # STEP 60
ACTION: plist4 = list3 [ival8 : ival9] 
ival8 = 2 : <type 'int'>
ival9 = 0 : <type 'int'>
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
plist4 = None : <type 'NoneType'>
list_REF3 = [] : <type 'list'>
=> plist4 = [] : <type 'list'>
REFERENCE ACTION: plist4 = list_REF3 [ival8 : ival9] 
==================================================
setList(list3,ival1,val5)                                               # STEP 61
ACTION: setList(list3,ival1,val5) 
ival1 = 0 : <type 'int'>
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val5 = 0 : <type 'int'>
list_REF3 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: sortListSet(list_REF3,ival1,val5) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list assignment index out of range
==================================================
dict3.get(val5,val5)                                                    # STEP 62
ACTION: dict3.get(val5,val5) 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val5 = 0 : <type 'int'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF3.get(val5,val5) 
==================================================
setList(list3,ival7,val5)                                               # STEP 63
ACTION: setList(list3,ival7,val5) 
ival7 = 0 : <type 'int'>
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val5 = 0 : <type 'int'>
list_REF3 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: sortListSet(list_REF3,ival7,val5) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list assignment index out of range
==================================================
dict3.get(val5,val5)                                                    # STEP 64
ACTION: dict3.get(val5,val5) 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val5 = 0 : <type 'int'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF3.get(val5,val5) 
==================================================
dict4 = dict0.fromkeys(list3,val5) ; result = dict4                     # STEP 65
ACTION: dict4 = dict0.fromkeys(list3,val5) ; result = dict4 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict4 = None : <type 'NoneType'>
val5 = 0 : <type 'int'>
list_REF3 = [] : <type 'list'>
dict_REF0 = {} : <type 'dict'>
dict_REF4 = None : <type 'NoneType'>
=> dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF4 = dict_REF0.fromkeys(list_REF3,val5) ; result_REF = dict_REF4 
=> dict_REF4 = {} : <type 'dict'>
==================================================
repr(list3)                                                             # STEP 66
ACTION: repr(list3) 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [] : <type 'list'>
REFERENCE ACTION: repr(list_REF3) 
==================================================
result = list3.pop(ival6)                                               # STEP 67
ACTION: result = list3.pop(ival6) 
ival6 = 0 : <type 'int'>
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> pop index out of range
REFERENCE ACTION: result_REF = list_REF3.pop(ival6) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> pop from empty list
==================================================
list3 = sortedcontainers.SortedList(plist4)                             # STEP 68
ACTION: list3 = sortedcontainers.SortedList(plist4) 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
plist4 = [] : <type 'list'>
list_REF3 = [] : <type 'list'>
REFERENCE ACTION: list_REF3 = list(plist4) 
==================================================
set1 ^= set4                                                            # STEP 69
ACTION: set1 ^= set4 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF1 = set([]) : <type 'set'>
set_REF4 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1 ^= set_REF4 
==================================================
dict3.get(val5,None)                                                    # STEP 70
ACTION: dict3.get(val5,None) 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val5 = 0 : <type 'int'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF3.get(val5,None) 
==================================================
result = list3.index(val5)                                              # STEP 71
ACTION: result = list3.index(val5) 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val5 = 0 : <type 'int'>
list_REF3 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> 0 is not in list
REFERENCE ACTION: result_REF = list_REF3.index(val5) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.ValueError'> 0 is not in list
==================================================
set2 = set0 & set3                                                      # STEP 72
ACTION: set2 = set0 & set3 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
set_REF3 = set([]) : <type 'set'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF2 = set_REF0 & set_REF3 
==================================================
list3.add(val5)                                                         # STEP 73
ACTION: list3.add(val5) 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val5 = 0 : <type 'int'>
list_REF3 = [] : <type 'list'>
=> list3 = SortedList([0], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: sortListAdd(list_REF3,val5) 
=> list_REF3 = [0] : <type 'list'>
==================================================
list3.extend(list3)                                                     # STEP 74
ACTION: list3.extend(list3) 
list3 = SortedList([0], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [0] : <type 'list'>
=> list3 = SortedList([0, 0], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: sortListExtend(list_REF3,list_REF3) 
=> list_REF3 = [0, 0] : <type 'list'>
==================================================
list2 = sortedcontainers.SortedList(plist4)                             # STEP 75
ACTION: list2 = sortedcontainers.SortedList(plist4) 
list2 = None : <type 'NoneType'>
plist4 = [] : <type 'list'>
list_REF2 = None : <type 'NoneType'>
=> list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: list_REF2 = list(plist4) 
=> list_REF2 = [] : <type 'list'>
==================================================
list3.irange(minimum=val5,maximum=val5,inclusive=(False,True),reverse=True)  # STEP 76
ACTION: list3.irange(minimum=val5,maximum=val5,inclusive=(False,True),reverse=True) 
list3 = SortedList([0, 0], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val5 = 0 : <type 'int'>
list_REF3 = [0, 0] : <type 'list'>
REFERENCE ACTION: list_REF3.irange(minimum=val5,maximum=val5,inclusive=(False,True),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
list3 <= list2                                                          # STEP 77
ACTION: list3 <= list2 
list3 = SortedList([0, 0], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [0, 0] : <type 'list'>
list_REF2 = [] : <type 'list'>
REFERENCE ACTION: list_REF3 <= list_REF2 
==================================================
ival6 = ival6 * ival3                                                   # STEP 78
ACTION: ival6 = ival6 * ival3 
ival6 = 0 : <type 'int'>
ival3 = 2 : <type 'int'>
==================================================
dict1 = sortedcontainers.SortedDict()                                   # STEP 79
ACTION: dict1 = sortedcontainers.SortedDict() 
dict1 = None : <type 'NoneType'>
dict_REF1 = None : <type 'NoneType'>
=> dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF1 = {} 
=> dict_REF1 = {} : <type 'dict'>
==================================================
list3.extend(list2)                                                     # STEP 80
ACTION: list3.extend(list2) 
list3 = SortedList([0, 0], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [0, 0] : <type 'list'>
list_REF2 = [] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x120b63d88>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 702994, in act11967
    self.p_list[3].extend(self.p_list[2])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 17
STOPPING TESTING DUE TO TIMEOUT
23.0709577356 PERCENT COVERED
60.3655090332 TOTAL RUNTIME
26 EXECUTED
2498 TOTAL TEST OPERATIONS
1.887840271 TIME SPENT EXECUTING TEST OPERATIONS
54.8356597424 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
1.69458961487 TIME SPENT CHECKING PROPERTIES
3.58242988586 TOTAL TIME SPENT RUNNING SUT
0.450175762177 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
list3 = sortedcontainers.SortedList()                                    # STEP 0
list3 >= list3                                                           # STEP 1
list3+=list3                                                             # STEP 2
sval8 = 'w'                                                              # STEP 3
result = list3 == list3                                                  # STEP 4
ival6 = 17                                                               # STEP 5
ival5 = 17                                                               # STEP 6
ival8 = 2                                                                # STEP 7
list3.extend(list3)                                                      # STEP 8
ival7 = ival6 - ival5                                                    # STEP 9
list3 <= list3                                                          # STEP 10
list3 >= list3                                                          # STEP 11
result = list3.pop(ival6)                                               # STEP 12
set4 = sortedcontainers.SortedSet()                                     # STEP 13
set4 ^= set4                                                            # STEP 14
set3 = set4 - set4                                                      # STEP 15
set1 = set3 & set4                                                      # STEP 16
list3 >= list3                                                          # STEP 17
set0 = set1 & set3                                                      # STEP 18
list3.update(set0)                                                      # STEP 19
set4 = set3.copy()                                                      # STEP 20
set2 = set1 & set3                                                      # STEP 21
repr(list3)                                                             # STEP 22
sval2 = sval8 + sval8                                                   # STEP 23
set2.islice(start=None,stop=None)                                       # STEP 24
set4 -= set2                                                            # STEP 25
ival1 = ival5 * ival7                                                   # STEP 26
dict0 = sortedcontainers.SortedDict()                                   # STEP 27
set3 -= set0                                                            # STEP 28
dict3 = sortedcontainers.SortedDict()                                   # STEP 29
result = sorted(list(dict0.keys()))                                     # STEP 30
reversed(dict0)                                                         # STEP 31
set0 = sortedcontainers.SortedSet()                                     # STEP 32
list3.extend(list3)                                                     # STEP 33
repr(list3)                                                             # STEP 34
set4 = set3 & set4                                                      # STEP 35
ival5 = ival6 - ival6                                                   # STEP 36
list3.update(set0)                                                      # STEP 37
ival9 = ival5 * ival5                                                   # STEP 38
val5 = ival5                                                            # STEP 39
iter(set3)                                                              # STEP 40
set0 = set0 & set3                                                      # STEP 41
dict0.irange(minimum=val5,maximum=val5,inclusive=(False,False))         # STEP 42
list3+=list3                                                            # STEP 43
dict0.irange(minimum=val5,maximum=val5,inclusive=(False,True),reverse=True)  # STEP 44
set1 = sortedcontainers.SortedSet()                                     # STEP 45
result = len(dict0)                                                     # STEP 46
ival6 = ival1 * ival1                                                   # STEP 47
dict0.get(val5,None)                                                    # STEP 48
result = dict3.popitem()                                                # STEP 49
dict0 [val5]                                                            # STEP 50
dict3.irange(minimum=val5,maximum=val5,inclusive=(False,False))         # STEP 51
set1.update(list3)                                                      # STEP 52
iter(set2)                                                              # STEP 53
ival3 = ival8 - ival9                                                   # STEP 54
set0 ^= set3                                                            # STEP 55
val5 in dict0                                                           # STEP 56
result = list3 == list3                                                 # STEP 57
result = list3 == list3                                                 # STEP 58
dict3 = sortedcontainers.SortedDict()                                   # STEP 59
plist4 = list3 [ival8 : ival9]                                          # STEP 60
setList(list3,ival1,val5)                                               # STEP 61
dict3.get(val5,val5)                                                    # STEP 62
setList(list3,ival7,val5)                                               # STEP 63
dict3.get(val5,val5)                                                    # STEP 64
dict4 = dict0.fromkeys(list3,val5) ; result = dict4                     # STEP 65
repr(list3)                                                             # STEP 66
result = list3.pop(ival6)                                               # STEP 67
list3 = sortedcontainers.SortedList(plist4)                             # STEP 68
set1 ^= set4                                                            # STEP 69
dict3.get(val5,None)                                                    # STEP 70
result = list3.index(val5)                                              # STEP 71
set2 = set0 & set3                                                      # STEP 72
list3.add(val5)                                                         # STEP 73
list3.extend(list3)                                                     # STEP 74
list2 = sortedcontainers.SortedList(plist4)                             # STEP 75
list3.irange(minimum=val5,maximum=val5,inclusive=(False,True),reverse=True)  # STEP 76
list3 <= list2                                                          # STEP 77
ival6 = ival6 * ival3                                                   # STEP 78
dict1 = sortedcontainers.SortedDict()                                   # STEP 79
list3.extend(list2)                                                     # STEP 80
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x120b63d88>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 702994, in act11967
    self.p_list[3].extend(self.p_list[2])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
582 BRANCHES COVERED
444 STATEMENTS COVERED

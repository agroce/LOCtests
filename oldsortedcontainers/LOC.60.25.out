Random testing using config=Config(noExceptionMatch=False, generalize=False, localize=False, speed='FAST', probs='locsample.probs', LOCBaseline=0.2, noAlphaConvert=False, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, html=None, keepLast=False, stopWhenNoCoverage=None, generateLOC=None, computeFeatureStats=False, Pmutate=0.0, timeout=60, output='failure.9773.test', markov=None, noSwarmDependencies=False, startExploit=0.0, maxMustHitBranch=None, useHints=False, silentFail=False, highLowSwarm=None, maxMustHitStatement=None, progress=False, postCover=False, swarmLength=None, noCover=False, noEnumerateEnabled=False, full=True, swarmP=0.5, coverFile='coverage.out', markovP=1.0, swarmProbs=None, genDepth=None, exploitCeiling=0.1, logging=None, noCheck=False, throughput=False, uncaught=False, swarmSwitch=None, verbose=False, reducePool=False, exploit=None, fastQuickAnalysis=False, total=False, verboseExploit=False, swarm=False, sequenceP=1.0, biasLOC=None, timedProgress=30, relax=False, ddmin=False, stutter=None, readQuick=False, verboseActions=False, quickAnalysis=False, noReassign=False, sequenceSize=3, LOCProbs=False, sequencesFromTests=None, maxTests=-1, trackMaxCoverage=None, useQuickSequences=False, exploitBestHint=1, failedLogging=None, stopWhenStatements=None, greedyStutter=False, seed=None, stopWhenHitStatement=None, uniqueValuesAnalysis=False, normalize=False, startExploitStall=0, enumerateEnabled=False, internal=False, profile=False, multiple=True, stopWhenBranches=None, running=False, compareFails=False, Pcrossover=0.2, stopWhenHitBranch=None, depth=100, showActions=False)
TEST #10 STEP #1 (0:00:30.319937) Mon Nov 20 14:31:59 2017 [ 462 stmts 601 branches ] 901 TOTAL ACTIONS (29.716420594/s)
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x1204d6e18>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 702750, in act11963
    self.p_list[2].extend(self.p_list[3])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
Original test has 48 steps

SAVING TEST AS failure.9773.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
sval5 = 'i'                                                              # STEP 0
ACTION: sval5 = 'i' 
sval5 = None : <type 'NoneType'>
=> sval5 = 'i' : <type 'str'>
==================================================
sval6 = 'G'                                                              # STEP 1
ACTION: sval6 = 'G' 
sval6 = None : <type 'NoneType'>
=> sval6 = 'G' : <type 'str'>
==================================================
val1 = sval6                                                             # STEP 2
ACTION: val1 = sval6 
sval6 = 'G' : <type 'str'>
val1 = None : <type 'NoneType'>
=> val1 = 'G' : <type 'str'>
==================================================
ival7 = 7                                                                # STEP 3
ACTION: ival7 = 7 
ival7 = None : <type 'NoneType'>
=> ival7 = 7 : <type 'int'>
==================================================
ival5 = ival7 - ival7                                                    # STEP 4
ACTION: ival5 = ival7 - ival7 
ival7 = 7 : <type 'int'>
ival5 = None : <type 'NoneType'>
=> ival5 = 0 : <type 'int'>
==================================================
sval0 = 'Q'                                                              # STEP 5
ACTION: sval0 = 'Q' 
sval0 = None : <type 'NoneType'>
=> sval0 = 'Q' : <type 'str'>
==================================================
sval4 = 'Z'                                                              # STEP 6
ACTION: sval4 = 'Z' 
sval4 = None : <type 'NoneType'>
=> sval4 = 'Z' : <type 'str'>
==================================================
ival0 = ival7 * ival7                                                    # STEP 7
ACTION: ival0 = ival7 * ival7 
ival7 = 7 : <type 'int'>
ival0 = None : <type 'NoneType'>
=> ival0 = 49 : <type 'int'>
==================================================
set0 = sortedcontainers.SortedSet()                                      # STEP 8
ACTION: set0 = sortedcontainers.SortedSet() 
set0 = None : <type 'NoneType'>
set_REF0 = None : <type 'NoneType'>
=> set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF0 = set([]) 
=> set_REF0 = set([]) : <type 'set'>
==================================================
set3 = sortedcontainers.SortedSet()                                      # STEP 9
ACTION: set3 = sortedcontainers.SortedSet() 
set3 = None : <type 'NoneType'>
set_REF3 = None : <type 'NoneType'>
=> set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF3 = set([]) 
=> set_REF3 = set([]) : <type 'set'>
==================================================
ival3 = ival0 + ival0                                                   # STEP 10
ACTION: ival3 = ival0 + ival0 
ival0 = 49 : <type 'int'>
ival3 = None : <type 'NoneType'>
=> ival3 = 98 : <type 'int'>
==================================================
set4 = set0 - set3                                                      # STEP 11
ACTION: set4 = set0 - set3 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set4 = None : <type 'NoneType'>
set_REF0 = set([]) : <type 'set'>
set_REF3 = set([]) : <type 'set'>
set_REF4 = None : <type 'NoneType'>
=> set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF4 = set_REF0 - set_REF3 
=> set_REF4 = set([]) : <type 'set'>
==================================================
ival2 = ival0 - ival0                                                   # STEP 12
ACTION: ival2 = ival0 - ival0 
ival0 = 49 : <type 'int'>
ival2 = None : <type 'NoneType'>
=> ival2 = 0 : <type 'int'>
==================================================
ival0 = ival7 * ival2                                                   # STEP 13
ACTION: ival0 = ival7 * ival2 
ival7 = 7 : <type 'int'>
ival2 = 0 : <type 'int'>
ival0 = 49 : <type 'int'>
=> ival0 = 0 : <type 'int'>
==================================================
list3 = sortedcontainers.SortedList()                                   # STEP 14
ACTION: list3 = sortedcontainers.SortedList() 
list3 = None : <type 'NoneType'>
list_REF3 = None : <type 'NoneType'>
=> list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: list_REF3 = [] 
=> list_REF3 = [] : <type 'list'>
==================================================
sval6 = 'b'                                                             # STEP 15
ACTION: sval6 = 'b' 
sval6 = 'G' : <type 'str'>
=> sval6 = 'b' : <type 'str'>
==================================================
set1 = set0.copy()                                                      # STEP 16
ACTION: set1 = set0.copy() 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set1 = None : <type 'NoneType'>
set_REF0 = set([]) : <type 'set'>
set_REF1 = None : <type 'NoneType'>
=> set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF1 = set_REF0.copy() 
=> set_REF1 = set([]) : <type 'set'>
==================================================
ival1 = ival7 - ival3                                                   # STEP 17
ACTION: ival1 = ival7 - ival3 
ival7 = 7 : <type 'int'>
ival3 = 98 : <type 'int'>
ival1 = None : <type 'NoneType'>
=> ival1 = -91 : <type 'int'>
==================================================
list2 = sortedcontainers.SortedList()                                   # STEP 18
ACTION: list2 = sortedcontainers.SortedList() 
list2 = None : <type 'NoneType'>
list_REF2 = None : <type 'NoneType'>
=> list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: list_REF2 = [] 
=> list_REF2 = [] : <type 'list'>
==================================================
sval8 = sval6 + sval4                                                   # STEP 19
ACTION: sval8 = sval6 + sval4 
sval6 = 'b' : <type 'str'>
sval4 = 'Z' : <type 'str'>
sval8 = None : <type 'NoneType'>
=> sval8 = 'bZ' : <type 'str'>
==================================================
set0.update(set3)                                                       # STEP 20
ACTION: set0.update(set3) 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF0.update(set_REF3) 
==================================================
set3 = set1.union(set1)                                                 # STEP 21
ACTION: set3 = set1.union(set1) 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF1 = set([]) : <type 'set'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF3 = set_REF1.union(set_REF1) 
==================================================
set4.islice(start=ival1,stop=ival7,reverse=True)                        # STEP 22
ACTION: set4.islice(start=ival1,stop=ival7,reverse=True) 
ival1 = -91 : <type 'int'>
ival7 = 7 : <type 'int'>
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF4 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF4.islice(start=ival1,stop=ival7,reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'islice'
==================================================
list3 <= list2                                                          # STEP 23
ACTION: list3 <= list2 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [] : <type 'list'>
list_REF2 = [] : <type 'list'>
REFERENCE ACTION: list_REF3 <= list_REF2 
==================================================
dict4 = sortedcontainers.SortedDict()                                   # STEP 24
ACTION: dict4 = sortedcontainers.SortedDict() 
dict4 = None : <type 'NoneType'>
dict_REF4 = None : <type 'NoneType'>
=> dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF4 = {} 
=> dict_REF4 = {} : <type 'dict'>
==================================================
set3 ^= set3                                                            # STEP 25
ACTION: set3 ^= set3 
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF3 ^= set_REF3 
==================================================
sval9 = sval4 + sval6                                                   # STEP 26
ACTION: sval9 = sval4 + sval6 
sval4 = 'Z' : <type 'str'>
sval6 = 'b' : <type 'str'>
sval9 = None : <type 'NoneType'>
=> sval9 = 'Zb' : <type 'str'>
==================================================
set1 &= set0                                                            # STEP 27
ACTION: set1 &= set0 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF1 = set([]) : <type 'set'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1 &= set_REF0 
==================================================
dict4.get(val1,val1)                                                    # STEP 28
ACTION: dict4.get(val1,val1) 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val1 = 'G' : <type 'str'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF4.get(val1,val1) 
==================================================
dict4.update(dict4)                                                     # STEP 29
ACTION: dict4.update(dict4) 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF4.update(dict_REF4) 
==================================================
list3.irange(minimum=val1,maximum=val1,inclusive=(False,True),reverse=True)  # STEP 30
ACTION: list3.irange(minimum=val1,maximum=val1,inclusive=(False,True),reverse=True) 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val1 = 'G' : <type 'str'>
list_REF3 = [] : <type 'list'>
REFERENCE ACTION: list_REF3.irange(minimum=val1,maximum=val1,inclusive=(False,True),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
dict3 = sortedcontainers.SortedDict()                                   # STEP 31
ACTION: dict3 = sortedcontainers.SortedDict() 
dict3 = None : <type 'NoneType'>
dict_REF3 = None : <type 'NoneType'>
=> dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF3 = {} 
=> dict_REF3 = {} : <type 'dict'>
==================================================
list3.irange(minimum=val1,maximum=val1,inclusive=(False,True),reverse=True)  # STEP 32
ACTION: list3.irange(minimum=val1,maximum=val1,inclusive=(False,True),reverse=True) 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val1 = 'G' : <type 'str'>
list_REF3 = [] : <type 'list'>
REFERENCE ACTION: list_REF3.irange(minimum=val1,maximum=val1,inclusive=(False,True),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
val9 = sval4                                                            # STEP 33
ACTION: val9 = sval4 
sval4 = 'Z' : <type 'str'>
val9 = None : <type 'NoneType'>
=> val9 = 'Z' : <type 'str'>
==================================================
list2.insert(ival2,val1)                                                # STEP 34
ACTION: list2.insert(ival2,val1) 
ival2 = 0 : <type 'int'>
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val1 = 'G' : <type 'str'>
list_REF2 = [] : <type 'list'>
=> list2 = SortedList(['G'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: sortListInsert(list_REF2,ival2,val1) 
=> list_REF2 = ['G'] : <type 'list'>
==================================================
result = dict3.peekitem()                                               # STEP 35
ACTION: result = dict3.peekitem() 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: result_REF = sortDictPeekitem(dict_REF3,) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
==================================================
result = len(dict4)                                                     # STEP 36
ACTION: result = len(dict4) 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF4) 
==================================================
ival6 = ival7 * ival2                                                   # STEP 37
ACTION: ival6 = ival7 * ival2 
ival7 = 7 : <type 'int'>
ival2 = 0 : <type 'int'>
ival6 = None : <type 'NoneType'>
=> ival6 = 0 : <type 'int'>
==================================================
list2.irange(minimum=val9,maximum=val9,inclusive=(True,False))          # STEP 38
ACTION: list2.irange(minimum=val9,maximum=val9,inclusive=(True,False)) 
list2 = SortedList(['G'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val9 = 'Z' : <type 'str'>
list_REF2 = ['G'] : <type 'list'>
REFERENCE ACTION: list_REF2.irange(minimum=val9,maximum=val9,inclusive=(True,False)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
set1 = set0 | set4                                                      # STEP 39
ACTION: set1 = set0 | set4 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
set_REF4 = set([]) : <type 'set'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1 = set_REF0 | set_REF4 
==================================================
set3.islice(start=ival1,stop=ival2)                                     # STEP 40
ACTION: set3.islice(start=ival1,stop=ival2) 
ival1 = -91 : <type 'int'>
ival2 = 0 : <type 'int'>
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF3.islice(start=ival1,stop=ival2) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'islice'
==================================================
dict1 = dict3.copy()                                                    # STEP 41
ACTION: dict1 = dict3.copy() 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict1 = None : <type 'NoneType'>
dict_REF3 = {} : <type 'dict'>
dict_REF1 = None : <type 'NoneType'>
=> dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF1 = dict_REF3.copy() 
=> dict_REF1 = {} : <type 'dict'>
==================================================
result = len(dict3.keys())                                              # STEP 42
ACTION: result = len(dict3.keys())  
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF3.keys())  
==================================================
list3.remove(val9)                                                      # STEP 43
ACTION: list3.remove(val9) 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val9 = 'Z' : <type 'str'>
list_REF3 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> 'Z' not in list
REFERENCE ACTION: list_REF3.remove(val9) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.ValueError'> list.remove(x): x not in list
==================================================
dict2 = dict4.fromkeys(list3,val9) ; result = dict2                     # STEP 44
ACTION: dict2 = dict4.fromkeys(list3,val9) ; result = dict2 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict2 = None : <type 'NoneType'>
val9 = 'Z' : <type 'str'>
list_REF3 = [] : <type 'list'>
dict_REF4 = {} : <type 'dict'>
dict_REF2 = None : <type 'NoneType'>
=> dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF2 = dict_REF4.fromkeys(list_REF3,val9) ; result_REF = dict_REF2 
=> dict_REF2 = {} : <type 'dict'>
==================================================
list3.irange(minimum=val9,maximum=val9,inclusive=(True,False))          # STEP 45
ACTION: list3.irange(minimum=val9,maximum=val9,inclusive=(True,False)) 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val9 = 'Z' : <type 'str'>
list_REF3 = [] : <type 'list'>
REFERENCE ACTION: list_REF3.irange(minimum=val9,maximum=val9,inclusive=(True,False)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
dict2.islice(start=None,stop=ival2)                                     # STEP 46
ACTION: dict2.islice(start=None,stop=ival2) 
ival2 = 0 : <type 'int'>
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF2.islice(start=None,stop=ival2) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'islice'
==================================================
list2.extend(list3)                                                     # STEP 47
ACTION: list2.extend(list3) 
list2 = SortedList(['G'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF2 = ['G'] : <type 'list'>
list_REF3 = [] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x120508c20>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 702750, in act11963
    self.p_list[2].extend(self.p_list[3])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 3
STOPPING TESTING DUE TO TIMEOUT
25.3974408686 PERCENT COVERED
60.2688379288 TOTAL RUNTIME
19 EXECUTED
1751 TOTAL TEST OPERATIONS
1.35281682014 TIME SPENT EXECUTING TEST OPERATIONS
56.7052724361 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
1.18604660034 TIME SPENT CHECKING PROPERTIES
2.53886342049 TOTAL TIME SPENT RUNNING SUT
0.519824504852 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
sval5 = 'i'                                                              # STEP 0
sval6 = 'G'                                                              # STEP 1
val1 = sval6                                                             # STEP 2
ival7 = 7                                                                # STEP 3
ival5 = ival7 - ival7                                                    # STEP 4
sval0 = 'Q'                                                              # STEP 5
sval4 = 'Z'                                                              # STEP 6
ival0 = ival7 * ival7                                                    # STEP 7
set0 = sortedcontainers.SortedSet()                                      # STEP 8
set3 = sortedcontainers.SortedSet()                                      # STEP 9
ival3 = ival0 + ival0                                                   # STEP 10
set4 = set0 - set3                                                      # STEP 11
ival2 = ival0 - ival0                                                   # STEP 12
ival0 = ival7 * ival2                                                   # STEP 13
list3 = sortedcontainers.SortedList()                                   # STEP 14
sval6 = 'b'                                                             # STEP 15
set1 = set0.copy()                                                      # STEP 16
ival1 = ival7 - ival3                                                   # STEP 17
list2 = sortedcontainers.SortedList()                                   # STEP 18
sval8 = sval6 + sval4                                                   # STEP 19
set0.update(set3)                                                       # STEP 20
set3 = set1.union(set1)                                                 # STEP 21
set4.islice(start=ival1,stop=ival7,reverse=True)                        # STEP 22
list3 <= list2                                                          # STEP 23
dict4 = sortedcontainers.SortedDict()                                   # STEP 24
set3 ^= set3                                                            # STEP 25
sval9 = sval4 + sval6                                                   # STEP 26
set1 &= set0                                                            # STEP 27
dict4.get(val1,val1)                                                    # STEP 28
dict4.update(dict4)                                                     # STEP 29
list3.irange(minimum=val1,maximum=val1,inclusive=(False,True),reverse=True)  # STEP 30
dict3 = sortedcontainers.SortedDict()                                   # STEP 31
list3.irange(minimum=val1,maximum=val1,inclusive=(False,True),reverse=True)  # STEP 32
val9 = sval4                                                            # STEP 33
list2.insert(ival2,val1)                                                # STEP 34
result = dict3.peekitem()                                               # STEP 35
result = len(dict4)                                                     # STEP 36
ival6 = ival7 * ival2                                                   # STEP 37
list2.irange(minimum=val9,maximum=val9,inclusive=(True,False))          # STEP 38
set1 = set0 | set4                                                      # STEP 39
set3.islice(start=ival1,stop=ival2)                                     # STEP 40
dict1 = dict3.copy()                                                    # STEP 41
result = len(dict3.keys())                                              # STEP 42
list3.remove(val9)                                                      # STEP 43
dict2 = dict4.fromkeys(list3,val9) ; result = dict2                     # STEP 44
list3.irange(minimum=val9,maximum=val9,inclusive=(True,False))          # STEP 45
dict2.islice(start=None,stop=ival2)                                     # STEP 46
list2.extend(list3)                                                     # STEP 47
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x120508c20>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 702750, in act11963
    self.p_list[2].extend(self.p_list[3])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
632 BRANCHES COVERED
481 STATEMENTS COVERED

Random testing using config=Config(noExceptionMatch=False, generalize=False, localize=False, speed='FAST', probs='locsample.probs', LOCBaseline=0.2, noAlphaConvert=False, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, html=None, keepLast=False, stopWhenNoCoverage=None, generateLOC=None, computeFeatureStats=False, Pmutate=0.0, timeout=60, output='failure.10286.test', markov=None, noSwarmDependencies=False, startExploit=0.0, maxMustHitBranch=None, useHints=False, silentFail=False, highLowSwarm=None, maxMustHitStatement=None, progress=False, postCover=False, swarmLength=None, noCover=False, noEnumerateEnabled=False, full=True, swarmP=0.5, coverFile='coverage.out', markovP=1.0, swarmProbs=None, genDepth=None, exploitCeiling=0.1, logging=None, noCheck=False, throughput=False, uncaught=False, swarmSwitch=None, verbose=False, reducePool=False, exploit=None, fastQuickAnalysis=False, total=False, verboseExploit=False, swarm=False, sequenceP=1.0, biasLOC=None, timedProgress=30, relax=False, ddmin=False, stutter=None, readQuick=False, verboseActions=False, quickAnalysis=False, noReassign=False, sequenceSize=3, LOCProbs=False, sequencesFromTests=None, maxTests=-1, trackMaxCoverage=None, useQuickSequences=False, exploitBestHint=1, failedLogging=None, stopWhenStatements=None, greedyStutter=False, seed=None, stopWhenHitStatement=None, uniqueValuesAnalysis=False, normalize=False, startExploitStall=0, enumerateEnabled=False, internal=False, profile=False, multiple=True, stopWhenBranches=None, running=False, compareFails=False, Pcrossover=0.2, stopWhenHitBranch=None, depth=100, showActions=False)
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x1203cfb90>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 702933, in act11966
    self.p_list[3].extend(self.p_list[1])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
Original test has 75 steps

SAVING TEST AS failure.10286.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
sval7 = 'q'                                                              # STEP 0
ACTION: sval7 = 'q' 
sval7 = None : <type 'NoneType'>
=> sval7 = 'q' : <type 'str'>
==================================================
set1 = sortedcontainers.SortedSet()                                      # STEP 1
ACTION: set1 = sortedcontainers.SortedSet() 
set1 = None : <type 'NoneType'>
set_REF1 = None : <type 'NoneType'>
=> set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF1 = set([]) 
=> set_REF1 = set([]) : <type 'set'>
==================================================
set1 ^= set1                                                             # STEP 2
ACTION: set1 ^= set1 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1 ^= set_REF1 
==================================================
set0 = set1 - set1                                                       # STEP 3
ACTION: set0 = set1 - set1 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set0 = None : <type 'NoneType'>
set_REF1 = set([]) : <type 'set'>
set_REF0 = None : <type 'NoneType'>
=> set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF0 = set_REF1 - set_REF1 
=> set_REF0 = set([]) : <type 'set'>
==================================================
sval5 = sval7 + sval7                                                    # STEP 4
ACTION: sval5 = sval7 + sval7 
sval7 = 'q' : <type 'str'>
sval5 = None : <type 'NoneType'>
=> sval5 = 'qq' : <type 'str'>
==================================================
set3 = set0.union(set0)                                                  # STEP 5
ACTION: set3 = set0.union(set0) 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set3 = None : <type 'NoneType'>
set_REF0 = set([]) : <type 'set'>
set_REF3 = None : <type 'NoneType'>
=> set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF3 = set_REF0.union(set_REF0) 
=> set_REF3 = set([]) : <type 'set'>
==================================================
list1 = sortedcontainers.SortedList()                                    # STEP 6
ACTION: list1 = sortedcontainers.SortedList() 
list1 = None : <type 'NoneType'>
list_REF1 = None : <type 'NoneType'>
=> list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: list_REF1 = [] 
=> list_REF1 = [] : <type 'list'>
==================================================
set0 = set1 | set1                                                       # STEP 7
ACTION: set0 = set1 | set1 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF1 = set([]) : <type 'set'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF0 = set_REF1 | set_REF1 
==================================================
reversed(set1)                                                           # STEP 8
ACTION: reversed(set1) 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: reversed(set_REF1) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.TypeError'> argument to reversed() must be a sequence
==================================================
result = list1 == list1                                                  # STEP 9
ACTION: result = list1 == list1 
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF1 = [] : <type 'list'>
REFERENCE ACTION: result_REF = list_REF1 == list_REF1 
==================================================
set2 = set0.union(set1)                                                 # STEP 10
ACTION: set2 = set0.union(set1) 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set2 = None : <type 'NoneType'>
set_REF0 = set([]) : <type 'set'>
set_REF1 = set([]) : <type 'set'>
set_REF2 = None : <type 'NoneType'>
=> set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF2 = set_REF0.union(set_REF1) 
=> set_REF2 = set([]) : <type 'set'>
==================================================
set4 = set2 & set0                                                      # STEP 11
ACTION: set4 = set2 & set0 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set4 = None : <type 'NoneType'>
set_REF2 = set([]) : <type 'set'>
set_REF0 = set([]) : <type 'set'>
set_REF4 = None : <type 'NoneType'>
=> set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF4 = set_REF2 & set_REF0 
=> set_REF4 = set([]) : <type 'set'>
==================================================
ival9 = 1                                                               # STEP 12
ACTION: ival9 = 1 
ival9 = None : <type 'NoneType'>
=> ival9 = 1 : <type 'int'>
==================================================
set0.update(list1)                                                      # STEP 13
ACTION: set0.update(list1) 
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
list_REF1 = [] : <type 'list'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF0.update(list_REF1) 
==================================================
set0 = set2 - set2                                                      # STEP 14
ACTION: set0 = set2 - set2 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF2 = set([]) : <type 'set'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF0 = set_REF2 - set_REF2 
==================================================
set0.update(set1)                                                       # STEP 15
ACTION: set0.update(set1) 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF0.update(set_REF1) 
==================================================
plist1 = list1 [ival9 : ival9]                                          # STEP 16
ACTION: plist1 = list1 [ival9 : ival9] 
ival9 = 1 : <type 'int'>
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
plist1 = None : <type 'NoneType'>
list_REF1 = [] : <type 'list'>
=> plist1 = [] : <type 'list'>
REFERENCE ACTION: plist1 = list_REF1 [ival9 : ival9] 
==================================================
set2 = set1 | set1                                                      # STEP 17
ACTION: set2 = set1 | set1 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF1 = set([]) : <type 'set'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF2 = set_REF1 | set_REF1 
==================================================
ival2 = 8                                                               # STEP 18
ACTION: ival2 = 8 
ival2 = None : <type 'NoneType'>
=> ival2 = 8 : <type 'int'>
==================================================
ival5 = ival9 - ival2                                                   # STEP 19
ACTION: ival5 = ival9 - ival2 
ival9 = 1 : <type 'int'>
ival2 = 8 : <type 'int'>
ival5 = None : <type 'NoneType'>
=> ival5 = -7 : <type 'int'>
==================================================
dict1 = sortedcontainers.SortedDict()                                   # STEP 20
ACTION: dict1 = sortedcontainers.SortedDict() 
dict1 = None : <type 'NoneType'>
dict_REF1 = None : <type 'NoneType'>
=> dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF1 = {} 
=> dict_REF1 = {} : <type 'dict'>
==================================================
result = dict1.popitem(last=False)                                      # STEP 21
ACTION: result = dict1.popitem(last=False) 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {} : <type 'dict'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.KeyError'> 'popitem(): dictionary is empty'
REFERENCE ACTION: result_REF = sortDictPopitem(dict_REF1,last=False) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.KeyError'> 
==================================================
sval2 = sval7 + sval7                                                   # STEP 22
ACTION: sval2 = sval7 + sval7 
sval7 = 'q' : <type 'str'>
sval2 = None : <type 'NoneType'>
=> sval2 = 'qq' : <type 'str'>
==================================================
result = dict1 != dict1                                                 # STEP 23
ACTION: result = dict1 != dict1 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = dict_REF1 != dict_REF1 
==================================================
ival9 = ival9 - ival9                                                   # STEP 24
ACTION: ival9 = ival9 - ival9 
ival9 = 1 : <type 'int'>
=> ival9 = 0 : <type 'int'>
==================================================
dict0 = sortedcontainers.SortedDict()                                   # STEP 25
ACTION: dict0 = sortedcontainers.SortedDict() 
dict0 = None : <type 'NoneType'>
dict_REF0 = None : <type 'NoneType'>
=> dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF0 = {} 
=> dict_REF0 = {} : <type 'dict'>
==================================================
list1.islice(start=ival9,stop=ival9,reverse=True)                       # STEP 26
ACTION: list1.islice(start=ival9,stop=ival9,reverse=True) 
ival9 = 0 : <type 'int'>
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF1 = [] : <type 'list'>
REFERENCE ACTION: list_REF1.islice(start=ival9,stop=ival9,reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'islice'
==================================================
list3 = sortedcontainers.SortedList(plist1)                             # STEP 27
ACTION: list3 = sortedcontainers.SortedList(plist1) 
list3 = None : <type 'NoneType'>
plist1 = [] : <type 'list'>
list_REF3 = None : <type 'NoneType'>
=> list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: list_REF3 = list(plist1) 
=> list_REF3 = [] : <type 'list'>
==================================================
result = dict1.peekitem()                                               # STEP 28
ACTION: result = dict1.peekitem() 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {} : <type 'dict'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: result_REF = sortDictPeekitem(dict_REF1,) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
==================================================
result = list3.pop(ival5)                                               # STEP 29
ACTION: result = list3.pop(ival5) 
ival5 = -7 : <type 'int'>
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> pop index out of range
REFERENCE ACTION: result_REF = list_REF3.pop(ival5) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> pop from empty list
==================================================
val1 = sval2                                                            # STEP 30
ACTION: val1 = sval2 
sval2 = 'qq' : <type 'str'>
val1 = None : <type 'NoneType'>
=> val1 = 'qq' : <type 'str'>
==================================================
iter(dict1)                                                             # STEP 31
ACTION: iter(dict1) 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: iter(dict_REF1) 
==================================================
result = dict1 != dict0                                                 # STEP 32
ACTION: result = dict1 != dict0 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {} : <type 'dict'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = dict_REF1 != dict_REF0 
==================================================
result = dict1 == dict0                                                 # STEP 33
ACTION: result = dict1 == dict0 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {} : <type 'dict'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = dict_REF1 == dict_REF0 
==================================================
list1.irange(minimum=val1,maximum=val1,inclusive=(False,True))          # STEP 34
ACTION: list1.irange(minimum=val1,maximum=val1,inclusive=(False,True)) 
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val1 = 'qq' : <type 'str'>
list_REF1 = [] : <type 'list'>
REFERENCE ACTION: list_REF1.irange(minimum=val1,maximum=val1,inclusive=(False,True)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
sval2 = sval2 + sval7                                                   # STEP 35
ACTION: sval2 = sval2 + sval7 
sval2 = 'qq' : <type 'str'>
sval7 = 'q' : <type 'str'>
=> sval2 = 'qqq' : <type 'str'>
==================================================
set1 = sortedcontainers.SortedSet()                                     # STEP 36
ACTION: set1 = sortedcontainers.SortedSet() 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1 = set([]) 
==================================================
dict2 = dict0.fromkeys(list3,val1) ; result = dict2                     # STEP 37
ACTION: dict2 = dict0.fromkeys(list3,val1) ; result = dict2 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict2 = None : <type 'NoneType'>
val1 = 'qq' : <type 'str'>
list_REF3 = [] : <type 'list'>
dict_REF0 = {} : <type 'dict'>
dict_REF2 = None : <type 'NoneType'>
=> dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF2 = dict_REF0.fromkeys(list_REF3,val1) ; result_REF = dict_REF2 
=> dict_REF2 = {} : <type 'dict'>
==================================================
set0 = sortedcontainers.SortedSet()                                     # STEP 38
ACTION: set0 = sortedcontainers.SortedSet() 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF0 = set([]) 
==================================================
dict2 [val1] = val1                                                     # STEP 39
ACTION: dict2 [val1] = val1 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val1 = 'qq' : <type 'str'>
dict_REF2 = {} : <type 'dict'>
=> dict2 = SortedDict(None, 1000, {'qq': 'qq'}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF2 [val1] = val1 
=> dict_REF2 = {'qq': 'qq'} : <type 'dict'>
==================================================
sval0 = 'G'                                                             # STEP 40
ACTION: sval0 = 'G' 
sval0 = None : <type 'NoneType'>
=> sval0 = 'G' : <type 'str'>
==================================================
dict0 = dict1.copy()                                                    # STEP 41
ACTION: dict0 = dict1.copy() 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {} : <type 'dict'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF0 = dict_REF1.copy() 
==================================================
result = dict1 != dict2                                                 # STEP 42
ACTION: result = dict1 != dict2 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict2 = SortedDict(None, 1000, {'qq': 'qq'}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {} : <type 'dict'>
dict_REF2 = {'qq': 'qq'} : <type 'dict'>
REFERENCE ACTION: result_REF = dict_REF1 != dict_REF2 
==================================================
set1.irange(minimum=val1,maximum=val1,inclusive=(False,False),reverse=True)  # STEP 43
ACTION: set1.irange(minimum=val1,maximum=val1,inclusive=(False,False),reverse=True) 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
val1 = 'qq' : <type 'str'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1.irange(minimum=val1,maximum=val1,inclusive=(False,False),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'irange'
==================================================
dict1.get(val1,None)                                                    # STEP 44
ACTION: dict1.get(val1,None) 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val1 = 'qq' : <type 'str'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF1.get(val1,None) 
==================================================
list3 < list1                                                           # STEP 45
ACTION: list3 < list1 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [] : <type 'list'>
list_REF1 = [] : <type 'list'>
REFERENCE ACTION: list_REF3 < list_REF1 
==================================================
val6 = sval0                                                            # STEP 46
ACTION: val6 = sval0 
sval0 = 'G' : <type 'str'>
val6 = None : <type 'NoneType'>
=> val6 = 'G' : <type 'str'>
==================================================
list3.insert(ival9,val6)                                                # STEP 47
ACTION: list3.insert(ival9,val6) 
ival9 = 0 : <type 'int'>
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val6 = 'G' : <type 'str'>
list_REF3 = [] : <type 'list'>
=> list3 = SortedList(['G'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: sortListInsert(list_REF3,ival9,val6) 
=> list_REF3 = ['G'] : <type 'list'>
==================================================
set1 = set2 ^ set4                                                      # STEP 48
ACTION: set1 = set2 ^ set4 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF2 = set([]) : <type 'set'>
set_REF4 = set([]) : <type 'set'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1 = set_REF2 ^ set_REF4 
==================================================
dict1.irange(minimum=val1,maximum=val1,inclusive=(True,False))          # STEP 49
ACTION: dict1.irange(minimum=val1,maximum=val1,inclusive=(True,False)) 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val1 = 'qq' : <type 'str'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF1.irange(minimum=val1,maximum=val1,inclusive=(True,False)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'irange'
==================================================
result = dict1 == dict2                                                 # STEP 50
ACTION: result = dict1 == dict2 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict2 = SortedDict(None, 1000, {'qq': 'qq'}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {} : <type 'dict'>
dict_REF2 = {'qq': 'qq'} : <type 'dict'>
REFERENCE ACTION: result_REF = dict_REF1 == dict_REF2 
==================================================
del list3 [ival2]                                                       # STEP 51
ACTION: del list3 [ival2] 
ival2 = 8 : <type 'int'>
list3 = SortedList(['G'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = ['G'] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: del list_REF3 [ival2] 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list assignment index out of range
==================================================
list1.update(set4)                                                      # STEP 52
ACTION: list1.update(set4) 
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
list_REF1 = [] : <type 'list'>
set_REF4 = set([]) : <type 'set'>
REFERENCE ACTION: sortListMultiAdd(list_REF1,set_REF4) 
==================================================
result = len(dict1.keys())                                              # STEP 53
ACTION: result = len(dict1.keys())  
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF1.keys())  
==================================================
dict4 = sortedcontainers.SortedDict()                                   # STEP 54
ACTION: dict4 = sortedcontainers.SortedDict() 
dict4 = None : <type 'NoneType'>
dict_REF4 = None : <type 'NoneType'>
=> dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF4 = {} 
=> dict_REF4 = {} : <type 'dict'>
==================================================
list1.islice(start=None,stop=None)                                      # STEP 55
ACTION: list1.islice(start=None,stop=None) 
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF1 = [] : <type 'list'>
REFERENCE ACTION: list_REF1.islice(start=None,stop=None) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'islice'
==================================================
result = set1.issuperset(set1)                                          # STEP 56
ACTION: result = set1.issuperset(set1) 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = set_REF1.issuperset(set_REF1) 
==================================================
dict1.get(val1,val6)                                                    # STEP 57
ACTION: dict1.get(val1,val6) 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val1 = 'qq' : <type 'str'>
val6 = 'G' : <type 'str'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF1.get(val1,val6) 
==================================================
ival1 = ival2 * ival9                                                   # STEP 58
ACTION: ival1 = ival2 * ival9 
ival2 = 8 : <type 'int'>
ival9 = 0 : <type 'int'>
ival1 = None : <type 'NoneType'>
=> ival1 = 0 : <type 'int'>
==================================================
dict0.irange(minimum=val6,maximum=val6,inclusive=(False,False),reverse=True)  # STEP 59
ACTION: dict0.irange(minimum=val6,maximum=val6,inclusive=(False,False),reverse=True) 
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val6 = 'G' : <type 'str'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF0.irange(minimum=val6,maximum=val6,inclusive=(False,False),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'irange'
==================================================
dict4.get(val1,None)                                                    # STEP 60
ACTION: dict4.get(val1,None) 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val1 = 'qq' : <type 'str'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF4.get(val1,None) 
==================================================
result = dict2 == dict4                                                 # STEP 61
ACTION: result = dict2 == dict4 
dict2 = SortedDict(None, 1000, {'qq': 'qq'}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF2 = {'qq': 'qq'} : <type 'dict'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = dict_REF2 == dict_REF4 
==================================================
set4 &= set2                                                            # STEP 62
ACTION: set4 &= set2 
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF4 = set([]) : <type 'set'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF4 &= set_REF2 
==================================================
list3.irange(minimum=val1,maximum=val6,inclusive=(False,True))          # STEP 63
ACTION: list3.irange(minimum=val1,maximum=val6,inclusive=(False,True)) 
list3 = SortedList(['G'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val1 = 'qq' : <type 'str'>
val6 = 'G' : <type 'str'>
list_REF3 = ['G'] : <type 'list'>
REFERENCE ACTION: list_REF3.irange(minimum=val1,maximum=val6,inclusive=(False,True)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
dict2.irange(minimum=val6,maximum=val1,inclusive=(False,True),reverse=True)  # STEP 64
ACTION: dict2.irange(minimum=val6,maximum=val1,inclusive=(False,True),reverse=True) 
dict2 = SortedDict(None, 1000, {'qq': 'qq'}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val6 = 'G' : <type 'str'>
val1 = 'qq' : <type 'str'>
dict_REF2 = {'qq': 'qq'} : <type 'dict'>
REFERENCE ACTION: dict_REF2.irange(minimum=val6,maximum=val1,inclusive=(False,True),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'irange'
==================================================
setList(list3,ival2,val1)                                               # STEP 65
ACTION: setList(list3,ival2,val1) 
ival2 = 8 : <type 'int'>
list3 = SortedList(['G'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val1 = 'qq' : <type 'str'>
list_REF3 = ['G'] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: sortListSet(list_REF3,ival2,val1) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list assignment index out of range
==================================================
set4.irange(minimum=val6,maximum=val1,inclusive=(True,False))           # STEP 66
ACTION: set4.irange(minimum=val6,maximum=val1,inclusive=(True,False)) 
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
val6 = 'G' : <type 'str'>
val1 = 'qq' : <type 'str'>
set_REF4 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF4.irange(minimum=val6,maximum=val1,inclusive=(True,False)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'irange'
==================================================
list1.extend(list1)                                                     # STEP 67
ACTION: list1.extend(list1) 
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF1 = [] : <type 'list'>
REFERENCE ACTION: sortListExtend(list_REF1,list_REF1) 
==================================================
setList(list1,ival2,val6)                                               # STEP 68
ACTION: setList(list1,ival2,val6) 
ival2 = 8 : <type 'int'>
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val6 = 'G' : <type 'str'>
list_REF1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: sortListSet(list_REF1,ival2,val6) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list assignment index out of range
==================================================
set1 = sortedcontainers.SortedSet()                                     # STEP 69
ACTION: set1 = sortedcontainers.SortedSet() 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1 = set([]) 
==================================================
dict0.islice(start=None,stop=ival1)                                     # STEP 70
ACTION: dict0.islice(start=None,stop=ival1) 
ival1 = 0 : <type 'int'>
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF0.islice(start=None,stop=ival1) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'islice'
==================================================
set3 &= set0                                                            # STEP 71
ACTION: set3 &= set0 
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF3 = set([]) : <type 'set'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF3 &= set_REF0 
==================================================
dict3 = dict0.copy()                                                    # STEP 72
ACTION: dict3 = dict0.copy() 
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict3 = None : <type 'NoneType'>
dict_REF0 = {} : <type 'dict'>
dict_REF3 = None : <type 'NoneType'>
=> dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF3 = dict_REF0.copy() 
=> dict_REF3 = {} : <type 'dict'>
==================================================
result = dict1.peekitem(ival9)                                          # STEP 73
ACTION: result = dict1.peekitem(ival9) 
ival9 = 0 : <type 'int'>
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {} : <type 'dict'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: result_REF = sortDictPeekitem(dict_REF1,ival9) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
==================================================
list3.extend(list1)                                                     # STEP 74
ACTION: list3.extend(list1) 
list3 = SortedList(['G'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = ['G'] : <type 'list'>
list_REF1 = [] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x1204018c0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 702933, in act11966
    self.p_list[3].extend(self.p_list[1])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #12 STEP #63 (0:00:30.007687) Mon Nov 20 15:58:00 2017 [ 390 stmts 507 branches ] 1138 TOTAL ACTIONS (37.9236159227/s)
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 0
STOPPING TESTING DUE TO TIMEOUT
24.0015509888 PERCENT COVERED
60.3997991085 TOTAL RUNTIME
25 EXECUTED
2375 TOTAL TEST OPERATIONS
1.4764251709 TIME SPENT EXECUTING TEST OPERATIONS
56.5461192131 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
1.41392421722 TIME SPENT CHECKING PROPERTIES
2.89034938812 TOTAL TIME SPENT RUNNING SUT
0.490495920181 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
sval7 = 'q'                                                              # STEP 0
set1 = sortedcontainers.SortedSet()                                      # STEP 1
set1 ^= set1                                                             # STEP 2
set0 = set1 - set1                                                       # STEP 3
sval5 = sval7 + sval7                                                    # STEP 4
set3 = set0.union(set0)                                                  # STEP 5
list1 = sortedcontainers.SortedList()                                    # STEP 6
set0 = set1 | set1                                                       # STEP 7
reversed(set1)                                                           # STEP 8
result = list1 == list1                                                  # STEP 9
set2 = set0.union(set1)                                                 # STEP 10
set4 = set2 & set0                                                      # STEP 11
ival9 = 1                                                               # STEP 12
set0.update(list1)                                                      # STEP 13
set0 = set2 - set2                                                      # STEP 14
set0.update(set1)                                                       # STEP 15
plist1 = list1 [ival9 : ival9]                                          # STEP 16
set2 = set1 | set1                                                      # STEP 17
ival2 = 8                                                               # STEP 18
ival5 = ival9 - ival2                                                   # STEP 19
dict1 = sortedcontainers.SortedDict()                                   # STEP 20
result = dict1.popitem(last=False)                                      # STEP 21
sval2 = sval7 + sval7                                                   # STEP 22
result = dict1 != dict1                                                 # STEP 23
ival9 = ival9 - ival9                                                   # STEP 24
dict0 = sortedcontainers.SortedDict()                                   # STEP 25
list1.islice(start=ival9,stop=ival9,reverse=True)                       # STEP 26
list3 = sortedcontainers.SortedList(plist1)                             # STEP 27
result = dict1.peekitem()                                               # STEP 28
result = list3.pop(ival5)                                               # STEP 29
val1 = sval2                                                            # STEP 30
iter(dict1)                                                             # STEP 31
result = dict1 != dict0                                                 # STEP 32
result = dict1 == dict0                                                 # STEP 33
list1.irange(minimum=val1,maximum=val1,inclusive=(False,True))          # STEP 34
sval2 = sval2 + sval7                                                   # STEP 35
set1 = sortedcontainers.SortedSet()                                     # STEP 36
dict2 = dict0.fromkeys(list3,val1) ; result = dict2                     # STEP 37
set0 = sortedcontainers.SortedSet()                                     # STEP 38
dict2 [val1] = val1                                                     # STEP 39
sval0 = 'G'                                                             # STEP 40
dict0 = dict1.copy()                                                    # STEP 41
result = dict1 != dict2                                                 # STEP 42
set1.irange(minimum=val1,maximum=val1,inclusive=(False,False),reverse=True)  # STEP 43
dict1.get(val1,None)                                                    # STEP 44
list3 < list1                                                           # STEP 45
val6 = sval0                                                            # STEP 46
list3.insert(ival9,val6)                                                # STEP 47
set1 = set2 ^ set4                                                      # STEP 48
dict1.irange(minimum=val1,maximum=val1,inclusive=(True,False))          # STEP 49
result = dict1 == dict2                                                 # STEP 50
del list3 [ival2]                                                       # STEP 51
list1.update(set4)                                                      # STEP 52
result = len(dict1.keys())                                              # STEP 53
dict4 = sortedcontainers.SortedDict()                                   # STEP 54
list1.islice(start=None,stop=None)                                      # STEP 55
result = set1.issuperset(set1)                                          # STEP 56
dict1.get(val1,val6)                                                    # STEP 57
ival1 = ival2 * ival9                                                   # STEP 58
dict0.irange(minimum=val6,maximum=val6,inclusive=(False,False),reverse=True)  # STEP 59
dict4.get(val1,None)                                                    # STEP 60
result = dict2 == dict4                                                 # STEP 61
set4 &= set2                                                            # STEP 62
list3.irange(minimum=val1,maximum=val6,inclusive=(False,True))          # STEP 63
dict2.irange(minimum=val6,maximum=val1,inclusive=(False,True),reverse=True)  # STEP 64
setList(list3,ival2,val1)                                               # STEP 65
set4.irange(minimum=val6,maximum=val1,inclusive=(True,False))           # STEP 66
list1.extend(list1)                                                     # STEP 67
setList(list1,ival2,val6)                                               # STEP 68
set1 = sortedcontainers.SortedSet()                                     # STEP 69
dict0.islice(start=None,stop=ival1)                                     # STEP 70
set3 &= set0                                                            # STEP 71
dict3 = dict0.copy()                                                    # STEP 72
result = dict1.peekitem(ival9)                                          # STEP 73
list3.extend(list1)                                                     # STEP 74
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x1204018c0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 702933, in act11966
    self.p_list[3].extend(self.p_list[1])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
594 BRANCHES COVERED
458 STATEMENTS COVERED

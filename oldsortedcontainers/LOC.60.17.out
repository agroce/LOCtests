Random testing using config=Config(noExceptionMatch=False, generalize=False, localize=False, speed='FAST', probs='locsample.probs', LOCBaseline=0.2, noAlphaConvert=False, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, html=None, keepLast=False, stopWhenNoCoverage=None, generateLOC=None, computeFeatureStats=False, Pmutate=0.0, timeout=60, output='failure.60999.test', markov=None, noSwarmDependencies=False, startExploit=0.0, maxMustHitBranch=None, useHints=False, silentFail=False, highLowSwarm=None, maxMustHitStatement=None, progress=False, postCover=False, swarmLength=None, noCover=False, noEnumerateEnabled=False, full=True, swarmP=0.5, coverFile='coverage.out', markovP=1.0, swarmProbs=None, genDepth=None, exploitCeiling=0.1, logging=None, noCheck=False, throughput=False, uncaught=False, swarmSwitch=None, verbose=False, reducePool=False, exploit=None, fastQuickAnalysis=False, total=False, verboseExploit=False, swarm=False, sequenceP=1.0, biasLOC=None, timedProgress=30, relax=False, ddmin=False, stutter=None, readQuick=False, verboseActions=False, quickAnalysis=False, noReassign=False, sequenceSize=3, LOCProbs=False, sequencesFromTests=None, maxTests=-1, trackMaxCoverage=None, useQuickSequences=False, exploitBestHint=1, failedLogging=None, stopWhenStatements=None, greedyStutter=False, seed=None, stopWhenHitStatement=None, uniqueValuesAnalysis=False, normalize=False, startExploitStall=0, enumerateEnabled=False, internal=False, profile=False, multiple=True, stopWhenBranches=None, running=False, compareFails=False, Pcrossover=0.2, stopWhenHitBranch=None, depth=100, showActions=False)
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x1209b33b0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 703286, in act11972
    self.p_list[4].extend(self.p_list[2])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
Original test has 98 steps

SAVING TEST AS failure.60999.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
sval8 = 'z'                                                              # STEP 0
ACTION: sval8 = 'z' 
sval8 = None : <type 'NoneType'>
=> sval8 = 'z' : <type 'str'>
==================================================
sval0 = 'd'                                                              # STEP 1
ACTION: sval0 = 'd' 
sval0 = None : <type 'NoneType'>
=> sval0 = 'd' : <type 'str'>
==================================================
sval2 = 'P'                                                              # STEP 2
ACTION: sval2 = 'P' 
sval2 = None : <type 'NoneType'>
=> sval2 = 'P' : <type 'str'>
==================================================
sval4 = 'q'                                                              # STEP 3
ACTION: sval4 = 'q' 
sval4 = None : <type 'NoneType'>
=> sval4 = 'q' : <type 'str'>
==================================================
val3 = sval0                                                             # STEP 4
ACTION: val3 = sval0 
sval0 = 'd' : <type 'str'>
val3 = None : <type 'NoneType'>
=> val3 = 'd' : <type 'str'>
==================================================
list1 = sortedcontainers.SortedList()                                    # STEP 5
ACTION: list1 = sortedcontainers.SortedList() 
list1 = None : <type 'NoneType'>
list_REF1 = None : <type 'NoneType'>
=> list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: list_REF1 = [] 
=> list_REF1 = [] : <type 'list'>
==================================================
dict4 = sortedcontainers.SortedDict()                                    # STEP 6
ACTION: dict4 = sortedcontainers.SortedDict() 
dict4 = None : <type 'NoneType'>
dict_REF4 = None : <type 'NoneType'>
=> dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF4 = {} 
=> dict_REF4 = {} : <type 'dict'>
==================================================
val5 = sval2                                                             # STEP 7
ACTION: val5 = sval2 
sval2 = 'P' : <type 'str'>
val5 = None : <type 'NoneType'>
=> val5 = 'P' : <type 'str'>
==================================================
sval6 = sval4 + sval0                                                    # STEP 8
ACTION: sval6 = sval4 + sval0 
sval4 = 'q' : <type 'str'>
sval0 = 'd' : <type 'str'>
sval6 = None : <type 'NoneType'>
=> sval6 = 'qd' : <type 'str'>
==================================================
list1.irange(minimum=val3,maximum=val5,inclusive=(True,False),reverse=True)  # STEP 9
ACTION: list1.irange(minimum=val3,maximum=val5,inclusive=(True,False),reverse=True) 
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val3 = 'd' : <type 'str'>
val5 = 'P' : <type 'str'>
list_REF1 = [] : <type 'list'>
REFERENCE ACTION: list_REF1.irange(minimum=val3,maximum=val5,inclusive=(True,False),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
result = dict4 == dict4                                                 # STEP 10
ACTION: result = dict4 == dict4 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = dict_REF4 == dict_REF4 
==================================================
list1.irange(minimum=val5,maximum=val3,inclusive=(False,True))          # STEP 11
ACTION: list1.irange(minimum=val5,maximum=val3,inclusive=(False,True)) 
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val5 = 'P' : <type 'str'>
val3 = 'd' : <type 'str'>
list_REF1 = [] : <type 'list'>
REFERENCE ACTION: list_REF1.irange(minimum=val5,maximum=val3,inclusive=(False,True)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
list3 = sortedcontainers.SortedList()                                   # STEP 12
ACTION: list3 = sortedcontainers.SortedList() 
list3 = None : <type 'NoneType'>
list_REF3 = None : <type 'NoneType'>
=> list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: list_REF3 = [] 
=> list_REF3 = [] : <type 'list'>
==================================================
result = dict4 == dict4                                                 # STEP 13
ACTION: result = dict4 == dict4 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = dict_REF4 == dict_REF4 
==================================================
dict4.irange(minimum=val5,maximum=val3,inclusive=(False,True),reverse=True)  # STEP 14
ACTION: dict4.irange(minimum=val5,maximum=val3,inclusive=(False,True),reverse=True) 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val5 = 'P' : <type 'str'>
val3 = 'd' : <type 'str'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF4.irange(minimum=val5,maximum=val3,inclusive=(False,True),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'irange'
==================================================
result = len(dict4)                                                     # STEP 15
ACTION: result = len(dict4) 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF4) 
==================================================
result = dict4.popitem()                                                # STEP 16
ACTION: result = dict4.popitem() 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF4 = {} : <type 'dict'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.KeyError'> 'popitem(): dictionary is empty'
REFERENCE ACTION: result_REF = sortDictPopitem(dict_REF4,) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.KeyError'> 
==================================================
result = len(dict4.keys())                                              # STEP 17
ACTION: result = len(dict4.keys())  
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF4.keys())  
==================================================
result = len(dict4.keys())                                              # STEP 18
ACTION: result = len(dict4.keys())  
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF4.keys())  
==================================================
dict4.irange(minimum=val5,maximum=val3,inclusive=(False,False),reverse=True)  # STEP 19
ACTION: dict4.irange(minimum=val5,maximum=val3,inclusive=(False,False),reverse=True) 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val5 = 'P' : <type 'str'>
val3 = 'd' : <type 'str'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF4.irange(minimum=val5,maximum=val3,inclusive=(False,False),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'irange'
==================================================
val5 = sval0                                                            # STEP 20
ACTION: val5 = sval0 
sval0 = 'd' : <type 'str'>
val5 = 'P' : <type 'str'>
=> val5 = 'd' : <type 'str'>
==================================================
list1 < list3                                                           # STEP 21
ACTION: list1 < list3 
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF1 = [] : <type 'list'>
list_REF3 = [] : <type 'list'>
REFERENCE ACTION: list_REF1 < list_REF3 
==================================================
result = len(dict4.keys())                                              # STEP 22
ACTION: result = len(dict4.keys())  
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF4.keys())  
==================================================
result = (dict4.keys()).count(val5)                                     # STEP 23
ACTION: result = (dict4.keys()).count(val5)  
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val5 = 'd' : <type 'str'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = (dict_REF4.keys()).count(val5)  
==================================================
dict4.get(val5,None)                                                    # STEP 24
ACTION: dict4.get(val5,None) 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val5 = 'd' : <type 'str'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF4.get(val5,None) 
==================================================
result = (dict4.keys()).count(val5)                                     # STEP 25
ACTION: result = (dict4.keys()).count(val5)  
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val5 = 'd' : <type 'str'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = (dict_REF4.keys()).count(val5)  
==================================================
result = sorted(list(dict4.keys()))                                     # STEP 26
ACTION: result = sorted(list(dict4.keys())) 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = sorted(list(dict_REF4.keys())) 
==================================================
result = sorted(list(dict4.keys()))                                     # STEP 27
ACTION: result = sorted(list(dict4.keys())) 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = sorted(list(dict_REF4.keys())) 
==================================================
dict4.get(val3,val3)                                                    # STEP 28
ACTION: dict4.get(val3,val3) 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val3 = 'd' : <type 'str'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF4.get(val3,val3) 
==================================================
list1.update(list1)                                                     # STEP 29
ACTION: list1.update(list1) 
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF1 = [] : <type 'list'>
REFERENCE ACTION: sortListMultiAdd(list_REF1,list_REF1) 
==================================================
result = dict4.popitem(last=False)                                      # STEP 30
ACTION: result = dict4.popitem(last=False) 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF4 = {} : <type 'dict'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.KeyError'> 'popitem(): dictionary is empty'
REFERENCE ACTION: result_REF = sortDictPopitem(dict_REF4,last=False) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.KeyError'> 
==================================================
list3 <= list3                                                          # STEP 31
ACTION: list3 <= list3 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [] : <type 'list'>
REFERENCE ACTION: list_REF3 <= list_REF3 
==================================================
result = sorted(list(dict4.items()))                                    # STEP 32
ACTION: result = sorted(list(dict4.items())) 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = sorted(list(dict_REF4.items())) 
==================================================
repr(dict4)                                                             # STEP 33
ACTION: repr(dict4) 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: repr(dict_REF4) 
==================================================
dict4.irange(minimum=val5,maximum=val3,inclusive=(False,True))          # STEP 34
ACTION: dict4.irange(minimum=val5,maximum=val3,inclusive=(False,True)) 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val5 = 'd' : <type 'str'>
val3 = 'd' : <type 'str'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF4.irange(minimum=val5,maximum=val3,inclusive=(False,True)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'irange'
==================================================
dict4.irange(minimum=val5,maximum=val5,inclusive=(False,True))          # STEP 35
ACTION: dict4.irange(minimum=val5,maximum=val5,inclusive=(False,True)) 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val5 = 'd' : <type 'str'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF4.irange(minimum=val5,maximum=val5,inclusive=(False,True)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'irange'
==================================================
list1.irange(minimum=val5,maximum=val3,inclusive=(True,False),reverse=True)  # STEP 36
ACTION: list1.irange(minimum=val5,maximum=val3,inclusive=(True,False),reverse=True) 
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val5 = 'd' : <type 'str'>
val3 = 'd' : <type 'str'>
list_REF1 = [] : <type 'list'>
REFERENCE ACTION: list_REF1.irange(minimum=val5,maximum=val3,inclusive=(True,False),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
dict3 = dict4.fromkeys(list1,val5) ; result = dict3                     # STEP 37
ACTION: dict3 = dict4.fromkeys(list1,val5) ; result = dict3 
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict3 = None : <type 'NoneType'>
val5 = 'd' : <type 'str'>
list_REF1 = [] : <type 'list'>
dict_REF4 = {} : <type 'dict'>
dict_REF3 = None : <type 'NoneType'>
=> dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF3 = dict_REF4.fromkeys(list_REF1,val5) ; result_REF = dict_REF3 
=> dict_REF3 = {} : <type 'dict'>
==================================================
list1.irange(minimum=val3,maximum=val5,inclusive=(False,True),reverse=True)  # STEP 38
ACTION: list1.irange(minimum=val3,maximum=val5,inclusive=(False,True),reverse=True) 
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val3 = 'd' : <type 'str'>
val5 = 'd' : <type 'str'>
list_REF1 = [] : <type 'list'>
REFERENCE ACTION: list_REF1.irange(minimum=val3,maximum=val5,inclusive=(False,True),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
list1 >= list1                                                          # STEP 39
ACTION: list1 >= list1 
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF1 = [] : <type 'list'>
REFERENCE ACTION: list_REF1 >= list_REF1 
==================================================
list3+=list1                                                            # STEP 40
ACTION: list3+=list1 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [] : <type 'list'>
list_REF1 = [] : <type 'list'>
REFERENCE ACTION: sortListMultiAdd(list_REF3,list_REF1) 
==================================================
result = sorted(list(dict4.keys()))                                     # STEP 41
ACTION: result = sorted(list(dict4.keys())) 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = sorted(list(dict_REF4.keys())) 
==================================================
dict3.get(val3,val3)                                                    # STEP 42
ACTION: dict3.get(val3,val3) 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val3 = 'd' : <type 'str'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF3.get(val3,val3) 
==================================================
dict3.irange(minimum=val5,maximum=val3,inclusive=(False,True),reverse=True)  # STEP 43
ACTION: dict3.irange(minimum=val5,maximum=val3,inclusive=(False,True),reverse=True) 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val5 = 'd' : <type 'str'>
val3 = 'd' : <type 'str'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF3.irange(minimum=val5,maximum=val3,inclusive=(False,True),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'irange'
==================================================
set2 = sortedcontainers.SortedSet()                                     # STEP 44
ACTION: set2 = sortedcontainers.SortedSet() 
set2 = None : <type 'NoneType'>
set_REF2 = None : <type 'NoneType'>
=> set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF2 = set([]) 
=> set_REF2 = set([]) : <type 'set'>
==================================================
list3 < list3                                                           # STEP 45
ACTION: list3 < list3 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [] : <type 'list'>
REFERENCE ACTION: list_REF3 < list_REF3 
==================================================
result = len(dict3)                                                     # STEP 46
ACTION: result = len(dict3) 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF3) 
==================================================
set3 = set2 ^ set2                                                      # STEP 47
ACTION: set3 = set2 ^ set2 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set3 = None : <type 'NoneType'>
set_REF2 = set([]) : <type 'set'>
set_REF3 = None : <type 'NoneType'>
=> set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF3 = set_REF2 ^ set_REF2 
=> set_REF3 = set([]) : <type 'set'>
==================================================
set1 = set3 & set2                                                      # STEP 48
ACTION: set1 = set3 & set2 
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set1 = None : <type 'NoneType'>
set_REF3 = set([]) : <type 'set'>
set_REF2 = set([]) : <type 'set'>
set_REF1 = None : <type 'NoneType'>
=> set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF1 = set_REF3 & set_REF2 
=> set_REF1 = set([]) : <type 'set'>
==================================================
ival3 = 17                                                              # STEP 49
ACTION: ival3 = 17 
ival3 = None : <type 'NoneType'>
=> ival3 = 17 : <type 'int'>
==================================================
result = list3 != list1                                                 # STEP 50
ACTION: result = list3 != list1 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [] : <type 'list'>
list_REF1 = [] : <type 'list'>
REFERENCE ACTION: result_REF = list_REF3 != list_REF1 
==================================================
list3.irange(minimum=val3,maximum=val3,inclusive=(True,False))          # STEP 51
ACTION: list3.irange(minimum=val3,maximum=val3,inclusive=(True,False)) 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val3 = 'd' : <type 'str'>
list_REF3 = [] : <type 'list'>
REFERENCE ACTION: list_REF3.irange(minimum=val3,maximum=val3,inclusive=(True,False)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
sval4 = sval8 + sval8                                                   # STEP 52
ACTION: sval4 = sval8 + sval8 
sval8 = 'z' : <type 'str'>
sval4 = 'q' : <type 'str'>
=> sval4 = 'zz' : <type 'str'>
==================================================
result = dict4.setdefault(val5,val5)                                    # STEP 53
ACTION: result = dict4.setdefault(val5,val5) 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val5 = 'd' : <type 'str'>
dict_REF4 = {} : <type 'dict'>
=> dict4 = SortedDict(None, 1000, {'d': 'd'}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: result_REF = dict_REF4.setdefault(val5,val5) 
=> dict_REF4 = {'d': 'd'} : <type 'dict'>
==================================================
sval8 = 'M'                                                             # STEP 54
ACTION: sval8 = 'M' 
sval8 = 'z' : <type 'str'>
=> sval8 = 'M' : <type 'str'>
==================================================
result = dict3 == dict3                                                 # STEP 55
ACTION: result = dict3 == dict3 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = dict_REF3 == dict_REF3 
==================================================
list3.irange(minimum=val5,maximum=val5,inclusive=(True,False),reverse=True)  # STEP 56
ACTION: list3.irange(minimum=val5,maximum=val5,inclusive=(True,False),reverse=True) 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val5 = 'd' : <type 'str'>
list_REF3 = [] : <type 'list'>
REFERENCE ACTION: list_REF3.irange(minimum=val5,maximum=val5,inclusive=(True,False),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
list3.irange(minimum=val5,maximum=val5,inclusive=(False,True),reverse=True)  # STEP 57
ACTION: list3.irange(minimum=val5,maximum=val5,inclusive=(False,True),reverse=True) 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val5 = 'd' : <type 'str'>
list_REF3 = [] : <type 'list'>
REFERENCE ACTION: list_REF3.irange(minimum=val5,maximum=val5,inclusive=(False,True),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
ival4 = ival3 * ival3                                                   # STEP 58
ACTION: ival4 = ival3 * ival3 
ival3 = 17 : <type 'int'>
ival4 = None : <type 'NoneType'>
=> ival4 = 289 : <type 'int'>
==================================================
list1.islice(start=None,stop=ival4)                                     # STEP 59
ACTION: list1.islice(start=None,stop=ival4) 
ival4 = 289 : <type 'int'>
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF1 = [] : <type 'list'>
REFERENCE ACTION: list_REF1.islice(start=None,stop=ival4) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'islice'
==================================================
set2 = set2 - set2                                                      # STEP 60
ACTION: set2 = set2 - set2 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF2 = set_REF2 - set_REF2 
==================================================
list3.islice(start=None,stop=None)                                      # STEP 61
ACTION: list3.islice(start=None,stop=None) 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [] : <type 'list'>
REFERENCE ACTION: list_REF3.islice(start=None,stop=None) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'islice'
==================================================
result = list1.index(val5)                                              # STEP 62
ACTION: result = list1.index(val5) 
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val5 = 'd' : <type 'str'>
list_REF1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> 'd' is not in list
REFERENCE ACTION: result_REF = list_REF1.index(val5) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.ValueError'> 'd' is not in list
==================================================
result = (dict4.keys()).count(val5)                                     # STEP 63
ACTION: result = (dict4.keys()).count(val5)  
dict4 = SortedDict(None, 1000, {'d': 'd'}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val5 = 'd' : <type 'str'>
dict_REF4 = {'d': 'd'} : <type 'dict'>
REFERENCE ACTION: result_REF = (dict_REF4.keys()).count(val5)  
==================================================
dict4.islice(start=None,stop=None)                                      # STEP 64
ACTION: dict4.islice(start=None,stop=None) 
dict4 = SortedDict(None, 1000, {'d': 'd'}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF4 = {'d': 'd'} : <type 'dict'>
REFERENCE ACTION: dict_REF4.islice(start=None,stop=None) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'islice'
==================================================
dict4.irange(minimum=val5,maximum=val5,inclusive=(False,False),reverse=True)  # STEP 65
ACTION: dict4.irange(minimum=val5,maximum=val5,inclusive=(False,False),reverse=True) 
dict4 = SortedDict(None, 1000, {'d': 'd'}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val5 = 'd' : <type 'str'>
dict_REF4 = {'d': 'd'} : <type 'dict'>
REFERENCE ACTION: dict_REF4.irange(minimum=val5,maximum=val5,inclusive=(False,False),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'irange'
==================================================
list1.update(list3)                                                     # STEP 66
ACTION: list1.update(list3) 
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF1 = [] : <type 'list'>
list_REF3 = [] : <type 'list'>
REFERENCE ACTION: sortListMultiAdd(list_REF1,list_REF3) 
==================================================
ival7 = ival3 * ival4                                                   # STEP 67
ACTION: ival7 = ival3 * ival4 
ival3 = 17 : <type 'int'>
ival4 = 289 : <type 'int'>
ival7 = None : <type 'NoneType'>
=> ival7 = 4913 : <type 'int'>
==================================================
list3.update(set3)                                                      # STEP 68
ACTION: list3.update(set3) 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
list_REF3 = [] : <type 'list'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: sortListMultiAdd(list_REF3,set_REF3) 
==================================================
result = dict3.peekitem(ival7)                                          # STEP 69
ACTION: result = dict3.peekitem(ival7) 
ival7 = 4913 : <type 'int'>
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: result_REF = sortDictPeekitem(dict_REF3,ival7) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
==================================================
list1.islice(start=None,stop=ival7)                                     # STEP 70
ACTION: list1.islice(start=None,stop=ival7) 
ival7 = 4913 : <type 'int'>
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF1 = [] : <type 'list'>
REFERENCE ACTION: list_REF1.islice(start=None,stop=ival7) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'islice'
==================================================
set3 = set3 | set1                                                      # STEP 71
ACTION: set3 = set3 | set1 
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF3 = set([]) : <type 'set'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF3 = set_REF3 | set_REF1 
==================================================
result = sorted(list(dict3.keys()))                                     # STEP 72
ACTION: result = sorted(list(dict3.keys())) 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = sorted(list(dict_REF3.keys())) 
==================================================
list4 = sortedcontainers.SortedList()                                   # STEP 73
ACTION: list4 = sortedcontainers.SortedList() 
list4 = None : <type 'NoneType'>
list_REF4 = None : <type 'NoneType'>
=> list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: list_REF4 = [] 
=> list_REF4 = [] : <type 'list'>
==================================================
list1.irange(minimum=val5,maximum=val5,inclusive=(True,False))          # STEP 74
ACTION: list1.irange(minimum=val5,maximum=val5,inclusive=(True,False)) 
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val5 = 'd' : <type 'str'>
list_REF1 = [] : <type 'list'>
REFERENCE ACTION: list_REF1.irange(minimum=val5,maximum=val5,inclusive=(True,False)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
set4 = set1 ^ set1                                                      # STEP 75
ACTION: set4 = set1 ^ set1 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set4 = None : <type 'NoneType'>
set_REF1 = set([]) : <type 'set'>
set_REF4 = None : <type 'NoneType'>
=> set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF4 = set_REF1 ^ set_REF1 
=> set_REF4 = set([]) : <type 'set'>
==================================================
set3.irange(minimum=val3,maximum=val5,inclusive=(True,False))           # STEP 76
ACTION: set3.irange(minimum=val3,maximum=val5,inclusive=(True,False)) 
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
val3 = 'd' : <type 'str'>
val5 = 'd' : <type 'str'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF3.irange(minimum=val3,maximum=val5,inclusive=(True,False)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'irange'
==================================================
set1 = set2 ^ set4                                                      # STEP 77
ACTION: set1 = set2 ^ set4 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF2 = set([]) : <type 'set'>
set_REF4 = set([]) : <type 'set'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1 = set_REF2 ^ set_REF4 
==================================================
dict3 [val5]                                                            # STEP 78
ACTION: dict3 [val5] 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val5 = 'd' : <type 'str'>
dict_REF3 = {} : <type 'dict'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.KeyError'> 'd'
REFERENCE ACTION: dict_REF3 [val5] 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.KeyError'> 'd'
==================================================
set2 = set1.copy()                                                      # STEP 79
ACTION: set2 = set1.copy() 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF1 = set([]) : <type 'set'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF2 = set_REF1.copy() 
==================================================
ival7 = ival4 * ival7                                                   # STEP 80
ACTION: ival7 = ival4 * ival7 
ival4 = 289 : <type 'int'>
ival7 = 4913 : <type 'int'>
=> ival7 = 1419857 : <type 'int'>
==================================================
dict2 = dict4.fromkeys(set4,val5) ; result = dict2                      # STEP 81
ACTION: dict2 = dict4.fromkeys(set4,val5) ; result = dict2 
dict4 = SortedDict(None, 1000, {'d': 'd'}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict2 = None : <type 'NoneType'>
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
val5 = 'd' : <type 'str'>
dict_REF4 = {'d': 'd'} : <type 'dict'>
dict_REF2 = None : <type 'NoneType'>
set_REF4 = set([]) : <type 'set'>
=> dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF2 = dict_REF4.fromkeys(set_REF4,val5) ; result_REF = dict_REF2 
=> dict_REF2 = {} : <type 'dict'>
==================================================
val4 = ival7                                                            # STEP 82
ACTION: val4 = ival7 
ival7 = 1419857 : <type 'int'>
val4 = None : <type 'NoneType'>
=> val4 = 1419857 : <type 'int'>
==================================================
dict2.islice(start=ival3,stop=ival4,reverse=True)                       # STEP 83
ACTION: dict2.islice(start=ival3,stop=ival4,reverse=True) 
ival3 = 17 : <type 'int'>
ival4 = 289 : <type 'int'>
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF2.islice(start=ival3,stop=ival4,reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'islice'
==================================================
val9 = ival3                                                            # STEP 84
ACTION: val9 = ival3 
ival3 = 17 : <type 'int'>
val9 = None : <type 'NoneType'>
=> val9 = 17 : <type 'int'>
==================================================
list1.add(val4)                                                         # STEP 85
ACTION: list1.add(val4) 
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val4 = 1419857 : <type 'int'>
list_REF1 = [] : <type 'list'>
=> list1 = SortedList([1419857], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: sortListAdd(list_REF1,val4) 
=> list_REF1 = [1419857] : <type 'list'>
==================================================
set0 = set1 ^ set4                                                      # STEP 86
ACTION: set0 = set1 ^ set4 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set0 = None : <type 'NoneType'>
set_REF1 = set([]) : <type 'set'>
set_REF4 = set([]) : <type 'set'>
set_REF0 = None : <type 'NoneType'>
=> set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF0 = set_REF1 ^ set_REF4 
=> set_REF0 = set([]) : <type 'set'>
==================================================
set4 = set1.copy()                                                      # STEP 87
ACTION: set4 = set1.copy() 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF1 = set([]) : <type 'set'>
set_REF4 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF4 = set_REF1.copy() 
==================================================
list3.extend(list1)                                                     # STEP 88
ACTION: list3.extend(list1) 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list1 = SortedList([1419857], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [] : <type 'list'>
list_REF1 = [1419857] : <type 'list'>
=> list3 = SortedList([1419857], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: sortListExtend(list_REF3,list_REF1) 
=> list_REF3 = [1419857] : <type 'list'>
==================================================
result = len(dict3.values())                                            # STEP 89
ACTION: result = len(dict3.values())  
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF3.values())  
==================================================
set1 = set4.copy()                                                      # STEP 90
ACTION: set1 = set4.copy() 
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF4 = set([]) : <type 'set'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1 = set_REF4.copy() 
==================================================
list2 = sortedcontainers.SortedList()                                   # STEP 91
ACTION: list2 = sortedcontainers.SortedList() 
list2 = None : <type 'NoneType'>
list_REF2 = None : <type 'NoneType'>
=> list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: list_REF2 = [] 
=> list_REF2 = [] : <type 'list'>
==================================================
list3.update(list2)                                                     # STEP 92
ACTION: list3.update(list2) 
list3 = SortedList([1419857], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [1419857] : <type 'list'>
list_REF2 = [] : <type 'list'>
REFERENCE ACTION: sortListMultiAdd(list_REF3,list_REF2) 
==================================================
setList(list2,ival4,val3)                                               # STEP 93
ACTION: setList(list2,ival4,val3) 
ival4 = 289 : <type 'int'>
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val3 = 'd' : <type 'str'>
list_REF2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: sortListSet(list_REF2,ival4,val3) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list assignment index out of range
==================================================
dict2.get(val9,val5)                                                    # STEP 94
ACTION: dict2.get(val9,val5) 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val9 = 17 : <type 'int'>
val5 = 'd' : <type 'str'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF2.get(val9,val5) 
==================================================
setListSlice(list4,ival4,ival4,list3)                                   # STEP 95
ACTION: setListSlice(list4,ival4,ival4,list3) 
ival4 = 289 : <type 'int'>
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list3 = SortedList([1419857], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = [] : <type 'list'>
list_REF3 = [1419857] : <type 'list'>
=> list4 = SortedList([1419857], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: sortListSetSlice(list_REF4,ival4,ival4,list_REF3) 
=> list_REF4 = [1419857] : <type 'list'>
==================================================
result = (dict3.values()).count(val3)                                   # STEP 96
ACTION: result = (dict3.values()).count(val3)  
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val3 = 'd' : <type 'str'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = (dict_REF3.values()).count(val3)  
==================================================
list4.extend(list2)                                                     # STEP 97
ACTION: list4.extend(list2) 
list4 = SortedList([1419857], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = [1419857] : <type 'list'>
list_REF2 = [] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x11e586290>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 703286, in act11972
    self.p_list[4].extend(self.p_list[2])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #8 STEP #41 (0:00:30.049670) Mon Nov 20 13:42:37 2017 [ 386 stmts 499 branches ] 739 TOTAL ACTIONS (24.5926161741/s)
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 14
STOPPING TESTING DUE TO TIMEOUT
21.4424195425 PERCENT COVERED
60.4003190994 TOTAL RUNTIME
16 EXECUTED
1512 TOTAL TEST OPERATIONS
1.42173910141 TIME SPENT EXECUTING TEST OPERATIONS
56.5564610958 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
1.20549654961 TIME SPENT CHECKING PROPERTIES
2.62723565102 TOTAL TIME SPENT RUNNING SUT
0.574751615524 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
sval8 = 'z'                                                              # STEP 0
sval0 = 'd'                                                              # STEP 1
sval2 = 'P'                                                              # STEP 2
sval4 = 'q'                                                              # STEP 3
val3 = sval0                                                             # STEP 4
list1 = sortedcontainers.SortedList()                                    # STEP 5
dict4 = sortedcontainers.SortedDict()                                    # STEP 6
val5 = sval2                                                             # STEP 7
sval6 = sval4 + sval0                                                    # STEP 8
list1.irange(minimum=val3,maximum=val5,inclusive=(True,False),reverse=True)  # STEP 9
result = dict4 == dict4                                                 # STEP 10
list1.irange(minimum=val5,maximum=val3,inclusive=(False,True))          # STEP 11
list3 = sortedcontainers.SortedList()                                   # STEP 12
result = dict4 == dict4                                                 # STEP 13
dict4.irange(minimum=val5,maximum=val3,inclusive=(False,True),reverse=True)  # STEP 14
result = len(dict4)                                                     # STEP 15
result = dict4.popitem()                                                # STEP 16
result = len(dict4.keys())                                              # STEP 17
result = len(dict4.keys())                                              # STEP 18
dict4.irange(minimum=val5,maximum=val3,inclusive=(False,False),reverse=True)  # STEP 19
val5 = sval0                                                            # STEP 20
list1 < list3                                                           # STEP 21
result = len(dict4.keys())                                              # STEP 22
result = (dict4.keys()).count(val5)                                     # STEP 23
dict4.get(val5,None)                                                    # STEP 24
result = (dict4.keys()).count(val5)                                     # STEP 25
result = sorted(list(dict4.keys()))                                     # STEP 26
result = sorted(list(dict4.keys()))                                     # STEP 27
dict4.get(val3,val3)                                                    # STEP 28
list1.update(list1)                                                     # STEP 29
result = dict4.popitem(last=False)                                      # STEP 30
list3 <= list3                                                          # STEP 31
result = sorted(list(dict4.items()))                                    # STEP 32
repr(dict4)                                                             # STEP 33
dict4.irange(minimum=val5,maximum=val3,inclusive=(False,True))          # STEP 34
dict4.irange(minimum=val5,maximum=val5,inclusive=(False,True))          # STEP 35
list1.irange(minimum=val5,maximum=val3,inclusive=(True,False),reverse=True)  # STEP 36
dict3 = dict4.fromkeys(list1,val5) ; result = dict3                     # STEP 37
list1.irange(minimum=val3,maximum=val5,inclusive=(False,True),reverse=True)  # STEP 38
list1 >= list1                                                          # STEP 39
list3+=list1                                                            # STEP 40
result = sorted(list(dict4.keys()))                                     # STEP 41
dict3.get(val3,val3)                                                    # STEP 42
dict3.irange(minimum=val5,maximum=val3,inclusive=(False,True),reverse=True)  # STEP 43
set2 = sortedcontainers.SortedSet()                                     # STEP 44
list3 < list3                                                           # STEP 45
result = len(dict3)                                                     # STEP 46
set3 = set2 ^ set2                                                      # STEP 47
set1 = set3 & set2                                                      # STEP 48
ival3 = 17                                                              # STEP 49
result = list3 != list1                                                 # STEP 50
list3.irange(minimum=val3,maximum=val3,inclusive=(True,False))          # STEP 51
sval4 = sval8 + sval8                                                   # STEP 52
result = dict4.setdefault(val5,val5)                                    # STEP 53
sval8 = 'M'                                                             # STEP 54
result = dict3 == dict3                                                 # STEP 55
list3.irange(minimum=val5,maximum=val5,inclusive=(True,False),reverse=True)  # STEP 56
list3.irange(minimum=val5,maximum=val5,inclusive=(False,True),reverse=True)  # STEP 57
ival4 = ival3 * ival3                                                   # STEP 58
list1.islice(start=None,stop=ival4)                                     # STEP 59
set2 = set2 - set2                                                      # STEP 60
list3.islice(start=None,stop=None)                                      # STEP 61
result = list1.index(val5)                                              # STEP 62
result = (dict4.keys()).count(val5)                                     # STEP 63
dict4.islice(start=None,stop=None)                                      # STEP 64
dict4.irange(minimum=val5,maximum=val5,inclusive=(False,False),reverse=True)  # STEP 65
list1.update(list3)                                                     # STEP 66
ival7 = ival3 * ival4                                                   # STEP 67
list3.update(set3)                                                      # STEP 68
result = dict3.peekitem(ival7)                                          # STEP 69
list1.islice(start=None,stop=ival7)                                     # STEP 70
set3 = set3 | set1                                                      # STEP 71
result = sorted(list(dict3.keys()))                                     # STEP 72
list4 = sortedcontainers.SortedList()                                   # STEP 73
list1.irange(minimum=val5,maximum=val5,inclusive=(True,False))          # STEP 74
set4 = set1 ^ set1                                                      # STEP 75
set3.irange(minimum=val3,maximum=val5,inclusive=(True,False))           # STEP 76
set1 = set2 ^ set4                                                      # STEP 77
dict3 [val5]                                                            # STEP 78
set2 = set1.copy()                                                      # STEP 79
ival7 = ival4 * ival7                                                   # STEP 80
dict2 = dict4.fromkeys(set4,val5) ; result = dict2                      # STEP 81
val4 = ival7                                                            # STEP 82
dict2.islice(start=ival3,stop=ival4,reverse=True)                       # STEP 83
val9 = ival3                                                            # STEP 84
list1.add(val4)                                                         # STEP 85
set0 = set1 ^ set4                                                      # STEP 86
set4 = set1.copy()                                                      # STEP 87
list3.extend(list1)                                                     # STEP 88
result = len(dict3.values())                                            # STEP 89
set1 = set4.copy()                                                      # STEP 90
list2 = sortedcontainers.SortedList()                                   # STEP 91
list3.update(list2)                                                     # STEP 92
setList(list2,ival4,val3)                                               # STEP 93
dict2.get(val9,val5)                                                    # STEP 94
setListSlice(list4,ival4,ival4,list3)                                   # STEP 95
result = (dict3.values()).count(val3)                                   # STEP 96
list4.extend(list2)                                                     # STEP 97
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x11e586290>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 703286, in act11972
    self.p_list[4].extend(self.p_list[2])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
538 BRANCHES COVERED
413 STATEMENTS COVERED

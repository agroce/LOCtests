Random testing using config=Config(noExceptionMatch=False, generalize=False, localize=False, speed='FAST', probs='locsample.probs', LOCBaseline=0.2, noAlphaConvert=False, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, html=None, keepLast=False, stopWhenNoCoverage=None, generateLOC=None, computeFeatureStats=False, Pmutate=0.0, timeout=60, output='failure.10779.test', markov=None, noSwarmDependencies=False, startExploit=0.0, maxMustHitBranch=None, useHints=False, silentFail=False, highLowSwarm=None, maxMustHitStatement=None, progress=False, postCover=False, swarmLength=None, noCover=False, noEnumerateEnabled=False, full=True, swarmP=0.5, coverFile='coverage.out', markovP=1.0, swarmProbs=None, genDepth=None, exploitCeiling=0.1, logging=None, noCheck=False, throughput=False, uncaught=False, swarmSwitch=None, verbose=False, reducePool=False, exploit=None, fastQuickAnalysis=False, total=False, verboseExploit=False, swarm=False, sequenceP=1.0, biasLOC=None, timedProgress=30, relax=False, ddmin=False, stutter=None, readQuick=False, verboseActions=False, quickAnalysis=False, noReassign=False, sequenceSize=3, LOCProbs=False, sequencesFromTests=None, maxTests=-1, trackMaxCoverage=None, useQuickSequences=False, exploitBestHint=1, failedLogging=None, stopWhenStatements=None, greedyStutter=False, seed=None, stopWhenHitStatement=None, uniqueValuesAnalysis=False, normalize=False, startExploitStall=0, enumerateEnabled=False, internal=False, profile=False, multiple=True, stopWhenBranches=None, running=False, compareFails=False, Pcrossover=0.2, stopWhenHitBranch=None, depth=100, showActions=False)
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x11eea9b48>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 702166, in act11953
    self.p_list[0].extend(self.p_list[3])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
Original test has 27 steps

SAVING TEST AS failure.10779.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
sval4 = 'a'                                                              # STEP 0
ACTION: sval4 = 'a' 
sval4 = None : <type 'NoneType'>
=> sval4 = 'a' : <type 'str'>
==================================================
ival6 = 6                                                                # STEP 1
ACTION: ival6 = 6 
ival6 = None : <type 'NoneType'>
=> ival6 = 6 : <type 'int'>
==================================================
list0 = sortedcontainers.SortedList()                                    # STEP 2
ACTION: list0 = sortedcontainers.SortedList() 
list0 = None : <type 'NoneType'>
list_REF0 = None : <type 'NoneType'>
=> list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: list_REF0 = [] 
=> list_REF0 = [] : <type 'list'>
==================================================
ival1 = ival6 + ival6                                                    # STEP 3
ACTION: ival1 = ival6 + ival6 
ival6 = 6 : <type 'int'>
ival1 = None : <type 'NoneType'>
=> ival1 = 12 : <type 'int'>
==================================================
ival7 = ival1 - ival6                                                    # STEP 4
ACTION: ival7 = ival1 - ival6 
ival1 = 12 : <type 'int'>
ival6 = 6 : <type 'int'>
ival7 = None : <type 'NoneType'>
=> ival7 = 6 : <type 'int'>
==================================================
list0 < list0                                                            # STEP 5
ACTION: list0 < list0 
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF0 = [] : <type 'list'>
REFERENCE ACTION: list_REF0 < list_REF0 
==================================================
ival2 = ival1 - ival7                                                    # STEP 6
ACTION: ival2 = ival1 - ival7 
ival1 = 12 : <type 'int'>
ival7 = 6 : <type 'int'>
ival2 = None : <type 'NoneType'>
=> ival2 = 6 : <type 'int'>
==================================================
val0 = ival2                                                             # STEP 7
ACTION: val0 = ival2 
ival2 = 6 : <type 'int'>
val0 = None : <type 'NoneType'>
=> val0 = 6 : <type 'int'>
==================================================
ival6 = 11                                                               # STEP 8
ACTION: ival6 = 11 
ival6 = 6 : <type 'int'>
=> ival6 = 11 : <type 'int'>
==================================================
setListSlice(list0,ival7,ival2,list0)                                    # STEP 9
ACTION: setListSlice(list0,ival7,ival2,list0) 
ival7 = 6 : <type 'int'>
ival2 = 6 : <type 'int'>
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF0 = [] : <type 'list'>
REFERENCE ACTION: sortListSetSlice(list_REF0,ival7,ival2,list_REF0) 
==================================================
result = list0.count(val0)                                              # STEP 10
ACTION: result = list0.count(val0) 
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val0 = 6 : <type 'int'>
list_REF0 = [] : <type 'list'>
REFERENCE ACTION: result_REF = list_REF0.count(val0) 
==================================================
list3 = sortedcontainers.SortedList()                                   # STEP 11
ACTION: list3 = sortedcontainers.SortedList() 
list3 = None : <type 'NoneType'>
list_REF3 = None : <type 'NoneType'>
=> list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: list_REF3 = [] 
=> list_REF3 = [] : <type 'list'>
==================================================
setListSlice(list0,ival6,ival1,list0)                                   # STEP 12
ACTION: setListSlice(list0,ival6,ival1,list0) 
ival6 = 11 : <type 'int'>
ival1 = 12 : <type 'int'>
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF0 = [] : <type 'list'>
REFERENCE ACTION: sortListSetSlice(list_REF0,ival6,ival1,list_REF0) 
==================================================
val3 = ival1                                                            # STEP 13
ACTION: val3 = ival1 
ival1 = 12 : <type 'int'>
val3 = None : <type 'NoneType'>
=> val3 = 12 : <type 'int'>
==================================================
sval2 = 'x'                                                             # STEP 14
ACTION: sval2 = 'x' 
sval2 = None : <type 'NoneType'>
=> sval2 = 'x' : <type 'str'>
==================================================
val8 = sval4                                                            # STEP 15
ACTION: val8 = sval4 
sval4 = 'a' : <type 'str'>
val8 = None : <type 'NoneType'>
=> val8 = 'a' : <type 'str'>
==================================================
list0.insert(ival2,val8)                                                # STEP 16
ACTION: list0.insert(ival2,val8) 
ival2 = 6 : <type 'int'>
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val8 = 'a' : <type 'str'>
list_REF0 = [] : <type 'list'>
=> list0 = SortedList(['a'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: sortListInsert(list_REF0,ival2,val8) 
=> list_REF0 = ['a'] : <type 'list'>
==================================================
list0.irange(minimum=val3,maximum=val3,inclusive=(False,True),reverse=True)  # STEP 17
ACTION: list0.irange(minimum=val3,maximum=val3,inclusive=(False,True),reverse=True) 
list0 = SortedList(['a'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val3 = 12 : <type 'int'>
list_REF0 = ['a'] : <type 'list'>
REFERENCE ACTION: list_REF0.irange(minimum=val3,maximum=val3,inclusive=(False,True),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
ival9 = ival1 * ival2                                                   # STEP 18
ACTION: ival9 = ival1 * ival2 
ival1 = 12 : <type 'int'>
ival2 = 6 : <type 'int'>
ival9 = None : <type 'NoneType'>
=> ival9 = 72 : <type 'int'>
==================================================
list0.irange(minimum=val8,maximum=val8,inclusive=(False,False),reverse=True)  # STEP 19
ACTION: list0.irange(minimum=val8,maximum=val8,inclusive=(False,False),reverse=True) 
list0 = SortedList(['a'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val8 = 'a' : <type 'str'>
list_REF0 = ['a'] : <type 'list'>
REFERENCE ACTION: list_REF0.irange(minimum=val8,maximum=val8,inclusive=(False,False),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
ival7 = ival6 + ival7                                                   # STEP 20
ACTION: ival7 = ival6 + ival7 
ival6 = 11 : <type 'int'>
ival7 = 6 : <type 'int'>
=> ival7 = 17 : <type 'int'>
==================================================
list3.extend(list3)                                                     # STEP 21
ACTION: list3.extend(list3) 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [] : <type 'list'>
REFERENCE ACTION: sortListExtend(list_REF3,list_REF3) 
==================================================
list3.irange(minimum=val0,maximum=val8,inclusive=(False,False),reverse=True)  # STEP 22
ACTION: list3.irange(minimum=val0,maximum=val8,inclusive=(False,False),reverse=True) 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val0 = 6 : <type 'int'>
val8 = 'a' : <type 'str'>
list_REF3 = [] : <type 'list'>
REFERENCE ACTION: list_REF3.irange(minimum=val0,maximum=val8,inclusive=(False,False),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
list0 <= list3                                                          # STEP 23
ACTION: list0 <= list3 
list0 = SortedList(['a'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF0 = ['a'] : <type 'list'>
list_REF3 = [] : <type 'list'>
REFERENCE ACTION: list_REF0 <= list_REF3 
==================================================
setListSlice(list3,ival2,ival1,list3)                                   # STEP 24
ACTION: setListSlice(list3,ival2,ival1,list3) 
ival2 = 6 : <type 'int'>
ival1 = 12 : <type 'int'>
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [] : <type 'list'>
REFERENCE ACTION: sortListSetSlice(list_REF3,ival2,ival1,list_REF3) 
==================================================
val0 = ival2                                                            # STEP 25
ACTION: val0 = ival2 
ival2 = 6 : <type 'int'>
val0 = 6 : <type 'int'>
==================================================
list0.extend(list3)                                                     # STEP 26
ACTION: list0.extend(list3) 
list0 = SortedList(['a'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF0 = ['a'] : <type 'list'>
list_REF3 = [] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x12027cd40>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 702166, in act11953
    self.p_list[0].extend(self.p_list[3])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #13 STEP #45 (0:00:30.004464) Mon Nov 20 18:37:37 2017 [ 416 stmts 545 branches ] (no cov+ for 1 tests) 1172 TOTAL ACTIONS (39.0608542169/s)
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 39
STOPPING TESTING DUE TO TIMEOUT
23.6913532377 PERCENT COVERED
60.2155029774 TOTAL RUNTIME
25 EXECUTED
2366 TOTAL TEST OPERATIONS
1.46685051918 TIME SPENT EXECUTING TEST OPERATIONS
56.4542431831 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
1.3705675602 TIME SPENT CHECKING PROPERTIES
2.83741807938 TOTAL TIME SPENT RUNNING SUT
0.489406824112 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
sval4 = 'a'                                                              # STEP 0
ival6 = 6                                                                # STEP 1
list0 = sortedcontainers.SortedList()                                    # STEP 2
ival1 = ival6 + ival6                                                    # STEP 3
ival7 = ival1 - ival6                                                    # STEP 4
list0 < list0                                                            # STEP 5
ival2 = ival1 - ival7                                                    # STEP 6
val0 = ival2                                                             # STEP 7
ival6 = 11                                                               # STEP 8
setListSlice(list0,ival7,ival2,list0)                                    # STEP 9
result = list0.count(val0)                                              # STEP 10
list3 = sortedcontainers.SortedList()                                   # STEP 11
setListSlice(list0,ival6,ival1,list0)                                   # STEP 12
val3 = ival1                                                            # STEP 13
sval2 = 'x'                                                             # STEP 14
val8 = sval4                                                            # STEP 15
list0.insert(ival2,val8)                                                # STEP 16
list0.irange(minimum=val3,maximum=val3,inclusive=(False,True),reverse=True)  # STEP 17
ival9 = ival1 * ival2                                                   # STEP 18
list0.irange(minimum=val8,maximum=val8,inclusive=(False,False),reverse=True)  # STEP 19
ival7 = ival6 + ival7                                                   # STEP 20
list3.extend(list3)                                                     # STEP 21
list3.irange(minimum=val0,maximum=val8,inclusive=(False,False),reverse=True)  # STEP 22
list0 <= list3                                                          # STEP 23
setListSlice(list3,ival2,ival1,list3)                                   # STEP 24
val0 = ival2                                                            # STEP 25
list0.extend(list3)                                                     # STEP 26
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x12027cd40>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 702166, in act11953
    self.p_list[0].extend(self.p_list[3])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
592 BRANCHES COVERED
453 STATEMENTS COVERED

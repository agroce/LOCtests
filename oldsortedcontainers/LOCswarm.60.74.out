Random testing using config=Config(noExceptionMatch=False, generalize=False, localize=False, speed='FAST', probs='locsample.probs', LOCBaseline=0.2, noAlphaConvert=False, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, html=None, keepLast=False, stopWhenNoCoverage=None, generateLOC=None, computeFeatureStats=False, Pmutate=0.0, timeout=60, output='failure.10961.test', markov=None, noSwarmDependencies=False, startExploit=0.0, maxMustHitBranch=None, useHints=False, silentFail=False, highLowSwarm=None, maxMustHitStatement=None, progress=False, postCover=False, swarmLength=None, noCover=False, noEnumerateEnabled=False, full=True, swarmP=0.5, coverFile='coverage.out', markovP=1.0, swarmProbs=None, genDepth=None, exploitCeiling=0.1, logging=None, noCheck=False, throughput=False, uncaught=False, swarmSwitch=None, verbose=False, reducePool=False, exploit=None, fastQuickAnalysis=False, total=False, verboseExploit=False, swarm=True, sequenceP=1.0, biasLOC=None, timedProgress=30, relax=False, ddmin=False, stutter=None, readQuick=False, verboseActions=False, quickAnalysis=False, noReassign=False, sequenceSize=3, LOCProbs=False, sequencesFromTests=None, maxTests=-1, trackMaxCoverage=None, useQuickSequences=False, exploitBestHint=1, failedLogging=None, stopWhenStatements=None, greedyStutter=False, seed=None, stopWhenHitStatement=None, uniqueValuesAnalysis=False, normalize=False, startExploitStall=0, enumerateEnabled=False, internal=False, profile=False, multiple=True, stopWhenBranches=None, running=False, compareFails=False, Pcrossover=0.2, stopWhenHitBranch=None, depth=100, showActions=False)
TEST #15 STEP #11 (0:00:30.001173) Mon Nov 20 19:38:00 2017 [ 405 stmts 529 branches ] (no cov+ for 3 tests) 1411 TOTAL ACTIONS (47.0314943715/s)
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x12151da70>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 703347, in act11973
    self.p_list[4].extend(self.p_list[3])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
Original test has 92 steps

SAVING TEST AS failure.10961.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
ival9 = 13                                                               # STEP 0
ACTION: ival9 = 13 
ival9 = None : <type 'NoneType'>
=> ival9 = 13 : <type 'int'>
==================================================
ival6 = 6                                                                # STEP 1
ACTION: ival6 = 6 
ival6 = None : <type 'NoneType'>
=> ival6 = 6 : <type 'int'>
==================================================
sval7 = 'C'                                                              # STEP 2
ACTION: sval7 = 'C' 
sval7 = None : <type 'NoneType'>
=> sval7 = 'C' : <type 'str'>
==================================================
list4 = sortedcontainers.SortedList()                                    # STEP 3
ACTION: list4 = sortedcontainers.SortedList() 
list4 = None : <type 'NoneType'>
list_REF4 = None : <type 'NoneType'>
=> list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: list_REF4 = [] 
=> list_REF4 = [] : <type 'list'>
==================================================
set2 = sortedcontainers.SortedSet()                                      # STEP 4
ACTION: set2 = sortedcontainers.SortedSet() 
set2 = None : <type 'NoneType'>
set_REF2 = None : <type 'NoneType'>
=> set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF2 = set([]) 
=> set_REF2 = set([]) : <type 'set'>
==================================================
set4 = set2 | set2                                                       # STEP 5
ACTION: set4 = set2 | set2 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set4 = None : <type 'NoneType'>
set_REF2 = set([]) : <type 'set'>
set_REF4 = None : <type 'NoneType'>
=> set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF4 = set_REF2 | set_REF2 
=> set_REF4 = set([]) : <type 'set'>
==================================================
set1 = sortedcontainers.SortedSet()                                      # STEP 6
ACTION: set1 = sortedcontainers.SortedSet() 
set1 = None : <type 'NoneType'>
set_REF1 = None : <type 'NoneType'>
=> set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF1 = set([]) 
=> set_REF1 = set([]) : <type 'set'>
==================================================
list4.extend(list4)                                                      # STEP 7
ACTION: list4.extend(list4) 
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = [] : <type 'list'>
REFERENCE ACTION: sortListExtend(list_REF4,list_REF4) 
==================================================
list4.islice(start=ival9,stop=ival9,reverse=True)                        # STEP 8
ACTION: list4.islice(start=ival9,stop=ival9,reverse=True) 
ival9 = 13 : <type 'int'>
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = [] : <type 'list'>
REFERENCE ACTION: list_REF4.islice(start=ival9,stop=ival9,reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'islice'
==================================================
ival4 = ival9 + ival9                                                    # STEP 9
ACTION: ival4 = ival9 + ival9 
ival9 = 13 : <type 'int'>
ival4 = None : <type 'NoneType'>
=> ival4 = 26 : <type 'int'>
==================================================
list4.islice(start=ival4,stop=ival6,reverse=True)                       # STEP 10
ACTION: list4.islice(start=ival4,stop=ival6,reverse=True) 
ival4 = 26 : <type 'int'>
ival6 = 6 : <type 'int'>
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = [] : <type 'list'>
REFERENCE ACTION: list_REF4.islice(start=ival4,stop=ival6,reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'islice'
==================================================
val2 = sval7                                                            # STEP 11
ACTION: val2 = sval7 
sval7 = 'C' : <type 'str'>
val2 = None : <type 'NoneType'>
=> val2 = 'C' : <type 'str'>
==================================================
val7 = sval7                                                            # STEP 12
ACTION: val7 = sval7 
sval7 = 'C' : <type 'str'>
val7 = None : <type 'NoneType'>
=> val7 = 'C' : <type 'str'>
==================================================
set3 = set4 | set2                                                      # STEP 13
ACTION: set3 = set4 | set2 
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set3 = None : <type 'NoneType'>
set_REF4 = set([]) : <type 'set'>
set_REF2 = set([]) : <type 'set'>
set_REF3 = None : <type 'NoneType'>
=> set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF3 = set_REF4 | set_REF2 
=> set_REF3 = set([]) : <type 'set'>
==================================================
list4.irange(minimum=val2,maximum=val7,inclusive=(True,False),reverse=True)  # STEP 14
ACTION: list4.irange(minimum=val2,maximum=val7,inclusive=(True,False),reverse=True) 
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val2 = 'C' : <type 'str'>
val7 = 'C' : <type 'str'>
list_REF4 = [] : <type 'list'>
REFERENCE ACTION: list_REF4.irange(minimum=val2,maximum=val7,inclusive=(True,False),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
val1 = sval7                                                            # STEP 15
ACTION: val1 = sval7 
sval7 = 'C' : <type 'str'>
val1 = None : <type 'NoneType'>
=> val1 = 'C' : <type 'str'>
==================================================
sval2 = 'N'                                                             # STEP 16
ACTION: sval2 = 'N' 
sval2 = None : <type 'NoneType'>
=> sval2 = 'N' : <type 'str'>
==================================================
set3.add(val2)                                                          # STEP 17
ACTION: set3.add(val2) 
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
val2 = 'C' : <type 'str'>
set_REF3 = set([]) : <type 'set'>
=> set3 = SortedSet(['C'], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF3.add(val2) 
=> set_REF3 = set(['C']) : <type 'set'>
==================================================
ival7 = ival4 + ival9                                                   # STEP 18
ACTION: ival7 = ival4 + ival9 
ival4 = 26 : <type 'int'>
ival9 = 13 : <type 'int'>
ival7 = None : <type 'NoneType'>
=> ival7 = 39 : <type 'int'>
==================================================
reversed(set3)                                                          # STEP 19
ACTION: reversed(set3) 
set3 = SortedSet(['C'], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF3 = set(['C']) : <type 'set'>
REFERENCE ACTION: reversed(set_REF3) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.TypeError'> argument to reversed() must be a sequence
==================================================
ival9 = ival4 - ival4                                                   # STEP 20
ACTION: ival9 = ival4 - ival4 
ival4 = 26 : <type 'int'>
ival9 = 13 : <type 'int'>
=> ival9 = 0 : <type 'int'>
==================================================
list3 = sortedcontainers.SortedList()                                   # STEP 21
ACTION: list3 = sortedcontainers.SortedList() 
list3 = None : <type 'NoneType'>
list_REF3 = None : <type 'NoneType'>
=> list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: list_REF3 = [] 
=> list_REF3 = [] : <type 'list'>
==================================================
ival5 = ival9 + ival4                                                   # STEP 22
ACTION: ival5 = ival9 + ival4 
ival9 = 0 : <type 'int'>
ival4 = 26 : <type 'int'>
ival5 = None : <type 'NoneType'>
=> ival5 = 26 : <type 'int'>
==================================================
set0 = set1 | set4                                                      # STEP 23
ACTION: set0 = set1 | set4 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set0 = None : <type 'NoneType'>
set_REF1 = set([]) : <type 'set'>
set_REF4 = set([]) : <type 'set'>
set_REF0 = None : <type 'NoneType'>
=> set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF0 = set_REF1 | set_REF4 
=> set_REF0 = set([]) : <type 'set'>
==================================================
result = list4 != list4                                                 # STEP 24
ACTION: result = list4 != list4 
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = [] : <type 'list'>
REFERENCE ACTION: result_REF = list_REF4 != list_REF4 
==================================================
list3.irange(minimum=val7,maximum=val1,inclusive=(False,False),reverse=True)  # STEP 25
ACTION: list3.irange(minimum=val7,maximum=val1,inclusive=(False,False),reverse=True) 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val7 = 'C' : <type 'str'>
val1 = 'C' : <type 'str'>
list_REF3 = [] : <type 'list'>
REFERENCE ACTION: list_REF3.irange(minimum=val7,maximum=val1,inclusive=(False,False),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
list3.remove(val2)                                                      # STEP 26
ACTION: list3.remove(val2) 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val2 = 'C' : <type 'str'>
list_REF3 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> 'C' not in list
REFERENCE ACTION: list_REF3.remove(val2) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.ValueError'> list.remove(x): x not in list
==================================================
set3 = set3 - set3                                                      # STEP 27
ACTION: set3 = set3 - set3 
set3 = SortedSet(['C'], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF3 = set(['C']) : <type 'set'>
=> set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF3 = set_REF3 - set_REF3 
=> set_REF3 = set([]) : <type 'set'>
==================================================
set4 = set4 | set3                                                      # STEP 28
ACTION: set4 = set4 | set3 
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF4 = set([]) : <type 'set'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF4 = set_REF4 | set_REF3 
==================================================
del list4 [ival9]                                                       # STEP 29
ACTION: del list4 [ival9] 
ival9 = 0 : <type 'int'>
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: del list_REF4 [ival9] 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list assignment index out of range
==================================================
result = list3 != list3                                                 # STEP 30
ACTION: result = list3 != list3 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [] : <type 'list'>
REFERENCE ACTION: result_REF = list_REF3 != list_REF3 
==================================================
ival2 = ival4 - ival5                                                   # STEP 31
ACTION: ival2 = ival4 - ival5 
ival4 = 26 : <type 'int'>
ival5 = 26 : <type 'int'>
ival2 = None : <type 'NoneType'>
=> ival2 = 0 : <type 'int'>
==================================================
ival0 = ival5 * ival6                                                   # STEP 32
ACTION: ival0 = ival5 * ival6 
ival5 = 26 : <type 'int'>
ival6 = 6 : <type 'int'>
ival0 = None : <type 'NoneType'>
=> ival0 = 156 : <type 'int'>
==================================================
set1 = set0 | set3                                                      # STEP 33
ACTION: set1 = set0 | set3 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
set_REF3 = set([]) : <type 'set'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1 = set_REF0 | set_REF3 
==================================================
sval6 = 'K'                                                             # STEP 34
ACTION: sval6 = 'K' 
sval6 = None : <type 'NoneType'>
=> sval6 = 'K' : <type 'str'>
==================================================
del list3 [ival2]                                                       # STEP 35
ACTION: del list3 [ival2] 
ival2 = 0 : <type 'int'>
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: del list_REF3 [ival2] 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list assignment index out of range
==================================================
result = set0 != set3                                                   # STEP 36
ACTION: result = set0 != set3 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = set_REF0 != set_REF3 
==================================================
list4.append(val2)                                                      # STEP 37
ACTION: list4.append(val2) 
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val2 = 'C' : <type 'str'>
list_REF4 = [] : <type 'list'>
=> list4 = SortedList(['C'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: sortListAppend(list_REF4,val2) 
=> list_REF4 = ['C'] : <type 'list'>
==================================================
set3 = set2 ^ set2                                                      # STEP 38
ACTION: set3 = set2 ^ set2 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF2 = set([]) : <type 'set'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF3 = set_REF2 ^ set_REF2 
==================================================
ival3 = ival7 + ival9                                                   # STEP 39
ACTION: ival3 = ival7 + ival9 
ival7 = 39 : <type 'int'>
ival9 = 0 : <type 'int'>
ival3 = None : <type 'NoneType'>
=> ival3 = 39 : <type 'int'>
==================================================
ival4 = 15                                                              # STEP 40
ACTION: ival4 = 15 
ival4 = 26 : <type 'int'>
=> ival4 = 15 : <type 'int'>
==================================================
set2 = set2 | set4                                                      # STEP 41
ACTION: set2 = set2 | set4 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF2 = set([]) : <type 'set'>
set_REF4 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF2 = set_REF2 | set_REF4 
==================================================
set4 &= set0                                                            # STEP 42
ACTION: set4 &= set0 
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF4 = set([]) : <type 'set'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF4 &= set_REF0 
==================================================
set0 = set0 - set2                                                      # STEP 43
ACTION: set0 = set0 - set2 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF0 = set_REF0 - set_REF2 
==================================================
set2 = set3 | set0                                                      # STEP 44
ACTION: set2 = set3 | set0 
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF3 = set([]) : <type 'set'>
set_REF0 = set([]) : <type 'set'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF2 = set_REF3 | set_REF0 
==================================================
list4 > list3                                                           # STEP 45
ACTION: list4 > list3 
list4 = SortedList(['C'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = ['C'] : <type 'list'>
list_REF3 = [] : <type 'list'>
REFERENCE ACTION: list_REF4 > list_REF3 
==================================================
plist1 = list4 [ival3 : ival9]                                          # STEP 46
ACTION: plist1 = list4 [ival3 : ival9] 
ival3 = 39 : <type 'int'>
ival9 = 0 : <type 'int'>
list4 = SortedList(['C'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
plist1 = None : <type 'NoneType'>
list_REF4 = ['C'] : <type 'list'>
=> plist1 = [] : <type 'list'>
REFERENCE ACTION: plist1 = list_REF4 [ival3 : ival9] 
==================================================
set1.clear()                                                            # STEP 47
ACTION: set1.clear() 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1.clear() 
==================================================
set0 = sortedcontainers.SortedSet()                                     # STEP 48
ACTION: set0 = sortedcontainers.SortedSet() 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF0 = set([]) 
==================================================
ival6 = 12                                                              # STEP 49
ACTION: ival6 = 12 
ival6 = 6 : <type 'int'>
=> ival6 = 12 : <type 'int'>
==================================================
ival2 = ival7 - ival9                                                   # STEP 50
ACTION: ival2 = ival7 - ival9 
ival7 = 39 : <type 'int'>
ival9 = 0 : <type 'int'>
ival2 = 0 : <type 'int'>
=> ival2 = 39 : <type 'int'>
==================================================
list3 > list3                                                           # STEP 51
ACTION: list3 > list3 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [] : <type 'list'>
REFERENCE ACTION: list_REF3 > list_REF3 
==================================================
list4.islice(start=None,stop=ival4)                                     # STEP 52
ACTION: list4.islice(start=None,stop=ival4) 
ival4 = 15 : <type 'int'>
list4 = SortedList(['C'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = ['C'] : <type 'list'>
REFERENCE ACTION: list_REF4.islice(start=None,stop=ival4) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'islice'
==================================================
dict2 = sortedcontainers.SortedDict()                                   # STEP 53
ACTION: dict2 = sortedcontainers.SortedDict() 
dict2 = None : <type 'NoneType'>
dict_REF2 = None : <type 'NoneType'>
=> dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF2 = {} 
=> dict_REF2 = {} : <type 'dict'>
==================================================
set0.irange(minimum=val2,maximum=val2,inclusive=(False,True),reverse=True)  # STEP 54
ACTION: set0.irange(minimum=val2,maximum=val2,inclusive=(False,True),reverse=True) 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
val2 = 'C' : <type 'str'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF0.irange(minimum=val2,maximum=val2,inclusive=(False,True),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'irange'
==================================================
result = len(dict2)                                                     # STEP 55
ACTION: result = len(dict2) 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF2) 
==================================================
set2.irange(minimum=val7,maximum=val1,inclusive=(False,True),reverse=True)  # STEP 56
ACTION: set2.irange(minimum=val7,maximum=val1,inclusive=(False,True),reverse=True) 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
val7 = 'C' : <type 'str'>
val1 = 'C' : <type 'str'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF2.irange(minimum=val7,maximum=val1,inclusive=(False,True),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'irange'
==================================================
set2 = sortedcontainers.SortedSet()                                     # STEP 57
ACTION: set2 = sortedcontainers.SortedSet() 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF2 = set([]) 
==================================================
set1 = sortedcontainers.SortedSet()                                     # STEP 58
ACTION: set1 = sortedcontainers.SortedSet() 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1 = set([]) 
==================================================
set3 = sortedcontainers.SortedSet()                                     # STEP 59
ACTION: set3 = sortedcontainers.SortedSet() 
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF3 = set([]) 
==================================================
set0 = set4 ^ set4                                                      # STEP 60
ACTION: set0 = set4 ^ set4 
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF4 = set([]) : <type 'set'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF0 = set_REF4 ^ set_REF4 
==================================================
result = set3.isdisjoint(set2)                                          # STEP 61
ACTION: result = set3.isdisjoint(set2) 
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF3 = set([]) : <type 'set'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = set_REF3.isdisjoint(set_REF2) 
==================================================
result = dict2.peekitem()                                               # STEP 62
ACTION: result = dict2.peekitem() 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF2 = {} : <type 'dict'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: result_REF = sortDictPeekitem(dict_REF2,) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
==================================================
list3.irange(minimum=val7,maximum=val1,inclusive=(True,False),reverse=True)  # STEP 63
ACTION: list3.irange(minimum=val7,maximum=val1,inclusive=(True,False),reverse=True) 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val7 = 'C' : <type 'str'>
val1 = 'C' : <type 'str'>
list_REF3 = [] : <type 'list'>
REFERENCE ACTION: list_REF3.irange(minimum=val7,maximum=val1,inclusive=(True,False),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
dict2.get(val2,val2)                                                    # STEP 64
ACTION: dict2.get(val2,val2) 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val2 = 'C' : <type 'str'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF2.get(val2,val2) 
==================================================
ival3 = ival4 - ival2                                                   # STEP 65
ACTION: ival3 = ival4 - ival2 
ival4 = 15 : <type 'int'>
ival2 = 39 : <type 'int'>
ival3 = 39 : <type 'int'>
=> ival3 = -24 : <type 'int'>
==================================================
set2 = set0 - set1                                                      # STEP 66
ACTION: set2 = set0 - set1 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
set_REF1 = set([]) : <type 'set'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF2 = set_REF0 - set_REF1 
==================================================
result = dict2 != dict2                                                 # STEP 67
ACTION: result = dict2 != dict2 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = dict_REF2 != dict_REF2 
==================================================
list3.islice(start=None,stop=None)                                      # STEP 68
ACTION: list3.islice(start=None,stop=None) 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [] : <type 'list'>
REFERENCE ACTION: list_REF3.islice(start=None,stop=None) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'islice'
==================================================
set1 = sortedcontainers.SortedSet()                                     # STEP 69
ACTION: set1 = sortedcontainers.SortedSet() 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1 = set([]) 
==================================================
result = len(dict2)                                                     # STEP 70
ACTION: result = len(dict2) 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF2) 
==================================================
set0 = set0 ^ set4                                                      # STEP 71
ACTION: set0 = set0 ^ set4 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
set_REF4 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF0 = set_REF0 ^ set_REF4 
==================================================
result = len(dict2)                                                     # STEP 72
ACTION: result = len(dict2) 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF2) 
==================================================
dict2.islice(start=ival5,stop=ival3,reverse=True)                       # STEP 73
ACTION: dict2.islice(start=ival5,stop=ival3,reverse=True) 
ival5 = 26 : <type 'int'>
ival3 = -24 : <type 'int'>
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF2.islice(start=ival5,stop=ival3,reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'islice'
==================================================
val1 = sval6                                                            # STEP 74
ACTION: val1 = sval6 
sval6 = 'K' : <type 'str'>
val1 = 'C' : <type 'str'>
=> val1 = 'K' : <type 'str'>
==================================================
result = (dict2.keys()).count(val1)                                     # STEP 75
ACTION: result = (dict2.keys()).count(val1)  
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val1 = 'K' : <type 'str'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = (dict_REF2.keys()).count(val1)  
==================================================
set1.islice(start=None,stop=None)                                       # STEP 76
ACTION: set1.islice(start=None,stop=None) 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1.islice(start=None,stop=None) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'islice'
==================================================
dict4 = sortedcontainers.SortedDict()                                   # STEP 77
ACTION: dict4 = sortedcontainers.SortedDict() 
dict4 = None : <type 'NoneType'>
dict_REF4 = None : <type 'NoneType'>
=> dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF4 = {} 
=> dict_REF4 = {} : <type 'dict'>
==================================================
dict2.irange(minimum=val1,maximum=val2,inclusive=(False,False),reverse=True)  # STEP 78
ACTION: dict2.irange(minimum=val1,maximum=val2,inclusive=(False,False),reverse=True) 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val1 = 'K' : <type 'str'>
val2 = 'C' : <type 'str'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF2.irange(minimum=val1,maximum=val2,inclusive=(False,False),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'irange'
==================================================
dict1 = sortedcontainers.SortedDict()                                   # STEP 79
ACTION: dict1 = sortedcontainers.SortedDict() 
dict1 = None : <type 'NoneType'>
dict_REF1 = None : <type 'NoneType'>
=> dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF1 = {} 
=> dict_REF1 = {} : <type 'dict'>
==================================================
list4.islice(start=None,stop=ival3)                                     # STEP 80
ACTION: list4.islice(start=None,stop=ival3) 
ival3 = -24 : <type 'int'>
list4 = SortedList(['C'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = ['C'] : <type 'list'>
REFERENCE ACTION: list_REF4.islice(start=None,stop=ival3) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'islice'
==================================================
set3 = sortedcontainers.SortedSet()                                     # STEP 81
ACTION: set3 = sortedcontainers.SortedSet() 
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF3 = set([]) 
==================================================
del list3 [ival3]                                                       # STEP 82
ACTION: del list3 [ival3] 
ival3 = -24 : <type 'int'>
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: del list_REF3 [ival3] 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list assignment index out of range
==================================================
ival4 = ival7 + ival2                                                   # STEP 83
ACTION: ival4 = ival7 + ival2 
ival7 = 39 : <type 'int'>
ival2 = 39 : <type 'int'>
ival4 = 15 : <type 'int'>
=> ival4 = 78 : <type 'int'>
==================================================
ival1 = ival2 * ival3                                                   # STEP 84
ACTION: ival1 = ival2 * ival3 
ival2 = 39 : <type 'int'>
ival3 = -24 : <type 'int'>
ival1 = None : <type 'NoneType'>
=> ival1 = -936 : <type 'int'>
==================================================
dict2.get(val7,val7)                                                    # STEP 85
ACTION: dict2.get(val7,val7) 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val7 = 'C' : <type 'str'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF2.get(val7,val7) 
==================================================
dict3 = sortedcontainers.SortedDict()                                   # STEP 86
ACTION: dict3 = sortedcontainers.SortedDict() 
dict3 = None : <type 'NoneType'>
dict_REF3 = None : <type 'NoneType'>
=> dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF3 = {} 
=> dict_REF3 = {} : <type 'dict'>
==================================================
reversed(set0)                                                          # STEP 87
ACTION: reversed(set0) 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: reversed(set_REF0) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.TypeError'> argument to reversed() must be a sequence
==================================================
dict4.irange(minimum=val7,maximum=val7,inclusive=(False,False))         # STEP 88
ACTION: dict4.irange(minimum=val7,maximum=val7,inclusive=(False,False)) 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val7 = 'C' : <type 'str'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF4.irange(minimum=val7,maximum=val7,inclusive=(False,False)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'irange'
==================================================
result = (dict2.keys()).count(val2)                                     # STEP 89
ACTION: result = (dict2.keys()).count(val2)  
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val2 = 'C' : <type 'str'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = (dict_REF2.keys()).count(val2)  
==================================================
set0 = set3 - set4                                                      # STEP 90
ACTION: set0 = set3 - set4 
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF3 = set([]) : <type 'set'>
set_REF4 = set([]) : <type 'set'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF0 = set_REF3 - set_REF4 
==================================================
list4.extend(list3)                                                     # STEP 91
ACTION: list4.extend(list3) 
list4 = SortedList(['C'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = ['C'] : <type 'list'>
list_REF3 = [] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x1214d4ea8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 703347, in act11973
    self.p_list[4].extend(self.p_list[3])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 40
STOPPING TESTING DUE TO TIMEOUT
23.6525785188 PERCENT COVERED
60.2158269882 TOTAL RUNTIME
31 EXECUTED
3032 TOTAL TEST OPERATIONS
1.68341040611 TIME SPENT EXECUTING TEST OPERATIONS
55.070343256 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
1.56406641006 TIME SPENT CHECKING PROPERTIES
3.24747681618 TOTAL TIME SPENT RUNNING SUT
0.499198675156 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
ival9 = 13                                                               # STEP 0
ival6 = 6                                                                # STEP 1
sval7 = 'C'                                                              # STEP 2
list4 = sortedcontainers.SortedList()                                    # STEP 3
set2 = sortedcontainers.SortedSet()                                      # STEP 4
set4 = set2 | set2                                                       # STEP 5
set1 = sortedcontainers.SortedSet()                                      # STEP 6
list4.extend(list4)                                                      # STEP 7
list4.islice(start=ival9,stop=ival9,reverse=True)                        # STEP 8
ival4 = ival9 + ival9                                                    # STEP 9
list4.islice(start=ival4,stop=ival6,reverse=True)                       # STEP 10
val2 = sval7                                                            # STEP 11
val7 = sval7                                                            # STEP 12
set3 = set4 | set2                                                      # STEP 13
list4.irange(minimum=val2,maximum=val7,inclusive=(True,False),reverse=True)  # STEP 14
val1 = sval7                                                            # STEP 15
sval2 = 'N'                                                             # STEP 16
set3.add(val2)                                                          # STEP 17
ival7 = ival4 + ival9                                                   # STEP 18
reversed(set3)                                                          # STEP 19
ival9 = ival4 - ival4                                                   # STEP 20
list3 = sortedcontainers.SortedList()                                   # STEP 21
ival5 = ival9 + ival4                                                   # STEP 22
set0 = set1 | set4                                                      # STEP 23
result = list4 != list4                                                 # STEP 24
list3.irange(minimum=val7,maximum=val1,inclusive=(False,False),reverse=True)  # STEP 25
list3.remove(val2)                                                      # STEP 26
set3 = set3 - set3                                                      # STEP 27
set4 = set4 | set3                                                      # STEP 28
del list4 [ival9]                                                       # STEP 29
result = list3 != list3                                                 # STEP 30
ival2 = ival4 - ival5                                                   # STEP 31
ival0 = ival5 * ival6                                                   # STEP 32
set1 = set0 | set3                                                      # STEP 33
sval6 = 'K'                                                             # STEP 34
del list3 [ival2]                                                       # STEP 35
result = set0 != set3                                                   # STEP 36
list4.append(val2)                                                      # STEP 37
set3 = set2 ^ set2                                                      # STEP 38
ival3 = ival7 + ival9                                                   # STEP 39
ival4 = 15                                                              # STEP 40
set2 = set2 | set4                                                      # STEP 41
set4 &= set0                                                            # STEP 42
set0 = set0 - set2                                                      # STEP 43
set2 = set3 | set0                                                      # STEP 44
list4 > list3                                                           # STEP 45
plist1 = list4 [ival3 : ival9]                                          # STEP 46
set1.clear()                                                            # STEP 47
set0 = sortedcontainers.SortedSet()                                     # STEP 48
ival6 = 12                                                              # STEP 49
ival2 = ival7 - ival9                                                   # STEP 50
list3 > list3                                                           # STEP 51
list4.islice(start=None,stop=ival4)                                     # STEP 52
dict2 = sortedcontainers.SortedDict()                                   # STEP 53
set0.irange(minimum=val2,maximum=val2,inclusive=(False,True),reverse=True)  # STEP 54
result = len(dict2)                                                     # STEP 55
set2.irange(minimum=val7,maximum=val1,inclusive=(False,True),reverse=True)  # STEP 56
set2 = sortedcontainers.SortedSet()                                     # STEP 57
set1 = sortedcontainers.SortedSet()                                     # STEP 58
set3 = sortedcontainers.SortedSet()                                     # STEP 59
set0 = set4 ^ set4                                                      # STEP 60
result = set3.isdisjoint(set2)                                          # STEP 61
result = dict2.peekitem()                                               # STEP 62
list3.irange(minimum=val7,maximum=val1,inclusive=(True,False),reverse=True)  # STEP 63
dict2.get(val2,val2)                                                    # STEP 64
ival3 = ival4 - ival2                                                   # STEP 65
set2 = set0 - set1                                                      # STEP 66
result = dict2 != dict2                                                 # STEP 67
list3.islice(start=None,stop=None)                                      # STEP 68
set1 = sortedcontainers.SortedSet()                                     # STEP 69
result = len(dict2)                                                     # STEP 70
set0 = set0 ^ set4                                                      # STEP 71
result = len(dict2)                                                     # STEP 72
dict2.islice(start=ival5,stop=ival3,reverse=True)                       # STEP 73
val1 = sval6                                                            # STEP 74
result = (dict2.keys()).count(val1)                                     # STEP 75
set1.islice(start=None,stop=None)                                       # STEP 76
dict4 = sortedcontainers.SortedDict()                                   # STEP 77
dict2.irange(minimum=val1,maximum=val2,inclusive=(False,False),reverse=True)  # STEP 78
dict1 = sortedcontainers.SortedDict()                                   # STEP 79
list4.islice(start=None,stop=ival3)                                     # STEP 80
set3 = sortedcontainers.SortedSet()                                     # STEP 81
del list3 [ival3]                                                       # STEP 82
ival4 = ival7 + ival2                                                   # STEP 83
ival1 = ival2 * ival3                                                   # STEP 84
dict2.get(val7,val7)                                                    # STEP 85
dict3 = sortedcontainers.SortedDict()                                   # STEP 86
reversed(set0)                                                          # STEP 87
dict4.irange(minimum=val7,maximum=val7,inclusive=(False,False))         # STEP 88
result = (dict2.keys()).count(val2)                                     # STEP 89
set0 = set3 - set4                                                      # STEP 90
list4.extend(list3)                                                     # STEP 91
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x1214d4ea8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 703347, in act11973
    self.p_list[4].extend(self.p_list[3])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
591 BRANCHES COVERED
450 STATEMENTS COVERED

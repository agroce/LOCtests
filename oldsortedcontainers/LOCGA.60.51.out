Random testing using config=Config(noExceptionMatch=False, generalize=False, localize=False, speed='FAST', probs='locsample.probs', LOCBaseline=0.2, noAlphaConvert=False, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, html=None, keepLast=False, stopWhenNoCoverage=None, generateLOC=None, computeFeatureStats=False, Pmutate=0.8, timeout=60, output='failure.10536.test', markov=None, noSwarmDependencies=False, startExploit=0.0, maxMustHitBranch=None, useHints=False, silentFail=False, highLowSwarm=None, maxMustHitStatement=None, progress=False, postCover=False, swarmLength=None, noCover=False, noEnumerateEnabled=False, full=True, swarmP=0.5, coverFile='coverage.out', markovP=1.0, swarmProbs=None, genDepth=None, exploitCeiling=0.1, logging=None, noCheck=False, throughput=False, uncaught=False, swarmSwitch=None, verbose=False, reducePool=False, exploit=0.8, fastQuickAnalysis=False, total=False, verboseExploit=False, swarm=False, sequenceP=1.0, biasLOC=None, timedProgress=30, relax=False, ddmin=False, stutter=None, readQuick=False, verboseActions=False, quickAnalysis=False, noReassign=False, sequenceSize=3, LOCProbs=False, sequencesFromTests=None, maxTests=-1, trackMaxCoverage=None, useQuickSequences=False, exploitBestHint=1, failedLogging=None, stopWhenStatements=None, greedyStutter=False, seed=None, stopWhenHitStatement=None, uniqueValuesAnalysis=False, normalize=False, startExploitStall=0, enumerateEnabled=False, internal=False, profile=False, multiple=True, stopWhenBranches=None, running=False, compareFails=False, Pcrossover=0.2, stopWhenHitBranch=None, depth=100, showActions=False)
** STARTING EXPLOITATION OF TESTS AT TIME 0.663131952286 AFTER 0 TESTS WITH NO NEW COVERAGE **
TEST #12 STEP #17 (0:00:30.030318) Mon Nov 20 17:15:46 2017 [ 417 stmts 541 branches ] (no cov+ for 1 tests) 1117 TOTAL ACTIONS (37.1957432882/s)
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x11f3e5638>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 702458, in act11958
    self.p_list[1].extend(self.p_list[3])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
Original test has 55 steps

SAVING TEST AS failure.10536.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
ival6 = 13                                                               # STEP 0
ACTION: ival6 = 13 
ival6 = None : <type 'NoneType'>
=> ival6 = 13 : <type 'int'>
==================================================
ival0 = ival6 * ival6                                                    # STEP 1
ACTION: ival0 = ival6 * ival6 
ival6 = 13 : <type 'int'>
ival0 = None : <type 'NoneType'>
=> ival0 = 169 : <type 'int'>
==================================================
val5 = ival0                                                             # STEP 2
ACTION: val5 = ival0 
ival0 = 169 : <type 'int'>
val5 = None : <type 'NoneType'>
=> val5 = 169 : <type 'int'>
==================================================
dict4 = sortedcontainers.SortedDict()                                    # STEP 3
ACTION: dict4 = sortedcontainers.SortedDict() 
dict4 = None : <type 'NoneType'>
dict_REF4 = None : <type 'NoneType'>
=> dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF4 = {} 
=> dict_REF4 = {} : <type 'dict'>
==================================================
dict4.irange(minimum=val5,maximum=val5,inclusive=(False,True))           # STEP 4
ACTION: dict4.irange(minimum=val5,maximum=val5,inclusive=(False,True)) 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val5 = 169 : <type 'int'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF4.irange(minimum=val5,maximum=val5,inclusive=(False,True)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'irange'
==================================================
ival0 = ival6 - ival0                                                    # STEP 5
ACTION: ival0 = ival6 - ival0 
ival6 = 13 : <type 'int'>
ival0 = 169 : <type 'int'>
=> ival0 = -156 : <type 'int'>
==================================================
sval4 = 'K'                                                              # STEP 6
ACTION: sval4 = 'K' 
sval4 = None : <type 'NoneType'>
=> sval4 = 'K' : <type 'str'>
==================================================
dict4.irange(minimum=val5,maximum=val5,inclusive=(False,False),reverse=True)  # STEP 7
ACTION: dict4.irange(minimum=val5,maximum=val5,inclusive=(False,False),reverse=True) 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val5 = 169 : <type 'int'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF4.irange(minimum=val5,maximum=val5,inclusive=(False,False),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'irange'
==================================================
ival4 = 1                                                                # STEP 8
ACTION: ival4 = 1 
ival4 = None : <type 'NoneType'>
=> ival4 = 1 : <type 'int'>
==================================================
ival5 = ival0 * ival4                                                    # STEP 9
ACTION: ival5 = ival0 * ival4 
ival0 = -156 : <type 'int'>
ival4 = 1 : <type 'int'>
ival5 = None : <type 'NoneType'>
=> ival5 = -156 : <type 'int'>
==================================================
result = dict4.pop(val5,None)                                           # STEP 10
ACTION: result = dict4.pop(val5,None) 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val5 = 169 : <type 'int'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = dict_REF4.pop(val5,None) 
==================================================
sval6 = sval4 + sval4                                                   # STEP 11
ACTION: sval6 = sval4 + sval4 
sval4 = 'K' : <type 'str'>
sval6 = None : <type 'NoneType'>
=> sval6 = 'KK' : <type 'str'>
==================================================
val3 = sval6                                                            # STEP 12
ACTION: val3 = sval6 
sval6 = 'KK' : <type 'str'>
val3 = None : <type 'NoneType'>
=> val3 = 'KK' : <type 'str'>
==================================================
list1 = sortedcontainers.SortedList()                                   # STEP 13
ACTION: list1 = sortedcontainers.SortedList() 
list1 = None : <type 'NoneType'>
list_REF1 = None : <type 'NoneType'>
=> list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: list_REF1 = [] 
=> list_REF1 = [] : <type 'list'>
==================================================
setList(list1,ival0,val3)                                               # STEP 14
ACTION: setList(list1,ival0,val3) 
ival0 = -156 : <type 'int'>
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val3 = 'KK' : <type 'str'>
list_REF1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: sortListSet(list_REF1,ival0,val3) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list assignment index out of range
==================================================
val9 = ival5                                                            # STEP 15
ACTION: val9 = ival5 
ival5 = -156 : <type 'int'>
val9 = None : <type 'NoneType'>
=> val9 = -156 : <type 'int'>
==================================================
setListSlice(list1,ival6,ival4,list1)                                   # STEP 16
ACTION: setListSlice(list1,ival6,ival4,list1) 
ival6 = 13 : <type 'int'>
ival4 = 1 : <type 'int'>
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF1 = [] : <type 'list'>
REFERENCE ACTION: sortListSetSlice(list_REF1,ival6,ival4,list_REF1) 
==================================================
dict1 = dict4.fromkeys(list1,val5) ; result = dict1                     # STEP 17
ACTION: dict1 = dict4.fromkeys(list1,val5) ; result = dict1 
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict1 = None : <type 'NoneType'>
val5 = 169 : <type 'int'>
list_REF1 = [] : <type 'list'>
dict_REF4 = {} : <type 'dict'>
dict_REF1 = None : <type 'NoneType'>
=> dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF1 = dict_REF4.fromkeys(list_REF1,val5) ; result_REF = dict_REF1 
=> dict_REF1 = {} : <type 'dict'>
==================================================
reversed(dict1)                                                         # STEP 18
ACTION: reversed(dict1) 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: reversed(dict_REF1) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.TypeError'> argument to reversed() must be a sequence
==================================================
repr(list1)                                                             # STEP 19
ACTION: repr(list1) 
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF1 = [] : <type 'list'>
REFERENCE ACTION: repr(list_REF1) 
==================================================
result = dict1.setdefault(val9,val9)                                    # STEP 20
ACTION: result = dict1.setdefault(val9,val9) 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val9 = -156 : <type 'int'>
dict_REF1 = {} : <type 'dict'>
=> dict1 = SortedDict(None, 1000, {-156: -156}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: result_REF = dict_REF1.setdefault(val9,val9) 
=> dict_REF1 = {-156: -156} : <type 'dict'>
==================================================
result = dict1.peekitem()                                               # STEP 21
ACTION: result = dict1.peekitem() 
dict1 = SortedDict(None, 1000, {-156: -156}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {-156: -156} : <type 'dict'>
REFERENCE ACTION: result_REF = sortDictPeekitem(dict_REF1,) 
==================================================
dict4.irange(minimum=val5,maximum=val9,inclusive=(True,False),reverse=True)  # STEP 22
ACTION: dict4.irange(minimum=val5,maximum=val9,inclusive=(True,False),reverse=True) 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val5 = 169 : <type 'int'>
val9 = -156 : <type 'int'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF4.irange(minimum=val5,maximum=val9,inclusive=(True,False),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'irange'
==================================================
list1+=list1                                                            # STEP 23
ACTION: list1+=list1 
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF1 = [] : <type 'list'>
REFERENCE ACTION: sortListMultiAdd(list_REF1,list_REF1) 
==================================================
ival5 = ival5 + ival6                                                   # STEP 24
ACTION: ival5 = ival5 + ival6 
ival5 = -156 : <type 'int'>
ival6 = 13 : <type 'int'>
=> ival5 = -143 : <type 'int'>
==================================================
list1 >= list1                                                          # STEP 25
ACTION: list1 >= list1 
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF1 = [] : <type 'list'>
REFERENCE ACTION: list_REF1 >= list_REF1 
==================================================
list1.extend(list1)                                                     # STEP 26
ACTION: list1.extend(list1) 
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF1 = [] : <type 'list'>
REFERENCE ACTION: sortListExtend(list_REF1,list_REF1) 
==================================================
list1.islice(start=ival0,stop=ival6,reverse=True)                       # STEP 27
ACTION: list1.islice(start=ival0,stop=ival6,reverse=True) 
ival0 = -156 : <type 'int'>
ival6 = 13 : <type 'int'>
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF1 = [] : <type 'list'>
REFERENCE ACTION: list_REF1.islice(start=ival0,stop=ival6,reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'islice'
==================================================
result = list1.pop(ival5)                                               # STEP 28
ACTION: result = list1.pop(ival5) 
ival5 = -143 : <type 'int'>
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> pop index out of range
REFERENCE ACTION: result_REF = list_REF1.pop(ival5) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> pop from empty list
==================================================
result = len(dict4)                                                     # STEP 29
ACTION: result = len(dict4) 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF4) 
==================================================
plist4 = list1 [ival4 : ival4]                                          # STEP 30
ACTION: plist4 = list1 [ival4 : ival4] 
ival4 = 1 : <type 'int'>
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
plist4 = None : <type 'NoneType'>
list_REF1 = [] : <type 'list'>
=> plist4 = [] : <type 'list'>
REFERENCE ACTION: plist4 = list_REF1 [ival4 : ival4] 
==================================================
result = sorted(list(dict1.values()))                                   # STEP 31
ACTION: result = sorted(list(dict1.values())) 
dict1 = SortedDict(None, 1000, {-156: -156}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {-156: -156} : <type 'dict'>
REFERENCE ACTION: result_REF = sorted(list(dict_REF1.values())) 
==================================================
list1.add(val5)                                                         # STEP 32
ACTION: list1.add(val5) 
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val5 = 169 : <type 'int'>
list_REF1 = [] : <type 'list'>
=> list1 = SortedList([169], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: sortListAdd(list_REF1,val5) 
=> list_REF1 = [169] : <type 'list'>
==================================================
list3 = sortedcontainers.SortedList()                                   # STEP 33
ACTION: list3 = sortedcontainers.SortedList() 
list3 = None : <type 'NoneType'>
list_REF3 = None : <type 'NoneType'>
=> list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: list_REF3 = [] 
=> list_REF3 = [] : <type 'list'>
==================================================
list1 >= list1                                                          # STEP 34
ACTION: list1 >= list1 
list1 = SortedList([169], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF1 = [169] : <type 'list'>
REFERENCE ACTION: list_REF1 >= list_REF1 
==================================================
result = dict4 == dict4                                                 # STEP 35
ACTION: result = dict4 == dict4 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = dict_REF4 == dict_REF4 
==================================================
result = len(dict4.keys())                                              # STEP 36
ACTION: result = len(dict4.keys())  
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF4.keys())  
==================================================
plist3 = list3 [ival6 : ival0]                                          # STEP 37
ACTION: plist3 = list3 [ival6 : ival0] 
ival6 = 13 : <type 'int'>
ival0 = -156 : <type 'int'>
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
plist3 = None : <type 'NoneType'>
list_REF3 = [] : <type 'list'>
=> plist3 = [] : <type 'list'>
REFERENCE ACTION: plist3 = list_REF3 [ival6 : ival0] 
==================================================
ival7 = ival6 * ival5                                                   # STEP 38
ACTION: ival7 = ival6 * ival5 
ival6 = 13 : <type 'int'>
ival5 = -143 : <type 'int'>
ival7 = None : <type 'NoneType'>
=> ival7 = -1859 : <type 'int'>
==================================================
set3 = sortedcontainers.SortedSet()                                     # STEP 39
ACTION: set3 = sortedcontainers.SortedSet() 
set3 = None : <type 'NoneType'>
set_REF3 = None : <type 'NoneType'>
=> set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF3 = set([]) 
=> set_REF3 = set([]) : <type 'set'>
==================================================
list1+=list3                                                            # STEP 40
ACTION: list1+=list3 
list1 = SortedList([169], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF1 = [169] : <type 'list'>
list_REF3 = [] : <type 'list'>
REFERENCE ACTION: sortListMultiAdd(list_REF1,list_REF3) 
==================================================
set3.update(set3)                                                       # STEP 41
ACTION: set3.update(set3) 
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF3.update(set_REF3) 
==================================================
list1.irange(minimum=val3,maximum=val9,inclusive=(False,True),reverse=True)  # STEP 42
ACTION: list1.irange(minimum=val3,maximum=val9,inclusive=(False,True),reverse=True) 
list1 = SortedList([169], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val3 = 'KK' : <type 'str'>
val9 = -156 : <type 'int'>
list_REF1 = [169] : <type 'list'>
REFERENCE ACTION: list_REF1.irange(minimum=val3,maximum=val9,inclusive=(False,True),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
set2 = sortedcontainers.SortedSet()                                     # STEP 43
ACTION: set2 = sortedcontainers.SortedSet() 
set2 = None : <type 'NoneType'>
set_REF2 = None : <type 'NoneType'>
=> set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF2 = set([]) 
=> set_REF2 = set([]) : <type 'set'>
==================================================
list3 <= list1                                                          # STEP 44
ACTION: list3 <= list1 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list1 = SortedList([169], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [] : <type 'list'>
list_REF1 = [169] : <type 'list'>
REFERENCE ACTION: list_REF3 <= list_REF1 
==================================================
val3 in dict1                                                           # STEP 45
ACTION: val3 in dict1 
dict1 = SortedDict(None, 1000, {-156: -156}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val3 = 'KK' : <type 'str'>
dict_REF1 = {-156: -156} : <type 'dict'>
REFERENCE ACTION: val3 in dict_REF1 
==================================================
result = sorted(list(dict1.items()))                                    # STEP 46
ACTION: result = sorted(list(dict1.items())) 
dict1 = SortedDict(None, 1000, {-156: -156}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {-156: -156} : <type 'dict'>
REFERENCE ACTION: result_REF = sorted(list(dict_REF1.items())) 
==================================================
dict0 = dict4.fromkeys(set2,val5) ; result = dict0                      # STEP 47
ACTION: dict0 = dict4.fromkeys(set2,val5) ; result = dict0 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict0 = None : <type 'NoneType'>
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
val5 = 169 : <type 'int'>
dict_REF4 = {} : <type 'dict'>
dict_REF0 = None : <type 'NoneType'>
set_REF2 = set([]) : <type 'set'>
=> dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF0 = dict_REF4.fromkeys(set_REF2,val5) ; result_REF = dict_REF0 
=> dict_REF0 = {} : <type 'dict'>
==================================================
dict3 = dict1.fromkeys(set3,val9) ; result = dict3                      # STEP 48
ACTION: dict3 = dict1.fromkeys(set3,val9) ; result = dict3 
dict1 = SortedDict(None, 1000, {-156: -156}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict3 = None : <type 'NoneType'>
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
val9 = -156 : <type 'int'>
dict_REF1 = {-156: -156} : <type 'dict'>
dict_REF3 = None : <type 'NoneType'>
set_REF3 = set([]) : <type 'set'>
=> dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF3 = dict_REF1.fromkeys(set_REF3,val9) ; result_REF = dict_REF3 
=> dict_REF3 = {} : <type 'dict'>
==================================================
dict1.islice(start=ival5,stop=ival7)                                    # STEP 49
ACTION: dict1.islice(start=ival5,stop=ival7) 
ival5 = -143 : <type 'int'>
ival7 = -1859 : <type 'int'>
dict1 = SortedDict(None, 1000, {-156: -156}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {-156: -156} : <type 'dict'>
REFERENCE ACTION: dict_REF1.islice(start=ival5,stop=ival7) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'islice'
==================================================
dict1.irange(minimum=val3,maximum=val3,inclusive=(False,True))          # STEP 50
ACTION: dict1.irange(minimum=val3,maximum=val3,inclusive=(False,True)) 
dict1 = SortedDict(None, 1000, {-156: -156}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val3 = 'KK' : <type 'str'>
dict_REF1 = {-156: -156} : <type 'dict'>
REFERENCE ACTION: dict_REF1.irange(minimum=val3,maximum=val3,inclusive=(False,True)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'irange'
==================================================
result = dict4.popitem(last=False)                                      # STEP 51
ACTION: result = dict4.popitem(last=False) 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF4 = {} : <type 'dict'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.KeyError'> 'popitem(): dictionary is empty'
REFERENCE ACTION: result_REF = sortDictPopitem(dict_REF4,last=False) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.KeyError'> 
==================================================
dict4 [val9]                                                            # STEP 52
ACTION: dict4 [val9] 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val9 = -156 : <type 'int'>
dict_REF4 = {} : <type 'dict'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.KeyError'> -156
REFERENCE ACTION: dict_REF4 [val9] 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.KeyError'> -156
==================================================
result = list3.count(val3)                                              # STEP 53
ACTION: result = list3.count(val3) 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val3 = 'KK' : <type 'str'>
list_REF3 = [] : <type 'list'>
REFERENCE ACTION: result_REF = list_REF3.count(val3) 
==================================================
list1.extend(list3)                                                     # STEP 54
ACTION: list1.extend(list3) 
list1 = SortedList([169], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF1 = [169] : <type 'list'>
list_REF3 = [] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x11f51d758>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 702458, in act11958
    self.p_list[1].extend(self.p_list[3])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 30
STOPPING TESTING DUE TO TIMEOUT
24.6607212098 PERCENT COVERED
60.2312810421 TOTAL RUNTIME
24 EXECUTED
2285 TOTAL TEST OPERATIONS
1.43994021416 TIME SPENT EXECUTING TEST OPERATIONS
56.3467328548 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
1.33198595047 TIME SPENT CHECKING PROPERTIES
2.77192616463 TOTAL TIME SPENT RUNNING SUT
0.489933490753 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
ival6 = 13                                                               # STEP 0
ival0 = ival6 * ival6                                                    # STEP 1
val5 = ival0                                                             # STEP 2
dict4 = sortedcontainers.SortedDict()                                    # STEP 3
dict4.irange(minimum=val5,maximum=val5,inclusive=(False,True))           # STEP 4
ival0 = ival6 - ival0                                                    # STEP 5
sval4 = 'K'                                                              # STEP 6
dict4.irange(minimum=val5,maximum=val5,inclusive=(False,False),reverse=True)  # STEP 7
ival4 = 1                                                                # STEP 8
ival5 = ival0 * ival4                                                    # STEP 9
result = dict4.pop(val5,None)                                           # STEP 10
sval6 = sval4 + sval4                                                   # STEP 11
val3 = sval6                                                            # STEP 12
list1 = sortedcontainers.SortedList()                                   # STEP 13
setList(list1,ival0,val3)                                               # STEP 14
val9 = ival5                                                            # STEP 15
setListSlice(list1,ival6,ival4,list1)                                   # STEP 16
dict1 = dict4.fromkeys(list1,val5) ; result = dict1                     # STEP 17
reversed(dict1)                                                         # STEP 18
repr(list1)                                                             # STEP 19
result = dict1.setdefault(val9,val9)                                    # STEP 20
result = dict1.peekitem()                                               # STEP 21
dict4.irange(minimum=val5,maximum=val9,inclusive=(True,False),reverse=True)  # STEP 22
list1+=list1                                                            # STEP 23
ival5 = ival5 + ival6                                                   # STEP 24
list1 >= list1                                                          # STEP 25
list1.extend(list1)                                                     # STEP 26
list1.islice(start=ival0,stop=ival6,reverse=True)                       # STEP 27
result = list1.pop(ival5)                                               # STEP 28
result = len(dict4)                                                     # STEP 29
plist4 = list1 [ival4 : ival4]                                          # STEP 30
result = sorted(list(dict1.values()))                                   # STEP 31
list1.add(val5)                                                         # STEP 32
list3 = sortedcontainers.SortedList()                                   # STEP 33
list1 >= list1                                                          # STEP 34
result = dict4 == dict4                                                 # STEP 35
result = len(dict4.keys())                                              # STEP 36
plist3 = list3 [ival6 : ival0]                                          # STEP 37
ival7 = ival6 * ival5                                                   # STEP 38
set3 = sortedcontainers.SortedSet()                                     # STEP 39
list1+=list3                                                            # STEP 40
set3.update(set3)                                                       # STEP 41
list1.irange(minimum=val3,maximum=val9,inclusive=(False,True),reverse=True)  # STEP 42
set2 = sortedcontainers.SortedSet()                                     # STEP 43
list3 <= list1                                                          # STEP 44
val3 in dict1                                                           # STEP 45
result = sorted(list(dict1.items()))                                    # STEP 46
dict0 = dict4.fromkeys(set2,val5) ; result = dict0                      # STEP 47
dict3 = dict1.fromkeys(set3,val9) ; result = dict3                      # STEP 48
dict1.islice(start=ival5,stop=ival7)                                    # STEP 49
dict1.irange(minimum=val3,maximum=val3,inclusive=(False,True))          # STEP 50
result = dict4.popitem(last=False)                                      # STEP 51
dict4 [val9]                                                            # STEP 52
result = list3.count(val3)                                              # STEP 53
list1.extend(list3)                                                     # STEP 54
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x11f51d758>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 702458, in act11958
    self.p_list[1].extend(self.p_list[3])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
611 BRANCHES COVERED
465 STATEMENTS COVERED

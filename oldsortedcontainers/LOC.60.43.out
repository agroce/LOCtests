Random testing using config=Config(noExceptionMatch=False, generalize=False, localize=False, speed='FAST', probs='locsample.probs', LOCBaseline=0.2, noAlphaConvert=False, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, html=None, keepLast=False, stopWhenNoCoverage=None, generateLOC=None, computeFeatureStats=False, Pmutate=0.0, timeout=60, output='failure.10372.test', markov=None, noSwarmDependencies=False, startExploit=0.0, maxMustHitBranch=None, useHints=False, silentFail=False, highLowSwarm=None, maxMustHitStatement=None, progress=False, postCover=False, swarmLength=None, noCover=False, noEnumerateEnabled=False, full=True, swarmP=0.5, coverFile='coverage.out', markovP=1.0, swarmProbs=None, genDepth=None, exploitCeiling=0.1, logging=None, noCheck=False, throughput=False, uncaught=False, swarmSwitch=None, verbose=False, reducePool=False, exploit=None, fastQuickAnalysis=False, total=False, verboseExploit=False, swarm=False, sequenceP=1.0, biasLOC=None, timedProgress=30, relax=False, ddmin=False, stutter=None, readQuick=False, verboseActions=False, quickAnalysis=False, noReassign=False, sequenceSize=3, LOCProbs=False, sequencesFromTests=None, maxTests=-1, trackMaxCoverage=None, useQuickSequences=False, exploitBestHint=1, failedLogging=None, stopWhenStatements=None, greedyStutter=False, seed=None, stopWhenHitStatement=None, uniqueValuesAnalysis=False, normalize=False, startExploitStall=0, enumerateEnabled=False, internal=False, profile=False, multiple=True, stopWhenBranches=None, running=False, compareFails=False, Pcrossover=0.2, stopWhenHitBranch=None, depth=100, showActions=False)
TEST #11 STEP #37 (0:00:30.038928) Mon Nov 20 16:22:33 2017 [ 383 stmts 500 branches ] 1037 TOTAL ACTIONS (34.5218710501/s)
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x120476c20>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 703286, in act11972
    self.p_list[4].extend(self.p_list[2])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
Original test has 96 steps

SAVING TEST AS failure.10372.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
sval4 = 'c'                                                              # STEP 0
ACTION: sval4 = 'c' 
sval4 = None : <type 'NoneType'>
=> sval4 = 'c' : <type 'str'>
==================================================
dict2 = sortedcontainers.SortedDict()                                    # STEP 1
ACTION: dict2 = sortedcontainers.SortedDict() 
dict2 = None : <type 'NoneType'>
dict_REF2 = None : <type 'NoneType'>
=> dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF2 = {} 
=> dict_REF2 = {} : <type 'dict'>
==================================================
result = dict2 == dict2                                                  # STEP 2
ACTION: result = dict2 == dict2 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = dict_REF2 == dict_REF2 
==================================================
list4 = sortedcontainers.SortedList()                                    # STEP 3
ACTION: list4 = sortedcontainers.SortedList() 
list4 = None : <type 'NoneType'>
list_REF4 = None : <type 'NoneType'>
=> list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: list_REF4 = [] 
=> list_REF4 = [] : <type 'list'>
==================================================
result = dict2 == dict2                                                  # STEP 4
ACTION: result = dict2 == dict2 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = dict_REF2 == dict_REF2 
==================================================
list4.extend(list4)                                                      # STEP 5
ACTION: list4.extend(list4) 
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = [] : <type 'list'>
REFERENCE ACTION: sortListExtend(list_REF4,list_REF4) 
==================================================
dict2.islice(start=None,stop=None)                                       # STEP 6
ACTION: dict2.islice(start=None,stop=None) 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF2.islice(start=None,stop=None) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'islice'
==================================================
sval3 = 'a'                                                              # STEP 7
ACTION: sval3 = 'a' 
sval3 = None : <type 'NoneType'>
=> sval3 = 'a' : <type 'str'>
==================================================
sval9 = 'a'                                                              # STEP 8
ACTION: sval9 = 'a' 
sval9 = None : <type 'NoneType'>
=> sval9 = 'a' : <type 'str'>
==================================================
list4 <= list4                                                           # STEP 9
ACTION: list4 <= list4 
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = [] : <type 'list'>
REFERENCE ACTION: list_REF4 <= list_REF4 
==================================================
list4 >= list4                                                          # STEP 10
ACTION: list4 >= list4 
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = [] : <type 'list'>
REFERENCE ACTION: list_REF4 >= list_REF4 
==================================================
result = sorted(list(dict2.keys()))                                     # STEP 11
ACTION: result = sorted(list(dict2.keys())) 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = sorted(list(dict_REF2.keys())) 
==================================================
list4 < list4                                                           # STEP 12
ACTION: list4 < list4 
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = [] : <type 'list'>
REFERENCE ACTION: list_REF4 < list_REF4 
==================================================
sval8 = 'C'                                                             # STEP 13
ACTION: sval8 = 'C' 
sval8 = None : <type 'NoneType'>
=> sval8 = 'C' : <type 'str'>
==================================================
list4 <= list4                                                          # STEP 14
ACTION: list4 <= list4 
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = [] : <type 'list'>
REFERENCE ACTION: list_REF4 <= list_REF4 
==================================================
list4.extend(list4)                                                     # STEP 15
ACTION: list4.extend(list4) 
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = [] : <type 'list'>
REFERENCE ACTION: sortListExtend(list_REF4,list_REF4) 
==================================================
val5 = sval8                                                            # STEP 16
ACTION: val5 = sval8 
sval8 = 'C' : <type 'str'>
val5 = None : <type 'NoneType'>
=> val5 = 'C' : <type 'str'>
==================================================
dict2.get(val5,None)                                                    # STEP 17
ACTION: dict2.get(val5,None) 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val5 = 'C' : <type 'str'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF2.get(val5,None) 
==================================================
result = sorted(list(dict2.keys()))                                     # STEP 18
ACTION: result = sorted(list(dict2.keys())) 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = sorted(list(dict_REF2.keys())) 
==================================================
list2 = sortedcontainers.SortedList()                                   # STEP 19
ACTION: list2 = sortedcontainers.SortedList() 
list2 = None : <type 'NoneType'>
list_REF2 = None : <type 'NoneType'>
=> list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: list_REF2 = [] 
=> list_REF2 = [] : <type 'list'>
==================================================
list2.irange(minimum=val5,maximum=val5,inclusive=(False,False),reverse=True)  # STEP 20
ACTION: list2.irange(minimum=val5,maximum=val5,inclusive=(False,False),reverse=True) 
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val5 = 'C' : <type 'str'>
list_REF2 = [] : <type 'list'>
REFERENCE ACTION: list_REF2.irange(minimum=val5,maximum=val5,inclusive=(False,False),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
result = sorted(list(dict2.keys()))                                     # STEP 21
ACTION: result = sorted(list(dict2.keys())) 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = sorted(list(dict_REF2.keys())) 
==================================================
result = (dict2.items()).count(val5)                                    # STEP 22
ACTION: result = (dict2.items()).count(val5)  
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val5 = 'C' : <type 'str'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = (dict_REF2.items()).count(val5)  
==================================================
list0 = sortedcontainers.SortedList()                                   # STEP 23
ACTION: list0 = sortedcontainers.SortedList() 
list0 = None : <type 'NoneType'>
list_REF0 = None : <type 'NoneType'>
=> list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: list_REF0 = [] 
=> list_REF0 = [] : <type 'list'>
==================================================
sval5 = 'm'                                                             # STEP 24
ACTION: sval5 = 'm' 
sval5 = None : <type 'NoneType'>
=> sval5 = 'm' : <type 'str'>
==================================================
dict2.irange(minimum=val5,maximum=val5,inclusive=(True,False),reverse=True)  # STEP 25
ACTION: dict2.irange(minimum=val5,maximum=val5,inclusive=(True,False),reverse=True) 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val5 = 'C' : <type 'str'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF2.irange(minimum=val5,maximum=val5,inclusive=(True,False),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'irange'
==================================================
list2.irange(minimum=val5,maximum=val5,inclusive=(True,False),reverse=True)  # STEP 26
ACTION: list2.irange(minimum=val5,maximum=val5,inclusive=(True,False),reverse=True) 
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val5 = 'C' : <type 'str'>
list_REF2 = [] : <type 'list'>
REFERENCE ACTION: list_REF2.irange(minimum=val5,maximum=val5,inclusive=(True,False),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
ival3 = 6                                                               # STEP 27
ACTION: ival3 = 6 
ival3 = None : <type 'NoneType'>
=> ival3 = 6 : <type 'int'>
==================================================
dict2.get(val5,None)                                                    # STEP 28
ACTION: dict2.get(val5,None) 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val5 = 'C' : <type 'str'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF2.get(val5,None) 
==================================================
dict2.irange(minimum=val5,maximum=val5,inclusive=(True,False),reverse=True)  # STEP 29
ACTION: dict2.irange(minimum=val5,maximum=val5,inclusive=(True,False),reverse=True) 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val5 = 'C' : <type 'str'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF2.irange(minimum=val5,maximum=val5,inclusive=(True,False),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'irange'
==================================================
list0.irange(minimum=val5,maximum=val5,inclusive=(False,False))         # STEP 30
ACTION: list0.irange(minimum=val5,maximum=val5,inclusive=(False,False)) 
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val5 = 'C' : <type 'str'>
list_REF0 = [] : <type 'list'>
REFERENCE ACTION: list_REF0.irange(minimum=val5,maximum=val5,inclusive=(False,False)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
dict2 [val5]                                                            # STEP 31
ACTION: dict2 [val5] 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val5 = 'C' : <type 'str'>
dict_REF2 = {} : <type 'dict'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.KeyError'> 'C'
REFERENCE ACTION: dict_REF2 [val5] 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.KeyError'> 'C'
==================================================
list4.discard(val5)                                                     # STEP 32
ACTION: list4.discard(val5) 
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val5 = 'C' : <type 'str'>
list_REF4 = [] : <type 'list'>
REFERENCE ACTION: sortListDiscard(list_REF4,val5) 
==================================================
list2+=list4                                                            # STEP 33
ACTION: list2+=list4 
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF2 = [] : <type 'list'>
list_REF4 = [] : <type 'list'>
REFERENCE ACTION: sortListMultiAdd(list_REF2,list_REF4) 
==================================================
sval0 = sval5 + sval8                                                   # STEP 34
ACTION: sval0 = sval5 + sval8 
sval5 = 'm' : <type 'str'>
sval8 = 'C' : <type 'str'>
sval0 = None : <type 'NoneType'>
=> sval0 = 'mC' : <type 'str'>
==================================================
set3 = sortedcontainers.SortedSet()                                     # STEP 35
ACTION: set3 = sortedcontainers.SortedSet() 
set3 = None : <type 'NoneType'>
set_REF3 = None : <type 'NoneType'>
=> set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF3 = set([]) 
=> set_REF3 = set([]) : <type 'set'>
==================================================
dict4 = dict2.fromkeys(set3,val5) ; result = dict4                      # STEP 36
ACTION: dict4 = dict2.fromkeys(set3,val5) ; result = dict4 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict4 = None : <type 'NoneType'>
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
val5 = 'C' : <type 'str'>
dict_REF2 = {} : <type 'dict'>
dict_REF4 = None : <type 'NoneType'>
set_REF3 = set([]) : <type 'set'>
=> dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF4 = dict_REF2.fromkeys(set_REF3,val5) ; result_REF = dict_REF4 
=> dict_REF4 = {} : <type 'dict'>
==================================================
val1 = ival3                                                            # STEP 37
ACTION: val1 = ival3 
ival3 = 6 : <type 'int'>
val1 = None : <type 'NoneType'>
=> val1 = 6 : <type 'int'>
==================================================
set3.irange(minimum=val1,maximum=val5,inclusive=(True,False),reverse=True)  # STEP 38
ACTION: set3.irange(minimum=val1,maximum=val5,inclusive=(True,False),reverse=True) 
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
val1 = 6 : <type 'int'>
val5 = 'C' : <type 'str'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF3.irange(minimum=val1,maximum=val5,inclusive=(True,False),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'irange'
==================================================
ival2 = ival3 * ival3                                                   # STEP 39
ACTION: ival2 = ival3 * ival3 
ival3 = 6 : <type 'int'>
ival2 = None : <type 'NoneType'>
=> ival2 = 36 : <type 'int'>
==================================================
set3.irange(minimum=val1,maximum=val1,inclusive=(False,False),reverse=True)  # STEP 40
ACTION: set3.irange(minimum=val1,maximum=val1,inclusive=(False,False),reverse=True) 
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
val1 = 6 : <type 'int'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF3.irange(minimum=val1,maximum=val1,inclusive=(False,False),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'irange'
==================================================
set2 = set3 ^ set3                                                      # STEP 41
ACTION: set2 = set3 ^ set3 
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set2 = None : <type 'NoneType'>
set_REF3 = set([]) : <type 'set'>
set_REF2 = None : <type 'NoneType'>
=> set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF2 = set_REF3 ^ set_REF3 
=> set_REF2 = set([]) : <type 'set'>
==================================================
set2 &= set2                                                            # STEP 42
ACTION: set2 &= set2 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF2 &= set_REF2 
==================================================
list0.islice(start=None,stop=ival2)                                     # STEP 43
ACTION: list0.islice(start=None,stop=ival2) 
ival2 = 36 : <type 'int'>
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF0 = [] : <type 'list'>
REFERENCE ACTION: list_REF0.islice(start=None,stop=ival2) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'islice'
==================================================
sval7 = sval5 + sval5                                                   # STEP 44
ACTION: sval7 = sval5 + sval5 
sval5 = 'm' : <type 'str'>
sval7 = None : <type 'NoneType'>
=> sval7 = 'mm' : <type 'str'>
==================================================
sval6 = sval0 + sval7                                                   # STEP 45
ACTION: sval6 = sval0 + sval7 
sval0 = 'mC' : <type 'str'>
sval7 = 'mm' : <type 'str'>
sval6 = None : <type 'NoneType'>
=> sval6 = 'mCmm' : <type 'str'>
==================================================
dict3 = sortedcontainers.SortedDict()                                   # STEP 46
ACTION: dict3 = sortedcontainers.SortedDict() 
dict3 = None : <type 'NoneType'>
dict_REF3 = None : <type 'NoneType'>
=> dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF3 = {} 
=> dict_REF3 = {} : <type 'dict'>
==================================================
result = (dict4.keys()).count(val1)                                     # STEP 47
ACTION: result = (dict4.keys()).count(val1)  
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val1 = 6 : <type 'int'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = (dict_REF4.keys()).count(val1)  
==================================================
list4.insert(ival2,val1)                                                # STEP 48
ACTION: list4.insert(ival2,val1) 
ival2 = 36 : <type 'int'>
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val1 = 6 : <type 'int'>
list_REF4 = [] : <type 'list'>
=> list4 = SortedList([6], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: sortListInsert(list_REF4,ival2,val1) 
=> list_REF4 = [6] : <type 'list'>
==================================================
dict4 = dict2.copy()                                                    # STEP 49
ACTION: dict4 = dict2.copy() 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF2 = {} : <type 'dict'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF4 = dict_REF2.copy() 
==================================================
result = dict2.pop(val1)                                                # STEP 50
ACTION: result = dict2.pop(val1) 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val1 = 6 : <type 'int'>
dict_REF2 = {} : <type 'dict'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.KeyError'> 6
REFERENCE ACTION: result_REF = dict_REF2.pop(val1) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.KeyError'> 6
==================================================
dict1 = dict3.copy()                                                    # STEP 51
ACTION: dict1 = dict3.copy() 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict1 = None : <type 'NoneType'>
dict_REF3 = {} : <type 'dict'>
dict_REF1 = None : <type 'NoneType'>
=> dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF1 = dict_REF3.copy() 
=> dict_REF1 = {} : <type 'dict'>
==================================================
set3.irange(minimum=val5,maximum=val1,inclusive=(False,True),reverse=True)  # STEP 52
ACTION: set3.irange(minimum=val5,maximum=val1,inclusive=(False,True),reverse=True) 
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
val5 = 'C' : <type 'str'>
val1 = 6 : <type 'int'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF3.irange(minimum=val5,maximum=val1,inclusive=(False,True),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'irange'
==================================================
result = len(dict3)                                                     # STEP 53
ACTION: result = len(dict3) 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF3) 
==================================================
dict0 = dict3.fromkeys(list2,val1) ; result = dict0                     # STEP 54
ACTION: dict0 = dict3.fromkeys(list2,val1) ; result = dict0 
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict0 = None : <type 'NoneType'>
val1 = 6 : <type 'int'>
list_REF2 = [] : <type 'list'>
dict_REF3 = {} : <type 'dict'>
dict_REF0 = None : <type 'NoneType'>
=> dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF0 = dict_REF3.fromkeys(list_REF2,val1) ; result_REF = dict_REF0 
=> dict_REF0 = {} : <type 'dict'>
==================================================
result = (dict2.keys()).count(val1)                                     # STEP 55
ACTION: result = (dict2.keys()).count(val1)  
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val1 = 6 : <type 'int'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = (dict_REF2.keys()).count(val1)  
==================================================
setList(list4,ival2,val1)                                               # STEP 56
ACTION: setList(list4,ival2,val1) 
ival2 = 36 : <type 'int'>
list4 = SortedList([6], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val1 = 6 : <type 'int'>
list_REF4 = [6] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: sortListSet(list_REF4,ival2,val1) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list assignment index out of range
==================================================
ival5 = ival2 + ival3                                                   # STEP 57
ACTION: ival5 = ival2 + ival3 
ival2 = 36 : <type 'int'>
ival3 = 6 : <type 'int'>
ival5 = None : <type 'NoneType'>
=> ival5 = 42 : <type 'int'>
==================================================
ival3 = ival2 - ival2                                                   # STEP 58
ACTION: ival3 = ival2 - ival2 
ival2 = 36 : <type 'int'>
ival3 = 6 : <type 'int'>
=> ival3 = 0 : <type 'int'>
==================================================
setList(list4,ival2,val1)                                               # STEP 59
ACTION: setList(list4,ival2,val1) 
ival2 = 36 : <type 'int'>
list4 = SortedList([6], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val1 = 6 : <type 'int'>
list_REF4 = [6] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: sortListSet(list_REF4,ival2,val1) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list assignment index out of range
==================================================
setListSlice(list4,ival3,ival3,list0)                                   # STEP 60
ACTION: setListSlice(list4,ival3,ival3,list0) 
ival3 = 0 : <type 'int'>
list4 = SortedList([6], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = [6] : <type 'list'>
list_REF0 = [] : <type 'list'>
REFERENCE ACTION: sortListSetSlice(list_REF4,ival3,ival3,list_REF0) 
==================================================
set2 = set2 - set2                                                      # STEP 61
ACTION: set2 = set2 - set2 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF2 = set_REF2 - set_REF2 
==================================================
result = dict3.peekitem()                                               # STEP 62
ACTION: result = dict3.peekitem() 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: result_REF = sortDictPeekitem(dict_REF3,) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
==================================================
result = sorted(list(dict2.keys()))                                     # STEP 63
ACTION: result = sorted(list(dict2.keys())) 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = sorted(list(dict_REF2.keys())) 
==================================================
dict4.get(val5,val1)                                                    # STEP 64
ACTION: dict4.get(val5,val1) 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val5 = 'C' : <type 'str'>
val1 = 6 : <type 'int'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF4.get(val5,val1) 
==================================================
result = dict2.pop(val1,None)                                           # STEP 65
ACTION: result = dict2.pop(val1,None) 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val1 = 6 : <type 'int'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = dict_REF2.pop(val1,None) 
==================================================
result = dict1.popitem(last=False)                                      # STEP 66
ACTION: result = dict1.popitem(last=False) 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {} : <type 'dict'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.KeyError'> 'popitem(): dictionary is empty'
REFERENCE ACTION: result_REF = sortDictPopitem(dict_REF1,last=False) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.KeyError'> 
==================================================
result = list4.index(val5)                                              # STEP 67
ACTION: result = list4.index(val5) 
list4 = SortedList([6], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val5 = 'C' : <type 'str'>
list_REF4 = [6] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> 'C' is not in list
REFERENCE ACTION: result_REF = list_REF4.index(val5) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.ValueError'> 'C' is not in list
==================================================
result = (dict1.keys()).count(val5)                                     # STEP 68
ACTION: result = (dict1.keys()).count(val5)  
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val5 = 'C' : <type 'str'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = (dict_REF1.keys()).count(val5)  
==================================================
set3.irange(minimum=val5,maximum=val5,inclusive=(True,False))           # STEP 69
ACTION: set3.irange(minimum=val5,maximum=val5,inclusive=(True,False)) 
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
val5 = 'C' : <type 'str'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF3.irange(minimum=val5,maximum=val5,inclusive=(True,False)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'irange'
==================================================
val2 = sval0                                                            # STEP 70
ACTION: val2 = sval0 
sval0 = 'mC' : <type 'str'>
val2 = None : <type 'NoneType'>
=> val2 = 'mC' : <type 'str'>
==================================================
set0 = set2.union(set2)                                                 # STEP 71
ACTION: set0 = set2.union(set2) 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set0 = None : <type 'NoneType'>
set_REF2 = set([]) : <type 'set'>
set_REF0 = None : <type 'NoneType'>
=> set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF0 = set_REF2.union(set_REF2) 
=> set_REF0 = set([]) : <type 'set'>
==================================================
setList(list4,ival3,val1)                                               # STEP 72
ACTION: setList(list4,ival3,val1) 
ival3 = 0 : <type 'int'>
list4 = SortedList([6], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val1 = 6 : <type 'int'>
list_REF4 = [6] : <type 'list'>
REFERENCE ACTION: sortListSet(list_REF4,ival3,val1) 
==================================================
dict4.get(val5,val5)                                                    # STEP 73
ACTION: dict4.get(val5,val5) 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val5 = 'C' : <type 'str'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF4.get(val5,val5) 
==================================================
result = sorted(list(dict3.keys()))                                     # STEP 74
ACTION: result = sorted(list(dict3.keys())) 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = sorted(list(dict_REF3.keys())) 
==================================================
result = sorted(list(dict4.keys()))                                     # STEP 75
ACTION: result = sorted(list(dict4.keys())) 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = sorted(list(dict_REF4.keys())) 
==================================================
dict2 = dict0.copy()                                                    # STEP 76
ACTION: dict2 = dict0.copy() 
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF0 = {} : <type 'dict'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF2 = dict_REF0.copy() 
==================================================
val3 = sval9                                                            # STEP 77
ACTION: val3 = sval9 
sval9 = 'a' : <type 'str'>
val3 = None : <type 'NoneType'>
=> val3 = 'a' : <type 'str'>
==================================================
dict1 = sortedcontainers.SortedDict()                                   # STEP 78
ACTION: dict1 = sortedcontainers.SortedDict() 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF1 = {} 
==================================================
sval2 = sval7 + sval5                                                   # STEP 79
ACTION: sval2 = sval7 + sval5 
sval7 = 'mm' : <type 'str'>
sval5 = 'm' : <type 'str'>
sval2 = None : <type 'NoneType'>
=> sval2 = 'mmm' : <type 'str'>
==================================================
set3.update(set3)                                                       # STEP 80
ACTION: set3.update(set3) 
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF3.update(set_REF3) 
==================================================
dict0.get(val3,val2)                                                    # STEP 81
ACTION: dict0.get(val3,val2) 
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val3 = 'a' : <type 'str'>
val2 = 'mC' : <type 'str'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF0.get(val3,val2) 
==================================================
result = len(dict4)                                                     # STEP 82
ACTION: result = len(dict4) 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF4) 
==================================================
list0.islice(start=ival2,stop=ival5)                                    # STEP 83
ACTION: list0.islice(start=ival2,stop=ival5) 
ival2 = 36 : <type 'int'>
ival5 = 42 : <type 'int'>
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF0 = [] : <type 'list'>
REFERENCE ACTION: list_REF0.islice(start=ival2,stop=ival5) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'islice'
==================================================
set0 -= set2                                                            # STEP 84
ACTION: set0 -= set2 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF0 -= set_REF2 
==================================================
dict4 = dict1.fromkeys(list4,val3) ; result = dict4                     # STEP 85
ACTION: dict4 = dict1.fromkeys(list4,val3) ; result = dict4 
list4 = SortedList([6], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val3 = 'a' : <type 'str'>
list_REF4 = [6] : <type 'list'>
dict_REF1 = {} : <type 'dict'>
dict_REF4 = {} : <type 'dict'>
=> dict4 = SortedDict(None, 1000, {6: 'a'}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF4 = dict_REF1.fromkeys(list_REF4,val3) ; result_REF = dict_REF4 
=> dict_REF4 = {6: 'a'} : <type 'dict'>
==================================================
repr(list4)                                                             # STEP 86
ACTION: repr(list4) 
list4 = SortedList([6], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = [6] : <type 'list'>
REFERENCE ACTION: repr(list_REF4) 
==================================================
set1 = set2.union(set3)                                                 # STEP 87
ACTION: set1 = set2.union(set3) 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set1 = None : <type 'NoneType'>
set_REF2 = set([]) : <type 'set'>
set_REF3 = set([]) : <type 'set'>
set_REF1 = None : <type 'NoneType'>
=> set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF1 = set_REF2.union(set_REF3) 
=> set_REF1 = set([]) : <type 'set'>
==================================================
val3 in dict4                                                           # STEP 88
ACTION: val3 in dict4 
dict4 = SortedDict(None, 1000, {6: 'a'}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val3 = 'a' : <type 'str'>
dict_REF4 = {6: 'a'} : <type 'dict'>
REFERENCE ACTION: val3 in dict_REF4 
==================================================
result = dict0.peekitem(ival5)                                          # STEP 89
ACTION: result = dict0.peekitem(ival5) 
ival5 = 42 : <type 'int'>
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF0 = {} : <type 'dict'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: result_REF = sortDictPeekitem(dict_REF0,ival5) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
==================================================
val1 in dict2                                                           # STEP 90
ACTION: val1 in dict2 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val1 = 6 : <type 'int'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: val1 in dict_REF2 
==================================================
set0 = set2 - set3                                                      # STEP 91
ACTION: set0 = set2 - set3 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF2 = set([]) : <type 'set'>
set_REF3 = set([]) : <type 'set'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF0 = set_REF2 - set_REF3 
==================================================
val5 = sval4                                                            # STEP 92
ACTION: val5 = sval4 
sval4 = 'c' : <type 'str'>
val5 = 'C' : <type 'str'>
=> val5 = 'c' : <type 'str'>
==================================================
del list0 [ival5 : ival5]                                               # STEP 93
ACTION: del list0 [ival5 : ival5] 
ival5 = 42 : <type 'int'>
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF0 = [] : <type 'list'>
REFERENCE ACTION: del list_REF0 [ival5 : ival5] 
==================================================
dict1 [val3]                                                            # STEP 94
ACTION: dict1 [val3] 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val3 = 'a' : <type 'str'>
dict_REF1 = {} : <type 'dict'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.KeyError'> 'a'
REFERENCE ACTION: dict_REF1 [val3] 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.KeyError'> 'a'
==================================================
list4.extend(list2)                                                     # STEP 95
ACTION: list4.extend(list2) 
list4 = SortedList([6], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = [6] : <type 'list'>
list_REF2 = [] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x1204aee18>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 703286, in act11972
    self.p_list[4].extend(self.p_list[2])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 73
STOPPING TESTING DUE TO TIMEOUT
24.4668476154 PERCENT COVERED
60.2587449551 TOTAL RUNTIME
22 EXECUTED
2169 TOTAL TEST OPERATIONS
1.36980676651 TIME SPENT EXECUTING TEST OPERATIONS
56.6413514614 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
1.25191164017 TIME SPENT CHECKING PROPERTIES
2.62171840668 TOTAL TIME SPENT RUNNING SUT
0.497734546661 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
sval4 = 'c'                                                              # STEP 0
dict2 = sortedcontainers.SortedDict()                                    # STEP 1
result = dict2 == dict2                                                  # STEP 2
list4 = sortedcontainers.SortedList()                                    # STEP 3
result = dict2 == dict2                                                  # STEP 4
list4.extend(list4)                                                      # STEP 5
dict2.islice(start=None,stop=None)                                       # STEP 6
sval3 = 'a'                                                              # STEP 7
sval9 = 'a'                                                              # STEP 8
list4 <= list4                                                           # STEP 9
list4 >= list4                                                          # STEP 10
result = sorted(list(dict2.keys()))                                     # STEP 11
list4 < list4                                                           # STEP 12
sval8 = 'C'                                                             # STEP 13
list4 <= list4                                                          # STEP 14
list4.extend(list4)                                                     # STEP 15
val5 = sval8                                                            # STEP 16
dict2.get(val5,None)                                                    # STEP 17
result = sorted(list(dict2.keys()))                                     # STEP 18
list2 = sortedcontainers.SortedList()                                   # STEP 19
list2.irange(minimum=val5,maximum=val5,inclusive=(False,False),reverse=True)  # STEP 20
result = sorted(list(dict2.keys()))                                     # STEP 21
result = (dict2.items()).count(val5)                                    # STEP 22
list0 = sortedcontainers.SortedList()                                   # STEP 23
sval5 = 'm'                                                             # STEP 24
dict2.irange(minimum=val5,maximum=val5,inclusive=(True,False),reverse=True)  # STEP 25
list2.irange(minimum=val5,maximum=val5,inclusive=(True,False),reverse=True)  # STEP 26
ival3 = 6                                                               # STEP 27
dict2.get(val5,None)                                                    # STEP 28
dict2.irange(minimum=val5,maximum=val5,inclusive=(True,False),reverse=True)  # STEP 29
list0.irange(minimum=val5,maximum=val5,inclusive=(False,False))         # STEP 30
dict2 [val5]                                                            # STEP 31
list4.discard(val5)                                                     # STEP 32
list2+=list4                                                            # STEP 33
sval0 = sval5 + sval8                                                   # STEP 34
set3 = sortedcontainers.SortedSet()                                     # STEP 35
dict4 = dict2.fromkeys(set3,val5) ; result = dict4                      # STEP 36
val1 = ival3                                                            # STEP 37
set3.irange(minimum=val1,maximum=val5,inclusive=(True,False),reverse=True)  # STEP 38
ival2 = ival3 * ival3                                                   # STEP 39
set3.irange(minimum=val1,maximum=val1,inclusive=(False,False),reverse=True)  # STEP 40
set2 = set3 ^ set3                                                      # STEP 41
set2 &= set2                                                            # STEP 42
list0.islice(start=None,stop=ival2)                                     # STEP 43
sval7 = sval5 + sval5                                                   # STEP 44
sval6 = sval0 + sval7                                                   # STEP 45
dict3 = sortedcontainers.SortedDict()                                   # STEP 46
result = (dict4.keys()).count(val1)                                     # STEP 47
list4.insert(ival2,val1)                                                # STEP 48
dict4 = dict2.copy()                                                    # STEP 49
result = dict2.pop(val1)                                                # STEP 50
dict1 = dict3.copy()                                                    # STEP 51
set3.irange(minimum=val5,maximum=val1,inclusive=(False,True),reverse=True)  # STEP 52
result = len(dict3)                                                     # STEP 53
dict0 = dict3.fromkeys(list2,val1) ; result = dict0                     # STEP 54
result = (dict2.keys()).count(val1)                                     # STEP 55
setList(list4,ival2,val1)                                               # STEP 56
ival5 = ival2 + ival3                                                   # STEP 57
ival3 = ival2 - ival2                                                   # STEP 58
setList(list4,ival2,val1)                                               # STEP 59
setListSlice(list4,ival3,ival3,list0)                                   # STEP 60
set2 = set2 - set2                                                      # STEP 61
result = dict3.peekitem()                                               # STEP 62
result = sorted(list(dict2.keys()))                                     # STEP 63
dict4.get(val5,val1)                                                    # STEP 64
result = dict2.pop(val1,None)                                           # STEP 65
result = dict1.popitem(last=False)                                      # STEP 66
result = list4.index(val5)                                              # STEP 67
result = (dict1.keys()).count(val5)                                     # STEP 68
set3.irange(minimum=val5,maximum=val5,inclusive=(True,False))           # STEP 69
val2 = sval0                                                            # STEP 70
set0 = set2.union(set2)                                                 # STEP 71
setList(list4,ival3,val1)                                               # STEP 72
dict4.get(val5,val5)                                                    # STEP 73
result = sorted(list(dict3.keys()))                                     # STEP 74
result = sorted(list(dict4.keys()))                                     # STEP 75
dict2 = dict0.copy()                                                    # STEP 76
val3 = sval9                                                            # STEP 77
dict1 = sortedcontainers.SortedDict()                                   # STEP 78
sval2 = sval7 + sval5                                                   # STEP 79
set3.update(set3)                                                       # STEP 80
dict0.get(val3,val2)                                                    # STEP 81
result = len(dict4)                                                     # STEP 82
list0.islice(start=ival2,stop=ival5)                                    # STEP 83
set0 -= set2                                                            # STEP 84
dict4 = dict1.fromkeys(list4,val3) ; result = dict4                     # STEP 85
repr(list4)                                                             # STEP 86
set1 = set2.union(set3)                                                 # STEP 87
val3 in dict4                                                           # STEP 88
result = dict0.peekitem(ival5)                                          # STEP 89
val1 in dict2                                                           # STEP 90
set0 = set2 - set3                                                      # STEP 91
val5 = sval4                                                            # STEP 92
del list0 [ival5 : ival5]                                               # STEP 93
dict1 [val3]                                                            # STEP 94
list4.extend(list2)                                                     # STEP 95
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x1204aee18>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 703286, in act11972
    self.p_list[4].extend(self.p_list[2])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
607 BRANCHES COVERED
466 STATEMENTS COVERED

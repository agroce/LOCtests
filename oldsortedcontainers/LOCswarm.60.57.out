Random testing using config=Config(noExceptionMatch=False, generalize=False, localize=False, speed='FAST', probs='locsample.probs', LOCBaseline=0.2, noAlphaConvert=False, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, html=None, keepLast=False, stopWhenNoCoverage=None, generateLOC=None, computeFeatureStats=False, Pmutate=0.0, timeout=60, output='failure.10641.test', markov=None, noSwarmDependencies=False, startExploit=0.0, maxMustHitBranch=None, useHints=False, silentFail=False, highLowSwarm=None, maxMustHitStatement=None, progress=False, postCover=False, swarmLength=None, noCover=False, noEnumerateEnabled=False, full=True, swarmP=0.5, coverFile='coverage.out', markovP=1.0, swarmProbs=None, genDepth=None, exploitCeiling=0.1, logging=None, noCheck=False, throughput=False, uncaught=False, swarmSwitch=None, verbose=False, reducePool=False, exploit=None, fastQuickAnalysis=False, total=False, verboseExploit=False, swarm=True, sequenceP=1.0, biasLOC=None, timedProgress=30, relax=False, ddmin=False, stutter=None, readQuick=False, verboseActions=False, quickAnalysis=False, noReassign=False, sequenceSize=3, LOCProbs=False, sequencesFromTests=None, maxTests=-1, trackMaxCoverage=None, useQuickSequences=False, exploitBestHint=1, failedLogging=None, stopWhenStatements=None, greedyStutter=False, seed=None, stopWhenHitStatement=None, uniqueValuesAnalysis=False, normalize=False, startExploitStall=0, enumerateEnabled=False, internal=False, profile=False, multiple=True, stopWhenBranches=None, running=False, compareFails=False, Pcrossover=0.2, stopWhenHitBranch=None, depth=100, showActions=False)
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x11f598a70>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 702811, in act11964
    self.p_list[2].extend(self.p_list[4])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
Original test has 71 steps

SAVING TEST AS failure.10641.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
set2 = sortedcontainers.SortedSet()                                      # STEP 0
ACTION: set2 = sortedcontainers.SortedSet() 
set2 = None : <type 'NoneType'>
set_REF2 = None : <type 'NoneType'>
=> set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF2 = set([]) 
=> set_REF2 = set([]) : <type 'set'>
==================================================
sval3 = 'G'                                                              # STEP 1
ACTION: sval3 = 'G' 
sval3 = None : <type 'NoneType'>
=> sval3 = 'G' : <type 'str'>
==================================================
sval4 = sval3 + sval3                                                    # STEP 2
ACTION: sval4 = sval3 + sval3 
sval3 = 'G' : <type 'str'>
sval4 = None : <type 'NoneType'>
=> sval4 = 'GG' : <type 'str'>
==================================================
set1 = set2 ^ set2                                                       # STEP 3
ACTION: set1 = set2 ^ set2 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set1 = None : <type 'NoneType'>
set_REF2 = set([]) : <type 'set'>
set_REF1 = None : <type 'NoneType'>
=> set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF1 = set_REF2 ^ set_REF2 
=> set_REF1 = set([]) : <type 'set'>
==================================================
list2 = sortedcontainers.SortedList()                                    # STEP 4
ACTION: list2 = sortedcontainers.SortedList() 
list2 = None : <type 'NoneType'>
list_REF2 = None : <type 'NoneType'>
=> list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: list_REF2 = [] 
=> list_REF2 = [] : <type 'list'>
==================================================
dict1 = sortedcontainers.SortedDict()                                    # STEP 5
ACTION: dict1 = sortedcontainers.SortedDict() 
dict1 = None : <type 'NoneType'>
dict_REF1 = None : <type 'NoneType'>
=> dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF1 = {} 
=> dict_REF1 = {} : <type 'dict'>
==================================================
dict3 = sortedcontainers.SortedDict()                                    # STEP 6
ACTION: dict3 = sortedcontainers.SortedDict() 
dict3 = None : <type 'NoneType'>
dict_REF3 = None : <type 'NoneType'>
=> dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF3 = {} 
=> dict_REF3 = {} : <type 'dict'>
==================================================
list2.extend(list2)                                                      # STEP 7
ACTION: list2.extend(list2) 
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF2 = [] : <type 'list'>
REFERENCE ACTION: sortListExtend(list_REF2,list_REF2) 
==================================================
dict2 = sortedcontainers.SortedDict()                                    # STEP 8
ACTION: dict2 = sortedcontainers.SortedDict() 
dict2 = None : <type 'NoneType'>
dict_REF2 = None : <type 'NoneType'>
=> dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF2 = {} 
=> dict_REF2 = {} : <type 'dict'>
==================================================
ival2 = 7                                                                # STEP 9
ACTION: ival2 = 7 
ival2 = None : <type 'NoneType'>
=> ival2 = 7 : <type 'int'>
==================================================
ival3 = 7                                                               # STEP 10
ACTION: ival3 = 7 
ival3 = None : <type 'NoneType'>
=> ival3 = 7 : <type 'int'>
==================================================
result = len(dict1.values())                                            # STEP 11
ACTION: result = len(dict1.values())  
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF1.values())  
==================================================
ival5 = ival2 + ival3                                                   # STEP 12
ACTION: ival5 = ival2 + ival3 
ival2 = 7 : <type 'int'>
ival3 = 7 : <type 'int'>
ival5 = None : <type 'NoneType'>
=> ival5 = 14 : <type 'int'>
==================================================
set3 = sortedcontainers.SortedSet()                                     # STEP 13
ACTION: set3 = sortedcontainers.SortedSet() 
set3 = None : <type 'NoneType'>
set_REF3 = None : <type 'NoneType'>
=> set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF3 = set([]) 
=> set_REF3 = set([]) : <type 'set'>
==================================================
result = dict2.peekitem(ival5)                                          # STEP 14
ACTION: result = dict2.peekitem(ival5) 
ival5 = 14 : <type 'int'>
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF2 = {} : <type 'dict'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: result_REF = sortDictPeekitem(dict_REF2,ival5) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
==================================================
sval3 = sval3 + sval3                                                   # STEP 15
ACTION: sval3 = sval3 + sval3 
sval3 = 'G' : <type 'str'>
=> sval3 = 'GG' : <type 'str'>
==================================================
result = list2 != list2                                                 # STEP 16
ACTION: result = list2 != list2 
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF2 = [] : <type 'list'>
REFERENCE ACTION: result_REF = list_REF2 != list_REF2 
==================================================
dict2.islice(start=None,stop=ival2)                                     # STEP 17
ACTION: dict2.islice(start=None,stop=ival2) 
ival2 = 7 : <type 'int'>
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF2.islice(start=None,stop=ival2) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'islice'
==================================================
set2 &= set3                                                            # STEP 18
ACTION: set2 &= set3 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF2 = set([]) : <type 'set'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF2 &= set_REF3 
==================================================
repr(dict3)                                                             # STEP 19
ACTION: repr(dict3) 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: repr(dict_REF3) 
==================================================
set3 |= set1                                                            # STEP 20
ACTION: set3 |= set1 
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF3 = set([]) : <type 'set'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF3 |= set_REF1 
==================================================
list2.extend(list2)                                                     # STEP 21
ACTION: list2.extend(list2) 
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF2 = [] : <type 'list'>
REFERENCE ACTION: sortListExtend(list_REF2,list_REF2) 
==================================================
result = list2 != list2                                                 # STEP 22
ACTION: result = list2 != list2 
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF2 = [] : <type 'list'>
REFERENCE ACTION: result_REF = list_REF2 != list_REF2 
==================================================
set2 = set2 ^ set2                                                      # STEP 23
ACTION: set2 = set2 ^ set2 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF2 = set_REF2 ^ set_REF2 
==================================================
result = set2.isdisjoint(set3)                                          # STEP 24
ACTION: result = set2.isdisjoint(set3) 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF2 = set([]) : <type 'set'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = set_REF2.isdisjoint(set_REF3) 
==================================================
ival0 = ival2 + ival2                                                   # STEP 25
ACTION: ival0 = ival2 + ival2 
ival2 = 7 : <type 'int'>
ival0 = None : <type 'NoneType'>
=> ival0 = 14 : <type 'int'>
==================================================
sval5 = 'M'                                                             # STEP 26
ACTION: sval5 = 'M' 
sval5 = None : <type 'NoneType'>
=> sval5 = 'M' : <type 'str'>
==================================================
val9 = ival0                                                            # STEP 27
ACTION: val9 = ival0 
ival0 = 14 : <type 'int'>
val9 = None : <type 'NoneType'>
=> val9 = 14 : <type 'int'>
==================================================
set2 ^= set2                                                            # STEP 28
ACTION: set2 ^= set2 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF2 ^= set_REF2 
==================================================
dict0 = dict3.fromkeys(set3,val9) ; result = dict0                      # STEP 29
ACTION: dict0 = dict3.fromkeys(set3,val9) ; result = dict0 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict0 = None : <type 'NoneType'>
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
val9 = 14 : <type 'int'>
dict_REF3 = {} : <type 'dict'>
dict_REF0 = None : <type 'NoneType'>
set_REF3 = set([]) : <type 'set'>
=> dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF0 = dict_REF3.fromkeys(set_REF3,val9) ; result_REF = dict_REF0 
=> dict_REF0 = {} : <type 'dict'>
==================================================
set1 -= set3                                                            # STEP 30
ACTION: set1 -= set3 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF1 = set([]) : <type 'set'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1 -= set_REF3 
==================================================
plist0 = list2 [ival0 : ival2]                                          # STEP 31
ACTION: plist0 = list2 [ival0 : ival2] 
ival0 = 14 : <type 'int'>
ival2 = 7 : <type 'int'>
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
plist0 = None : <type 'NoneType'>
list_REF2 = [] : <type 'list'>
=> plist0 = [] : <type 'list'>
REFERENCE ACTION: plist0 = list_REF2 [ival0 : ival2] 
==================================================
set2.irange(minimum=val9,maximum=val9,inclusive=(True,False),reverse=True)  # STEP 32
ACTION: set2.irange(minimum=val9,maximum=val9,inclusive=(True,False),reverse=True) 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
val9 = 14 : <type 'int'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF2.irange(minimum=val9,maximum=val9,inclusive=(True,False),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'irange'
==================================================
ival7 = ival5 + ival5                                                   # STEP 33
ACTION: ival7 = ival5 + ival5 
ival5 = 14 : <type 'int'>
ival7 = None : <type 'NoneType'>
=> ival7 = 28 : <type 'int'>
==================================================
val3 = ival3                                                            # STEP 34
ACTION: val3 = ival3 
ival3 = 7 : <type 'int'>
val3 = None : <type 'NoneType'>
=> val3 = 7 : <type 'int'>
==================================================
set2 = set1 ^ set1                                                      # STEP 35
ACTION: set2 = set1 ^ set1 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF1 = set([]) : <type 'set'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF2 = set_REF1 ^ set_REF1 
==================================================
list2.insert(ival7,val9)                                                # STEP 36
ACTION: list2.insert(ival7,val9) 
ival7 = 28 : <type 'int'>
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val9 = 14 : <type 'int'>
list_REF2 = [] : <type 'list'>
=> list2 = SortedList([14], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: sortListInsert(list_REF2,ival7,val9) 
=> list_REF2 = [14] : <type 'list'>
==================================================
result = set3 != set1                                                   # STEP 37
ACTION: result = set3 != set1 
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF3 = set([]) : <type 'set'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = set_REF3 != set_REF1 
==================================================
list1 = sortedcontainers.SortedList()                                   # STEP 38
ACTION: list1 = sortedcontainers.SortedList() 
list1 = None : <type 'NoneType'>
list_REF1 = None : <type 'NoneType'>
=> list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: list_REF1 = [] 
=> list_REF1 = [] : <type 'list'>
==================================================
list3 = sortedcontainers.SortedList(plist0)                             # STEP 39
ACTION: list3 = sortedcontainers.SortedList(plist0) 
list3 = None : <type 'NoneType'>
plist0 = [] : <type 'list'>
list_REF3 = None : <type 'NoneType'>
=> list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: list_REF3 = list(plist0) 
=> list_REF3 = [] : <type 'list'>
==================================================
dict2.islice(start=None,stop=None)                                      # STEP 40
ACTION: dict2.islice(start=None,stop=None) 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF2.islice(start=None,stop=None) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'islice'
==================================================
dict3.get(val3,val3)                                                    # STEP 41
ACTION: dict3.get(val3,val3) 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val3 = 7 : <type 'int'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF3.get(val3,val3) 
==================================================
setList(list1,ival7,val9)                                               # STEP 42
ACTION: setList(list1,ival7,val9) 
ival7 = 28 : <type 'int'>
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val9 = 14 : <type 'int'>
list_REF1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: sortListSet(list_REF1,ival7,val9) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list assignment index out of range
==================================================
result = dict2.pop(val9,None)                                           # STEP 43
ACTION: result = dict2.pop(val9,None) 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val9 = 14 : <type 'int'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = dict_REF2.pop(val9,None) 
==================================================
result = len(dict3.items())                                             # STEP 44
ACTION: result = len(dict3.items())  
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF3.items())  
==================================================
plist2 = list3 [ival5 : ival0]                                          # STEP 45
ACTION: plist2 = list3 [ival5 : ival0] 
ival5 = 14 : <type 'int'>
ival0 = 14 : <type 'int'>
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
plist2 = None : <type 'NoneType'>
list_REF3 = [] : <type 'list'>
=> plist2 = [] : <type 'list'>
REFERENCE ACTION: plist2 = list_REF3 [ival5 : ival0] 
==================================================
list1.irange(minimum=val9,maximum=val9,inclusive=(False,False),reverse=True)  # STEP 46
ACTION: list1.irange(minimum=val9,maximum=val9,inclusive=(False,False),reverse=True) 
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val9 = 14 : <type 'int'>
list_REF1 = [] : <type 'list'>
REFERENCE ACTION: list_REF1.irange(minimum=val9,maximum=val9,inclusive=(False,False),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
set0 = set2 ^ set3                                                      # STEP 47
ACTION: set0 = set2 ^ set3 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set0 = None : <type 'NoneType'>
set_REF2 = set([]) : <type 'set'>
set_REF3 = set([]) : <type 'set'>
set_REF0 = None : <type 'NoneType'>
=> set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF0 = set_REF2 ^ set_REF3 
=> set_REF0 = set([]) : <type 'set'>
==================================================
del list2 [ival3]                                                       # STEP 48
ACTION: del list2 [ival3] 
ival3 = 7 : <type 'int'>
list2 = SortedList([14], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF2 = [14] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: del list_REF2 [ival3] 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list assignment index out of range
==================================================
setList(list3,ival2,val9)                                               # STEP 49
ACTION: setList(list3,ival2,val9) 
ival2 = 7 : <type 'int'>
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val9 = 14 : <type 'int'>
list_REF3 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: sortListSet(list_REF3,ival2,val9) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list assignment index out of range
==================================================
result = dict0.peekitem(ival0)                                          # STEP 50
ACTION: result = dict0.peekitem(ival0) 
ival0 = 14 : <type 'int'>
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF0 = {} : <type 'dict'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: result_REF = sortDictPeekitem(dict_REF0,ival0) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
==================================================
dict2 = dict2.fromkeys(list3,val3) ; result = dict2                     # STEP 51
ACTION: dict2 = dict2.fromkeys(list3,val3) ; result = dict2 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val3 = 7 : <type 'int'>
list_REF3 = [] : <type 'list'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF2 = dict_REF2.fromkeys(list_REF3,val3) ; result_REF = dict_REF2 
==================================================
list2 > list3                                                           # STEP 52
ACTION: list2 > list3 
list2 = SortedList([14], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF2 = [14] : <type 'list'>
list_REF3 = [] : <type 'list'>
REFERENCE ACTION: list_REF2 > list_REF3 
==================================================
dict3.islice(start=None,stop=ival7)                                     # STEP 53
ACTION: dict3.islice(start=None,stop=ival7) 
ival7 = 28 : <type 'int'>
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF3.islice(start=None,stop=ival7) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'islice'
==================================================
dict0 = dict0.fromkeys(set2,val9) ; result = dict0                      # STEP 54
ACTION: dict0 = dict0.fromkeys(set2,val9) ; result = dict0 
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
val9 = 14 : <type 'int'>
dict_REF0 = {} : <type 'dict'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: dict_REF0 = dict_REF0.fromkeys(set_REF2,val9) ; result_REF = dict_REF0 
==================================================
list1.insert(ival3,val3)                                                # STEP 55
ACTION: list1.insert(ival3,val3) 
ival3 = 7 : <type 'int'>
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val3 = 7 : <type 'int'>
list_REF1 = [] : <type 'list'>
=> list1 = SortedList([7], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: sortListInsert(list_REF1,ival3,val3) 
=> list_REF1 = [7] : <type 'list'>
==================================================
ival7 = 3                                                               # STEP 56
ACTION: ival7 = 3 
ival7 = 28 : <type 'int'>
=> ival7 = 3 : <type 'int'>
==================================================
repr(dict2)                                                             # STEP 57
ACTION: repr(dict2) 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: repr(dict_REF2) 
==================================================
dict2 = sortedcontainers.SortedDict()                                   # STEP 58
ACTION: dict2 = sortedcontainers.SortedDict() 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF2 = {} 
==================================================
result = list3 == list3                                                 # STEP 59
ACTION: result = list3 == list3 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [] : <type 'list'>
REFERENCE ACTION: result_REF = list_REF3 == list_REF3 
==================================================
dict1.get(val3,val3)                                                    # STEP 60
ACTION: dict1.get(val3,val3) 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val3 = 7 : <type 'int'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF1.get(val3,val3) 
==================================================
list3.append(val3)                                                      # STEP 61
ACTION: list3.append(val3) 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val3 = 7 : <type 'int'>
list_REF3 = [] : <type 'list'>
=> list3 = SortedList([7], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: sortListAppend(list_REF3,val3) 
=> list_REF3 = [7] : <type 'list'>
==================================================
sval8 = 'S'                                                             # STEP 62
ACTION: sval8 = 'S' 
sval8 = None : <type 'NoneType'>
=> sval8 = 'S' : <type 'str'>
==================================================
repr(set0)                                                              # STEP 63
ACTION: repr(set0) 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: repr(set_REF0) 
==================================================
setListSlice(list1,ival7,ival0,list3)                                   # STEP 64
ACTION: setListSlice(list1,ival7,ival0,list3) 
ival7 = 3 : <type 'int'>
ival0 = 14 : <type 'int'>
list1 = SortedList([7], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list3 = SortedList([7], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF1 = [7] : <type 'list'>
list_REF3 = [7] : <type 'list'>
=> list1 = SortedList([7, 7], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: sortListSetSlice(list_REF1,ival7,ival0,list_REF3) 
=> list_REF1 = [7, 7] : <type 'list'>
==================================================
setList(list1,ival2,val9)                                               # STEP 65
ACTION: setList(list1,ival2,val9) 
ival2 = 7 : <type 'int'>
list1 = SortedList([7, 7], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val9 = 14 : <type 'int'>
list_REF1 = [7, 7] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: sortListSet(list_REF1,ival2,val9) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list assignment index out of range
==================================================
dict3 = dict0.fromkeys(list1,val3) ; result = dict3                     # STEP 66
ACTION: dict3 = dict0.fromkeys(list1,val3) ; result = dict3 
list1 = SortedList([7, 7], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val3 = 7 : <type 'int'>
list_REF1 = [7, 7] : <type 'list'>
dict_REF0 = {} : <type 'dict'>
dict_REF3 = {} : <type 'dict'>
=> dict3 = SortedDict(None, 1000, {7: 7}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF3 = dict_REF0.fromkeys(list_REF1,val3) ; result_REF = dict_REF3 
=> dict_REF3 = {7: 7} : <type 'dict'>
==================================================
list4 = sortedcontainers.SortedList()                                   # STEP 67
ACTION: list4 = sortedcontainers.SortedList() 
list4 = None : <type 'NoneType'>
list_REF4 = None : <type 'NoneType'>
=> list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: list_REF4 = [] 
=> list_REF4 = [] : <type 'list'>
==================================================
list3.extend(list2)                                                     # STEP 68
ACTION: list3.extend(list2) 
list3 = SortedList([7], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list2 = SortedList([14], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [7] : <type 'list'>
list_REF2 = [14] : <type 'list'>
=> list3 = SortedList([7, 14], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: sortListExtend(list_REF3,list_REF2) 
=> list_REF3 = [7, 14] : <type 'list'>
==================================================
dict3.irange(minimum=val9,maximum=val3,inclusive=(False,True),reverse=True)  # STEP 69
ACTION: dict3.irange(minimum=val9,maximum=val3,inclusive=(False,True),reverse=True) 
dict3 = SortedDict(None, 1000, {7: 7}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val9 = 14 : <type 'int'>
val3 = 7 : <type 'int'>
dict_REF3 = {7: 7} : <type 'dict'>
REFERENCE ACTION: dict_REF3.irange(minimum=val9,maximum=val3,inclusive=(False,True),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'irange'
==================================================
list2.extend(list4)                                                     # STEP 70
ACTION: list2.extend(list4) 
list2 = SortedList([14], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF2 = [14] : <type 'list'>
list_REF4 = [] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x11f5b8e60>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 702811, in act11964
    self.p_list[2].extend(self.p_list[4])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #17 STEP #89 (0:00:30.003210) Mon Nov 20 17:53:38 2017 [ 447 stmts 584 branches ] 1660 TOTAL ACTIONS (55.3274131752/s)
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 5
STOPPING TESTING DUE TO TIMEOUT
24.6994959287 PERCENT COVERED
60.215118885 TOTAL RUNTIME
35 EXECUTED
3376 TOTAL TEST OPERATIONS
1.85418653488 TIME SPENT EXECUTING TEST OPERATIONS
54.6952416897 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
1.72400307655 TIME SPENT CHECKING PROPERTIES
3.57818961143 TOTAL TIME SPENT RUNNING SUT
0.477125883102 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
set2 = sortedcontainers.SortedSet()                                      # STEP 0
sval3 = 'G'                                                              # STEP 1
sval4 = sval3 + sval3                                                    # STEP 2
set1 = set2 ^ set2                                                       # STEP 3
list2 = sortedcontainers.SortedList()                                    # STEP 4
dict1 = sortedcontainers.SortedDict()                                    # STEP 5
dict3 = sortedcontainers.SortedDict()                                    # STEP 6
list2.extend(list2)                                                      # STEP 7
dict2 = sortedcontainers.SortedDict()                                    # STEP 8
ival2 = 7                                                                # STEP 9
ival3 = 7                                                               # STEP 10
result = len(dict1.values())                                            # STEP 11
ival5 = ival2 + ival3                                                   # STEP 12
set3 = sortedcontainers.SortedSet()                                     # STEP 13
result = dict2.peekitem(ival5)                                          # STEP 14
sval3 = sval3 + sval3                                                   # STEP 15
result = list2 != list2                                                 # STEP 16
dict2.islice(start=None,stop=ival2)                                     # STEP 17
set2 &= set3                                                            # STEP 18
repr(dict3)                                                             # STEP 19
set3 |= set1                                                            # STEP 20
list2.extend(list2)                                                     # STEP 21
result = list2 != list2                                                 # STEP 22
set2 = set2 ^ set2                                                      # STEP 23
result = set2.isdisjoint(set3)                                          # STEP 24
ival0 = ival2 + ival2                                                   # STEP 25
sval5 = 'M'                                                             # STEP 26
val9 = ival0                                                            # STEP 27
set2 ^= set2                                                            # STEP 28
dict0 = dict3.fromkeys(set3,val9) ; result = dict0                      # STEP 29
set1 -= set3                                                            # STEP 30
plist0 = list2 [ival0 : ival2]                                          # STEP 31
set2.irange(minimum=val9,maximum=val9,inclusive=(True,False),reverse=True)  # STEP 32
ival7 = ival5 + ival5                                                   # STEP 33
val3 = ival3                                                            # STEP 34
set2 = set1 ^ set1                                                      # STEP 35
list2.insert(ival7,val9)                                                # STEP 36
result = set3 != set1                                                   # STEP 37
list1 = sortedcontainers.SortedList()                                   # STEP 38
list3 = sortedcontainers.SortedList(plist0)                             # STEP 39
dict2.islice(start=None,stop=None)                                      # STEP 40
dict3.get(val3,val3)                                                    # STEP 41
setList(list1,ival7,val9)                                               # STEP 42
result = dict2.pop(val9,None)                                           # STEP 43
result = len(dict3.items())                                             # STEP 44
plist2 = list3 [ival5 : ival0]                                          # STEP 45
list1.irange(minimum=val9,maximum=val9,inclusive=(False,False),reverse=True)  # STEP 46
set0 = set2 ^ set3                                                      # STEP 47
del list2 [ival3]                                                       # STEP 48
setList(list3,ival2,val9)                                               # STEP 49
result = dict0.peekitem(ival0)                                          # STEP 50
dict2 = dict2.fromkeys(list3,val3) ; result = dict2                     # STEP 51
list2 > list3                                                           # STEP 52
dict3.islice(start=None,stop=ival7)                                     # STEP 53
dict0 = dict0.fromkeys(set2,val9) ; result = dict0                      # STEP 54
list1.insert(ival3,val3)                                                # STEP 55
ival7 = 3                                                               # STEP 56
repr(dict2)                                                             # STEP 57
dict2 = sortedcontainers.SortedDict()                                   # STEP 58
result = list3 == list3                                                 # STEP 59
dict1.get(val3,val3)                                                    # STEP 60
list3.append(val3)                                                      # STEP 61
sval8 = 'S'                                                             # STEP 62
repr(set0)                                                              # STEP 63
setListSlice(list1,ival7,ival0,list3)                                   # STEP 64
setList(list1,ival2,val9)                                               # STEP 65
dict3 = dict0.fromkeys(list1,val3) ; result = dict3                     # STEP 66
list4 = sortedcontainers.SortedList()                                   # STEP 67
list3.extend(list2)                                                     # STEP 68
dict3.irange(minimum=val9,maximum=val3,inclusive=(False,True),reverse=True)  # STEP 69
list2.extend(list4)                                                     # STEP 70
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x11f5b8e60>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 702811, in act11964
    self.p_list[2].extend(self.p_list[4])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
617 BRANCHES COVERED
467 STATEMENTS COVERED

Random testing using config=Config(noExceptionMatch=False, generalize=False, localize=False, speed='FAST', probs=None, LOCBaseline=0.2, noAlphaConvert=False, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, html=None, keepLast=False, stopWhenNoCoverage=None, generateLOC=None, computeFeatureStats=False, Pmutate=0.0, timeout=60, output='failure.10379.test', markov=None, noSwarmDependencies=False, startExploit=0.0, maxMustHitBranch=None, useHints=False, silentFail=False, highLowSwarm=None, maxMustHitStatement=None, progress=False, postCover=False, swarmLength=None, noCover=False, noEnumerateEnabled=False, full=True, swarmP=0.5, coverFile='coverage.out', markovP=1.0, swarmProbs=None, genDepth=None, exploitCeiling=0.1, logging=None, noCheck=False, throughput=False, uncaught=False, swarmSwitch=None, verbose=False, reducePool=False, exploit=None, fastQuickAnalysis=False, total=False, verboseExploit=False, swarm=True, sequenceP=1.0, biasLOC=None, timedProgress=30, relax=False, ddmin=False, stutter=None, readQuick=False, verboseActions=False, quickAnalysis=False, noReassign=False, sequenceSize=3, LOCProbs=False, sequencesFromTests=None, maxTests=-1, trackMaxCoverage=None, useQuickSequences=False, exploitBestHint=1, failedLogging=None, stopWhenStatements=None, greedyStutter=False, seed=None, stopWhenHitStatement=None, uniqueValuesAnalysis=False, normalize=False, startExploitStall=0, enumerateEnabled=False, internal=False, profile=False, multiple=True, stopWhenBranches=None, running=False, compareFails=False, Pcrossover=0.2, stopWhenHitBranch=None, depth=100, showActions=False)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1212dc368>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306261, in check
    assert self.p_list[4] == self.p_list_REF[4]
Original test has 64 steps

SAVING TEST AS failure.10379.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
sval5 = 'm'                                                              # STEP 0
ACTION: sval5 = 'm' 
sval5 = None : <type 'NoneType'>
=> sval5 = 'm' : <type 'str'>
==================================================
set1 = sortedcontainers.SortedSet()                                      # STEP 1
ACTION: set1 = sortedcontainers.SortedSet() 
set1 = None : <type 'NoneType'>
set_REF1 = None : <type 'NoneType'>
=> set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF1 = set([]) 
=> set_REF1 = set([]) : <type 'set'>
==================================================
list3 = sortedcontainers.SortedList()                                    # STEP 2
ACTION: list3 = sortedcontainers.SortedList() 
list3 = None : <type 'NoneType'>
list_REF3 = None : <type 'NoneType'>
=> list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: list_REF3 = [] 
=> list_REF3 = [] : <type 'list'>
==================================================
ival3 = 14                                                               # STEP 3
ACTION: ival3 = 14 
ival3 = None : <type 'NoneType'>
=> ival3 = 14 : <type 'int'>
==================================================
sval3 = 'n'                                                              # STEP 4
ACTION: sval3 = 'n' 
sval3 = None : <type 'NoneType'>
=> sval3 = 'n' : <type 'str'>
==================================================
sval1 = 'c'                                                              # STEP 5
ACTION: sval1 = 'c' 
sval1 = None : <type 'NoneType'>
=> sval1 = 'c' : <type 'str'>
==================================================
sval6 = 'i'                                                              # STEP 6
ACTION: sval6 = 'i' 
sval6 = None : <type 'NoneType'>
=> sval6 = 'i' : <type 'str'>
==================================================
ival5 = 16                                                               # STEP 7
ACTION: ival5 = 16 
ival5 = None : <type 'NoneType'>
=> ival5 = 16 : <type 'int'>
==================================================
ival8 = 18                                                               # STEP 8
ACTION: ival8 = 18 
ival8 = None : <type 'NoneType'>
=> ival8 = 18 : <type 'int'>
==================================================
ival9 = ival5 + ival5                                                    # STEP 9
ACTION: ival9 = ival5 + ival5 
ival5 = 16 : <type 'int'>
ival9 = None : <type 'NoneType'>
=> ival9 = 32 : <type 'int'>
==================================================
plist2 = list3 [ival5 : ival9]                                          # STEP 10
ACTION: plist2 = list3 [ival5 : ival9] 
ival5 = 16 : <type 'int'>
ival9 = 32 : <type 'int'>
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
plist2 = None : <type 'NoneType'>
list_REF3 = [] : <type 'list'>
=> plist2 = [] : <type 'list'>
REFERENCE ACTION: plist2 = list_REF3 [ival5 : ival9] 
==================================================
list4 = sortedcontainers.SortedList()                                   # STEP 11
ACTION: list4 = sortedcontainers.SortedList() 
list4 = None : <type 'NoneType'>
list_REF4 = None : <type 'NoneType'>
=> list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: list_REF4 = [] 
=> list_REF4 = [] : <type 'list'>
==================================================
ival7 = 1                                                               # STEP 12
ACTION: ival7 = 1 
ival7 = None : <type 'NoneType'>
=> ival7 = 1 : <type 'int'>
==================================================
ival4 = ival8 - ival7                                                   # STEP 13
ACTION: ival4 = ival8 - ival7 
ival8 = 18 : <type 'int'>
ival7 = 1 : <type 'int'>
ival4 = None : <type 'NoneType'>
=> ival4 = 17 : <type 'int'>
==================================================
ival7 = ival3 - ival5                                                   # STEP 14
ACTION: ival7 = ival3 - ival5 
ival3 = 14 : <type 'int'>
ival5 = 16 : <type 'int'>
ival7 = 1 : <type 'int'>
=> ival7 = -2 : <type 'int'>
==================================================
plist4 = list3 [ival4 : ival7]                                          # STEP 15
ACTION: plist4 = list3 [ival4 : ival7] 
ival4 = 17 : <type 'int'>
ival7 = -2 : <type 'int'>
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
plist4 = None : <type 'NoneType'>
list_REF3 = [] : <type 'list'>
=> plist4 = [] : <type 'list'>
REFERENCE ACTION: plist4 = list_REF3 [ival4 : ival7] 
==================================================
plist0 = list4 [ival4 : ival4]                                          # STEP 16
ACTION: plist0 = list4 [ival4 : ival4] 
ival4 = 17 : <type 'int'>
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
plist0 = None : <type 'NoneType'>
list_REF4 = [] : <type 'list'>
=> plist0 = [] : <type 'list'>
REFERENCE ACTION: plist0 = list_REF4 [ival4 : ival4] 
==================================================
ival8 = ival4 - ival9                                                   # STEP 17
ACTION: ival8 = ival4 - ival9 
ival4 = 17 : <type 'int'>
ival9 = 32 : <type 'int'>
ival8 = 18 : <type 'int'>
=> ival8 = -15 : <type 'int'>
==================================================
plist3 = list3 [ival5 : ival3]                                          # STEP 18
ACTION: plist3 = list3 [ival5 : ival3] 
ival5 = 16 : <type 'int'>
ival3 = 14 : <type 'int'>
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
plist3 = None : <type 'NoneType'>
list_REF3 = [] : <type 'list'>
=> plist3 = [] : <type 'list'>
REFERENCE ACTION: plist3 = list_REF3 [ival5 : ival3] 
==================================================
list4.islice(start=ival8,stop=ival9,reverse=True)                       # STEP 19
ACTION: list4.islice(start=ival8,stop=ival9,reverse=True) 
ival8 = -15 : <type 'int'>
ival9 = 32 : <type 'int'>
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = [] : <type 'list'>
REFERENCE ACTION: list_REF4.islice(start=ival8,stop=ival9,reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'islice'
==================================================
ival4 = ival9 - ival9                                                   # STEP 20
ACTION: ival4 = ival9 - ival9 
ival9 = 32 : <type 'int'>
ival4 = 17 : <type 'int'>
=> ival4 = 0 : <type 'int'>
==================================================
ival1 = 8                                                               # STEP 21
ACTION: ival1 = 8 
ival1 = None : <type 'NoneType'>
=> ival1 = 8 : <type 'int'>
==================================================
ival9 = ival9 * ival4                                                   # STEP 22
ACTION: ival9 = ival9 * ival4 
ival9 = 32 : <type 'int'>
ival4 = 0 : <type 'int'>
=> ival9 = 0 : <type 'int'>
==================================================
list4.islice(start=ival1,stop=ival5,reverse=True)                       # STEP 23
ACTION: list4.islice(start=ival1,stop=ival5,reverse=True) 
ival1 = 8 : <type 'int'>
ival5 = 16 : <type 'int'>
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = [] : <type 'list'>
REFERENCE ACTION: list_REF4.islice(start=ival1,stop=ival5,reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'islice'
==================================================
val4 = ival4                                                            # STEP 24
ACTION: val4 = ival4 
ival4 = 0 : <type 'int'>
val4 = None : <type 'NoneType'>
=> val4 = 0 : <type 'int'>
==================================================
plist1 = list3 [ival1 : ival9]                                          # STEP 25
ACTION: plist1 = list3 [ival1 : ival9] 
ival1 = 8 : <type 'int'>
ival9 = 0 : <type 'int'>
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
plist1 = None : <type 'NoneType'>
list_REF3 = [] : <type 'list'>
=> plist1 = [] : <type 'list'>
REFERENCE ACTION: plist1 = list_REF3 [ival1 : ival9] 
==================================================
ival5 = ival3 + ival3                                                   # STEP 26
ACTION: ival5 = ival3 + ival3 
ival3 = 14 : <type 'int'>
ival5 = 16 : <type 'int'>
=> ival5 = 28 : <type 'int'>
==================================================
ival8 = ival7 + ival7                                                   # STEP 27
ACTION: ival8 = ival7 + ival7 
ival7 = -2 : <type 'int'>
ival8 = -15 : <type 'int'>
=> ival8 = -4 : <type 'int'>
==================================================
set1.clear()                                                            # STEP 28
ACTION: set1.clear() 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1.clear() 
==================================================
val7 = ival1                                                            # STEP 29
ACTION: val7 = ival1 
ival1 = 8 : <type 'int'>
val7 = None : <type 'NoneType'>
=> val7 = 8 : <type 'int'>
==================================================
ival0 = ival3 * ival9                                                   # STEP 30
ACTION: ival0 = ival3 * ival9 
ival3 = 14 : <type 'int'>
ival9 = 0 : <type 'int'>
ival0 = None : <type 'NoneType'>
=> ival0 = 0 : <type 'int'>
==================================================
ival2 = ival3 * ival5                                                   # STEP 31
ACTION: ival2 = ival3 * ival5 
ival3 = 14 : <type 'int'>
ival5 = 28 : <type 'int'>
ival2 = None : <type 'NoneType'>
=> ival2 = 392 : <type 'int'>
==================================================
ival5 = ival1 - ival5                                                   # STEP 32
ACTION: ival5 = ival1 - ival5 
ival1 = 8 : <type 'int'>
ival5 = 28 : <type 'int'>
=> ival5 = -20 : <type 'int'>
==================================================
list3.insert(ival8,val4)                                                # STEP 33
ACTION: list3.insert(ival8,val4) 
ival8 = -4 : <type 'int'>
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val4 = 0 : <type 'int'>
list_REF3 = [] : <type 'list'>
=> list3 = SortedList([0], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: sortListInsert(list_REF3,ival8,val4) 
=> list_REF3 = [0] : <type 'list'>
==================================================
set1.update(list3)                                                      # STEP 34
ACTION: set1.update(list3) 
list3 = SortedList([0], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
list_REF3 = [0] : <type 'list'>
set_REF1 = set([]) : <type 'set'>
=> set1 = SortedSet([0], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF1.update(list_REF3) 
=> set_REF1 = set([0]) : <type 'set'>
==================================================
list3.islice(start=ival5,stop=ival0,reverse=True)                       # STEP 35
ACTION: list3.islice(start=ival5,stop=ival0,reverse=True) 
ival5 = -20 : <type 'int'>
ival0 = 0 : <type 'int'>
list3 = SortedList([0], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [0] : <type 'list'>
REFERENCE ACTION: list_REF3.islice(start=ival5,stop=ival0,reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'islice'
==================================================
list3.insert(ival4,val4)                                                # STEP 36
ACTION: list3.insert(ival4,val4) 
ival4 = 0 : <type 'int'>
list3 = SortedList([0], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val4 = 0 : <type 'int'>
list_REF3 = [0] : <type 'list'>
=> list3 = SortedList([0, 0], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: sortListInsert(list_REF3,ival4,val4) 
=> list_REF3 = [0, 0] : <type 'list'>
==================================================
ival9 = ival9 - ival2                                                   # STEP 37
ACTION: ival9 = ival9 - ival2 
ival9 = 0 : <type 'int'>
ival2 = 392 : <type 'int'>
=> ival9 = -392 : <type 'int'>
==================================================
val2 = ival9                                                            # STEP 38
ACTION: val2 = ival9 
ival9 = -392 : <type 'int'>
val2 = None : <type 'NoneType'>
=> val2 = -392 : <type 'int'>
==================================================
ival5 = ival2 - ival3                                                   # STEP 39
ACTION: ival5 = ival2 - ival3 
ival2 = 392 : <type 'int'>
ival3 = 14 : <type 'int'>
ival5 = -20 : <type 'int'>
=> ival5 = 378 : <type 'int'>
==================================================
ival8 = ival8 - ival9                                                   # STEP 40
ACTION: ival8 = ival8 - ival9 
ival8 = -4 : <type 'int'>
ival9 = -392 : <type 'int'>
=> ival8 = 388 : <type 'int'>
==================================================
ival9 = ival7 + ival1                                                   # STEP 41
ACTION: ival9 = ival7 + ival1 
ival7 = -2 : <type 'int'>
ival1 = 8 : <type 'int'>
ival9 = -392 : <type 'int'>
=> ival9 = 6 : <type 'int'>
==================================================
list3.islice(start=ival3,stop=ival0,reverse=True)                       # STEP 42
ACTION: list3.islice(start=ival3,stop=ival0,reverse=True) 
ival3 = 14 : <type 'int'>
ival0 = 0 : <type 'int'>
list3 = SortedList([0, 0], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [0, 0] : <type 'list'>
REFERENCE ACTION: list_REF3.islice(start=ival3,stop=ival0,reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'islice'
==================================================
sval9 = 'a'                                                             # STEP 43
ACTION: sval9 = 'a' 
sval9 = None : <type 'NoneType'>
=> sval9 = 'a' : <type 'str'>
==================================================
list3.islice(start=ival7,stop=ival7,reverse=True)                       # STEP 44
ACTION: list3.islice(start=ival7,stop=ival7,reverse=True) 
ival7 = -2 : <type 'int'>
list3 = SortedList([0, 0], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [0, 0] : <type 'list'>
REFERENCE ACTION: list_REF3.islice(start=ival7,stop=ival7,reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'islice'
==================================================
list3.islice(start=ival2,stop=ival4,reverse=True)                       # STEP 45
ACTION: list3.islice(start=ival2,stop=ival4,reverse=True) 
ival2 = 392 : <type 'int'>
ival4 = 0 : <type 'int'>
list3 = SortedList([0, 0], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [0, 0] : <type 'list'>
REFERENCE ACTION: list_REF3.islice(start=ival2,stop=ival4,reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'islice'
==================================================
setListSlice(list3,ival2,ival3,list4)                                   # STEP 46
ACTION: setListSlice(list3,ival2,ival3,list4) 
ival2 = 392 : <type 'int'>
ival3 = 14 : <type 'int'>
list3 = SortedList([0, 0], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [0, 0] : <type 'list'>
list_REF4 = [] : <type 'list'>
REFERENCE ACTION: sortListSetSlice(list_REF3,ival2,ival3,list_REF4) 
==================================================
ival7 = ival5 + ival2                                                   # STEP 47
ACTION: ival7 = ival5 + ival2 
ival5 = 378 : <type 'int'>
ival2 = 392 : <type 'int'>
ival7 = -2 : <type 'int'>
=> ival7 = 770 : <type 'int'>
==================================================
ival2 = ival5 + ival4                                                   # STEP 48
ACTION: ival2 = ival5 + ival4 
ival5 = 378 : <type 'int'>
ival4 = 0 : <type 'int'>
ival2 = 392 : <type 'int'>
=> ival2 = 378 : <type 'int'>
==================================================
val1 = ival1                                                            # STEP 49
ACTION: val1 = ival1 
ival1 = 8 : <type 'int'>
val1 = None : <type 'NoneType'>
=> val1 = 8 : <type 'int'>
==================================================
val5 = ival8                                                            # STEP 50
ACTION: val5 = ival8 
ival8 = 388 : <type 'int'>
val5 = None : <type 'NoneType'>
=> val5 = 388 : <type 'int'>
==================================================
sval0 = sval1 + sval5                                                   # STEP 51
ACTION: sval0 = sval1 + sval5 
sval1 = 'c' : <type 'str'>
sval5 = 'm' : <type 'str'>
sval0 = None : <type 'NoneType'>
=> sval0 = 'cm' : <type 'str'>
==================================================
ival4 = ival7 - ival7                                                   # STEP 52
ACTION: ival4 = ival7 - ival7 
ival7 = 770 : <type 'int'>
ival4 = 0 : <type 'int'>
==================================================
ival3 = ival3 - ival9                                                   # STEP 53
ACTION: ival3 = ival3 - ival9 
ival3 = 14 : <type 'int'>
ival9 = 6 : <type 'int'>
=> ival3 = 8 : <type 'int'>
==================================================
set3 = sortedcontainers.SortedSet()                                     # STEP 54
ACTION: set3 = sortedcontainers.SortedSet() 
set3 = None : <type 'NoneType'>
set_REF3 = None : <type 'NoneType'>
=> set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF3 = set([]) 
=> set_REF3 = set([]) : <type 'set'>
==================================================
sval7 = sval1 + sval3                                                   # STEP 55
ACTION: sval7 = sval1 + sval3 
sval1 = 'c' : <type 'str'>
sval3 = 'n' : <type 'str'>
sval7 = None : <type 'NoneType'>
=> sval7 = 'cn' : <type 'str'>
==================================================
set1.irange(minimum=val7,maximum=val2,inclusive=(True,False))           # STEP 56
ACTION: set1.irange(minimum=val7,maximum=val2,inclusive=(True,False)) 
set1 = SortedSet([0], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
val7 = 8 : <type 'int'>
val2 = -392 : <type 'int'>
set_REF1 = set([0]) : <type 'set'>
REFERENCE ACTION: set_REF1.irange(minimum=val7,maximum=val2,inclusive=(True,False)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'irange'
==================================================
setListSlice(list4,ival9,ival4,list4)                                   # STEP 57
ACTION: setListSlice(list4,ival9,ival4,list4) 
ival9 = 6 : <type 'int'>
ival4 = 0 : <type 'int'>
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = [] : <type 'list'>
REFERENCE ACTION: sortListSetSlice(list_REF4,ival9,ival4,list_REF4) 
==================================================
ival8 = 12                                                              # STEP 58
ACTION: ival8 = 12 
ival8 = 388 : <type 'int'>
=> ival8 = 12 : <type 'int'>
==================================================
set3.irange(minimum=val4,maximum=val2,inclusive=(True,False),reverse=True)  # STEP 59
ACTION: set3.irange(minimum=val4,maximum=val2,inclusive=(True,False),reverse=True) 
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
val4 = 0 : <type 'int'>
val2 = -392 : <type 'int'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF3.irange(minimum=val4,maximum=val2,inclusive=(True,False),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'irange'
==================================================
list4.insert(ival0,val2)                                                # STEP 60
ACTION: list4.insert(ival0,val2) 
ival0 = 0 : <type 'int'>
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val2 = -392 : <type 'int'>
list_REF4 = [] : <type 'list'>
=> list4 = SortedList([-392], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: sortListInsert(list_REF4,ival0,val2) 
=> list_REF4 = [-392] : <type 'list'>
==================================================
setListSlice(list4,ival2,ival1,list3)                                   # STEP 61
ACTION: setListSlice(list4,ival2,ival1,list3) 
ival2 = 378 : <type 'int'>
ival1 = 8 : <type 'int'>
list4 = SortedList([-392], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list3 = SortedList([0, 0], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = [-392] : <type 'list'>
list_REF3 = [0, 0] : <type 'list'>
=> list4 = SortedList([-392, 0, 0], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: sortListSetSlice(list_REF4,ival2,ival1,list_REF3) 
=> list_REF4 = [-392, 0, 0] : <type 'list'>
==================================================
ival9 = ival3 + ival0                                                   # STEP 62
ACTION: ival9 = ival3 + ival0 
ival3 = 8 : <type 'int'>
ival0 = 0 : <type 'int'>
ival9 = 6 : <type 'int'>
=> ival9 = 8 : <type 'int'>
==================================================
setListSlice(list4,ival1,ival4,list3)                                   # STEP 63
ACTION: setListSlice(list4,ival1,ival4,list3) 
ival1 = 8 : <type 'int'>
ival4 = 0 : <type 'int'>
list4 = SortedList([-392, 0, 0], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list3 = SortedList([0, 0], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = [-392, 0, 0] : <type 'list'>
list_REF3 = [0, 0] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> 0 not in sort order at index 0
REFERENCE ACTION: sortListSetSlice(list_REF4,ival1,ival4,list_REF3) 
=> list_REF4 = [-392, 0, 0, 0, 0] : <type 'list'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1212e4518>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306261, in check
    assert self.p_list[4] == self.p_list_REF[4]
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #67 STEP #97 (0:00:30.000285) Mon Nov 20 16:24:36 2017 [ 401 stmts 535 branches ] (no cov+ for 7 tests) 6661 TOTAL ACTIONS (222.031224701/s)
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 13
STOPPING TESTING DUE TO TIMEOUT
22.9934082978 PERCENT COVERED
60.2091009617 TOTAL RUNTIME
133 EXECUTED
13177 TOTAL TEST OPERATIONS
4.72296333313 TIME SPENT EXECUTING TEST OPERATIONS
46.9572227001 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
3.58714866638 TIME SPENT CHECKING PROPERTIES
8.31011199951 TOTAL TIME SPENT RUNNING SUT
0.474525928497 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
sval5 = 'm'                                                              # STEP 0
set1 = sortedcontainers.SortedSet()                                      # STEP 1
list3 = sortedcontainers.SortedList()                                    # STEP 2
ival3 = 14                                                               # STEP 3
sval3 = 'n'                                                              # STEP 4
sval1 = 'c'                                                              # STEP 5
sval6 = 'i'                                                              # STEP 6
ival5 = 16                                                               # STEP 7
ival8 = 18                                                               # STEP 8
ival9 = ival5 + ival5                                                    # STEP 9
plist2 = list3 [ival5 : ival9]                                          # STEP 10
list4 = sortedcontainers.SortedList()                                   # STEP 11
ival7 = 1                                                               # STEP 12
ival4 = ival8 - ival7                                                   # STEP 13
ival7 = ival3 - ival5                                                   # STEP 14
plist4 = list3 [ival4 : ival7]                                          # STEP 15
plist0 = list4 [ival4 : ival4]                                          # STEP 16
ival8 = ival4 - ival9                                                   # STEP 17
plist3 = list3 [ival5 : ival3]                                          # STEP 18
list4.islice(start=ival8,stop=ival9,reverse=True)                       # STEP 19
ival4 = ival9 - ival9                                                   # STEP 20
ival1 = 8                                                               # STEP 21
ival9 = ival9 * ival4                                                   # STEP 22
list4.islice(start=ival1,stop=ival5,reverse=True)                       # STEP 23
val4 = ival4                                                            # STEP 24
plist1 = list3 [ival1 : ival9]                                          # STEP 25
ival5 = ival3 + ival3                                                   # STEP 26
ival8 = ival7 + ival7                                                   # STEP 27
set1.clear()                                                            # STEP 28
val7 = ival1                                                            # STEP 29
ival0 = ival3 * ival9                                                   # STEP 30
ival2 = ival3 * ival5                                                   # STEP 31
ival5 = ival1 - ival5                                                   # STEP 32
list3.insert(ival8,val4)                                                # STEP 33
set1.update(list3)                                                      # STEP 34
list3.islice(start=ival5,stop=ival0,reverse=True)                       # STEP 35
list3.insert(ival4,val4)                                                # STEP 36
ival9 = ival9 - ival2                                                   # STEP 37
val2 = ival9                                                            # STEP 38
ival5 = ival2 - ival3                                                   # STEP 39
ival8 = ival8 - ival9                                                   # STEP 40
ival9 = ival7 + ival1                                                   # STEP 41
list3.islice(start=ival3,stop=ival0,reverse=True)                       # STEP 42
sval9 = 'a'                                                             # STEP 43
list3.islice(start=ival7,stop=ival7,reverse=True)                       # STEP 44
list3.islice(start=ival2,stop=ival4,reverse=True)                       # STEP 45
setListSlice(list3,ival2,ival3,list4)                                   # STEP 46
ival7 = ival5 + ival2                                                   # STEP 47
ival2 = ival5 + ival4                                                   # STEP 48
val1 = ival1                                                            # STEP 49
val5 = ival8                                                            # STEP 50
sval0 = sval1 + sval5                                                   # STEP 51
ival4 = ival7 - ival7                                                   # STEP 52
ival3 = ival3 - ival9                                                   # STEP 53
set3 = sortedcontainers.SortedSet()                                     # STEP 54
sval7 = sval1 + sval3                                                   # STEP 55
set1.irange(minimum=val7,maximum=val2,inclusive=(True,False))           # STEP 56
setListSlice(list4,ival9,ival4,list4)                                   # STEP 57
ival8 = 12                                                              # STEP 58
set3.irange(minimum=val4,maximum=val2,inclusive=(True,False),reverse=True)  # STEP 59
list4.insert(ival0,val2)                                                # STEP 60
setListSlice(list4,ival2,ival1,list3)                                   # STEP 61
ival9 = ival3 + ival0                                                   # STEP 62
setListSlice(list4,ival1,ival4,list3)                                   # STEP 63
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1212e4518>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306261, in check
    assert self.p_list[4] == self.p_list_REF[4]
583 BRANCHES COVERED
438 STATEMENTS COVERED

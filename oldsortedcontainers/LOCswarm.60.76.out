Random testing using config=Config(noExceptionMatch=False, generalize=False, localize=False, speed='FAST', probs='locsample.probs', LOCBaseline=0.2, noAlphaConvert=False, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, html=None, keepLast=False, stopWhenNoCoverage=None, generateLOC=None, computeFeatureStats=False, Pmutate=0.0, timeout=60, output='failure.10999.test', markov=None, noSwarmDependencies=False, startExploit=0.0, maxMustHitBranch=None, useHints=False, silentFail=False, highLowSwarm=None, maxMustHitStatement=None, progress=False, postCover=False, swarmLength=None, noCover=False, noEnumerateEnabled=False, full=True, swarmP=0.5, coverFile='coverage.out', markovP=1.0, swarmProbs=None, genDepth=None, exploitCeiling=0.1, logging=None, noCheck=False, throughput=False, uncaught=False, swarmSwitch=None, verbose=False, reducePool=False, exploit=None, fastQuickAnalysis=False, total=False, verboseExploit=False, swarm=True, sequenceP=1.0, biasLOC=None, timedProgress=30, relax=False, ddmin=False, stutter=None, readQuick=False, verboseActions=False, quickAnalysis=False, noReassign=False, sequenceSize=3, LOCProbs=False, sequencesFromTests=None, maxTests=-1, trackMaxCoverage=None, useQuickSequences=False, exploitBestHint=1, failedLogging=None, stopWhenStatements=None, greedyStutter=False, seed=None, stopWhenHitStatement=None, uniqueValuesAnalysis=False, normalize=False, startExploitStall=0, enumerateEnabled=False, internal=False, profile=False, multiple=True, stopWhenBranches=None, running=False, compareFails=False, Pcrossover=0.2, stopWhenHitBranch=None, depth=100, showActions=False)
TEST #17 STEP #15 (0:00:30.042129) Mon Nov 20 19:50:17 2017 [ 395 stmts 521 branches ] (no cov+ for 1 tests) 1615 TOTAL ACTIONS (53.7578411258/s)
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x120c5e368>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 702166, in act11953
    self.p_list[0].extend(self.p_list[3])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
Original test has 98 steps

SAVING TEST AS failure.10999.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
dict3 = sortedcontainers.SortedDict()                                    # STEP 0
ACTION: dict3 = sortedcontainers.SortedDict() 
dict3 = None : <type 'NoneType'>
dict_REF3 = None : <type 'NoneType'>
=> dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF3 = {} 
=> dict_REF3 = {} : <type 'dict'>
==================================================
result = len(dict3)                                                      # STEP 1
ACTION: result = len(dict3) 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF3) 
==================================================
set0 = sortedcontainers.SortedSet()                                      # STEP 2
ACTION: set0 = sortedcontainers.SortedSet() 
set0 = None : <type 'NoneType'>
set_REF0 = None : <type 'NoneType'>
=> set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF0 = set([]) 
=> set_REF0 = set([]) : <type 'set'>
==================================================
dict0 = sortedcontainers.SortedDict()                                    # STEP 3
ACTION: dict0 = sortedcontainers.SortedDict() 
dict0 = None : <type 'NoneType'>
dict_REF0 = None : <type 'NoneType'>
=> dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF0 = {} 
=> dict_REF0 = {} : <type 'dict'>
==================================================
dict1 = dict3.copy()                                                     # STEP 4
ACTION: dict1 = dict3.copy() 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict1 = None : <type 'NoneType'>
dict_REF3 = {} : <type 'dict'>
dict_REF1 = None : <type 'NoneType'>
=> dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF1 = dict_REF3.copy() 
=> dict_REF1 = {} : <type 'dict'>
==================================================
result = len(dict0)                                                      # STEP 5
ACTION: result = len(dict0) 
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF0) 
==================================================
sval1 = 'A'                                                              # STEP 6
ACTION: sval1 = 'A' 
sval1 = None : <type 'NoneType'>
=> sval1 = 'A' : <type 'str'>
==================================================
dict2 = dict1.copy()                                                     # STEP 7
ACTION: dict2 = dict1.copy() 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict2 = None : <type 'NoneType'>
dict_REF1 = {} : <type 'dict'>
dict_REF2 = None : <type 'NoneType'>
=> dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF2 = dict_REF1.copy() 
=> dict_REF2 = {} : <type 'dict'>
==================================================
set3 = set0 ^ set0                                                       # STEP 8
ACTION: set3 = set0 ^ set0 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set3 = None : <type 'NoneType'>
set_REF0 = set([]) : <type 'set'>
set_REF3 = None : <type 'NoneType'>
=> set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF3 = set_REF0 ^ set_REF0 
=> set_REF3 = set([]) : <type 'set'>
==================================================
set1 = set0 | set3                                                       # STEP 9
ACTION: set1 = set0 | set3 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set1 = None : <type 'NoneType'>
set_REF0 = set([]) : <type 'set'>
set_REF3 = set([]) : <type 'set'>
set_REF1 = None : <type 'NoneType'>
=> set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF1 = set_REF0 | set_REF3 
=> set_REF1 = set([]) : <type 'set'>
==================================================
result = dict2 == dict2                                                 # STEP 10
ACTION: result = dict2 == dict2 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = dict_REF2 == dict_REF2 
==================================================
list2 = sortedcontainers.SortedList()                                   # STEP 11
ACTION: list2 = sortedcontainers.SortedList() 
list2 = None : <type 'NoneType'>
list_REF2 = None : <type 'NoneType'>
=> list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: list_REF2 = [] 
=> list_REF2 = [] : <type 'list'>
==================================================
list2.extend(list2)                                                     # STEP 12
ACTION: list2.extend(list2) 
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF2 = [] : <type 'list'>
REFERENCE ACTION: sortListExtend(list_REF2,list_REF2) 
==================================================
dict0 = dict1.copy()                                                    # STEP 13
ACTION: dict0 = dict1.copy() 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {} : <type 'dict'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF0 = dict_REF1.copy() 
==================================================
set0 = set1 | set1                                                      # STEP 14
ACTION: set0 = set1 | set1 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF1 = set([]) : <type 'set'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF0 = set_REF1 | set_REF1 
==================================================
result = dict0 == dict3                                                 # STEP 15
ACTION: result = dict0 == dict3 
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF0 = {} : <type 'dict'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = dict_REF0 == dict_REF3 
==================================================
list2.extend(list2)                                                     # STEP 16
ACTION: list2.extend(list2) 
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF2 = [] : <type 'list'>
REFERENCE ACTION: sortListExtend(list_REF2,list_REF2) 
==================================================
result = sorted(list(dict0.values()))                                   # STEP 17
ACTION: result = sorted(list(dict0.values())) 
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = sorted(list(dict_REF0.values())) 
==================================================
sval2 = sval1 + sval1                                                   # STEP 18
ACTION: sval2 = sval1 + sval1 
sval1 = 'A' : <type 'str'>
sval2 = None : <type 'NoneType'>
=> sval2 = 'AA' : <type 'str'>
==================================================
result = dict3.popitem()                                                # STEP 19
ACTION: result = dict3.popitem() 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.KeyError'> 'popitem(): dictionary is empty'
REFERENCE ACTION: result_REF = sortDictPopitem(dict_REF3,) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.KeyError'> 
==================================================
sval6 = 'V'                                                             # STEP 20
ACTION: sval6 = 'V' 
sval6 = None : <type 'NoneType'>
=> sval6 = 'V' : <type 'str'>
==================================================
list2.islice(start=None,stop=None)                                      # STEP 21
ACTION: list2.islice(start=None,stop=None) 
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF2 = [] : <type 'list'>
REFERENCE ACTION: list_REF2.islice(start=None,stop=None) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'islice'
==================================================
result = dict3 == dict3                                                 # STEP 22
ACTION: result = dict3 == dict3 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = dict_REF3 == dict_REF3 
==================================================
result = len(dict2)                                                     # STEP 23
ACTION: result = len(dict2) 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF2) 
==================================================
sval7 = 'H'                                                             # STEP 24
ACTION: sval7 = 'H' 
sval7 = None : <type 'NoneType'>
=> sval7 = 'H' : <type 'str'>
==================================================
set1 = set3 | set1                                                      # STEP 25
ACTION: set1 = set3 | set1 
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF3 = set([]) : <type 'set'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1 = set_REF3 | set_REF1 
==================================================
dict1 = dict1.copy()                                                    # STEP 26
ACTION: dict1 = dict1.copy() 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF1 = dict_REF1.copy() 
==================================================
sval0 = sval7 + sval6                                                   # STEP 27
ACTION: sval0 = sval7 + sval6 
sval7 = 'H' : <type 'str'>
sval6 = 'V' : <type 'str'>
sval0 = None : <type 'NoneType'>
=> sval0 = 'HV' : <type 'str'>
==================================================
list2.extend(list2)                                                     # STEP 28
ACTION: list2.extend(list2) 
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF2 = [] : <type 'list'>
REFERENCE ACTION: sortListExtend(list_REF2,list_REF2) 
==================================================
sval1 = sval1 + sval6                                                   # STEP 29
ACTION: sval1 = sval1 + sval6 
sval1 = 'A' : <type 'str'>
sval6 = 'V' : <type 'str'>
=> sval1 = 'AV' : <type 'str'>
==================================================
result = len(dict1)                                                     # STEP 30
ACTION: result = len(dict1) 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF1) 
==================================================
set3 = set0 | set1                                                      # STEP 31
ACTION: set3 = set0 | set1 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
set_REF1 = set([]) : <type 'set'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF3 = set_REF0 | set_REF1 
==================================================
sval5 = sval7 + sval7                                                   # STEP 32
ACTION: sval5 = sval7 + sval7 
sval7 = 'H' : <type 'str'>
sval5 = None : <type 'NoneType'>
=> sval5 = 'HH' : <type 'str'>
==================================================
set0 = sortedcontainers.SortedSet()                                     # STEP 33
ACTION: set0 = sortedcontainers.SortedSet() 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF0 = set([]) 
==================================================
set4 = sortedcontainers.SortedSet()                                     # STEP 34
ACTION: set4 = sortedcontainers.SortedSet() 
set4 = None : <type 'NoneType'>
set_REF4 = None : <type 'NoneType'>
=> set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF4 = set([]) 
=> set_REF4 = set([]) : <type 'set'>
==================================================
result = dict1.peekitem()                                               # STEP 35
ACTION: result = dict1.peekitem() 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {} : <type 'dict'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: result_REF = sortDictPeekitem(dict_REF1,) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
==================================================
ival5 = 9                                                               # STEP 36
ACTION: ival5 = 9 
ival5 = None : <type 'NoneType'>
=> ival5 = 9 : <type 'int'>
==================================================
result = len(dict3)                                                     # STEP 37
ACTION: result = len(dict3) 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF3) 
==================================================
ival0 = ival5 + ival5                                                   # STEP 38
ACTION: ival0 = ival5 + ival5 
ival5 = 9 : <type 'int'>
ival0 = None : <type 'NoneType'>
=> ival0 = 18 : <type 'int'>
==================================================
result = len(dict0)                                                     # STEP 39
ACTION: result = len(dict0) 
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF0) 
==================================================
dict0 = sortedcontainers.SortedDict()                                   # STEP 40
ACTION: dict0 = sortedcontainers.SortedDict() 
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF0 = {} 
==================================================
sval8 = 'L'                                                             # STEP 41
ACTION: sval8 = 'L' 
sval8 = None : <type 'NoneType'>
=> sval8 = 'L' : <type 'str'>
==================================================
ival6 = 11                                                              # STEP 42
ACTION: ival6 = 11 
ival6 = None : <type 'NoneType'>
=> ival6 = 11 : <type 'int'>
==================================================
result = dict2 == dict3                                                 # STEP 43
ACTION: result = dict2 == dict3 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF2 = {} : <type 'dict'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = dict_REF2 == dict_REF3 
==================================================
ival9 = ival0 - ival6                                                   # STEP 44
ACTION: ival9 = ival0 - ival6 
ival0 = 18 : <type 'int'>
ival6 = 11 : <type 'int'>
ival9 = None : <type 'NoneType'>
=> ival9 = 7 : <type 'int'>
==================================================
ival2 = ival6 * ival5                                                   # STEP 45
ACTION: ival2 = ival6 * ival5 
ival6 = 11 : <type 'int'>
ival5 = 9 : <type 'int'>
ival2 = None : <type 'NoneType'>
=> ival2 = 99 : <type 'int'>
==================================================
set4.islice(start=None,stop=ival0)                                      # STEP 46
ACTION: set4.islice(start=None,stop=ival0) 
ival0 = 18 : <type 'int'>
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF4 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF4.islice(start=None,stop=ival0) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'islice'
==================================================
set1 = set1 ^ set1                                                      # STEP 47
ACTION: set1 = set1 ^ set1 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1 = set_REF1 ^ set_REF1 
==================================================
ival0 = ival9 + ival9                                                   # STEP 48
ACTION: ival0 = ival9 + ival9 
ival9 = 7 : <type 'int'>
ival0 = 18 : <type 'int'>
=> ival0 = 14 : <type 'int'>
==================================================
ival1 = 13                                                              # STEP 49
ACTION: ival1 = 13 
ival1 = None : <type 'NoneType'>
=> ival1 = 13 : <type 'int'>
==================================================
result = dict2.peekitem(ival0)                                          # STEP 50
ACTION: result = dict2.peekitem(ival0) 
ival0 = 14 : <type 'int'>
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF2 = {} : <type 'dict'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: result_REF = sortDictPeekitem(dict_REF2,ival0) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
==================================================
dict4 = sortedcontainers.SortedDict()                                   # STEP 51
ACTION: dict4 = sortedcontainers.SortedDict() 
dict4 = None : <type 'NoneType'>
dict_REF4 = None : <type 'NoneType'>
=> dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF4 = {} 
=> dict_REF4 = {} : <type 'dict'>
==================================================
val9 = ival2                                                            # STEP 52
ACTION: val9 = ival2 
ival2 = 99 : <type 'int'>
val9 = None : <type 'NoneType'>
=> val9 = 99 : <type 'int'>
==================================================
set4.islice(start=None,stop=ival1)                                      # STEP 53
ACTION: set4.islice(start=None,stop=ival1) 
ival1 = 13 : <type 'int'>
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF4 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF4.islice(start=None,stop=ival1) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'islice'
==================================================
val4 = ival1                                                            # STEP 54
ACTION: val4 = ival1 
ival1 = 13 : <type 'int'>
val4 = None : <type 'NoneType'>
=> val4 = 13 : <type 'int'>
==================================================
result = dict4 == dict0                                                 # STEP 55
ACTION: result = dict4 == dict0 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF4 = {} : <type 'dict'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = dict_REF4 == dict_REF0 
==================================================
setList(list2,ival2,val4)                                               # STEP 56
ACTION: setList(list2,ival2,val4) 
ival2 = 99 : <type 'int'>
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val4 = 13 : <type 'int'>
list_REF2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: sortListSet(list_REF2,ival2,val4) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list assignment index out of range
==================================================
set4 = set0 ^ set1                                                      # STEP 57
ACTION: set4 = set0 ^ set1 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
set_REF1 = set([]) : <type 'set'>
set_REF4 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF4 = set_REF0 ^ set_REF1 
==================================================
result = dict0.peekitem(ival5)                                          # STEP 58
ACTION: result = dict0.peekitem(ival5) 
ival5 = 9 : <type 'int'>
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF0 = {} : <type 'dict'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: result_REF = sortDictPeekitem(dict_REF0,ival5) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
==================================================
list2.add(val9)                                                         # STEP 59
ACTION: list2.add(val9) 
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val9 = 99 : <type 'int'>
list_REF2 = [] : <type 'list'>
=> list2 = SortedList([99], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: sortListAdd(list_REF2,val9) 
=> list_REF2 = [99] : <type 'list'>
==================================================
set4 ^= set4                                                            # STEP 60
ACTION: set4 ^= set4 
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF4 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF4 ^= set_REF4 
==================================================
dict3.irange(minimum=val9,maximum=val9,inclusive=(True,False))          # STEP 61
ACTION: dict3.irange(minimum=val9,maximum=val9,inclusive=(True,False)) 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val9 = 99 : <type 'int'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF3.irange(minimum=val9,maximum=val9,inclusive=(True,False)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'irange'
==================================================
ival5 = ival9 + ival9                                                   # STEP 62
ACTION: ival5 = ival9 + ival9 
ival9 = 7 : <type 'int'>
ival5 = 9 : <type 'int'>
=> ival5 = 14 : <type 'int'>
==================================================
setList(list2,ival2,val9)                                               # STEP 63
ACTION: setList(list2,ival2,val9) 
ival2 = 99 : <type 'int'>
list2 = SortedList([99], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val9 = 99 : <type 'int'>
list_REF2 = [99] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: sortListSet(list_REF2,ival2,val9) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list assignment index out of range
==================================================
dict1.irange(minimum=val4,maximum=val4,inclusive=(False,True),reverse=True)  # STEP 64
ACTION: dict1.irange(minimum=val4,maximum=val4,inclusive=(False,True),reverse=True) 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val4 = 13 : <type 'int'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF1.irange(minimum=val4,maximum=val4,inclusive=(False,True),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'irange'
==================================================
sval7 = sval0 + sval8                                                   # STEP 65
ACTION: sval7 = sval0 + sval8 
sval0 = 'HV' : <type 'str'>
sval8 = 'L' : <type 'str'>
sval7 = 'H' : <type 'str'>
=> sval7 = 'HVL' : <type 'str'>
==================================================
setList(list2,ival0,val9)                                               # STEP 66
ACTION: setList(list2,ival0,val9) 
ival0 = 14 : <type 'int'>
list2 = SortedList([99], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val9 = 99 : <type 'int'>
list_REF2 = [99] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: sortListSet(list_REF2,ival0,val9) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list assignment index out of range
==================================================
ival4 = 5                                                               # STEP 67
ACTION: ival4 = 5 
ival4 = None : <type 'NoneType'>
=> ival4 = 5 : <type 'int'>
==================================================
ival6 = ival0 * ival9                                                   # STEP 68
ACTION: ival6 = ival0 * ival9 
ival0 = 14 : <type 'int'>
ival9 = 7 : <type 'int'>
ival6 = 11 : <type 'int'>
=> ival6 = 98 : <type 'int'>
==================================================
result = (dict4.keys()).count(val9)                                     # STEP 69
ACTION: result = (dict4.keys()).count(val9)  
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val9 = 99 : <type 'int'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = (dict_REF4.keys()).count(val9)  
==================================================
set4 = set3 | set3                                                      # STEP 70
ACTION: set4 = set3 | set3 
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF3 = set([]) : <type 'set'>
set_REF4 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF4 = set_REF3 | set_REF3 
==================================================
set0 = set0 ^ set4                                                      # STEP 71
ACTION: set0 = set0 ^ set4 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
set_REF4 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF0 = set_REF0 ^ set_REF4 
==================================================
list2.irange(minimum=val9,maximum=val4,inclusive=(False,True))          # STEP 72
ACTION: list2.irange(minimum=val9,maximum=val4,inclusive=(False,True)) 
list2 = SortedList([99], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val9 = 99 : <type 'int'>
val4 = 13 : <type 'int'>
list_REF2 = [99] : <type 'list'>
REFERENCE ACTION: list_REF2.irange(minimum=val9,maximum=val4,inclusive=(False,True)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
result = len(dict1.items())                                             # STEP 73
ACTION: result = len(dict1.items())  
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF1.items())  
==================================================
result = (dict0.keys()).count(val9)                                     # STEP 74
ACTION: result = (dict0.keys()).count(val9)  
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val9 = 99 : <type 'int'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = (dict_REF0.keys()).count(val9)  
==================================================
dict0 = sortedcontainers.SortedDict()                                   # STEP 75
ACTION: dict0 = sortedcontainers.SortedDict() 
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF0 = {} 
==================================================
set4 = set4 | set3                                                      # STEP 76
ACTION: set4 = set4 | set3 
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF4 = set([]) : <type 'set'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF4 = set_REF4 | set_REF3 
==================================================
set0 ^= set0                                                            # STEP 77
ACTION: set0 ^= set0 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF0 ^= set_REF0 
==================================================
list3 = sortedcontainers.SortedList()                                   # STEP 78
ACTION: list3 = sortedcontainers.SortedList() 
list3 = None : <type 'NoneType'>
list_REF3 = None : <type 'NoneType'>
=> list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: list_REF3 = [] 
=> list_REF3 = [] : <type 'list'>
==================================================
result = dict0.peekitem()                                               # STEP 79
ACTION: result = dict0.peekitem() 
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF0 = {} : <type 'dict'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: result_REF = sortDictPeekitem(dict_REF0,) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
==================================================
list0 = sortedcontainers.SortedList()                                   # STEP 80
ACTION: list0 = sortedcontainers.SortedList() 
list0 = None : <type 'NoneType'>
list_REF0 = None : <type 'NoneType'>
=> list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: list_REF0 = [] 
=> list_REF0 = [] : <type 'list'>
==================================================
result = sorted(list(dict0.values()))                                   # STEP 81
ACTION: result = sorted(list(dict0.values())) 
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = sorted(list(dict_REF0.values())) 
==================================================
dict4 = sortedcontainers.SortedDict()                                   # STEP 82
ACTION: dict4 = sortedcontainers.SortedDict() 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF4 = {} 
==================================================
set3 = set3 | set1                                                      # STEP 83
ACTION: set3 = set3 | set1 
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF3 = set([]) : <type 'set'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF3 = set_REF3 | set_REF1 
==================================================
setList(list0,ival4,val9)                                               # STEP 84
ACTION: setList(list0,ival4,val9) 
ival4 = 5 : <type 'int'>
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val9 = 99 : <type 'int'>
list_REF0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: sortListSet(list_REF0,ival4,val9) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list assignment index out of range
==================================================
setList(list0,ival0,val4)                                               # STEP 85
ACTION: setList(list0,ival0,val4) 
ival0 = 14 : <type 'int'>
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val4 = 13 : <type 'int'>
list_REF0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: sortListSet(list_REF0,ival0,val4) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list assignment index out of range
==================================================
result = dict4 == dict4                                                 # STEP 86
ACTION: result = dict4 == dict4 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = dict_REF4 == dict_REF4 
==================================================
result = (dict4.keys()).count(val4)                                     # STEP 87
ACTION: result = (dict4.keys()).count(val4)  
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val4 = 13 : <type 'int'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = (dict_REF4.keys()).count(val4)  
==================================================
list0+=list2                                                            # STEP 88
ACTION: list0+=list2 
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list2 = SortedList([99], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF0 = [] : <type 'list'>
list_REF2 = [99] : <type 'list'>
=> list0 = SortedList([99], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: sortListMultiAdd(list_REF0,list_REF2) 
=> list_REF0 = [99] : <type 'list'>
==================================================
val2 = ival0                                                            # STEP 89
ACTION: val2 = ival0 
ival0 = 14 : <type 'int'>
val2 = None : <type 'NoneType'>
=> val2 = 14 : <type 'int'>
==================================================
ival7 = ival5 + ival5                                                   # STEP 90
ACTION: ival7 = ival5 + ival5 
ival5 = 14 : <type 'int'>
ival7 = None : <type 'NoneType'>
=> ival7 = 28 : <type 'int'>
==================================================
result = (dict3.keys()).count(val4)                                     # STEP 91
ACTION: result = (dict3.keys()).count(val4)  
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val4 = 13 : <type 'int'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = (dict_REF3.keys()).count(val4)  
==================================================
result = dict4 == dict3                                                 # STEP 92
ACTION: result = dict4 == dict3 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF4 = {} : <type 'dict'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = dict_REF4 == dict_REF3 
==================================================
dict0.islice(start=ival6,stop=ival1)                                    # STEP 93
ACTION: dict0.islice(start=ival6,stop=ival1) 
ival6 = 98 : <type 'int'>
ival1 = 13 : <type 'int'>
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF0.islice(start=ival6,stop=ival1) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'islice'
==================================================
result = (dict0.keys()).count(val9)                                     # STEP 94
ACTION: result = (dict0.keys()).count(val9)  
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val9 = 99 : <type 'int'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = (dict_REF0.keys()).count(val9)  
==================================================
ival5 = ival7 + ival4                                                   # STEP 95
ACTION: ival5 = ival7 + ival4 
ival7 = 28 : <type 'int'>
ival4 = 5 : <type 'int'>
ival5 = 14 : <type 'int'>
=> ival5 = 33 : <type 'int'>
==================================================
set1.islice(start=None,stop=ival7)                                      # STEP 96
ACTION: set1.islice(start=None,stop=ival7) 
ival7 = 28 : <type 'int'>
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1.islice(start=None,stop=ival7) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'islice'
==================================================
list0.extend(list3)                                                     # STEP 97
ACTION: list0.extend(list3) 
list0 = SortedList([99], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF0 = [99] : <type 'list'>
list_REF3 = [] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x120d01f38>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 702166, in act11953
    self.p_list[0].extend(self.p_list[3])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 26
STOPPING TESTING DUE TO TIMEOUT
23.4974796433 PERCENT COVERED
60.2341341972 TOTAL RUNTIME
34 EXECUTED
3324 TOTAL TEST OPERATIONS
1.83849668503 TIME SPENT EXECUTING TEST OPERATIONS
54.8331289291 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
1.62016034126 TIME SPENT CHECKING PROPERTIES
3.45865702629 TOTAL TIME SPENT RUNNING SUT
0.484081983566 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
dict3 = sortedcontainers.SortedDict()                                    # STEP 0
result = len(dict3)                                                      # STEP 1
set0 = sortedcontainers.SortedSet()                                      # STEP 2
dict0 = sortedcontainers.SortedDict()                                    # STEP 3
dict1 = dict3.copy()                                                     # STEP 4
result = len(dict0)                                                      # STEP 5
sval1 = 'A'                                                              # STEP 6
dict2 = dict1.copy()                                                     # STEP 7
set3 = set0 ^ set0                                                       # STEP 8
set1 = set0 | set3                                                       # STEP 9
result = dict2 == dict2                                                 # STEP 10
list2 = sortedcontainers.SortedList()                                   # STEP 11
list2.extend(list2)                                                     # STEP 12
dict0 = dict1.copy()                                                    # STEP 13
set0 = set1 | set1                                                      # STEP 14
result = dict0 == dict3                                                 # STEP 15
list2.extend(list2)                                                     # STEP 16
result = sorted(list(dict0.values()))                                   # STEP 17
sval2 = sval1 + sval1                                                   # STEP 18
result = dict3.popitem()                                                # STEP 19
sval6 = 'V'                                                             # STEP 20
list2.islice(start=None,stop=None)                                      # STEP 21
result = dict3 == dict3                                                 # STEP 22
result = len(dict2)                                                     # STEP 23
sval7 = 'H'                                                             # STEP 24
set1 = set3 | set1                                                      # STEP 25
dict1 = dict1.copy()                                                    # STEP 26
sval0 = sval7 + sval6                                                   # STEP 27
list2.extend(list2)                                                     # STEP 28
sval1 = sval1 + sval6                                                   # STEP 29
result = len(dict1)                                                     # STEP 30
set3 = set0 | set1                                                      # STEP 31
sval5 = sval7 + sval7                                                   # STEP 32
set0 = sortedcontainers.SortedSet()                                     # STEP 33
set4 = sortedcontainers.SortedSet()                                     # STEP 34
result = dict1.peekitem()                                               # STEP 35
ival5 = 9                                                               # STEP 36
result = len(dict3)                                                     # STEP 37
ival0 = ival5 + ival5                                                   # STEP 38
result = len(dict0)                                                     # STEP 39
dict0 = sortedcontainers.SortedDict()                                   # STEP 40
sval8 = 'L'                                                             # STEP 41
ival6 = 11                                                              # STEP 42
result = dict2 == dict3                                                 # STEP 43
ival9 = ival0 - ival6                                                   # STEP 44
ival2 = ival6 * ival5                                                   # STEP 45
set4.islice(start=None,stop=ival0)                                      # STEP 46
set1 = set1 ^ set1                                                      # STEP 47
ival0 = ival9 + ival9                                                   # STEP 48
ival1 = 13                                                              # STEP 49
result = dict2.peekitem(ival0)                                          # STEP 50
dict4 = sortedcontainers.SortedDict()                                   # STEP 51
val9 = ival2                                                            # STEP 52
set4.islice(start=None,stop=ival1)                                      # STEP 53
val4 = ival1                                                            # STEP 54
result = dict4 == dict0                                                 # STEP 55
setList(list2,ival2,val4)                                               # STEP 56
set4 = set0 ^ set1                                                      # STEP 57
result = dict0.peekitem(ival5)                                          # STEP 58
list2.add(val9)                                                         # STEP 59
set4 ^= set4                                                            # STEP 60
dict3.irange(minimum=val9,maximum=val9,inclusive=(True,False))          # STEP 61
ival5 = ival9 + ival9                                                   # STEP 62
setList(list2,ival2,val9)                                               # STEP 63
dict1.irange(minimum=val4,maximum=val4,inclusive=(False,True),reverse=True)  # STEP 64
sval7 = sval0 + sval8                                                   # STEP 65
setList(list2,ival0,val9)                                               # STEP 66
ival4 = 5                                                               # STEP 67
ival6 = ival0 * ival9                                                   # STEP 68
result = (dict4.keys()).count(val9)                                     # STEP 69
set4 = set3 | set3                                                      # STEP 70
set0 = set0 ^ set4                                                      # STEP 71
list2.irange(minimum=val9,maximum=val4,inclusive=(False,True))          # STEP 72
result = len(dict1.items())                                             # STEP 73
result = (dict0.keys()).count(val9)                                     # STEP 74
dict0 = sortedcontainers.SortedDict()                                   # STEP 75
set4 = set4 | set3                                                      # STEP 76
set0 ^= set0                                                            # STEP 77
list3 = sortedcontainers.SortedList()                                   # STEP 78
result = dict0.peekitem()                                               # STEP 79
list0 = sortedcontainers.SortedList()                                   # STEP 80
result = sorted(list(dict0.values()))                                   # STEP 81
dict4 = sortedcontainers.SortedDict()                                   # STEP 82
set3 = set3 | set1                                                      # STEP 83
setList(list0,ival4,val9)                                               # STEP 84
setList(list0,ival0,val4)                                               # STEP 85
result = dict4 == dict4                                                 # STEP 86
result = (dict4.keys()).count(val4)                                     # STEP 87
list0+=list2                                                            # STEP 88
val2 = ival0                                                            # STEP 89
ival7 = ival5 + ival5                                                   # STEP 90
result = (dict3.keys()).count(val4)                                     # STEP 91
result = dict4 == dict3                                                 # STEP 92
dict0.islice(start=ival6,stop=ival1)                                    # STEP 93
result = (dict0.keys()).count(val9)                                     # STEP 94
ival5 = ival7 + ival4                                                   # STEP 95
set1.islice(start=None,stop=ival7)                                      # STEP 96
list0.extend(list3)                                                     # STEP 97
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x120d01f38>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 702166, in act11953
    self.p_list[0].extend(self.p_list[3])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
596 BRANCHES COVERED
455 STATEMENTS COVERED

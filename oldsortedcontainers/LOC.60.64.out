Random testing using config=Config(noExceptionMatch=False, generalize=False, localize=False, speed='FAST', probs='locsample.probs', LOCBaseline=0.2, noAlphaConvert=False, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, html=None, keepLast=False, stopWhenNoCoverage=None, generateLOC=None, computeFeatureStats=False, Pmutate=0.0, timeout=60, output='failure.10764.test', markov=None, noSwarmDependencies=False, startExploit=0.0, maxMustHitBranch=None, useHints=False, silentFail=False, highLowSwarm=None, maxMustHitStatement=None, progress=False, postCover=False, swarmLength=None, noCover=False, noEnumerateEnabled=False, full=True, swarmP=0.5, coverFile='coverage.out', markovP=1.0, swarmProbs=None, genDepth=None, exploitCeiling=0.1, logging=None, noCheck=False, throughput=False, uncaught=False, swarmSwitch=None, verbose=False, reducePool=False, exploit=None, fastQuickAnalysis=False, total=False, verboseExploit=False, swarm=False, sequenceP=1.0, biasLOC=None, timedProgress=30, relax=False, ddmin=False, stutter=None, readQuick=False, verboseActions=False, quickAnalysis=False, noReassign=False, sequenceSize=3, LOCProbs=False, sequencesFromTests=None, maxTests=-1, trackMaxCoverage=None, useQuickSequences=False, exploitBestHint=1, failedLogging=None, stopWhenStatements=None, greedyStutter=False, seed=None, stopWhenHitStatement=None, uniqueValuesAnalysis=False, normalize=False, startExploitStall=0, enumerateEnabled=False, internal=False, profile=False, multiple=True, stopWhenBranches=None, running=False, compareFails=False, Pcrossover=0.2, stopWhenHitBranch=None, depth=100, showActions=False)
TEST #12 STEP #0 (0:00:30.124314) Mon Nov 20 18:31:29 2017 [ 436 stmts 570 branches ] 1100 TOTAL ACTIONS (36.5153542568/s)
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x11fb00d88>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 702994, in act11967
    self.p_list[3].extend(self.p_list[2])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
Original test has 86 steps

SAVING TEST AS failure.10764.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
dict1 = sortedcontainers.SortedDict()                                    # STEP 0
ACTION: dict1 = sortedcontainers.SortedDict() 
dict1 = None : <type 'NoneType'>
dict_REF1 = None : <type 'NoneType'>
=> dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF1 = {} 
=> dict_REF1 = {} : <type 'dict'>
==================================================
ival9 = 19                                                               # STEP 1
ACTION: ival9 = 19 
ival9 = None : <type 'NoneType'>
=> ival9 = 19 : <type 'int'>
==================================================
result = sorted(list(dict1.keys()))                                      # STEP 2
ACTION: result = sorted(list(dict1.keys())) 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = sorted(list(dict_REF1.keys())) 
==================================================
ival0 = ival9 + ival9                                                    # STEP 3
ACTION: ival0 = ival9 + ival9 
ival9 = 19 : <type 'int'>
ival0 = None : <type 'NoneType'>
=> ival0 = 38 : <type 'int'>
==================================================
ival2 = ival9 - ival0                                                    # STEP 4
ACTION: ival2 = ival9 - ival0 
ival9 = 19 : <type 'int'>
ival0 = 38 : <type 'int'>
ival2 = None : <type 'NoneType'>
=> ival2 = -19 : <type 'int'>
==================================================
result = dict1 == dict1                                                  # STEP 5
ACTION: result = dict1 == dict1 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = dict_REF1 == dict_REF1 
==================================================
dict1 = dict1.copy()                                                     # STEP 6
ACTION: dict1 = dict1.copy() 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF1 = dict_REF1.copy() 
==================================================
set2 = sortedcontainers.SortedSet()                                      # STEP 7
ACTION: set2 = sortedcontainers.SortedSet() 
set2 = None : <type 'NoneType'>
set_REF2 = None : <type 'NoneType'>
=> set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF2 = set([]) 
=> set_REF2 = set([]) : <type 'set'>
==================================================
dict2 = sortedcontainers.SortedDict()                                    # STEP 8
ACTION: dict2 = sortedcontainers.SortedDict() 
dict2 = None : <type 'NoneType'>
dict_REF2 = None : <type 'NoneType'>
=> dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF2 = {} 
=> dict_REF2 = {} : <type 'dict'>
==================================================
result = dict2.popitem(last=False)                                       # STEP 9
ACTION: result = dict2.popitem(last=False) 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF2 = {} : <type 'dict'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.KeyError'> 'popitem(): dictionary is empty'
REFERENCE ACTION: result_REF = sortDictPopitem(dict_REF2,last=False) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.KeyError'> 
==================================================
result = dict1.peekitem()                                               # STEP 10
ACTION: result = dict1.peekitem() 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {} : <type 'dict'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: result_REF = sortDictPeekitem(dict_REF1,) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
==================================================
dict0 = dict2.copy()                                                    # STEP 11
ACTION: dict0 = dict2.copy() 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict0 = None : <type 'NoneType'>
dict_REF2 = {} : <type 'dict'>
dict_REF0 = None : <type 'NoneType'>
=> dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF0 = dict_REF2.copy() 
=> dict_REF0 = {} : <type 'dict'>
==================================================
set3 = set2.copy()                                                      # STEP 12
ACTION: set3 = set2.copy() 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set3 = None : <type 'NoneType'>
set_REF2 = set([]) : <type 'set'>
set_REF3 = None : <type 'NoneType'>
=> set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF3 = set_REF2.copy() 
=> set_REF3 = set([]) : <type 'set'>
==================================================
dict1.islice(start=None,stop=ival0)                                     # STEP 13
ACTION: dict1.islice(start=None,stop=ival0) 
ival0 = 38 : <type 'int'>
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF1.islice(start=None,stop=ival0) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'islice'
==================================================
result = len(dict1.keys())                                              # STEP 14
ACTION: result = len(dict1.keys())  
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF1.keys())  
==================================================
dict2.islice(start=ival2,stop=ival9,reverse=True)                       # STEP 15
ACTION: dict2.islice(start=ival2,stop=ival9,reverse=True) 
ival2 = -19 : <type 'int'>
ival9 = 19 : <type 'int'>
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF2.islice(start=ival2,stop=ival9,reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'islice'
==================================================
ival3 = ival9 - ival2                                                   # STEP 16
ACTION: ival3 = ival9 - ival2 
ival9 = 19 : <type 'int'>
ival2 = -19 : <type 'int'>
ival3 = None : <type 'NoneType'>
=> ival3 = 38 : <type 'int'>
==================================================
ival1 = ival2 * ival3                                                   # STEP 17
ACTION: ival1 = ival2 * ival3 
ival2 = -19 : <type 'int'>
ival3 = 38 : <type 'int'>
ival1 = None : <type 'NoneType'>
=> ival1 = -722 : <type 'int'>
==================================================
set3 ^= set3                                                            # STEP 18
ACTION: set3 ^= set3 
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF3 ^= set_REF3 
==================================================
dict0.islice(start=None,stop=ival0)                                     # STEP 19
ACTION: dict0.islice(start=None,stop=ival0) 
ival0 = 38 : <type 'int'>
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF0.islice(start=None,stop=ival0) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'islice'
==================================================
result = dict0.peekitem()                                               # STEP 20
ACTION: result = dict0.peekitem() 
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF0 = {} : <type 'dict'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: result_REF = sortDictPeekitem(dict_REF0,) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
==================================================
result = sorted(list(dict2.keys()))                                     # STEP 21
ACTION: result = sorted(list(dict2.keys())) 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = sorted(list(dict_REF2.keys())) 
==================================================
set0 = set3.union(set3)                                                 # STEP 22
ACTION: set0 = set3.union(set3) 
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set0 = None : <type 'NoneType'>
set_REF3 = set([]) : <type 'set'>
set_REF0 = None : <type 'NoneType'>
=> set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF0 = set_REF3.union(set_REF3) 
=> set_REF0 = set([]) : <type 'set'>
==================================================
result = len(dict0)                                                     # STEP 23
ACTION: result = len(dict0) 
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF0) 
==================================================
result = len(dict0)                                                     # STEP 24
ACTION: result = len(dict0) 
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF0) 
==================================================
result = len(dict1.keys())                                              # STEP 25
ACTION: result = len(dict1.keys())  
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF1.keys())  
==================================================
sval5 = 'm'                                                             # STEP 26
ACTION: sval5 = 'm' 
sval5 = None : <type 'NoneType'>
=> sval5 = 'm' : <type 'str'>
==================================================
set2 = set0 | set2                                                      # STEP 27
ACTION: set2 = set0 | set2 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF2 = set_REF0 | set_REF2 
==================================================
set2 |= set3                                                            # STEP 28
ACTION: set2 |= set3 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF2 = set([]) : <type 'set'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF2 |= set_REF3 
==================================================
set0.islice(start=ival0,stop=ival1,reverse=True)                        # STEP 29
ACTION: set0.islice(start=ival0,stop=ival1,reverse=True) 
ival0 = 38 : <type 'int'>
ival1 = -722 : <type 'int'>
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF0.islice(start=ival0,stop=ival1,reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'islice'
==================================================
set0 = set0 | set0                                                      # STEP 30
ACTION: set0 = set0 | set0 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF0 = set_REF0 | set_REF0 
==================================================
result = len(dict2.keys())                                              # STEP 31
ACTION: result = len(dict2.keys())  
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF2.keys())  
==================================================
dict3 = sortedcontainers.SortedDict()                                   # STEP 32
ACTION: dict3 = sortedcontainers.SortedDict() 
dict3 = None : <type 'NoneType'>
dict_REF3 = None : <type 'NoneType'>
=> dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF3 = {} 
=> dict_REF3 = {} : <type 'dict'>
==================================================
result = len(dict3.keys())                                              # STEP 33
ACTION: result = len(dict3.keys())  
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF3.keys())  
==================================================
set3 = set3 - set3                                                      # STEP 34
ACTION: set3 = set3 - set3 
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF3 = set_REF3 - set_REF3 
==================================================
set4 = set3.union(set2)                                                 # STEP 35
ACTION: set4 = set3.union(set2) 
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set4 = None : <type 'NoneType'>
set_REF3 = set([]) : <type 'set'>
set_REF2 = set([]) : <type 'set'>
set_REF4 = None : <type 'NoneType'>
=> set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF4 = set_REF3.union(set_REF2) 
=> set_REF4 = set([]) : <type 'set'>
==================================================
set0 ^= set4                                                            # STEP 36
ACTION: set0 ^= set4 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
set_REF4 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF0 ^= set_REF4 
==================================================
val1 = ival2                                                            # STEP 37
ACTION: val1 = ival2 
ival2 = -19 : <type 'int'>
val1 = None : <type 'NoneType'>
=> val1 = -19 : <type 'int'>
==================================================
result = (dict0.keys()).count(val1)                                     # STEP 38
ACTION: result = (dict0.keys()).count(val1)  
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val1 = -19 : <type 'int'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = (dict_REF0.keys()).count(val1)  
==================================================
dict2 = dict1.copy()                                                    # STEP 39
ACTION: dict2 = dict1.copy() 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {} : <type 'dict'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF2 = dict_REF1.copy() 
==================================================
list3 = sortedcontainers.SortedList()                                   # STEP 40
ACTION: list3 = sortedcontainers.SortedList() 
list3 = None : <type 'NoneType'>
list_REF3 = None : <type 'NoneType'>
=> list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: list_REF3 = [] 
=> list_REF3 = [] : <type 'list'>
==================================================
result = (dict0.keys()).count(val1)                                     # STEP 41
ACTION: result = (dict0.keys()).count(val1)  
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val1 = -19 : <type 'int'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = (dict_REF0.keys()).count(val1)  
==================================================
list3 <= list3                                                          # STEP 42
ACTION: list3 <= list3 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [] : <type 'list'>
REFERENCE ACTION: list_REF3 <= list_REF3 
==================================================
result = sorted(list(dict0.items()))                                    # STEP 43
ACTION: result = sorted(list(dict0.items())) 
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = sorted(list(dict_REF0.items())) 
==================================================
set4.irange(minimum=val1,maximum=val1,inclusive=(False,False))          # STEP 44
ACTION: set4.irange(minimum=val1,maximum=val1,inclusive=(False,False)) 
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
val1 = -19 : <type 'int'>
set_REF4 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF4.irange(minimum=val1,maximum=val1,inclusive=(False,False)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'irange'
==================================================
dict2.irange(minimum=val1,maximum=val1,inclusive=(True,False))          # STEP 45
ACTION: dict2.irange(minimum=val1,maximum=val1,inclusive=(True,False)) 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val1 = -19 : <type 'int'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF2.irange(minimum=val1,maximum=val1,inclusive=(True,False)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'irange'
==================================================
set4 = set0 - set4                                                      # STEP 46
ACTION: set4 = set0 - set4 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
set_REF4 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF4 = set_REF0 - set_REF4 
==================================================
result = dict3 == dict1                                                 # STEP 47
ACTION: result = dict3 == dict1 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = dict_REF3 == dict_REF1 
==================================================
list2 = sortedcontainers.SortedList()                                   # STEP 48
ACTION: list2 = sortedcontainers.SortedList() 
list2 = None : <type 'NoneType'>
list_REF2 = None : <type 'NoneType'>
=> list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: list_REF2 = [] 
=> list_REF2 = [] : <type 'list'>
==================================================
set1 = set2 | set3                                                      # STEP 49
ACTION: set1 = set2 | set3 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set1 = None : <type 'NoneType'>
set_REF2 = set([]) : <type 'set'>
set_REF3 = set([]) : <type 'set'>
set_REF1 = None : <type 'NoneType'>
=> set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF1 = set_REF2 | set_REF3 
=> set_REF1 = set([]) : <type 'set'>
==================================================
repr(list3)                                                             # STEP 50
ACTION: repr(list3) 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [] : <type 'list'>
REFERENCE ACTION: repr(list_REF3) 
==================================================
dict2 = sortedcontainers.SortedDict()                                   # STEP 51
ACTION: dict2 = sortedcontainers.SortedDict() 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF2 = {} 
==================================================
result = (dict1.keys()).count(val1)                                     # STEP 52
ACTION: result = (dict1.keys()).count(val1)  
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val1 = -19 : <type 'int'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = (dict_REF1.keys()).count(val1)  
==================================================
dict4 = dict2.fromkeys(set2,val1) ; result = dict4                      # STEP 53
ACTION: dict4 = dict2.fromkeys(set2,val1) ; result = dict4 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict4 = None : <type 'NoneType'>
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
val1 = -19 : <type 'int'>
dict_REF2 = {} : <type 'dict'>
dict_REF4 = None : <type 'NoneType'>
set_REF2 = set([]) : <type 'set'>
=> dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF4 = dict_REF2.fromkeys(set_REF2,val1) ; result_REF = dict_REF4 
=> dict_REF4 = {} : <type 'dict'>
==================================================
set2.islice(start=None,stop=None)                                       # STEP 54
ACTION: set2.islice(start=None,stop=None) 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF2.islice(start=None,stop=None) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'islice'
==================================================
set2 &= set1                                                            # STEP 55
ACTION: set2 &= set1 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF2 = set([]) : <type 'set'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF2 &= set_REF1 
==================================================
ival4 = ival3 + ival0                                                   # STEP 56
ACTION: ival4 = ival3 + ival0 
ival3 = 38 : <type 'int'>
ival0 = 38 : <type 'int'>
ival4 = None : <type 'NoneType'>
=> ival4 = 76 : <type 'int'>
==================================================
set3 = set4.union(set3)                                                 # STEP 57
ACTION: set3 = set4.union(set3) 
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF4 = set([]) : <type 'set'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF3 = set_REF4.union(set_REF3) 
==================================================
result = dict3.peekitem(ival0)                                          # STEP 58
ACTION: result = dict3.peekitem(ival0) 
ival0 = 38 : <type 'int'>
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: result_REF = sortDictPeekitem(dict_REF3,ival0) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
==================================================
result = (dict3.keys()).count(val1)                                     # STEP 59
ACTION: result = (dict3.keys()).count(val1)  
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val1 = -19 : <type 'int'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = (dict_REF3.keys()).count(val1)  
==================================================
set0 = set0.copy()                                                      # STEP 60
ACTION: set0 = set0.copy() 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF0 = set_REF0.copy() 
==================================================
plist2 = list2 [ival3 : ival2]                                          # STEP 61
ACTION: plist2 = list2 [ival3 : ival2] 
ival3 = 38 : <type 'int'>
ival2 = -19 : <type 'int'>
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
plist2 = None : <type 'NoneType'>
list_REF2 = [] : <type 'list'>
=> plist2 = [] : <type 'list'>
REFERENCE ACTION: plist2 = list_REF2 [ival3 : ival2] 
==================================================
ival6 = ival9 * ival9                                                   # STEP 62
ACTION: ival6 = ival9 * ival9 
ival9 = 19 : <type 'int'>
ival6 = None : <type 'NoneType'>
=> ival6 = 361 : <type 'int'>
==================================================
set0.islice(start=None,stop=ival2)                                      # STEP 63
ACTION: set0.islice(start=None,stop=ival2) 
ival2 = -19 : <type 'int'>
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF0.islice(start=None,stop=ival2) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'islice'
==================================================
set1 = set2 | set3                                                      # STEP 64
ACTION: set1 = set2 | set3 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF2 = set([]) : <type 'set'>
set_REF3 = set([]) : <type 'set'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1 = set_REF2 | set_REF3 
==================================================
result = dict0.peekitem(ival0)                                          # STEP 65
ACTION: result = dict0.peekitem(ival0) 
ival0 = 38 : <type 'int'>
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF0 = {} : <type 'dict'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: result_REF = sortDictPeekitem(dict_REF0,ival0) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
==================================================
list3.add(val1)                                                         # STEP 66
ACTION: list3.add(val1) 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val1 = -19 : <type 'int'>
list_REF3 = [] : <type 'list'>
=> list3 = SortedList([-19], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: sortListAdd(list_REF3,val1) 
=> list_REF3 = [-19] : <type 'list'>
==================================================
set4 = set4.copy()                                                      # STEP 67
ACTION: set4 = set4.copy() 
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF4 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF4 = set_REF4.copy() 
==================================================
list2.irange(minimum=val1,maximum=val1,inclusive=(False,True),reverse=True)  # STEP 68
ACTION: list2.irange(minimum=val1,maximum=val1,inclusive=(False,True),reverse=True) 
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val1 = -19 : <type 'int'>
list_REF2 = [] : <type 'list'>
REFERENCE ACTION: list_REF2.irange(minimum=val1,maximum=val1,inclusive=(False,True),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
result = dict4 != dict3                                                 # STEP 69
ACTION: result = dict4 != dict3 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF4 = {} : <type 'dict'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = dict_REF4 != dict_REF3 
==================================================
val1 in dict3                                                           # STEP 70
ACTION: val1 in dict3 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val1 = -19 : <type 'int'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: val1 in dict_REF3 
==================================================
result = len(dict1)                                                     # STEP 71
ACTION: result = len(dict1) 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF1) 
==================================================
result = (dict0.keys()).count(val1)                                     # STEP 72
ACTION: result = (dict0.keys()).count(val1)  
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val1 = -19 : <type 'int'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = (dict_REF0.keys()).count(val1)  
==================================================
result = dict2 != dict0                                                 # STEP 73
ACTION: result = dict2 != dict0 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF2 = {} : <type 'dict'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = dict_REF2 != dict_REF0 
==================================================
dict0 = dict3.fromkeys(list3,val1) ; result = dict0                     # STEP 74
ACTION: dict0 = dict3.fromkeys(list3,val1) ; result = dict0 
list3 = SortedList([-19], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val1 = -19 : <type 'int'>
list_REF3 = [-19] : <type 'list'>
dict_REF3 = {} : <type 'dict'>
dict_REF0 = {} : <type 'dict'>
=> dict0 = SortedDict(None, 1000, {-19: -19}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF0 = dict_REF3.fromkeys(list_REF3,val1) ; result_REF = dict_REF0 
=> dict_REF0 = {-19: -19} : <type 'dict'>
==================================================
dict4 = dict3.fromkeys(list2,val1) ; result = dict4                     # STEP 75
ACTION: dict4 = dict3.fromkeys(list2,val1) ; result = dict4 
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val1 = -19 : <type 'int'>
list_REF2 = [] : <type 'list'>
dict_REF3 = {} : <type 'dict'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF4 = dict_REF3.fromkeys(list_REF2,val1) ; result_REF = dict_REF4 
==================================================
dict1.irange(minimum=val1,maximum=val1,inclusive=(True,False),reverse=True)  # STEP 76
ACTION: dict1.irange(minimum=val1,maximum=val1,inclusive=(True,False),reverse=True) 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val1 = -19 : <type 'int'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF1.irange(minimum=val1,maximum=val1,inclusive=(True,False),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'irange'
==================================================
list2.update(set0)                                                      # STEP 77
ACTION: list2.update(set0) 
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
list_REF2 = [] : <type 'list'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: sortListMultiAdd(list_REF2,set_REF0) 
==================================================
result = dict0.peekitem(ival3)                                          # STEP 78
ACTION: result = dict0.peekitem(ival3) 
ival3 = 38 : <type 'int'>
dict0 = SortedDict(None, 1000, {-19: -19}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF0 = {-19: -19} : <type 'dict'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: result_REF = sortDictPeekitem(dict_REF0,ival3) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
==================================================
setListSlice(list2,ival0,ival2,list2)                                   # STEP 79
ACTION: setListSlice(list2,ival0,ival2,list2) 
ival0 = 38 : <type 'int'>
ival2 = -19 : <type 'int'>
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF2 = [] : <type 'list'>
REFERENCE ACTION: sortListSetSlice(list_REF2,ival0,ival2,list_REF2) 
==================================================
list4 = sortedcontainers.SortedList(plist2)                             # STEP 80
ACTION: list4 = sortedcontainers.SortedList(plist2) 
list4 = None : <type 'NoneType'>
plist2 = [] : <type 'list'>
list_REF4 = None : <type 'NoneType'>
=> list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: list_REF4 = list(plist2) 
=> list_REF4 = [] : <type 'list'>
==================================================
dict2.irange(minimum=val1,maximum=val1,inclusive=(False,False))         # STEP 81
ACTION: dict2.irange(minimum=val1,maximum=val1,inclusive=(False,False)) 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val1 = -19 : <type 'int'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF2.irange(minimum=val1,maximum=val1,inclusive=(False,False)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'irange'
==================================================
val7 = sval5                                                            # STEP 82
ACTION: val7 = sval5 
sval5 = 'm' : <type 'str'>
val7 = None : <type 'NoneType'>
=> val7 = 'm' : <type 'str'>
==================================================
dict2.islice(start=None,stop=ival3)                                     # STEP 83
ACTION: dict2.islice(start=None,stop=ival3) 
ival3 = 38 : <type 'int'>
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF2.islice(start=None,stop=ival3) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'islice'
==================================================
set0 = set4 | set0                                                      # STEP 84
ACTION: set0 = set4 | set0 
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF4 = set([]) : <type 'set'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF0 = set_REF4 | set_REF0 
==================================================
list3.extend(list2)                                                     # STEP 85
ACTION: list3.extend(list2) 
list3 = SortedList([-19], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [-19] : <type 'list'>
list_REF2 = [] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x11f9f9fc8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 702994, in act11967
    self.p_list[3].extend(self.p_list[2])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 3
STOPPING TESTING DUE TO TIMEOUT
24.9709189608 PERCENT COVERED
60.237434864 TOTAL RUNTIME
24 EXECUTED
2289 TOTAL TEST OPERATIONS
1.42175459862 TIME SPENT EXECUTING TEST OPERATIONS
56.5207042694 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
1.33549690247 TIME SPENT CHECKING PROPERTIES
2.75725150108 TOTAL TIME SPENT RUNNING SUT
0.473205566406 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
dict1 = sortedcontainers.SortedDict()                                    # STEP 0
ival9 = 19                                                               # STEP 1
result = sorted(list(dict1.keys()))                                      # STEP 2
ival0 = ival9 + ival9                                                    # STEP 3
ival2 = ival9 - ival0                                                    # STEP 4
result = dict1 == dict1                                                  # STEP 5
dict1 = dict1.copy()                                                     # STEP 6
set2 = sortedcontainers.SortedSet()                                      # STEP 7
dict2 = sortedcontainers.SortedDict()                                    # STEP 8
result = dict2.popitem(last=False)                                       # STEP 9
result = dict1.peekitem()                                               # STEP 10
dict0 = dict2.copy()                                                    # STEP 11
set3 = set2.copy()                                                      # STEP 12
dict1.islice(start=None,stop=ival0)                                     # STEP 13
result = len(dict1.keys())                                              # STEP 14
dict2.islice(start=ival2,stop=ival9,reverse=True)                       # STEP 15
ival3 = ival9 - ival2                                                   # STEP 16
ival1 = ival2 * ival3                                                   # STEP 17
set3 ^= set3                                                            # STEP 18
dict0.islice(start=None,stop=ival0)                                     # STEP 19
result = dict0.peekitem()                                               # STEP 20
result = sorted(list(dict2.keys()))                                     # STEP 21
set0 = set3.union(set3)                                                 # STEP 22
result = len(dict0)                                                     # STEP 23
result = len(dict0)                                                     # STEP 24
result = len(dict1.keys())                                              # STEP 25
sval5 = 'm'                                                             # STEP 26
set2 = set0 | set2                                                      # STEP 27
set2 |= set3                                                            # STEP 28
set0.islice(start=ival0,stop=ival1,reverse=True)                        # STEP 29
set0 = set0 | set0                                                      # STEP 30
result = len(dict2.keys())                                              # STEP 31
dict3 = sortedcontainers.SortedDict()                                   # STEP 32
result = len(dict3.keys())                                              # STEP 33
set3 = set3 - set3                                                      # STEP 34
set4 = set3.union(set2)                                                 # STEP 35
set0 ^= set4                                                            # STEP 36
val1 = ival2                                                            # STEP 37
result = (dict0.keys()).count(val1)                                     # STEP 38
dict2 = dict1.copy()                                                    # STEP 39
list3 = sortedcontainers.SortedList()                                   # STEP 40
result = (dict0.keys()).count(val1)                                     # STEP 41
list3 <= list3                                                          # STEP 42
result = sorted(list(dict0.items()))                                    # STEP 43
set4.irange(minimum=val1,maximum=val1,inclusive=(False,False))          # STEP 44
dict2.irange(minimum=val1,maximum=val1,inclusive=(True,False))          # STEP 45
set4 = set0 - set4                                                      # STEP 46
result = dict3 == dict1                                                 # STEP 47
list2 = sortedcontainers.SortedList()                                   # STEP 48
set1 = set2 | set3                                                      # STEP 49
repr(list3)                                                             # STEP 50
dict2 = sortedcontainers.SortedDict()                                   # STEP 51
result = (dict1.keys()).count(val1)                                     # STEP 52
dict4 = dict2.fromkeys(set2,val1) ; result = dict4                      # STEP 53
set2.islice(start=None,stop=None)                                       # STEP 54
set2 &= set1                                                            # STEP 55
ival4 = ival3 + ival0                                                   # STEP 56
set3 = set4.union(set3)                                                 # STEP 57
result = dict3.peekitem(ival0)                                          # STEP 58
result = (dict3.keys()).count(val1)                                     # STEP 59
set0 = set0.copy()                                                      # STEP 60
plist2 = list2 [ival3 : ival2]                                          # STEP 61
ival6 = ival9 * ival9                                                   # STEP 62
set0.islice(start=None,stop=ival2)                                      # STEP 63
set1 = set2 | set3                                                      # STEP 64
result = dict0.peekitem(ival0)                                          # STEP 65
list3.add(val1)                                                         # STEP 66
set4 = set4.copy()                                                      # STEP 67
list2.irange(minimum=val1,maximum=val1,inclusive=(False,True),reverse=True)  # STEP 68
result = dict4 != dict3                                                 # STEP 69
val1 in dict3                                                           # STEP 70
result = len(dict1)                                                     # STEP 71
result = (dict0.keys()).count(val1)                                     # STEP 72
result = dict2 != dict0                                                 # STEP 73
dict0 = dict3.fromkeys(list3,val1) ; result = dict0                     # STEP 74
dict4 = dict3.fromkeys(list2,val1) ; result = dict4                     # STEP 75
dict1.irange(minimum=val1,maximum=val1,inclusive=(True,False),reverse=True)  # STEP 76
list2.update(set0)                                                      # STEP 77
result = dict0.peekitem(ival3)                                          # STEP 78
setListSlice(list2,ival0,ival2,list2)                                   # STEP 79
list4 = sortedcontainers.SortedList(plist2)                             # STEP 80
dict2.irange(minimum=val1,maximum=val1,inclusive=(False,False))         # STEP 81
val7 = sval5                                                            # STEP 82
dict2.islice(start=None,stop=ival3)                                     # STEP 83
set0 = set4 | set0                                                      # STEP 84
list3.extend(list2)                                                     # STEP 85
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x11f9f9fc8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 702994, in act11967
    self.p_list[3].extend(self.p_list[2])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
623 BRANCHES COVERED
475 STATEMENTS COVERED

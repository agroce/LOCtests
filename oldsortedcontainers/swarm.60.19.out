Random testing using config=Config(noExceptionMatch=False, generalize=False, localize=False, speed='FAST', probs=None, LOCBaseline=0.2, noAlphaConvert=False, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, html=None, keepLast=False, stopWhenNoCoverage=None, generateLOC=None, computeFeatureStats=False, Pmutate=0.0, timeout=60, output='failure.61077.test', markov=None, noSwarmDependencies=False, startExploit=0.0, maxMustHitBranch=None, useHints=False, silentFail=False, highLowSwarm=None, maxMustHitStatement=None, progress=False, postCover=False, swarmLength=None, noCover=False, noEnumerateEnabled=False, full=True, swarmP=0.5, coverFile='coverage.out', markovP=1.0, swarmProbs=None, genDepth=None, exploitCeiling=0.1, logging=None, noCheck=False, throughput=False, uncaught=False, swarmSwitch=None, verbose=False, reducePool=False, exploit=None, fastQuickAnalysis=False, total=False, verboseExploit=False, swarm=True, sequenceP=1.0, biasLOC=None, timedProgress=30, relax=False, ddmin=False, stutter=None, readQuick=False, verboseActions=False, quickAnalysis=False, noReassign=False, sequenceSize=3, LOCProbs=False, sequencesFromTests=None, maxTests=-1, trackMaxCoverage=None, useQuickSequences=False, exploitBestHint=1, failedLogging=None, stopWhenStatements=None, greedyStutter=False, seed=None, stopWhenHitStatement=None, uniqueValuesAnalysis=False, normalize=False, startExploitStall=0, enumerateEnabled=False, internal=False, profile=False, multiple=True, stopWhenBranches=None, running=False, compareFails=False, Pcrossover=0.2, stopWhenHitBranch=None, depth=100, showActions=False)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1209a0cf8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306249, in check
    assert self.p_list[0] == self.p_list_REF[0]
Original test has 66 steps

SAVING TEST AS failure.61077.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
ival2 = 11                                                               # STEP 0
ACTION: ival2 = 11 
ival2 = None : <type 'NoneType'>
=> ival2 = 11 : <type 'int'>
==================================================
sval5 = 'o'                                                              # STEP 1
ACTION: sval5 = 'o' 
sval5 = None : <type 'NoneType'>
=> sval5 = 'o' : <type 'str'>
==================================================
ival8 = 6                                                                # STEP 2
ACTION: ival8 = 6 
ival8 = None : <type 'NoneType'>
=> ival8 = 6 : <type 'int'>
==================================================
sval0 = 'z'                                                              # STEP 3
ACTION: sval0 = 'z' 
sval0 = None : <type 'NoneType'>
=> sval0 = 'z' : <type 'str'>
==================================================
sval4 = 'd'                                                              # STEP 4
ACTION: sval4 = 'd' 
sval4 = None : <type 'NoneType'>
=> sval4 = 'd' : <type 'str'>
==================================================
ival4 = 2                                                                # STEP 5
ACTION: ival4 = 2 
ival4 = None : <type 'NoneType'>
=> ival4 = 2 : <type 'int'>
==================================================
ival3 = 3                                                                # STEP 6
ACTION: ival3 = 3 
ival3 = None : <type 'NoneType'>
=> ival3 = 3 : <type 'int'>
==================================================
ival9 = 11                                                               # STEP 7
ACTION: ival9 = 11 
ival9 = None : <type 'NoneType'>
=> ival9 = 11 : <type 'int'>
==================================================
sval3 = 'o'                                                              # STEP 8
ACTION: sval3 = 'o' 
sval3 = None : <type 'NoneType'>
=> sval3 = 'o' : <type 'str'>
==================================================
sval2 = sval4 + sval5                                                    # STEP 9
ACTION: sval2 = sval4 + sval5 
sval4 = 'd' : <type 'str'>
sval5 = 'o' : <type 'str'>
sval2 = None : <type 'NoneType'>
=> sval2 = 'do' : <type 'str'>
==================================================
sval8 = sval5 + sval5                                                   # STEP 10
ACTION: sval8 = sval5 + sval5 
sval5 = 'o' : <type 'str'>
sval8 = None : <type 'NoneType'>
=> sval8 = 'oo' : <type 'str'>
==================================================
val8 = ival4                                                            # STEP 11
ACTION: val8 = ival4 
ival4 = 2 : <type 'int'>
val8 = None : <type 'NoneType'>
=> val8 = 2 : <type 'int'>
==================================================
sval4 = 's'                                                             # STEP 12
ACTION: sval4 = 's' 
sval4 = 'd' : <type 'str'>
=> sval4 = 's' : <type 'str'>
==================================================
sval5 = 'b'                                                             # STEP 13
ACTION: sval5 = 'b' 
sval5 = 'o' : <type 'str'>
=> sval5 = 'b' : <type 'str'>
==================================================
ival5 = 19                                                              # STEP 14
ACTION: ival5 = 19 
ival5 = None : <type 'NoneType'>
=> ival5 = 19 : <type 'int'>
==================================================
ival6 = 11                                                              # STEP 15
ACTION: ival6 = 11 
ival6 = None : <type 'NoneType'>
=> ival6 = 11 : <type 'int'>
==================================================
val0 = ival4                                                            # STEP 16
ACTION: val0 = ival4 
ival4 = 2 : <type 'int'>
val0 = None : <type 'NoneType'>
=> val0 = 2 : <type 'int'>
==================================================
sval6 = 'n'                                                             # STEP 17
ACTION: sval6 = 'n' 
sval6 = None : <type 'NoneType'>
=> sval6 = 'n' : <type 'str'>
==================================================
sval1 = 'x'                                                             # STEP 18
ACTION: sval1 = 'x' 
sval1 = None : <type 'NoneType'>
=> sval1 = 'x' : <type 'str'>
==================================================
sval9 = sval1 + sval3                                                   # STEP 19
ACTION: sval9 = sval1 + sval3 
sval1 = 'x' : <type 'str'>
sval3 = 'o' : <type 'str'>
sval9 = None : <type 'NoneType'>
=> sval9 = 'xo' : <type 'str'>
==================================================
sval3 = sval3 + sval9                                                   # STEP 20
ACTION: sval3 = sval3 + sval9 
sval3 = 'o' : <type 'str'>
sval9 = 'xo' : <type 'str'>
=> sval3 = 'oxo' : <type 'str'>
==================================================
sval7 = sval4 + sval9                                                   # STEP 21
ACTION: sval7 = sval4 + sval9 
sval4 = 's' : <type 'str'>
sval9 = 'xo' : <type 'str'>
sval7 = None : <type 'NoneType'>
=> sval7 = 'sxo' : <type 'str'>
==================================================
sval1 = sval4 + sval1                                                   # STEP 22
ACTION: sval1 = sval4 + sval1 
sval4 = 's' : <type 'str'>
sval1 = 'x' : <type 'str'>
=> sval1 = 'sx' : <type 'str'>
==================================================
list0 = sortedcontainers.SortedList()                                   # STEP 23
ACTION: list0 = sortedcontainers.SortedList() 
list0 = None : <type 'NoneType'>
list_REF0 = None : <type 'NoneType'>
=> list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: list_REF0 = [] 
=> list_REF0 = [] : <type 'list'>
==================================================
list0.islice(start=ival8,stop=ival5,reverse=True)                       # STEP 24
ACTION: list0.islice(start=ival8,stop=ival5,reverse=True) 
ival8 = 6 : <type 'int'>
ival5 = 19 : <type 'int'>
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF0 = [] : <type 'list'>
REFERENCE ACTION: list_REF0.islice(start=ival8,stop=ival5,reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'islice'
==================================================
list0.islice(start=ival6,stop=ival5,reverse=True)                       # STEP 25
ACTION: list0.islice(start=ival6,stop=ival5,reverse=True) 
ival6 = 11 : <type 'int'>
ival5 = 19 : <type 'int'>
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF0 = [] : <type 'list'>
REFERENCE ACTION: list_REF0.islice(start=ival6,stop=ival5,reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'islice'
==================================================
result = list0.pop(ival3)                                               # STEP 26
ACTION: result = list0.pop(ival3) 
ival3 = 3 : <type 'int'>
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> pop index out of range
REFERENCE ACTION: result_REF = list_REF0.pop(ival3) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> pop from empty list
==================================================
ival5 = 20                                                              # STEP 27
ACTION: ival5 = 20 
ival5 = 19 : <type 'int'>
=> ival5 = 20 : <type 'int'>
==================================================
sval4 = 'f'                                                             # STEP 28
ACTION: sval4 = 'f' 
sval4 = 's' : <type 'str'>
=> sval4 = 'f' : <type 'str'>
==================================================
plist3 = list0 [ival2 : ival2]                                          # STEP 29
ACTION: plist3 = list0 [ival2 : ival2] 
ival2 = 11 : <type 'int'>
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
plist3 = None : <type 'NoneType'>
list_REF0 = [] : <type 'list'>
=> plist3 = [] : <type 'list'>
REFERENCE ACTION: plist3 = list_REF0 [ival2 : ival2] 
==================================================
list0.islice(start=ival4,stop=ival3,reverse=True)                       # STEP 30
ACTION: list0.islice(start=ival4,stop=ival3,reverse=True) 
ival4 = 2 : <type 'int'>
ival3 = 3 : <type 'int'>
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF0 = [] : <type 'list'>
REFERENCE ACTION: list_REF0.islice(start=ival4,stop=ival3,reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'islice'
==================================================
plist1 = list0 [ival8 : ival5]                                          # STEP 31
ACTION: plist1 = list0 [ival8 : ival5] 
ival8 = 6 : <type 'int'>
ival5 = 20 : <type 'int'>
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
plist1 = None : <type 'NoneType'>
list_REF0 = [] : <type 'list'>
=> plist1 = [] : <type 'list'>
REFERENCE ACTION: plist1 = list_REF0 [ival8 : ival5] 
==================================================
list0.islice(start=ival4,stop=ival9,reverse=True)                       # STEP 32
ACTION: list0.islice(start=ival4,stop=ival9,reverse=True) 
ival4 = 2 : <type 'int'>
ival9 = 11 : <type 'int'>
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF0 = [] : <type 'list'>
REFERENCE ACTION: list_REF0.islice(start=ival4,stop=ival9,reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'islice'
==================================================
ival6 = 8                                                               # STEP 33
ACTION: ival6 = 8 
ival6 = 11 : <type 'int'>
=> ival6 = 8 : <type 'int'>
==================================================
plist2 = list0 [ival6 : ival3]                                          # STEP 34
ACTION: plist2 = list0 [ival6 : ival3] 
ival6 = 8 : <type 'int'>
ival3 = 3 : <type 'int'>
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
plist2 = None : <type 'NoneType'>
list_REF0 = [] : <type 'list'>
=> plist2 = [] : <type 'list'>
REFERENCE ACTION: plist2 = list_REF0 [ival6 : ival3] 
==================================================
ival7 = 6                                                               # STEP 35
ACTION: ival7 = 6 
ival7 = None : <type 'NoneType'>
=> ival7 = 6 : <type 'int'>
==================================================
plist4 = list0 [ival5 : ival6]                                          # STEP 36
ACTION: plist4 = list0 [ival5 : ival6] 
ival5 = 20 : <type 'int'>
ival6 = 8 : <type 'int'>
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
plist4 = None : <type 'NoneType'>
list_REF0 = [] : <type 'list'>
=> plist4 = [] : <type 'list'>
REFERENCE ACTION: plist4 = list_REF0 [ival5 : ival6] 
==================================================
val1 = ival6                                                            # STEP 37
ACTION: val1 = ival6 
ival6 = 8 : <type 'int'>
val1 = None : <type 'NoneType'>
=> val1 = 8 : <type 'int'>
==================================================
list0.insert(ival2,val0)                                                # STEP 38
ACTION: list0.insert(ival2,val0) 
ival2 = 11 : <type 'int'>
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val0 = 2 : <type 'int'>
list_REF0 = [] : <type 'list'>
=> list0 = SortedList([2], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: sortListInsert(list_REF0,ival2,val0) 
=> list_REF0 = [2] : <type 'list'>
==================================================
plist0 = list0 [ival7 : ival3]                                          # STEP 39
ACTION: plist0 = list0 [ival7 : ival3] 
ival7 = 6 : <type 'int'>
ival3 = 3 : <type 'int'>
list0 = SortedList([2], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
plist0 = None : <type 'NoneType'>
list_REF0 = [2] : <type 'list'>
=> plist0 = [] : <type 'list'>
REFERENCE ACTION: plist0 = list_REF0 [ival7 : ival3] 
==================================================
ival8 = 15                                                              # STEP 40
ACTION: ival8 = 15 
ival8 = 6 : <type 'int'>
=> ival8 = 15 : <type 'int'>
==================================================
list0.insert(ival2,val8)                                                # STEP 41
ACTION: list0.insert(ival2,val8) 
ival2 = 11 : <type 'int'>
list0 = SortedList([2], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val8 = 2 : <type 'int'>
list_REF0 = [2] : <type 'list'>
=> list0 = SortedList([2, 2], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: sortListInsert(list_REF0,ival2,val8) 
=> list_REF0 = [2, 2] : <type 'list'>
==================================================
sval9 = sval9 + sval7                                                   # STEP 42
ACTION: sval9 = sval9 + sval7 
sval9 = 'xo' : <type 'str'>
sval7 = 'sxo' : <type 'str'>
=> sval9 = 'xosxo' : <type 'str'>
==================================================
list0.islice(start=ival8,stop=ival8)                                    # STEP 43
ACTION: list0.islice(start=ival8,stop=ival8) 
ival8 = 15 : <type 'int'>
list0 = SortedList([2, 2], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF0 = [2, 2] : <type 'list'>
REFERENCE ACTION: list_REF0.islice(start=ival8,stop=ival8) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'islice'
==================================================
ival5 = 4                                                               # STEP 44
ACTION: ival5 = 4 
ival5 = 20 : <type 'int'>
=> ival5 = 4 : <type 'int'>
==================================================
list2 = sortedcontainers.SortedList(plist3)                             # STEP 45
ACTION: list2 = sortedcontainers.SortedList(plist3) 
list2 = None : <type 'NoneType'>
plist3 = [] : <type 'list'>
list_REF2 = None : <type 'NoneType'>
=> list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: list_REF2 = list(plist3) 
=> list_REF2 = [] : <type 'list'>
==================================================
list2.islice(start=ival7,stop=ival6,reverse=True)                       # STEP 46
ACTION: list2.islice(start=ival7,stop=ival6,reverse=True) 
ival7 = 6 : <type 'int'>
ival6 = 8 : <type 'int'>
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF2 = [] : <type 'list'>
REFERENCE ACTION: list_REF2.islice(start=ival7,stop=ival6,reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'islice'
==================================================
list2.islice(start=ival8,stop=ival8,reverse=True)                       # STEP 47
ACTION: list2.islice(start=ival8,stop=ival8,reverse=True) 
ival8 = 15 : <type 'int'>
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF2 = [] : <type 'list'>
REFERENCE ACTION: list_REF2.islice(start=ival8,stop=ival8,reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'islice'
==================================================
ival0 = 18                                                              # STEP 48
ACTION: ival0 = 18 
ival0 = None : <type 'NoneType'>
=> ival0 = 18 : <type 'int'>
==================================================
list2.islice(start=ival4,stop=ival6,reverse=True)                       # STEP 49
ACTION: list2.islice(start=ival4,stop=ival6,reverse=True) 
ival4 = 2 : <type 'int'>
ival6 = 8 : <type 'int'>
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF2 = [] : <type 'list'>
REFERENCE ACTION: list_REF2.islice(start=ival4,stop=ival6,reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'islice'
==================================================
val0 = ival8                                                            # STEP 50
ACTION: val0 = ival8 
ival8 = 15 : <type 'int'>
val0 = 2 : <type 'int'>
=> val0 = 15 : <type 'int'>
==================================================
list2.islice(start=ival2,stop=ival0,reverse=True)                       # STEP 51
ACTION: list2.islice(start=ival2,stop=ival0,reverse=True) 
ival2 = 11 : <type 'int'>
ival0 = 18 : <type 'int'>
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF2 = [] : <type 'list'>
REFERENCE ACTION: list_REF2.islice(start=ival2,stop=ival0,reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'islice'
==================================================
setListSlice(list0,ival2,ival6,list2)                                   # STEP 52
ACTION: setListSlice(list0,ival2,ival6,list2) 
ival2 = 11 : <type 'int'>
ival6 = 8 : <type 'int'>
list0 = SortedList([2, 2], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF0 = [2, 2] : <type 'list'>
list_REF2 = [] : <type 'list'>
REFERENCE ACTION: sortListSetSlice(list_REF0,ival2,ival6,list_REF2) 
==================================================
list0.islice(start=ival2,stop=ival5,reverse=True)                       # STEP 53
ACTION: list0.islice(start=ival2,stop=ival5,reverse=True) 
ival2 = 11 : <type 'int'>
ival5 = 4 : <type 'int'>
list0 = SortedList([2, 2], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF0 = [2, 2] : <type 'list'>
REFERENCE ACTION: list_REF0.islice(start=ival2,stop=ival5,reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'islice'
==================================================
list2.insert(ival9,val0)                                                # STEP 54
ACTION: list2.insert(ival9,val0) 
ival9 = 11 : <type 'int'>
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val0 = 15 : <type 'int'>
list_REF2 = [] : <type 'list'>
=> list2 = SortedList([15], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: sortListInsert(list_REF2,ival9,val0) 
=> list_REF2 = [15] : <type 'list'>
==================================================
list2.islice(start=ival8,stop=ival0,reverse=True)                       # STEP 55
ACTION: list2.islice(start=ival8,stop=ival0,reverse=True) 
ival8 = 15 : <type 'int'>
ival0 = 18 : <type 'int'>
list2 = SortedList([15], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF2 = [15] : <type 'list'>
REFERENCE ACTION: list_REF2.islice(start=ival8,stop=ival0,reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'islice'
==================================================
setListSlice(list0,ival4,ival8,list0)                                   # STEP 56
ACTION: setListSlice(list0,ival4,ival8,list0) 
ival4 = 2 : <type 'int'>
ival8 = 15 : <type 'int'>
list0 = SortedList([2, 2], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF0 = [2, 2] : <type 'list'>
REFERENCE ACTION: sortListSetSlice(list_REF0,ival4,ival8,list_REF0) 
==================================================
ival4 = 4                                                               # STEP 57
ACTION: ival4 = 4 
ival4 = 2 : <type 'int'>
=> ival4 = 4 : <type 'int'>
==================================================
plist3 = list0 [ival2 : ival7]                                          # STEP 58
ACTION: plist3 = list0 [ival2 : ival7] 
ival2 = 11 : <type 'int'>
ival7 = 6 : <type 'int'>
list0 = SortedList([2, 2], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
plist3 = [] : <type 'list'>
list_REF0 = [2, 2] : <type 'list'>
REFERENCE ACTION: plist3 = list_REF0 [ival2 : ival7] 
==================================================
setListSlice(list2,ival5,ival8,list2)                                   # STEP 59
ACTION: setListSlice(list2,ival5,ival8,list2) 
ival5 = 4 : <type 'int'>
ival8 = 15 : <type 'int'>
list2 = SortedList([15], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF2 = [15] : <type 'list'>
REFERENCE ACTION: sortListSetSlice(list_REF2,ival5,ival8,list_REF2) 
==================================================
setListSlice(list2,ival2,ival6,list2)                                   # STEP 60
ACTION: setListSlice(list2,ival2,ival6,list2) 
ival2 = 11 : <type 'int'>
ival6 = 8 : <type 'int'>
list2 = SortedList([15], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF2 = [15] : <type 'list'>
REFERENCE ACTION: sortListSetSlice(list_REF2,ival2,ival6,list_REF2) 
==================================================
val5 = ival2                                                            # STEP 61
ACTION: val5 = ival2 
ival2 = 11 : <type 'int'>
val5 = None : <type 'NoneType'>
=> val5 = 11 : <type 'int'>
==================================================
list0 *= ival4                                                          # STEP 62
ACTION: list0 *= ival4 
ival4 = 4 : <type 'int'>
list0 = SortedList([2, 2], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF0 = [2, 2] : <type 'list'>
=> list0 = SortedList([2, 2, 2, 2, 2, 2, 2, 2], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: sortListMultiply(list_REF0,ival4) 
=> list_REF0 = [2, 2, 2, 2, 2, 2, 2, 2] : <type 'list'>
==================================================
ival1 = 19                                                              # STEP 63
ACTION: ival1 = 19 
ival1 = None : <type 'NoneType'>
=> ival1 = 19 : <type 'int'>
==================================================
sval7 = sval7 + sval0                                                   # STEP 64
ACTION: sval7 = sval7 + sval0 
sval7 = 'sxo' : <type 'str'>
sval0 = 'z' : <type 'str'>
=> sval7 = 'sxoz' : <type 'str'>
==================================================
setListSlice(list0,ival0,ival3,list2)                                   # STEP 65
ACTION: setListSlice(list0,ival0,ival3,list2) 
ival0 = 18 : <type 'int'>
ival3 = 3 : <type 'int'>
list0 = SortedList([2, 2, 2, 2, 2, 2, 2, 2], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list2 = SortedList([15], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF0 = [2, 2, 2, 2, 2, 2, 2, 2] : <type 'list'>
list_REF2 = [15] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> 15 not in sort order at index 3
REFERENCE ACTION: sortListSetSlice(list_REF0,ival0,ival3,list_REF2) 
=> list_REF0 = [2, 2, 2, 2, 2, 2, 2, 2, 15] : <type 'list'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x120a7f998>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306249, in check
    assert self.p_list[0] == self.p_list_REF[0]
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #49 STEP #57 (0:00:30.108342) Mon Nov 20 13:57:02 2017 [ 344 stmts 449 branches ] (no cov+ for 1 tests) 4823 TOTAL ACTIONS (160.188163495/s)
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 29
STOPPING TESTING DUE TO TIMEOUT
21.0158976347 PERCENT COVERED
60.2744808197 TOTAL RUNTIME
91 EXECUTED
8995 TOTAL TEST OPERATIONS
4.2110209465 TIME SPENT EXECUTING TEST OPERATIONS
48.296189785 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
3.10860967636 TIME SPENT CHECKING PROPERTIES
7.31963062286 TOTAL TIME SPENT RUNNING SUT
0.597479343414 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
ival2 = 11                                                               # STEP 0
sval5 = 'o'                                                              # STEP 1
ival8 = 6                                                                # STEP 2
sval0 = 'z'                                                              # STEP 3
sval4 = 'd'                                                              # STEP 4
ival4 = 2                                                                # STEP 5
ival3 = 3                                                                # STEP 6
ival9 = 11                                                               # STEP 7
sval3 = 'o'                                                              # STEP 8
sval2 = sval4 + sval5                                                    # STEP 9
sval8 = sval5 + sval5                                                   # STEP 10
val8 = ival4                                                            # STEP 11
sval4 = 's'                                                             # STEP 12
sval5 = 'b'                                                             # STEP 13
ival5 = 19                                                              # STEP 14
ival6 = 11                                                              # STEP 15
val0 = ival4                                                            # STEP 16
sval6 = 'n'                                                             # STEP 17
sval1 = 'x'                                                             # STEP 18
sval9 = sval1 + sval3                                                   # STEP 19
sval3 = sval3 + sval9                                                   # STEP 20
sval7 = sval4 + sval9                                                   # STEP 21
sval1 = sval4 + sval1                                                   # STEP 22
list0 = sortedcontainers.SortedList()                                   # STEP 23
list0.islice(start=ival8,stop=ival5,reverse=True)                       # STEP 24
list0.islice(start=ival6,stop=ival5,reverse=True)                       # STEP 25
result = list0.pop(ival3)                                               # STEP 26
ival5 = 20                                                              # STEP 27
sval4 = 'f'                                                             # STEP 28
plist3 = list0 [ival2 : ival2]                                          # STEP 29
list0.islice(start=ival4,stop=ival3,reverse=True)                       # STEP 30
plist1 = list0 [ival8 : ival5]                                          # STEP 31
list0.islice(start=ival4,stop=ival9,reverse=True)                       # STEP 32
ival6 = 8                                                               # STEP 33
plist2 = list0 [ival6 : ival3]                                          # STEP 34
ival7 = 6                                                               # STEP 35
plist4 = list0 [ival5 : ival6]                                          # STEP 36
val1 = ival6                                                            # STEP 37
list0.insert(ival2,val0)                                                # STEP 38
plist0 = list0 [ival7 : ival3]                                          # STEP 39
ival8 = 15                                                              # STEP 40
list0.insert(ival2,val8)                                                # STEP 41
sval9 = sval9 + sval7                                                   # STEP 42
list0.islice(start=ival8,stop=ival8)                                    # STEP 43
ival5 = 4                                                               # STEP 44
list2 = sortedcontainers.SortedList(plist3)                             # STEP 45
list2.islice(start=ival7,stop=ival6,reverse=True)                       # STEP 46
list2.islice(start=ival8,stop=ival8,reverse=True)                       # STEP 47
ival0 = 18                                                              # STEP 48
list2.islice(start=ival4,stop=ival6,reverse=True)                       # STEP 49
val0 = ival8                                                            # STEP 50
list2.islice(start=ival2,stop=ival0,reverse=True)                       # STEP 51
setListSlice(list0,ival2,ival6,list2)                                   # STEP 52
list0.islice(start=ival2,stop=ival5,reverse=True)                       # STEP 53
list2.insert(ival9,val0)                                                # STEP 54
list2.islice(start=ival8,stop=ival0,reverse=True)                       # STEP 55
setListSlice(list0,ival4,ival8,list0)                                   # STEP 56
ival4 = 4                                                               # STEP 57
plist3 = list0 [ival2 : ival7]                                          # STEP 58
setListSlice(list2,ival5,ival8,list2)                                   # STEP 59
setListSlice(list2,ival2,ival6,list2)                                   # STEP 60
val5 = ival2                                                            # STEP 61
list0 *= ival4                                                          # STEP 62
ival1 = 19                                                              # STEP 63
sval7 = sval7 + sval0                                                   # STEP 64
setListSlice(list0,ival0,ival3,list2)                                   # STEP 65
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x120a7f998>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306249, in check
    assert self.p_list[0] == self.p_list_REF[0]
532 BRANCHES COVERED
401 STATEMENTS COVERED

Random testing using config=Config(noExceptionMatch=False, generalize=False, localize=False, speed='FAST', probs=None, LOCBaseline=0.2, noAlphaConvert=False, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, html=None, keepLast=False, stopWhenNoCoverage=None, generateLOC=None, computeFeatureStats=False, Pmutate=0.8, timeout=60, output='failure.60770.test', markov=None, noSwarmDependencies=False, startExploit=0.0, maxMustHitBranch=None, useHints=False, silentFail=False, highLowSwarm=None, maxMustHitStatement=None, progress=False, postCover=False, swarmLength=None, noCover=False, noEnumerateEnabled=False, full=True, swarmP=0.5, coverFile='coverage.out', markovP=1.0, swarmProbs=None, genDepth=None, exploitCeiling=0.1, logging=None, noCheck=False, throughput=False, uncaught=False, swarmSwitch=None, verbose=False, reducePool=False, exploit=0.8, fastQuickAnalysis=False, total=False, verboseExploit=False, swarm=False, sequenceP=1.0, biasLOC=None, timedProgress=30, relax=False, ddmin=False, stutter=None, readQuick=False, verboseActions=False, quickAnalysis=False, noReassign=False, sequenceSize=3, LOCProbs=False, sequencesFromTests=None, maxTests=-1, trackMaxCoverage=None, useQuickSequences=False, exploitBestHint=1, failedLogging=None, stopWhenStatements=None, greedyStutter=False, seed=None, stopWhenHitStatement=None, uniqueValuesAnalysis=False, normalize=False, startExploitStall=0, enumerateEnabled=False, internal=False, profile=False, multiple=True, stopWhenBranches=None, running=False, compareFails=False, Pcrossover=0.2, stopWhenHitBranch=None, depth=100, showActions=False)
** STARTING EXPLOITATION OF TESTS AT TIME 0.67512011528 AFTER 0 TESTS WITH NO NEW COVERAGE **
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x11e3b6c20>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306252, in check
    assert self.p_list[1] == self.p_list_REF[1]
Original test has 87 steps

SAVING TEST AS failure.60770.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
ival5 = 7                                                                # STEP 0
ACTION: ival5 = 7 
ival5 = None : <type 'NoneType'>
=> ival5 = 7 : <type 'int'>
==================================================
ival4 = 15                                                               # STEP 1
ACTION: ival4 = 15 
ival4 = None : <type 'NoneType'>
=> ival4 = 15 : <type 'int'>
==================================================
list1 = sortedcontainers.SortedList()                                    # STEP 2
ACTION: list1 = sortedcontainers.SortedList() 
list1 = None : <type 'NoneType'>
list_REF1 = None : <type 'NoneType'>
=> list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: list_REF1 = [] 
=> list_REF1 = [] : <type 'list'>
==================================================
sval4 = 'd'                                                              # STEP 3
ACTION: sval4 = 'd' 
sval4 = None : <type 'NoneType'>
=> sval4 = 'd' : <type 'str'>
==================================================
ival2 = 14                                                               # STEP 4
ACTION: ival2 = 14 
ival2 = None : <type 'NoneType'>
=> ival2 = 14 : <type 'int'>
==================================================
sval6 = 'S'                                                              # STEP 5
ACTION: sval6 = 'S' 
sval6 = None : <type 'NoneType'>
=> sval6 = 'S' : <type 'str'>
==================================================
sval5 = 'l'                                                              # STEP 6
ACTION: sval5 = 'l' 
sval5 = None : <type 'NoneType'>
=> sval5 = 'l' : <type 'str'>
==================================================
ival1 = 15                                                               # STEP 7
ACTION: ival1 = 15 
ival1 = None : <type 'NoneType'>
=> ival1 = 15 : <type 'int'>
==================================================
ival9 = 14                                                               # STEP 8
ACTION: ival9 = 14 
ival9 = None : <type 'NoneType'>
=> ival9 = 14 : <type 'int'>
==================================================
ival0 = ival9 + ival1                                                    # STEP 9
ACTION: ival0 = ival9 + ival1 
ival9 = 14 : <type 'int'>
ival1 = 15 : <type 'int'>
ival0 = None : <type 'NoneType'>
=> ival0 = 29 : <type 'int'>
==================================================
sval2 = 's'                                                             # STEP 10
ACTION: sval2 = 's' 
sval2 = None : <type 'NoneType'>
=> sval2 = 's' : <type 'str'>
==================================================
ival6 = ival5 - ival0                                                   # STEP 11
ACTION: ival6 = ival5 - ival0 
ival5 = 7 : <type 'int'>
ival0 = 29 : <type 'int'>
ival6 = None : <type 'NoneType'>
=> ival6 = -22 : <type 'int'>
==================================================
ival5 = 11                                                              # STEP 12
ACTION: ival5 = 11 
ival5 = 7 : <type 'int'>
=> ival5 = 11 : <type 'int'>
==================================================
sval0 = sval4 + sval6                                                   # STEP 13
ACTION: sval0 = sval4 + sval6 
sval4 = 'd' : <type 'str'>
sval6 = 'S' : <type 'str'>
sval0 = None : <type 'NoneType'>
=> sval0 = 'dS' : <type 'str'>
==================================================
ival8 = ival4 * ival9                                                   # STEP 14
ACTION: ival8 = ival4 * ival9 
ival4 = 15 : <type 'int'>
ival9 = 14 : <type 'int'>
ival8 = None : <type 'NoneType'>
=> ival8 = 210 : <type 'int'>
==================================================
ival1 = 17                                                              # STEP 15
ACTION: ival1 = 17 
ival1 = 15 : <type 'int'>
=> ival1 = 17 : <type 'int'>
==================================================
plist2 = list1 [ival5 : ival6]                                          # STEP 16
ACTION: plist2 = list1 [ival5 : ival6] 
ival5 = 11 : <type 'int'>
ival6 = -22 : <type 'int'>
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
plist2 = None : <type 'NoneType'>
list_REF1 = [] : <type 'list'>
=> plist2 = [] : <type 'list'>
REFERENCE ACTION: plist2 = list_REF1 [ival5 : ival6] 
==================================================
sval1 = 'P'                                                             # STEP 17
ACTION: sval1 = 'P' 
sval1 = None : <type 'NoneType'>
=> sval1 = 'P' : <type 'str'>
==================================================
ival4 = ival9 - ival4                                                   # STEP 18
ACTION: ival4 = ival9 - ival4 
ival9 = 14 : <type 'int'>
ival4 = 15 : <type 'int'>
=> ival4 = -1 : <type 'int'>
==================================================
list1.islice(start=ival0,stop=ival9,reverse=True)                       # STEP 19
ACTION: list1.islice(start=ival0,stop=ival9,reverse=True) 
ival0 = 29 : <type 'int'>
ival9 = 14 : <type 'int'>
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF1 = [] : <type 'list'>
REFERENCE ACTION: list_REF1.islice(start=ival0,stop=ival9,reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'islice'
==================================================
list1.islice(start=ival9,stop=ival5,reverse=True)                       # STEP 20
ACTION: list1.islice(start=ival9,stop=ival5,reverse=True) 
ival9 = 14 : <type 'int'>
ival5 = 11 : <type 'int'>
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF1 = [] : <type 'list'>
REFERENCE ACTION: list_REF1.islice(start=ival9,stop=ival5,reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'islice'
==================================================
val2 = ival0                                                            # STEP 21
ACTION: val2 = ival0 
ival0 = 29 : <type 'int'>
val2 = None : <type 'NoneType'>
=> val2 = 29 : <type 'int'>
==================================================
ival6 = ival5 + ival4                                                   # STEP 22
ACTION: ival6 = ival5 + ival4 
ival5 = 11 : <type 'int'>
ival4 = -1 : <type 'int'>
ival6 = -22 : <type 'int'>
=> ival6 = 10 : <type 'int'>
==================================================
ival4 = ival2 - ival6                                                   # STEP 23
ACTION: ival4 = ival2 - ival6 
ival2 = 14 : <type 'int'>
ival6 = 10 : <type 'int'>
ival4 = -1 : <type 'int'>
=> ival4 = 4 : <type 'int'>
==================================================
setListSlice(list1,ival4,ival5,list1)                                   # STEP 24
ACTION: setListSlice(list1,ival4,ival5,list1) 
ival4 = 4 : <type 'int'>
ival5 = 11 : <type 'int'>
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF1 = [] : <type 'list'>
REFERENCE ACTION: sortListSetSlice(list_REF1,ival4,ival5,list_REF1) 
==================================================
list4 = sortedcontainers.SortedList()                                   # STEP 25
ACTION: list4 = sortedcontainers.SortedList() 
list4 = None : <type 'NoneType'>
list_REF4 = None : <type 'NoneType'>
=> list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: list_REF4 = [] 
=> list_REF4 = [] : <type 'list'>
==================================================
ival2 = ival6 - ival9                                                   # STEP 26
ACTION: ival2 = ival6 - ival9 
ival6 = 10 : <type 'int'>
ival9 = 14 : <type 'int'>
ival2 = 14 : <type 'int'>
=> ival2 = -4 : <type 'int'>
==================================================
sval3 = 'W'                                                             # STEP 27
ACTION: sval3 = 'W' 
sval3 = None : <type 'NoneType'>
=> sval3 = 'W' : <type 'str'>
==================================================
ival4 = ival8 * ival5                                                   # STEP 28
ACTION: ival4 = ival8 * ival5 
ival8 = 210 : <type 'int'>
ival5 = 11 : <type 'int'>
ival4 = 4 : <type 'int'>
=> ival4 = 2310 : <type 'int'>
==================================================
plist1 = list1 [ival8 : ival9]                                          # STEP 29
ACTION: plist1 = list1 [ival8 : ival9] 
ival8 = 210 : <type 'int'>
ival9 = 14 : <type 'int'>
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
plist1 = None : <type 'NoneType'>
list_REF1 = [] : <type 'list'>
=> plist1 = [] : <type 'list'>
REFERENCE ACTION: plist1 = list_REF1 [ival8 : ival9] 
==================================================
ival7 = ival5 + ival2                                                   # STEP 30
ACTION: ival7 = ival5 + ival2 
ival5 = 11 : <type 'int'>
ival2 = -4 : <type 'int'>
ival7 = None : <type 'NoneType'>
=> ival7 = 7 : <type 'int'>
==================================================
ival0 = ival4 + ival0                                                   # STEP 31
ACTION: ival0 = ival4 + ival0 
ival4 = 2310 : <type 'int'>
ival0 = 29 : <type 'int'>
=> ival0 = 2339 : <type 'int'>
==================================================
ival5 = 5                                                               # STEP 32
ACTION: ival5 = 5 
ival5 = 11 : <type 'int'>
=> ival5 = 5 : <type 'int'>
==================================================
list4.islice(start=ival5,stop=ival1,reverse=True)                       # STEP 33
ACTION: list4.islice(start=ival5,stop=ival1,reverse=True) 
ival5 = 5 : <type 'int'>
ival1 = 17 : <type 'int'>
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = [] : <type 'list'>
REFERENCE ACTION: list_REF4.islice(start=ival5,stop=ival1,reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'islice'
==================================================
ival8 = ival9 + ival6                                                   # STEP 34
ACTION: ival8 = ival9 + ival6 
ival9 = 14 : <type 'int'>
ival6 = 10 : <type 'int'>
ival8 = 210 : <type 'int'>
=> ival8 = 24 : <type 'int'>
==================================================
ival4 = ival7 - ival6                                                   # STEP 35
ACTION: ival4 = ival7 - ival6 
ival7 = 7 : <type 'int'>
ival6 = 10 : <type 'int'>
ival4 = 2310 : <type 'int'>
=> ival4 = -3 : <type 'int'>
==================================================
ival6 = ival8 + ival8                                                   # STEP 36
ACTION: ival6 = ival8 + ival8 
ival8 = 24 : <type 'int'>
ival6 = 10 : <type 'int'>
=> ival6 = 48 : <type 'int'>
==================================================
list4+=list1                                                            # STEP 37
ACTION: list4+=list1 
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = [] : <type 'list'>
list_REF1 = [] : <type 'list'>
REFERENCE ACTION: sortListMultiAdd(list_REF4,list_REF1) 
==================================================
plist4 = list1 [ival1 : ival0]                                          # STEP 38
ACTION: plist4 = list1 [ival1 : ival0] 
ival1 = 17 : <type 'int'>
ival0 = 2339 : <type 'int'>
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
plist4 = None : <type 'NoneType'>
list_REF1 = [] : <type 'list'>
=> plist4 = [] : <type 'list'>
REFERENCE ACTION: plist4 = list_REF1 [ival1 : ival0] 
==================================================
list4.islice(start=ival0,stop=ival0,reverse=True)                       # STEP 39
ACTION: list4.islice(start=ival0,stop=ival0,reverse=True) 
ival0 = 2339 : <type 'int'>
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = [] : <type 'list'>
REFERENCE ACTION: list_REF4.islice(start=ival0,stop=ival0,reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'islice'
==================================================
ival0 = ival4 - ival1                                                   # STEP 40
ACTION: ival0 = ival4 - ival1 
ival4 = -3 : <type 'int'>
ival1 = 17 : <type 'int'>
ival0 = 2339 : <type 'int'>
=> ival0 = -20 : <type 'int'>
==================================================
del list1 [ival4 : ival6]                                               # STEP 41
ACTION: del list1 [ival4 : ival6] 
ival4 = -3 : <type 'int'>
ival6 = 48 : <type 'int'>
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF1 = [] : <type 'list'>
REFERENCE ACTION: del list_REF1 [ival4 : ival6] 
==================================================
setListSlice(list1,ival5,ival4,list1)                                   # STEP 42
ACTION: setListSlice(list1,ival5,ival4,list1) 
ival5 = 5 : <type 'int'>
ival4 = -3 : <type 'int'>
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF1 = [] : <type 'list'>
REFERENCE ACTION: sortListSetSlice(list_REF1,ival5,ival4,list_REF1) 
==================================================
del list4 [ival0 : ival6]                                               # STEP 43
ACTION: del list4 [ival0 : ival6] 
ival0 = -20 : <type 'int'>
ival6 = 48 : <type 'int'>
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = [] : <type 'list'>
REFERENCE ACTION: del list_REF4 [ival0 : ival6] 
==================================================
sval6 = sval1 + sval1                                                   # STEP 44
ACTION: sval6 = sval1 + sval1 
sval1 = 'P' : <type 'str'>
sval6 = 'S' : <type 'str'>
=> sval6 = 'PP' : <type 'str'>
==================================================
list4.islice(start=ival9,stop=ival1,reverse=True)                       # STEP 45
ACTION: list4.islice(start=ival9,stop=ival1,reverse=True) 
ival9 = 14 : <type 'int'>
ival1 = 17 : <type 'int'>
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = [] : <type 'list'>
REFERENCE ACTION: list_REF4.islice(start=ival9,stop=ival1,reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'islice'
==================================================
plist0 = list4 [ival5 : ival6]                                          # STEP 46
ACTION: plist0 = list4 [ival5 : ival6] 
ival5 = 5 : <type 'int'>
ival6 = 48 : <type 'int'>
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
plist0 = None : <type 'NoneType'>
list_REF4 = [] : <type 'list'>
=> plist0 = [] : <type 'list'>
REFERENCE ACTION: plist0 = list_REF4 [ival5 : ival6] 
==================================================
list1.islice(start=ival5,stop=ival5,reverse=True)                       # STEP 47
ACTION: list1.islice(start=ival5,stop=ival5,reverse=True) 
ival5 = 5 : <type 'int'>
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF1 = [] : <type 'list'>
REFERENCE ACTION: list_REF1.islice(start=ival5,stop=ival5,reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'islice'
==================================================
list4.islice(start=ival7,stop=ival9,reverse=True)                       # STEP 48
ACTION: list4.islice(start=ival7,stop=ival9,reverse=True) 
ival7 = 7 : <type 'int'>
ival9 = 14 : <type 'int'>
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = [] : <type 'list'>
REFERENCE ACTION: list_REF4.islice(start=ival7,stop=ival9,reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'islice'
==================================================
setListSlice(list1,ival2,ival8,list1)                                   # STEP 49
ACTION: setListSlice(list1,ival2,ival8,list1) 
ival2 = -4 : <type 'int'>
ival8 = 24 : <type 'int'>
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF1 = [] : <type 'list'>
REFERENCE ACTION: sortListSetSlice(list_REF1,ival2,ival8,list_REF1) 
==================================================
list4.add(val2)                                                         # STEP 50
ACTION: list4.add(val2) 
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val2 = 29 : <type 'int'>
list_REF4 = [] : <type 'list'>
=> list4 = SortedList([29], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: sortListAdd(list_REF4,val2) 
=> list_REF4 = [29] : <type 'list'>
==================================================
sval7 = 'O'                                                             # STEP 51
ACTION: sval7 = 'O' 
sval7 = None : <type 'NoneType'>
=> sval7 = 'O' : <type 'str'>
==================================================
setListSlice(list4,ival1,ival2,list4)                                   # STEP 52
ACTION: setListSlice(list4,ival1,ival2,list4) 
ival1 = 17 : <type 'int'>
ival2 = -4 : <type 'int'>
list4 = SortedList([29], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = [29] : <type 'list'>
REFERENCE ACTION: sortListSetSlice(list_REF4,ival1,ival2,list_REF4) 
==================================================
val7 = ival2                                                            # STEP 53
ACTION: val7 = ival2 
ival2 = -4 : <type 'int'>
val7 = None : <type 'NoneType'>
=> val7 = -4 : <type 'int'>
==================================================
ival5 = ival0 - ival9                                                   # STEP 54
ACTION: ival5 = ival0 - ival9 
ival0 = -20 : <type 'int'>
ival9 = 14 : <type 'int'>
ival5 = 5 : <type 'int'>
=> ival5 = -34 : <type 'int'>
==================================================
list1.insert(ival5,val7)                                                # STEP 55
ACTION: list1.insert(ival5,val7) 
ival5 = -34 : <type 'int'>
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val7 = -4 : <type 'int'>
list_REF1 = [] : <type 'list'>
=> list1 = SortedList([-4], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: sortListInsert(list_REF1,ival5,val7) 
=> list_REF1 = [-4] : <type 'list'>
==================================================
ival7 = ival6 * ival8                                                   # STEP 56
ACTION: ival7 = ival6 * ival8 
ival6 = 48 : <type 'int'>
ival8 = 24 : <type 'int'>
ival7 = 7 : <type 'int'>
=> ival7 = 1152 : <type 'int'>
==================================================
ival4 = ival6 + ival8                                                   # STEP 57
ACTION: ival4 = ival6 + ival8 
ival6 = 48 : <type 'int'>
ival8 = 24 : <type 'int'>
ival4 = -3 : <type 'int'>
=> ival4 = 72 : <type 'int'>
==================================================
plist3 = list4 [ival6 : ival1]                                          # STEP 58
ACTION: plist3 = list4 [ival6 : ival1] 
ival6 = 48 : <type 'int'>
ival1 = 17 : <type 'int'>
list4 = SortedList([29], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
plist3 = None : <type 'NoneType'>
list_REF4 = [29] : <type 'list'>
=> plist3 = [] : <type 'list'>
REFERENCE ACTION: plist3 = list_REF4 [ival6 : ival1] 
==================================================
val1 = ival4                                                            # STEP 59
ACTION: val1 = ival4 
ival4 = 72 : <type 'int'>
val1 = None : <type 'NoneType'>
=> val1 = 72 : <type 'int'>
==================================================
ival2 = ival1 + ival6                                                   # STEP 60
ACTION: ival2 = ival1 + ival6 
ival1 = 17 : <type 'int'>
ival6 = 48 : <type 'int'>
ival2 = -4 : <type 'int'>
=> ival2 = 65 : <type 'int'>
==================================================
val3 = ival1                                                            # STEP 61
ACTION: val3 = ival1 
ival1 = 17 : <type 'int'>
val3 = None : <type 'NoneType'>
=> val3 = 17 : <type 'int'>
==================================================
ival9 = 20                                                              # STEP 62
ACTION: ival9 = 20 
ival9 = 14 : <type 'int'>
=> ival9 = 20 : <type 'int'>
==================================================
ival0 = ival1 - ival1                                                   # STEP 63
ACTION: ival0 = ival1 - ival1 
ival1 = 17 : <type 'int'>
ival0 = -20 : <type 'int'>
=> ival0 = 0 : <type 'int'>
==================================================
list4.islice(start=ival0,stop=ival7,reverse=True)                       # STEP 64
ACTION: list4.islice(start=ival0,stop=ival7,reverse=True) 
ival0 = 0 : <type 'int'>
ival7 = 1152 : <type 'int'>
list4 = SortedList([29], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = [29] : <type 'list'>
REFERENCE ACTION: list_REF4.islice(start=ival0,stop=ival7,reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'islice'
==================================================
sval9 = 'V'                                                             # STEP 65
ACTION: sval9 = 'V' 
sval9 = None : <type 'NoneType'>
=> sval9 = 'V' : <type 'str'>
==================================================
result = list4.pop(ival4)                                               # STEP 66
ACTION: result = list4.pop(ival4) 
ival4 = 72 : <type 'int'>
list4 = SortedList([29], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = [29] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: result_REF = list_REF4.pop(ival4) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> pop index out of range
==================================================
ival4 = ival9 - ival5                                                   # STEP 67
ACTION: ival4 = ival9 - ival5 
ival9 = 20 : <type 'int'>
ival5 = -34 : <type 'int'>
ival4 = 72 : <type 'int'>
=> ival4 = 54 : <type 'int'>
==================================================
list4+=list4                                                            # STEP 68
ACTION: list4+=list4 
list4 = SortedList([29], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = [29] : <type 'list'>
=> list4 = SortedList([29, 29], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: sortListMultiAdd(list_REF4,list_REF4) 
=> list_REF4 = [29, 29] : <type 'list'>
==================================================
ival9 = ival7 + ival2                                                   # STEP 69
ACTION: ival9 = ival7 + ival2 
ival7 = 1152 : <type 'int'>
ival2 = 65 : <type 'int'>
ival9 = 20 : <type 'int'>
=> ival9 = 1217 : <type 'int'>
==================================================
ival6 = ival2 - ival6                                                   # STEP 70
ACTION: ival6 = ival2 - ival6 
ival2 = 65 : <type 'int'>
ival6 = 48 : <type 'int'>
=> ival6 = 17 : <type 'int'>
==================================================
ival3 = ival7 * ival7                                                   # STEP 71
ACTION: ival3 = ival7 * ival7 
ival7 = 1152 : <type 'int'>
ival3 = None : <type 'NoneType'>
=> ival3 = 1327104 : <type 'int'>
==================================================
ival8 = ival3 + ival9                                                   # STEP 72
ACTION: ival8 = ival3 + ival9 
ival3 = 1327104 : <type 'int'>
ival9 = 1217 : <type 'int'>
ival8 = 24 : <type 'int'>
=> ival8 = 1328321 : <type 'int'>
==================================================
list4.islice(start=ival2,stop=ival5,reverse=True)                       # STEP 73
ACTION: list4.islice(start=ival2,stop=ival5,reverse=True) 
ival2 = 65 : <type 'int'>
ival5 = -34 : <type 'int'>
list4 = SortedList([29, 29], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = [29, 29] : <type 'list'>
REFERENCE ACTION: list_REF4.islice(start=ival2,stop=ival5,reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'islice'
==================================================
sval1 = sval9 + sval0                                                   # STEP 74
ACTION: sval1 = sval9 + sval0 
sval9 = 'V' : <type 'str'>
sval0 = 'dS' : <type 'str'>
sval1 = 'P' : <type 'str'>
=> sval1 = 'VdS' : <type 'str'>
==================================================
list4.add(val3)                                                         # STEP 75
ACTION: list4.add(val3) 
list4 = SortedList([29, 29], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val3 = 17 : <type 'int'>
list_REF4 = [29, 29] : <type 'list'>
=> list4 = SortedList([17, 29, 29], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: sortListAdd(list_REF4,val3) 
=> list_REF4 = [17, 29, 29] : <type 'list'>
==================================================
ival7 = ival8 * ival9                                                   # STEP 76
ACTION: ival7 = ival8 * ival9 
ival8 = 1328321 : <type 'int'>
ival9 = 1217 : <type 'int'>
ival7 = 1152 : <type 'int'>
=> ival7 = 1616566657 : <type 'int'>
==================================================
del list1 [ival9 : ival3]                                               # STEP 77
ACTION: del list1 [ival9 : ival3] 
ival9 = 1217 : <type 'int'>
ival3 = 1327104 : <type 'int'>
list1 = SortedList([-4], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF1 = [-4] : <type 'list'>
REFERENCE ACTION: del list_REF1 [ival9 : ival3] 
==================================================
ival5 = ival8 + ival8                                                   # STEP 78
ACTION: ival5 = ival8 + ival8 
ival8 = 1328321 : <type 'int'>
ival5 = -34 : <type 'int'>
=> ival5 = 2656642 : <type 'int'>
==================================================
ival2 = ival3 + ival8                                                   # STEP 79
ACTION: ival2 = ival3 + ival8 
ival3 = 1327104 : <type 'int'>
ival8 = 1328321 : <type 'int'>
ival2 = 65 : <type 'int'>
=> ival2 = 2655425 : <type 'int'>
==================================================
list1.islice(start=ival7,stop=ival9,reverse=True)                       # STEP 80
ACTION: list1.islice(start=ival7,stop=ival9,reverse=True) 
ival7 = 1616566657 : <type 'int'>
ival9 = 1217 : <type 'int'>
list1 = SortedList([-4], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF1 = [-4] : <type 'list'>
REFERENCE ACTION: list_REF1.islice(start=ival7,stop=ival9,reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'islice'
==================================================
ival8 = ival5 * ival4                                                   # STEP 81
ACTION: ival8 = ival5 * ival4 
ival5 = 2656642 : <type 'int'>
ival4 = 54 : <type 'int'>
ival8 = 1328321 : <type 'int'>
=> ival8 = 143458668 : <type 'int'>
==================================================
del list1 [ival2 : ival5]                                               # STEP 82
ACTION: del list1 [ival2 : ival5] 
ival2 = 2655425 : <type 'int'>
ival5 = 2656642 : <type 'int'>
list1 = SortedList([-4], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF1 = [-4] : <type 'list'>
REFERENCE ACTION: del list_REF1 [ival2 : ival5] 
==================================================
list4.irange(minimum=val1,maximum=val1,inclusive=(True,False),reverse=True)  # STEP 83
ACTION: list4.irange(minimum=val1,maximum=val1,inclusive=(True,False),reverse=True) 
list4 = SortedList([17, 29, 29], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val1 = 72 : <type 'int'>
list_REF4 = [17, 29, 29] : <type 'list'>
REFERENCE ACTION: list_REF4.irange(minimum=val1,maximum=val1,inclusive=(True,False),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
ival2 = ival3 * ival8                                                   # STEP 84
ACTION: ival2 = ival3 * ival8 
ival3 = 1327104 : <type 'int'>
ival8 = 143458668 : <type 'int'>
ival2 = 2655425 : <type 'int'>
=> ival2 = 190384572137472 : <type 'int'>
==================================================
sval0 = sval4 + sval7                                                   # STEP 85
ACTION: sval0 = sval4 + sval7 
sval4 = 'd' : <type 'str'>
sval7 = 'O' : <type 'str'>
sval0 = 'dS' : <type 'str'>
=> sval0 = 'dO' : <type 'str'>
==================================================
setListSlice(list1,ival1,ival0,list4)                                   # STEP 86
ACTION: setListSlice(list1,ival1,ival0,list4) 
ival1 = 17 : <type 'int'>
ival0 = 0 : <type 'int'>
list1 = SortedList([-4], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list4 = SortedList([17, 29, 29], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF1 = [-4] : <type 'list'>
list_REF4 = [17, 29, 29] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> 29 not in sort order at index 0
REFERENCE ACTION: sortListSetSlice(list_REF1,ival1,ival0,list_REF4) 
=> list_REF1 = [-4, 17, 29, 29] : <type 'list'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x11e3c7710>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306252, in check
    assert self.p_list[1] == self.p_list_REF[1]
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #19 STEP #45 (0:00:30.007186) Mon Nov 20 13:08:34 2017 [ 293 stmts 387 branches ] (no cov+ for 1 tests) 1832 TOTAL ACTIONS (61.0520427976/s)
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 36
STOPPING TESTING DUE TO TIMEOUT
17.4098487786 PERCENT COVERED
60.2525169849 TOTAL RUNTIME
38 EXECUTED
3723 TOTAL TEST OPERATIONS
2.03064227104 TIME SPENT EXECUTING TEST OPERATIONS
55.7698395252 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
1.27327299118 TIME SPENT CHECKING PROPERTIES
3.30391526222 TOTAL TIME SPENT RUNNING SUT
0.487292766571 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
ival5 = 7                                                                # STEP 0
ival4 = 15                                                               # STEP 1
list1 = sortedcontainers.SortedList()                                    # STEP 2
sval4 = 'd'                                                              # STEP 3
ival2 = 14                                                               # STEP 4
sval6 = 'S'                                                              # STEP 5
sval5 = 'l'                                                              # STEP 6
ival1 = 15                                                               # STEP 7
ival9 = 14                                                               # STEP 8
ival0 = ival9 + ival1                                                    # STEP 9
sval2 = 's'                                                             # STEP 10
ival6 = ival5 - ival0                                                   # STEP 11
ival5 = 11                                                              # STEP 12
sval0 = sval4 + sval6                                                   # STEP 13
ival8 = ival4 * ival9                                                   # STEP 14
ival1 = 17                                                              # STEP 15
plist2 = list1 [ival5 : ival6]                                          # STEP 16
sval1 = 'P'                                                             # STEP 17
ival4 = ival9 - ival4                                                   # STEP 18
list1.islice(start=ival0,stop=ival9,reverse=True)                       # STEP 19
list1.islice(start=ival9,stop=ival5,reverse=True)                       # STEP 20
val2 = ival0                                                            # STEP 21
ival6 = ival5 + ival4                                                   # STEP 22
ival4 = ival2 - ival6                                                   # STEP 23
setListSlice(list1,ival4,ival5,list1)                                   # STEP 24
list4 = sortedcontainers.SortedList()                                   # STEP 25
ival2 = ival6 - ival9                                                   # STEP 26
sval3 = 'W'                                                             # STEP 27
ival4 = ival8 * ival5                                                   # STEP 28
plist1 = list1 [ival8 : ival9]                                          # STEP 29
ival7 = ival5 + ival2                                                   # STEP 30
ival0 = ival4 + ival0                                                   # STEP 31
ival5 = 5                                                               # STEP 32
list4.islice(start=ival5,stop=ival1,reverse=True)                       # STEP 33
ival8 = ival9 + ival6                                                   # STEP 34
ival4 = ival7 - ival6                                                   # STEP 35
ival6 = ival8 + ival8                                                   # STEP 36
list4+=list1                                                            # STEP 37
plist4 = list1 [ival1 : ival0]                                          # STEP 38
list4.islice(start=ival0,stop=ival0,reverse=True)                       # STEP 39
ival0 = ival4 - ival1                                                   # STEP 40
del list1 [ival4 : ival6]                                               # STEP 41
setListSlice(list1,ival5,ival4,list1)                                   # STEP 42
del list4 [ival0 : ival6]                                               # STEP 43
sval6 = sval1 + sval1                                                   # STEP 44
list4.islice(start=ival9,stop=ival1,reverse=True)                       # STEP 45
plist0 = list4 [ival5 : ival6]                                          # STEP 46
list1.islice(start=ival5,stop=ival5,reverse=True)                       # STEP 47
list4.islice(start=ival7,stop=ival9,reverse=True)                       # STEP 48
setListSlice(list1,ival2,ival8,list1)                                   # STEP 49
list4.add(val2)                                                         # STEP 50
sval7 = 'O'                                                             # STEP 51
setListSlice(list4,ival1,ival2,list4)                                   # STEP 52
val7 = ival2                                                            # STEP 53
ival5 = ival0 - ival9                                                   # STEP 54
list1.insert(ival5,val7)                                                # STEP 55
ival7 = ival6 * ival8                                                   # STEP 56
ival4 = ival6 + ival8                                                   # STEP 57
plist3 = list4 [ival6 : ival1]                                          # STEP 58
val1 = ival4                                                            # STEP 59
ival2 = ival1 + ival6                                                   # STEP 60
val3 = ival1                                                            # STEP 61
ival9 = 20                                                              # STEP 62
ival0 = ival1 - ival1                                                   # STEP 63
list4.islice(start=ival0,stop=ival7,reverse=True)                       # STEP 64
sval9 = 'V'                                                             # STEP 65
result = list4.pop(ival4)                                               # STEP 66
ival4 = ival9 - ival5                                                   # STEP 67
list4+=list4                                                            # STEP 68
ival9 = ival7 + ival2                                                   # STEP 69
ival6 = ival2 - ival6                                                   # STEP 70
ival3 = ival7 * ival7                                                   # STEP 71
ival8 = ival3 + ival9                                                   # STEP 72
list4.islice(start=ival2,stop=ival5,reverse=True)                       # STEP 73
sval1 = sval9 + sval0                                                   # STEP 74
list4.add(val3)                                                         # STEP 75
ival7 = ival8 * ival9                                                   # STEP 76
del list1 [ival9 : ival3]                                               # STEP 77
ival5 = ival8 + ival8                                                   # STEP 78
ival2 = ival3 + ival8                                                   # STEP 79
list1.islice(start=ival7,stop=ival9,reverse=True)                       # STEP 80
ival8 = ival5 * ival4                                                   # STEP 81
del list1 [ival2 : ival5]                                               # STEP 82
list4.irange(minimum=val1,maximum=val1,inclusive=(True,False),reverse=True)  # STEP 83
ival2 = ival3 * ival8                                                   # STEP 84
sval0 = sval4 + sval7                                                   # STEP 85
setListSlice(list1,ival1,ival0,list4)                                   # STEP 86
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x11e3c7710>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306252, in check
    assert self.p_list[1] == self.p_list_REF[1]
428 BRANCHES COVERED
322 STATEMENTS COVERED

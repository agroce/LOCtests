Random testing using config=Config(noExceptionMatch=False, generalize=False, localize=False, speed='FAST', probs='locsample.probs', LOCBaseline=0.2, noAlphaConvert=False, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, html=None, keepLast=False, stopWhenNoCoverage=None, generateLOC=None, computeFeatureStats=False, Pmutate=0.8, timeout=60, output='failure.10383.test', markov=None, noSwarmDependencies=False, startExploit=0.0, maxMustHitBranch=None, useHints=False, silentFail=False, highLowSwarm=None, maxMustHitStatement=None, progress=False, postCover=False, swarmLength=None, noCover=False, noEnumerateEnabled=False, full=True, swarmP=0.5, coverFile='coverage.out', markovP=1.0, swarmProbs=None, genDepth=None, exploitCeiling=0.1, logging=None, noCheck=False, throughput=False, uncaught=False, swarmSwitch=None, verbose=False, reducePool=False, exploit=0.8, fastQuickAnalysis=False, total=False, verboseExploit=False, swarm=False, sequenceP=1.0, biasLOC=None, timedProgress=30, relax=False, ddmin=False, stutter=None, readQuick=False, verboseActions=False, quickAnalysis=False, noReassign=False, sequenceSize=3, LOCProbs=False, sequencesFromTests=None, maxTests=-1, trackMaxCoverage=None, useQuickSequences=False, exploitBestHint=1, failedLogging=None, stopWhenStatements=None, greedyStutter=False, seed=None, stopWhenHitStatement=None, uniqueValuesAnalysis=False, normalize=False, startExploitStall=0, enumerateEnabled=False, internal=False, profile=False, multiple=True, stopWhenBranches=None, running=False, compareFails=False, Pcrossover=0.2, stopWhenHitBranch=None, depth=100, showActions=False)
** STARTING EXPLOITATION OF TESTS AT TIME 0.650918960571 AFTER 0 TESTS WITH NO NEW COVERAGE **
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x120a65d88>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 702641, in act11961
    self.p_list[2].extend(self.p_list[1])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
Original test has 45 steps

SAVING TEST AS failure.10383.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
sval0 = 'N'                                                              # STEP 0
ACTION: sval0 = 'N' 
sval0 = None : <type 'NoneType'>
=> sval0 = 'N' : <type 'str'>
==================================================
list1 = sortedcontainers.SortedList()                                    # STEP 1
ACTION: list1 = sortedcontainers.SortedList() 
list1 = None : <type 'NoneType'>
list_REF1 = None : <type 'NoneType'>
=> list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: list_REF1 = [] 
=> list_REF1 = [] : <type 'list'>
==================================================
list1 < list1                                                            # STEP 2
ACTION: list1 < list1 
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF1 = [] : <type 'list'>
REFERENCE ACTION: list_REF1 < list_REF1 
==================================================
list2 = sortedcontainers.SortedList()                                    # STEP 3
ACTION: list2 = sortedcontainers.SortedList() 
list2 = None : <type 'NoneType'>
list_REF2 = None : <type 'NoneType'>
=> list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: list_REF2 = [] 
=> list_REF2 = [] : <type 'list'>
==================================================
list1 > list1                                                            # STEP 4
ACTION: list1 > list1 
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF1 = [] : <type 'list'>
REFERENCE ACTION: list_REF1 > list_REF1 
==================================================
list2 <= list1                                                           # STEP 5
ACTION: list2 <= list1 
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF2 = [] : <type 'list'>
list_REF1 = [] : <type 'list'>
REFERENCE ACTION: list_REF2 <= list_REF1 
==================================================
sval7 = 'U'                                                              # STEP 6
ACTION: sval7 = 'U' 
sval7 = None : <type 'NoneType'>
=> sval7 = 'U' : <type 'str'>
==================================================
sval3 = sval0 + sval7                                                    # STEP 7
ACTION: sval3 = sval0 + sval7 
sval0 = 'N' : <type 'str'>
sval7 = 'U' : <type 'str'>
sval3 = None : <type 'NoneType'>
=> sval3 = 'NU' : <type 'str'>
==================================================
val1 = sval3                                                             # STEP 8
ACTION: val1 = sval3 
sval3 = 'NU' : <type 'str'>
val1 = None : <type 'NoneType'>
=> val1 = 'NU' : <type 'str'>
==================================================
list1.irange(minimum=val1,maximum=val1,inclusive=(False,False))          # STEP 9
ACTION: list1.irange(minimum=val1,maximum=val1,inclusive=(False,False)) 
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val1 = 'NU' : <type 'str'>
list_REF1 = [] : <type 'list'>
REFERENCE ACTION: list_REF1.irange(minimum=val1,maximum=val1,inclusive=(False,False)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
list1.irange(minimum=val1,maximum=val1,inclusive=(False,False))         # STEP 10
ACTION: list1.irange(minimum=val1,maximum=val1,inclusive=(False,False)) 
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val1 = 'NU' : <type 'str'>
list_REF1 = [] : <type 'list'>
REFERENCE ACTION: list_REF1.irange(minimum=val1,maximum=val1,inclusive=(False,False)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
list1.update(list2)                                                     # STEP 11
ACTION: list1.update(list2) 
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF1 = [] : <type 'list'>
list_REF2 = [] : <type 'list'>
REFERENCE ACTION: sortListMultiAdd(list_REF1,list_REF2) 
==================================================
list1.irange(minimum=val1,maximum=val1,inclusive=(False,True),reverse=True)  # STEP 12
ACTION: list1.irange(minimum=val1,maximum=val1,inclusive=(False,True),reverse=True) 
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val1 = 'NU' : <type 'str'>
list_REF1 = [] : <type 'list'>
REFERENCE ACTION: list_REF1.irange(minimum=val1,maximum=val1,inclusive=(False,True),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
result = list1 == list2                                                 # STEP 13
ACTION: result = list1 == list2 
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF1 = [] : <type 'list'>
list_REF2 = [] : <type 'list'>
REFERENCE ACTION: result_REF = list_REF1 == list_REF2 
==================================================
ival8 = 6                                                               # STEP 14
ACTION: ival8 = 6 
ival8 = None : <type 'NoneType'>
=> ival8 = 6 : <type 'int'>
==================================================
setListSlice(list1,ival8,ival8,list2)                                   # STEP 15
ACTION: setListSlice(list1,ival8,ival8,list2) 
ival8 = 6 : <type 'int'>
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF1 = [] : <type 'list'>
list_REF2 = [] : <type 'list'>
REFERENCE ACTION: sortListSetSlice(list_REF1,ival8,ival8,list_REF2) 
==================================================
ival2 = ival8 + ival8                                                   # STEP 16
ACTION: ival2 = ival8 + ival8 
ival8 = 6 : <type 'int'>
ival2 = None : <type 'NoneType'>
=> ival2 = 12 : <type 'int'>
==================================================
sval7 = 'v'                                                             # STEP 17
ACTION: sval7 = 'v' 
sval7 = 'U' : <type 'str'>
=> sval7 = 'v' : <type 'str'>
==================================================
plist4 = list2 [ival8 : ival2]                                          # STEP 18
ACTION: plist4 = list2 [ival8 : ival2] 
ival8 = 6 : <type 'int'>
ival2 = 12 : <type 'int'>
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
plist4 = None : <type 'NoneType'>
list_REF2 = [] : <type 'list'>
=> plist4 = [] : <type 'list'>
REFERENCE ACTION: plist4 = list_REF2 [ival8 : ival2] 
==================================================
list1.irange(minimum=val1,maximum=val1,inclusive=(False,False))         # STEP 19
ACTION: list1.irange(minimum=val1,maximum=val1,inclusive=(False,False)) 
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val1 = 'NU' : <type 'str'>
list_REF1 = [] : <type 'list'>
REFERENCE ACTION: list_REF1.irange(minimum=val1,maximum=val1,inclusive=(False,False)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
list1.irange(minimum=val1,maximum=val1,inclusive=(False,False),reverse=True)  # STEP 20
ACTION: list1.irange(minimum=val1,maximum=val1,inclusive=(False,False),reverse=True) 
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val1 = 'NU' : <type 'str'>
list_REF1 = [] : <type 'list'>
REFERENCE ACTION: list_REF1.irange(minimum=val1,maximum=val1,inclusive=(False,False),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
list1.irange(minimum=val1,maximum=val1,inclusive=(False,True),reverse=True)  # STEP 21
ACTION: list1.irange(minimum=val1,maximum=val1,inclusive=(False,True),reverse=True) 
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val1 = 'NU' : <type 'str'>
list_REF1 = [] : <type 'list'>
REFERENCE ACTION: list_REF1.irange(minimum=val1,maximum=val1,inclusive=(False,True),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
plist3 = list2 [ival8 : ival2]                                          # STEP 22
ACTION: plist3 = list2 [ival8 : ival2] 
ival8 = 6 : <type 'int'>
ival2 = 12 : <type 'int'>
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
plist3 = None : <type 'NoneType'>
list_REF2 = [] : <type 'list'>
=> plist3 = [] : <type 'list'>
REFERENCE ACTION: plist3 = list_REF2 [ival8 : ival2] 
==================================================
ival9 = 8                                                               # STEP 23
ACTION: ival9 = 8 
ival9 = None : <type 'NoneType'>
=> ival9 = 8 : <type 'int'>
==================================================
result = list2.index(val1)                                              # STEP 24
ACTION: result = list2.index(val1) 
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val1 = 'NU' : <type 'str'>
list_REF2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> 'NU' is not in list
REFERENCE ACTION: result_REF = list_REF2.index(val1) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.ValueError'> 'NU' is not in list
==================================================
setList(list1,ival9,val1)                                               # STEP 25
ACTION: setList(list1,ival9,val1) 
ival9 = 8 : <type 'int'>
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val1 = 'NU' : <type 'str'>
list_REF1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: sortListSet(list_REF1,ival9,val1) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list assignment index out of range
==================================================
list1.islice(start=None,stop=ival9)                                     # STEP 26
ACTION: list1.islice(start=None,stop=ival9) 
ival9 = 8 : <type 'int'>
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF1 = [] : <type 'list'>
REFERENCE ACTION: list_REF1.islice(start=None,stop=ival9) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'islice'
==================================================
list2 <= list2                                                          # STEP 27
ACTION: list2 <= list2 
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF2 = [] : <type 'list'>
REFERENCE ACTION: list_REF2 <= list_REF2 
==================================================
ival2 = ival8 - ival8                                                   # STEP 28
ACTION: ival2 = ival8 - ival8 
ival8 = 6 : <type 'int'>
ival2 = 12 : <type 'int'>
=> ival2 = 0 : <type 'int'>
==================================================
ival4 = ival8 - ival8                                                   # STEP 29
ACTION: ival4 = ival8 - ival8 
ival8 = 6 : <type 'int'>
ival4 = None : <type 'NoneType'>
=> ival4 = 0 : <type 'int'>
==================================================
plist0 = list2 [ival8 : ival8]                                          # STEP 30
ACTION: plist0 = list2 [ival8 : ival8] 
ival8 = 6 : <type 'int'>
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
plist0 = None : <type 'NoneType'>
list_REF2 = [] : <type 'list'>
=> plist0 = [] : <type 'list'>
REFERENCE ACTION: plist0 = list_REF2 [ival8 : ival8] 
==================================================
dict3 = sortedcontainers.SortedDict()                                   # STEP 31
ACTION: dict3 = sortedcontainers.SortedDict() 
dict3 = None : <type 'NoneType'>
dict_REF3 = None : <type 'NoneType'>
=> dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF3 = {} 
=> dict_REF3 = {} : <type 'dict'>
==================================================
list2.irange(minimum=val1,maximum=val1,inclusive=(True,False),reverse=True)  # STEP 32
ACTION: list2.irange(minimum=val1,maximum=val1,inclusive=(True,False),reverse=True) 
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val1 = 'NU' : <type 'str'>
list_REF2 = [] : <type 'list'>
REFERENCE ACTION: list_REF2.irange(minimum=val1,maximum=val1,inclusive=(True,False),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
dict0 = sortedcontainers.SortedDict()                                   # STEP 33
ACTION: dict0 = sortedcontainers.SortedDict() 
dict0 = None : <type 'NoneType'>
dict_REF0 = None : <type 'NoneType'>
=> dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF0 = {} 
=> dict_REF0 = {} : <type 'dict'>
==================================================
result = len(dict3.keys())                                              # STEP 34
ACTION: result = len(dict3.keys())  
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF3.keys())  
==================================================
result = sorted(list(dict0.keys()))                                     # STEP 35
ACTION: result = sorted(list(dict0.keys())) 
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = sorted(list(dict_REF0.keys())) 
==================================================
result = dict0.peekitem(ival9)                                          # STEP 36
ACTION: result = dict0.peekitem(ival9) 
ival9 = 8 : <type 'int'>
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF0 = {} : <type 'dict'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: result_REF = sortDictPeekitem(dict_REF0,ival9) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
==================================================
dict2 = sortedcontainers.SortedDict()                                   # STEP 37
ACTION: dict2 = sortedcontainers.SortedDict() 
dict2 = None : <type 'NoneType'>
dict_REF2 = None : <type 'NoneType'>
=> dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF2 = {} 
=> dict_REF2 = {} : <type 'dict'>
==================================================
sval0 = 'Z'                                                             # STEP 38
ACTION: sval0 = 'Z' 
sval0 = 'N' : <type 'str'>
=> sval0 = 'Z' : <type 'str'>
==================================================
list2.add(val1)                                                         # STEP 39
ACTION: list2.add(val1) 
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val1 = 'NU' : <type 'str'>
list_REF2 = [] : <type 'list'>
=> list2 = SortedList(['NU'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: sortListAdd(list_REF2,val1) 
=> list_REF2 = ['NU'] : <type 'list'>
==================================================
val1 in dict3                                                           # STEP 40
ACTION: val1 in dict3 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val1 = 'NU' : <type 'str'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: val1 in dict_REF3 
==================================================
result = dict0 == dict3                                                 # STEP 41
ACTION: result = dict0 == dict3 
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF0 = {} : <type 'dict'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = dict_REF0 == dict_REF3 
==================================================
sval9 = 'm'                                                             # STEP 42
ACTION: sval9 = 'm' 
sval9 = None : <type 'NoneType'>
=> sval9 = 'm' : <type 'str'>
==================================================
sval2 = 'F'                                                             # STEP 43
ACTION: sval2 = 'F' 
sval2 = None : <type 'NoneType'>
=> sval2 = 'F' : <type 'str'>
==================================================
list2.extend(list1)                                                     # STEP 44
ACTION: list2.extend(list1) 
list2 = SortedList(['NU'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF2 = ['NU'] : <type 'list'>
list_REF1 = [] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x120a90d40>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 702641, in act11961
    self.p_list[2].extend(self.p_list[1])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #13 STEP #9 (0:00:30.004145) Mon Nov 20 16:26:39 2017 [ 438 stmts 570 branches ] 1154 TOTAL ACTIONS (38.461352709/s)
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 12
STOPPING TESTING DUE TO TIMEOUT
26.2892594029 PERCENT COVERED
60.2668161392 TOTAL RUNTIME
25 EXECUTED
2357 TOTAL TEST OPERATIONS
1.48322629929 TIME SPENT EXECUTING TEST OPERATIONS
56.2679691315 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
1.40828466415 TIME SPENT CHECKING PROPERTIES
2.89151096344 TOTAL TIME SPENT RUNNING SUT
0.47727560997 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
sval0 = 'N'                                                              # STEP 0
list1 = sortedcontainers.SortedList()                                    # STEP 1
list1 < list1                                                            # STEP 2
list2 = sortedcontainers.SortedList()                                    # STEP 3
list1 > list1                                                            # STEP 4
list2 <= list1                                                           # STEP 5
sval7 = 'U'                                                              # STEP 6
sval3 = sval0 + sval7                                                    # STEP 7
val1 = sval3                                                             # STEP 8
list1.irange(minimum=val1,maximum=val1,inclusive=(False,False))          # STEP 9
list1.irange(minimum=val1,maximum=val1,inclusive=(False,False))         # STEP 10
list1.update(list2)                                                     # STEP 11
list1.irange(minimum=val1,maximum=val1,inclusive=(False,True),reverse=True)  # STEP 12
result = list1 == list2                                                 # STEP 13
ival8 = 6                                                               # STEP 14
setListSlice(list1,ival8,ival8,list2)                                   # STEP 15
ival2 = ival8 + ival8                                                   # STEP 16
sval7 = 'v'                                                             # STEP 17
plist4 = list2 [ival8 : ival2]                                          # STEP 18
list1.irange(minimum=val1,maximum=val1,inclusive=(False,False))         # STEP 19
list1.irange(minimum=val1,maximum=val1,inclusive=(False,False),reverse=True)  # STEP 20
list1.irange(minimum=val1,maximum=val1,inclusive=(False,True),reverse=True)  # STEP 21
plist3 = list2 [ival8 : ival2]                                          # STEP 22
ival9 = 8                                                               # STEP 23
result = list2.index(val1)                                              # STEP 24
setList(list1,ival9,val1)                                               # STEP 25
list1.islice(start=None,stop=ival9)                                     # STEP 26
list2 <= list2                                                          # STEP 27
ival2 = ival8 - ival8                                                   # STEP 28
ival4 = ival8 - ival8                                                   # STEP 29
plist0 = list2 [ival8 : ival8]                                          # STEP 30
dict3 = sortedcontainers.SortedDict()                                   # STEP 31
list2.irange(minimum=val1,maximum=val1,inclusive=(True,False),reverse=True)  # STEP 32
dict0 = sortedcontainers.SortedDict()                                   # STEP 33
result = len(dict3.keys())                                              # STEP 34
result = sorted(list(dict0.keys()))                                     # STEP 35
result = dict0.peekitem(ival9)                                          # STEP 36
dict2 = sortedcontainers.SortedDict()                                   # STEP 37
sval0 = 'Z'                                                             # STEP 38
list2.add(val1)                                                         # STEP 39
val1 in dict3                                                           # STEP 40
result = dict0 == dict3                                                 # STEP 41
sval9 = 'm'                                                             # STEP 42
sval2 = 'F'                                                             # STEP 43
list2.extend(list1)                                                     # STEP 44
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x120a90d40>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 702641, in act11961
    self.p_list[2].extend(self.p_list[1])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
650 BRANCHES COVERED
495 STATEMENTS COVERED

Random testing using config=Config(noExceptionMatch=False, generalize=False, localize=False, speed='FAST', probs='locsample.probs', LOCBaseline=0.2, noAlphaConvert=False, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, html=None, keepLast=False, stopWhenNoCoverage=None, generateLOC=None, computeFeatureStats=False, Pmutate=0.0, timeout=60, output='failure.10388.test', markov=None, noSwarmDependencies=False, startExploit=0.0, maxMustHitBranch=None, useHints=False, silentFail=False, highLowSwarm=None, maxMustHitStatement=None, progress=False, postCover=False, swarmLength=None, noCover=False, noEnumerateEnabled=False, full=True, swarmP=0.5, coverFile='coverage.out', markovP=1.0, swarmProbs=None, genDepth=None, exploitCeiling=0.1, logging=None, noCheck=False, throughput=False, uncaught=False, swarmSwitch=None, verbose=False, reducePool=False, exploit=None, fastQuickAnalysis=False, total=False, verboseExploit=False, swarm=False, sequenceP=1.0, biasLOC=None, timedProgress=30, relax=False, ddmin=False, stutter=None, readQuick=False, verboseActions=False, quickAnalysis=False, noReassign=False, sequenceSize=3, LOCProbs=False, sequencesFromTests=None, maxTests=-1, trackMaxCoverage=None, useQuickSequences=False, exploitBestHint=1, failedLogging=None, stopWhenStatements=None, greedyStutter=False, seed=None, stopWhenHitStatement=None, uniqueValuesAnalysis=False, normalize=False, startExploitStall=0, enumerateEnabled=False, internal=False, profile=False, multiple=True, stopWhenBranches=None, running=False, compareFails=False, Pcrossover=0.2, stopWhenHitBranch=None, depth=100, showActions=False)
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x11f9e5b48>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 702458, in act11958
    self.p_list[1].extend(self.p_list[3])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
Original test has 86 steps

SAVING TEST AS failure.10388.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
list3 = sortedcontainers.SortedList()                                    # STEP 0
ACTION: list3 = sortedcontainers.SortedList() 
list3 = None : <type 'NoneType'>
list_REF3 = None : <type 'NoneType'>
=> list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: list_REF3 = [] 
=> list_REF3 = [] : <type 'list'>
==================================================
list3.extend(list3)                                                      # STEP 1
ACTION: list3.extend(list3) 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [] : <type 'list'>
REFERENCE ACTION: sortListExtend(list_REF3,list_REF3) 
==================================================
ival4 = 1                                                                # STEP 2
ACTION: ival4 = 1 
ival4 = None : <type 'NoneType'>
=> ival4 = 1 : <type 'int'>
==================================================
val5 = ival4                                                             # STEP 3
ACTION: val5 = ival4 
ival4 = 1 : <type 'int'>
val5 = None : <type 'NoneType'>
=> val5 = 1 : <type 'int'>
==================================================
ival6 = ival4 - ival4                                                    # STEP 4
ACTION: ival6 = ival4 - ival4 
ival4 = 1 : <type 'int'>
ival6 = None : <type 'NoneType'>
=> ival6 = 0 : <type 'int'>
==================================================
set3 = sortedcontainers.SortedSet()                                      # STEP 5
ACTION: set3 = sortedcontainers.SortedSet() 
set3 = None : <type 'NoneType'>
set_REF3 = None : <type 'NoneType'>
=> set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF3 = set([]) 
=> set_REF3 = set([]) : <type 'set'>
==================================================
set3.islice(start=ival6,stop=ival6)                                      # STEP 6
ACTION: set3.islice(start=ival6,stop=ival6) 
ival6 = 0 : <type 'int'>
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF3.islice(start=ival6,stop=ival6) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'islice'
==================================================
plist1 = list3 [ival6 : ival4]                                           # STEP 7
ACTION: plist1 = list3 [ival6 : ival4] 
ival6 = 0 : <type 'int'>
ival4 = 1 : <type 'int'>
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
plist1 = None : <type 'NoneType'>
list_REF3 = [] : <type 'list'>
=> plist1 = [] : <type 'list'>
REFERENCE ACTION: plist1 = list_REF3 [ival6 : ival4] 
==================================================
set3.add(val5)                                                           # STEP 8
ACTION: set3.add(val5) 
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
val5 = 1 : <type 'int'>
set_REF3 = set([]) : <type 'set'>
=> set3 = SortedSet([1], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF3.add(val5) 
=> set_REF3 = set([1]) : <type 'set'>
==================================================
set3 ^= set3                                                             # STEP 9
ACTION: set3 ^= set3 
set3 = SortedSet([1], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF3 = set([1]) : <type 'set'>
=> set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF3 ^= set_REF3 
=> set_REF3 = set([]) : <type 'set'>
==================================================
set3.irange(minimum=val5,maximum=val5,inclusive=(False,True),reverse=True)  # STEP 10
ACTION: set3.irange(minimum=val5,maximum=val5,inclusive=(False,True),reverse=True) 
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
val5 = 1 : <type 'int'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF3.irange(minimum=val5,maximum=val5,inclusive=(False,True),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'irange'
==================================================
set1 = set3.copy()                                                      # STEP 11
ACTION: set1 = set3.copy() 
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set1 = None : <type 'NoneType'>
set_REF3 = set([]) : <type 'set'>
set_REF1 = None : <type 'NoneType'>
=> set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF1 = set_REF3.copy() 
=> set_REF1 = set([]) : <type 'set'>
==================================================
sval3 = 'R'                                                             # STEP 12
ACTION: sval3 = 'R' 
sval3 = None : <type 'NoneType'>
=> sval3 = 'R' : <type 'str'>
==================================================
val4 = sval3                                                            # STEP 13
ACTION: val4 = sval3 
sval3 = 'R' : <type 'str'>
val4 = None : <type 'NoneType'>
=> val4 = 'R' : <type 'str'>
==================================================
set0 = set1.copy()                                                      # STEP 14
ACTION: set0 = set1.copy() 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set0 = None : <type 'NoneType'>
set_REF1 = set([]) : <type 'set'>
set_REF0 = None : <type 'NoneType'>
=> set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF0 = set_REF1.copy() 
=> set_REF0 = set([]) : <type 'set'>
==================================================
result = list3 == list3                                                 # STEP 15
ACTION: result = list3 == list3 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [] : <type 'list'>
REFERENCE ACTION: result_REF = list_REF3 == list_REF3 
==================================================
setListSlice(list3,ival4,ival4,list3)                                   # STEP 16
ACTION: setListSlice(list3,ival4,ival4,list3) 
ival4 = 1 : <type 'int'>
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [] : <type 'list'>
REFERENCE ACTION: sortListSetSlice(list_REF3,ival4,ival4,list_REF3) 
==================================================
set1 = set0 & set3                                                      # STEP 17
ACTION: set1 = set0 & set3 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
set_REF3 = set([]) : <type 'set'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1 = set_REF0 & set_REF3 
==================================================
result = list3.count(val4)                                              # STEP 18
ACTION: result = list3.count(val4) 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val4 = 'R' : <type 'str'>
list_REF3 = [] : <type 'list'>
REFERENCE ACTION: result_REF = list_REF3.count(val4) 
==================================================
set0.irange(minimum=val4,maximum=val4,inclusive=(False,False),reverse=True)  # STEP 19
ACTION: set0.irange(minimum=val4,maximum=val4,inclusive=(False,False),reverse=True) 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
val4 = 'R' : <type 'str'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF0.irange(minimum=val4,maximum=val4,inclusive=(False,False),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'irange'
==================================================
set0 = set0 | set3                                                      # STEP 20
ACTION: set0 = set0 | set3 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF0 = set_REF0 | set_REF3 
==================================================
set0.irange(minimum=val4,maximum=val5,inclusive=(False,False))          # STEP 21
ACTION: set0.irange(minimum=val4,maximum=val5,inclusive=(False,False)) 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
val4 = 'R' : <type 'str'>
val5 = 1 : <type 'int'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF0.irange(minimum=val4,maximum=val5,inclusive=(False,False)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'irange'
==================================================
list1 = sortedcontainers.SortedList()                                   # STEP 22
ACTION: list1 = sortedcontainers.SortedList() 
list1 = None : <type 'NoneType'>
list_REF1 = None : <type 'NoneType'>
=> list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: list_REF1 = [] 
=> list_REF1 = [] : <type 'list'>
==================================================
setListSlice(list1,ival4,ival4,list3)                                   # STEP 23
ACTION: setListSlice(list1,ival4,ival4,list3) 
ival4 = 1 : <type 'int'>
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF1 = [] : <type 'list'>
list_REF3 = [] : <type 'list'>
REFERENCE ACTION: sortListSetSlice(list_REF1,ival4,ival4,list_REF3) 
==================================================
list1 *= ival6                                                          # STEP 24
ACTION: list1 *= ival6 
ival6 = 0 : <type 'int'>
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF1 = [] : <type 'list'>
REFERENCE ACTION: sortListMultiply(list_REF1,ival6) 
==================================================
set3 = set3 ^ set1                                                      # STEP 25
ACTION: set3 = set3 ^ set1 
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF3 = set([]) : <type 'set'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF3 = set_REF3 ^ set_REF1 
==================================================
setList(list1,ival4,val5)                                               # STEP 26
ACTION: setList(list1,ival4,val5) 
ival4 = 1 : <type 'int'>
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val5 = 1 : <type 'int'>
list_REF1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: sortListSet(list_REF1,ival4,val5) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list assignment index out of range
==================================================
set2 = set1.copy()                                                      # STEP 27
ACTION: set2 = set1.copy() 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set2 = None : <type 'NoneType'>
set_REF1 = set([]) : <type 'set'>
set_REF2 = None : <type 'NoneType'>
=> set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF2 = set_REF1.copy() 
=> set_REF2 = set([]) : <type 'set'>
==================================================
set1 < set3                                                             # STEP 28
ACTION: set1 < set3 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF1 = set([]) : <type 'set'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1 < set_REF3 
==================================================
set1.update(list3)                                                      # STEP 29
ACTION: set1.update(list3) 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
list_REF3 = [] : <type 'list'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1.update(list_REF3) 
==================================================
set3 = set0 - set3                                                      # STEP 30
ACTION: set3 = set0 - set3 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF3 = set_REF0 - set_REF3 
==================================================
set4 = set0 & set1                                                      # STEP 31
ACTION: set4 = set0 & set1 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set4 = None : <type 'NoneType'>
set_REF0 = set([]) : <type 'set'>
set_REF1 = set([]) : <type 'set'>
set_REF4 = None : <type 'NoneType'>
=> set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF4 = set_REF0 & set_REF1 
=> set_REF4 = set([]) : <type 'set'>
==================================================
setListSlice(list3,ival6,ival4,list1)                                   # STEP 32
ACTION: setListSlice(list3,ival6,ival4,list1) 
ival6 = 0 : <type 'int'>
ival4 = 1 : <type 'int'>
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [] : <type 'list'>
list_REF1 = [] : <type 'list'>
REFERENCE ACTION: sortListSetSlice(list_REF3,ival6,ival4,list_REF1) 
==================================================
setListSlice(list1,ival6,ival4,list1)                                   # STEP 33
ACTION: setListSlice(list1,ival6,ival4,list1) 
ival6 = 0 : <type 'int'>
ival4 = 1 : <type 'int'>
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF1 = [] : <type 'list'>
REFERENCE ACTION: sortListSetSlice(list_REF1,ival6,ival4,list_REF1) 
==================================================
set4.islice(start=None,stop=None)                                       # STEP 34
ACTION: set4.islice(start=None,stop=None) 
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF4 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF4.islice(start=None,stop=None) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'islice'
==================================================
set0.irange(minimum=val4,maximum=val4,inclusive=(False,False),reverse=True)  # STEP 35
ACTION: set0.irange(minimum=val4,maximum=val4,inclusive=(False,False),reverse=True) 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
val4 = 'R' : <type 'str'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF0.irange(minimum=val4,maximum=val4,inclusive=(False,False),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'irange'
==================================================
list3.irange(minimum=val4,maximum=val5,inclusive=(False,False))         # STEP 36
ACTION: list3.irange(minimum=val4,maximum=val5,inclusive=(False,False)) 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val4 = 'R' : <type 'str'>
val5 = 1 : <type 'int'>
list_REF3 = [] : <type 'list'>
REFERENCE ACTION: list_REF3.irange(minimum=val4,maximum=val5,inclusive=(False,False)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
set1.add(val5)                                                          # STEP 37
ACTION: set1.add(val5) 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
val5 = 1 : <type 'int'>
set_REF1 = set([]) : <type 'set'>
=> set1 = SortedSet([1], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF1.add(val5) 
=> set_REF1 = set([1]) : <type 'set'>
==================================================
setList(list1,ival6,val4)                                               # STEP 38
ACTION: setList(list1,ival6,val4) 
ival6 = 0 : <type 'int'>
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val4 = 'R' : <type 'str'>
list_REF1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: sortListSet(list_REF1,ival6,val4) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list assignment index out of range
==================================================
result = list1.index(val5)                                              # STEP 39
ACTION: result = list1.index(val5) 
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val5 = 1 : <type 'int'>
list_REF1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> 1 is not in list
REFERENCE ACTION: result_REF = list_REF1.index(val5) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.ValueError'> 1 is not in list
==================================================
plist3 = list3 [ival6 : ival4]                                          # STEP 40
ACTION: plist3 = list3 [ival6 : ival4] 
ival6 = 0 : <type 'int'>
ival4 = 1 : <type 'int'>
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
plist3 = None : <type 'NoneType'>
list_REF3 = [] : <type 'list'>
=> plist3 = [] : <type 'list'>
REFERENCE ACTION: plist3 = list_REF3 [ival6 : ival4] 
==================================================
list1+=list1                                                            # STEP 41
ACTION: list1+=list1 
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF1 = [] : <type 'list'>
REFERENCE ACTION: sortListMultiAdd(list_REF1,list_REF1) 
==================================================
list1.append(val4)                                                      # STEP 42
ACTION: list1.append(val4) 
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val4 = 'R' : <type 'str'>
list_REF1 = [] : <type 'list'>
=> list1 = SortedList(['R'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: sortListAppend(list_REF1,val4) 
=> list_REF1 = ['R'] : <type 'list'>
==================================================
set1 = set2.copy()                                                      # STEP 43
ACTION: set1 = set2.copy() 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set1 = SortedSet([1], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF2 = set([]) : <type 'set'>
set_REF1 = set([1]) : <type 'set'>
=> set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF1 = set_REF2.copy() 
=> set_REF1 = set([]) : <type 'set'>
==================================================
list3 >= list3                                                          # STEP 44
ACTION: list3 >= list3 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [] : <type 'list'>
REFERENCE ACTION: list_REF3 >= list_REF3 
==================================================
set0.islice(start=ival4,stop=ival6)                                     # STEP 45
ACTION: set0.islice(start=ival4,stop=ival6) 
ival4 = 1 : <type 'int'>
ival6 = 0 : <type 'int'>
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF0.islice(start=ival4,stop=ival6) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'islice'
==================================================
dict0 = sortedcontainers.SortedDict()                                   # STEP 46
ACTION: dict0 = sortedcontainers.SortedDict() 
dict0 = None : <type 'NoneType'>
dict_REF0 = None : <type 'NoneType'>
=> dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF0 = {} 
=> dict_REF0 = {} : <type 'dict'>
==================================================
dict3 = dict0.copy()                                                    # STEP 47
ACTION: dict3 = dict0.copy() 
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict3 = None : <type 'NoneType'>
dict_REF0 = {} : <type 'dict'>
dict_REF3 = None : <type 'NoneType'>
=> dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF3 = dict_REF0.copy() 
=> dict_REF3 = {} : <type 'dict'>
==================================================
dict0 = dict3.fromkeys(list1,val4) ; result = dict0                     # STEP 48
ACTION: dict0 = dict3.fromkeys(list1,val4) ; result = dict0 
list1 = SortedList(['R'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val4 = 'R' : <type 'str'>
list_REF1 = ['R'] : <type 'list'>
dict_REF3 = {} : <type 'dict'>
dict_REF0 = {} : <type 'dict'>
=> dict0 = SortedDict(None, 1000, {'R': 'R'}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF0 = dict_REF3.fromkeys(list_REF1,val4) ; result_REF = dict_REF0 
=> dict_REF0 = {'R': 'R'} : <type 'dict'>
==================================================
result = len(dict3.keys())                                              # STEP 49
ACTION: result = len(dict3.keys())  
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF3.keys())  
==================================================
result = dict3.pop(val4,val4)                                           # STEP 50
ACTION: result = dict3.pop(val4,val4) 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val4 = 'R' : <type 'str'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = dict_REF3.pop(val4,val4) 
==================================================
set0 = set4 - set4                                                      # STEP 51
ACTION: set0 = set4 - set4 
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF4 = set([]) : <type 'set'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF0 = set_REF4 - set_REF4 
==================================================
dict4 = dict3.fromkeys(set1,val4) ; result = dict4                      # STEP 52
ACTION: dict4 = dict3.fromkeys(set1,val4) ; result = dict4 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict4 = None : <type 'NoneType'>
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
val4 = 'R' : <type 'str'>
dict_REF3 = {} : <type 'dict'>
dict_REF4 = None : <type 'NoneType'>
set_REF1 = set([]) : <type 'set'>
=> dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF4 = dict_REF3.fromkeys(set_REF1,val4) ; result_REF = dict_REF4 
=> dict_REF4 = {} : <type 'dict'>
==================================================
sval9 = 'L'                                                             # STEP 53
ACTION: sval9 = 'L' 
sval9 = None : <type 'NoneType'>
=> sval9 = 'L' : <type 'str'>
==================================================
set1.irange(minimum=val4,maximum=val5,inclusive=(False,False))          # STEP 54
ACTION: set1.irange(minimum=val4,maximum=val5,inclusive=(False,False)) 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
val4 = 'R' : <type 'str'>
val5 = 1 : <type 'int'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1.irange(minimum=val4,maximum=val5,inclusive=(False,False)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'irange'
==================================================
set2 = set0 ^ set3                                                      # STEP 55
ACTION: set2 = set0 ^ set3 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
set_REF3 = set([]) : <type 'set'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF2 = set_REF0 ^ set_REF3 
==================================================
result = dict4.popitem()                                                # STEP 56
ACTION: result = dict4.popitem() 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF4 = {} : <type 'dict'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.KeyError'> 'popitem(): dictionary is empty'
REFERENCE ACTION: result_REF = sortDictPopitem(dict_REF4,) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.KeyError'> 
==================================================
val6 = ival4                                                            # STEP 57
ACTION: val6 = ival4 
ival4 = 1 : <type 'int'>
val6 = None : <type 'NoneType'>
=> val6 = 1 : <type 'int'>
==================================================
dict3.get(val5,val6)                                                    # STEP 58
ACTION: dict3.get(val5,val6) 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val5 = 1 : <type 'int'>
val6 = 1 : <type 'int'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF3.get(val5,val6) 
==================================================
result = dict0 == dict0                                                 # STEP 59
ACTION: result = dict0 == dict0 
dict0 = SortedDict(None, 1000, {'R': 'R'}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF0 = {'R': 'R'} : <type 'dict'>
REFERENCE ACTION: result_REF = dict_REF0 == dict_REF0 
==================================================
result = list3 == list1                                                 # STEP 60
ACTION: result = list3 == list1 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list1 = SortedList(['R'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [] : <type 'list'>
list_REF1 = ['R'] : <type 'list'>
REFERENCE ACTION: result_REF = list_REF3 == list_REF1 
==================================================
dict0.irange(minimum=val5,maximum=val6,inclusive=(False,True),reverse=True)  # STEP 61
ACTION: dict0.irange(minimum=val5,maximum=val6,inclusive=(False,True),reverse=True) 
dict0 = SortedDict(None, 1000, {'R': 'R'}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val5 = 1 : <type 'int'>
val6 = 1 : <type 'int'>
dict_REF0 = {'R': 'R'} : <type 'dict'>
REFERENCE ACTION: dict_REF0.irange(minimum=val5,maximum=val6,inclusive=(False,True),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'irange'
==================================================
dict3.irange(minimum=val5,maximum=val6,inclusive=(False,True),reverse=True)  # STEP 62
ACTION: dict3.irange(minimum=val5,maximum=val6,inclusive=(False,True),reverse=True) 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val5 = 1 : <type 'int'>
val6 = 1 : <type 'int'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF3.irange(minimum=val5,maximum=val6,inclusive=(False,True),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'irange'
==================================================
dict0 = sortedcontainers.SortedDict()                                   # STEP 63
ACTION: dict0 = sortedcontainers.SortedDict() 
dict0 = SortedDict(None, 1000, {'R': 'R'}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF0 = {'R': 'R'} : <type 'dict'>
=> dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF0 = {} 
=> dict_REF0 = {} : <type 'dict'>
==================================================
set0 = set0 & set4                                                      # STEP 64
ACTION: set0 = set0 & set4 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
set_REF4 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF0 = set_REF0 & set_REF4 
==================================================
val1 = sval9                                                            # STEP 65
ACTION: val1 = sval9 
sval9 = 'L' : <type 'str'>
val1 = None : <type 'NoneType'>
=> val1 = 'L' : <type 'str'>
==================================================
val8 = sval3                                                            # STEP 66
ACTION: val8 = sval3 
sval3 = 'R' : <type 'str'>
val8 = None : <type 'NoneType'>
=> val8 = 'R' : <type 'str'>
==================================================
list3.discard(val8)                                                     # STEP 67
ACTION: list3.discard(val8) 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val8 = 'R' : <type 'str'>
list_REF3 = [] : <type 'list'>
REFERENCE ACTION: sortListDiscard(list_REF3,val8) 
==================================================
sval2 = sval3 + sval3                                                   # STEP 68
ACTION: sval2 = sval3 + sval3 
sval3 = 'R' : <type 'str'>
sval2 = None : <type 'NoneType'>
=> sval2 = 'RR' : <type 'str'>
==================================================
result = len(dict4)                                                     # STEP 69
ACTION: result = len(dict4) 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF4) 
==================================================
set1 = set0 | set2                                                      # STEP 70
ACTION: set1 = set0 | set2 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
set_REF2 = set([]) : <type 'set'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1 = set_REF0 | set_REF2 
==================================================
result = dict3 != dict3                                                 # STEP 71
ACTION: result = dict3 != dict3 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = dict_REF3 != dict_REF3 
==================================================
sval6 = sval9 + sval9                                                   # STEP 72
ACTION: sval6 = sval9 + sval9 
sval9 = 'L' : <type 'str'>
sval6 = None : <type 'NoneType'>
=> sval6 = 'LL' : <type 'str'>
==================================================
list3.irange(minimum=val8,maximum=val8,inclusive=(False,True),reverse=True)  # STEP 73
ACTION: list3.irange(minimum=val8,maximum=val8,inclusive=(False,True),reverse=True) 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val8 = 'R' : <type 'str'>
list_REF3 = [] : <type 'list'>
REFERENCE ACTION: list_REF3.irange(minimum=val8,maximum=val8,inclusive=(False,True),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
dict3.get(val4,None)                                                    # STEP 74
ACTION: dict3.get(val4,None) 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val4 = 'R' : <type 'str'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF3.get(val4,None) 
==================================================
iter(set2)                                                              # STEP 75
ACTION: iter(set2) 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: iter(set_REF2) 
==================================================
list3.islice(start=None,stop=ival4)                                     # STEP 76
ACTION: list3.islice(start=None,stop=ival4) 
ival4 = 1 : <type 'int'>
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [] : <type 'list'>
REFERENCE ACTION: list_REF3.islice(start=None,stop=ival4) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'islice'
==================================================
setList(list3,ival6,val8)                                               # STEP 77
ACTION: setList(list3,ival6,val8) 
ival6 = 0 : <type 'int'>
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val8 = 'R' : <type 'str'>
list_REF3 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: sortListSet(list_REF3,ival6,val8) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list assignment index out of range
==================================================
ival3 = ival6 + ival4                                                   # STEP 78
ACTION: ival3 = ival6 + ival4 
ival6 = 0 : <type 'int'>
ival4 = 1 : <type 'int'>
ival3 = None : <type 'NoneType'>
=> ival3 = 1 : <type 'int'>
==================================================
dict1 = dict4.copy()                                                    # STEP 79
ACTION: dict1 = dict4.copy() 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict1 = None : <type 'NoneType'>
dict_REF4 = {} : <type 'dict'>
dict_REF1 = None : <type 'NoneType'>
=> dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF1 = dict_REF4.copy() 
=> dict_REF1 = {} : <type 'dict'>
==================================================
ival7 = ival3 * ival6                                                   # STEP 80
ACTION: ival7 = ival3 * ival6 
ival3 = 1 : <type 'int'>
ival6 = 0 : <type 'int'>
ival7 = None : <type 'NoneType'>
=> ival7 = 0 : <type 'int'>
==================================================
result = dict3.peekitem(ival4)                                          # STEP 81
ACTION: result = dict3.peekitem(ival4) 
ival4 = 1 : <type 'int'>
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: result_REF = sortDictPeekitem(dict_REF3,ival4) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
==================================================
dict0 [val4]                                                            # STEP 82
ACTION: dict0 [val4] 
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val4 = 'R' : <type 'str'>
dict_REF0 = {} : <type 'dict'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.KeyError'> 'R'
REFERENCE ACTION: dict_REF0 [val4] 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.KeyError'> 'R'
==================================================
val6 = ival4                                                            # STEP 83
ACTION: val6 = ival4 
ival4 = 1 : <type 'int'>
val6 = 1 : <type 'int'>
==================================================
list1.append(val5)                                                      # STEP 84
ACTION: list1.append(val5) 
list1 = SortedList(['R'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val5 = 1 : <type 'int'>
list_REF1 = ['R'] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> 1 not in sort order at index 1
REFERENCE ACTION: sortListAppend(list_REF1,val5) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.ValueError'> would not be sorted
==================================================
list1.extend(list3)                                                     # STEP 85
ACTION: list1.extend(list3) 
list1 = SortedList(['R'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF1 = ['R'] : <type 'list'>
list_REF3 = [] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x11fa41a70>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 702458, in act11958
    self.p_list[1].extend(self.p_list[3])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #12 STEP #47 (0:00:30.002868) Mon Nov 20 16:28:42 2017 [ 421 stmts 547 branches ] 1133 TOTAL ACTIONS (37.7630565976/s)
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 17
STOPPING TESTING DUE TO TIMEOUT
22.4117875145 PERCENT COVERED
60.2507059574 TOTAL RUNTIME
24 EXECUTED
2303 TOTAL TEST OPERATIONS
1.57308936119 TIME SPENT EXECUTING TEST OPERATIONS
56.3340497017 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
1.37286806107 TIME SPENT CHECKING PROPERTIES
2.94595742226 TOTAL TIME SPENT RUNNING SUT
0.491807460785 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
list3 = sortedcontainers.SortedList()                                    # STEP 0
list3.extend(list3)                                                      # STEP 1
ival4 = 1                                                                # STEP 2
val5 = ival4                                                             # STEP 3
ival6 = ival4 - ival4                                                    # STEP 4
set3 = sortedcontainers.SortedSet()                                      # STEP 5
set3.islice(start=ival6,stop=ival6)                                      # STEP 6
plist1 = list3 [ival6 : ival4]                                           # STEP 7
set3.add(val5)                                                           # STEP 8
set3 ^= set3                                                             # STEP 9
set3.irange(minimum=val5,maximum=val5,inclusive=(False,True),reverse=True)  # STEP 10
set1 = set3.copy()                                                      # STEP 11
sval3 = 'R'                                                             # STEP 12
val4 = sval3                                                            # STEP 13
set0 = set1.copy()                                                      # STEP 14
result = list3 == list3                                                 # STEP 15
setListSlice(list3,ival4,ival4,list3)                                   # STEP 16
set1 = set0 & set3                                                      # STEP 17
result = list3.count(val4)                                              # STEP 18
set0.irange(minimum=val4,maximum=val4,inclusive=(False,False),reverse=True)  # STEP 19
set0 = set0 | set3                                                      # STEP 20
set0.irange(minimum=val4,maximum=val5,inclusive=(False,False))          # STEP 21
list1 = sortedcontainers.SortedList()                                   # STEP 22
setListSlice(list1,ival4,ival4,list3)                                   # STEP 23
list1 *= ival6                                                          # STEP 24
set3 = set3 ^ set1                                                      # STEP 25
setList(list1,ival4,val5)                                               # STEP 26
set2 = set1.copy()                                                      # STEP 27
set1 < set3                                                             # STEP 28
set1.update(list3)                                                      # STEP 29
set3 = set0 - set3                                                      # STEP 30
set4 = set0 & set1                                                      # STEP 31
setListSlice(list3,ival6,ival4,list1)                                   # STEP 32
setListSlice(list1,ival6,ival4,list1)                                   # STEP 33
set4.islice(start=None,stop=None)                                       # STEP 34
set0.irange(minimum=val4,maximum=val4,inclusive=(False,False),reverse=True)  # STEP 35
list3.irange(minimum=val4,maximum=val5,inclusive=(False,False))         # STEP 36
set1.add(val5)                                                          # STEP 37
setList(list1,ival6,val4)                                               # STEP 38
result = list1.index(val5)                                              # STEP 39
plist3 = list3 [ival6 : ival4]                                          # STEP 40
list1+=list1                                                            # STEP 41
list1.append(val4)                                                      # STEP 42
set1 = set2.copy()                                                      # STEP 43
list3 >= list3                                                          # STEP 44
set0.islice(start=ival4,stop=ival6)                                     # STEP 45
dict0 = sortedcontainers.SortedDict()                                   # STEP 46
dict3 = dict0.copy()                                                    # STEP 47
dict0 = dict3.fromkeys(list1,val4) ; result = dict0                     # STEP 48
result = len(dict3.keys())                                              # STEP 49
result = dict3.pop(val4,val4)                                           # STEP 50
set0 = set4 - set4                                                      # STEP 51
dict4 = dict3.fromkeys(set1,val4) ; result = dict4                      # STEP 52
sval9 = 'L'                                                             # STEP 53
set1.irange(minimum=val4,maximum=val5,inclusive=(False,False))          # STEP 54
set2 = set0 ^ set3                                                      # STEP 55
result = dict4.popitem()                                                # STEP 56
val6 = ival4                                                            # STEP 57
dict3.get(val5,val6)                                                    # STEP 58
result = dict0 == dict0                                                 # STEP 59
result = list3 == list1                                                 # STEP 60
dict0.irange(minimum=val5,maximum=val6,inclusive=(False,True),reverse=True)  # STEP 61
dict3.irange(minimum=val5,maximum=val6,inclusive=(False,True),reverse=True)  # STEP 62
dict0 = sortedcontainers.SortedDict()                                   # STEP 63
set0 = set0 & set4                                                      # STEP 64
val1 = sval9                                                            # STEP 65
val8 = sval3                                                            # STEP 66
list3.discard(val8)                                                     # STEP 67
sval2 = sval3 + sval3                                                   # STEP 68
result = len(dict4)                                                     # STEP 69
set1 = set0 | set2                                                      # STEP 70
result = dict3 != dict3                                                 # STEP 71
sval6 = sval9 + sval9                                                   # STEP 72
list3.irange(minimum=val8,maximum=val8,inclusive=(False,True),reverse=True)  # STEP 73
dict3.get(val4,None)                                                    # STEP 74
iter(set2)                                                              # STEP 75
list3.islice(start=None,stop=ival4)                                     # STEP 76
setList(list3,ival6,val8)                                               # STEP 77
ival3 = ival6 + ival4                                                   # STEP 78
dict1 = dict4.copy()                                                    # STEP 79
ival7 = ival3 * ival6                                                   # STEP 80
result = dict3.peekitem(ival4)                                          # STEP 81
dict0 [val4]                                                            # STEP 82
val6 = ival4                                                            # STEP 83
list1.append(val5)                                                      # STEP 84
list1.extend(list3)                                                     # STEP 85
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x11fa41a70>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 702458, in act11958
    self.p_list[1].extend(self.p_list[3])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
565 BRANCHES COVERED
433 STATEMENTS COVERED

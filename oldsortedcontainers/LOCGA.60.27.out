Random testing using config=Config(noExceptionMatch=False, generalize=False, localize=False, speed='FAST', probs='locsample.probs', LOCBaseline=0.2, noAlphaConvert=False, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, html=None, keepLast=False, stopWhenNoCoverage=None, generateLOC=None, computeFeatureStats=False, Pmutate=0.8, timeout=60, output='failure.9839.test', markov=None, noSwarmDependencies=False, startExploit=0.0, maxMustHitBranch=None, useHints=False, silentFail=False, highLowSwarm=None, maxMustHitStatement=None, progress=False, postCover=False, swarmLength=None, noCover=False, noEnumerateEnabled=False, full=True, swarmP=0.5, coverFile='coverage.out', markovP=1.0, swarmProbs=None, genDepth=None, exploitCeiling=0.1, logging=None, noCheck=False, throughput=False, uncaught=False, swarmSwitch=None, verbose=False, reducePool=False, exploit=0.8, fastQuickAnalysis=False, total=False, verboseExploit=False, swarm=False, sequenceP=1.0, biasLOC=None, timedProgress=30, relax=False, ddmin=False, stutter=None, readQuick=False, verboseActions=False, quickAnalysis=False, noReassign=False, sequenceSize=3, LOCProbs=False, sequencesFromTests=None, maxTests=-1, trackMaxCoverage=None, useQuickSequences=False, exploitBestHint=1, failedLogging=None, stopWhenStatements=None, greedyStutter=False, seed=None, stopWhenHitStatement=None, uniqueValuesAnalysis=False, normalize=False, startExploitStall=0, enumerateEnabled=False, internal=False, profile=False, multiple=True, stopWhenBranches=None, running=False, compareFails=False, Pcrossover=0.2, stopWhenHitBranch=None, depth=100, showActions=False)
** STARTING EXPLOITATION OF TESTS AT TIME 0.696192026138 AFTER 0 TESTS WITH NO NEW COVERAGE **
TEST #10 STEP #16 (0:00:30.018179) Mon Nov 20 14:48:24 2017 [ 426 stmts 553 branches ] 916 TOTAL ACTIONS (30.5148421748/s)
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x120cade18>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 703286, in act11972
    self.p_list[4].extend(self.p_list[2])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
Original test has 92 steps

SAVING TEST AS failure.9839.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
sval1 = 'L'                                                              # STEP 0
ACTION: sval1 = 'L' 
sval1 = None : <type 'NoneType'>
=> sval1 = 'L' : <type 'str'>
==================================================
sval8 = 'u'                                                              # STEP 1
ACTION: sval8 = 'u' 
sval8 = None : <type 'NoneType'>
=> sval8 = 'u' : <type 'str'>
==================================================
sval6 = 'Q'                                                              # STEP 2
ACTION: sval6 = 'Q' 
sval6 = None : <type 'NoneType'>
=> sval6 = 'Q' : <type 'str'>
==================================================
set1 = sortedcontainers.SortedSet()                                      # STEP 3
ACTION: set1 = sortedcontainers.SortedSet() 
set1 = None : <type 'NoneType'>
set_REF1 = None : <type 'NoneType'>
=> set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF1 = set([]) 
=> set_REF1 = set([]) : <type 'set'>
==================================================
set4 = sortedcontainers.SortedSet()                                      # STEP 4
ACTION: set4 = sortedcontainers.SortedSet() 
set4 = None : <type 'NoneType'>
set_REF4 = None : <type 'NoneType'>
=> set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF4 = set([]) 
=> set_REF4 = set([]) : <type 'set'>
==================================================
dict0 = sortedcontainers.SortedDict()                                    # STEP 5
ACTION: dict0 = sortedcontainers.SortedDict() 
dict0 = None : <type 'NoneType'>
dict_REF0 = None : <type 'NoneType'>
=> dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF0 = {} 
=> dict_REF0 = {} : <type 'dict'>
==================================================
result = len(dict0.keys())                                               # STEP 6
ACTION: result = len(dict0.keys())  
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF0.keys())  
==================================================
result = set4 != set4                                                    # STEP 7
ACTION: result = set4 != set4 
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF4 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = set_REF4 != set_REF4 
==================================================
result = dict0 == dict0                                                  # STEP 8
ACTION: result = dict0 == dict0 
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = dict_REF0 == dict_REF0 
==================================================
result = sorted(list(dict0.keys()))                                      # STEP 9
ACTION: result = sorted(list(dict0.keys())) 
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = sorted(list(dict_REF0.keys())) 
==================================================
set4 |= set1                                                            # STEP 10
ACTION: set4 |= set1 
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF4 = set([]) : <type 'set'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF4 |= set_REF1 
==================================================
result = dict0 != dict0                                                 # STEP 11
ACTION: result = dict0 != dict0 
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = dict_REF0 != dict_REF0 
==================================================
sval2 = 'Z'                                                             # STEP 12
ACTION: sval2 = 'Z' 
sval2 = None : <type 'NoneType'>
=> sval2 = 'Z' : <type 'str'>
==================================================
result = sorted(list(dict0.items()))                                    # STEP 13
ACTION: result = sorted(list(dict0.items())) 
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = sorted(list(dict_REF0.items())) 
==================================================
set0 = set1.union(set4)                                                 # STEP 14
ACTION: set0 = set1.union(set4) 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set0 = None : <type 'NoneType'>
set_REF1 = set([]) : <type 'set'>
set_REF4 = set([]) : <type 'set'>
set_REF0 = None : <type 'NoneType'>
=> set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF0 = set_REF1.union(set_REF4) 
=> set_REF0 = set([]) : <type 'set'>
==================================================
iter(set0)                                                              # STEP 15
ACTION: iter(set0) 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: iter(set_REF0) 
==================================================
result = len(dict0.keys())                                              # STEP 16
ACTION: result = len(dict0.keys())  
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF0.keys())  
==================================================
ival2 = 19                                                              # STEP 17
ACTION: ival2 = 19 
ival2 = None : <type 'NoneType'>
=> ival2 = 19 : <type 'int'>
==================================================
set3 = sortedcontainers.SortedSet()                                     # STEP 18
ACTION: set3 = sortedcontainers.SortedSet() 
set3 = None : <type 'NoneType'>
set_REF3 = None : <type 'NoneType'>
=> set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF3 = set([]) 
=> set_REF3 = set([]) : <type 'set'>
==================================================
set4 |= set1                                                            # STEP 19
ACTION: set4 |= set1 
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF4 = set([]) : <type 'set'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF4 |= set_REF1 
==================================================
set0 &= set0                                                            # STEP 20
ACTION: set0 &= set0 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF0 &= set_REF0 
==================================================
result = dict0.peekitem(ival2)                                          # STEP 21
ACTION: result = dict0.peekitem(ival2) 
ival2 = 19 : <type 'int'>
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF0 = {} : <type 'dict'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: result_REF = sortDictPeekitem(dict_REF0,ival2) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
==================================================
result = dict0 == dict0                                                 # STEP 22
ACTION: result = dict0 == dict0 
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = dict_REF0 == dict_REF0 
==================================================
ival1 = ival2 * ival2                                                   # STEP 23
ACTION: ival1 = ival2 * ival2 
ival2 = 19 : <type 'int'>
ival1 = None : <type 'NoneType'>
=> ival1 = 361 : <type 'int'>
==================================================
repr(dict0)                                                             # STEP 24
ACTION: repr(dict0) 
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: repr(dict_REF0) 
==================================================
result = len(dict0)                                                     # STEP 25
ACTION: result = len(dict0) 
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF0) 
==================================================
ival7 = ival1 - ival1                                                   # STEP 26
ACTION: ival7 = ival1 - ival1 
ival1 = 361 : <type 'int'>
ival7 = None : <type 'NoneType'>
=> ival7 = 0 : <type 'int'>
==================================================
ival5 = ival1 * ival1                                                   # STEP 27
ACTION: ival5 = ival1 * ival1 
ival1 = 361 : <type 'int'>
ival5 = None : <type 'NoneType'>
=> ival5 = 130321 : <type 'int'>
==================================================
set0 = set0 ^ set4                                                      # STEP 28
ACTION: set0 = set0 ^ set4 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
set_REF4 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF0 = set_REF0 ^ set_REF4 
==================================================
ival4 = ival2 * ival2                                                   # STEP 29
ACTION: ival4 = ival2 * ival2 
ival2 = 19 : <type 'int'>
ival4 = None : <type 'NoneType'>
=> ival4 = 361 : <type 'int'>
==================================================
set2 = set3 & set0                                                      # STEP 30
ACTION: set2 = set3 & set0 
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set2 = None : <type 'NoneType'>
set_REF3 = set([]) : <type 'set'>
set_REF0 = set([]) : <type 'set'>
set_REF2 = None : <type 'NoneType'>
=> set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF2 = set_REF3 & set_REF0 
=> set_REF2 = set([]) : <type 'set'>
==================================================
ival2 = ival4 - ival1                                                   # STEP 31
ACTION: ival2 = ival4 - ival1 
ival4 = 361 : <type 'int'>
ival1 = 361 : <type 'int'>
ival2 = 19 : <type 'int'>
=> ival2 = 0 : <type 'int'>
==================================================
dict2 = dict0.copy()                                                    # STEP 32
ACTION: dict2 = dict0.copy() 
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict2 = None : <type 'NoneType'>
dict_REF0 = {} : <type 'dict'>
dict_REF2 = None : <type 'NoneType'>
=> dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF2 = dict_REF0.copy() 
=> dict_REF2 = {} : <type 'dict'>
==================================================
dict0.islice(start=ival2,stop=ival7)                                    # STEP 33
ACTION: dict0.islice(start=ival2,stop=ival7) 
ival2 = 0 : <type 'int'>
ival7 = 0 : <type 'int'>
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF0.islice(start=ival2,stop=ival7) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'islice'
==================================================
set1 = set0 & set0                                                      # STEP 34
ACTION: set1 = set0 & set0 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1 = set_REF0 & set_REF0 
==================================================
set3 |= set1                                                            # STEP 35
ACTION: set3 |= set1 
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF3 = set([]) : <type 'set'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF3 |= set_REF1 
==================================================
result = dict2 == dict0                                                 # STEP 36
ACTION: result = dict2 == dict0 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF2 = {} : <type 'dict'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = dict_REF2 == dict_REF0 
==================================================
result = dict0 == dict2                                                 # STEP 37
ACTION: result = dict0 == dict2 
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF0 = {} : <type 'dict'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = dict_REF0 == dict_REF2 
==================================================
list2 = sortedcontainers.SortedList()                                   # STEP 38
ACTION: list2 = sortedcontainers.SortedList() 
list2 = None : <type 'NoneType'>
list_REF2 = None : <type 'NoneType'>
=> list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: list_REF2 = [] 
=> list_REF2 = [] : <type 'list'>
==================================================
list2.extend(list2)                                                     # STEP 39
ACTION: list2.extend(list2) 
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF2 = [] : <type 'list'>
REFERENCE ACTION: sortListExtend(list_REF2,list_REF2) 
==================================================
dict0.islice(start=ival2,stop=ival5,reverse=True)                       # STEP 40
ACTION: dict0.islice(start=ival2,stop=ival5,reverse=True) 
ival2 = 0 : <type 'int'>
ival5 = 130321 : <type 'int'>
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF0.islice(start=ival2,stop=ival5,reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'islice'
==================================================
dict4 = dict0.copy()                                                    # STEP 41
ACTION: dict4 = dict0.copy() 
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict4 = None : <type 'NoneType'>
dict_REF0 = {} : <type 'dict'>
dict_REF4 = None : <type 'NoneType'>
=> dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF4 = dict_REF0.copy() 
=> dict_REF4 = {} : <type 'dict'>
==================================================
set4.islice(start=None,stop=None)                                       # STEP 42
ACTION: set4.islice(start=None,stop=None) 
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF4 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF4.islice(start=None,stop=None) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'islice'
==================================================
setListSlice(list2,ival2,ival5,list2)                                   # STEP 43
ACTION: setListSlice(list2,ival2,ival5,list2) 
ival2 = 0 : <type 'int'>
ival5 = 130321 : <type 'int'>
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF2 = [] : <type 'list'>
REFERENCE ACTION: sortListSetSlice(list_REF2,ival2,ival5,list_REF2) 
==================================================
dict0.update(dict0)                                                     # STEP 44
ACTION: dict0.update(dict0) 
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF0.update(dict_REF0) 
==================================================
del list2 [ival5]                                                       # STEP 45
ACTION: del list2 [ival5] 
ival5 = 130321 : <type 'int'>
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: del list_REF2 [ival5] 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list assignment index out of range
==================================================
set0.update(list2)                                                      # STEP 46
ACTION: set0.update(list2) 
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
list_REF2 = [] : <type 'list'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF0.update(list_REF2) 
==================================================
set3 = set2 | set2                                                      # STEP 47
ACTION: set3 = set2 | set2 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF2 = set([]) : <type 'set'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF3 = set_REF2 | set_REF2 
==================================================
dict1 = sortedcontainers.SortedDict()                                   # STEP 48
ACTION: dict1 = sortedcontainers.SortedDict() 
dict1 = None : <type 'NoneType'>
dict_REF1 = None : <type 'NoneType'>
=> dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF1 = {} 
=> dict_REF1 = {} : <type 'dict'>
==================================================
dict3 = sortedcontainers.SortedDict()                                   # STEP 49
ACTION: dict3 = sortedcontainers.SortedDict() 
dict3 = None : <type 'NoneType'>
dict_REF3 = None : <type 'NoneType'>
=> dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF3 = {} 
=> dict_REF3 = {} : <type 'dict'>
==================================================
dict0 = dict1.copy()                                                    # STEP 50
ACTION: dict0 = dict1.copy() 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {} : <type 'dict'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF0 = dict_REF1.copy() 
==================================================
list4 = sortedcontainers.SortedList()                                   # STEP 51
ACTION: list4 = sortedcontainers.SortedList() 
list4 = None : <type 'NoneType'>
list_REF4 = None : <type 'NoneType'>
=> list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: list_REF4 = [] 
=> list_REF4 = [] : <type 'list'>
==================================================
repr(dict4)                                                             # STEP 52
ACTION: repr(dict4) 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: repr(dict_REF4) 
==================================================
repr(dict1)                                                             # STEP 53
ACTION: repr(dict1) 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: repr(dict_REF1) 
==================================================
set1 = set1 & set0                                                      # STEP 54
ACTION: set1 = set1 & set0 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF1 = set([]) : <type 'set'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1 = set_REF1 & set_REF0 
==================================================
result = sorted(list(dict4.keys()))                                     # STEP 55
ACTION: result = sorted(list(dict4.keys())) 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = sorted(list(dict_REF4.keys())) 
==================================================
iter(dict2)                                                             # STEP 56
ACTION: iter(dict2) 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: iter(dict_REF2) 
==================================================
list4 < list2                                                           # STEP 57
ACTION: list4 < list2 
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = [] : <type 'list'>
list_REF2 = [] : <type 'list'>
REFERENCE ACTION: list_REF4 < list_REF2 
==================================================
val5 = sval2                                                            # STEP 58
ACTION: val5 = sval2 
sval2 = 'Z' : <type 'str'>
val5 = None : <type 'NoneType'>
=> val5 = 'Z' : <type 'str'>
==================================================
result = (dict1.keys()).count(val5)                                     # STEP 59
ACTION: result = (dict1.keys()).count(val5)  
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val5 = 'Z' : <type 'str'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = (dict_REF1.keys()).count(val5)  
==================================================
set0 = sortedcontainers.SortedSet()                                     # STEP 60
ACTION: set0 = sortedcontainers.SortedSet() 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF0 = set([]) 
==================================================
repr(set2)                                                              # STEP 61
ACTION: repr(set2) 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: repr(set_REF2) 
==================================================
setListSlice(list4,ival1,ival4,list2)                                   # STEP 62
ACTION: setListSlice(list4,ival1,ival4,list2) 
ival1 = 361 : <type 'int'>
ival4 = 361 : <type 'int'>
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = [] : <type 'list'>
list_REF2 = [] : <type 'list'>
REFERENCE ACTION: sortListSetSlice(list_REF4,ival1,ival4,list_REF2) 
==================================================
setList(list4,ival4,val5)                                               # STEP 63
ACTION: setList(list4,ival4,val5) 
ival4 = 361 : <type 'int'>
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val5 = 'Z' : <type 'str'>
list_REF4 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: sortListSet(list_REF4,ival4,val5) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list assignment index out of range
==================================================
dict4.irange(minimum=val5,maximum=val5,inclusive=(True,False))          # STEP 64
ACTION: dict4.irange(minimum=val5,maximum=val5,inclusive=(True,False)) 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val5 = 'Z' : <type 'str'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF4.irange(minimum=val5,maximum=val5,inclusive=(True,False)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'irange'
==================================================
ival1 = ival7 * ival2                                                   # STEP 65
ACTION: ival1 = ival7 * ival2 
ival7 = 0 : <type 'int'>
ival2 = 0 : <type 'int'>
ival1 = 361 : <type 'int'>
=> ival1 = 0 : <type 'int'>
==================================================
set2 = set3 | set2                                                      # STEP 66
ACTION: set2 = set3 | set2 
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF3 = set([]) : <type 'set'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF2 = set_REF3 | set_REF2 
==================================================
result = (dict4.keys()).count(val5)                                     # STEP 67
ACTION: result = (dict4.keys()).count(val5)  
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val5 = 'Z' : <type 'str'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = (dict_REF4.keys()).count(val5)  
==================================================
result = list2.index(val5)                                              # STEP 68
ACTION: result = list2.index(val5) 
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val5 = 'Z' : <type 'str'>
list_REF2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> 'Z' is not in list
REFERENCE ACTION: result_REF = list_REF2.index(val5) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.ValueError'> 'Z' is not in list
==================================================
result = (dict0.keys()).count(val5)                                     # STEP 69
ACTION: result = (dict0.keys()).count(val5)  
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val5 = 'Z' : <type 'str'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = (dict_REF0.keys()).count(val5)  
==================================================
set0.islice(start=None,stop=None)                                       # STEP 70
ACTION: set0.islice(start=None,stop=None) 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF0.islice(start=None,stop=None) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'islice'
==================================================
val5 in list2                                                           # STEP 71
ACTION: val5 in list2 
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val5 = 'Z' : <type 'str'>
list_REF2 = [] : <type 'list'>
REFERENCE ACTION: val5 in list_REF2 
==================================================
dict4 [val5]                                                            # STEP 72
ACTION: dict4 [val5] 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val5 = 'Z' : <type 'str'>
dict_REF4 = {} : <type 'dict'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.KeyError'> 'Z'
REFERENCE ACTION: dict_REF4 [val5] 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.KeyError'> 'Z'
==================================================
list2.irange(minimum=val5,maximum=val5,inclusive=(True,False),reverse=True)  # STEP 73
ACTION: list2.irange(minimum=val5,maximum=val5,inclusive=(True,False),reverse=True) 
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val5 = 'Z' : <type 'str'>
list_REF2 = [] : <type 'list'>
REFERENCE ACTION: list_REF2.irange(minimum=val5,maximum=val5,inclusive=(True,False),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
val5 in dict4                                                           # STEP 74
ACTION: val5 in dict4 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val5 = 'Z' : <type 'str'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: val5 in dict_REF4 
==================================================
set0 = set1 - set2                                                      # STEP 75
ACTION: set0 = set1 - set2 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF1 = set([]) : <type 'set'>
set_REF2 = set([]) : <type 'set'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF0 = set_REF1 - set_REF2 
==================================================
result = dict2.peekitem()                                               # STEP 76
ACTION: result = dict2.peekitem() 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF2 = {} : <type 'dict'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: result_REF = sortDictPeekitem(dict_REF2,) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
==================================================
list2.extend(list2)                                                     # STEP 77
ACTION: list2.extend(list2) 
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF2 = [] : <type 'list'>
REFERENCE ACTION: sortListExtend(list_REF2,list_REF2) 
==================================================
list2.irange(minimum=val5,maximum=val5,inclusive=(False,True),reverse=True)  # STEP 78
ACTION: list2.irange(minimum=val5,maximum=val5,inclusive=(False,True),reverse=True) 
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val5 = 'Z' : <type 'str'>
list_REF2 = [] : <type 'list'>
REFERENCE ACTION: list_REF2.irange(minimum=val5,maximum=val5,inclusive=(False,True),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
result = list2.pop(ival7)                                               # STEP 79
ACTION: result = list2.pop(ival7) 
ival7 = 0 : <type 'int'>
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> pop index out of range
REFERENCE ACTION: result_REF = list_REF2.pop(ival7) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> pop from empty list
==================================================
set0.irange(minimum=val5,maximum=val5,inclusive=(False,False))          # STEP 80
ACTION: set0.irange(minimum=val5,maximum=val5,inclusive=(False,False)) 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
val5 = 'Z' : <type 'str'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF0.irange(minimum=val5,maximum=val5,inclusive=(False,False)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'irange'
==================================================
dict3.get(val5,None)                                                    # STEP 81
ACTION: dict3.get(val5,None) 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val5 = 'Z' : <type 'str'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF3.get(val5,None) 
==================================================
dict1 = sortedcontainers.SortedDict()                                   # STEP 82
ACTION: dict1 = sortedcontainers.SortedDict() 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF1 = {} 
==================================================
result = list2 == list2                                                 # STEP 83
ACTION: result = list2 == list2 
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF2 = [] : <type 'list'>
REFERENCE ACTION: result_REF = list_REF2 == list_REF2 
==================================================
list4.insert(ival1,val5)                                                # STEP 84
ACTION: list4.insert(ival1,val5) 
ival1 = 0 : <type 'int'>
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val5 = 'Z' : <type 'str'>
list_REF4 = [] : <type 'list'>
=> list4 = SortedList(['Z'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: sortListInsert(list_REF4,ival1,val5) 
=> list_REF4 = ['Z'] : <type 'list'>
==================================================
list4.irange(minimum=val5,maximum=val5,inclusive=(False,False),reverse=True)  # STEP 85
ACTION: list4.irange(minimum=val5,maximum=val5,inclusive=(False,False),reverse=True) 
list4 = SortedList(['Z'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val5 = 'Z' : <type 'str'>
list_REF4 = ['Z'] : <type 'list'>
REFERENCE ACTION: list_REF4.irange(minimum=val5,maximum=val5,inclusive=(False,False),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
setList(list4,ival7,val5)                                               # STEP 86
ACTION: setList(list4,ival7,val5) 
ival7 = 0 : <type 'int'>
list4 = SortedList(['Z'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val5 = 'Z' : <type 'str'>
list_REF4 = ['Z'] : <type 'list'>
REFERENCE ACTION: sortListSet(list_REF4,ival7,val5) 
==================================================
list4.islice(start=None,stop=ival5)                                     # STEP 87
ACTION: list4.islice(start=None,stop=ival5) 
ival5 = 130321 : <type 'int'>
list4 = SortedList(['Z'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = ['Z'] : <type 'list'>
REFERENCE ACTION: list_REF4.islice(start=None,stop=ival5) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'islice'
==================================================
ival1 = ival5 - ival1                                                   # STEP 88
ACTION: ival1 = ival5 - ival1 
ival5 = 130321 : <type 'int'>
ival1 = 0 : <type 'int'>
=> ival1 = 130321 : <type 'int'>
==================================================
result = len(dict0)                                                     # STEP 89
ACTION: result = len(dict0) 
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF0) 
==================================================
list4.irange(minimum=val5,maximum=val5,inclusive=(True,False))          # STEP 90
ACTION: list4.irange(minimum=val5,maximum=val5,inclusive=(True,False)) 
list4 = SortedList(['Z'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val5 = 'Z' : <type 'str'>
list_REF4 = ['Z'] : <type 'list'>
REFERENCE ACTION: list_REF4.irange(minimum=val5,maximum=val5,inclusive=(True,False)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
list4.extend(list2)                                                     # STEP 91
ACTION: list4.extend(list2) 
list4 = SortedList(['Z'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = ['Z'] : <type 'list'>
list_REF2 = [] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x120cec3b0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 703286, in act11972
    self.p_list[4].extend(self.p_list[2])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 31
STOPPING TESTING DUE TO TIMEOUT
23.4199302055 PERCENT COVERED
60.2109560966 TOTAL RUNTIME
20 EXECUTED
1923 TOTAL TEST OPERATIONS
1.36016607285 TIME SPENT EXECUTING TEST OPERATIONS
56.5040564537 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
1.20781993866 TIME SPENT CHECKING PROPERTIES
2.56798601151 TOTAL TIME SPENT RUNNING SUT
0.51434636116 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
sval1 = 'L'                                                              # STEP 0
sval8 = 'u'                                                              # STEP 1
sval6 = 'Q'                                                              # STEP 2
set1 = sortedcontainers.SortedSet()                                      # STEP 3
set4 = sortedcontainers.SortedSet()                                      # STEP 4
dict0 = sortedcontainers.SortedDict()                                    # STEP 5
result = len(dict0.keys())                                               # STEP 6
result = set4 != set4                                                    # STEP 7
result = dict0 == dict0                                                  # STEP 8
result = sorted(list(dict0.keys()))                                      # STEP 9
set4 |= set1                                                            # STEP 10
result = dict0 != dict0                                                 # STEP 11
sval2 = 'Z'                                                             # STEP 12
result = sorted(list(dict0.items()))                                    # STEP 13
set0 = set1.union(set4)                                                 # STEP 14
iter(set0)                                                              # STEP 15
result = len(dict0.keys())                                              # STEP 16
ival2 = 19                                                              # STEP 17
set3 = sortedcontainers.SortedSet()                                     # STEP 18
set4 |= set1                                                            # STEP 19
set0 &= set0                                                            # STEP 20
result = dict0.peekitem(ival2)                                          # STEP 21
result = dict0 == dict0                                                 # STEP 22
ival1 = ival2 * ival2                                                   # STEP 23
repr(dict0)                                                             # STEP 24
result = len(dict0)                                                     # STEP 25
ival7 = ival1 - ival1                                                   # STEP 26
ival5 = ival1 * ival1                                                   # STEP 27
set0 = set0 ^ set4                                                      # STEP 28
ival4 = ival2 * ival2                                                   # STEP 29
set2 = set3 & set0                                                      # STEP 30
ival2 = ival4 - ival1                                                   # STEP 31
dict2 = dict0.copy()                                                    # STEP 32
dict0.islice(start=ival2,stop=ival7)                                    # STEP 33
set1 = set0 & set0                                                      # STEP 34
set3 |= set1                                                            # STEP 35
result = dict2 == dict0                                                 # STEP 36
result = dict0 == dict2                                                 # STEP 37
list2 = sortedcontainers.SortedList()                                   # STEP 38
list2.extend(list2)                                                     # STEP 39
dict0.islice(start=ival2,stop=ival5,reverse=True)                       # STEP 40
dict4 = dict0.copy()                                                    # STEP 41
set4.islice(start=None,stop=None)                                       # STEP 42
setListSlice(list2,ival2,ival5,list2)                                   # STEP 43
dict0.update(dict0)                                                     # STEP 44
del list2 [ival5]                                                       # STEP 45
set0.update(list2)                                                      # STEP 46
set3 = set2 | set2                                                      # STEP 47
dict1 = sortedcontainers.SortedDict()                                   # STEP 48
dict3 = sortedcontainers.SortedDict()                                   # STEP 49
dict0 = dict1.copy()                                                    # STEP 50
list4 = sortedcontainers.SortedList()                                   # STEP 51
repr(dict4)                                                             # STEP 52
repr(dict1)                                                             # STEP 53
set1 = set1 & set0                                                      # STEP 54
result = sorted(list(dict4.keys()))                                     # STEP 55
iter(dict2)                                                             # STEP 56
list4 < list2                                                           # STEP 57
val5 = sval2                                                            # STEP 58
result = (dict1.keys()).count(val5)                                     # STEP 59
set0 = sortedcontainers.SortedSet()                                     # STEP 60
repr(set2)                                                              # STEP 61
setListSlice(list4,ival1,ival4,list2)                                   # STEP 62
setList(list4,ival4,val5)                                               # STEP 63
dict4.irange(minimum=val5,maximum=val5,inclusive=(True,False))          # STEP 64
ival1 = ival7 * ival2                                                   # STEP 65
set2 = set3 | set2                                                      # STEP 66
result = (dict4.keys()).count(val5)                                     # STEP 67
result = list2.index(val5)                                              # STEP 68
result = (dict0.keys()).count(val5)                                     # STEP 69
set0.islice(start=None,stop=None)                                       # STEP 70
val5 in list2                                                           # STEP 71
dict4 [val5]                                                            # STEP 72
list2.irange(minimum=val5,maximum=val5,inclusive=(True,False),reverse=True)  # STEP 73
val5 in dict4                                                           # STEP 74
set0 = set1 - set2                                                      # STEP 75
result = dict2.peekitem()                                               # STEP 76
list2.extend(list2)                                                     # STEP 77
list2.irange(minimum=val5,maximum=val5,inclusive=(False,True),reverse=True)  # STEP 78
result = list2.pop(ival7)                                               # STEP 79
set0.irange(minimum=val5,maximum=val5,inclusive=(False,False))          # STEP 80
dict3.get(val5,None)                                                    # STEP 81
dict1 = sortedcontainers.SortedDict()                                   # STEP 82
result = list2 == list2                                                 # STEP 83
list4.insert(ival1,val5)                                                # STEP 84
list4.irange(minimum=val5,maximum=val5,inclusive=(False,False),reverse=True)  # STEP 85
setList(list4,ival7,val5)                                               # STEP 86
list4.islice(start=None,stop=ival5)                                     # STEP 87
ival1 = ival5 - ival1                                                   # STEP 88
result = len(dict0)                                                     # STEP 89
list4.irange(minimum=val5,maximum=val5,inclusive=(True,False))          # STEP 90
list4.extend(list2)                                                     # STEP 91
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x120cec3b0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 703286, in act11972
    self.p_list[4].extend(self.p_list[2])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
590 BRANCHES COVERED
451 STATEMENTS COVERED

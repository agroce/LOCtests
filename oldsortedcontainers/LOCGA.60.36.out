Random testing using config=Config(noExceptionMatch=False, generalize=False, localize=False, speed='FAST', probs='locsample.probs', LOCBaseline=0.2, noAlphaConvert=False, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, html=None, keepLast=False, stopWhenNoCoverage=None, generateLOC=None, computeFeatureStats=False, Pmutate=0.8, timeout=60, output='failure.10248.test', markov=None, noSwarmDependencies=False, startExploit=0.0, maxMustHitBranch=None, useHints=False, silentFail=False, highLowSwarm=None, maxMustHitStatement=None, progress=False, postCover=False, swarmLength=None, noCover=False, noEnumerateEnabled=False, full=True, swarmP=0.5, coverFile='coverage.out', markovP=1.0, swarmProbs=None, genDepth=None, exploitCeiling=0.1, logging=None, noCheck=False, throughput=False, uncaught=False, swarmSwitch=None, verbose=False, reducePool=False, exploit=0.8, fastQuickAnalysis=False, total=False, verboseExploit=False, swarm=False, sequenceP=1.0, biasLOC=None, timedProgress=30, relax=False, ddmin=False, stutter=None, readQuick=False, verboseActions=False, quickAnalysis=False, noReassign=False, sequenceSize=3, LOCProbs=False, sequencesFromTests=None, maxTests=-1, trackMaxCoverage=None, useQuickSequences=False, exploitBestHint=1, failedLogging=None, stopWhenStatements=None, greedyStutter=False, seed=None, stopWhenHitStatement=None, uniqueValuesAnalysis=False, normalize=False, startExploitStall=0, enumerateEnabled=False, internal=False, profile=False, multiple=True, stopWhenBranches=None, running=False, compareFails=False, Pcrossover=0.2, stopWhenHitBranch=None, depth=100, showActions=False)
** STARTING EXPLOITATION OF TESTS AT TIME 0.675854921341 AFTER 0 TESTS WITH NO NEW COVERAGE **
TEST #12 STEP #29 (0:00:30.003497) Mon Nov 20 15:43:40 2017 [ 344 stmts 454 branches ] 1129 TOTAL ACTIONS (37.6289468972/s)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x11fe5ddd0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306258, in check
    assert self.p_list[3] == self.p_list_REF[3]
Original test has 128 steps

SAVING TEST AS failure.10248.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
sval9 = 'A'                                                              # STEP 0
ACTION: sval9 = 'A' 
sval9 = None : <type 'NoneType'>
=> sval9 = 'A' : <type 'str'>
==================================================
sval6 = sval9 + sval9                                                    # STEP 1
ACTION: sval6 = sval9 + sval9 
sval9 = 'A' : <type 'str'>
sval6 = None : <type 'NoneType'>
=> sval6 = 'AA' : <type 'str'>
==================================================
sval3 = 'G'                                                              # STEP 2
ACTION: sval3 = 'G' 
sval3 = None : <type 'NoneType'>
=> sval3 = 'G' : <type 'str'>
==================================================
ival5 = 16                                                               # STEP 3
ACTION: ival5 = 16 
ival5 = None : <type 'NoneType'>
=> ival5 = 16 : <type 'int'>
==================================================
sval0 = 'A'                                                              # STEP 4
ACTION: sval0 = 'A' 
sval0 = None : <type 'NoneType'>
=> sval0 = 'A' : <type 'str'>
==================================================
sval9 = sval3 + sval3                                                    # STEP 5
ACTION: sval9 = sval3 + sval3 
sval3 = 'G' : <type 'str'>
sval9 = 'A' : <type 'str'>
=> sval9 = 'GG' : <type 'str'>
==================================================
set1 = sortedcontainers.SortedSet()                                      # STEP 6
ACTION: set1 = sortedcontainers.SortedSet() 
set1 = None : <type 'NoneType'>
set_REF1 = None : <type 'NoneType'>
=> set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF1 = set([]) 
=> set_REF1 = set([]) : <type 'set'>
==================================================
set3 = set1.copy()                                                       # STEP 7
ACTION: set3 = set1.copy() 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set3 = None : <type 'NoneType'>
set_REF1 = set([]) : <type 'set'>
set_REF3 = None : <type 'NoneType'>
=> set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF3 = set_REF1.copy() 
=> set_REF3 = set([]) : <type 'set'>
==================================================
val7 = sval9                                                             # STEP 8
ACTION: val7 = sval9 
sval9 = 'GG' : <type 'str'>
val7 = None : <type 'NoneType'>
=> val7 = 'GG' : <type 'str'>
==================================================
val0 = ival5                                                             # STEP 9
ACTION: val0 = ival5 
ival5 = 16 : <type 'int'>
val0 = None : <type 'NoneType'>
=> val0 = 16 : <type 'int'>
==================================================
set0 = set3.union(set1)                                                 # STEP 10
ACTION: set0 = set3.union(set1) 
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set0 = None : <type 'NoneType'>
set_REF3 = set([]) : <type 'set'>
set_REF1 = set([]) : <type 'set'>
set_REF0 = None : <type 'NoneType'>
=> set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF0 = set_REF3.union(set_REF1) 
=> set_REF0 = set([]) : <type 'set'>
==================================================
set1 = set0 - set1                                                      # STEP 11
ACTION: set1 = set0 - set1 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1 = set_REF0 - set_REF1 
==================================================
set3 = set0 & set0                                                      # STEP 12
ACTION: set3 = set0 & set0 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF3 = set_REF0 & set_REF0 
==================================================
repr(set3)                                                              # STEP 13
ACTION: repr(set3) 
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: repr(set_REF3) 
==================================================
set1 ^= set3                                                            # STEP 14
ACTION: set1 ^= set3 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF1 = set([]) : <type 'set'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1 ^= set_REF3 
==================================================
set3 = set0 ^ set3                                                      # STEP 15
ACTION: set3 = set0 ^ set3 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF3 = set_REF0 ^ set_REF3 
==================================================
set4 = set1 ^ set0                                                      # STEP 16
ACTION: set4 = set1 ^ set0 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set4 = None : <type 'NoneType'>
set_REF1 = set([]) : <type 'set'>
set_REF0 = set([]) : <type 'set'>
set_REF4 = None : <type 'NoneType'>
=> set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF4 = set_REF1 ^ set_REF0 
=> set_REF4 = set([]) : <type 'set'>
==================================================
reversed(set1)                                                          # STEP 17
ACTION: reversed(set1) 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: reversed(set_REF1) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.TypeError'> argument to reversed() must be a sequence
==================================================
set2 = set1 & set1                                                      # STEP 18
ACTION: set2 = set1 & set1 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set2 = None : <type 'NoneType'>
set_REF1 = set([]) : <type 'set'>
set_REF2 = None : <type 'NoneType'>
=> set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF2 = set_REF1 & set_REF1 
=> set_REF2 = set([]) : <type 'set'>
==================================================
ival5 = ival5 + ival5                                                   # STEP 19
ACTION: ival5 = ival5 + ival5 
ival5 = 16 : <type 'int'>
=> ival5 = 32 : <type 'int'>
==================================================
val3 = ival5                                                            # STEP 20
ACTION: val3 = ival5 
ival5 = 32 : <type 'int'>
val3 = None : <type 'NoneType'>
=> val3 = 32 : <type 'int'>
==================================================
result = set4.issuperset(set2)                                          # STEP 21
ACTION: result = set4.issuperset(set2) 
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF4 = set([]) : <type 'set'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = set_REF4.issuperset(set_REF2) 
==================================================
set2.irange(minimum=val7,maximum=val3,inclusive=(False,False),reverse=True)  # STEP 22
ACTION: set2.irange(minimum=val7,maximum=val3,inclusive=(False,False),reverse=True) 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
val7 = 'GG' : <type 'str'>
val3 = 32 : <type 'int'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF2.irange(minimum=val7,maximum=val3,inclusive=(False,False),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'irange'
==================================================
repr(set2)                                                              # STEP 23
ACTION: repr(set2) 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: repr(set_REF2) 
==================================================
val5 = sval6                                                            # STEP 24
ACTION: val5 = sval6 
sval6 = 'AA' : <type 'str'>
val5 = None : <type 'NoneType'>
=> val5 = 'AA' : <type 'str'>
==================================================
set1 = set0 | set1                                                      # STEP 25
ACTION: set1 = set0 | set1 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1 = set_REF0 | set_REF1 
==================================================
set2 = set1 ^ set4                                                      # STEP 26
ACTION: set2 = set1 ^ set4 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF1 = set([]) : <type 'set'>
set_REF4 = set([]) : <type 'set'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF2 = set_REF1 ^ set_REF4 
==================================================
ival1 = ival5 + ival5                                                   # STEP 27
ACTION: ival1 = ival5 + ival5 
ival5 = 32 : <type 'int'>
ival1 = None : <type 'NoneType'>
=> ival1 = 64 : <type 'int'>
==================================================
set3.irange(minimum=val0,maximum=val3,inclusive=(False,False),reverse=True)  # STEP 28
ACTION: set3.irange(minimum=val0,maximum=val3,inclusive=(False,False),reverse=True) 
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
val0 = 16 : <type 'int'>
val3 = 32 : <type 'int'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF3.irange(minimum=val0,maximum=val3,inclusive=(False,False),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'irange'
==================================================
set1 < set4                                                             # STEP 29
ACTION: set1 < set4 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF1 = set([]) : <type 'set'>
set_REF4 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1 < set_REF4 
==================================================
ival3 = ival1 - ival1                                                   # STEP 30
ACTION: ival3 = ival1 - ival1 
ival1 = 64 : <type 'int'>
ival3 = None : <type 'NoneType'>
=> ival3 = 0 : <type 'int'>
==================================================
set4 -= set2                                                            # STEP 31
ACTION: set4 -= set2 
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF4 = set([]) : <type 'set'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF4 -= set_REF2 
==================================================
set4 = set2 & set3                                                      # STEP 32
ACTION: set4 = set2 & set3 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF2 = set([]) : <type 'set'>
set_REF3 = set([]) : <type 'set'>
set_REF4 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF4 = set_REF2 & set_REF3 
==================================================
result = set3.isdisjoint(set3)                                          # STEP 33
ACTION: result = set3.isdisjoint(set3) 
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = set_REF3.isdisjoint(set_REF3) 
==================================================
set2 = set1.copy()                                                      # STEP 34
ACTION: set2 = set1.copy() 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF1 = set([]) : <type 'set'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF2 = set_REF1.copy() 
==================================================
set4.islice(start=None,stop=None)                                       # STEP 35
ACTION: set4.islice(start=None,stop=None) 
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF4 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF4.islice(start=None,stop=None) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'islice'
==================================================
ival7 = ival1 + ival3                                                   # STEP 36
ACTION: ival7 = ival1 + ival3 
ival1 = 64 : <type 'int'>
ival3 = 0 : <type 'int'>
ival7 = None : <type 'NoneType'>
=> ival7 = 64 : <type 'int'>
==================================================
set0 = set4.union(set4)                                                 # STEP 37
ACTION: set0 = set4.union(set4) 
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF4 = set([]) : <type 'set'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF0 = set_REF4.union(set_REF4) 
==================================================
set1 &= set0                                                            # STEP 38
ACTION: set1 &= set0 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF1 = set([]) : <type 'set'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1 &= set_REF0 
==================================================
set4 = set3.union(set4)                                                 # STEP 39
ACTION: set4 = set3.union(set4) 
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF3 = set([]) : <type 'set'>
set_REF4 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF4 = set_REF3.union(set_REF4) 
==================================================
set3 |= set4                                                            # STEP 40
ACTION: set3 |= set4 
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF3 = set([]) : <type 'set'>
set_REF4 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF3 |= set_REF4 
==================================================
ival1 = ival5 + ival7                                                   # STEP 41
ACTION: ival1 = ival5 + ival7 
ival5 = 32 : <type 'int'>
ival7 = 64 : <type 'int'>
ival1 = 64 : <type 'int'>
=> ival1 = 96 : <type 'int'>
==================================================
set4 = set1 | set1                                                      # STEP 42
ACTION: set4 = set1 | set1 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF1 = set([]) : <type 'set'>
set_REF4 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF4 = set_REF1 | set_REF1 
==================================================
set1 = set4.union(set0)                                                 # STEP 43
ACTION: set1 = set4.union(set0) 
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF4 = set([]) : <type 'set'>
set_REF0 = set([]) : <type 'set'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1 = set_REF4.union(set_REF0) 
==================================================
result = set3 == set0                                                   # STEP 44
ACTION: result = set3 == set0 
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF3 = set([]) : <type 'set'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = set_REF3 == set_REF0 
==================================================
ival7 = ival1 - ival1                                                   # STEP 45
ACTION: ival7 = ival1 - ival1 
ival1 = 96 : <type 'int'>
ival7 = 64 : <type 'int'>
=> ival7 = 0 : <type 'int'>
==================================================
dict2 = sortedcontainers.SortedDict()                                   # STEP 46
ACTION: dict2 = sortedcontainers.SortedDict() 
dict2 = None : <type 'NoneType'>
dict_REF2 = None : <type 'NoneType'>
=> dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF2 = {} 
=> dict_REF2 = {} : <type 'dict'>
==================================================
result = (dict2.keys()).count(val0)                                     # STEP 47
ACTION: result = (dict2.keys()).count(val0)  
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val0 = 16 : <type 'int'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = (dict_REF2.keys()).count(val0)  
==================================================
dict3 = dict2.fromkeys(set4,val7) ; result = dict3                      # STEP 48
ACTION: dict3 = dict2.fromkeys(set4,val7) ; result = dict3 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict3 = None : <type 'NoneType'>
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
val7 = 'GG' : <type 'str'>
dict_REF2 = {} : <type 'dict'>
dict_REF3 = None : <type 'NoneType'>
set_REF4 = set([]) : <type 'set'>
=> dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF3 = dict_REF2.fromkeys(set_REF4,val7) ; result_REF = dict_REF3 
=> dict_REF3 = {} : <type 'dict'>
==================================================
dict3.islice(start=ival5,stop=ival7,reverse=True)                       # STEP 49
ACTION: dict3.islice(start=ival5,stop=ival7,reverse=True) 
ival5 = 32 : <type 'int'>
ival7 = 0 : <type 'int'>
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF3.islice(start=ival5,stop=ival7,reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'islice'
==================================================
set1.update(set0)                                                       # STEP 50
ACTION: set1.update(set0) 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF1 = set([]) : <type 'set'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1.update(set_REF0) 
==================================================
sval3 = sval3 + sval3                                                   # STEP 51
ACTION: sval3 = sval3 + sval3 
sval3 = 'G' : <type 'str'>
=> sval3 = 'GG' : <type 'str'>
==================================================
list3 = sortedcontainers.SortedList()                                   # STEP 52
ACTION: list3 = sortedcontainers.SortedList() 
list3 = None : <type 'NoneType'>
list_REF3 = None : <type 'NoneType'>
=> list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: list_REF3 = [] 
=> list_REF3 = [] : <type 'list'>
==================================================
dict2.get(val5,val7)                                                    # STEP 53
ACTION: dict2.get(val5,val7) 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val5 = 'AA' : <type 'str'>
val7 = 'GG' : <type 'str'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF2.get(val5,val7) 
==================================================
result = list3 == list3                                                 # STEP 54
ACTION: result = list3 == list3 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [] : <type 'list'>
REFERENCE ACTION: result_REF = list_REF3 == list_REF3 
==================================================
set3.irange(minimum=val7,maximum=val3,inclusive=(False,True))           # STEP 55
ACTION: set3.irange(minimum=val7,maximum=val3,inclusive=(False,True)) 
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
val7 = 'GG' : <type 'str'>
val3 = 32 : <type 'int'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF3.irange(minimum=val7,maximum=val3,inclusive=(False,True)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'irange'
==================================================
dict2.irange(minimum=val7,maximum=val7,inclusive=(False,False))         # STEP 56
ACTION: dict2.irange(minimum=val7,maximum=val7,inclusive=(False,False)) 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val7 = 'GG' : <type 'str'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF2.irange(minimum=val7,maximum=val7,inclusive=(False,False)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'irange'
==================================================
result = dict3.peekitem()                                               # STEP 57
ACTION: result = dict3.peekitem() 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: result_REF = sortDictPeekitem(dict_REF3,) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
==================================================
dict2 = sortedcontainers.SortedDict()                                   # STEP 58
ACTION: dict2 = sortedcontainers.SortedDict() 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF2 = {} 
==================================================
set1 = set0 ^ set0                                                      # STEP 59
ACTION: set1 = set0 ^ set0 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1 = set_REF0 ^ set_REF0 
==================================================
set3 = set1.copy()                                                      # STEP 60
ACTION: set3 = set1.copy() 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF1 = set([]) : <type 'set'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF3 = set_REF1.copy() 
==================================================
result = (dict2.values()).count(val5)                                   # STEP 61
ACTION: result = (dict2.values()).count(val5)  
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val5 = 'AA' : <type 'str'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = (dict_REF2.values()).count(val5)  
==================================================
result = list3.index(val5)                                              # STEP 62
ACTION: result = list3.index(val5) 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val5 = 'AA' : <type 'str'>
list_REF3 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> 'AA' is not in list
REFERENCE ACTION: result_REF = list_REF3.index(val5) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.ValueError'> 'AA' is not in list
==================================================
result = dict3.popitem(last=False)                                      # STEP 63
ACTION: result = dict3.popitem(last=False) 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.KeyError'> 'popitem(): dictionary is empty'
REFERENCE ACTION: result_REF = sortDictPopitem(dict_REF3,last=False) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.KeyError'> 
==================================================
dict3.irange(minimum=val5,maximum=val7,inclusive=(False,False),reverse=True)  # STEP 64
ACTION: dict3.irange(minimum=val5,maximum=val7,inclusive=(False,False),reverse=True) 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val5 = 'AA' : <type 'str'>
val7 = 'GG' : <type 'str'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF3.irange(minimum=val5,maximum=val7,inclusive=(False,False),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'irange'
==================================================
dict4 = dict3.fromkeys(set2,val5) ; result = dict4                      # STEP 65
ACTION: dict4 = dict3.fromkeys(set2,val5) ; result = dict4 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict4 = None : <type 'NoneType'>
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
val5 = 'AA' : <type 'str'>
dict_REF3 = {} : <type 'dict'>
dict_REF4 = None : <type 'NoneType'>
set_REF2 = set([]) : <type 'set'>
=> dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF4 = dict_REF3.fromkeys(set_REF2,val5) ; result_REF = dict_REF4 
=> dict_REF4 = {} : <type 'dict'>
==================================================
set1.irange(minimum=val3,maximum=val0,inclusive=(False,False),reverse=True)  # STEP 66
ACTION: set1.irange(minimum=val3,maximum=val0,inclusive=(False,False),reverse=True) 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
val3 = 32 : <type 'int'>
val0 = 16 : <type 'int'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1.irange(minimum=val3,maximum=val0,inclusive=(False,False),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'irange'
==================================================
dict1 = dict3.copy()                                                    # STEP 67
ACTION: dict1 = dict3.copy() 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict1 = None : <type 'NoneType'>
dict_REF3 = {} : <type 'dict'>
dict_REF1 = None : <type 'NoneType'>
=> dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF1 = dict_REF3.copy() 
=> dict_REF1 = {} : <type 'dict'>
==================================================
list3.insert(ival7,val3)                                                # STEP 68
ACTION: list3.insert(ival7,val3) 
ival7 = 0 : <type 'int'>
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val3 = 32 : <type 'int'>
list_REF3 = [] : <type 'list'>
=> list3 = SortedList([32], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: sortListInsert(list_REF3,ival7,val3) 
=> list_REF3 = [32] : <type 'list'>
==================================================
set1 ^= set1                                                            # STEP 69
ACTION: set1 ^= set1 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1 ^= set_REF1 
==================================================
list3+=list3                                                            # STEP 70
ACTION: list3+=list3 
list3 = SortedList([32], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [32] : <type 'list'>
=> list3 = SortedList([32, 32], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: sortListMultiAdd(list_REF3,list_REF3) 
=> list_REF3 = [32, 32] : <type 'list'>
==================================================
plist0 = list3 [ival3 : ival5]                                          # STEP 71
ACTION: plist0 = list3 [ival3 : ival5] 
ival3 = 0 : <type 'int'>
ival5 = 32 : <type 'int'>
list3 = SortedList([32, 32], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
plist0 = None : <type 'NoneType'>
list_REF3 = [32, 32] : <type 'list'>
=> plist0 = [32, 32] : <type 'list'>
REFERENCE ACTION: plist0 = list_REF3 [ival3 : ival5] 
==================================================
val5 in dict1                                                           # STEP 72
ACTION: val5 in dict1 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val5 = 'AA' : <type 'str'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: val5 in dict_REF1 
==================================================
dict4.get(val3,None)                                                    # STEP 73
ACTION: dict4.get(val3,None) 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val3 = 32 : <type 'int'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF4.get(val3,None) 
==================================================
set4 = set4.copy()                                                      # STEP 74
ACTION: set4 = set4.copy() 
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF4 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF4 = set_REF4.copy() 
==================================================
dict3 = dict2.copy()                                                    # STEP 75
ACTION: dict3 = dict2.copy() 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF2 = {} : <type 'dict'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF3 = dict_REF2.copy() 
==================================================
list3.irange(minimum=val7,maximum=val5,inclusive=(True,False),reverse=True)  # STEP 76
ACTION: list3.irange(minimum=val7,maximum=val5,inclusive=(True,False),reverse=True) 
list3 = SortedList([32, 32], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val7 = 'GG' : <type 'str'>
val5 = 'AA' : <type 'str'>
list_REF3 = [32, 32] : <type 'list'>
REFERENCE ACTION: list_REF3.irange(minimum=val7,maximum=val5,inclusive=(True,False),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
list3.extend(list3)                                                     # STEP 77
ACTION: list3.extend(list3) 
list3 = SortedList([32, 32], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [32, 32] : <type 'list'>
=> list3 = SortedList([32, 32, 32, 32], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: sortListExtend(list_REF3,list_REF3) 
=> list_REF3 = [32, 32, 32, 32] : <type 'list'>
==================================================
set0 = set4 | set0                                                      # STEP 78
ACTION: set0 = set4 | set0 
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF4 = set([]) : <type 'set'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF0 = set_REF4 | set_REF0 
==================================================
val8 = sval6                                                            # STEP 79
ACTION: val8 = sval6 
sval6 = 'AA' : <type 'str'>
val8 = None : <type 'NoneType'>
=> val8 = 'AA' : <type 'str'>
==================================================
setList(list3,ival1,val7)                                               # STEP 80
ACTION: setList(list3,ival1,val7) 
ival1 = 96 : <type 'int'>
list3 = SortedList([32, 32, 32, 32], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val7 = 'GG' : <type 'str'>
list_REF3 = [32, 32, 32, 32] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: sortListSet(list_REF3,ival1,val7) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list assignment index out of range
==================================================
list1 = sortedcontainers.SortedList()                                   # STEP 81
ACTION: list1 = sortedcontainers.SortedList() 
list1 = None : <type 'NoneType'>
list_REF1 = None : <type 'NoneType'>
=> list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: list_REF1 = [] 
=> list_REF1 = [] : <type 'list'>
==================================================
ival0 = ival7 - ival1                                                   # STEP 82
ACTION: ival0 = ival7 - ival1 
ival7 = 0 : <type 'int'>
ival1 = 96 : <type 'int'>
ival0 = None : <type 'NoneType'>
=> ival0 = -96 : <type 'int'>
==================================================
dict4.update(dict2)                                                     # STEP 83
ACTION: dict4.update(dict2) 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF4 = {} : <type 'dict'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF4.update(dict_REF2) 
==================================================
set4 = set1.copy()                                                      # STEP 84
ACTION: set4 = set1.copy() 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF1 = set([]) : <type 'set'>
set_REF4 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF4 = set_REF1.copy() 
==================================================
set4.irange(minimum=val7,maximum=val5,inclusive=(False,True))           # STEP 85
ACTION: set4.irange(minimum=val7,maximum=val5,inclusive=(False,True)) 
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
val7 = 'GG' : <type 'str'>
val5 = 'AA' : <type 'str'>
set_REF4 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF4.irange(minimum=val7,maximum=val5,inclusive=(False,True)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'irange'
==================================================
list3.update(set3)                                                      # STEP 86
ACTION: list3.update(set3) 
list3 = SortedList([32, 32, 32, 32], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
list_REF3 = [32, 32, 32, 32] : <type 'list'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: sortListMultiAdd(list_REF3,set_REF3) 
==================================================
list3.remove(val8)                                                      # STEP 87
ACTION: list3.remove(val8) 
list3 = SortedList([32, 32, 32, 32], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val8 = 'AA' : <type 'str'>
list_REF3 = [32, 32, 32, 32] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> 'AA' not in list
REFERENCE ACTION: list_REF3.remove(val8) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.ValueError'> list.remove(x): x not in list
==================================================
result = sorted(list(dict2.keys()))                                     # STEP 88
ACTION: result = sorted(list(dict2.keys())) 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = sorted(list(dict_REF2.keys())) 
==================================================
dict1 = sortedcontainers.SortedDict()                                   # STEP 89
ACTION: dict1 = sortedcontainers.SortedDict() 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF1 = {} 
==================================================
set1 = set4 | set4                                                      # STEP 90
ACTION: set1 = set4 | set4 
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF4 = set([]) : <type 'set'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1 = set_REF4 | set_REF4 
==================================================
set3.update(list3)                                                      # STEP 91
ACTION: set3.update(list3) 
list3 = SortedList([32, 32, 32, 32], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
list_REF3 = [32, 32, 32, 32] : <type 'list'>
set_REF3 = set([]) : <type 'set'>
=> set3 = SortedSet([32], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF3.update(list_REF3) 
=> set_REF3 = set([32]) : <type 'set'>
==================================================
del list3 [ival7]                                                       # STEP 92
ACTION: del list3 [ival7] 
ival7 = 0 : <type 'int'>
list3 = SortedList([32, 32, 32, 32], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [32, 32, 32, 32] : <type 'list'>
=> list3 = SortedList([32, 32, 32], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: del list_REF3 [ival7] 
=> list_REF3 = [32, 32, 32] : <type 'list'>
==================================================
set1.islice(start=None,stop=None)                                       # STEP 93
ACTION: set1.islice(start=None,stop=None) 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1.islice(start=None,stop=None) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'islice'
==================================================
result = len(dict3.keys())                                              # STEP 94
ACTION: result = len(dict3.keys())  
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF3.keys())  
==================================================
result = list3 == list3                                                 # STEP 95
ACTION: result = list3 == list3 
list3 = SortedList([32, 32, 32], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [32, 32, 32] : <type 'list'>
REFERENCE ACTION: result_REF = list_REF3 == list_REF3 
==================================================
dict3.irange(minimum=val0,maximum=val3,inclusive=(True,False),reverse=True)  # STEP 96
ACTION: dict3.irange(minimum=val0,maximum=val3,inclusive=(True,False),reverse=True) 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val0 = 16 : <type 'int'>
val3 = 32 : <type 'int'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF3.irange(minimum=val0,maximum=val3,inclusive=(True,False),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'irange'
==================================================
result = list3 == list1                                                 # STEP 97
ACTION: result = list3 == list1 
list3 = SortedList([32, 32, 32], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [32, 32, 32] : <type 'list'>
list_REF1 = [] : <type 'list'>
REFERENCE ACTION: result_REF = list_REF3 == list_REF1 
==================================================
set1.discard(val0)                                                      # STEP 98
ACTION: set1.discard(val0) 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
val0 = 16 : <type 'int'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1.discard(val0) 
==================================================
dict1.irange(minimum=val0,maximum=val3,inclusive=(False,True),reverse=True)  # STEP 99
ACTION: dict1.irange(minimum=val0,maximum=val3,inclusive=(False,True),reverse=True) 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val0 = 16 : <type 'int'>
val3 = 32 : <type 'int'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF1.irange(minimum=val0,maximum=val3,inclusive=(False,True),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'irange'
==================================================
set4 = set0.union(set3)                                                # STEP 100
ACTION: set4 = set0.union(set3) 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set3 = SortedSet([32], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
set_REF3 = set([32]) : <type 'set'>
set_REF4 = set([]) : <type 'set'>
=> set4 = SortedSet([32], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF4 = set_REF0.union(set_REF3) 
=> set_REF4 = set([32]) : <type 'set'>
==================================================
dict2 = sortedcontainers.SortedDict()                                  # STEP 101
ACTION: dict2 = sortedcontainers.SortedDict() 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF2 = {} 
==================================================
dict2.irange(minimum=val7,maximum=val3,inclusive=(True,False))         # STEP 102
ACTION: dict2.irange(minimum=val7,maximum=val3,inclusive=(True,False)) 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val7 = 'GG' : <type 'str'>
val3 = 32 : <type 'int'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF2.irange(minimum=val7,maximum=val3,inclusive=(True,False)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'irange'
==================================================
set0 &= set4                                                           # STEP 103
ACTION: set0 &= set4 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set4 = SortedSet([32], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
set_REF4 = set([32]) : <type 'set'>
REFERENCE ACTION: set_REF0 &= set_REF4 
==================================================
ival5 = ival1 - ival0                                                  # STEP 104
ACTION: ival5 = ival1 - ival0 
ival1 = 96 : <type 'int'>
ival0 = -96 : <type 'int'>
ival5 = 32 : <type 'int'>
=> ival5 = 192 : <type 'int'>
==================================================
list1.insert(ival0,val8)                                               # STEP 105
ACTION: list1.insert(ival0,val8) 
ival0 = -96 : <type 'int'>
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val8 = 'AA' : <type 'str'>
list_REF1 = [] : <type 'list'>
=> list1 = SortedList(['AA'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: sortListInsert(list_REF1,ival0,val8) 
=> list_REF1 = ['AA'] : <type 'list'>
==================================================
dict1 = dict4.fromkeys(set4,val5) ; result = dict1                     # STEP 106
ACTION: dict1 = dict4.fromkeys(set4,val5) ; result = dict1 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
set4 = SortedSet([32], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
val5 = 'AA' : <type 'str'>
dict_REF4 = {} : <type 'dict'>
dict_REF1 = {} : <type 'dict'>
set_REF4 = set([32]) : <type 'set'>
=> dict1 = SortedDict(None, 1000, {32: 'AA'}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF1 = dict_REF4.fromkeys(set_REF4,val5) ; result_REF = dict_REF1 
=> dict_REF1 = {32: 'AA'} : <type 'dict'>
==================================================
set0 = set3.union(set2)                                                # STEP 107
ACTION: set0 = set3.union(set2) 
set3 = SortedSet([32], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF3 = set([32]) : <type 'set'>
set_REF2 = set([]) : <type 'set'>
set_REF0 = set([]) : <type 'set'>
=> set0 = SortedSet([32], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF0 = set_REF3.union(set_REF2) 
=> set_REF0 = set([32]) : <type 'set'>
==================================================
ival0 = ival0 * ival7                                                  # STEP 108
ACTION: ival0 = ival0 * ival7 
ival0 = -96 : <type 'int'>
ival7 = 0 : <type 'int'>
=> ival0 = 0 : <type 'int'>
==================================================
list1.extend(list1)                                                    # STEP 109
ACTION: list1.extend(list1) 
list1 = SortedList(['AA'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF1 = ['AA'] : <type 'list'>
=> list1 = SortedList(['AA', 'AA'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: sortListExtend(list_REF1,list_REF1) 
=> list_REF1 = ['AA', 'AA'] : <type 'list'>
==================================================
set0.islice(start=None,stop=None)                                      # STEP 110
ACTION: set0.islice(start=None,stop=None) 
set0 = SortedSet([32], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([32]) : <type 'set'>
REFERENCE ACTION: set_REF0.islice(start=None,stop=None) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'islice'
==================================================
dict0 = dict1.copy()                                                   # STEP 111
ACTION: dict0 = dict1.copy() 
dict1 = SortedDict(None, 1000, {32: 'AA'}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict0 = None : <type 'NoneType'>
dict_REF1 = {32: 'AA'} : <type 'dict'>
dict_REF0 = None : <type 'NoneType'>
=> dict0 = SortedDict(None, 1000, {32: 'AA'}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF0 = dict_REF1.copy() 
=> dict_REF0 = {32: 'AA'} : <type 'dict'>
==================================================
list3.irange(minimum=val0,maximum=val7,inclusive=(False,False))        # STEP 112
ACTION: list3.irange(minimum=val0,maximum=val7,inclusive=(False,False)) 
list3 = SortedList([32, 32, 32], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val0 = 16 : <type 'int'>
val7 = 'GG' : <type 'str'>
list_REF3 = [32, 32, 32] : <type 'list'>
REFERENCE ACTION: list_REF3.irange(minimum=val0,maximum=val7,inclusive=(False,False)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
set0 = sortedcontainers.SortedSet()                                    # STEP 113
ACTION: set0 = sortedcontainers.SortedSet() 
set0 = SortedSet([32], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([32]) : <type 'set'>
=> set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF0 = set([]) 
=> set_REF0 = set([]) : <type 'set'>
==================================================
dict4 = sortedcontainers.SortedDict()                                  # STEP 114
ACTION: dict4 = sortedcontainers.SortedDict() 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF4 = {} 
==================================================
set0.update(set3)                                                      # STEP 115
ACTION: set0.update(set3) 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set3 = SortedSet([32], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
set_REF3 = set([32]) : <type 'set'>
=> set0 = SortedSet([32], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF0.update(set_REF3) 
=> set_REF0 = set([32]) : <type 'set'>
==================================================
set0.irange(minimum=val3,maximum=val5,inclusive=(True,False),reverse=True)  # STEP 116
ACTION: set0.irange(minimum=val3,maximum=val5,inclusive=(True,False),reverse=True) 
set0 = SortedSet([32], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
val3 = 32 : <type 'int'>
val5 = 'AA' : <type 'str'>
set_REF0 = set([32]) : <type 'set'>
REFERENCE ACTION: set_REF0.irange(minimum=val3,maximum=val5,inclusive=(True,False),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'irange'
==================================================
dict1 = dict3.copy()                                                   # STEP 117
ACTION: dict1 = dict3.copy() 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict1 = SortedDict(None, 1000, {32: 'AA'}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
dict_REF1 = {32: 'AA'} : <type 'dict'>
=> dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF1 = dict_REF3.copy() 
=> dict_REF1 = {} : <type 'dict'>
==================================================
result = dict3.peekitem()                                              # STEP 118
ACTION: result = dict3.peekitem() 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: result_REF = sortDictPeekitem(dict_REF3,) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
==================================================
dict2 = dict4.copy()                                                   # STEP 119
ACTION: dict2 = dict4.copy() 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF4 = {} : <type 'dict'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF2 = dict_REF4.copy() 
==================================================
set4.add(val8)                                                         # STEP 120
ACTION: set4.add(val8) 
set4 = SortedSet([32], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
val8 = 'AA' : <type 'str'>
set_REF4 = set([32]) : <type 'set'>
=> set4 = SortedSet([32, 'AA'], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF4.add(val8) 
=> set_REF4 = set([32, 'AA']) : <type 'set'>
==================================================
list1.islice(start=ival7,stop=ival1)                                   # STEP 121
ACTION: list1.islice(start=ival7,stop=ival1) 
ival7 = 0 : <type 'int'>
ival1 = 96 : <type 'int'>
list1 = SortedList(['AA', 'AA'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF1 = ['AA', 'AA'] : <type 'list'>
REFERENCE ACTION: list_REF1.islice(start=ival7,stop=ival1) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'islice'
==================================================
val4 = sval3                                                           # STEP 122
ACTION: val4 = sval3 
sval3 = 'GG' : <type 'str'>
val4 = None : <type 'NoneType'>
=> val4 = 'GG' : <type 'str'>
==================================================
set3 = set0 | set0                                                     # STEP 123
ACTION: set3 = set0 | set0 
set0 = SortedSet([32], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set3 = SortedSet([32], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([32]) : <type 'set'>
set_REF3 = set([32]) : <type 'set'>
REFERENCE ACTION: set_REF3 = set_REF0 | set_REF0 
==================================================
list1.irange(minimum=val4,maximum=val7,inclusive=(True,False),reverse=True)  # STEP 124
ACTION: list1.irange(minimum=val4,maximum=val7,inclusive=(True,False),reverse=True) 
list1 = SortedList(['AA', 'AA'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val4 = 'GG' : <type 'str'>
val7 = 'GG' : <type 'str'>
list_REF1 = ['AA', 'AA'] : <type 'list'>
REFERENCE ACTION: list_REF1.irange(minimum=val4,maximum=val7,inclusive=(True,False),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
list1.islice(start=None,stop=ival7)                                    # STEP 125
ACTION: list1.islice(start=None,stop=ival7) 
ival7 = 0 : <type 'int'>
list1 = SortedList(['AA', 'AA'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF1 = ['AA', 'AA'] : <type 'list'>
REFERENCE ACTION: list_REF1.islice(start=None,stop=ival7) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'islice'
==================================================
sval1 = sval9 + sval0                                                  # STEP 126
ACTION: sval1 = sval9 + sval0 
sval9 = 'GG' : <type 'str'>
sval0 = 'A' : <type 'str'>
sval1 = None : <type 'NoneType'>
=> sval1 = 'GGA' : <type 'str'>
==================================================
setListSlice(list3,ival1,ival3,list1)                                  # STEP 127
ACTION: setListSlice(list3,ival1,ival3,list1) 
ival1 = 96 : <type 'int'>
ival3 = 0 : <type 'int'>
list3 = SortedList([32, 32, 32], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list1 = SortedList(['AA', 'AA'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [32, 32, 32] : <type 'list'>
list_REF1 = ['AA', 'AA'] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> 'AA' not in sort order at index 0
REFERENCE ACTION: sortListSetSlice(list_REF3,ival1,ival3,list_REF1) 
=> list_REF3 = [32, 32, 32, 'AA', 'AA'] : <type 'list'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x11fe65518>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306258, in check
    assert self.p_list[3] == self.p_list_REF[3]
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
FAILURE DURING MUTATION
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x11fead998>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2307001, in replay
    act()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 702933, in act11966
    self.p_list[3].extend(self.p_list[1])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
Original test has 125 steps

SAVING TEST AS failure.10248.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
sval9 = 'A'                                                              # STEP 0
ACTION: sval9 = 'A' 
sval9 = None : <type 'NoneType'>
=> sval9 = 'A' : <type 'str'>
==================================================
sval6 = sval9 + sval9                                                    # STEP 1
ACTION: sval6 = sval9 + sval9 
sval9 = 'A' : <type 'str'>
sval6 = None : <type 'NoneType'>
=> sval6 = 'AA' : <type 'str'>
==================================================
sval3 = 'G'                                                              # STEP 2
ACTION: sval3 = 'G' 
sval3 = None : <type 'NoneType'>
=> sval3 = 'G' : <type 'str'>
==================================================
ival5 = 16                                                               # STEP 3
ACTION: ival5 = 16 
ival5 = None : <type 'NoneType'>
=> ival5 = 16 : <type 'int'>
==================================================
sval0 = 'A'                                                              # STEP 4
ACTION: sval0 = 'A' 
sval0 = None : <type 'NoneType'>
=> sval0 = 'A' : <type 'str'>
==================================================
sval9 = sval3 + sval3                                                    # STEP 5
ACTION: sval9 = sval3 + sval3 
sval3 = 'G' : <type 'str'>
sval9 = 'A' : <type 'str'>
=> sval9 = 'GG' : <type 'str'>
==================================================
set1 = sortedcontainers.SortedSet()                                      # STEP 6
ACTION: set1 = sortedcontainers.SortedSet() 
set1 = None : <type 'NoneType'>
set_REF1 = None : <type 'NoneType'>
=> set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF1 = set([]) 
=> set_REF1 = set([]) : <type 'set'>
==================================================
set3 = set1.copy()                                                       # STEP 7
ACTION: set3 = set1.copy() 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set3 = None : <type 'NoneType'>
set_REF1 = set([]) : <type 'set'>
set_REF3 = None : <type 'NoneType'>
=> set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF3 = set_REF1.copy() 
=> set_REF3 = set([]) : <type 'set'>
==================================================
val7 = sval9                                                             # STEP 8
ACTION: val7 = sval9 
sval9 = 'GG' : <type 'str'>
val7 = None : <type 'NoneType'>
=> val7 = 'GG' : <type 'str'>
==================================================
val0 = ival5                                                             # STEP 9
ACTION: val0 = ival5 
ival5 = 16 : <type 'int'>
val0 = None : <type 'NoneType'>
=> val0 = 16 : <type 'int'>
==================================================
set0 = set3.union(set1)                                                 # STEP 10
ACTION: set0 = set3.union(set1) 
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set0 = None : <type 'NoneType'>
set_REF3 = set([]) : <type 'set'>
set_REF1 = set([]) : <type 'set'>
set_REF0 = None : <type 'NoneType'>
=> set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF0 = set_REF3.union(set_REF1) 
=> set_REF0 = set([]) : <type 'set'>
==================================================
set1 = set0 - set1                                                      # STEP 11
ACTION: set1 = set0 - set1 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1 = set_REF0 - set_REF1 
==================================================
set3 = set0 & set0                                                      # STEP 12
ACTION: set3 = set0 & set0 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF3 = set_REF0 & set_REF0 
==================================================
repr(set3)                                                              # STEP 13
ACTION: repr(set3) 
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: repr(set_REF3) 
==================================================
set1 ^= set3                                                            # STEP 14
ACTION: set1 ^= set3 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF1 = set([]) : <type 'set'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1 ^= set_REF3 
==================================================
set3 = set0 ^ set3                                                      # STEP 15
ACTION: set3 = set0 ^ set3 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF3 = set_REF0 ^ set_REF3 
==================================================
set4 = set1 ^ set0                                                      # STEP 16
ACTION: set4 = set1 ^ set0 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set4 = None : <type 'NoneType'>
set_REF1 = set([]) : <type 'set'>
set_REF0 = set([]) : <type 'set'>
set_REF4 = None : <type 'NoneType'>
=> set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF4 = set_REF1 ^ set_REF0 
=> set_REF4 = set([]) : <type 'set'>
==================================================
reversed(set1)                                                          # STEP 17
ACTION: reversed(set1) 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: reversed(set_REF1) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.TypeError'> argument to reversed() must be a sequence
==================================================
set2 = set1 & set1                                                      # STEP 18
ACTION: set2 = set1 & set1 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set2 = None : <type 'NoneType'>
set_REF1 = set([]) : <type 'set'>
set_REF2 = None : <type 'NoneType'>
=> set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF2 = set_REF1 & set_REF1 
=> set_REF2 = set([]) : <type 'set'>
==================================================
ival5 = ival5 + ival5                                                   # STEP 19
ACTION: ival5 = ival5 + ival5 
ival5 = 16 : <type 'int'>
=> ival5 = 32 : <type 'int'>
==================================================
val3 = ival5                                                            # STEP 20
ACTION: val3 = ival5 
ival5 = 32 : <type 'int'>
val3 = None : <type 'NoneType'>
=> val3 = 32 : <type 'int'>
==================================================
result = set4.issuperset(set2)                                          # STEP 21
ACTION: result = set4.issuperset(set2) 
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF4 = set([]) : <type 'set'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = set_REF4.issuperset(set_REF2) 
==================================================
set2.irange(minimum=val7,maximum=val3,inclusive=(False,False),reverse=True)  # STEP 22
ACTION: set2.irange(minimum=val7,maximum=val3,inclusive=(False,False),reverse=True) 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
val7 = 'GG' : <type 'str'>
val3 = 32 : <type 'int'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF2.irange(minimum=val7,maximum=val3,inclusive=(False,False),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'irange'
==================================================
repr(set2)                                                              # STEP 23
ACTION: repr(set2) 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: repr(set_REF2) 
==================================================
val5 = sval6                                                            # STEP 24
ACTION: val5 = sval6 
sval6 = 'AA' : <type 'str'>
val5 = None : <type 'NoneType'>
=> val5 = 'AA' : <type 'str'>
==================================================
set1 = set0 | set1                                                      # STEP 25
ACTION: set1 = set0 | set1 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1 = set_REF0 | set_REF1 
==================================================
set2 = set1 ^ set4                                                      # STEP 26
ACTION: set2 = set1 ^ set4 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF1 = set([]) : <type 'set'>
set_REF4 = set([]) : <type 'set'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF2 = set_REF1 ^ set_REF4 
==================================================
ival1 = ival5 + ival5                                                   # STEP 27
ACTION: ival1 = ival5 + ival5 
ival5 = 32 : <type 'int'>
ival1 = None : <type 'NoneType'>
=> ival1 = 64 : <type 'int'>
==================================================
set3.irange(minimum=val0,maximum=val3,inclusive=(False,False),reverse=True)  # STEP 28
ACTION: set3.irange(minimum=val0,maximum=val3,inclusive=(False,False),reverse=True) 
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
val0 = 16 : <type 'int'>
val3 = 32 : <type 'int'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF3.irange(minimum=val0,maximum=val3,inclusive=(False,False),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'irange'
==================================================
set1 < set4                                                             # STEP 29
ACTION: set1 < set4 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF1 = set([]) : <type 'set'>
set_REF4 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1 < set_REF4 
==================================================
ival3 = ival1 - ival1                                                   # STEP 30
ACTION: ival3 = ival1 - ival1 
ival1 = 64 : <type 'int'>
ival3 = None : <type 'NoneType'>
=> ival3 = 0 : <type 'int'>
==================================================
set4 -= set2                                                            # STEP 31
ACTION: set4 -= set2 
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF4 = set([]) : <type 'set'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF4 -= set_REF2 
==================================================
set4 = set2 & set3                                                      # STEP 32
ACTION: set4 = set2 & set3 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF2 = set([]) : <type 'set'>
set_REF3 = set([]) : <type 'set'>
set_REF4 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF4 = set_REF2 & set_REF3 
==================================================
result = set3.isdisjoint(set3)                                          # STEP 33
ACTION: result = set3.isdisjoint(set3) 
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = set_REF3.isdisjoint(set_REF3) 
==================================================
set2 = set1.copy()                                                      # STEP 34
ACTION: set2 = set1.copy() 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF1 = set([]) : <type 'set'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF2 = set_REF1.copy() 
==================================================
set4.islice(start=None,stop=None)                                       # STEP 35
ACTION: set4.islice(start=None,stop=None) 
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF4 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF4.islice(start=None,stop=None) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'islice'
==================================================
ival7 = ival1 + ival3                                                   # STEP 36
ACTION: ival7 = ival1 + ival3 
ival1 = 64 : <type 'int'>
ival3 = 0 : <type 'int'>
ival7 = None : <type 'NoneType'>
=> ival7 = 64 : <type 'int'>
==================================================
set0 = set4.union(set4)                                                 # STEP 37
ACTION: set0 = set4.union(set4) 
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF4 = set([]) : <type 'set'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF0 = set_REF4.union(set_REF4) 
==================================================
set1 &= set0                                                            # STEP 38
ACTION: set1 &= set0 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF1 = set([]) : <type 'set'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1 &= set_REF0 
==================================================
set4 = set3.union(set4)                                                 # STEP 39
ACTION: set4 = set3.union(set4) 
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF3 = set([]) : <type 'set'>
set_REF4 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF4 = set_REF3.union(set_REF4) 
==================================================
set3 |= set4                                                            # STEP 40
ACTION: set3 |= set4 
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF3 = set([]) : <type 'set'>
set_REF4 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF3 |= set_REF4 
==================================================
ival1 = ival5 + ival7                                                   # STEP 41
ACTION: ival1 = ival5 + ival7 
ival5 = 32 : <type 'int'>
ival7 = 64 : <type 'int'>
ival1 = 64 : <type 'int'>
=> ival1 = 96 : <type 'int'>
==================================================
set4 = set1 | set1                                                      # STEP 42
ACTION: set4 = set1 | set1 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF1 = set([]) : <type 'set'>
set_REF4 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF4 = set_REF1 | set_REF1 
==================================================
set1 = set4.union(set0)                                                 # STEP 43
ACTION: set1 = set4.union(set0) 
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF4 = set([]) : <type 'set'>
set_REF0 = set([]) : <type 'set'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1 = set_REF4.union(set_REF0) 
==================================================
result = set3 == set0                                                   # STEP 44
ACTION: result = set3 == set0 
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF3 = set([]) : <type 'set'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = set_REF3 == set_REF0 
==================================================
ival7 = ival1 - ival1                                                   # STEP 45
ACTION: ival7 = ival1 - ival1 
ival1 = 96 : <type 'int'>
ival7 = 64 : <type 'int'>
=> ival7 = 0 : <type 'int'>
==================================================
dict2 = sortedcontainers.SortedDict()                                   # STEP 46
ACTION: dict2 = sortedcontainers.SortedDict() 
dict2 = None : <type 'NoneType'>
dict_REF2 = None : <type 'NoneType'>
=> dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF2 = {} 
=> dict_REF2 = {} : <type 'dict'>
==================================================
result = (dict2.keys()).count(val0)                                     # STEP 47
ACTION: result = (dict2.keys()).count(val0)  
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val0 = 16 : <type 'int'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = (dict_REF2.keys()).count(val0)  
==================================================
dict3 = dict2.fromkeys(set4,val7) ; result = dict3                      # STEP 48
ACTION: dict3 = dict2.fromkeys(set4,val7) ; result = dict3 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict3 = None : <type 'NoneType'>
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
val7 = 'GG' : <type 'str'>
dict_REF2 = {} : <type 'dict'>
dict_REF3 = None : <type 'NoneType'>
set_REF4 = set([]) : <type 'set'>
=> dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF3 = dict_REF2.fromkeys(set_REF4,val7) ; result_REF = dict_REF3 
=> dict_REF3 = {} : <type 'dict'>
==================================================
dict3.islice(start=ival5,stop=ival7,reverse=True)                       # STEP 49
ACTION: dict3.islice(start=ival5,stop=ival7,reverse=True) 
ival5 = 32 : <type 'int'>
ival7 = 0 : <type 'int'>
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF3.islice(start=ival5,stop=ival7,reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'islice'
==================================================
set1.update(set0)                                                       # STEP 50
ACTION: set1.update(set0) 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF1 = set([]) : <type 'set'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1.update(set_REF0) 
==================================================
sval3 = sval3 + sval3                                                   # STEP 51
ACTION: sval3 = sval3 + sval3 
sval3 = 'G' : <type 'str'>
=> sval3 = 'GG' : <type 'str'>
==================================================
list3 = sortedcontainers.SortedList()                                   # STEP 52
ACTION: list3 = sortedcontainers.SortedList() 
list3 = None : <type 'NoneType'>
list_REF3 = None : <type 'NoneType'>
=> list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: list_REF3 = [] 
=> list_REF3 = [] : <type 'list'>
==================================================
dict2.get(val5,val7)                                                    # STEP 53
ACTION: dict2.get(val5,val7) 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val5 = 'AA' : <type 'str'>
val7 = 'GG' : <type 'str'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF2.get(val5,val7) 
==================================================
result = list3 == list3                                                 # STEP 54
ACTION: result = list3 == list3 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [] : <type 'list'>
REFERENCE ACTION: result_REF = list_REF3 == list_REF3 
==================================================
set3.irange(minimum=val7,maximum=val3,inclusive=(False,True))           # STEP 55
ACTION: set3.irange(minimum=val7,maximum=val3,inclusive=(False,True)) 
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
val7 = 'GG' : <type 'str'>
val3 = 32 : <type 'int'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF3.irange(minimum=val7,maximum=val3,inclusive=(False,True)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'irange'
==================================================
dict2.irange(minimum=val7,maximum=val7,inclusive=(False,False))         # STEP 56
ACTION: dict2.irange(minimum=val7,maximum=val7,inclusive=(False,False)) 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val7 = 'GG' : <type 'str'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF2.irange(minimum=val7,maximum=val7,inclusive=(False,False)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'irange'
==================================================
result = dict3.peekitem()                                               # STEP 57
ACTION: result = dict3.peekitem() 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: result_REF = sortDictPeekitem(dict_REF3,) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
==================================================
dict2 = sortedcontainers.SortedDict()                                   # STEP 58
ACTION: dict2 = sortedcontainers.SortedDict() 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF2 = {} 
==================================================
set1 = set0 ^ set0                                                      # STEP 59
ACTION: set1 = set0 ^ set0 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1 = set_REF0 ^ set_REF0 
==================================================
set3 = set1.copy()                                                      # STEP 60
ACTION: set3 = set1.copy() 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF1 = set([]) : <type 'set'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF3 = set_REF1.copy() 
==================================================
result = (dict2.values()).count(val5)                                   # STEP 61
ACTION: result = (dict2.values()).count(val5)  
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val5 = 'AA' : <type 'str'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = (dict_REF2.values()).count(val5)  
==================================================
result = list3.index(val5)                                              # STEP 62
ACTION: result = list3.index(val5) 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val5 = 'AA' : <type 'str'>
list_REF3 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> 'AA' is not in list
REFERENCE ACTION: result_REF = list_REF3.index(val5) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.ValueError'> 'AA' is not in list
==================================================
result = dict3.popitem(last=False)                                      # STEP 63
ACTION: result = dict3.popitem(last=False) 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.KeyError'> 'popitem(): dictionary is empty'
REFERENCE ACTION: result_REF = sortDictPopitem(dict_REF3,last=False) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.KeyError'> 
==================================================
dict3.irange(minimum=val5,maximum=val7,inclusive=(False,False),reverse=True)  # STEP 64
ACTION: dict3.irange(minimum=val5,maximum=val7,inclusive=(False,False),reverse=True) 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val5 = 'AA' : <type 'str'>
val7 = 'GG' : <type 'str'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF3.irange(minimum=val5,maximum=val7,inclusive=(False,False),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'irange'
==================================================
dict4 = dict3.fromkeys(set2,val5) ; result = dict4                      # STEP 65
ACTION: dict4 = dict3.fromkeys(set2,val5) ; result = dict4 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict4 = None : <type 'NoneType'>
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
val5 = 'AA' : <type 'str'>
dict_REF3 = {} : <type 'dict'>
dict_REF4 = None : <type 'NoneType'>
set_REF2 = set([]) : <type 'set'>
=> dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF4 = dict_REF3.fromkeys(set_REF2,val5) ; result_REF = dict_REF4 
=> dict_REF4 = {} : <type 'dict'>
==================================================
set1.irange(minimum=val3,maximum=val0,inclusive=(False,False),reverse=True)  # STEP 66
ACTION: set1.irange(minimum=val3,maximum=val0,inclusive=(False,False),reverse=True) 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
val3 = 32 : <type 'int'>
val0 = 16 : <type 'int'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1.irange(minimum=val3,maximum=val0,inclusive=(False,False),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'irange'
==================================================
dict1 = dict3.copy()                                                    # STEP 67
ACTION: dict1 = dict3.copy() 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict1 = None : <type 'NoneType'>
dict_REF3 = {} : <type 'dict'>
dict_REF1 = None : <type 'NoneType'>
=> dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF1 = dict_REF3.copy() 
=> dict_REF1 = {} : <type 'dict'>
==================================================
list3.insert(ival7,val3)                                                # STEP 68
ACTION: list3.insert(ival7,val3) 
ival7 = 0 : <type 'int'>
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val3 = 32 : <type 'int'>
list_REF3 = [] : <type 'list'>
=> list3 = SortedList([32], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: sortListInsert(list_REF3,ival7,val3) 
=> list_REF3 = [32] : <type 'list'>
==================================================
set1 ^= set1                                                            # STEP 69
ACTION: set1 ^= set1 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1 ^= set_REF1 
==================================================
list3+=list3                                                            # STEP 70
ACTION: list3+=list3 
list3 = SortedList([32], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [32] : <type 'list'>
=> list3 = SortedList([32, 32], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: sortListMultiAdd(list_REF3,list_REF3) 
=> list_REF3 = [32, 32] : <type 'list'>
==================================================
plist0 = list3 [ival3 : ival5]                                          # STEP 71
ACTION: plist0 = list3 [ival3 : ival5] 
ival3 = 0 : <type 'int'>
ival5 = 32 : <type 'int'>
list3 = SortedList([32, 32], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
plist0 = None : <type 'NoneType'>
list_REF3 = [32, 32] : <type 'list'>
=> plist0 = [32, 32] : <type 'list'>
REFERENCE ACTION: plist0 = list_REF3 [ival3 : ival5] 
==================================================
val5 in dict1                                                           # STEP 72
ACTION: val5 in dict1 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val5 = 'AA' : <type 'str'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: val5 in dict_REF1 
==================================================
dict4.get(val3,None)                                                    # STEP 73
ACTION: dict4.get(val3,None) 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val3 = 32 : <type 'int'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF4.get(val3,None) 
==================================================
set4 = set4.copy()                                                      # STEP 74
ACTION: set4 = set4.copy() 
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF4 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF4 = set_REF4.copy() 
==================================================
dict3 = dict2.copy()                                                    # STEP 75
ACTION: dict3 = dict2.copy() 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF2 = {} : <type 'dict'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF3 = dict_REF2.copy() 
==================================================
list3.irange(minimum=val7,maximum=val5,inclusive=(True,False),reverse=True)  # STEP 76
ACTION: list3.irange(minimum=val7,maximum=val5,inclusive=(True,False),reverse=True) 
list3 = SortedList([32, 32], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val7 = 'GG' : <type 'str'>
val5 = 'AA' : <type 'str'>
list_REF3 = [32, 32] : <type 'list'>
REFERENCE ACTION: list_REF3.irange(minimum=val7,maximum=val5,inclusive=(True,False),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
list3.extend(list3)                                                     # STEP 77
ACTION: list3.extend(list3) 
list3 = SortedList([32, 32], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [32, 32] : <type 'list'>
=> list3 = SortedList([32, 32, 32, 32], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: sortListExtend(list_REF3,list_REF3) 
=> list_REF3 = [32, 32, 32, 32] : <type 'list'>
==================================================
set0 = set4 | set0                                                      # STEP 78
ACTION: set0 = set4 | set0 
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF4 = set([]) : <type 'set'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF0 = set_REF4 | set_REF0 
==================================================
val8 = sval6                                                            # STEP 79
ACTION: val8 = sval6 
sval6 = 'AA' : <type 'str'>
val8 = None : <type 'NoneType'>
=> val8 = 'AA' : <type 'str'>
==================================================
setList(list3,ival1,val7)                                               # STEP 80
ACTION: setList(list3,ival1,val7) 
ival1 = 96 : <type 'int'>
list3 = SortedList([32, 32, 32, 32], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val7 = 'GG' : <type 'str'>
list_REF3 = [32, 32, 32, 32] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: sortListSet(list_REF3,ival1,val7) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list assignment index out of range
==================================================
list1 = sortedcontainers.SortedList()                                   # STEP 81
ACTION: list1 = sortedcontainers.SortedList() 
list1 = None : <type 'NoneType'>
list_REF1 = None : <type 'NoneType'>
=> list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: list_REF1 = [] 
=> list_REF1 = [] : <type 'list'>
==================================================
ival0 = ival7 - ival1                                                   # STEP 82
ACTION: ival0 = ival7 - ival1 
ival7 = 0 : <type 'int'>
ival1 = 96 : <type 'int'>
ival0 = None : <type 'NoneType'>
=> ival0 = -96 : <type 'int'>
==================================================
dict4.update(dict2)                                                     # STEP 83
ACTION: dict4.update(dict2) 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF4 = {} : <type 'dict'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF4.update(dict_REF2) 
==================================================
set4 = set1.copy()                                                      # STEP 84
ACTION: set4 = set1.copy() 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF1 = set([]) : <type 'set'>
set_REF4 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF4 = set_REF1.copy() 
==================================================
set4.irange(minimum=val7,maximum=val5,inclusive=(False,True))           # STEP 85
ACTION: set4.irange(minimum=val7,maximum=val5,inclusive=(False,True)) 
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
val7 = 'GG' : <type 'str'>
val5 = 'AA' : <type 'str'>
set_REF4 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF4.irange(minimum=val7,maximum=val5,inclusive=(False,True)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'irange'
==================================================
list3.update(set3)                                                      # STEP 86
ACTION: list3.update(set3) 
list3 = SortedList([32, 32, 32, 32], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
list_REF3 = [32, 32, 32, 32] : <type 'list'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: sortListMultiAdd(list_REF3,set_REF3) 
==================================================
list3.remove(val8)                                                      # STEP 87
ACTION: list3.remove(val8) 
list3 = SortedList([32, 32, 32, 32], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val8 = 'AA' : <type 'str'>
list_REF3 = [32, 32, 32, 32] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> 'AA' not in list
REFERENCE ACTION: list_REF3.remove(val8) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.ValueError'> list.remove(x): x not in list
==================================================
result = sorted(list(dict2.keys()))                                     # STEP 88
ACTION: result = sorted(list(dict2.keys())) 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = sorted(list(dict_REF2.keys())) 
==================================================
dict1 = sortedcontainers.SortedDict()                                   # STEP 89
ACTION: dict1 = sortedcontainers.SortedDict() 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF1 = {} 
==================================================
set1 = set4 | set4                                                      # STEP 90
ACTION: set1 = set4 | set4 
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF4 = set([]) : <type 'set'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1 = set_REF4 | set_REF4 
==================================================
set3.update(list3)                                                      # STEP 91
ACTION: set3.update(list3) 
list3 = SortedList([32, 32, 32, 32], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
list_REF3 = [32, 32, 32, 32] : <type 'list'>
set_REF3 = set([]) : <type 'set'>
=> set3 = SortedSet([32], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF3.update(list_REF3) 
=> set_REF3 = set([32]) : <type 'set'>
==================================================
del list3 [ival7]                                                       # STEP 92
ACTION: del list3 [ival7] 
ival7 = 0 : <type 'int'>
list3 = SortedList([32, 32, 32, 32], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [32, 32, 32, 32] : <type 'list'>
=> list3 = SortedList([32, 32, 32], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: del list_REF3 [ival7] 
=> list_REF3 = [32, 32, 32] : <type 'list'>
==================================================
set1.islice(start=None,stop=None)                                       # STEP 93
ACTION: set1.islice(start=None,stop=None) 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1.islice(start=None,stop=None) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'islice'
==================================================
result = len(dict3.keys())                                              # STEP 94
ACTION: result = len(dict3.keys())  
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF3.keys())  
==================================================
result = list3 == list3                                                 # STEP 95
ACTION: result = list3 == list3 
list3 = SortedList([32, 32, 32], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [32, 32, 32] : <type 'list'>
REFERENCE ACTION: result_REF = list_REF3 == list_REF3 
==================================================
dict3.irange(minimum=val0,maximum=val3,inclusive=(True,False),reverse=True)  # STEP 96
ACTION: dict3.irange(minimum=val0,maximum=val3,inclusive=(True,False),reverse=True) 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val0 = 16 : <type 'int'>
val3 = 32 : <type 'int'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF3.irange(minimum=val0,maximum=val3,inclusive=(True,False),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'irange'
==================================================
result = list3 == list1                                                 # STEP 97
ACTION: result = list3 == list1 
list3 = SortedList([32, 32, 32], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [32, 32, 32] : <type 'list'>
list_REF1 = [] : <type 'list'>
REFERENCE ACTION: result_REF = list_REF3 == list_REF1 
==================================================
set1.discard(val0)                                                      # STEP 98
ACTION: set1.discard(val0) 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
val0 = 16 : <type 'int'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1.discard(val0) 
==================================================
dict1.irange(minimum=val0,maximum=val3,inclusive=(False,True),reverse=True)  # STEP 99
ACTION: dict1.irange(minimum=val0,maximum=val3,inclusive=(False,True),reverse=True) 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val0 = 16 : <type 'int'>
val3 = 32 : <type 'int'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF1.irange(minimum=val0,maximum=val3,inclusive=(False,True),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'irange'
==================================================
set4 = set0.union(set3)                                                # STEP 100
ACTION: set4 = set0.union(set3) 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set3 = SortedSet([32], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
set_REF3 = set([32]) : <type 'set'>
set_REF4 = set([]) : <type 'set'>
=> set4 = SortedSet([32], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF4 = set_REF0.union(set_REF3) 
=> set_REF4 = set([32]) : <type 'set'>
==================================================
dict2 = sortedcontainers.SortedDict()                                  # STEP 101
ACTION: dict2 = sortedcontainers.SortedDict() 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF2 = {} 
==================================================
dict2.irange(minimum=val7,maximum=val3,inclusive=(True,False))         # STEP 102
ACTION: dict2.irange(minimum=val7,maximum=val3,inclusive=(True,False)) 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val7 = 'GG' : <type 'str'>
val3 = 32 : <type 'int'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF2.irange(minimum=val7,maximum=val3,inclusive=(True,False)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'irange'
==================================================
set0 &= set4                                                           # STEP 103
ACTION: set0 &= set4 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set4 = SortedSet([32], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
set_REF4 = set([32]) : <type 'set'>
REFERENCE ACTION: set_REF0 &= set_REF4 
==================================================
ival5 = ival1 - ival0                                                  # STEP 104
ACTION: ival5 = ival1 - ival0 
ival1 = 96 : <type 'int'>
ival0 = -96 : <type 'int'>
ival5 = 32 : <type 'int'>
=> ival5 = 192 : <type 'int'>
==================================================
dict1 = dict4.fromkeys(set4,val5) ; result = dict1                     # STEP 105
ACTION: dict1 = dict4.fromkeys(set4,val5) ; result = dict1 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
set4 = SortedSet([32], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
val5 = 'AA' : <type 'str'>
dict_REF4 = {} : <type 'dict'>
dict_REF1 = {} : <type 'dict'>
set_REF4 = set([32]) : <type 'set'>
=> dict1 = SortedDict(None, 1000, {32: 'AA'}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF1 = dict_REF4.fromkeys(set_REF4,val5) ; result_REF = dict_REF1 
=> dict_REF1 = {32: 'AA'} : <type 'dict'>
==================================================
set0 = set3.union(set2)                                                # STEP 106
ACTION: set0 = set3.union(set2) 
set3 = SortedSet([32], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF3 = set([32]) : <type 'set'>
set_REF2 = set([]) : <type 'set'>
set_REF0 = set([]) : <type 'set'>
=> set0 = SortedSet([32], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF0 = set_REF3.union(set_REF2) 
=> set_REF0 = set([32]) : <type 'set'>
==================================================
ival0 = ival0 * ival7                                                  # STEP 107
ACTION: ival0 = ival0 * ival7 
ival0 = -96 : <type 'int'>
ival7 = 0 : <type 'int'>
=> ival0 = 0 : <type 'int'>
==================================================
list1.extend(list1)                                                    # STEP 108
ACTION: list1.extend(list1) 
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF1 = [] : <type 'list'>
REFERENCE ACTION: sortListExtend(list_REF1,list_REF1) 
==================================================
set0.islice(start=None,stop=None)                                      # STEP 109
ACTION: set0.islice(start=None,stop=None) 
set0 = SortedSet([32], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([32]) : <type 'set'>
REFERENCE ACTION: set_REF0.islice(start=None,stop=None) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'islice'
==================================================
dict0 = dict1.copy()                                                   # STEP 110
ACTION: dict0 = dict1.copy() 
dict1 = SortedDict(None, 1000, {32: 'AA'}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict0 = None : <type 'NoneType'>
dict_REF1 = {32: 'AA'} : <type 'dict'>
dict_REF0 = None : <type 'NoneType'>
=> dict0 = SortedDict(None, 1000, {32: 'AA'}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF0 = dict_REF1.copy() 
=> dict_REF0 = {32: 'AA'} : <type 'dict'>
==================================================
list3.irange(minimum=val0,maximum=val7,inclusive=(False,False))        # STEP 111
ACTION: list3.irange(minimum=val0,maximum=val7,inclusive=(False,False)) 
list3 = SortedList([32, 32, 32], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val0 = 16 : <type 'int'>
val7 = 'GG' : <type 'str'>
list_REF3 = [32, 32, 32] : <type 'list'>
REFERENCE ACTION: list_REF3.irange(minimum=val0,maximum=val7,inclusive=(False,False)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
dict4.irange(minimum=val7,maximum=val8,inclusive=(True,False),reverse=True)  # STEP 112
ACTION: dict4.irange(minimum=val7,maximum=val8,inclusive=(True,False),reverse=True) 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val7 = 'GG' : <type 'str'>
val8 = 'AA' : <type 'str'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF4.irange(minimum=val7,maximum=val8,inclusive=(True,False),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'irange'
==================================================
set2.irange(minimum=val0,maximum=val0,inclusive=(False,True),reverse=True)  # STEP 113
ACTION: set2.irange(minimum=val0,maximum=val0,inclusive=(False,True),reverse=True) 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
val0 = 16 : <type 'int'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF2.irange(minimum=val0,maximum=val0,inclusive=(False,True),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'irange'
==================================================
dict1 = dict4.copy()                                                   # STEP 114
ACTION: dict1 = dict4.copy() 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict1 = SortedDict(None, 1000, {32: 'AA'}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF4 = {} : <type 'dict'>
dict_REF1 = {32: 'AA'} : <type 'dict'>
=> dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF1 = dict_REF4.copy() 
=> dict_REF1 = {} : <type 'dict'>
==================================================
set0 = set3 | set2                                                     # STEP 115
ACTION: set0 = set3 | set2 
set3 = SortedSet([32], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set0 = SortedSet([32], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF3 = set([32]) : <type 'set'>
set_REF2 = set([]) : <type 'set'>
set_REF0 = set([32]) : <type 'set'>
REFERENCE ACTION: set_REF0 = set_REF3 | set_REF2 
==================================================
dict4.irange(minimum=val5,maximum=val7,inclusive=(False,True),reverse=True)  # STEP 116
ACTION: dict4.irange(minimum=val5,maximum=val7,inclusive=(False,True),reverse=True) 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val5 = 'AA' : <type 'str'>
val7 = 'GG' : <type 'str'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF4.irange(minimum=val5,maximum=val7,inclusive=(False,True),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'irange'
==================================================
set3.islice(start=None,stop=ival0)                                     # STEP 117
ACTION: set3.islice(start=None,stop=ival0) 
ival0 = 0 : <type 'int'>
set3 = SortedSet([32], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF3 = set([32]) : <type 'set'>
REFERENCE ACTION: set_REF3.islice(start=None,stop=ival0) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'islice'
==================================================
repr(set1)                                                             # STEP 118
ACTION: repr(set1) 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: repr(set_REF1) 
==================================================
result = (dict3.keys()).count(val8)                                    # STEP 119
ACTION: result = (dict3.keys()).count(val8)  
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val8 = 'AA' : <type 'str'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = (dict_REF3.keys()).count(val8)  
==================================================
dict3 [val3]                                                           # STEP 120
ACTION: dict3 [val3] 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val3 = 32 : <type 'int'>
dict_REF3 = {} : <type 'dict'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.KeyError'> 32
REFERENCE ACTION: dict_REF3 [val3] 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.KeyError'> 32
==================================================
dict0.irange(minimum=val7,maximum=val7,inclusive=(False,False))        # STEP 121
ACTION: dict0.irange(minimum=val7,maximum=val7,inclusive=(False,False)) 
dict0 = SortedDict(None, 1000, {32: 'AA'}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val7 = 'GG' : <type 'str'>
dict_REF0 = {32: 'AA'} : <type 'dict'>
REFERENCE ACTION: dict_REF0.irange(minimum=val7,maximum=val7,inclusive=(False,False)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'irange'
==================================================
result = dict3.popitem(last=False)                                     # STEP 122
ACTION: result = dict3.popitem(last=False) 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.KeyError'> 'popitem(): dictionary is empty'
REFERENCE ACTION: result_REF = sortDictPopitem(dict_REF3,last=False) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.KeyError'> 
==================================================
del list3 [ival1]                                                      # STEP 123
ACTION: del list3 [ival1] 
ival1 = 96 : <type 'int'>
list3 = SortedList([32, 32, 32], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [32, 32, 32] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: del list_REF3 [ival1] 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list assignment index out of range
==================================================
list3.extend(list1)                                                    # STEP 124
ACTION: list3.extend(list1) 
list3 = SortedList([32, 32, 32], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [32, 32, 32] : <type 'list'>
list_REF1 = [] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x11feb9cb0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 702933, in act11966
    self.p_list[3].extend(self.p_list[1])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 198
STOPPING TESTING DUE TO TIMEOUT
26.1729352462 PERCENT COVERED
60.2172129154 TOTAL RUNTIME
27 EXECUTED
2520 TOTAL TEST OPERATIONS
1.66460943222 TIME SPENT EXECUTING TEST OPERATIONS
54.8339207172 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
1.6091105938 TIME SPENT CHECKING PROPERTIES
3.27372002602 TOTAL TIME SPENT RUNNING SUT
0.502488851547 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
2 FAILED
0 REPEATS OF FAILURES
2 ACTUAL DISTINCT FAILURES

FAILURE 0
sval9 = 'A'                                                              # STEP 0
sval6 = sval9 + sval9                                                    # STEP 1
sval3 = 'G'                                                              # STEP 2
ival5 = 16                                                               # STEP 3
sval0 = 'A'                                                              # STEP 4
sval9 = sval3 + sval3                                                    # STEP 5
set1 = sortedcontainers.SortedSet()                                      # STEP 6
set3 = set1.copy()                                                       # STEP 7
val7 = sval9                                                             # STEP 8
val0 = ival5                                                             # STEP 9
set0 = set3.union(set1)                                                 # STEP 10
set1 = set0 - set1                                                      # STEP 11
set3 = set0 & set0                                                      # STEP 12
repr(set3)                                                              # STEP 13
set1 ^= set3                                                            # STEP 14
set3 = set0 ^ set3                                                      # STEP 15
set4 = set1 ^ set0                                                      # STEP 16
reversed(set1)                                                          # STEP 17
set2 = set1 & set1                                                      # STEP 18
ival5 = ival5 + ival5                                                   # STEP 19
val3 = ival5                                                            # STEP 20
result = set4.issuperset(set2)                                          # STEP 21
set2.irange(minimum=val7,maximum=val3,inclusive=(False,False),reverse=True)  # STEP 22
repr(set2)                                                              # STEP 23
val5 = sval6                                                            # STEP 24
set1 = set0 | set1                                                      # STEP 25
set2 = set1 ^ set4                                                      # STEP 26
ival1 = ival5 + ival5                                                   # STEP 27
set3.irange(minimum=val0,maximum=val3,inclusive=(False,False),reverse=True)  # STEP 28
set1 < set4                                                             # STEP 29
ival3 = ival1 - ival1                                                   # STEP 30
set4 -= set2                                                            # STEP 31
set4 = set2 & set3                                                      # STEP 32
result = set3.isdisjoint(set3)                                          # STEP 33
set2 = set1.copy()                                                      # STEP 34
set4.islice(start=None,stop=None)                                       # STEP 35
ival7 = ival1 + ival3                                                   # STEP 36
set0 = set4.union(set4)                                                 # STEP 37
set1 &= set0                                                            # STEP 38
set4 = set3.union(set4)                                                 # STEP 39
set3 |= set4                                                            # STEP 40
ival1 = ival5 + ival7                                                   # STEP 41
set4 = set1 | set1                                                      # STEP 42
set1 = set4.union(set0)                                                 # STEP 43
result = set3 == set0                                                   # STEP 44
ival7 = ival1 - ival1                                                   # STEP 45
dict2 = sortedcontainers.SortedDict()                                   # STEP 46
result = (dict2.keys()).count(val0)                                     # STEP 47
dict3 = dict2.fromkeys(set4,val7) ; result = dict3                      # STEP 48
dict3.islice(start=ival5,stop=ival7,reverse=True)                       # STEP 49
set1.update(set0)                                                       # STEP 50
sval3 = sval3 + sval3                                                   # STEP 51
list3 = sortedcontainers.SortedList()                                   # STEP 52
dict2.get(val5,val7)                                                    # STEP 53
result = list3 == list3                                                 # STEP 54
set3.irange(minimum=val7,maximum=val3,inclusive=(False,True))           # STEP 55
dict2.irange(minimum=val7,maximum=val7,inclusive=(False,False))         # STEP 56
result = dict3.peekitem()                                               # STEP 57
dict2 = sortedcontainers.SortedDict()                                   # STEP 58
set1 = set0 ^ set0                                                      # STEP 59
set3 = set1.copy()                                                      # STEP 60
result = (dict2.values()).count(val5)                                   # STEP 61
result = list3.index(val5)                                              # STEP 62
result = dict3.popitem(last=False)                                      # STEP 63
dict3.irange(minimum=val5,maximum=val7,inclusive=(False,False),reverse=True)  # STEP 64
dict4 = dict3.fromkeys(set2,val5) ; result = dict4                      # STEP 65
set1.irange(minimum=val3,maximum=val0,inclusive=(False,False),reverse=True)  # STEP 66
dict1 = dict3.copy()                                                    # STEP 67
list3.insert(ival7,val3)                                                # STEP 68
set1 ^= set1                                                            # STEP 69
list3+=list3                                                            # STEP 70
plist0 = list3 [ival3 : ival5]                                          # STEP 71
val5 in dict1                                                           # STEP 72
dict4.get(val3,None)                                                    # STEP 73
set4 = set4.copy()                                                      # STEP 74
dict3 = dict2.copy()                                                    # STEP 75
list3.irange(minimum=val7,maximum=val5,inclusive=(True,False),reverse=True)  # STEP 76
list3.extend(list3)                                                     # STEP 77
set0 = set4 | set0                                                      # STEP 78
val8 = sval6                                                            # STEP 79
setList(list3,ival1,val7)                                               # STEP 80
list1 = sortedcontainers.SortedList()                                   # STEP 81
ival0 = ival7 - ival1                                                   # STEP 82
dict4.update(dict2)                                                     # STEP 83
set4 = set1.copy()                                                      # STEP 84
set4.irange(minimum=val7,maximum=val5,inclusive=(False,True))           # STEP 85
list3.update(set3)                                                      # STEP 86
list3.remove(val8)                                                      # STEP 87
result = sorted(list(dict2.keys()))                                     # STEP 88
dict1 = sortedcontainers.SortedDict()                                   # STEP 89
set1 = set4 | set4                                                      # STEP 90
set3.update(list3)                                                      # STEP 91
del list3 [ival7]                                                       # STEP 92
set1.islice(start=None,stop=None)                                       # STEP 93
result = len(dict3.keys())                                              # STEP 94
result = list3 == list3                                                 # STEP 95
dict3.irange(minimum=val0,maximum=val3,inclusive=(True,False),reverse=True)  # STEP 96
result = list3 == list1                                                 # STEP 97
set1.discard(val0)                                                      # STEP 98
dict1.irange(minimum=val0,maximum=val3,inclusive=(False,True),reverse=True)  # STEP 99
set4 = set0.union(set3)                                                # STEP 100
dict2 = sortedcontainers.SortedDict()                                  # STEP 101
dict2.irange(minimum=val7,maximum=val3,inclusive=(True,False))         # STEP 102
set0 &= set4                                                           # STEP 103
ival5 = ival1 - ival0                                                  # STEP 104
list1.insert(ival0,val8)                                               # STEP 105
dict1 = dict4.fromkeys(set4,val5) ; result = dict1                     # STEP 106
set0 = set3.union(set2)                                                # STEP 107
ival0 = ival0 * ival7                                                  # STEP 108
list1.extend(list1)                                                    # STEP 109
set0.islice(start=None,stop=None)                                      # STEP 110
dict0 = dict1.copy()                                                   # STEP 111
list3.irange(minimum=val0,maximum=val7,inclusive=(False,False))        # STEP 112
set0 = sortedcontainers.SortedSet()                                    # STEP 113
dict4 = sortedcontainers.SortedDict()                                  # STEP 114
set0.update(set3)                                                      # STEP 115
set0.irange(minimum=val3,maximum=val5,inclusive=(True,False),reverse=True)  # STEP 116
dict1 = dict3.copy()                                                   # STEP 117
result = dict3.peekitem()                                              # STEP 118
dict2 = dict4.copy()                                                   # STEP 119
set4.add(val8)                                                         # STEP 120
list1.islice(start=ival7,stop=ival1)                                   # STEP 121
val4 = sval3                                                           # STEP 122
set3 = set0 | set0                                                     # STEP 123
list1.irange(minimum=val4,maximum=val7,inclusive=(True,False),reverse=True)  # STEP 124
list1.islice(start=None,stop=ival7)                                    # STEP 125
sval1 = sval9 + sval0                                                  # STEP 126
setListSlice(list3,ival1,ival3,list1)                                  # STEP 127
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x11fe65518>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306258, in check
    assert self.p_list[3] == self.p_list_REF[3]
FAILURE 1
sval9 = 'A'                                                              # STEP 0
sval6 = sval9 + sval9                                                    # STEP 1
sval3 = 'G'                                                              # STEP 2
ival5 = 16                                                               # STEP 3
sval0 = 'A'                                                              # STEP 4
sval9 = sval3 + sval3                                                    # STEP 5
set1 = sortedcontainers.SortedSet()                                      # STEP 6
set3 = set1.copy()                                                       # STEP 7
val7 = sval9                                                             # STEP 8
val0 = ival5                                                             # STEP 9
set0 = set3.union(set1)                                                 # STEP 10
set1 = set0 - set1                                                      # STEP 11
set3 = set0 & set0                                                      # STEP 12
repr(set3)                                                              # STEP 13
set1 ^= set3                                                            # STEP 14
set3 = set0 ^ set3                                                      # STEP 15
set4 = set1 ^ set0                                                      # STEP 16
reversed(set1)                                                          # STEP 17
set2 = set1 & set1                                                      # STEP 18
ival5 = ival5 + ival5                                                   # STEP 19
val3 = ival5                                                            # STEP 20
result = set4.issuperset(set2)                                          # STEP 21
set2.irange(minimum=val7,maximum=val3,inclusive=(False,False),reverse=True)  # STEP 22
repr(set2)                                                              # STEP 23
val5 = sval6                                                            # STEP 24
set1 = set0 | set1                                                      # STEP 25
set2 = set1 ^ set4                                                      # STEP 26
ival1 = ival5 + ival5                                                   # STEP 27
set3.irange(minimum=val0,maximum=val3,inclusive=(False,False),reverse=True)  # STEP 28
set1 < set4                                                             # STEP 29
ival3 = ival1 - ival1                                                   # STEP 30
set4 -= set2                                                            # STEP 31
set4 = set2 & set3                                                      # STEP 32
result = set3.isdisjoint(set3)                                          # STEP 33
set2 = set1.copy()                                                      # STEP 34
set4.islice(start=None,stop=None)                                       # STEP 35
ival7 = ival1 + ival3                                                   # STEP 36
set0 = set4.union(set4)                                                 # STEP 37
set1 &= set0                                                            # STEP 38
set4 = set3.union(set4)                                                 # STEP 39
set3 |= set4                                                            # STEP 40
ival1 = ival5 + ival7                                                   # STEP 41
set4 = set1 | set1                                                      # STEP 42
set1 = set4.union(set0)                                                 # STEP 43
result = set3 == set0                                                   # STEP 44
ival7 = ival1 - ival1                                                   # STEP 45
dict2 = sortedcontainers.SortedDict()                                   # STEP 46
result = (dict2.keys()).count(val0)                                     # STEP 47
dict3 = dict2.fromkeys(set4,val7) ; result = dict3                      # STEP 48
dict3.islice(start=ival5,stop=ival7,reverse=True)                       # STEP 49
set1.update(set0)                                                       # STEP 50
sval3 = sval3 + sval3                                                   # STEP 51
list3 = sortedcontainers.SortedList()                                   # STEP 52
dict2.get(val5,val7)                                                    # STEP 53
result = list3 == list3                                                 # STEP 54
set3.irange(minimum=val7,maximum=val3,inclusive=(False,True))           # STEP 55
dict2.irange(minimum=val7,maximum=val7,inclusive=(False,False))         # STEP 56
result = dict3.peekitem()                                               # STEP 57
dict2 = sortedcontainers.SortedDict()                                   # STEP 58
set1 = set0 ^ set0                                                      # STEP 59
set3 = set1.copy()                                                      # STEP 60
result = (dict2.values()).count(val5)                                   # STEP 61
result = list3.index(val5)                                              # STEP 62
result = dict3.popitem(last=False)                                      # STEP 63
dict3.irange(minimum=val5,maximum=val7,inclusive=(False,False),reverse=True)  # STEP 64
dict4 = dict3.fromkeys(set2,val5) ; result = dict4                      # STEP 65
set1.irange(minimum=val3,maximum=val0,inclusive=(False,False),reverse=True)  # STEP 66
dict1 = dict3.copy()                                                    # STEP 67
list3.insert(ival7,val3)                                                # STEP 68
set1 ^= set1                                                            # STEP 69
list3+=list3                                                            # STEP 70
plist0 = list3 [ival3 : ival5]                                          # STEP 71
val5 in dict1                                                           # STEP 72
dict4.get(val3,None)                                                    # STEP 73
set4 = set4.copy()                                                      # STEP 74
dict3 = dict2.copy()                                                    # STEP 75
list3.irange(minimum=val7,maximum=val5,inclusive=(True,False),reverse=True)  # STEP 76
list3.extend(list3)                                                     # STEP 77
set0 = set4 | set0                                                      # STEP 78
val8 = sval6                                                            # STEP 79
setList(list3,ival1,val7)                                               # STEP 80
list1 = sortedcontainers.SortedList()                                   # STEP 81
ival0 = ival7 - ival1                                                   # STEP 82
dict4.update(dict2)                                                     # STEP 83
set4 = set1.copy()                                                      # STEP 84
set4.irange(minimum=val7,maximum=val5,inclusive=(False,True))           # STEP 85
list3.update(set3)                                                      # STEP 86
list3.remove(val8)                                                      # STEP 87
result = sorted(list(dict2.keys()))                                     # STEP 88
dict1 = sortedcontainers.SortedDict()                                   # STEP 89
set1 = set4 | set4                                                      # STEP 90
set3.update(list3)                                                      # STEP 91
del list3 [ival7]                                                       # STEP 92
set1.islice(start=None,stop=None)                                       # STEP 93
result = len(dict3.keys())                                              # STEP 94
result = list3 == list3                                                 # STEP 95
dict3.irange(minimum=val0,maximum=val3,inclusive=(True,False),reverse=True)  # STEP 96
result = list3 == list1                                                 # STEP 97
set1.discard(val0)                                                      # STEP 98
dict1.irange(minimum=val0,maximum=val3,inclusive=(False,True),reverse=True)  # STEP 99
set4 = set0.union(set3)                                                # STEP 100
dict2 = sortedcontainers.SortedDict()                                  # STEP 101
dict2.irange(minimum=val7,maximum=val3,inclusive=(True,False))         # STEP 102
set0 &= set4                                                           # STEP 103
ival5 = ival1 - ival0                                                  # STEP 104
dict1 = dict4.fromkeys(set4,val5) ; result = dict1                     # STEP 105
set0 = set3.union(set2)                                                # STEP 106
ival0 = ival0 * ival7                                                  # STEP 107
list1.extend(list1)                                                    # STEP 108
set0.islice(start=None,stop=None)                                      # STEP 109
dict0 = dict1.copy()                                                   # STEP 110
list3.irange(minimum=val0,maximum=val7,inclusive=(False,False))        # STEP 111
dict4.irange(minimum=val7,maximum=val8,inclusive=(True,False),reverse=True)  # STEP 112
set2.irange(minimum=val0,maximum=val0,inclusive=(False,True),reverse=True)  # STEP 113
dict1 = dict4.copy()                                                   # STEP 114
set0 = set3 | set2                                                     # STEP 115
dict4.irange(minimum=val5,maximum=val7,inclusive=(False,True),reverse=True)  # STEP 116
set3.islice(start=None,stop=ival0)                                     # STEP 117
repr(set1)                                                             # STEP 118
result = (dict3.keys()).count(val8)                                    # STEP 119
dict3 [val3]                                                           # STEP 120
dict0.irange(minimum=val7,maximum=val7,inclusive=(False,False))        # STEP 121
result = dict3.popitem(last=False)                                     # STEP 122
del list3 [ival1]                                                      # STEP 123
list3.extend(list1)                                                    # STEP 124
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x11feb9cb0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 702933, in act11966
    self.p_list[3].extend(self.p_list[1])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
647 BRANCHES COVERED
485 STATEMENTS COVERED

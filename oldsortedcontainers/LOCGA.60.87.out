Random testing using config=Config(noExceptionMatch=False, generalize=False, localize=False, speed='FAST', probs='locsample.probs', LOCBaseline=0.2, noAlphaConvert=False, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, html=None, keepLast=False, stopWhenNoCoverage=None, generateLOC=None, computeFeatureStats=False, Pmutate=0.8, timeout=60, output='failure.11206.test', markov=None, noSwarmDependencies=False, startExploit=0.0, maxMustHitBranch=None, useHints=False, silentFail=False, highLowSwarm=None, maxMustHitStatement=None, progress=False, postCover=False, swarmLength=None, noCover=False, noEnumerateEnabled=False, full=True, swarmP=0.5, coverFile='coverage.out', markovP=1.0, swarmProbs=None, genDepth=None, exploitCeiling=0.1, logging=None, noCheck=False, throughput=False, uncaught=False, swarmSwitch=None, verbose=False, reducePool=False, exploit=0.8, fastQuickAnalysis=False, total=False, verboseExploit=False, swarm=False, sequenceP=1.0, biasLOC=None, timedProgress=30, relax=False, ddmin=False, stutter=None, readQuick=False, verboseActions=False, quickAnalysis=False, noReassign=False, sequenceSize=3, LOCProbs=False, sequencesFromTests=None, maxTests=-1, trackMaxCoverage=None, useQuickSequences=False, exploitBestHint=1, failedLogging=None, stopWhenStatements=None, greedyStutter=False, seed=None, stopWhenHitStatement=None, uniqueValuesAnalysis=False, normalize=False, startExploitStall=0, enumerateEnabled=False, internal=False, profile=False, multiple=True, stopWhenBranches=None, running=False, compareFails=False, Pcrossover=0.2, stopWhenHitBranch=None, depth=100, showActions=False)
** STARTING EXPLOITATION OF TESTS AT TIME 0.651846885681 AFTER 0 TESTS WITH NO NEW COVERAGE **
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x11fad0c20>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 702641, in act11961
    self.p_list[2].extend(self.p_list[1])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
Original test has 71 steps

SAVING TEST AS failure.11206.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
set2 = sortedcontainers.SortedSet()                                      # STEP 0
ACTION: set2 = sortedcontainers.SortedSet() 
set2 = None : <type 'NoneType'>
set_REF2 = None : <type 'NoneType'>
=> set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF2 = set([]) 
=> set_REF2 = set([]) : <type 'set'>
==================================================
set2 ^= set2                                                             # STEP 1
ACTION: set2 ^= set2 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF2 ^= set_REF2 
==================================================
set3 = set2.copy()                                                       # STEP 2
ACTION: set3 = set2.copy() 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set3 = None : <type 'NoneType'>
set_REF2 = set([]) : <type 'set'>
set_REF3 = None : <type 'NoneType'>
=> set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF3 = set_REF2.copy() 
=> set_REF3 = set([]) : <type 'set'>
==================================================
set3 ^= set3                                                             # STEP 3
ACTION: set3 ^= set3 
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF3 ^= set_REF3 
==================================================
list4 = sortedcontainers.SortedList()                                    # STEP 4
ACTION: list4 = sortedcontainers.SortedList() 
list4 = None : <type 'NoneType'>
list_REF4 = None : <type 'NoneType'>
=> list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: list_REF4 = [] 
=> list_REF4 = [] : <type 'list'>
==================================================
sval9 = 'X'                                                              # STEP 5
ACTION: sval9 = 'X' 
sval9 = None : <type 'NoneType'>
=> sval9 = 'X' : <type 'str'>
==================================================
set0 = set2 | set2                                                       # STEP 6
ACTION: set0 = set2 | set2 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set0 = None : <type 'NoneType'>
set_REF2 = set([]) : <type 'set'>
set_REF0 = None : <type 'NoneType'>
=> set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF0 = set_REF2 | set_REF2 
=> set_REF0 = set([]) : <type 'set'>
==================================================
sval4 = sval9 + sval9                                                    # STEP 7
ACTION: sval4 = sval9 + sval9 
sval9 = 'X' : <type 'str'>
sval4 = None : <type 'NoneType'>
=> sval4 = 'XX' : <type 'str'>
==================================================
result = list4 == list4                                                  # STEP 8
ACTION: result = list4 == list4 
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = [] : <type 'list'>
REFERENCE ACTION: result_REF = list_REF4 == list_REF4 
==================================================
set0.update(list4)                                                       # STEP 9
ACTION: set0.update(list4) 
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
list_REF4 = [] : <type 'list'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF0.update(list_REF4) 
==================================================
set0.update(set0)                                                       # STEP 10
ACTION: set0.update(set0) 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF0.update(set_REF0) 
==================================================
sval1 = sval4 + sval4                                                   # STEP 11
ACTION: sval1 = sval4 + sval4 
sval4 = 'XX' : <type 'str'>
sval1 = None : <type 'NoneType'>
=> sval1 = 'XXXX' : <type 'str'>
==================================================
set0 &= set2                                                            # STEP 12
ACTION: set0 &= set2 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF0 &= set_REF2 
==================================================
sval8 = 'm'                                                             # STEP 13
ACTION: sval8 = 'm' 
sval8 = None : <type 'NoneType'>
=> sval8 = 'm' : <type 'str'>
==================================================
val3 = sval4                                                            # STEP 14
ACTION: val3 = sval4 
sval4 = 'XX' : <type 'str'>
val3 = None : <type 'NoneType'>
=> val3 = 'XX' : <type 'str'>
==================================================
set4 = set2 - set0                                                      # STEP 15
ACTION: set4 = set2 - set0 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set4 = None : <type 'NoneType'>
set_REF2 = set([]) : <type 'set'>
set_REF0 = set([]) : <type 'set'>
set_REF4 = None : <type 'NoneType'>
=> set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF4 = set_REF2 - set_REF0 
=> set_REF4 = set([]) : <type 'set'>
==================================================
result = list4 == list4                                                 # STEP 16
ACTION: result = list4 == list4 
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = [] : <type 'list'>
REFERENCE ACTION: result_REF = list_REF4 == list_REF4 
==================================================
set3 = set4.union(set0)                                                 # STEP 17
ACTION: set3 = set4.union(set0) 
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF4 = set([]) : <type 'set'>
set_REF0 = set([]) : <type 'set'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF3 = set_REF4.union(set_REF0) 
==================================================
set1 = sortedcontainers.SortedSet()                                     # STEP 18
ACTION: set1 = sortedcontainers.SortedSet() 
set1 = None : <type 'NoneType'>
set_REF1 = None : <type 'NoneType'>
=> set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF1 = set([]) 
=> set_REF1 = set([]) : <type 'set'>
==================================================
set4 = set3 ^ set3                                                      # STEP 19
ACTION: set4 = set3 ^ set3 
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF3 = set([]) : <type 'set'>
set_REF4 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF4 = set_REF3 ^ set_REF3 
==================================================
set0 = set1 & set2                                                      # STEP 20
ACTION: set0 = set1 & set2 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF1 = set([]) : <type 'set'>
set_REF2 = set([]) : <type 'set'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF0 = set_REF1 & set_REF2 
==================================================
set1 = set4 & set1                                                      # STEP 21
ACTION: set1 = set4 & set1 
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF4 = set([]) : <type 'set'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1 = set_REF4 & set_REF1 
==================================================
list4.irange(minimum=val3,maximum=val3,inclusive=(False,False))         # STEP 22
ACTION: list4.irange(minimum=val3,maximum=val3,inclusive=(False,False)) 
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val3 = 'XX' : <type 'str'>
list_REF4 = [] : <type 'list'>
REFERENCE ACTION: list_REF4.irange(minimum=val3,maximum=val3,inclusive=(False,False)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
set3 = set4 ^ set1                                                      # STEP 23
ACTION: set3 = set4 ^ set1 
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF4 = set([]) : <type 'set'>
set_REF1 = set([]) : <type 'set'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF3 = set_REF4 ^ set_REF1 
==================================================
set1 = set2.copy()                                                      # STEP 24
ACTION: set1 = set2.copy() 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF2 = set([]) : <type 'set'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1 = set_REF2.copy() 
==================================================
set2 = set4 & set1                                                      # STEP 25
ACTION: set2 = set4 & set1 
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF4 = set([]) : <type 'set'>
set_REF1 = set([]) : <type 'set'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF2 = set_REF4 & set_REF1 
==================================================
set4 = set4 - set3                                                      # STEP 26
ACTION: set4 = set4 - set3 
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF4 = set([]) : <type 'set'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF4 = set_REF4 - set_REF3 
==================================================
list4.irange(minimum=val3,maximum=val3,inclusive=(True,False),reverse=True)  # STEP 27
ACTION: list4.irange(minimum=val3,maximum=val3,inclusive=(True,False),reverse=True) 
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val3 = 'XX' : <type 'str'>
list_REF4 = [] : <type 'list'>
REFERENCE ACTION: list_REF4.irange(minimum=val3,maximum=val3,inclusive=(True,False),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
result = set1.issuperset(set4)                                          # STEP 28
ACTION: result = set1.issuperset(set4) 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF1 = set([]) : <type 'set'>
set_REF4 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = set_REF1.issuperset(set_REF4) 
==================================================
val3 = sval4                                                            # STEP 29
ACTION: val3 = sval4 
sval4 = 'XX' : <type 'str'>
val3 = 'XX' : <type 'str'>
==================================================
list4.update(set0)                                                      # STEP 30
ACTION: list4.update(set0) 
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
list_REF4 = [] : <type 'list'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: sortListMultiAdd(list_REF4,set_REF0) 
==================================================
sval5 = 's'                                                             # STEP 31
ACTION: sval5 = 's' 
sval5 = None : <type 'NoneType'>
=> sval5 = 's' : <type 'str'>
==================================================
set2.islice(start=None,stop=None)                                       # STEP 32
ACTION: set2.islice(start=None,stop=None) 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF2.islice(start=None,stop=None) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'islice'
==================================================
list4 <= list4                                                          # STEP 33
ACTION: list4 <= list4 
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = [] : <type 'list'>
REFERENCE ACTION: list_REF4 <= list_REF4 
==================================================
set3 = set2 & set2                                                      # STEP 34
ACTION: set3 = set2 & set2 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF2 = set([]) : <type 'set'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF3 = set_REF2 & set_REF2 
==================================================
list4.irange(minimum=val3,maximum=val3,inclusive=(True,False),reverse=True)  # STEP 35
ACTION: list4.irange(minimum=val3,maximum=val3,inclusive=(True,False),reverse=True) 
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val3 = 'XX' : <type 'str'>
list_REF4 = [] : <type 'list'>
REFERENCE ACTION: list_REF4.irange(minimum=val3,maximum=val3,inclusive=(True,False),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
list4.irange(minimum=val3,maximum=val3,inclusive=(False,False))         # STEP 36
ACTION: list4.irange(minimum=val3,maximum=val3,inclusive=(False,False)) 
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val3 = 'XX' : <type 'str'>
list_REF4 = [] : <type 'list'>
REFERENCE ACTION: list_REF4.irange(minimum=val3,maximum=val3,inclusive=(False,False)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
list4.islice(start=None,stop=None)                                      # STEP 37
ACTION: list4.islice(start=None,stop=None) 
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = [] : <type 'list'>
REFERENCE ACTION: list_REF4.islice(start=None,stop=None) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'islice'
==================================================
sval9 = sval1 + sval4                                                   # STEP 38
ACTION: sval9 = sval1 + sval4 
sval1 = 'XXXX' : <type 'str'>
sval4 = 'XX' : <type 'str'>
sval9 = 'X' : <type 'str'>
=> sval9 = 'XXXXXX' : <type 'str'>
==================================================
list4.discard(val3)                                                     # STEP 39
ACTION: list4.discard(val3) 
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val3 = 'XX' : <type 'str'>
list_REF4 = [] : <type 'list'>
REFERENCE ACTION: sortListDiscard(list_REF4,val3) 
==================================================
ival7 = 13                                                              # STEP 40
ACTION: ival7 = 13 
ival7 = None : <type 'NoneType'>
=> ival7 = 13 : <type 'int'>
==================================================
ival0 = ival7 * ival7                                                   # STEP 41
ACTION: ival0 = ival7 * ival7 
ival7 = 13 : <type 'int'>
ival0 = None : <type 'NoneType'>
=> ival0 = 169 : <type 'int'>
==================================================
setListSlice(list4,ival0,ival0,list4)                                   # STEP 42
ACTION: setListSlice(list4,ival0,ival0,list4) 
ival0 = 169 : <type 'int'>
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = [] : <type 'list'>
REFERENCE ACTION: sortListSetSlice(list_REF4,ival0,ival0,list_REF4) 
==================================================
ival7 = 3                                                               # STEP 43
ACTION: ival7 = 3 
ival7 = 13 : <type 'int'>
=> ival7 = 3 : <type 'int'>
==================================================
list4.irange(minimum=val3,maximum=val3,inclusive=(False,True))          # STEP 44
ACTION: list4.irange(minimum=val3,maximum=val3,inclusive=(False,True)) 
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val3 = 'XX' : <type 'str'>
list_REF4 = [] : <type 'list'>
REFERENCE ACTION: list_REF4.irange(minimum=val3,maximum=val3,inclusive=(False,True)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
ival2 = 12                                                              # STEP 45
ACTION: ival2 = 12 
ival2 = None : <type 'NoneType'>
=> ival2 = 12 : <type 'int'>
==================================================
val5 = ival2                                                            # STEP 46
ACTION: val5 = ival2 
ival2 = 12 : <type 'int'>
val5 = None : <type 'NoneType'>
=> val5 = 12 : <type 'int'>
==================================================
setList(list4,ival7,val3)                                               # STEP 47
ACTION: setList(list4,ival7,val3) 
ival7 = 3 : <type 'int'>
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val3 = 'XX' : <type 'str'>
list_REF4 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: sortListSet(list_REF4,ival7,val3) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list assignment index out of range
==================================================
del list4 [ival2]                                                       # STEP 48
ACTION: del list4 [ival2] 
ival2 = 12 : <type 'int'>
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: del list_REF4 [ival2] 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list assignment index out of range
==================================================
plist1 = list4 [ival0 : ival7]                                          # STEP 49
ACTION: plist1 = list4 [ival0 : ival7] 
ival0 = 169 : <type 'int'>
ival7 = 3 : <type 'int'>
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
plist1 = None : <type 'NoneType'>
list_REF4 = [] : <type 'list'>
=> plist1 = [] : <type 'list'>
REFERENCE ACTION: plist1 = list_REF4 [ival0 : ival7] 
==================================================
list2 = sortedcontainers.SortedList(plist1)                             # STEP 50
ACTION: list2 = sortedcontainers.SortedList(plist1) 
list2 = None : <type 'NoneType'>
plist1 = [] : <type 'list'>
list_REF2 = None : <type 'NoneType'>
=> list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: list_REF2 = list(plist1) 
=> list_REF2 = [] : <type 'list'>
==================================================
set2 = set0 ^ set1                                                      # STEP 51
ACTION: set2 = set0 ^ set1 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
set_REF1 = set([]) : <type 'set'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF2 = set_REF0 ^ set_REF1 
==================================================
set0 = set2 | set0                                                      # STEP 52
ACTION: set0 = set2 | set0 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF2 = set([]) : <type 'set'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF0 = set_REF2 | set_REF0 
==================================================
list4 >= list4                                                          # STEP 53
ACTION: list4 >= list4 
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = [] : <type 'list'>
REFERENCE ACTION: list_REF4 >= list_REF4 
==================================================
set2 -= set1                                                            # STEP 54
ACTION: set2 -= set1 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF2 = set([]) : <type 'set'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF2 -= set_REF1 
==================================================
result = list4.pop(ival7)                                               # STEP 55
ACTION: result = list4.pop(ival7) 
ival7 = 3 : <type 'int'>
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> pop index out of range
REFERENCE ACTION: result_REF = list_REF4.pop(ival7) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> pop from empty list
==================================================
set2 &= set2                                                            # STEP 56
ACTION: set2 &= set2 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF2 &= set_REF2 
==================================================
list1 = sortedcontainers.SortedList(plist1)                             # STEP 57
ACTION: list1 = sortedcontainers.SortedList(plist1) 
list1 = None : <type 'NoneType'>
plist1 = [] : <type 'list'>
list_REF1 = None : <type 'NoneType'>
=> list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: list_REF1 = list(plist1) 
=> list_REF1 = [] : <type 'list'>
==================================================
list2.insert(ival7,val3)                                                # STEP 58
ACTION: list2.insert(ival7,val3) 
ival7 = 3 : <type 'int'>
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val3 = 'XX' : <type 'str'>
list_REF2 = [] : <type 'list'>
=> list2 = SortedList(['XX'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: sortListInsert(list_REF2,ival7,val3) 
=> list_REF2 = ['XX'] : <type 'list'>
==================================================
set0 &= set3                                                            # STEP 59
ACTION: set0 &= set3 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF0 &= set_REF3 
==================================================
set0 &= set1                                                            # STEP 60
ACTION: set0 &= set1 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF0 &= set_REF1 
==================================================
result = list2.pop(ival7)                                               # STEP 61
ACTION: result = list2.pop(ival7) 
ival7 = 3 : <type 'int'>
list2 = SortedList(['XX'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF2 = ['XX'] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: result_REF = list_REF2.pop(ival7) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> pop index out of range
==================================================
list4 <= list1                                                          # STEP 62
ACTION: list4 <= list1 
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = [] : <type 'list'>
list_REF1 = [] : <type 'list'>
REFERENCE ACTION: list_REF4 <= list_REF1 
==================================================
set1 = set1 & set0                                                      # STEP 63
ACTION: set1 = set1 & set0 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF1 = set([]) : <type 'set'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1 = set_REF1 & set_REF0 
==================================================
iter(list4)                                                             # STEP 64
ACTION: iter(list4) 
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = [] : <type 'list'>
REFERENCE ACTION: iter(list_REF4) 
==================================================
sval4 = 'Z'                                                             # STEP 65
ACTION: sval4 = 'Z' 
sval4 = 'XX' : <type 'str'>
=> sval4 = 'Z' : <type 'str'>
==================================================
set2 = set4 - set1                                                      # STEP 66
ACTION: set2 = set4 - set1 
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF4 = set([]) : <type 'set'>
set_REF1 = set([]) : <type 'set'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF2 = set_REF4 - set_REF1 
==================================================
set3.update(list4)                                                      # STEP 67
ACTION: set3.update(list4) 
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
list_REF4 = [] : <type 'list'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF3.update(list_REF4) 
==================================================
set0 = set4 - set3                                                      # STEP 68
ACTION: set0 = set4 - set3 
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF4 = set([]) : <type 'set'>
set_REF3 = set([]) : <type 'set'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF0 = set_REF4 - set_REF3 
==================================================
del list4 [ival0 : ival7]                                               # STEP 69
ACTION: del list4 [ival0 : ival7] 
ival0 = 169 : <type 'int'>
ival7 = 3 : <type 'int'>
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = [] : <type 'list'>
REFERENCE ACTION: del list_REF4 [ival0 : ival7] 
==================================================
list2.extend(list1)                                                     # STEP 70
ACTION: list2.extend(list1) 
list2 = SortedList(['XX'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF2 = ['XX'] : <type 'list'>
list_REF1 = [] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x11faaec68>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 702641, in act11961
    self.p_list[2].extend(self.p_list[1])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #12 STEP #0 (0:00:30.282192) Mon Nov 20 20:56:49 2017 [ 439 stmts 573 branches ] 1071 TOTAL ACTIONS (35.3673208429/s)
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x11ff0ab48>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 702580, in act11960
    self.p_list[2].extend(self.p_list[0])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
Original test has 49 steps

SAVING TEST AS failure.11206.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
ival2 = 13                                                               # STEP 0
ACTION: ival2 = 13 
ival2 = None : <type 'NoneType'>
=> ival2 = 13 : <type 'int'>
==================================================
val5 = ival2                                                             # STEP 1
ACTION: val5 = ival2 
ival2 = 13 : <type 'int'>
val5 = None : <type 'NoneType'>
=> val5 = 13 : <type 'int'>
==================================================
ival1 = 16                                                               # STEP 2
ACTION: ival1 = 16 
ival1 = None : <type 'NoneType'>
=> ival1 = 16 : <type 'int'>
==================================================
sval6 = 'T'                                                              # STEP 3
ACTION: sval6 = 'T' 
sval6 = None : <type 'NoneType'>
=> sval6 = 'T' : <type 'str'>
==================================================
ival8 = 19                                                               # STEP 4
ACTION: ival8 = 19 
ival8 = None : <type 'NoneType'>
=> ival8 = 19 : <type 'int'>
==================================================
ival7 = ival2 - ival1                                                    # STEP 5
ACTION: ival7 = ival2 - ival1 
ival2 = 13 : <type 'int'>
ival1 = 16 : <type 'int'>
ival7 = None : <type 'NoneType'>
=> ival7 = -3 : <type 'int'>
==================================================
ival3 = ival1 * ival1                                                    # STEP 6
ACTION: ival3 = ival1 * ival1 
ival1 = 16 : <type 'int'>
ival3 = None : <type 'NoneType'>
=> ival3 = 256 : <type 'int'>
==================================================
ival6 = ival3 + ival2                                                    # STEP 7
ACTION: ival6 = ival3 + ival2 
ival3 = 256 : <type 'int'>
ival2 = 13 : <type 'int'>
ival6 = None : <type 'NoneType'>
=> ival6 = 269 : <type 'int'>
==================================================
sval2 = 'T'                                                              # STEP 8
ACTION: sval2 = 'T' 
sval2 = None : <type 'NoneType'>
=> sval2 = 'T' : <type 'str'>
==================================================
val9 = sval2                                                             # STEP 9
ACTION: val9 = sval2 
sval2 = 'T' : <type 'str'>
val9 = None : <type 'NoneType'>
=> val9 = 'T' : <type 'str'>
==================================================
val0 = sval2                                                            # STEP 10
ACTION: val0 = sval2 
sval2 = 'T' : <type 'str'>
val0 = None : <type 'NoneType'>
=> val0 = 'T' : <type 'str'>
==================================================
ival3 = ival8 * ival1                                                   # STEP 11
ACTION: ival3 = ival8 * ival1 
ival8 = 19 : <type 'int'>
ival1 = 16 : <type 'int'>
ival3 = 256 : <type 'int'>
=> ival3 = 304 : <type 'int'>
==================================================
sval0 = 'G'                                                             # STEP 12
ACTION: sval0 = 'G' 
sval0 = None : <type 'NoneType'>
=> sval0 = 'G' : <type 'str'>
==================================================
list2 = sortedcontainers.SortedList()                                   # STEP 13
ACTION: list2 = sortedcontainers.SortedList() 
list2 = None : <type 'NoneType'>
list_REF2 = None : <type 'NoneType'>
=> list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: list_REF2 = [] 
=> list_REF2 = [] : <type 'list'>
==================================================
result = list2.index(val5)                                              # STEP 14
ACTION: result = list2.index(val5) 
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val5 = 13 : <type 'int'>
list_REF2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> 13 is not in list
REFERENCE ACTION: result_REF = list_REF2.index(val5) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.ValueError'> 13 is not in list
==================================================
result = list2.count(val0)                                              # STEP 15
ACTION: result = list2.count(val0) 
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val0 = 'T' : <type 'str'>
list_REF2 = [] : <type 'list'>
REFERENCE ACTION: result_REF = list_REF2.count(val0) 
==================================================
list3 = sortedcontainers.SortedList()                                   # STEP 16
ACTION: list3 = sortedcontainers.SortedList() 
list3 = None : <type 'NoneType'>
list_REF3 = None : <type 'NoneType'>
=> list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: list_REF3 = [] 
=> list_REF3 = [] : <type 'list'>
==================================================
result = list2.index(val0)                                              # STEP 17
ACTION: result = list2.index(val0) 
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val0 = 'T' : <type 'str'>
list_REF2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> 'T' is not in list
REFERENCE ACTION: result_REF = list_REF2.index(val0) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.ValueError'> 'T' is not in list
==================================================
val4 = ival7                                                            # STEP 18
ACTION: val4 = ival7 
ival7 = -3 : <type 'int'>
val4 = None : <type 'NoneType'>
=> val4 = -3 : <type 'int'>
==================================================
setList(list3,ival3,val5)                                               # STEP 19
ACTION: setList(list3,ival3,val5) 
ival3 = 304 : <type 'int'>
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val5 = 13 : <type 'int'>
list_REF3 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: sortListSet(list_REF3,ival3,val5) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list assignment index out of range
==================================================
result = list2.index(val9)                                              # STEP 20
ACTION: result = list2.index(val9) 
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val9 = 'T' : <type 'str'>
list_REF2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> 'T' is not in list
REFERENCE ACTION: result_REF = list_REF2.index(val9) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.ValueError'> 'T' is not in list
==================================================
list3.islice(start=None,stop=None)                                      # STEP 21
ACTION: list3.islice(start=None,stop=None) 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [] : <type 'list'>
REFERENCE ACTION: list_REF3.islice(start=None,stop=None) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'islice'
==================================================
result = list2.index(val0)                                              # STEP 22
ACTION: result = list2.index(val0) 
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val0 = 'T' : <type 'str'>
list_REF2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> 'T' is not in list
REFERENCE ACTION: result_REF = list_REF2.index(val0) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.ValueError'> 'T' is not in list
==================================================
list3.irange(minimum=val0,maximum=val0,inclusive=(False,True),reverse=True)  # STEP 23
ACTION: list3.irange(minimum=val0,maximum=val0,inclusive=(False,True),reverse=True) 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val0 = 'T' : <type 'str'>
list_REF3 = [] : <type 'list'>
REFERENCE ACTION: list_REF3.irange(minimum=val0,maximum=val0,inclusive=(False,True),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
sval3 = 'x'                                                             # STEP 24
ACTION: sval3 = 'x' 
sval3 = None : <type 'NoneType'>
=> sval3 = 'x' : <type 'str'>
==================================================
ival8 = ival3 - ival8                                                   # STEP 25
ACTION: ival8 = ival3 - ival8 
ival3 = 304 : <type 'int'>
ival8 = 19 : <type 'int'>
=> ival8 = 285 : <type 'int'>
==================================================
plist4 = list2 [ival2 : ival6]                                          # STEP 26
ACTION: plist4 = list2 [ival2 : ival6] 
ival2 = 13 : <type 'int'>
ival6 = 269 : <type 'int'>
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
plist4 = None : <type 'NoneType'>
list_REF2 = [] : <type 'list'>
=> plist4 = [] : <type 'list'>
REFERENCE ACTION: plist4 = list_REF2 [ival2 : ival6] 
==================================================
val2 = ival1                                                            # STEP 27
ACTION: val2 = ival1 
ival1 = 16 : <type 'int'>
val2 = None : <type 'NoneType'>
=> val2 = 16 : <type 'int'>
==================================================
list2.irange(minimum=val0,maximum=val0,inclusive=(False,False))         # STEP 28
ACTION: list2.irange(minimum=val0,maximum=val0,inclusive=(False,False)) 
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val0 = 'T' : <type 'str'>
list_REF2 = [] : <type 'list'>
REFERENCE ACTION: list_REF2.irange(minimum=val0,maximum=val0,inclusive=(False,False)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
setListSlice(list2,ival1,ival6,list3)                                   # STEP 29
ACTION: setListSlice(list2,ival1,ival6,list3) 
ival1 = 16 : <type 'int'>
ival6 = 269 : <type 'int'>
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF2 = [] : <type 'list'>
list_REF3 = [] : <type 'list'>
REFERENCE ACTION: sortListSetSlice(list_REF2,ival1,ival6,list_REF3) 
==================================================
ival2 = ival8 + ival8                                                   # STEP 30
ACTION: ival2 = ival8 + ival8 
ival8 = 285 : <type 'int'>
ival2 = 13 : <type 'int'>
=> ival2 = 570 : <type 'int'>
==================================================
list3.irange(minimum=val9,maximum=val4,inclusive=(True,False),reverse=True)  # STEP 31
ACTION: list3.irange(minimum=val9,maximum=val4,inclusive=(True,False),reverse=True) 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val9 = 'T' : <type 'str'>
val4 = -3 : <type 'int'>
list_REF3 = [] : <type 'list'>
REFERENCE ACTION: list_REF3.irange(minimum=val9,maximum=val4,inclusive=(True,False),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
val7 = ival7                                                            # STEP 32
ACTION: val7 = ival7 
ival7 = -3 : <type 'int'>
val7 = None : <type 'NoneType'>
=> val7 = -3 : <type 'int'>
==================================================
setListSlice(list3,ival1,ival7,list2)                                   # STEP 33
ACTION: setListSlice(list3,ival1,ival7,list2) 
ival1 = 16 : <type 'int'>
ival7 = -3 : <type 'int'>
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [] : <type 'list'>
list_REF2 = [] : <type 'list'>
REFERENCE ACTION: sortListSetSlice(list_REF3,ival1,ival7,list_REF2) 
==================================================
list2.insert(ival3,val7)                                                # STEP 34
ACTION: list2.insert(ival3,val7) 
ival3 = 304 : <type 'int'>
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val7 = -3 : <type 'int'>
list_REF2 = [] : <type 'list'>
=> list2 = SortedList([-3], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: sortListInsert(list_REF2,ival3,val7) 
=> list_REF2 = [-3] : <type 'list'>
==================================================
list3.extend(list2)                                                     # STEP 35
ACTION: list3.extend(list2) 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list2 = SortedList([-3], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [] : <type 'list'>
list_REF2 = [-3] : <type 'list'>
=> list3 = SortedList([-3], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: sortListExtend(list_REF3,list_REF2) 
=> list_REF3 = [-3] : <type 'list'>
==================================================
list3.islice(start=None,stop=ival8)                                     # STEP 36
ACTION: list3.islice(start=None,stop=ival8) 
ival8 = 285 : <type 'int'>
list3 = SortedList([-3], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [-3] : <type 'list'>
REFERENCE ACTION: list_REF3.islice(start=None,stop=ival8) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'islice'
==================================================
ival9 = ival1 + ival7                                                   # STEP 37
ACTION: ival9 = ival1 + ival7 
ival1 = 16 : <type 'int'>
ival7 = -3 : <type 'int'>
ival9 = None : <type 'NoneType'>
=> ival9 = 13 : <type 'int'>
==================================================
ival7 = ival3 + ival3                                                   # STEP 38
ACTION: ival7 = ival3 + ival3 
ival3 = 304 : <type 'int'>
ival7 = -3 : <type 'int'>
=> ival7 = 608 : <type 'int'>
==================================================
setList(list3,ival9,val4)                                               # STEP 39
ACTION: setList(list3,ival9,val4) 
ival9 = 13 : <type 'int'>
list3 = SortedList([-3], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val4 = -3 : <type 'int'>
list_REF3 = [-3] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: sortListSet(list_REF3,ival9,val4) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list assignment index out of range
==================================================
result = list3 == list3                                                 # STEP 40
ACTION: result = list3 == list3 
list3 = SortedList([-3], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [-3] : <type 'list'>
REFERENCE ACTION: result_REF = list_REF3 == list_REF3 
==================================================
setList(list3,ival7,val7)                                               # STEP 41
ACTION: setList(list3,ival7,val7) 
ival7 = 608 : <type 'int'>
list3 = SortedList([-3], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val7 = -3 : <type 'int'>
list_REF3 = [-3] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: sortListSet(list_REF3,ival7,val7) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list assignment index out of range
==================================================
result = list2.index(val4)                                              # STEP 42
ACTION: result = list2.index(val4) 
list2 = SortedList([-3], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val4 = -3 : <type 'int'>
list_REF2 = [-3] : <type 'list'>
REFERENCE ACTION: result_REF = list_REF2.index(val4) 
==================================================
list2.insert(ival3,val7)                                                # STEP 43
ACTION: list2.insert(ival3,val7) 
ival3 = 304 : <type 'int'>
list2 = SortedList([-3], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val7 = -3 : <type 'int'>
list_REF2 = [-3] : <type 'list'>
=> list2 = SortedList([-3, -3], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: sortListInsert(list_REF2,ival3,val7) 
=> list_REF2 = [-3, -3] : <type 'list'>
==================================================
list2 <= list2                                                          # STEP 44
ACTION: list2 <= list2 
list2 = SortedList([-3, -3], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF2 = [-3, -3] : <type 'list'>
REFERENCE ACTION: list_REF2 <= list_REF2 
==================================================
sval8 = 'a'                                                             # STEP 45
ACTION: sval8 = 'a' 
sval8 = None : <type 'NoneType'>
=> sval8 = 'a' : <type 'str'>
==================================================
ival4 = ival2 + ival1                                                   # STEP 46
ACTION: ival4 = ival2 + ival1 
ival2 = 570 : <type 'int'>
ival1 = 16 : <type 'int'>
ival4 = None : <type 'NoneType'>
=> ival4 = 586 : <type 'int'>
==================================================
list0 = sortedcontainers.SortedList()                                   # STEP 47
ACTION: list0 = sortedcontainers.SortedList() 
list0 = None : <type 'NoneType'>
list_REF0 = None : <type 'NoneType'>
=> list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: list_REF0 = [] 
=> list_REF0 = [] : <type 'list'>
==================================================
list2.extend(list0)                                                     # STEP 48
ACTION: list2.extend(list0) 
list2 = SortedList([-3, -3], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF2 = [-3, -3] : <type 'list'>
list_REF0 = [] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x11ff12cf8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 702580, in act11960
    self.p_list[2].extend(self.p_list[0])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 44
STOPPING TESTING DUE TO TIMEOUT
25.9402869329 PERCENT COVERED
60.2362170219 TOTAL RUNTIME
24 EXECUTED
2264 TOTAL TEST OPERATIONS
1.47056508064 TIME SPENT EXECUTING TEST OPERATIONS
56.2580220699 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
1.35966324806 TIME SPENT CHECKING PROPERTIES
2.8302283287 TOTAL TIME SPENT RUNNING SUT
0.475808143616 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
2 FAILED
0 REPEATS OF FAILURES
2 ACTUAL DISTINCT FAILURES

FAILURE 0
set2 = sortedcontainers.SortedSet()                                      # STEP 0
set2 ^= set2                                                             # STEP 1
set3 = set2.copy()                                                       # STEP 2
set3 ^= set3                                                             # STEP 3
list4 = sortedcontainers.SortedList()                                    # STEP 4
sval9 = 'X'                                                              # STEP 5
set0 = set2 | set2                                                       # STEP 6
sval4 = sval9 + sval9                                                    # STEP 7
result = list4 == list4                                                  # STEP 8
set0.update(list4)                                                       # STEP 9
set0.update(set0)                                                       # STEP 10
sval1 = sval4 + sval4                                                   # STEP 11
set0 &= set2                                                            # STEP 12
sval8 = 'm'                                                             # STEP 13
val3 = sval4                                                            # STEP 14
set4 = set2 - set0                                                      # STEP 15
result = list4 == list4                                                 # STEP 16
set3 = set4.union(set0)                                                 # STEP 17
set1 = sortedcontainers.SortedSet()                                     # STEP 18
set4 = set3 ^ set3                                                      # STEP 19
set0 = set1 & set2                                                      # STEP 20
set1 = set4 & set1                                                      # STEP 21
list4.irange(minimum=val3,maximum=val3,inclusive=(False,False))         # STEP 22
set3 = set4 ^ set1                                                      # STEP 23
set1 = set2.copy()                                                      # STEP 24
set2 = set4 & set1                                                      # STEP 25
set4 = set4 - set3                                                      # STEP 26
list4.irange(minimum=val3,maximum=val3,inclusive=(True,False),reverse=True)  # STEP 27
result = set1.issuperset(set4)                                          # STEP 28
val3 = sval4                                                            # STEP 29
list4.update(set0)                                                      # STEP 30
sval5 = 's'                                                             # STEP 31
set2.islice(start=None,stop=None)                                       # STEP 32
list4 <= list4                                                          # STEP 33
set3 = set2 & set2                                                      # STEP 34
list4.irange(minimum=val3,maximum=val3,inclusive=(True,False),reverse=True)  # STEP 35
list4.irange(minimum=val3,maximum=val3,inclusive=(False,False))         # STEP 36
list4.islice(start=None,stop=None)                                      # STEP 37
sval9 = sval1 + sval4                                                   # STEP 38
list4.discard(val3)                                                     # STEP 39
ival7 = 13                                                              # STEP 40
ival0 = ival7 * ival7                                                   # STEP 41
setListSlice(list4,ival0,ival0,list4)                                   # STEP 42
ival7 = 3                                                               # STEP 43
list4.irange(minimum=val3,maximum=val3,inclusive=(False,True))          # STEP 44
ival2 = 12                                                              # STEP 45
val5 = ival2                                                            # STEP 46
setList(list4,ival7,val3)                                               # STEP 47
del list4 [ival2]                                                       # STEP 48
plist1 = list4 [ival0 : ival7]                                          # STEP 49
list2 = sortedcontainers.SortedList(plist1)                             # STEP 50
set2 = set0 ^ set1                                                      # STEP 51
set0 = set2 | set0                                                      # STEP 52
list4 >= list4                                                          # STEP 53
set2 -= set1                                                            # STEP 54
result = list4.pop(ival7)                                               # STEP 55
set2 &= set2                                                            # STEP 56
list1 = sortedcontainers.SortedList(plist1)                             # STEP 57
list2.insert(ival7,val3)                                                # STEP 58
set0 &= set3                                                            # STEP 59
set0 &= set1                                                            # STEP 60
result = list2.pop(ival7)                                               # STEP 61
list4 <= list1                                                          # STEP 62
set1 = set1 & set0                                                      # STEP 63
iter(list4)                                                             # STEP 64
sval4 = 'Z'                                                             # STEP 65
set2 = set4 - set1                                                      # STEP 66
set3.update(list4)                                                      # STEP 67
set0 = set4 - set3                                                      # STEP 68
del list4 [ival0 : ival7]                                               # STEP 69
list2.extend(list1)                                                     # STEP 70
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x11faaec68>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 702641, in act11961
    self.p_list[2].extend(self.p_list[1])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
FAILURE 1
ival2 = 13                                                               # STEP 0
val5 = ival2                                                             # STEP 1
ival1 = 16                                                               # STEP 2
sval6 = 'T'                                                              # STEP 3
ival8 = 19                                                               # STEP 4
ival7 = ival2 - ival1                                                    # STEP 5
ival3 = ival1 * ival1                                                    # STEP 6
ival6 = ival3 + ival2                                                    # STEP 7
sval2 = 'T'                                                              # STEP 8
val9 = sval2                                                             # STEP 9
val0 = sval2                                                            # STEP 10
ival3 = ival8 * ival1                                                   # STEP 11
sval0 = 'G'                                                             # STEP 12
list2 = sortedcontainers.SortedList()                                   # STEP 13
result = list2.index(val5)                                              # STEP 14
result = list2.count(val0)                                              # STEP 15
list3 = sortedcontainers.SortedList()                                   # STEP 16
result = list2.index(val0)                                              # STEP 17
val4 = ival7                                                            # STEP 18
setList(list3,ival3,val5)                                               # STEP 19
result = list2.index(val9)                                              # STEP 20
list3.islice(start=None,stop=None)                                      # STEP 21
result = list2.index(val0)                                              # STEP 22
list3.irange(minimum=val0,maximum=val0,inclusive=(False,True),reverse=True)  # STEP 23
sval3 = 'x'                                                             # STEP 24
ival8 = ival3 - ival8                                                   # STEP 25
plist4 = list2 [ival2 : ival6]                                          # STEP 26
val2 = ival1                                                            # STEP 27
list2.irange(minimum=val0,maximum=val0,inclusive=(False,False))         # STEP 28
setListSlice(list2,ival1,ival6,list3)                                   # STEP 29
ival2 = ival8 + ival8                                                   # STEP 30
list3.irange(minimum=val9,maximum=val4,inclusive=(True,False),reverse=True)  # STEP 31
val7 = ival7                                                            # STEP 32
setListSlice(list3,ival1,ival7,list2)                                   # STEP 33
list2.insert(ival3,val7)                                                # STEP 34
list3.extend(list2)                                                     # STEP 35
list3.islice(start=None,stop=ival8)                                     # STEP 36
ival9 = ival1 + ival7                                                   # STEP 37
ival7 = ival3 + ival3                                                   # STEP 38
setList(list3,ival9,val4)                                               # STEP 39
result = list3 == list3                                                 # STEP 40
setList(list3,ival7,val7)                                               # STEP 41
result = list2.index(val4)                                              # STEP 42
list2.insert(ival3,val7)                                                # STEP 43
list2 <= list2                                                          # STEP 44
sval8 = 'a'                                                             # STEP 45
ival4 = ival2 + ival1                                                   # STEP 46
list0 = sortedcontainers.SortedList()                                   # STEP 47
list2.extend(list0)                                                     # STEP 48
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x11ff12cf8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 702580, in act11960
    self.p_list[2].extend(self.p_list[0])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
640 BRANCHES COVERED
490 STATEMENTS COVERED

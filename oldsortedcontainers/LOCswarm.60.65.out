Random testing using config=Config(noExceptionMatch=False, generalize=False, localize=False, speed='FAST', probs='locsample.probs', LOCBaseline=0.2, noAlphaConvert=False, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, html=None, keepLast=False, stopWhenNoCoverage=None, generateLOC=None, computeFeatureStats=False, Pmutate=0.0, timeout=60, output='failure.10795.test', markov=None, noSwarmDependencies=False, startExploit=0.0, maxMustHitBranch=None, useHints=False, silentFail=False, highLowSwarm=None, maxMustHitStatement=None, progress=False, postCover=False, swarmLength=None, noCover=False, noEnumerateEnabled=False, full=True, swarmP=0.5, coverFile='coverage.out', markovP=1.0, swarmProbs=None, genDepth=None, exploitCeiling=0.1, logging=None, noCheck=False, throughput=False, uncaught=False, swarmSwitch=None, verbose=False, reducePool=False, exploit=None, fastQuickAnalysis=False, total=False, verboseExploit=False, swarm=True, sequenceP=1.0, biasLOC=None, timedProgress=30, relax=False, ddmin=False, stutter=None, readQuick=False, verboseActions=False, quickAnalysis=False, noReassign=False, sequenceSize=3, LOCProbs=False, sequencesFromTests=None, maxTests=-1, trackMaxCoverage=None, useQuickSequences=False, exploitBestHint=1, failedLogging=None, stopWhenStatements=None, greedyStutter=False, seed=None, stopWhenHitStatement=None, uniqueValuesAnalysis=False, normalize=False, startExploitStall=0, enumerateEnabled=False, internal=False, profile=False, multiple=True, stopWhenBranches=None, running=False, compareFails=False, Pcrossover=0.2, stopWhenHitBranch=None, depth=100, showActions=False)
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x11fc49830>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 702641, in act11961
    self.p_list[2].extend(self.p_list[1])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
Original test has 55 steps

SAVING TEST AS failure.10795.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
dict2 = sortedcontainers.SortedDict()                                    # STEP 0
ACTION: dict2 = sortedcontainers.SortedDict() 
dict2 = None : <type 'NoneType'>
dict_REF2 = None : <type 'NoneType'>
=> dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF2 = {} 
=> dict_REF2 = {} : <type 'dict'>
==================================================
set0 = sortedcontainers.SortedSet()                                      # STEP 1
ACTION: set0 = sortedcontainers.SortedSet() 
set0 = None : <type 'NoneType'>
set_REF0 = None : <type 'NoneType'>
=> set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF0 = set([]) 
=> set_REF0 = set([]) : <type 'set'>
==================================================
result = len(dict2.items())                                              # STEP 2
ACTION: result = len(dict2.items())  
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF2.items())  
==================================================
result = dict2 != dict2                                                  # STEP 3
ACTION: result = dict2 != dict2 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = dict_REF2 != dict_REF2 
==================================================
set2 = set0 - set0                                                       # STEP 4
ACTION: set2 = set0 - set0 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set2 = None : <type 'NoneType'>
set_REF0 = set([]) : <type 'set'>
set_REF2 = None : <type 'NoneType'>
=> set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF2 = set_REF0 - set_REF0 
=> set_REF2 = set([]) : <type 'set'>
==================================================
result = dict2 != dict2                                                  # STEP 5
ACTION: result = dict2 != dict2 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = dict_REF2 != dict_REF2 
==================================================
list1 = sortedcontainers.SortedList()                                    # STEP 6
ACTION: list1 = sortedcontainers.SortedList() 
list1 = None : <type 'NoneType'>
list_REF1 = None : <type 'NoneType'>
=> list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: list_REF1 = [] 
=> list_REF1 = [] : <type 'list'>
==================================================
result = set2.isdisjoint(set2)                                           # STEP 7
ACTION: result = set2.isdisjoint(set2) 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = set_REF2.isdisjoint(set_REF2) 
==================================================
list1.update(list1)                                                      # STEP 8
ACTION: list1.update(list1) 
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF1 = [] : <type 'list'>
REFERENCE ACTION: sortListMultiAdd(list_REF1,list_REF1) 
==================================================
list1 <= list1                                                           # STEP 9
ACTION: list1 <= list1 
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF1 = [] : <type 'list'>
REFERENCE ACTION: list_REF1 <= list_REF1 
==================================================
set3 = set2 | set2                                                      # STEP 10
ACTION: set3 = set2 | set2 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set3 = None : <type 'NoneType'>
set_REF2 = set([]) : <type 'set'>
set_REF3 = None : <type 'NoneType'>
=> set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF3 = set_REF2 | set_REF2 
=> set_REF3 = set([]) : <type 'set'>
==================================================
set1 = set3 ^ set3                                                      # STEP 11
ACTION: set1 = set3 ^ set3 
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set1 = None : <type 'NoneType'>
set_REF3 = set([]) : <type 'set'>
set_REF1 = None : <type 'NoneType'>
=> set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF1 = set_REF3 ^ set_REF3 
=> set_REF1 = set([]) : <type 'set'>
==================================================
ival3 = 3                                                               # STEP 12
ACTION: ival3 = 3 
ival3 = None : <type 'NoneType'>
=> ival3 = 3 : <type 'int'>
==================================================
list1 <= list1                                                          # STEP 13
ACTION: list1 <= list1 
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF1 = [] : <type 'list'>
REFERENCE ACTION: list_REF1 <= list_REF1 
==================================================
set2 = set3.union(set3)                                                 # STEP 14
ACTION: set2 = set3.union(set3) 
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF3 = set([]) : <type 'set'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF2 = set_REF3.union(set_REF3) 
==================================================
set4 = set0 ^ set2                                                      # STEP 15
ACTION: set4 = set0 ^ set2 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set4 = None : <type 'NoneType'>
set_REF0 = set([]) : <type 'set'>
set_REF2 = set([]) : <type 'set'>
set_REF4 = None : <type 'NoneType'>
=> set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF4 = set_REF0 ^ set_REF2 
=> set_REF4 = set([]) : <type 'set'>
==================================================
plist2 = list1 [ival3 : ival3]                                          # STEP 16
ACTION: plist2 = list1 [ival3 : ival3] 
ival3 = 3 : <type 'int'>
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
plist2 = None : <type 'NoneType'>
list_REF1 = [] : <type 'list'>
=> plist2 = [] : <type 'list'>
REFERENCE ACTION: plist2 = list_REF1 [ival3 : ival3] 
==================================================
sval0 = 'N'                                                             # STEP 17
ACTION: sval0 = 'N' 
sval0 = None : <type 'NoneType'>
=> sval0 = 'N' : <type 'str'>
==================================================
plist4 = list1 [ival3 : ival3]                                          # STEP 18
ACTION: plist4 = list1 [ival3 : ival3] 
ival3 = 3 : <type 'int'>
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
plist4 = None : <type 'NoneType'>
list_REF1 = [] : <type 'list'>
=> plist4 = [] : <type 'list'>
REFERENCE ACTION: plist4 = list_REF1 [ival3 : ival3] 
==================================================
sval1 = sval0 + sval0                                                   # STEP 19
ACTION: sval1 = sval0 + sval0 
sval0 = 'N' : <type 'str'>
sval1 = None : <type 'NoneType'>
=> sval1 = 'NN' : <type 'str'>
==================================================
result = dict2 != dict2                                                 # STEP 20
ACTION: result = dict2 != dict2 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = dict_REF2 != dict_REF2 
==================================================
set3 = set3 - set3                                                      # STEP 21
ACTION: set3 = set3 - set3 
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF3 = set_REF3 - set_REF3 
==================================================
result = len(dict2.items())                                             # STEP 22
ACTION: result = len(dict2.items())  
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF2.items())  
==================================================
list2 = sortedcontainers.SortedList(plist2)                             # STEP 23
ACTION: list2 = sortedcontainers.SortedList(plist2) 
list2 = None : <type 'NoneType'>
plist2 = [] : <type 'list'>
list_REF2 = None : <type 'NoneType'>
=> list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: list_REF2 = list(plist2) 
=> list_REF2 = [] : <type 'list'>
==================================================
set2 = set1 - set1                                                      # STEP 24
ACTION: set2 = set1 - set1 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF1 = set([]) : <type 'set'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF2 = set_REF1 - set_REF1 
==================================================
plist3 = list1 [ival3 : ival3]                                          # STEP 25
ACTION: plist3 = list1 [ival3 : ival3] 
ival3 = 3 : <type 'int'>
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
plist3 = None : <type 'NoneType'>
list_REF1 = [] : <type 'list'>
=> plist3 = [] : <type 'list'>
REFERENCE ACTION: plist3 = list_REF1 [ival3 : ival3] 
==================================================
dict2.update(dict2)                                                     # STEP 26
ACTION: dict2.update(dict2) 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF2.update(dict_REF2) 
==================================================
repr(dict2)                                                             # STEP 27
ACTION: repr(dict2) 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: repr(dict_REF2) 
==================================================
del list2 [ival3]                                                       # STEP 28
ACTION: del list2 [ival3] 
ival3 = 3 : <type 'int'>
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: del list_REF2 [ival3] 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list assignment index out of range
==================================================
set0 = set0 - set1                                                      # STEP 29
ACTION: set0 = set0 - set1 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF0 = set_REF0 - set_REF1 
==================================================
set1 = sortedcontainers.SortedSet()                                     # STEP 30
ACTION: set1 = sortedcontainers.SortedSet() 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1 = set([]) 
==================================================
sval3 = sval1 + sval0                                                   # STEP 31
ACTION: sval3 = sval1 + sval0 
sval1 = 'NN' : <type 'str'>
sval0 = 'N' : <type 'str'>
sval3 = None : <type 'NoneType'>
=> sval3 = 'NNN' : <type 'str'>
==================================================
sval9 = sval1 + sval1                                                   # STEP 32
ACTION: sval9 = sval1 + sval1 
sval1 = 'NN' : <type 'str'>
sval9 = None : <type 'NoneType'>
=> sval9 = 'NNNN' : <type 'str'>
==================================================
dict1 = sortedcontainers.SortedDict()                                   # STEP 33
ACTION: dict1 = sortedcontainers.SortedDict() 
dict1 = None : <type 'NoneType'>
dict_REF1 = None : <type 'NoneType'>
=> dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF1 = {} 
=> dict_REF1 = {} : <type 'dict'>
==================================================
dict2.islice(start=None,stop=None)                                      # STEP 34
ACTION: dict2.islice(start=None,stop=None) 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF2.islice(start=None,stop=None) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'islice'
==================================================
setListSlice(list2,ival3,ival3,list1)                                   # STEP 35
ACTION: setListSlice(list2,ival3,ival3,list1) 
ival3 = 3 : <type 'int'>
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF2 = [] : <type 'list'>
list_REF1 = [] : <type 'list'>
REFERENCE ACTION: sortListSetSlice(list_REF2,ival3,ival3,list_REF1) 
==================================================
dict1.islice(start=None,stop=ival3)                                     # STEP 36
ACTION: dict1.islice(start=None,stop=ival3) 
ival3 = 3 : <type 'int'>
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF1.islice(start=None,stop=ival3) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'islice'
==================================================
val7 = ival3                                                            # STEP 37
ACTION: val7 = ival3 
ival3 = 3 : <type 'int'>
val7 = None : <type 'NoneType'>
=> val7 = 3 : <type 'int'>
==================================================
list2.irange(minimum=val7,maximum=val7,inclusive=(True,False))          # STEP 38
ACTION: list2.irange(minimum=val7,maximum=val7,inclusive=(True,False)) 
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val7 = 3 : <type 'int'>
list_REF2 = [] : <type 'list'>
REFERENCE ACTION: list_REF2.irange(minimum=val7,maximum=val7,inclusive=(True,False)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
result = set0.isdisjoint(set2)                                          # STEP 39
ACTION: result = set0.isdisjoint(set2) 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = set_REF0.isdisjoint(set_REF2) 
==================================================
set2 = set0 - set1                                                      # STEP 40
ACTION: set2 = set0 - set1 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
set_REF1 = set([]) : <type 'set'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF2 = set_REF0 - set_REF1 
==================================================
set0 = set2.union(set4)                                                 # STEP 41
ACTION: set0 = set2.union(set4) 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF2 = set([]) : <type 'set'>
set_REF4 = set([]) : <type 'set'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF0 = set_REF2.union(set_REF4) 
==================================================
list2.insert(ival3,val7)                                                # STEP 42
ACTION: list2.insert(ival3,val7) 
ival3 = 3 : <type 'int'>
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val7 = 3 : <type 'int'>
list_REF2 = [] : <type 'list'>
=> list2 = SortedList([3], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: sortListInsert(list_REF2,ival3,val7) 
=> list_REF2 = [3] : <type 'list'>
==================================================
list2.islice(start=None,stop=ival3)                                     # STEP 43
ACTION: list2.islice(start=None,stop=ival3) 
ival3 = 3 : <type 'int'>
list2 = SortedList([3], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF2 = [3] : <type 'list'>
REFERENCE ACTION: list_REF2.islice(start=None,stop=ival3) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'islice'
==================================================
val0 = ival3                                                            # STEP 44
ACTION: val0 = ival3 
ival3 = 3 : <type 'int'>
val0 = None : <type 'NoneType'>
=> val0 = 3 : <type 'int'>
==================================================
dict1.irange(minimum=val0,maximum=val0,inclusive=(False,False),reverse=True)  # STEP 45
ACTION: dict1.irange(minimum=val0,maximum=val0,inclusive=(False,False),reverse=True) 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val0 = 3 : <type 'int'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF1.irange(minimum=val0,maximum=val0,inclusive=(False,False),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'irange'
==================================================
dict3 = sortedcontainers.SortedDict()                                   # STEP 46
ACTION: dict3 = sortedcontainers.SortedDict() 
dict3 = None : <type 'NoneType'>
dict_REF3 = None : <type 'NoneType'>
=> dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF3 = {} 
=> dict_REF3 = {} : <type 'dict'>
==================================================
set3.irange(minimum=val0,maximum=val0,inclusive=(False,True),reverse=True)  # STEP 47
ACTION: set3.irange(minimum=val0,maximum=val0,inclusive=(False,True),reverse=True) 
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
val0 = 3 : <type 'int'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF3.irange(minimum=val0,maximum=val0,inclusive=(False,True),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'irange'
==================================================
set1.irange(minimum=val0,maximum=val7,inclusive=(False,False))          # STEP 48
ACTION: set1.irange(minimum=val0,maximum=val7,inclusive=(False,False)) 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
val0 = 3 : <type 'int'>
val7 = 3 : <type 'int'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1.irange(minimum=val0,maximum=val7,inclusive=(False,False)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'irange'
==================================================
list1.islice(start=None,stop=ival3)                                     # STEP 49
ACTION: list1.islice(start=None,stop=ival3) 
ival3 = 3 : <type 'int'>
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF1 = [] : <type 'list'>
REFERENCE ACTION: list_REF1.islice(start=None,stop=ival3) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'islice'
==================================================
sval1 = sval1 + sval9                                                   # STEP 50
ACTION: sval1 = sval1 + sval9 
sval1 = 'NN' : <type 'str'>
sval9 = 'NNNN' : <type 'str'>
=> sval1 = 'NNNNNN' : <type 'str'>
==================================================
set2 = set2 & set1                                                      # STEP 51
ACTION: set2 = set2 & set1 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF2 = set([]) : <type 'set'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF2 = set_REF2 & set_REF1 
==================================================
set0.islice(start=None,stop=None)                                       # STEP 52
ACTION: set0.islice(start=None,stop=None) 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF0.islice(start=None,stop=None) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'islice'
==================================================
dict3.irange(minimum=val7,maximum=val7,inclusive=(False,False))         # STEP 53
ACTION: dict3.irange(minimum=val7,maximum=val7,inclusive=(False,False)) 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val7 = 3 : <type 'int'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF3.irange(minimum=val7,maximum=val7,inclusive=(False,False)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'irange'
==================================================
list2.extend(list1)                                                     # STEP 54
ACTION: list2.extend(list1) 
list2 = SortedList([3], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF2 = [3] : <type 'list'>
list_REF1 = [] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x11da70fc8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 702641, in act11961
    self.p_list[2].extend(self.p_list[1])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #15 STEP #57 (0:00:30.005224) Mon Nov 20 18:42:44 2017 [ 431 stmts 560 branches ] 1412 TOTAL ACTIONS (47.0584722345/s)
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 60
STOPPING TESTING DUE TO TIMEOUT
24.7382706475 PERCENT COVERED
60.2302689552 TOTAL RUNTIME
33 EXECUTED
3215 TOTAL TEST OPERATIONS
1.80821800232 TIME SPENT EXECUTING TEST OPERATIONS
54.8836307526 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
1.61961817741 TIME SPENT CHECKING PROPERTIES
3.42783617973 TOTAL TIME SPENT RUNNING SUT
0.49063205719 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
dict2 = sortedcontainers.SortedDict()                                    # STEP 0
set0 = sortedcontainers.SortedSet()                                      # STEP 1
result = len(dict2.items())                                              # STEP 2
result = dict2 != dict2                                                  # STEP 3
set2 = set0 - set0                                                       # STEP 4
result = dict2 != dict2                                                  # STEP 5
list1 = sortedcontainers.SortedList()                                    # STEP 6
result = set2.isdisjoint(set2)                                           # STEP 7
list1.update(list1)                                                      # STEP 8
list1 <= list1                                                           # STEP 9
set3 = set2 | set2                                                      # STEP 10
set1 = set3 ^ set3                                                      # STEP 11
ival3 = 3                                                               # STEP 12
list1 <= list1                                                          # STEP 13
set2 = set3.union(set3)                                                 # STEP 14
set4 = set0 ^ set2                                                      # STEP 15
plist2 = list1 [ival3 : ival3]                                          # STEP 16
sval0 = 'N'                                                             # STEP 17
plist4 = list1 [ival3 : ival3]                                          # STEP 18
sval1 = sval0 + sval0                                                   # STEP 19
result = dict2 != dict2                                                 # STEP 20
set3 = set3 - set3                                                      # STEP 21
result = len(dict2.items())                                             # STEP 22
list2 = sortedcontainers.SortedList(plist2)                             # STEP 23
set2 = set1 - set1                                                      # STEP 24
plist3 = list1 [ival3 : ival3]                                          # STEP 25
dict2.update(dict2)                                                     # STEP 26
repr(dict2)                                                             # STEP 27
del list2 [ival3]                                                       # STEP 28
set0 = set0 - set1                                                      # STEP 29
set1 = sortedcontainers.SortedSet()                                     # STEP 30
sval3 = sval1 + sval0                                                   # STEP 31
sval9 = sval1 + sval1                                                   # STEP 32
dict1 = sortedcontainers.SortedDict()                                   # STEP 33
dict2.islice(start=None,stop=None)                                      # STEP 34
setListSlice(list2,ival3,ival3,list1)                                   # STEP 35
dict1.islice(start=None,stop=ival3)                                     # STEP 36
val7 = ival3                                                            # STEP 37
list2.irange(minimum=val7,maximum=val7,inclusive=(True,False))          # STEP 38
result = set0.isdisjoint(set2)                                          # STEP 39
set2 = set0 - set1                                                      # STEP 40
set0 = set2.union(set4)                                                 # STEP 41
list2.insert(ival3,val7)                                                # STEP 42
list2.islice(start=None,stop=ival3)                                     # STEP 43
val0 = ival3                                                            # STEP 44
dict1.irange(minimum=val0,maximum=val0,inclusive=(False,False),reverse=True)  # STEP 45
dict3 = sortedcontainers.SortedDict()                                   # STEP 46
set3.irange(minimum=val0,maximum=val0,inclusive=(False,True),reverse=True)  # STEP 47
set1.irange(minimum=val0,maximum=val7,inclusive=(False,False))          # STEP 48
list1.islice(start=None,stop=ival3)                                     # STEP 49
sval1 = sval1 + sval9                                                   # STEP 50
set2 = set2 & set1                                                      # STEP 51
set0.islice(start=None,stop=None)                                       # STEP 52
dict3.irange(minimum=val7,maximum=val7,inclusive=(False,False))         # STEP 53
list2.extend(list1)                                                     # STEP 54
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x11da70fc8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 702641, in act11961
    self.p_list[2].extend(self.p_list[1])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
611 BRANCHES COVERED
468 STATEMENTS COVERED

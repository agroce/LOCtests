Random testing using config=Config(noExceptionMatch=False, generalize=False, localize=False, speed='FAST', probs='locsample.probs', LOCBaseline=0.2, noAlphaConvert=False, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, html=None, keepLast=False, stopWhenNoCoverage=None, generateLOC=None, computeFeatureStats=False, Pmutate=0.8, timeout=60, output='failure.11327.test', markov=None, noSwarmDependencies=False, startExploit=0.0, maxMustHitBranch=None, useHints=False, silentFail=False, highLowSwarm=None, maxMustHitStatement=None, progress=False, postCover=False, swarmLength=None, noCover=False, noEnumerateEnabled=False, full=True, swarmP=0.5, coverFile='coverage.out', markovP=1.0, swarmProbs=None, genDepth=None, exploitCeiling=0.1, logging=None, noCheck=False, throughput=False, uncaught=False, swarmSwitch=None, verbose=False, reducePool=False, exploit=0.8, fastQuickAnalysis=False, total=False, verboseExploit=False, swarm=False, sequenceP=1.0, biasLOC=None, timedProgress=30, relax=False, ddmin=False, stutter=None, readQuick=False, verboseActions=False, quickAnalysis=False, noReassign=False, sequenceSize=3, LOCProbs=False, sequencesFromTests=None, maxTests=-1, trackMaxCoverage=None, useQuickSequences=False, exploitBestHint=1, failedLogging=None, stopWhenStatements=None, greedyStutter=False, seed=None, stopWhenHitStatement=None, uniqueValuesAnalysis=False, normalize=False, startExploitStall=0, enumerateEnabled=False, internal=False, profile=False, multiple=True, stopWhenBranches=None, running=False, compareFails=False, Pcrossover=0.2, stopWhenHitBranch=None, depth=100, showActions=False)
** STARTING EXPLOITATION OF TESTS AT TIME 0.668674945831 AFTER 0 TESTS WITH NO NEW COVERAGE **
TEST #12 STEP #32 (0:00:30.014895) Mon Nov 20 21:33:39 2017 [ 455 stmts 585 branches ] 1132 TOTAL ACTIONS (37.7146080778/s)
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x121502758>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 702872, in act11965
    self.p_list[3].extend(self.p_list[0])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
Original test has 36 steps

SAVING TEST AS failure.11327.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
list3 = sortedcontainers.SortedList()                                    # STEP 0
ACTION: list3 = sortedcontainers.SortedList() 
list3 = None : <type 'NoneType'>
list_REF3 = None : <type 'NoneType'>
=> list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: list_REF3 = [] 
=> list_REF3 = [] : <type 'list'>
==================================================
list0 = sortedcontainers.SortedList()                                    # STEP 1
ACTION: list0 = sortedcontainers.SortedList() 
list0 = None : <type 'NoneType'>
list_REF0 = None : <type 'NoneType'>
=> list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: list_REF0 = [] 
=> list_REF0 = [] : <type 'list'>
==================================================
list0.extend(list3)                                                      # STEP 2
ACTION: list0.extend(list3) 
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF0 = [] : <type 'list'>
list_REF3 = [] : <type 'list'>
REFERENCE ACTION: sortListExtend(list_REF0,list_REF3) 
==================================================
ival9 = 3                                                                # STEP 3
ACTION: ival9 = 3 
ival9 = None : <type 'NoneType'>
=> ival9 = 3 : <type 'int'>
==================================================
dict1 = sortedcontainers.SortedDict()                                    # STEP 4
ACTION: dict1 = sortedcontainers.SortedDict() 
dict1 = None : <type 'NoneType'>
dict_REF1 = None : <type 'NoneType'>
=> dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF1 = {} 
=> dict_REF1 = {} : <type 'dict'>
==================================================
result = dict1 != dict1                                                  # STEP 5
ACTION: result = dict1 != dict1 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = dict_REF1 != dict_REF1 
==================================================
val2 = ival9                                                             # STEP 6
ACTION: val2 = ival9 
ival9 = 3 : <type 'int'>
val2 = None : <type 'NoneType'>
=> val2 = 3 : <type 'int'>
==================================================
dict1.irange(minimum=val2,maximum=val2,inclusive=(False,True),reverse=True)  # STEP 7
ACTION: dict1.irange(minimum=val2,maximum=val2,inclusive=(False,True),reverse=True) 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val2 = 3 : <type 'int'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF1.irange(minimum=val2,maximum=val2,inclusive=(False,True),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'irange'
==================================================
repr(dict1)                                                              # STEP 8
ACTION: repr(dict1) 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: repr(dict_REF1) 
==================================================
result = sorted(list(dict1.keys()))                                      # STEP 9
ACTION: result = sorted(list(dict1.keys())) 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = sorted(list(dict_REF1.keys())) 
==================================================
ival1 = ival9 * ival9                                                   # STEP 10
ACTION: ival1 = ival9 * ival9 
ival9 = 3 : <type 'int'>
ival1 = None : <type 'NoneType'>
=> ival1 = 9 : <type 'int'>
==================================================
list3.irange(minimum=val2,maximum=val2,inclusive=(True,False),reverse=True)  # STEP 11
ACTION: list3.irange(minimum=val2,maximum=val2,inclusive=(True,False),reverse=True) 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val2 = 3 : <type 'int'>
list_REF3 = [] : <type 'list'>
REFERENCE ACTION: list_REF3.irange(minimum=val2,maximum=val2,inclusive=(True,False),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
val2 in dict1                                                           # STEP 12
ACTION: val2 in dict1 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val2 = 3 : <type 'int'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: val2 in dict_REF1 
==================================================
list3.irange(minimum=val2,maximum=val2,inclusive=(True,False),reverse=True)  # STEP 13
ACTION: list3.irange(minimum=val2,maximum=val2,inclusive=(True,False),reverse=True) 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val2 = 3 : <type 'int'>
list_REF3 = [] : <type 'list'>
REFERENCE ACTION: list_REF3.irange(minimum=val2,maximum=val2,inclusive=(True,False),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
list3.irange(minimum=val2,maximum=val2,inclusive=(True,False),reverse=True)  # STEP 14
ACTION: list3.irange(minimum=val2,maximum=val2,inclusive=(True,False),reverse=True) 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val2 = 3 : <type 'int'>
list_REF3 = [] : <type 'list'>
REFERENCE ACTION: list_REF3.irange(minimum=val2,maximum=val2,inclusive=(True,False),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
dict4 = dict1.copy()                                                    # STEP 15
ACTION: dict4 = dict1.copy() 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict4 = None : <type 'NoneType'>
dict_REF1 = {} : <type 'dict'>
dict_REF4 = None : <type 'NoneType'>
=> dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF4 = dict_REF1.copy() 
=> dict_REF4 = {} : <type 'dict'>
==================================================
result = (dict4.keys()).count(val2)                                     # STEP 16
ACTION: result = (dict4.keys()).count(val2)  
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val2 = 3 : <type 'int'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = (dict_REF4.keys()).count(val2)  
==================================================
dict4 = dict4.fromkeys(list0,val2) ; result = dict4                     # STEP 17
ACTION: dict4 = dict4.fromkeys(list0,val2) ; result = dict4 
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val2 = 3 : <type 'int'>
list_REF0 = [] : <type 'list'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF4 = dict_REF4.fromkeys(list_REF0,val2) ; result_REF = dict_REF4 
==================================================
dict2 = sortedcontainers.SortedDict()                                   # STEP 18
ACTION: dict2 = sortedcontainers.SortedDict() 
dict2 = None : <type 'NoneType'>
dict_REF2 = None : <type 'NoneType'>
=> dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF2 = {} 
=> dict_REF2 = {} : <type 'dict'>
==================================================
result = sorted(list(dict2.keys()))                                     # STEP 19
ACTION: result = sorted(list(dict2.keys())) 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = sorted(list(dict_REF2.keys())) 
==================================================
ival2 = ival1 + ival1                                                   # STEP 20
ACTION: ival2 = ival1 + ival1 
ival1 = 9 : <type 'int'>
ival2 = None : <type 'NoneType'>
=> ival2 = 18 : <type 'int'>
==================================================
list0.irange(minimum=val2,maximum=val2,inclusive=(False,False),reverse=True)  # STEP 21
ACTION: list0.irange(minimum=val2,maximum=val2,inclusive=(False,False),reverse=True) 
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val2 = 3 : <type 'int'>
list_REF0 = [] : <type 'list'>
REFERENCE ACTION: list_REF0.irange(minimum=val2,maximum=val2,inclusive=(False,False),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
dict1.get(val2,val2)                                                    # STEP 22
ACTION: dict1.get(val2,val2) 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val2 = 3 : <type 'int'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF1.get(val2,val2) 
==================================================
list3.append(val2)                                                      # STEP 23
ACTION: list3.append(val2) 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val2 = 3 : <type 'int'>
list_REF3 = [] : <type 'list'>
=> list3 = SortedList([3], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: sortListAppend(list_REF3,val2) 
=> list_REF3 = [3] : <type 'list'>
==================================================
list3.irange(minimum=val2,maximum=val2,inclusive=(False,False))         # STEP 24
ACTION: list3.irange(minimum=val2,maximum=val2,inclusive=(False,False)) 
list3 = SortedList([3], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val2 = 3 : <type 'int'>
list_REF3 = [3] : <type 'list'>
REFERENCE ACTION: list_REF3.irange(minimum=val2,maximum=val2,inclusive=(False,False)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
plist0 = list0 [ival1 : ival1]                                          # STEP 25
ACTION: plist0 = list0 [ival1 : ival1] 
ival1 = 9 : <type 'int'>
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
plist0 = None : <type 'NoneType'>
list_REF0 = [] : <type 'list'>
=> plist0 = [] : <type 'list'>
REFERENCE ACTION: plist0 = list_REF0 [ival1 : ival1] 
==================================================
sval6 = 'X'                                                             # STEP 26
ACTION: sval6 = 'X' 
sval6 = None : <type 'NoneType'>
=> sval6 = 'X' : <type 'str'>
==================================================
val2 = sval6                                                            # STEP 27
ACTION: val2 = sval6 
sval6 = 'X' : <type 'str'>
val2 = 3 : <type 'int'>
=> val2 = 'X' : <type 'str'>
==================================================
list0.extend(list0)                                                     # STEP 28
ACTION: list0.extend(list0) 
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF0 = [] : <type 'list'>
REFERENCE ACTION: sortListExtend(list_REF0,list_REF0) 
==================================================
del list3 [ival1 : ival1]                                               # STEP 29
ACTION: del list3 [ival1 : ival1] 
ival1 = 9 : <type 'int'>
list3 = SortedList([3], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [3] : <type 'list'>
REFERENCE ACTION: del list_REF3 [ival1 : ival1] 
==================================================
list0.islice(start=ival1,stop=ival9,reverse=True)                       # STEP 30
ACTION: list0.islice(start=ival1,stop=ival9,reverse=True) 
ival1 = 9 : <type 'int'>
ival9 = 3 : <type 'int'>
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF0 = [] : <type 'list'>
REFERENCE ACTION: list_REF0.islice(start=ival1,stop=ival9,reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'islice'
==================================================
ival3 = ival1 - ival2                                                   # STEP 31
ACTION: ival3 = ival1 - ival2 
ival1 = 9 : <type 'int'>
ival2 = 18 : <type 'int'>
ival3 = None : <type 'NoneType'>
=> ival3 = -9 : <type 'int'>
==================================================
ival6 = ival3 + ival2                                                   # STEP 32
ACTION: ival6 = ival3 + ival2 
ival3 = -9 : <type 'int'>
ival2 = 18 : <type 'int'>
ival6 = None : <type 'NoneType'>
=> ival6 = 9 : <type 'int'>
==================================================
result = (dict2.keys()).count(val2)                                     # STEP 33
ACTION: result = (dict2.keys()).count(val2)  
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val2 = 'X' : <type 'str'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = (dict_REF2.keys()).count(val2)  
==================================================
list0.irange(minimum=val2,maximum=val2,inclusive=(True,False),reverse=True)  # STEP 34
ACTION: list0.irange(minimum=val2,maximum=val2,inclusive=(True,False),reverse=True) 
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val2 = 'X' : <type 'str'>
list_REF0 = [] : <type 'list'>
REFERENCE ACTION: list_REF0.irange(minimum=val2,maximum=val2,inclusive=(True,False),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
list3.extend(list0)                                                     # STEP 35
ACTION: list3.extend(list0) 
list3 = SortedList([3], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [3] : <type 'list'>
list_REF0 = [] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x12152cb90>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 702872, in act11965
    self.p_list[3].extend(self.p_list[0])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x12155b368>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 702750, in act11963
    self.p_list[2].extend(self.p_list[3])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
Original test has 45 steps

SAVING TEST AS failure.11327.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
list2 = sortedcontainers.SortedList()                                    # STEP 0
ACTION: list2 = sortedcontainers.SortedList() 
list2 = None : <type 'NoneType'>
list_REF2 = None : <type 'NoneType'>
=> list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: list_REF2 = [] 
=> list_REF2 = [] : <type 'list'>
==================================================
sval1 = 'V'                                                              # STEP 1
ACTION: sval1 = 'V' 
sval1 = None : <type 'NoneType'>
=> sval1 = 'V' : <type 'str'>
==================================================
sval8 = 'x'                                                              # STEP 2
ACTION: sval8 = 'x' 
sval8 = None : <type 'NoneType'>
=> sval8 = 'x' : <type 'str'>
==================================================
ival8 = 13                                                               # STEP 3
ACTION: ival8 = 13 
ival8 = None : <type 'NoneType'>
=> ival8 = 13 : <type 'int'>
==================================================
val0 = ival8                                                             # STEP 4
ACTION: val0 = ival8 
ival8 = 13 : <type 'int'>
val0 = None : <type 'NoneType'>
=> val0 = 13 : <type 'int'>
==================================================
ival3 = ival8 * ival8                                                    # STEP 5
ACTION: ival3 = ival8 * ival8 
ival8 = 13 : <type 'int'>
ival3 = None : <type 'NoneType'>
=> ival3 = 169 : <type 'int'>
==================================================
list2.insert(ival3,val0)                                                 # STEP 6
ACTION: list2.insert(ival3,val0) 
ival3 = 169 : <type 'int'>
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val0 = 13 : <type 'int'>
list_REF2 = [] : <type 'list'>
=> list2 = SortedList([13], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: sortListInsert(list_REF2,ival3,val0) 
=> list_REF2 = [13] : <type 'list'>
==================================================
list2.irange(minimum=val0,maximum=val0,inclusive=(False,True))           # STEP 7
ACTION: list2.irange(minimum=val0,maximum=val0,inclusive=(False,True)) 
list2 = SortedList([13], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val0 = 13 : <type 'int'>
list_REF2 = [13] : <type 'list'>
REFERENCE ACTION: list_REF2.irange(minimum=val0,maximum=val0,inclusive=(False,True)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
setList(list2,ival3,val0)                                                # STEP 8
ACTION: setList(list2,ival3,val0) 
ival3 = 169 : <type 'int'>
list2 = SortedList([13], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val0 = 13 : <type 'int'>
list_REF2 = [13] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: sortListSet(list_REF2,ival3,val0) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list assignment index out of range
==================================================
set1 = sortedcontainers.SortedSet()                                      # STEP 9
ACTION: set1 = sortedcontainers.SortedSet() 
set1 = None : <type 'NoneType'>
set_REF1 = None : <type 'NoneType'>
=> set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF1 = set([]) 
=> set_REF1 = set([]) : <type 'set'>
==================================================
set1.update(set1)                                                       # STEP 10
ACTION: set1.update(set1) 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1.update(set_REF1) 
==================================================
set0 = set1.union(set1)                                                 # STEP 11
ACTION: set0 = set1.union(set1) 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set0 = None : <type 'NoneType'>
set_REF1 = set([]) : <type 'set'>
set_REF0 = None : <type 'NoneType'>
=> set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF0 = set_REF1.union(set_REF1) 
=> set_REF0 = set([]) : <type 'set'>
==================================================
val0 in set0                                                            # STEP 12
ACTION: val0 in set0 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
val0 = 13 : <type 'int'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: val0 in set_REF0 
==================================================
list2.extend(list2)                                                     # STEP 13
ACTION: list2.extend(list2) 
list2 = SortedList([13], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF2 = [13] : <type 'list'>
=> list2 = SortedList([13, 13], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: sortListExtend(list_REF2,list_REF2) 
=> list_REF2 = [13, 13] : <type 'list'>
==================================================
set3 = set1.copy()                                                      # STEP 14
ACTION: set3 = set1.copy() 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set3 = None : <type 'NoneType'>
set_REF1 = set([]) : <type 'set'>
set_REF3 = None : <type 'NoneType'>
=> set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF3 = set_REF1.copy() 
=> set_REF3 = set([]) : <type 'set'>
==================================================
val7 = sval1                                                            # STEP 15
ACTION: val7 = sval1 
sval1 = 'V' : <type 'str'>
val7 = None : <type 'NoneType'>
=> val7 = 'V' : <type 'str'>
==================================================
set0 = set3 | set0                                                      # STEP 16
ACTION: set0 = set3 | set0 
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF3 = set([]) : <type 'set'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF0 = set_REF3 | set_REF0 
==================================================
setList(list2,ival8,val0)                                               # STEP 17
ACTION: setList(list2,ival8,val0) 
ival8 = 13 : <type 'int'>
list2 = SortedList([13, 13], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val0 = 13 : <type 'int'>
list_REF2 = [13, 13] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: sortListSet(list_REF2,ival8,val0) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list assignment index out of range
==================================================
list2.update(list2)                                                     # STEP 18
ACTION: list2.update(list2) 
list2 = SortedList([13, 13], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF2 = [13, 13] : <type 'list'>
=> list2 = SortedList([13, 13, 13, 13], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: sortListMultiAdd(list_REF2,list_REF2) 
=> list_REF2 = [13, 13, 13, 13] : <type 'list'>
==================================================
setListSlice(list2,ival8,ival3,list2)                                   # STEP 19
ACTION: setListSlice(list2,ival8,ival3,list2) 
ival8 = 13 : <type 'int'>
ival3 = 169 : <type 'int'>
list2 = SortedList([13, 13, 13, 13], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF2 = [13, 13, 13, 13] : <type 'list'>
REFERENCE ACTION: sortListSetSlice(list_REF2,ival8,ival3,list_REF2) 
==================================================
val8 = sval8                                                            # STEP 20
ACTION: val8 = sval8 
sval8 = 'x' : <type 'str'>
val8 = None : <type 'NoneType'>
=> val8 = 'x' : <type 'str'>
==================================================
list2.irange(minimum=val0,maximum=val7,inclusive=(True,False))          # STEP 21
ACTION: list2.irange(minimum=val0,maximum=val7,inclusive=(True,False)) 
list2 = SortedList([13, 13, 13, 13], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val0 = 13 : <type 'int'>
val7 = 'V' : <type 'str'>
list_REF2 = [13, 13, 13, 13] : <type 'list'>
REFERENCE ACTION: list_REF2.irange(minimum=val0,maximum=val7,inclusive=(True,False)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
ival6 = ival8 - ival8                                                   # STEP 22
ACTION: ival6 = ival8 - ival8 
ival8 = 13 : <type 'int'>
ival6 = None : <type 'NoneType'>
=> ival6 = 0 : <type 'int'>
==================================================
list2.irange(minimum=val8,maximum=val0,inclusive=(True,False),reverse=True)  # STEP 23
ACTION: list2.irange(minimum=val8,maximum=val0,inclusive=(True,False),reverse=True) 
list2 = SortedList([13, 13, 13, 13], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val8 = 'x' : <type 'str'>
val0 = 13 : <type 'int'>
list_REF2 = [13, 13, 13, 13] : <type 'list'>
REFERENCE ACTION: list_REF2.irange(minimum=val8,maximum=val0,inclusive=(True,False),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
ival9 = ival8 - ival3                                                   # STEP 24
ACTION: ival9 = ival8 - ival3 
ival8 = 13 : <type 'int'>
ival3 = 169 : <type 'int'>
ival9 = None : <type 'NoneType'>
=> ival9 = -156 : <type 'int'>
==================================================
set4 = set3 - set3                                                      # STEP 25
ACTION: set4 = set3 - set3 
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set4 = None : <type 'NoneType'>
set_REF3 = set([]) : <type 'set'>
set_REF4 = None : <type 'NoneType'>
=> set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF4 = set_REF3 - set_REF3 
=> set_REF4 = set([]) : <type 'set'>
==================================================
setListSlice(list2,ival9,ival3,list2)                                   # STEP 26
ACTION: setListSlice(list2,ival9,ival3,list2) 
ival9 = -156 : <type 'int'>
ival3 = 169 : <type 'int'>
list2 = SortedList([13, 13, 13, 13], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF2 = [13, 13, 13, 13] : <type 'list'>
REFERENCE ACTION: sortListSetSlice(list_REF2,ival9,ival3,list_REF2) 
==================================================
setList(list2,ival9,val7)                                               # STEP 27
ACTION: setList(list2,ival9,val7) 
ival9 = -156 : <type 'int'>
list2 = SortedList([13, 13, 13, 13], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val7 = 'V' : <type 'str'>
list_REF2 = [13, 13, 13, 13] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: sortListSet(list_REF2,ival9,val7) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list assignment index out of range
==================================================
ival9 = ival3 * ival9                                                   # STEP 28
ACTION: ival9 = ival3 * ival9 
ival3 = 169 : <type 'int'>
ival9 = -156 : <type 'int'>
=> ival9 = -26364 : <type 'int'>
==================================================
list2.islice(start=ival6,stop=ival8)                                    # STEP 29
ACTION: list2.islice(start=ival6,stop=ival8) 
ival6 = 0 : <type 'int'>
ival8 = 13 : <type 'int'>
list2 = SortedList([13, 13, 13, 13], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF2 = [13, 13, 13, 13] : <type 'list'>
REFERENCE ACTION: list_REF2.islice(start=ival6,stop=ival8) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'islice'
==================================================
set0.irange(minimum=val8,maximum=val0,inclusive=(False,False))          # STEP 30
ACTION: set0.irange(minimum=val8,maximum=val0,inclusive=(False,False)) 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
val8 = 'x' : <type 'str'>
val0 = 13 : <type 'int'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF0.irange(minimum=val8,maximum=val0,inclusive=(False,False)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'irange'
==================================================
list2.irange(minimum=val7,maximum=val8,inclusive=(False,False),reverse=True)  # STEP 31
ACTION: list2.irange(minimum=val7,maximum=val8,inclusive=(False,False),reverse=True) 
list2 = SortedList([13, 13, 13, 13], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val7 = 'V' : <type 'str'>
val8 = 'x' : <type 'str'>
list_REF2 = [13, 13, 13, 13] : <type 'list'>
REFERENCE ACTION: list_REF2.irange(minimum=val7,maximum=val8,inclusive=(False,False),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
setListSlice(list2,ival9,ival9,list2)                                   # STEP 32
ACTION: setListSlice(list2,ival9,ival9,list2) 
ival9 = -26364 : <type 'int'>
list2 = SortedList([13, 13, 13, 13], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF2 = [13, 13, 13, 13] : <type 'list'>
REFERENCE ACTION: sortListSetSlice(list_REF2,ival9,ival9,list_REF2) 
==================================================
list2.irange(minimum=val7,maximum=val7,inclusive=(False,True))          # STEP 33
ACTION: list2.irange(minimum=val7,maximum=val7,inclusive=(False,True)) 
list2 = SortedList([13, 13, 13, 13], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val7 = 'V' : <type 'str'>
list_REF2 = [13, 13, 13, 13] : <type 'list'>
REFERENCE ACTION: list_REF2.irange(minimum=val7,maximum=val7,inclusive=(False,True)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
dict3 = sortedcontainers.SortedDict()                                   # STEP 34
ACTION: dict3 = sortedcontainers.SortedDict() 
dict3 = None : <type 'NoneType'>
dict_REF3 = None : <type 'NoneType'>
=> dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF3 = {} 
=> dict_REF3 = {} : <type 'dict'>
==================================================
list3 = sortedcontainers.SortedList()                                   # STEP 35
ACTION: list3 = sortedcontainers.SortedList() 
list3 = None : <type 'NoneType'>
list_REF3 = None : <type 'NoneType'>
=> list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: list_REF3 = [] 
=> list_REF3 = [] : <type 'list'>
==================================================
result = list2.pop(ival3)                                               # STEP 36
ACTION: result = list2.pop(ival3) 
ival3 = 169 : <type 'int'>
list2 = SortedList([13, 13, 13, 13], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF2 = [13, 13, 13, 13] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: result_REF = list_REF2.pop(ival3) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> pop index out of range
==================================================
list3.remove(val7)                                                      # STEP 37
ACTION: list3.remove(val7) 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val7 = 'V' : <type 'str'>
list_REF3 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> 'V' not in list
REFERENCE ACTION: list_REF3.remove(val7) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.ValueError'> list.remove(x): x not in list
==================================================
list2+=list3                                                            # STEP 38
ACTION: list2+=list3 
list2 = SortedList([13, 13, 13, 13], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF2 = [13, 13, 13, 13] : <type 'list'>
list_REF3 = [] : <type 'list'>
REFERENCE ACTION: sortListMultiAdd(list_REF2,list_REF3) 
==================================================
sval8 = sval8 + sval8                                                   # STEP 39
ACTION: sval8 = sval8 + sval8 
sval8 = 'x' : <type 'str'>
=> sval8 = 'xx' : <type 'str'>
==================================================
set0.irange(minimum=val8,maximum=val0,inclusive=(False,False),reverse=True)  # STEP 40
ACTION: set0.irange(minimum=val8,maximum=val0,inclusive=(False,False),reverse=True) 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
val8 = 'x' : <type 'str'>
val0 = 13 : <type 'int'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF0.irange(minimum=val8,maximum=val0,inclusive=(False,False),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'irange'
==================================================
dict3.irange(minimum=val8,maximum=val7,inclusive=(True,False),reverse=True)  # STEP 41
ACTION: dict3.irange(minimum=val8,maximum=val7,inclusive=(True,False),reverse=True) 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val8 = 'x' : <type 'str'>
val7 = 'V' : <type 'str'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF3.irange(minimum=val8,maximum=val7,inclusive=(True,False),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'irange'
==================================================
set2 = set4 | set3                                                      # STEP 42
ACTION: set2 = set4 | set3 
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set2 = None : <type 'NoneType'>
set_REF4 = set([]) : <type 'set'>
set_REF3 = set([]) : <type 'set'>
set_REF2 = None : <type 'NoneType'>
=> set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF2 = set_REF4 | set_REF3 
=> set_REF2 = set([]) : <type 'set'>
==================================================
ival4 = 15                                                              # STEP 43
ACTION: ival4 = 15 
ival4 = None : <type 'NoneType'>
=> ival4 = 15 : <type 'int'>
==================================================
list2.extend(list3)                                                     # STEP 44
ACTION: list2.extend(list3) 
list2 = SortedList([13, 13, 13, 13], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF2 = [13, 13, 13, 13] : <type 'list'>
list_REF3 = [] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x12156ba70>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 702750, in act11963
    self.p_list[2].extend(self.p_list[3])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 59
STOPPING TESTING DUE TO TIMEOUT
26.3280341218 PERCENT COVERED
60.2729420662 TOTAL RUNTIME
25 EXECUTED
2281 TOTAL TEST OPERATIONS
1.50070500374 TIME SPENT EXECUTING TEST OPERATIONS
56.1189134121 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
1.41771173477 TIME SPENT CHECKING PROPERTIES
2.91841673851 TOTAL TIME SPENT RUNNING SUT
0.493198633194 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
2 FAILED
0 REPEATS OF FAILURES
2 ACTUAL DISTINCT FAILURES

FAILURE 0
list3 = sortedcontainers.SortedList()                                    # STEP 0
list0 = sortedcontainers.SortedList()                                    # STEP 1
list0.extend(list3)                                                      # STEP 2
ival9 = 3                                                                # STEP 3
dict1 = sortedcontainers.SortedDict()                                    # STEP 4
result = dict1 != dict1                                                  # STEP 5
val2 = ival9                                                             # STEP 6
dict1.irange(minimum=val2,maximum=val2,inclusive=(False,True),reverse=True)  # STEP 7
repr(dict1)                                                              # STEP 8
result = sorted(list(dict1.keys()))                                      # STEP 9
ival1 = ival9 * ival9                                                   # STEP 10
list3.irange(minimum=val2,maximum=val2,inclusive=(True,False),reverse=True)  # STEP 11
val2 in dict1                                                           # STEP 12
list3.irange(minimum=val2,maximum=val2,inclusive=(True,False),reverse=True)  # STEP 13
list3.irange(minimum=val2,maximum=val2,inclusive=(True,False),reverse=True)  # STEP 14
dict4 = dict1.copy()                                                    # STEP 15
result = (dict4.keys()).count(val2)                                     # STEP 16
dict4 = dict4.fromkeys(list0,val2) ; result = dict4                     # STEP 17
dict2 = sortedcontainers.SortedDict()                                   # STEP 18
result = sorted(list(dict2.keys()))                                     # STEP 19
ival2 = ival1 + ival1                                                   # STEP 20
list0.irange(minimum=val2,maximum=val2,inclusive=(False,False),reverse=True)  # STEP 21
dict1.get(val2,val2)                                                    # STEP 22
list3.append(val2)                                                      # STEP 23
list3.irange(minimum=val2,maximum=val2,inclusive=(False,False))         # STEP 24
plist0 = list0 [ival1 : ival1]                                          # STEP 25
sval6 = 'X'                                                             # STEP 26
val2 = sval6                                                            # STEP 27
list0.extend(list0)                                                     # STEP 28
del list3 [ival1 : ival1]                                               # STEP 29
list0.islice(start=ival1,stop=ival9,reverse=True)                       # STEP 30
ival3 = ival1 - ival2                                                   # STEP 31
ival6 = ival3 + ival2                                                   # STEP 32
result = (dict2.keys()).count(val2)                                     # STEP 33
list0.irange(minimum=val2,maximum=val2,inclusive=(True,False),reverse=True)  # STEP 34
list3.extend(list0)                                                     # STEP 35
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x12152cb90>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 702872, in act11965
    self.p_list[3].extend(self.p_list[0])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
FAILURE 1
list2 = sortedcontainers.SortedList()                                    # STEP 0
sval1 = 'V'                                                              # STEP 1
sval8 = 'x'                                                              # STEP 2
ival8 = 13                                                               # STEP 3
val0 = ival8                                                             # STEP 4
ival3 = ival8 * ival8                                                    # STEP 5
list2.insert(ival3,val0)                                                 # STEP 6
list2.irange(minimum=val0,maximum=val0,inclusive=(False,True))           # STEP 7
setList(list2,ival3,val0)                                                # STEP 8
set1 = sortedcontainers.SortedSet()                                      # STEP 9
set1.update(set1)                                                       # STEP 10
set0 = set1.union(set1)                                                 # STEP 11
val0 in set0                                                            # STEP 12
list2.extend(list2)                                                     # STEP 13
set3 = set1.copy()                                                      # STEP 14
val7 = sval1                                                            # STEP 15
set0 = set3 | set0                                                      # STEP 16
setList(list2,ival8,val0)                                               # STEP 17
list2.update(list2)                                                     # STEP 18
setListSlice(list2,ival8,ival3,list2)                                   # STEP 19
val8 = sval8                                                            # STEP 20
list2.irange(minimum=val0,maximum=val7,inclusive=(True,False))          # STEP 21
ival6 = ival8 - ival8                                                   # STEP 22
list2.irange(minimum=val8,maximum=val0,inclusive=(True,False),reverse=True)  # STEP 23
ival9 = ival8 - ival3                                                   # STEP 24
set4 = set3 - set3                                                      # STEP 25
setListSlice(list2,ival9,ival3,list2)                                   # STEP 26
setList(list2,ival9,val7)                                               # STEP 27
ival9 = ival3 * ival9                                                   # STEP 28
list2.islice(start=ival6,stop=ival8)                                    # STEP 29
set0.irange(minimum=val8,maximum=val0,inclusive=(False,False))          # STEP 30
list2.irange(minimum=val7,maximum=val8,inclusive=(False,False),reverse=True)  # STEP 31
setListSlice(list2,ival9,ival9,list2)                                   # STEP 32
list2.irange(minimum=val7,maximum=val7,inclusive=(False,True))          # STEP 33
dict3 = sortedcontainers.SortedDict()                                   # STEP 34
list3 = sortedcontainers.SortedList()                                   # STEP 35
result = list2.pop(ival3)                                               # STEP 36
list3.remove(val7)                                                      # STEP 37
list2+=list3                                                            # STEP 38
sval8 = sval8 + sval8                                                   # STEP 39
set0.irange(minimum=val8,maximum=val0,inclusive=(False,False),reverse=True)  # STEP 40
dict3.irange(minimum=val8,maximum=val7,inclusive=(True,False),reverse=True)  # STEP 41
set2 = set4 | set3                                                      # STEP 42
ival4 = 15                                                              # STEP 43
list2.extend(list3)                                                     # STEP 44
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x12156ba70>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 702750, in act11963
    self.p_list[2].extend(self.p_list[3])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
646 BRANCHES COVERED
498 STATEMENTS COVERED

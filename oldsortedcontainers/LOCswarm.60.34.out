Random testing using config=Config(noExceptionMatch=False, generalize=False, localize=False, speed='FAST', probs='locsample.probs', LOCBaseline=0.2, noAlphaConvert=False, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, html=None, keepLast=False, stopWhenNoCoverage=None, generateLOC=None, computeFeatureStats=False, Pmutate=0.0, timeout=60, output='failure.10204.test', markov=None, noSwarmDependencies=False, startExploit=0.0, maxMustHitBranch=None, useHints=False, silentFail=False, highLowSwarm=None, maxMustHitStatement=None, progress=False, postCover=False, swarmLength=None, noCover=False, noEnumerateEnabled=False, full=True, swarmP=0.5, coverFile='coverage.out', markovP=1.0, swarmProbs=None, genDepth=None, exploitCeiling=0.1, logging=None, noCheck=False, throughput=False, uncaught=False, swarmSwitch=None, verbose=False, reducePool=False, exploit=None, fastQuickAnalysis=False, total=False, verboseExploit=False, swarm=True, sequenceP=1.0, biasLOC=None, timedProgress=30, relax=False, ddmin=False, stutter=None, readQuick=False, verboseActions=False, quickAnalysis=False, noReassign=False, sequenceSize=3, LOCProbs=False, sequencesFromTests=None, maxTests=-1, trackMaxCoverage=None, useQuickSequences=False, exploitBestHint=1, failedLogging=None, stopWhenStatements=None, greedyStutter=False, seed=None, stopWhenHitStatement=None, uniqueValuesAnalysis=False, normalize=False, startExploitStall=0, enumerateEnabled=False, internal=False, profile=False, multiple=True, stopWhenBranches=None, running=False, compareFails=False, Pcrossover=0.2, stopWhenHitBranch=None, depth=100, showActions=False)
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x120b19e18>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 702288, in act11955
    self.p_list[1].extend(self.p_list[0])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
Original test has 60 steps

SAVING TEST AS failure.10204.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
dict0 = sortedcontainers.SortedDict()                                    # STEP 0
ACTION: dict0 = sortedcontainers.SortedDict() 
dict0 = None : <type 'NoneType'>
dict_REF0 = None : <type 'NoneType'>
=> dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF0 = {} 
=> dict_REF0 = {} : <type 'dict'>
==================================================
ival7 = 7                                                                # STEP 1
ACTION: ival7 = 7 
ival7 = None : <type 'NoneType'>
=> ival7 = 7 : <type 'int'>
==================================================
list1 = sortedcontainers.SortedList()                                    # STEP 2
ACTION: list1 = sortedcontainers.SortedList() 
list1 = None : <type 'NoneType'>
list_REF1 = None : <type 'NoneType'>
=> list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: list_REF1 = [] 
=> list_REF1 = [] : <type 'list'>
==================================================
list1.extend(list1)                                                      # STEP 3
ACTION: list1.extend(list1) 
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF1 = [] : <type 'list'>
REFERENCE ACTION: sortListExtend(list_REF1,list_REF1) 
==================================================
set0 = sortedcontainers.SortedSet()                                      # STEP 4
ACTION: set0 = sortedcontainers.SortedSet() 
set0 = None : <type 'NoneType'>
set_REF0 = None : <type 'NoneType'>
=> set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF0 = set([]) 
=> set_REF0 = set([]) : <type 'set'>
==================================================
list1 < list1                                                            # STEP 5
ACTION: list1 < list1 
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF1 = [] : <type 'list'>
REFERENCE ACTION: list_REF1 < list_REF1 
==================================================
sval4 = 'W'                                                              # STEP 6
ACTION: sval4 = 'W' 
sval4 = None : <type 'NoneType'>
=> sval4 = 'W' : <type 'str'>
==================================================
list1.extend(list1)                                                      # STEP 7
ACTION: list1.extend(list1) 
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF1 = [] : <type 'list'>
REFERENCE ACTION: sortListExtend(list_REF1,list_REF1) 
==================================================
result = len(dict0)                                                      # STEP 8
ACTION: result = len(dict0) 
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF0) 
==================================================
ival6 = ival7 + ival7                                                    # STEP 9
ACTION: ival6 = ival7 + ival7 
ival7 = 7 : <type 'int'>
ival6 = None : <type 'NoneType'>
=> ival6 = 14 : <type 'int'>
==================================================
set0 &= set0                                                            # STEP 10
ACTION: set0 &= set0 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF0 &= set_REF0 
==================================================
plist0 = list1 [ival7 : ival7]                                          # STEP 11
ACTION: plist0 = list1 [ival7 : ival7] 
ival7 = 7 : <type 'int'>
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
plist0 = None : <type 'NoneType'>
list_REF1 = [] : <type 'list'>
=> plist0 = [] : <type 'list'>
REFERENCE ACTION: plist0 = list_REF1 [ival7 : ival7] 
==================================================
ival2 = ival7 + ival7                                                   # STEP 12
ACTION: ival2 = ival7 + ival7 
ival7 = 7 : <type 'int'>
ival2 = None : <type 'NoneType'>
=> ival2 = 14 : <type 'int'>
==================================================
list1.extend(list1)                                                     # STEP 13
ACTION: list1.extend(list1) 
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF1 = [] : <type 'list'>
REFERENCE ACTION: sortListExtend(list_REF1,list_REF1) 
==================================================
ival8 = 14                                                              # STEP 14
ACTION: ival8 = 14 
ival8 = None : <type 'NoneType'>
=> ival8 = 14 : <type 'int'>
==================================================
result = list1.pop(ival8)                                               # STEP 15
ACTION: result = list1.pop(ival8) 
ival8 = 14 : <type 'int'>
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> pop index out of range
REFERENCE ACTION: result_REF = list_REF1.pop(ival8) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> pop from empty list
==================================================
sval7 = 'M'                                                             # STEP 16
ACTION: sval7 = 'M' 
sval7 = None : <type 'NoneType'>
=> sval7 = 'M' : <type 'str'>
==================================================
ival4 = ival7 + ival7                                                   # STEP 17
ACTION: ival4 = ival7 + ival7 
ival7 = 7 : <type 'int'>
ival4 = None : <type 'NoneType'>
=> ival4 = 14 : <type 'int'>
==================================================
list4 = sortedcontainers.SortedList(plist0)                             # STEP 18
ACTION: list4 = sortedcontainers.SortedList(plist0) 
list4 = None : <type 'NoneType'>
plist0 = [] : <type 'list'>
list_REF4 = None : <type 'NoneType'>
=> list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: list_REF4 = list(plist0) 
=> list_REF4 = [] : <type 'list'>
==================================================
val6 = sval7                                                            # STEP 19
ACTION: val6 = sval7 
sval7 = 'M' : <type 'str'>
val6 = None : <type 'NoneType'>
=> val6 = 'M' : <type 'str'>
==================================================
setList(list4,ival6,val6)                                               # STEP 20
ACTION: setList(list4,ival6,val6) 
ival6 = 14 : <type 'int'>
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val6 = 'M' : <type 'str'>
list_REF4 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: sortListSet(list_REF4,ival6,val6) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list assignment index out of range
==================================================
list4.irange(minimum=val6,maximum=val6,inclusive=(False,True))          # STEP 21
ACTION: list4.irange(minimum=val6,maximum=val6,inclusive=(False,True)) 
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val6 = 'M' : <type 'str'>
list_REF4 = [] : <type 'list'>
REFERENCE ACTION: list_REF4.irange(minimum=val6,maximum=val6,inclusive=(False,True)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
result = dict0 == dict0                                                 # STEP 22
ACTION: result = dict0 == dict0 
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = dict_REF0 == dict_REF0 
==================================================
result = (dict0.keys()).count(val6)                                     # STEP 23
ACTION: result = (dict0.keys()).count(val6)  
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val6 = 'M' : <type 'str'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = (dict_REF0.keys()).count(val6)  
==================================================
set0 &= set0                                                            # STEP 24
ACTION: set0 &= set0 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF0 &= set_REF0 
==================================================
val7 = sval4                                                            # STEP 25
ACTION: val7 = sval4 
sval4 = 'W' : <type 'str'>
val7 = None : <type 'NoneType'>
=> val7 = 'W' : <type 'str'>
==================================================
list1.islice(start=None,stop=None)                                      # STEP 26
ACTION: list1.islice(start=None,stop=None) 
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF1 = [] : <type 'list'>
REFERENCE ACTION: list_REF1.islice(start=None,stop=None) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'islice'
==================================================
set1 = set0 ^ set0                                                      # STEP 27
ACTION: set1 = set0 ^ set0 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set1 = None : <type 'NoneType'>
set_REF0 = set([]) : <type 'set'>
set_REF1 = None : <type 'NoneType'>
=> set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF1 = set_REF0 ^ set_REF0 
=> set_REF1 = set([]) : <type 'set'>
==================================================
list4.irange(minimum=val6,maximum=val6,inclusive=(True,False),reverse=True)  # STEP 28
ACTION: list4.irange(minimum=val6,maximum=val6,inclusive=(True,False),reverse=True) 
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val6 = 'M' : <type 'str'>
list_REF4 = [] : <type 'list'>
REFERENCE ACTION: list_REF4.irange(minimum=val6,maximum=val6,inclusive=(True,False),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
result = dict0 == dict0                                                 # STEP 29
ACTION: result = dict0 == dict0 
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = dict_REF0 == dict_REF0 
==================================================
list1.islice(start=None,stop=ival4)                                     # STEP 30
ACTION: list1.islice(start=None,stop=ival4) 
ival4 = 14 : <type 'int'>
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF1 = [] : <type 'list'>
REFERENCE ACTION: list_REF1.islice(start=None,stop=ival4) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'islice'
==================================================
result = list4.pop(ival2)                                               # STEP 31
ACTION: result = list4.pop(ival2) 
ival2 = 14 : <type 'int'>
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> pop index out of range
REFERENCE ACTION: result_REF = list_REF4.pop(ival2) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> pop from empty list
==================================================
set1.islice(start=ival8,stop=ival6,reverse=True)                        # STEP 32
ACTION: set1.islice(start=ival8,stop=ival6,reverse=True) 
ival8 = 14 : <type 'int'>
ival6 = 14 : <type 'int'>
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1.islice(start=ival8,stop=ival6,reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'islice'
==================================================
result = dict0.peekitem(ival2)                                          # STEP 33
ACTION: result = dict0.peekitem(ival2) 
ival2 = 14 : <type 'int'>
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF0 = {} : <type 'dict'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: result_REF = sortDictPeekitem(dict_REF0,ival2) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
==================================================
list4.irange(minimum=val7,maximum=val7,inclusive=(False,True))          # STEP 34
ACTION: list4.irange(minimum=val7,maximum=val7,inclusive=(False,True)) 
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val7 = 'W' : <type 'str'>
list_REF4 = [] : <type 'list'>
REFERENCE ACTION: list_REF4.irange(minimum=val7,maximum=val7,inclusive=(False,True)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
list4.irange(minimum=val7,maximum=val7,inclusive=(False,True))          # STEP 35
ACTION: list4.irange(minimum=val7,maximum=val7,inclusive=(False,True)) 
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val7 = 'W' : <type 'str'>
list_REF4 = [] : <type 'list'>
REFERENCE ACTION: list_REF4.irange(minimum=val7,maximum=val7,inclusive=(False,True)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
result = dict0.peekitem(ival4)                                          # STEP 36
ACTION: result = dict0.peekitem(ival4) 
ival4 = 14 : <type 'int'>
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF0 = {} : <type 'dict'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: result_REF = sortDictPeekitem(dict_REF0,ival4) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
==================================================
ival6 = ival4 + ival7                                                   # STEP 37
ACTION: ival6 = ival4 + ival7 
ival4 = 14 : <type 'int'>
ival7 = 7 : <type 'int'>
ival6 = 14 : <type 'int'>
=> ival6 = 21 : <type 'int'>
==================================================
set1.update(set0)                                                       # STEP 38
ACTION: set1.update(set0) 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF1 = set([]) : <type 'set'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1.update(set_REF0) 
==================================================
list4.irange(minimum=val7,maximum=val6,inclusive=(False,False))         # STEP 39
ACTION: list4.irange(minimum=val7,maximum=val6,inclusive=(False,False)) 
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val7 = 'W' : <type 'str'>
val6 = 'M' : <type 'str'>
list_REF4 = [] : <type 'list'>
REFERENCE ACTION: list_REF4.irange(minimum=val7,maximum=val6,inclusive=(False,False)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
ival1 = 13                                                              # STEP 40
ACTION: ival1 = 13 
ival1 = None : <type 'NoneType'>
=> ival1 = 13 : <type 'int'>
==================================================
result = list4.index(val6)                                              # STEP 41
ACTION: result = list4.index(val6) 
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val6 = 'M' : <type 'str'>
list_REF4 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> 'M' is not in list
REFERENCE ACTION: result_REF = list_REF4.index(val6) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.ValueError'> 'M' is not in list
==================================================
sval4 = 'H'                                                             # STEP 42
ACTION: sval4 = 'H' 
sval4 = 'W' : <type 'str'>
=> sval4 = 'H' : <type 'str'>
==================================================
list1.insert(ival1,val6)                                                # STEP 43
ACTION: list1.insert(ival1,val6) 
ival1 = 13 : <type 'int'>
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val6 = 'M' : <type 'str'>
list_REF1 = [] : <type 'list'>
=> list1 = SortedList(['M'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: sortListInsert(list_REF1,ival1,val6) 
=> list_REF1 = ['M'] : <type 'list'>
==================================================
dict0.islice(start=None,stop=ival7)                                     # STEP 44
ACTION: dict0.islice(start=None,stop=ival7) 
ival7 = 7 : <type 'int'>
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF0.islice(start=None,stop=ival7) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'islice'
==================================================
dict1 = sortedcontainers.SortedDict()                                   # STEP 45
ACTION: dict1 = sortedcontainers.SortedDict() 
dict1 = None : <type 'NoneType'>
dict_REF1 = None : <type 'NoneType'>
=> dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF1 = {} 
=> dict_REF1 = {} : <type 'dict'>
==================================================
dict0.irange(minimum=val6,maximum=val6,inclusive=(False,False))         # STEP 46
ACTION: dict0.irange(minimum=val6,maximum=val6,inclusive=(False,False)) 
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val6 = 'M' : <type 'str'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF0.irange(minimum=val6,maximum=val6,inclusive=(False,False)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'irange'
==================================================
val2 = sval7                                                            # STEP 47
ACTION: val2 = sval7 
sval7 = 'M' : <type 'str'>
val2 = None : <type 'NoneType'>
=> val2 = 'M' : <type 'str'>
==================================================
dict1.islice(start=ival8,stop=ival7,reverse=True)                       # STEP 48
ACTION: dict1.islice(start=ival8,stop=ival7,reverse=True) 
ival8 = 14 : <type 'int'>
ival7 = 7 : <type 'int'>
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF1.islice(start=ival8,stop=ival7,reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'islice'
==================================================
result = dict0.peekitem()                                               # STEP 49
ACTION: result = dict0.peekitem() 
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF0 = {} : <type 'dict'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: result_REF = sortDictPeekitem(dict_REF0,) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
==================================================
list4.irange(minimum=val7,maximum=val6,inclusive=(True,False),reverse=True)  # STEP 50
ACTION: list4.irange(minimum=val7,maximum=val6,inclusive=(True,False),reverse=True) 
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val7 = 'W' : <type 'str'>
val6 = 'M' : <type 'str'>
list_REF4 = [] : <type 'list'>
REFERENCE ACTION: list_REF4.irange(minimum=val7,maximum=val6,inclusive=(True,False),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
val8 = sval4                                                            # STEP 51
ACTION: val8 = sval4 
sval4 = 'H' : <type 'str'>
val8 = None : <type 'NoneType'>
=> val8 = 'H' : <type 'str'>
==================================================
repr(dict1)                                                             # STEP 52
ACTION: repr(dict1) 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: repr(dict_REF1) 
==================================================
list1.insert(ival6,val8)                                                # STEP 53
ACTION: list1.insert(ival6,val8) 
ival6 = 21 : <type 'int'>
list1 = SortedList(['M'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val8 = 'H' : <type 'str'>
list_REF1 = ['M'] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> 'H' not in sort order at index 1
REFERENCE ACTION: sortListInsert(list_REF1,ival6,val8) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.ValueError'> would not be sorted
==================================================
set1 &= set1                                                            # STEP 54
ACTION: set1 &= set1 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1 &= set_REF1 
==================================================
set2 = sortedcontainers.SortedSet()                                     # STEP 55
ACTION: set2 = sortedcontainers.SortedSet() 
set2 = None : <type 'NoneType'>
set_REF2 = None : <type 'NoneType'>
=> set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF2 = set([]) 
=> set_REF2 = set([]) : <type 'set'>
==================================================
del list1 [ival2]                                                       # STEP 56
ACTION: del list1 [ival2] 
ival2 = 14 : <type 'int'>
list1 = SortedList(['M'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF1 = ['M'] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: del list_REF1 [ival2] 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list assignment index out of range
==================================================
set3 = sortedcontainers.SortedSet()                                     # STEP 57
ACTION: set3 = sortedcontainers.SortedSet() 
set3 = None : <type 'NoneType'>
set_REF3 = None : <type 'NoneType'>
=> set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF3 = set([]) 
=> set_REF3 = set([]) : <type 'set'>
==================================================
list0 = sortedcontainers.SortedList(plist0)                             # STEP 58
ACTION: list0 = sortedcontainers.SortedList(plist0) 
list0 = None : <type 'NoneType'>
plist0 = [] : <type 'list'>
list_REF0 = None : <type 'NoneType'>
=> list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: list_REF0 = list(plist0) 
=> list_REF0 = [] : <type 'list'>
==================================================
list1.extend(list0)                                                     # STEP 59
ACTION: list1.extend(list0) 
list1 = SortedList(['M'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF1 = ['M'] : <type 'list'>
list_REF0 = [] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x11fe57d88>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 702288, in act11955
    self.p_list[1].extend(self.p_list[0])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #16 STEP #0 (0:00:30.050772) Mon Nov 20 15:32:26 2017 [ 399 stmts 518 branches ] 1460 TOTAL ACTIONS (48.5844424346/s)
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x120f36560>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 703286, in act11972
    self.p_list[4].extend(self.p_list[2])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
Original test has 90 steps

SAVING TEST AS failure.10204.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
sval1 = 'w'                                                              # STEP 0
ACTION: sval1 = 'w' 
sval1 = None : <type 'NoneType'>
=> sval1 = 'w' : <type 'str'>
==================================================
sval4 = sval1 + sval1                                                    # STEP 1
ACTION: sval4 = sval1 + sval1 
sval1 = 'w' : <type 'str'>
sval4 = None : <type 'NoneType'>
=> sval4 = 'ww' : <type 'str'>
==================================================
sval9 = sval4 + sval4                                                    # STEP 2
ACTION: sval9 = sval4 + sval4 
sval4 = 'ww' : <type 'str'>
sval9 = None : <type 'NoneType'>
=> sval9 = 'wwww' : <type 'str'>
==================================================
list4 = sortedcontainers.SortedList()                                    # STEP 3
ACTION: list4 = sortedcontainers.SortedList() 
list4 = None : <type 'NoneType'>
list_REF4 = None : <type 'NoneType'>
=> list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: list_REF4 = [] 
=> list_REF4 = [] : <type 'list'>
==================================================
dict3 = sortedcontainers.SortedDict()                                    # STEP 4
ACTION: dict3 = sortedcontainers.SortedDict() 
dict3 = None : <type 'NoneType'>
dict_REF3 = None : <type 'NoneType'>
=> dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF3 = {} 
=> dict_REF3 = {} : <type 'dict'>
==================================================
result = dict3 == dict3                                                  # STEP 5
ACTION: result = dict3 == dict3 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = dict_REF3 == dict_REF3 
==================================================
dict0 = sortedcontainers.SortedDict()                                    # STEP 6
ACTION: dict0 = sortedcontainers.SortedDict() 
dict0 = None : <type 'NoneType'>
dict_REF0 = None : <type 'NoneType'>
=> dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF0 = {} 
=> dict_REF0 = {} : <type 'dict'>
==================================================
sval3 = 'z'                                                              # STEP 7
ACTION: sval3 = 'z' 
sval3 = None : <type 'NoneType'>
=> sval3 = 'z' : <type 'str'>
==================================================
result = len(dict0.keys())                                               # STEP 8
ACTION: result = len(dict0.keys())  
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF0.keys())  
==================================================
set1 = sortedcontainers.SortedSet()                                      # STEP 9
ACTION: set1 = sortedcontainers.SortedSet() 
set1 = None : <type 'NoneType'>
set_REF1 = None : <type 'NoneType'>
=> set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF1 = set([]) 
=> set_REF1 = set([]) : <type 'set'>
==================================================
set1 &= set1                                                            # STEP 10
ACTION: set1 &= set1 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1 &= set_REF1 
==================================================
list4.islice(start=None,stop=None)                                      # STEP 11
ACTION: list4.islice(start=None,stop=None) 
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = [] : <type 'list'>
REFERENCE ACTION: list_REF4.islice(start=None,stop=None) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'islice'
==================================================
set2 = set1.union(set1)                                                 # STEP 12
ACTION: set2 = set1.union(set1) 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set2 = None : <type 'NoneType'>
set_REF1 = set([]) : <type 'set'>
set_REF2 = None : <type 'NoneType'>
=> set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF2 = set_REF1.union(set_REF1) 
=> set_REF2 = set([]) : <type 'set'>
==================================================
set1 |= set1                                                            # STEP 13
ACTION: set1 |= set1 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1 |= set_REF1 
==================================================
repr(dict3)                                                             # STEP 14
ACTION: repr(dict3) 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: repr(dict_REF3) 
==================================================
set4 = set1.union(set1)                                                 # STEP 15
ACTION: set4 = set1.union(set1) 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set4 = None : <type 'NoneType'>
set_REF1 = set([]) : <type 'set'>
set_REF4 = None : <type 'NoneType'>
=> set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF4 = set_REF1.union(set_REF1) 
=> set_REF4 = set([]) : <type 'set'>
==================================================
sval6 = sval1 + sval1                                                   # STEP 16
ACTION: sval6 = sval1 + sval1 
sval1 = 'w' : <type 'str'>
sval6 = None : <type 'NoneType'>
=> sval6 = 'ww' : <type 'str'>
==================================================
result = dict0.peekitem()                                               # STEP 17
ACTION: result = dict0.peekitem() 
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF0 = {} : <type 'dict'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: result_REF = sortDictPeekitem(dict_REF0,) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
==================================================
result = sorted(list(dict0.keys()))                                     # STEP 18
ACTION: result = sorted(list(dict0.keys())) 
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = sorted(list(dict_REF0.keys())) 
==================================================
set3 = set1 - set1                                                      # STEP 19
ACTION: set3 = set1 - set1 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set3 = None : <type 'NoneType'>
set_REF1 = set([]) : <type 'set'>
set_REF3 = None : <type 'NoneType'>
=> set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF3 = set_REF1 - set_REF1 
=> set_REF3 = set([]) : <type 'set'>
==================================================
dict4 = sortedcontainers.SortedDict()                                   # STEP 20
ACTION: dict4 = sortedcontainers.SortedDict() 
dict4 = None : <type 'NoneType'>
dict_REF4 = None : <type 'NoneType'>
=> dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF4 = {} 
=> dict_REF4 = {} : <type 'dict'>
==================================================
set0 = sortedcontainers.SortedSet()                                     # STEP 21
ACTION: set0 = sortedcontainers.SortedSet() 
set0 = None : <type 'NoneType'>
set_REF0 = None : <type 'NoneType'>
=> set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF0 = set([]) 
=> set_REF0 = set([]) : <type 'set'>
==================================================
result = len(dict3.keys())                                              # STEP 22
ACTION: result = len(dict3.keys())  
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF3.keys())  
==================================================
set1 = set4.union(set3)                                                 # STEP 23
ACTION: set1 = set4.union(set3) 
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF4 = set([]) : <type 'set'>
set_REF3 = set([]) : <type 'set'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1 = set_REF4.union(set_REF3) 
==================================================
set4 = set2.union(set0)                                                 # STEP 24
ACTION: set4 = set2.union(set0) 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF2 = set([]) : <type 'set'>
set_REF0 = set([]) : <type 'set'>
set_REF4 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF4 = set_REF2.union(set_REF0) 
==================================================
result = len(dict3.values())                                            # STEP 25
ACTION: result = len(dict3.values())  
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF3.values())  
==================================================
result = len(dict3.keys())                                              # STEP 26
ACTION: result = len(dict3.keys())  
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF3.keys())  
==================================================
result = dict4.peekitem()                                               # STEP 27
ACTION: result = dict4.peekitem() 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF4 = {} : <type 'dict'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: result_REF = sortDictPeekitem(dict_REF4,) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
==================================================
dict4.update(dict3)                                                     # STEP 28
ACTION: dict4.update(dict3) 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF4 = {} : <type 'dict'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF4.update(dict_REF3) 
==================================================
result = set2.isdisjoint(set1)                                          # STEP 29
ACTION: result = set2.isdisjoint(set1) 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF2 = set([]) : <type 'set'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = set_REF2.isdisjoint(set_REF1) 
==================================================
list4.extend(list4)                                                     # STEP 30
ACTION: list4.extend(list4) 
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = [] : <type 'list'>
REFERENCE ACTION: sortListExtend(list_REF4,list_REF4) 
==================================================
set2 = set4 ^ set2                                                      # STEP 31
ACTION: set2 = set4 ^ set2 
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF4 = set([]) : <type 'set'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF2 = set_REF4 ^ set_REF2 
==================================================
repr(dict0)                                                             # STEP 32
ACTION: repr(dict0) 
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: repr(dict_REF0) 
==================================================
list4 >= list4                                                          # STEP 33
ACTION: list4 >= list4 
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = [] : <type 'list'>
REFERENCE ACTION: list_REF4 >= list_REF4 
==================================================
set4 |= set4                                                            # STEP 34
ACTION: set4 |= set4 
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF4 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF4 |= set_REF4 
==================================================
set0 = set0.union(set2)                                                 # STEP 35
ACTION: set0 = set0.union(set2) 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF0 = set_REF0.union(set_REF2) 
==================================================
result = len(dict3.keys())                                              # STEP 36
ACTION: result = len(dict3.keys())  
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF3.keys())  
==================================================
set2.clear()                                                            # STEP 37
ACTION: set2.clear() 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF2.clear() 
==================================================
dict0 = sortedcontainers.SortedDict()                                   # STEP 38
ACTION: dict0 = sortedcontainers.SortedDict() 
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF0 = {} 
==================================================
dict1 = sortedcontainers.SortedDict()                                   # STEP 39
ACTION: dict1 = sortedcontainers.SortedDict() 
dict1 = None : <type 'NoneType'>
dict_REF1 = None : <type 'NoneType'>
=> dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF1 = {} 
=> dict_REF1 = {} : <type 'dict'>
==================================================
list4 >= list4                                                          # STEP 40
ACTION: list4 >= list4 
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = [] : <type 'list'>
REFERENCE ACTION: list_REF4 >= list_REF4 
==================================================
set2.islice(start=None,stop=None)                                       # STEP 41
ACTION: set2.islice(start=None,stop=None) 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF2.islice(start=None,stop=None) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'islice'
==================================================
set1 = set0 - set1                                                      # STEP 42
ACTION: set1 = set0 - set1 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1 = set_REF0 - set_REF1 
==================================================
result = dict3.peekitem()                                               # STEP 43
ACTION: result = dict3.peekitem() 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: result_REF = sortDictPeekitem(dict_REF3,) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
==================================================
list2 = sortedcontainers.SortedList()                                   # STEP 44
ACTION: list2 = sortedcontainers.SortedList() 
list2 = None : <type 'NoneType'>
list_REF2 = None : <type 'NoneType'>
=> list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: list_REF2 = [] 
=> list_REF2 = [] : <type 'list'>
==================================================
set2 = set0 - set1                                                      # STEP 45
ACTION: set2 = set0 - set1 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
set_REF1 = set([]) : <type 'set'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF2 = set_REF0 - set_REF1 
==================================================
list3 = sortedcontainers.SortedList()                                   # STEP 46
ACTION: list3 = sortedcontainers.SortedList() 
list3 = None : <type 'NoneType'>
list_REF3 = None : <type 'NoneType'>
=> list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: list_REF3 = [] 
=> list_REF3 = [] : <type 'list'>
==================================================
result = len(dict4.keys())                                              # STEP 47
ACTION: result = len(dict4.keys())  
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF4.keys())  
==================================================
set0 = set1.union(set2)                                                 # STEP 48
ACTION: set0 = set1.union(set2) 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF1 = set([]) : <type 'set'>
set_REF2 = set([]) : <type 'set'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF0 = set_REF1.union(set_REF2) 
==================================================
dict3.update(dict4)                                                     # STEP 49
ACTION: dict3.update(dict4) 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF3.update(dict_REF4) 
==================================================
set2.islice(start=None,stop=None)                                       # STEP 50
ACTION: set2.islice(start=None,stop=None) 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF2.islice(start=None,stop=None) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'islice'
==================================================
sval4 = 'w'                                                             # STEP 51
ACTION: sval4 = 'w' 
sval4 = 'ww' : <type 'str'>
=> sval4 = 'w' : <type 'str'>
==================================================
set4 = set1 - set1                                                      # STEP 52
ACTION: set4 = set1 - set1 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF1 = set([]) : <type 'set'>
set_REF4 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF4 = set_REF1 - set_REF1 
==================================================
set2 = set3.union(set1)                                                 # STEP 53
ACTION: set2 = set3.union(set1) 
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF3 = set([]) : <type 'set'>
set_REF1 = set([]) : <type 'set'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF2 = set_REF3.union(set_REF1) 
==================================================
iter(set3)                                                              # STEP 54
ACTION: iter(set3) 
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: iter(set_REF3) 
==================================================
sval8 = 'a'                                                             # STEP 55
ACTION: sval8 = 'a' 
sval8 = None : <type 'NoneType'>
=> sval8 = 'a' : <type 'str'>
==================================================
set4.islice(start=None,stop=None)                                       # STEP 56
ACTION: set4.islice(start=None,stop=None) 
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF4 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF4.islice(start=None,stop=None) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'islice'
==================================================
result = dict3 == dict1                                                 # STEP 57
ACTION: result = dict3 == dict1 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = dict_REF3 == dict_REF1 
==================================================
result = len(dict4.keys())                                              # STEP 58
ACTION: result = len(dict4.keys())  
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF4.keys())  
==================================================
list2.update(set4)                                                      # STEP 59
ACTION: list2.update(set4) 
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
list_REF2 = [] : <type 'list'>
set_REF4 = set([]) : <type 'set'>
REFERENCE ACTION: sortListMultiAdd(list_REF2,set_REF4) 
==================================================
set4 = set1.union(set0)                                                 # STEP 60
ACTION: set4 = set1.union(set0) 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF1 = set([]) : <type 'set'>
set_REF0 = set([]) : <type 'set'>
set_REF4 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF4 = set_REF1.union(set_REF0) 
==================================================
list4.extend(list3)                                                     # STEP 61
ACTION: list4.extend(list3) 
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = [] : <type 'list'>
list_REF3 = [] : <type 'list'>
REFERENCE ACTION: sortListExtend(list_REF4,list_REF3) 
==================================================
ival3 = 3                                                               # STEP 62
ACTION: ival3 = 3 
ival3 = None : <type 'NoneType'>
=> ival3 = 3 : <type 'int'>
==================================================
list3.update(set4)                                                      # STEP 63
ACTION: list3.update(set4) 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
list_REF3 = [] : <type 'list'>
set_REF4 = set([]) : <type 'set'>
REFERENCE ACTION: sortListMultiAdd(list_REF3,set_REF4) 
==================================================
result = sorted(list(dict1.keys()))                                     # STEP 64
ACTION: result = sorted(list(dict1.keys())) 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = sorted(list(dict_REF1.keys())) 
==================================================
sval7 = 'q'                                                             # STEP 65
ACTION: sval7 = 'q' 
sval7 = None : <type 'NoneType'>
=> sval7 = 'q' : <type 'str'>
==================================================
result = sorted(list(dict4.keys()))                                     # STEP 66
ACTION: result = sorted(list(dict4.keys())) 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = sorted(list(dict_REF4.keys())) 
==================================================
result = dict1.peekitem(ival3)                                          # STEP 67
ACTION: result = dict1.peekitem(ival3) 
ival3 = 3 : <type 'int'>
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {} : <type 'dict'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: result_REF = sortDictPeekitem(dict_REF1,ival3) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
==================================================
list2.extend(list4)                                                     # STEP 68
ACTION: list2.extend(list4) 
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF2 = [] : <type 'list'>
list_REF4 = [] : <type 'list'>
REFERENCE ACTION: sortListExtend(list_REF2,list_REF4) 
==================================================
set4 = sortedcontainers.SortedSet()                                     # STEP 69
ACTION: set4 = sortedcontainers.SortedSet() 
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF4 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF4 = set([]) 
==================================================
result = dict3.peekitem(ival3)                                          # STEP 70
ACTION: result = dict3.peekitem(ival3) 
ival3 = 3 : <type 'int'>
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: result_REF = sortDictPeekitem(dict_REF3,ival3) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
==================================================
val4 = sval6                                                            # STEP 71
ACTION: val4 = sval6 
sval6 = 'ww' : <type 'str'>
val4 = None : <type 'NoneType'>
=> val4 = 'ww' : <type 'str'>
==================================================
dict3 = sortedcontainers.SortedDict()                                   # STEP 72
ACTION: dict3 = sortedcontainers.SortedDict() 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF3 = {} 
==================================================
list4.irange(minimum=val4,maximum=val4,inclusive=(True,False),reverse=True)  # STEP 73
ACTION: list4.irange(minimum=val4,maximum=val4,inclusive=(True,False),reverse=True) 
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val4 = 'ww' : <type 'str'>
list_REF4 = [] : <type 'list'>
REFERENCE ACTION: list_REF4.irange(minimum=val4,maximum=val4,inclusive=(True,False),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
val8 = ival3                                                            # STEP 74
ACTION: val8 = ival3 
ival3 = 3 : <type 'int'>
val8 = None : <type 'NoneType'>
=> val8 = 3 : <type 'int'>
==================================================
result = len(dict4.keys())                                              # STEP 75
ACTION: result = len(dict4.keys())  
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF4.keys())  
==================================================
ival3 = ival3 * ival3                                                   # STEP 76
ACTION: ival3 = ival3 * ival3 
ival3 = 3 : <type 'int'>
=> ival3 = 9 : <type 'int'>
==================================================
result = dict1 == dict1                                                 # STEP 77
ACTION: result = dict1 == dict1 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = dict_REF1 == dict_REF1 
==================================================
dict3.get(val4,val4)                                                    # STEP 78
ACTION: dict3.get(val4,val4) 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val4 = 'ww' : <type 'str'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF3.get(val4,val4) 
==================================================
result = len(dict1.keys())                                              # STEP 79
ACTION: result = len(dict1.keys())  
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF1.keys())  
==================================================
dict2 = dict4.fromkeys(set3,val8) ; result = dict2                      # STEP 80
ACTION: dict2 = dict4.fromkeys(set3,val8) ; result = dict2 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict2 = None : <type 'NoneType'>
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
val8 = 3 : <type 'int'>
dict_REF4 = {} : <type 'dict'>
dict_REF2 = None : <type 'NoneType'>
set_REF3 = set([]) : <type 'set'>
=> dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF2 = dict_REF4.fromkeys(set_REF3,val8) ; result_REF = dict_REF2 
=> dict_REF2 = {} : <type 'dict'>
==================================================
set0 &= set2                                                            # STEP 81
ACTION: set0 &= set2 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF0 &= set_REF2 
==================================================
list4.insert(ival3,val4)                                                # STEP 82
ACTION: list4.insert(ival3,val4) 
ival3 = 9 : <type 'int'>
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val4 = 'ww' : <type 'str'>
list_REF4 = [] : <type 'list'>
=> list4 = SortedList(['ww'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: sortListInsert(list_REF4,ival3,val4) 
=> list_REF4 = ['ww'] : <type 'list'>
==================================================
dict2.get(val8,val8)                                                    # STEP 83
ACTION: dict2.get(val8,val8) 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val8 = 3 : <type 'int'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF2.get(val8,val8) 
==================================================
list4.add(val8)                                                         # STEP 84
ACTION: list4.add(val8) 
list4 = SortedList(['ww'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val8 = 3 : <type 'int'>
list_REF4 = ['ww'] : <type 'list'>
=> list4 = SortedList([3, 'ww'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: sortListAdd(list_REF4,val8) 
=> list_REF4 = [3, 'ww'] : <type 'list'>
==================================================
result = dict3.peekitem()                                               # STEP 85
ACTION: result = dict3.peekitem() 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: result_REF = sortDictPeekitem(dict_REF3,) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
==================================================
dict2 = dict1.fromkeys(list3,val4) ; result = dict2                     # STEP 86
ACTION: dict2 = dict1.fromkeys(list3,val4) ; result = dict2 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val4 = 'ww' : <type 'str'>
list_REF3 = [] : <type 'list'>
dict_REF1 = {} : <type 'dict'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF2 = dict_REF1.fromkeys(list_REF3,val4) ; result_REF = dict_REF2 
==================================================
set3.islice(start=ival3,stop=ival3)                                     # STEP 87
ACTION: set3.islice(start=ival3,stop=ival3) 
ival3 = 9 : <type 'int'>
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF3.islice(start=ival3,stop=ival3) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'islice'
==================================================
sval5 = sval9 + sval1                                                   # STEP 88
ACTION: sval5 = sval9 + sval1 
sval9 = 'wwww' : <type 'str'>
sval1 = 'w' : <type 'str'>
sval5 = None : <type 'NoneType'>
=> sval5 = 'wwwww' : <type 'str'>
==================================================
list4.extend(list2)                                                     # STEP 89
ACTION: list4.extend(list2) 
list4 = SortedList([3, 'ww'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = [3, 'ww'] : <type 'list'>
list_REF2 = [] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x120ee6cf8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 703286, in act11972
    self.p_list[4].extend(self.p_list[2])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 7
STOPPING TESTING DUE TO TIMEOUT
23.1872818922 PERCENT COVERED
60.2306158543 TOTAL RUNTIME
31 EXECUTED
2957 TOTAL TEST OPERATIONS
1.7088572979 TIME SPENT EXECUTING TEST OPERATIONS
55.1200156212 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
1.48185658455 TIME SPENT CHECKING PROPERTIES
3.19071388245 TOTAL TIME SPENT RUNNING SUT
0.476184368134 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
2 FAILED
0 REPEATS OF FAILURES
2 ACTUAL DISTINCT FAILURES

FAILURE 0
dict0 = sortedcontainers.SortedDict()                                    # STEP 0
ival7 = 7                                                                # STEP 1
list1 = sortedcontainers.SortedList()                                    # STEP 2
list1.extend(list1)                                                      # STEP 3
set0 = sortedcontainers.SortedSet()                                      # STEP 4
list1 < list1                                                            # STEP 5
sval4 = 'W'                                                              # STEP 6
list1.extend(list1)                                                      # STEP 7
result = len(dict0)                                                      # STEP 8
ival6 = ival7 + ival7                                                    # STEP 9
set0 &= set0                                                            # STEP 10
plist0 = list1 [ival7 : ival7]                                          # STEP 11
ival2 = ival7 + ival7                                                   # STEP 12
list1.extend(list1)                                                     # STEP 13
ival8 = 14                                                              # STEP 14
result = list1.pop(ival8)                                               # STEP 15
sval7 = 'M'                                                             # STEP 16
ival4 = ival7 + ival7                                                   # STEP 17
list4 = sortedcontainers.SortedList(plist0)                             # STEP 18
val6 = sval7                                                            # STEP 19
setList(list4,ival6,val6)                                               # STEP 20
list4.irange(minimum=val6,maximum=val6,inclusive=(False,True))          # STEP 21
result = dict0 == dict0                                                 # STEP 22
result = (dict0.keys()).count(val6)                                     # STEP 23
set0 &= set0                                                            # STEP 24
val7 = sval4                                                            # STEP 25
list1.islice(start=None,stop=None)                                      # STEP 26
set1 = set0 ^ set0                                                      # STEP 27
list4.irange(minimum=val6,maximum=val6,inclusive=(True,False),reverse=True)  # STEP 28
result = dict0 == dict0                                                 # STEP 29
list1.islice(start=None,stop=ival4)                                     # STEP 30
result = list4.pop(ival2)                                               # STEP 31
set1.islice(start=ival8,stop=ival6,reverse=True)                        # STEP 32
result = dict0.peekitem(ival2)                                          # STEP 33
list4.irange(minimum=val7,maximum=val7,inclusive=(False,True))          # STEP 34
list4.irange(minimum=val7,maximum=val7,inclusive=(False,True))          # STEP 35
result = dict0.peekitem(ival4)                                          # STEP 36
ival6 = ival4 + ival7                                                   # STEP 37
set1.update(set0)                                                       # STEP 38
list4.irange(minimum=val7,maximum=val6,inclusive=(False,False))         # STEP 39
ival1 = 13                                                              # STEP 40
result = list4.index(val6)                                              # STEP 41
sval4 = 'H'                                                             # STEP 42
list1.insert(ival1,val6)                                                # STEP 43
dict0.islice(start=None,stop=ival7)                                     # STEP 44
dict1 = sortedcontainers.SortedDict()                                   # STEP 45
dict0.irange(minimum=val6,maximum=val6,inclusive=(False,False))         # STEP 46
val2 = sval7                                                            # STEP 47
dict1.islice(start=ival8,stop=ival7,reverse=True)                       # STEP 48
result = dict0.peekitem()                                               # STEP 49
list4.irange(minimum=val7,maximum=val6,inclusive=(True,False),reverse=True)  # STEP 50
val8 = sval4                                                            # STEP 51
repr(dict1)                                                             # STEP 52
list1.insert(ival6,val8)                                                # STEP 53
set1 &= set1                                                            # STEP 54
set2 = sortedcontainers.SortedSet()                                     # STEP 55
del list1 [ival2]                                                       # STEP 56
set3 = sortedcontainers.SortedSet()                                     # STEP 57
list0 = sortedcontainers.SortedList(plist0)                             # STEP 58
list1.extend(list0)                                                     # STEP 59
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x11fe57d88>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 702288, in act11955
    self.p_list[1].extend(self.p_list[0])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
FAILURE 1
sval1 = 'w'                                                              # STEP 0
sval4 = sval1 + sval1                                                    # STEP 1
sval9 = sval4 + sval4                                                    # STEP 2
list4 = sortedcontainers.SortedList()                                    # STEP 3
dict3 = sortedcontainers.SortedDict()                                    # STEP 4
result = dict3 == dict3                                                  # STEP 5
dict0 = sortedcontainers.SortedDict()                                    # STEP 6
sval3 = 'z'                                                              # STEP 7
result = len(dict0.keys())                                               # STEP 8
set1 = sortedcontainers.SortedSet()                                      # STEP 9
set1 &= set1                                                            # STEP 10
list4.islice(start=None,stop=None)                                      # STEP 11
set2 = set1.union(set1)                                                 # STEP 12
set1 |= set1                                                            # STEP 13
repr(dict3)                                                             # STEP 14
set4 = set1.union(set1)                                                 # STEP 15
sval6 = sval1 + sval1                                                   # STEP 16
result = dict0.peekitem()                                               # STEP 17
result = sorted(list(dict0.keys()))                                     # STEP 18
set3 = set1 - set1                                                      # STEP 19
dict4 = sortedcontainers.SortedDict()                                   # STEP 20
set0 = sortedcontainers.SortedSet()                                     # STEP 21
result = len(dict3.keys())                                              # STEP 22
set1 = set4.union(set3)                                                 # STEP 23
set4 = set2.union(set0)                                                 # STEP 24
result = len(dict3.values())                                            # STEP 25
result = len(dict3.keys())                                              # STEP 26
result = dict4.peekitem()                                               # STEP 27
dict4.update(dict3)                                                     # STEP 28
result = set2.isdisjoint(set1)                                          # STEP 29
list4.extend(list4)                                                     # STEP 30
set2 = set4 ^ set2                                                      # STEP 31
repr(dict0)                                                             # STEP 32
list4 >= list4                                                          # STEP 33
set4 |= set4                                                            # STEP 34
set0 = set0.union(set2)                                                 # STEP 35
result = len(dict3.keys())                                              # STEP 36
set2.clear()                                                            # STEP 37
dict0 = sortedcontainers.SortedDict()                                   # STEP 38
dict1 = sortedcontainers.SortedDict()                                   # STEP 39
list4 >= list4                                                          # STEP 40
set2.islice(start=None,stop=None)                                       # STEP 41
set1 = set0 - set1                                                      # STEP 42
result = dict3.peekitem()                                               # STEP 43
list2 = sortedcontainers.SortedList()                                   # STEP 44
set2 = set0 - set1                                                      # STEP 45
list3 = sortedcontainers.SortedList()                                   # STEP 46
result = len(dict4.keys())                                              # STEP 47
set0 = set1.union(set2)                                                 # STEP 48
dict3.update(dict4)                                                     # STEP 49
set2.islice(start=None,stop=None)                                       # STEP 50
sval4 = 'w'                                                             # STEP 51
set4 = set1 - set1                                                      # STEP 52
set2 = set3.union(set1)                                                 # STEP 53
iter(set3)                                                              # STEP 54
sval8 = 'a'                                                             # STEP 55
set4.islice(start=None,stop=None)                                       # STEP 56
result = dict3 == dict1                                                 # STEP 57
result = len(dict4.keys())                                              # STEP 58
list2.update(set4)                                                      # STEP 59
set4 = set1.union(set0)                                                 # STEP 60
list4.extend(list3)                                                     # STEP 61
ival3 = 3                                                               # STEP 62
list3.update(set4)                                                      # STEP 63
result = sorted(list(dict1.keys()))                                     # STEP 64
sval7 = 'q'                                                             # STEP 65
result = sorted(list(dict4.keys()))                                     # STEP 66
result = dict1.peekitem(ival3)                                          # STEP 67
list2.extend(list4)                                                     # STEP 68
set4 = sortedcontainers.SortedSet()                                     # STEP 69
result = dict3.peekitem(ival3)                                          # STEP 70
val4 = sval6                                                            # STEP 71
dict3 = sortedcontainers.SortedDict()                                   # STEP 72
list4.irange(minimum=val4,maximum=val4,inclusive=(True,False),reverse=True)  # STEP 73
val8 = ival3                                                            # STEP 74
result = len(dict4.keys())                                              # STEP 75
ival3 = ival3 * ival3                                                   # STEP 76
result = dict1 == dict1                                                 # STEP 77
dict3.get(val4,val4)                                                    # STEP 78
result = len(dict1.keys())                                              # STEP 79
dict2 = dict4.fromkeys(set3,val8) ; result = dict2                      # STEP 80
set0 &= set2                                                            # STEP 81
list4.insert(ival3,val4)                                                # STEP 82
dict2.get(val8,val8)                                                    # STEP 83
list4.add(val8)                                                         # STEP 84
result = dict3.peekitem()                                               # STEP 85
dict2 = dict1.fromkeys(list3,val4) ; result = dict2                     # STEP 86
set3.islice(start=ival3,stop=ival3)                                     # STEP 87
sval5 = sval9 + sval1                                                   # STEP 88
list4.extend(list2)                                                     # STEP 89
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x120ee6cf8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 703286, in act11972
    self.p_list[4].extend(self.p_list[2])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
580 BRANCHES COVERED
444 STATEMENTS COVERED

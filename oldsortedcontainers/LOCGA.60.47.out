Random testing using config=Config(noExceptionMatch=False, generalize=False, localize=False, speed='FAST', probs='locsample.probs', LOCBaseline=0.2, noAlphaConvert=False, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, html=None, keepLast=False, stopWhenNoCoverage=None, generateLOC=None, computeFeatureStats=False, Pmutate=0.8, timeout=60, output='failure.10451.test', markov=None, noSwarmDependencies=False, startExploit=0.0, maxMustHitBranch=None, useHints=False, silentFail=False, highLowSwarm=None, maxMustHitStatement=None, progress=False, postCover=False, swarmLength=None, noCover=False, noEnumerateEnabled=False, full=True, swarmP=0.5, coverFile='coverage.out', markovP=1.0, swarmProbs=None, genDepth=None, exploitCeiling=0.1, logging=None, noCheck=False, throughput=False, uncaught=False, swarmSwitch=None, verbose=False, reducePool=False, exploit=0.8, fastQuickAnalysis=False, total=False, verboseExploit=False, swarm=False, sequenceP=1.0, biasLOC=None, timedProgress=30, relax=False, ddmin=False, stutter=None, readQuick=False, verboseActions=False, quickAnalysis=False, noReassign=False, sequenceSize=3, LOCProbs=False, sequencesFromTests=None, maxTests=-1, trackMaxCoverage=None, useQuickSequences=False, exploitBestHint=1, failedLogging=None, stopWhenStatements=None, greedyStutter=False, seed=None, stopWhenHitStatement=None, uniqueValuesAnalysis=False, normalize=False, startExploitStall=0, enumerateEnabled=False, internal=False, profile=False, multiple=True, stopWhenBranches=None, running=False, compareFails=False, Pcrossover=0.2, stopWhenHitBranch=None, depth=100, showActions=False)
** STARTING EXPLOITATION OF TESTS AT TIME 0.649011850357 AFTER 0 TESTS WITH NO NEW COVERAGE **
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x11f246518>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 702641, in act11961
    self.p_list[2].extend(self.p_list[1])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
Original test has 95 steps

SAVING TEST AS failure.10451.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
ival6 = 11                                                               # STEP 0
ACTION: ival6 = 11 
ival6 = None : <type 'NoneType'>
=> ival6 = 11 : <type 'int'>
==================================================
ival1 = 19                                                               # STEP 1
ACTION: ival1 = 19 
ival1 = None : <type 'NoneType'>
=> ival1 = 19 : <type 'int'>
==================================================
sval7 = 'f'                                                              # STEP 2
ACTION: sval7 = 'f' 
sval7 = None : <type 'NoneType'>
=> sval7 = 'f' : <type 'str'>
==================================================
sval4 = sval7 + sval7                                                    # STEP 3
ACTION: sval4 = sval7 + sval7 
sval7 = 'f' : <type 'str'>
sval4 = None : <type 'NoneType'>
=> sval4 = 'ff' : <type 'str'>
==================================================
ival2 = ival1 * ival1                                                    # STEP 4
ACTION: ival2 = ival1 * ival1 
ival1 = 19 : <type 'int'>
ival2 = None : <type 'NoneType'>
=> ival2 = 361 : <type 'int'>
==================================================
ival1 = ival2 - ival1                                                    # STEP 5
ACTION: ival1 = ival2 - ival1 
ival2 = 361 : <type 'int'>
ival1 = 19 : <type 'int'>
=> ival1 = 342 : <type 'int'>
==================================================
val0 = ival2                                                             # STEP 6
ACTION: val0 = ival2 
ival2 = 361 : <type 'int'>
val0 = None : <type 'NoneType'>
=> val0 = 361 : <type 'int'>
==================================================
val8 = ival6                                                             # STEP 7
ACTION: val8 = ival6 
ival6 = 11 : <type 'int'>
val8 = None : <type 'NoneType'>
=> val8 = 11 : <type 'int'>
==================================================
sval6 = 'W'                                                              # STEP 8
ACTION: sval6 = 'W' 
sval6 = None : <type 'NoneType'>
=> sval6 = 'W' : <type 'str'>
==================================================
ival6 = ival6 * ival2                                                    # STEP 9
ACTION: ival6 = ival6 * ival2 
ival6 = 11 : <type 'int'>
ival2 = 361 : <type 'int'>
=> ival6 = 3971 : <type 'int'>
==================================================
ival0 = 3                                                               # STEP 10
ACTION: ival0 = 3 
ival0 = None : <type 'NoneType'>
=> ival0 = 3 : <type 'int'>
==================================================
val2 = ival6                                                            # STEP 11
ACTION: val2 = ival6 
ival6 = 3971 : <type 'int'>
val2 = None : <type 'NoneType'>
=> val2 = 3971 : <type 'int'>
==================================================
sval2 = 'S'                                                             # STEP 12
ACTION: sval2 = 'S' 
sval2 = None : <type 'NoneType'>
=> sval2 = 'S' : <type 'str'>
==================================================
val7 = sval6                                                            # STEP 13
ACTION: val7 = sval6 
sval6 = 'W' : <type 'str'>
val7 = None : <type 'NoneType'>
=> val7 = 'W' : <type 'str'>
==================================================
sval0 = 'l'                                                             # STEP 14
ACTION: sval0 = 'l' 
sval0 = None : <type 'NoneType'>
=> sval0 = 'l' : <type 'str'>
==================================================
dict4 = sortedcontainers.SortedDict()                                   # STEP 15
ACTION: dict4 = sortedcontainers.SortedDict() 
dict4 = None : <type 'NoneType'>
dict_REF4 = None : <type 'NoneType'>
=> dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF4 = {} 
=> dict_REF4 = {} : <type 'dict'>
==================================================
dict4.get(val8,val2)                                                    # STEP 16
ACTION: dict4.get(val8,val2) 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val8 = 11 : <type 'int'>
val2 = 3971 : <type 'int'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF4.get(val8,val2) 
==================================================
result = dict4.setdefault(val8,val7)                                    # STEP 17
ACTION: result = dict4.setdefault(val8,val7) 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val8 = 11 : <type 'int'>
val7 = 'W' : <type 'str'>
dict_REF4 = {} : <type 'dict'>
=> dict4 = SortedDict(None, 1000, {11: 'W'}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: result_REF = dict_REF4.setdefault(val8,val7) 
=> dict_REF4 = {11: 'W'} : <type 'dict'>
==================================================
dict4.islice(start=ival0,stop=ival6)                                    # STEP 18
ACTION: dict4.islice(start=ival0,stop=ival6) 
ival0 = 3 : <type 'int'>
ival6 = 3971 : <type 'int'>
dict4 = SortedDict(None, 1000, {11: 'W'}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF4 = {11: 'W'} : <type 'dict'>
REFERENCE ACTION: dict_REF4.islice(start=ival0,stop=ival6) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'islice'
==================================================
dict4.get(val0,None)                                                    # STEP 19
ACTION: dict4.get(val0,None) 
dict4 = SortedDict(None, 1000, {11: 'W'}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val0 = 361 : <type 'int'>
dict_REF4 = {11: 'W'} : <type 'dict'>
REFERENCE ACTION: dict_REF4.get(val0,None) 
==================================================
ival7 = ival2 * ival0                                                   # STEP 20
ACTION: ival7 = ival2 * ival0 
ival2 = 361 : <type 'int'>
ival0 = 3 : <type 'int'>
ival7 = None : <type 'NoneType'>
=> ival7 = 1083 : <type 'int'>
==================================================
result = len(dict4.values())                                            # STEP 21
ACTION: result = len(dict4.values())  
dict4 = SortedDict(None, 1000, {11: 'W'}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF4 = {11: 'W'} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF4.values())  
==================================================
ival6 = ival2 - ival1                                                   # STEP 22
ACTION: ival6 = ival2 - ival1 
ival2 = 361 : <type 'int'>
ival1 = 342 : <type 'int'>
ival6 = 3971 : <type 'int'>
=> ival6 = 19 : <type 'int'>
==================================================
result = dict4.peekitem(ival2)                                          # STEP 23
ACTION: result = dict4.peekitem(ival2) 
ival2 = 361 : <type 'int'>
dict4 = SortedDict(None, 1000, {11: 'W'}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF4 = {11: 'W'} : <type 'dict'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: result_REF = sortDictPeekitem(dict_REF4,ival2) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
==================================================
result = dict4 == dict4                                                 # STEP 24
ACTION: result = dict4 == dict4 
dict4 = SortedDict(None, 1000, {11: 'W'}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF4 = {11: 'W'} : <type 'dict'>
REFERENCE ACTION: result_REF = dict_REF4 == dict_REF4 
==================================================
result = len(dict4)                                                     # STEP 25
ACTION: result = len(dict4) 
dict4 = SortedDict(None, 1000, {11: 'W'}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF4 = {11: 'W'} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF4) 
==================================================
result = dict4 == dict4                                                 # STEP 26
ACTION: result = dict4 == dict4 
dict4 = SortedDict(None, 1000, {11: 'W'}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF4 = {11: 'W'} : <type 'dict'>
REFERENCE ACTION: result_REF = dict_REF4 == dict_REF4 
==================================================
sval6 = 'X'                                                             # STEP 27
ACTION: sval6 = 'X' 
sval6 = 'W' : <type 'str'>
=> sval6 = 'X' : <type 'str'>
==================================================
sval7 = sval0 + sval6                                                   # STEP 28
ACTION: sval7 = sval0 + sval6 
sval0 = 'l' : <type 'str'>
sval6 = 'X' : <type 'str'>
sval7 = 'f' : <type 'str'>
=> sval7 = 'lX' : <type 'str'>
==================================================
dict4.irange(minimum=val0,maximum=val8,inclusive=(True,False))          # STEP 29
ACTION: dict4.irange(minimum=val0,maximum=val8,inclusive=(True,False)) 
dict4 = SortedDict(None, 1000, {11: 'W'}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val0 = 361 : <type 'int'>
val8 = 11 : <type 'int'>
dict_REF4 = {11: 'W'} : <type 'dict'>
REFERENCE ACTION: dict_REF4.irange(minimum=val0,maximum=val8,inclusive=(True,False)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'irange'
==================================================
sval6 = 'C'                                                             # STEP 30
ACTION: sval6 = 'C' 
sval6 = 'X' : <type 'str'>
=> sval6 = 'C' : <type 'str'>
==================================================
dict4.irange(minimum=val7,maximum=val8,inclusive=(True,False))          # STEP 31
ACTION: dict4.irange(minimum=val7,maximum=val8,inclusive=(True,False)) 
dict4 = SortedDict(None, 1000, {11: 'W'}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val7 = 'W' : <type 'str'>
val8 = 11 : <type 'int'>
dict_REF4 = {11: 'W'} : <type 'dict'>
REFERENCE ACTION: dict_REF4.irange(minimum=val7,maximum=val8,inclusive=(True,False)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'irange'
==================================================
result = len(dict4.keys())                                              # STEP 32
ACTION: result = len(dict4.keys())  
dict4 = SortedDict(None, 1000, {11: 'W'}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF4 = {11: 'W'} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF4.keys())  
==================================================
result = dict4.popitem(last=False)                                      # STEP 33
ACTION: result = dict4.popitem(last=False) 
dict4 = SortedDict(None, 1000, {11: 'W'}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF4 = {11: 'W'} : <type 'dict'>
=> dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: result_REF = sortDictPopitem(dict_REF4,last=False) 
=> dict_REF4 = {} : <type 'dict'>
==================================================
dict4.update(dict4)                                                     # STEP 34
ACTION: dict4.update(dict4) 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF4.update(dict_REF4) 
==================================================
dict4.irange(minimum=val2,maximum=val0,inclusive=(True,False))          # STEP 35
ACTION: dict4.irange(minimum=val2,maximum=val0,inclusive=(True,False)) 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val2 = 3971 : <type 'int'>
val0 = 361 : <type 'int'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF4.irange(minimum=val2,maximum=val0,inclusive=(True,False)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'irange'
==================================================
sval5 = 'Y'                                                             # STEP 36
ACTION: sval5 = 'Y' 
sval5 = None : <type 'NoneType'>
=> sval5 = 'Y' : <type 'str'>
==================================================
ival2 = ival2 - ival7                                                   # STEP 37
ACTION: ival2 = ival2 - ival7 
ival2 = 361 : <type 'int'>
ival7 = 1083 : <type 'int'>
=> ival2 = -722 : <type 'int'>
==================================================
result = len(dict4.keys())                                              # STEP 38
ACTION: result = len(dict4.keys())  
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF4.keys())  
==================================================
dict3 = sortedcontainers.SortedDict()                                   # STEP 39
ACTION: dict3 = sortedcontainers.SortedDict() 
dict3 = None : <type 'NoneType'>
dict_REF3 = None : <type 'NoneType'>
=> dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF3 = {} 
=> dict_REF3 = {} : <type 'dict'>
==================================================
result = len(dict4.keys())                                              # STEP 40
ACTION: result = len(dict4.keys())  
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF4.keys())  
==================================================
val8 in dict4                                                           # STEP 41
ACTION: val8 in dict4 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val8 = 11 : <type 'int'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: val8 in dict_REF4 
==================================================
list2 = sortedcontainers.SortedList()                                   # STEP 42
ACTION: list2 = sortedcontainers.SortedList() 
list2 = None : <type 'NoneType'>
list_REF2 = None : <type 'NoneType'>
=> list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: list_REF2 = [] 
=> list_REF2 = [] : <type 'list'>
==================================================
result = (dict4.values()).count(val8)                                   # STEP 43
ACTION: result = (dict4.values()).count(val8)  
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val8 = 11 : <type 'int'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = (dict_REF4.values()).count(val8)  
==================================================
val5 = ival1                                                            # STEP 44
ACTION: val5 = ival1 
ival1 = 342 : <type 'int'>
val5 = None : <type 'NoneType'>
=> val5 = 342 : <type 'int'>
==================================================
dict1 = dict4.copy()                                                    # STEP 45
ACTION: dict1 = dict4.copy() 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict1 = None : <type 'NoneType'>
dict_REF4 = {} : <type 'dict'>
dict_REF1 = None : <type 'NoneType'>
=> dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF1 = dict_REF4.copy() 
=> dict_REF1 = {} : <type 'dict'>
==================================================
dict3.get(val2,None)                                                    # STEP 46
ACTION: dict3.get(val2,None) 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val2 = 3971 : <type 'int'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF3.get(val2,None) 
==================================================
setListSlice(list2,ival0,ival7,list2)                                   # STEP 47
ACTION: setListSlice(list2,ival0,ival7,list2) 
ival0 = 3 : <type 'int'>
ival7 = 1083 : <type 'int'>
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF2 = [] : <type 'list'>
REFERENCE ACTION: sortListSetSlice(list_REF2,ival0,ival7,list_REF2) 
==================================================
result = (dict3.values()).count(val0)                                   # STEP 48
ACTION: result = (dict3.values()).count(val0)  
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val0 = 361 : <type 'int'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = (dict_REF3.values()).count(val0)  
==================================================
sval3 = 'F'                                                             # STEP 49
ACTION: sval3 = 'F' 
sval3 = None : <type 'NoneType'>
=> sval3 = 'F' : <type 'str'>
==================================================
dict3.get(val7,None)                                                    # STEP 50
ACTION: dict3.get(val7,None) 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val7 = 'W' : <type 'str'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF3.get(val7,None) 
==================================================
dict1.get(val7,val7)                                                    # STEP 51
ACTION: dict1.get(val7,val7) 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val7 = 'W' : <type 'str'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF1.get(val7,val7) 
==================================================
dict3 = dict3.fromkeys(list2,val5) ; result = dict3                     # STEP 52
ACTION: dict3 = dict3.fromkeys(list2,val5) ; result = dict3 
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val5 = 342 : <type 'int'>
list_REF2 = [] : <type 'list'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF3 = dict_REF3.fromkeys(list_REF2,val5) ; result_REF = dict_REF3 
==================================================
result = (dict3.keys()).count(val7)                                     # STEP 53
ACTION: result = (dict3.keys()).count(val7)  
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val7 = 'W' : <type 'str'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = (dict_REF3.keys()).count(val7)  
==================================================
dict4.irange(minimum=val7,maximum=val0,inclusive=(False,True),reverse=True)  # STEP 54
ACTION: dict4.irange(minimum=val7,maximum=val0,inclusive=(False,True),reverse=True) 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val7 = 'W' : <type 'str'>
val0 = 361 : <type 'int'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF4.irange(minimum=val7,maximum=val0,inclusive=(False,True),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'irange'
==================================================
list2.add(val2)                                                         # STEP 55
ACTION: list2.add(val2) 
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val2 = 3971 : <type 'int'>
list_REF2 = [] : <type 'list'>
=> list2 = SortedList([3971], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: sortListAdd(list_REF2,val2) 
=> list_REF2 = [3971] : <type 'list'>
==================================================
sval0 = 'V'                                                             # STEP 56
ACTION: sval0 = 'V' 
sval0 = 'l' : <type 'str'>
=> sval0 = 'V' : <type 'str'>
==================================================
ival0 = ival0 * ival2                                                   # STEP 57
ACTION: ival0 = ival0 * ival2 
ival0 = 3 : <type 'int'>
ival2 = -722 : <type 'int'>
=> ival0 = -2166 : <type 'int'>
==================================================
setList(list2,ival2,val7)                                               # STEP 58
ACTION: setList(list2,ival2,val7) 
ival2 = -722 : <type 'int'>
list2 = SortedList([3971], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val7 = 'W' : <type 'str'>
list_REF2 = [3971] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: sortListSet(list_REF2,ival2,val7) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list assignment index out of range
==================================================
list2.irange(minimum=val8,maximum=val5,inclusive=(False,False),reverse=True)  # STEP 59
ACTION: list2.irange(minimum=val8,maximum=val5,inclusive=(False,False),reverse=True) 
list2 = SortedList([3971], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val8 = 11 : <type 'int'>
val5 = 342 : <type 'int'>
list_REF2 = [3971] : <type 'list'>
REFERENCE ACTION: list_REF2.irange(minimum=val8,maximum=val5,inclusive=(False,False),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
ival8 = ival7 - ival6                                                   # STEP 60
ACTION: ival8 = ival7 - ival6 
ival7 = 1083 : <type 'int'>
ival6 = 19 : <type 'int'>
ival8 = None : <type 'NoneType'>
=> ival8 = 1064 : <type 'int'>
==================================================
setListSlice(list2,ival6,ival7,list2)                                   # STEP 61
ACTION: setListSlice(list2,ival6,ival7,list2) 
ival6 = 19 : <type 'int'>
ival7 = 1083 : <type 'int'>
list2 = SortedList([3971], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF2 = [3971] : <type 'list'>
REFERENCE ACTION: sortListSetSlice(list_REF2,ival6,ival7,list_REF2) 
==================================================
sval1 = 'Y'                                                             # STEP 62
ACTION: sval1 = 'Y' 
sval1 = None : <type 'NoneType'>
=> sval1 = 'Y' : <type 'str'>
==================================================
dict1 = dict4.copy()                                                    # STEP 63
ACTION: dict1 = dict4.copy() 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF4 = {} : <type 'dict'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF1 = dict_REF4.copy() 
==================================================
list2 < list2                                                           # STEP 64
ACTION: list2 < list2 
list2 = SortedList([3971], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF2 = [3971] : <type 'list'>
REFERENCE ACTION: list_REF2 < list_REF2 
==================================================
ival3 = ival0 * ival2                                                   # STEP 65
ACTION: ival3 = ival0 * ival2 
ival0 = -2166 : <type 'int'>
ival2 = -722 : <type 'int'>
ival3 = None : <type 'NoneType'>
=> ival3 = 1563852 : <type 'int'>
==================================================
dict2 = dict3.copy()                                                    # STEP 66
ACTION: dict2 = dict3.copy() 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict2 = None : <type 'NoneType'>
dict_REF3 = {} : <type 'dict'>
dict_REF2 = None : <type 'NoneType'>
=> dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF2 = dict_REF3.copy() 
=> dict_REF2 = {} : <type 'dict'>
==================================================
del list2 [ival7]                                                       # STEP 67
ACTION: del list2 [ival7] 
ival7 = 1083 : <type 'int'>
list2 = SortedList([3971], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF2 = [3971] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: del list_REF2 [ival7] 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list assignment index out of range
==================================================
result = len(dict3.keys())                                              # STEP 68
ACTION: result = len(dict3.keys())  
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF3.keys())  
==================================================
setListSlice(list2,ival8,ival0,list2)                                   # STEP 69
ACTION: setListSlice(list2,ival8,ival0,list2) 
ival8 = 1064 : <type 'int'>
ival0 = -2166 : <type 'int'>
list2 = SortedList([3971], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF2 = [3971] : <type 'list'>
REFERENCE ACTION: sortListSetSlice(list_REF2,ival8,ival0,list_REF2) 
==================================================
dict3 = dict2.fromkeys(list2,val8) ; result = dict3                     # STEP 70
ACTION: dict3 = dict2.fromkeys(list2,val8) ; result = dict3 
list2 = SortedList([3971], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val8 = 11 : <type 'int'>
list_REF2 = [3971] : <type 'list'>
dict_REF2 = {} : <type 'dict'>
dict_REF3 = {} : <type 'dict'>
=> dict3 = SortedDict(None, 1000, {3971: 11}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF3 = dict_REF2.fromkeys(list_REF2,val8) ; result_REF = dict_REF3 
=> dict_REF3 = {3971: 11} : <type 'dict'>
==================================================
dict3.irange(minimum=val0,maximum=val8,inclusive=(False,True))          # STEP 71
ACTION: dict3.irange(minimum=val0,maximum=val8,inclusive=(False,True)) 
dict3 = SortedDict(None, 1000, {3971: 11}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val0 = 361 : <type 'int'>
val8 = 11 : <type 'int'>
dict_REF3 = {3971: 11} : <type 'dict'>
REFERENCE ACTION: dict_REF3.irange(minimum=val0,maximum=val8,inclusive=(False,True)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'irange'
==================================================
result = list2 != list2                                                 # STEP 72
ACTION: result = list2 != list2 
list2 = SortedList([3971], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF2 = [3971] : <type 'list'>
REFERENCE ACTION: result_REF = list_REF2 != list_REF2 
==================================================
result = dict3.pop(val5)                                                # STEP 73
ACTION: result = dict3.pop(val5) 
dict3 = SortedDict(None, 1000, {3971: 11}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val5 = 342 : <type 'int'>
dict_REF3 = {3971: 11} : <type 'dict'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.KeyError'> 342
REFERENCE ACTION: result_REF = dict_REF3.pop(val5) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.KeyError'> 342
==================================================
ival1 = ival7 * ival1                                                   # STEP 74
ACTION: ival1 = ival7 * ival1 
ival7 = 1083 : <type 'int'>
ival1 = 342 : <type 'int'>
=> ival1 = 370386 : <type 'int'>
==================================================
dict4.irange(minimum=val7,maximum=val0,inclusive=(False,False))         # STEP 75
ACTION: dict4.irange(minimum=val7,maximum=val0,inclusive=(False,False)) 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val7 = 'W' : <type 'str'>
val0 = 361 : <type 'int'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF4.irange(minimum=val7,maximum=val0,inclusive=(False,False)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'irange'
==================================================
list2 *= ival2                                                          # STEP 76
ACTION: list2 *= ival2 
ival2 = -722 : <type 'int'>
list2 = SortedList([3971], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF2 = [3971] : <type 'list'>
=> list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: sortListMultiply(list_REF2,ival2) 
=> list_REF2 = [] : <type 'list'>
==================================================
dict4 = sortedcontainers.SortedDict()                                   # STEP 77
ACTION: dict4 = sortedcontainers.SortedDict() 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF4 = {} 
==================================================
list2.insert(ival2,val2)                                                # STEP 78
ACTION: list2.insert(ival2,val2) 
ival2 = -722 : <type 'int'>
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val2 = 3971 : <type 'int'>
list_REF2 = [] : <type 'list'>
=> list2 = SortedList([3971], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: sortListInsert(list_REF2,ival2,val2) 
=> list_REF2 = [3971] : <type 'list'>
==================================================
list2 > list2                                                           # STEP 79
ACTION: list2 > list2 
list2 = SortedList([3971], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF2 = [3971] : <type 'list'>
REFERENCE ACTION: list_REF2 > list_REF2 
==================================================
result = dict1.popitem()                                                # STEP 80
ACTION: result = dict1.popitem() 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {} : <type 'dict'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.KeyError'> 'popitem(): dictionary is empty'
REFERENCE ACTION: result_REF = sortDictPopitem(dict_REF1,) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.KeyError'> 
==================================================
dict3 [val0]                                                            # STEP 81
ACTION: dict3 [val0] 
dict3 = SortedDict(None, 1000, {3971: 11}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val0 = 361 : <type 'int'>
dict_REF3 = {3971: 11} : <type 'dict'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.KeyError'> 361
REFERENCE ACTION: dict_REF3 [val0] 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.KeyError'> 361
==================================================
list1 = sortedcontainers.SortedList()                                   # STEP 82
ACTION: list1 = sortedcontainers.SortedList() 
list1 = None : <type 'NoneType'>
list_REF1 = None : <type 'NoneType'>
=> list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: list_REF1 = [] 
=> list_REF1 = [] : <type 'list'>
==================================================
result = list2.index(val7)                                              # STEP 83
ACTION: result = list2.index(val7) 
list2 = SortedList([3971], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val7 = 'W' : <type 'str'>
list_REF2 = [3971] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> 'W' is not in list
REFERENCE ACTION: result_REF = list_REF2.index(val7) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.ValueError'> 'W' is not in list
==================================================
list2.discard(val8)                                                     # STEP 84
ACTION: list2.discard(val8) 
list2 = SortedList([3971], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val8 = 11 : <type 'int'>
list_REF2 = [3971] : <type 'list'>
REFERENCE ACTION: sortListDiscard(list_REF2,val8) 
==================================================
dict3.irange(minimum=val0,maximum=val2,inclusive=(False,True),reverse=True)  # STEP 85
ACTION: dict3.irange(minimum=val0,maximum=val2,inclusive=(False,True),reverse=True) 
dict3 = SortedDict(None, 1000, {3971: 11}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val0 = 361 : <type 'int'>
val2 = 3971 : <type 'int'>
dict_REF3 = {3971: 11} : <type 'dict'>
REFERENCE ACTION: dict_REF3.irange(minimum=val0,maximum=val2,inclusive=(False,True),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'irange'
==================================================
list2 > list1                                                           # STEP 86
ACTION: list2 > list1 
list2 = SortedList([3971], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF2 = [3971] : <type 'list'>
list_REF1 = [] : <type 'list'>
REFERENCE ACTION: list_REF2 > list_REF1 
==================================================
dict2 [val5]                                                            # STEP 87
ACTION: dict2 [val5] 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val5 = 342 : <type 'int'>
dict_REF2 = {} : <type 'dict'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.KeyError'> 342
REFERENCE ACTION: dict_REF2 [val5] 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.KeyError'> 342
==================================================
result = len(dict1)                                                     # STEP 88
ACTION: result = len(dict1) 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF1) 
==================================================
dict4 [val0]                                                            # STEP 89
ACTION: dict4 [val0] 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val0 = 361 : <type 'int'>
dict_REF4 = {} : <type 'dict'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.KeyError'> 361
REFERENCE ACTION: dict_REF4 [val0] 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.KeyError'> 361
==================================================
del list1 [ival6 : ival3]                                               # STEP 90
ACTION: del list1 [ival6 : ival3] 
ival6 = 19 : <type 'int'>
ival3 = 1563852 : <type 'int'>
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF1 = [] : <type 'list'>
REFERENCE ACTION: del list_REF1 [ival6 : ival3] 
==================================================
result = len(dict1)                                                     # STEP 91
ACTION: result = len(dict1) 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF1) 
==================================================
result = sorted(list(dict3.keys()))                                     # STEP 92
ACTION: result = sorted(list(dict3.keys())) 
dict3 = SortedDict(None, 1000, {3971: 11}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {3971: 11} : <type 'dict'>
REFERENCE ACTION: result_REF = sorted(list(dict_REF3.keys())) 
==================================================
result = dict2.peekitem(ival3)                                          # STEP 93
ACTION: result = dict2.peekitem(ival3) 
ival3 = 1563852 : <type 'int'>
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF2 = {} : <type 'dict'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: result_REF = sortDictPeekitem(dict_REF2,ival3) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
==================================================
list2.extend(list1)                                                     # STEP 94
ACTION: list2.extend(list1) 
list2 = SortedList([3971], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF2 = [3971] : <type 'list'>
list_REF1 = [] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x11f28c6c8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 702641, in act11961
    self.p_list[2].extend(self.p_list[1])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #11 STEP #93 (0:00:30.014482) Mon Nov 20 16:51:12 2017 [ 466 stmts 604 branches ] 1088 TOTAL ACTIONS (36.2491679592/s)
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 68
STOPPING TESTING DUE TO TIMEOUT
26.1729352462 PERCENT COVERED
60.2076890469 TOTAL RUNTIME
23 EXECUTED
2263 TOTAL TEST OPERATIONS
1.48169803619 TIME SPENT EXECUTING TEST OPERATIONS
56.2744679451 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
1.35258722305 TIME SPENT CHECKING PROPERTIES
2.83428525925 TOTAL TIME SPENT RUNNING SUT
0.47630739212 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
ival6 = 11                                                               # STEP 0
ival1 = 19                                                               # STEP 1
sval7 = 'f'                                                              # STEP 2
sval4 = sval7 + sval7                                                    # STEP 3
ival2 = ival1 * ival1                                                    # STEP 4
ival1 = ival2 - ival1                                                    # STEP 5
val0 = ival2                                                             # STEP 6
val8 = ival6                                                             # STEP 7
sval6 = 'W'                                                              # STEP 8
ival6 = ival6 * ival2                                                    # STEP 9
ival0 = 3                                                               # STEP 10
val2 = ival6                                                            # STEP 11
sval2 = 'S'                                                             # STEP 12
val7 = sval6                                                            # STEP 13
sval0 = 'l'                                                             # STEP 14
dict4 = sortedcontainers.SortedDict()                                   # STEP 15
dict4.get(val8,val2)                                                    # STEP 16
result = dict4.setdefault(val8,val7)                                    # STEP 17
dict4.islice(start=ival0,stop=ival6)                                    # STEP 18
dict4.get(val0,None)                                                    # STEP 19
ival7 = ival2 * ival0                                                   # STEP 20
result = len(dict4.values())                                            # STEP 21
ival6 = ival2 - ival1                                                   # STEP 22
result = dict4.peekitem(ival2)                                          # STEP 23
result = dict4 == dict4                                                 # STEP 24
result = len(dict4)                                                     # STEP 25
result = dict4 == dict4                                                 # STEP 26
sval6 = 'X'                                                             # STEP 27
sval7 = sval0 + sval6                                                   # STEP 28
dict4.irange(minimum=val0,maximum=val8,inclusive=(True,False))          # STEP 29
sval6 = 'C'                                                             # STEP 30
dict4.irange(minimum=val7,maximum=val8,inclusive=(True,False))          # STEP 31
result = len(dict4.keys())                                              # STEP 32
result = dict4.popitem(last=False)                                      # STEP 33
dict4.update(dict4)                                                     # STEP 34
dict4.irange(minimum=val2,maximum=val0,inclusive=(True,False))          # STEP 35
sval5 = 'Y'                                                             # STEP 36
ival2 = ival2 - ival7                                                   # STEP 37
result = len(dict4.keys())                                              # STEP 38
dict3 = sortedcontainers.SortedDict()                                   # STEP 39
result = len(dict4.keys())                                              # STEP 40
val8 in dict4                                                           # STEP 41
list2 = sortedcontainers.SortedList()                                   # STEP 42
result = (dict4.values()).count(val8)                                   # STEP 43
val5 = ival1                                                            # STEP 44
dict1 = dict4.copy()                                                    # STEP 45
dict3.get(val2,None)                                                    # STEP 46
setListSlice(list2,ival0,ival7,list2)                                   # STEP 47
result = (dict3.values()).count(val0)                                   # STEP 48
sval3 = 'F'                                                             # STEP 49
dict3.get(val7,None)                                                    # STEP 50
dict1.get(val7,val7)                                                    # STEP 51
dict3 = dict3.fromkeys(list2,val5) ; result = dict3                     # STEP 52
result = (dict3.keys()).count(val7)                                     # STEP 53
dict4.irange(minimum=val7,maximum=val0,inclusive=(False,True),reverse=True)  # STEP 54
list2.add(val2)                                                         # STEP 55
sval0 = 'V'                                                             # STEP 56
ival0 = ival0 * ival2                                                   # STEP 57
setList(list2,ival2,val7)                                               # STEP 58
list2.irange(minimum=val8,maximum=val5,inclusive=(False,False),reverse=True)  # STEP 59
ival8 = ival7 - ival6                                                   # STEP 60
setListSlice(list2,ival6,ival7,list2)                                   # STEP 61
sval1 = 'Y'                                                             # STEP 62
dict1 = dict4.copy()                                                    # STEP 63
list2 < list2                                                           # STEP 64
ival3 = ival0 * ival2                                                   # STEP 65
dict2 = dict3.copy()                                                    # STEP 66
del list2 [ival7]                                                       # STEP 67
result = len(dict3.keys())                                              # STEP 68
setListSlice(list2,ival8,ival0,list2)                                   # STEP 69
dict3 = dict2.fromkeys(list2,val8) ; result = dict3                     # STEP 70
dict3.irange(minimum=val0,maximum=val8,inclusive=(False,True))          # STEP 71
result = list2 != list2                                                 # STEP 72
result = dict3.pop(val5)                                                # STEP 73
ival1 = ival7 * ival1                                                   # STEP 74
dict4.irange(minimum=val7,maximum=val0,inclusive=(False,False))         # STEP 75
list2 *= ival2                                                          # STEP 76
dict4 = sortedcontainers.SortedDict()                                   # STEP 77
list2.insert(ival2,val2)                                                # STEP 78
list2 > list2                                                           # STEP 79
result = dict1.popitem()                                                # STEP 80
dict3 [val0]                                                            # STEP 81
list1 = sortedcontainers.SortedList()                                   # STEP 82
result = list2.index(val7)                                              # STEP 83
list2.discard(val8)                                                     # STEP 84
dict3.irange(minimum=val0,maximum=val2,inclusive=(False,True),reverse=True)  # STEP 85
list2 > list1                                                           # STEP 86
dict2 [val5]                                                            # STEP 87
result = len(dict1)                                                     # STEP 88
dict4 [val0]                                                            # STEP 89
del list1 [ival6 : ival3]                                               # STEP 90
result = len(dict1)                                                     # STEP 91
result = sorted(list(dict3.keys()))                                     # STEP 92
result = dict2.peekitem(ival3)                                          # STEP 93
list2.extend(list1)                                                     # STEP 94
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x11f28c6c8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 702641, in act11961
    self.p_list[2].extend(self.p_list[1])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
644 BRANCHES COVERED
492 STATEMENTS COVERED

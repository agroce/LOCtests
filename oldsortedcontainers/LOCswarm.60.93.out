Random testing using config=Config(noExceptionMatch=False, generalize=False, localize=False, speed='FAST', probs='locsample.probs', LOCBaseline=0.2, noAlphaConvert=False, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, html=None, keepLast=False, stopWhenNoCoverage=None, generateLOC=None, computeFeatureStats=False, Pmutate=0.0, timeout=60, output='failure.11334.test', markov=None, noSwarmDependencies=False, startExploit=0.0, maxMustHitBranch=None, useHints=False, silentFail=False, highLowSwarm=None, maxMustHitStatement=None, progress=False, postCover=False, swarmLength=None, noCover=False, noEnumerateEnabled=False, full=True, swarmP=0.5, coverFile='coverage.out', markovP=1.0, swarmProbs=None, genDepth=None, exploitCeiling=0.1, logging=None, noCheck=False, throughput=False, uncaught=False, swarmSwitch=None, verbose=False, reducePool=False, exploit=None, fastQuickAnalysis=False, total=False, verboseExploit=False, swarm=True, sequenceP=1.0, biasLOC=None, timedProgress=30, relax=False, ddmin=False, stutter=None, readQuick=False, verboseActions=False, quickAnalysis=False, noReassign=False, sequenceSize=3, LOCProbs=False, sequencesFromTests=None, maxTests=-1, trackMaxCoverage=None, useQuickSequences=False, exploitBestHint=1, failedLogging=None, stopWhenStatements=None, greedyStutter=False, seed=None, stopWhenHitStatement=None, uniqueValuesAnalysis=False, normalize=False, startExploitStall=0, enumerateEnabled=False, internal=False, profile=False, multiple=True, stopWhenBranches=None, running=False, compareFails=False, Pcrossover=0.2, stopWhenHitBranch=None, depth=100, showActions=False)
TEST #17 STEP #20 (0:00:30.034473) Mon Nov 20 21:34:41 2017 [ 406 stmts 526 branches ] (no cov+ for 8 tests) 1620 TOTAL ACTIONS (53.9380194968/s)
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x1205720e0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 702811, in act11964
    self.p_list[2].extend(self.p_list[4])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
Original test has 91 steps

SAVING TEST AS failure.11334.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
list2 = sortedcontainers.SortedList()                                    # STEP 0
ACTION: list2 = sortedcontainers.SortedList() 
list2 = None : <type 'NoneType'>
list_REF2 = None : <type 'NoneType'>
=> list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: list_REF2 = [] 
=> list_REF2 = [] : <type 'list'>
==================================================
ival5 = 7                                                                # STEP 1
ACTION: ival5 = 7 
ival5 = None : <type 'NoneType'>
=> ival5 = 7 : <type 'int'>
==================================================
result = list2 == list2                                                  # STEP 2
ACTION: result = list2 == list2 
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF2 = [] : <type 'list'>
REFERENCE ACTION: result_REF = list_REF2 == list_REF2 
==================================================
ival0 = ival5 + ival5                                                    # STEP 3
ACTION: ival0 = ival5 + ival5 
ival5 = 7 : <type 'int'>
ival0 = None : <type 'NoneType'>
=> ival0 = 14 : <type 'int'>
==================================================
dict2 = sortedcontainers.SortedDict()                                    # STEP 4
ACTION: dict2 = sortedcontainers.SortedDict() 
dict2 = None : <type 'NoneType'>
dict_REF2 = None : <type 'NoneType'>
=> dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF2 = {} 
=> dict_REF2 = {} : <type 'dict'>
==================================================
result = len(dict2.keys())                                               # STEP 5
ACTION: result = len(dict2.keys())  
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF2.keys())  
==================================================
result = len(dict2.values())                                             # STEP 6
ACTION: result = len(dict2.values())  
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF2.values())  
==================================================
list4 = sortedcontainers.SortedList()                                    # STEP 7
ACTION: list4 = sortedcontainers.SortedList() 
list4 = None : <type 'NoneType'>
list_REF4 = None : <type 'NoneType'>
=> list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: list_REF4 = [] 
=> list_REF4 = [] : <type 'list'>
==================================================
dict3 = dict2.copy()                                                     # STEP 8
ACTION: dict3 = dict2.copy() 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict3 = None : <type 'NoneType'>
dict_REF2 = {} : <type 'dict'>
dict_REF3 = None : <type 'NoneType'>
=> dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF3 = dict_REF2.copy() 
=> dict_REF3 = {} : <type 'dict'>
==================================================
list2+=list2                                                             # STEP 9
ACTION: list2+=list2 
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF2 = [] : <type 'list'>
REFERENCE ACTION: sortListMultiAdd(list_REF2,list_REF2) 
==================================================
ival7 = 20                                                              # STEP 10
ACTION: ival7 = 20 
ival7 = None : <type 'NoneType'>
=> ival7 = 20 : <type 'int'>
==================================================
result = len(dict2.values())                                            # STEP 11
ACTION: result = len(dict2.values())  
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF2.values())  
==================================================
ival8 = 9                                                               # STEP 12
ACTION: ival8 = 9 
ival8 = None : <type 'NoneType'>
=> ival8 = 9 : <type 'int'>
==================================================
ival5 = 2                                                               # STEP 13
ACTION: ival5 = 2 
ival5 = 7 : <type 'int'>
=> ival5 = 2 : <type 'int'>
==================================================
set1 = sortedcontainers.SortedSet()                                     # STEP 14
ACTION: set1 = sortedcontainers.SortedSet() 
set1 = None : <type 'NoneType'>
set_REF1 = None : <type 'NoneType'>
=> set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF1 = set([]) 
=> set_REF1 = set([]) : <type 'set'>
==================================================
set3 = set1 & set1                                                      # STEP 15
ACTION: set3 = set1 & set1 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set3 = None : <type 'NoneType'>
set_REF1 = set([]) : <type 'set'>
set_REF3 = None : <type 'NoneType'>
=> set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF3 = set_REF1 & set_REF1 
=> set_REF3 = set([]) : <type 'set'>
==================================================
dict0 = sortedcontainers.SortedDict()                                   # STEP 16
ACTION: dict0 = sortedcontainers.SortedDict() 
dict0 = None : <type 'NoneType'>
dict_REF0 = None : <type 'NoneType'>
=> dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF0 = {} 
=> dict_REF0 = {} : <type 'dict'>
==================================================
ival3 = 3                                                               # STEP 17
ACTION: ival3 = 3 
ival3 = None : <type 'NoneType'>
=> ival3 = 3 : <type 'int'>
==================================================
sval6 = 'm'                                                             # STEP 18
ACTION: sval6 = 'm' 
sval6 = None : <type 'NoneType'>
=> sval6 = 'm' : <type 'str'>
==================================================
set3.islice(start=ival3,stop=ival3)                                     # STEP 19
ACTION: set3.islice(start=ival3,stop=ival3) 
ival3 = 3 : <type 'int'>
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF3.islice(start=ival3,stop=ival3) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'islice'
==================================================
result = list4 != list2                                                 # STEP 20
ACTION: result = list4 != list2 
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = [] : <type 'list'>
list_REF2 = [] : <type 'list'>
REFERENCE ACTION: result_REF = list_REF4 != list_REF2 
==================================================
set2 = sortedcontainers.SortedSet()                                     # STEP 21
ACTION: set2 = sortedcontainers.SortedSet() 
set2 = None : <type 'NoneType'>
set_REF2 = None : <type 'NoneType'>
=> set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF2 = set([]) 
=> set_REF2 = set([]) : <type 'set'>
==================================================
result = len(set2)                                                      # STEP 22
ACTION: result = len(set2) 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = len(set_REF2) 
==================================================
repr(dict3)                                                             # STEP 23
ACTION: repr(dict3) 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: repr(dict_REF3) 
==================================================
dict3 = sortedcontainers.SortedDict()                                   # STEP 24
ACTION: dict3 = sortedcontainers.SortedDict() 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF3 = {} 
==================================================
set3 = sortedcontainers.SortedSet()                                     # STEP 25
ACTION: set3 = sortedcontainers.SortedSet() 
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF3 = set([]) 
==================================================
list2.extend(list4)                                                     # STEP 26
ACTION: list2.extend(list4) 
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF2 = [] : <type 'list'>
list_REF4 = [] : <type 'list'>
REFERENCE ACTION: sortListExtend(list_REF2,list_REF4) 
==================================================
sval2 = 'n'                                                             # STEP 27
ACTION: sval2 = 'n' 
sval2 = None : <type 'NoneType'>
=> sval2 = 'n' : <type 'str'>
==================================================
set3.islice(start=ival3,stop=ival8)                                     # STEP 28
ACTION: set3.islice(start=ival3,stop=ival8) 
ival3 = 3 : <type 'int'>
ival8 = 9 : <type 'int'>
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF3.islice(start=ival3,stop=ival8) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'islice'
==================================================
set2 = set1 | set1                                                      # STEP 29
ACTION: set2 = set1 | set1 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF1 = set([]) : <type 'set'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF2 = set_REF1 | set_REF1 
==================================================
result = sorted(list(dict3.keys()))                                     # STEP 30
ACTION: result = sorted(list(dict3.keys())) 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = sorted(list(dict_REF3.keys())) 
==================================================
sval8 = 'z'                                                             # STEP 31
ACTION: sval8 = 'z' 
sval8 = None : <type 'NoneType'>
=> sval8 = 'z' : <type 'str'>
==================================================
val1 = ival3                                                            # STEP 32
ACTION: val1 = ival3 
ival3 = 3 : <type 'int'>
val1 = None : <type 'NoneType'>
=> val1 = 3 : <type 'int'>
==================================================
result = sorted(list(dict2.keys()))                                     # STEP 33
ACTION: result = sorted(list(dict2.keys())) 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = sorted(list(dict_REF2.keys())) 
==================================================
list2.irange(minimum=val1,maximum=val1,inclusive=(False,False))         # STEP 34
ACTION: list2.irange(minimum=val1,maximum=val1,inclusive=(False,False)) 
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val1 = 3 : <type 'int'>
list_REF2 = [] : <type 'list'>
REFERENCE ACTION: list_REF2.irange(minimum=val1,maximum=val1,inclusive=(False,False)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
set4 = set1 & set1                                                      # STEP 35
ACTION: set4 = set1 & set1 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set4 = None : <type 'NoneType'>
set_REF1 = set([]) : <type 'set'>
set_REF4 = None : <type 'NoneType'>
=> set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF4 = set_REF1 & set_REF1 
=> set_REF4 = set([]) : <type 'set'>
==================================================
set4 |= set3                                                            # STEP 36
ACTION: set4 |= set3 
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF4 = set([]) : <type 'set'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF4 |= set_REF3 
==================================================
set2.islice(start=None,stop=ival5)                                      # STEP 37
ACTION: set2.islice(start=None,stop=ival5) 
ival5 = 2 : <type 'int'>
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF2.islice(start=None,stop=ival5) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'islice'
==================================================
set4 = set4 & set2                                                      # STEP 38
ACTION: set4 = set4 & set2 
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF4 = set([]) : <type 'set'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF4 = set_REF4 & set_REF2 
==================================================
dict4 = dict2.fromkeys(set4,val1) ; result = dict4                      # STEP 39
ACTION: dict4 = dict2.fromkeys(set4,val1) ; result = dict4 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict4 = None : <type 'NoneType'>
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
val1 = 3 : <type 'int'>
dict_REF2 = {} : <type 'dict'>
dict_REF4 = None : <type 'NoneType'>
set_REF4 = set([]) : <type 'set'>
=> dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF4 = dict_REF2.fromkeys(set_REF4,val1) ; result_REF = dict_REF4 
=> dict_REF4 = {} : <type 'dict'>
==================================================
list4.irange(minimum=val1,maximum=val1,inclusive=(False,True),reverse=True)  # STEP 40
ACTION: list4.irange(minimum=val1,maximum=val1,inclusive=(False,True),reverse=True) 
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val1 = 3 : <type 'int'>
list_REF4 = [] : <type 'list'>
REFERENCE ACTION: list_REF4.irange(minimum=val1,maximum=val1,inclusive=(False,True),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
set3 = sortedcontainers.SortedSet()                                     # STEP 41
ACTION: set3 = sortedcontainers.SortedSet() 
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF3 = set([]) 
==================================================
dict2.irange(minimum=val1,maximum=val1,inclusive=(False,True))          # STEP 42
ACTION: dict2.irange(minimum=val1,maximum=val1,inclusive=(False,True)) 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val1 = 3 : <type 'int'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF2.irange(minimum=val1,maximum=val1,inclusive=(False,True)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'irange'
==================================================
set3.irange(minimum=val1,maximum=val1,inclusive=(False,False))          # STEP 43
ACTION: set3.irange(minimum=val1,maximum=val1,inclusive=(False,False)) 
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
val1 = 3 : <type 'int'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF3.irange(minimum=val1,maximum=val1,inclusive=(False,False)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'irange'
==================================================
set0 = set2 | set1                                                      # STEP 44
ACTION: set0 = set2 | set1 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set0 = None : <type 'NoneType'>
set_REF2 = set([]) : <type 'set'>
set_REF1 = set([]) : <type 'set'>
set_REF0 = None : <type 'NoneType'>
=> set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF0 = set_REF2 | set_REF1 
=> set_REF0 = set([]) : <type 'set'>
==================================================
dict4.irange(minimum=val1,maximum=val1,inclusive=(False,True))          # STEP 45
ACTION: dict4.irange(minimum=val1,maximum=val1,inclusive=(False,True)) 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val1 = 3 : <type 'int'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF4.irange(minimum=val1,maximum=val1,inclusive=(False,True)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'irange'
==================================================
list2.insert(ival5,val1)                                                # STEP 46
ACTION: list2.insert(ival5,val1) 
ival5 = 2 : <type 'int'>
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val1 = 3 : <type 'int'>
list_REF2 = [] : <type 'list'>
=> list2 = SortedList([3], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: sortListInsert(list_REF2,ival5,val1) 
=> list_REF2 = [3] : <type 'list'>
==================================================
dict3 = sortedcontainers.SortedDict()                                   # STEP 47
ACTION: dict3 = sortedcontainers.SortedDict() 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF3 = {} 
==================================================
set3 = set3.union(set1)                                                 # STEP 48
ACTION: set3 = set3.union(set1) 
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF3 = set([]) : <type 'set'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF3 = set_REF3.union(set_REF1) 
==================================================
result = sorted(list(dict3.keys()))                                     # STEP 49
ACTION: result = sorted(list(dict3.keys())) 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = sorted(list(dict_REF3.keys())) 
==================================================
result = list4 == list2                                                 # STEP 50
ACTION: result = list4 == list2 
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list2 = SortedList([3], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = [] : <type 'list'>
list_REF2 = [3] : <type 'list'>
REFERENCE ACTION: result_REF = list_REF4 == list_REF2 
==================================================
result = dict2.peekitem(ival7)                                          # STEP 51
ACTION: result = dict2.peekitem(ival7) 
ival7 = 20 : <type 'int'>
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF2 = {} : <type 'dict'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: result_REF = sortDictPeekitem(dict_REF2,ival7) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
==================================================
set4 = set2.union(set3)                                                 # STEP 52
ACTION: set4 = set2.union(set3) 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF2 = set([]) : <type 'set'>
set_REF3 = set([]) : <type 'set'>
set_REF4 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF4 = set_REF2.union(set_REF3) 
==================================================
set3 = sortedcontainers.SortedSet()                                     # STEP 53
ACTION: set3 = sortedcontainers.SortedSet() 
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF3 = set([]) 
==================================================
result = sorted(list(dict0.keys()))                                     # STEP 54
ACTION: result = sorted(list(dict0.keys())) 
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = sorted(list(dict_REF0.keys())) 
==================================================
list2.discard(val1)                                                     # STEP 55
ACTION: list2.discard(val1) 
list2 = SortedList([3], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val1 = 3 : <type 'int'>
list_REF2 = [3] : <type 'list'>
=> list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: sortListDiscard(list_REF2,val1) 
=> list_REF2 = [] : <type 'list'>
==================================================
result = sorted(list(dict3.keys()))                                     # STEP 56
ACTION: result = sorted(list(dict3.keys())) 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = sorted(list(dict_REF3.keys())) 
==================================================
dict0.get(val1,val1)                                                    # STEP 57
ACTION: dict0.get(val1,val1) 
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val1 = 3 : <type 'int'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF0.get(val1,val1) 
==================================================
result = sorted(list(dict2.keys()))                                     # STEP 58
ACTION: result = sorted(list(dict2.keys())) 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = sorted(list(dict_REF2.keys())) 
==================================================
dict4 = dict4.fromkeys(list2,val1) ; result = dict4                     # STEP 59
ACTION: dict4 = dict4.fromkeys(list2,val1) ; result = dict4 
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val1 = 3 : <type 'int'>
list_REF2 = [] : <type 'list'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF4 = dict_REF4.fromkeys(list_REF2,val1) ; result_REF = dict_REF4 
==================================================
result = sorted(list(dict3.keys()))                                     # STEP 60
ACTION: result = sorted(list(dict3.keys())) 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = sorted(list(dict_REF3.keys())) 
==================================================
set3 |= set3                                                            # STEP 61
ACTION: set3 |= set3 
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF3 |= set_REF3 
==================================================
sval4 = 'j'                                                             # STEP 62
ACTION: sval4 = 'j' 
sval4 = None : <type 'NoneType'>
=> sval4 = 'j' : <type 'str'>
==================================================
val7 = sval4                                                            # STEP 63
ACTION: val7 = sval4 
sval4 = 'j' : <type 'str'>
val7 = None : <type 'NoneType'>
=> val7 = 'j' : <type 'str'>
==================================================
set2 ^= set4                                                            # STEP 64
ACTION: set2 ^= set4 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF2 = set([]) : <type 'set'>
set_REF4 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF2 ^= set_REF4 
==================================================
dict1 = dict2.fromkeys(list2,val1) ; result = dict1                     # STEP 65
ACTION: dict1 = dict2.fromkeys(list2,val1) ; result = dict1 
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict1 = None : <type 'NoneType'>
val1 = 3 : <type 'int'>
list_REF2 = [] : <type 'list'>
dict_REF2 = {} : <type 'dict'>
dict_REF1 = None : <type 'NoneType'>
=> dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF1 = dict_REF2.fromkeys(list_REF2,val1) ; result_REF = dict_REF1 
=> dict_REF1 = {} : <type 'dict'>
==================================================
set3 |= set3                                                            # STEP 66
ACTION: set3 |= set3 
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF3 |= set_REF3 
==================================================
dict0.irange(minimum=val1,maximum=val1,inclusive=(False,True))          # STEP 67
ACTION: dict0.irange(minimum=val1,maximum=val1,inclusive=(False,True)) 
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val1 = 3 : <type 'int'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF0.irange(minimum=val1,maximum=val1,inclusive=(False,True)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'irange'
==================================================
result = dict2.pop(val7,val1)                                           # STEP 68
ACTION: result = dict2.pop(val7,val1) 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val7 = 'j' : <type 'str'>
val1 = 3 : <type 'int'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = dict_REF2.pop(val7,val1) 
==================================================
set4.irange(minimum=val1,maximum=val7,inclusive=(False,False),reverse=True)  # STEP 69
ACTION: set4.irange(minimum=val1,maximum=val7,inclusive=(False,False),reverse=True) 
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
val1 = 3 : <type 'int'>
val7 = 'j' : <type 'str'>
set_REF4 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF4.irange(minimum=val1,maximum=val7,inclusive=(False,False),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'irange'
==================================================
sval9 = 't'                                                             # STEP 70
ACTION: sval9 = 't' 
sval9 = None : <type 'NoneType'>
=> sval9 = 't' : <type 'str'>
==================================================
dict2 = dict3.fromkeys(list4,val1) ; result = dict2                     # STEP 71
ACTION: dict2 = dict3.fromkeys(list4,val1) ; result = dict2 
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val1 = 3 : <type 'int'>
list_REF4 = [] : <type 'list'>
dict_REF3 = {} : <type 'dict'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF2 = dict_REF3.fromkeys(list_REF4,val1) ; result_REF = dict_REF2 
==================================================
dict3 = sortedcontainers.SortedDict()                                   # STEP 72
ACTION: dict3 = sortedcontainers.SortedDict() 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF3 = {} 
==================================================
list2.insert(ival7,val7)                                                # STEP 73
ACTION: list2.insert(ival7,val7) 
ival7 = 20 : <type 'int'>
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val7 = 'j' : <type 'str'>
list_REF2 = [] : <type 'list'>
=> list2 = SortedList(['j'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: sortListInsert(list_REF2,ival7,val7) 
=> list_REF2 = ['j'] : <type 'list'>
==================================================
list2+=list4                                                            # STEP 74
ACTION: list2+=list4 
list2 = SortedList(['j'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF2 = ['j'] : <type 'list'>
list_REF4 = [] : <type 'list'>
REFERENCE ACTION: sortListMultiAdd(list_REF2,list_REF4) 
==================================================
result = len(dict2.keys())                                              # STEP 75
ACTION: result = len(dict2.keys())  
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF2.keys())  
==================================================
list4.islice(start=ival0,stop=ival7,reverse=True)                       # STEP 76
ACTION: list4.islice(start=ival0,stop=ival7,reverse=True) 
ival0 = 14 : <type 'int'>
ival7 = 20 : <type 'int'>
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = [] : <type 'list'>
REFERENCE ACTION: list_REF4.islice(start=ival0,stop=ival7,reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'islice'
==================================================
ival4 = ival8 + ival7                                                   # STEP 77
ACTION: ival4 = ival8 + ival7 
ival8 = 9 : <type 'int'>
ival7 = 20 : <type 'int'>
ival4 = None : <type 'NoneType'>
=> ival4 = 29 : <type 'int'>
==================================================
dict3.get(val1,val1)                                                    # STEP 78
ACTION: dict3.get(val1,val1) 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val1 = 3 : <type 'int'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF3.get(val1,val1) 
==================================================
plist2 = list4 [ival3 : ival4]                                          # STEP 79
ACTION: plist2 = list4 [ival3 : ival4] 
ival3 = 3 : <type 'int'>
ival4 = 29 : <type 'int'>
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
plist2 = None : <type 'NoneType'>
list_REF4 = [] : <type 'list'>
=> plist2 = [] : <type 'list'>
REFERENCE ACTION: plist2 = list_REF4 [ival3 : ival4] 
==================================================
dict3.irange(minimum=val1,maximum=val7,inclusive=(True,False))          # STEP 80
ACTION: dict3.irange(minimum=val1,maximum=val7,inclusive=(True,False)) 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val1 = 3 : <type 'int'>
val7 = 'j' : <type 'str'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF3.irange(minimum=val1,maximum=val7,inclusive=(True,False)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'irange'
==================================================
list2.append(val7)                                                      # STEP 81
ACTION: list2.append(val7) 
list2 = SortedList(['j'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val7 = 'j' : <type 'str'>
list_REF2 = ['j'] : <type 'list'>
=> list2 = SortedList(['j', 'j'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: sortListAppend(list_REF2,val7) 
=> list_REF2 = ['j', 'j'] : <type 'list'>
==================================================
dict3 = sortedcontainers.SortedDict()                                   # STEP 82
ACTION: dict3 = sortedcontainers.SortedDict() 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF3 = {} 
==================================================
sval0 = 'a'                                                             # STEP 83
ACTION: sval0 = 'a' 
sval0 = None : <type 'NoneType'>
=> sval0 = 'a' : <type 'str'>
==================================================
list4.irange(minimum=val7,maximum=val7,inclusive=(False,False))         # STEP 84
ACTION: list4.irange(minimum=val7,maximum=val7,inclusive=(False,False)) 
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val7 = 'j' : <type 'str'>
list_REF4 = [] : <type 'list'>
REFERENCE ACTION: list_REF4.irange(minimum=val7,maximum=val7,inclusive=(False,False)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
ival9 = 13                                                              # STEP 85
ACTION: ival9 = 13 
ival9 = None : <type 'NoneType'>
=> ival9 = 13 : <type 'int'>
==================================================
list2.discard(val7)                                                     # STEP 86
ACTION: list2.discard(val7) 
list2 = SortedList(['j', 'j'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val7 = 'j' : <type 'str'>
list_REF2 = ['j', 'j'] : <type 'list'>
=> list2 = SortedList(['j'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: sortListDiscard(list_REF2,val7) 
=> list_REF2 = ['j'] : <type 'list'>
==================================================
ival8 = ival9 + ival9                                                   # STEP 87
ACTION: ival8 = ival9 + ival9 
ival9 = 13 : <type 'int'>
ival8 = 9 : <type 'int'>
=> ival8 = 26 : <type 'int'>
==================================================
val7 in dict0                                                           # STEP 88
ACTION: val7 in dict0 
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val7 = 'j' : <type 'str'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: val7 in dict_REF0 
==================================================
list4.irange(minimum=val7,maximum=val7,inclusive=(False,False))         # STEP 89
ACTION: list4.irange(minimum=val7,maximum=val7,inclusive=(False,False)) 
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val7 = 'j' : <type 'str'>
list_REF4 = [] : <type 'list'>
REFERENCE ACTION: list_REF4.irange(minimum=val7,maximum=val7,inclusive=(False,False)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
list2.extend(list4)                                                     # STEP 90
ACTION: list2.extend(list4) 
list2 = SortedList(['j'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF2 = ['j'] : <type 'list'>
list_REF4 = [] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x12058acf8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 702811, in act11964
    self.p_list[2].extend(self.p_list[4])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 9
STOPPING TESTING DUE TO TIMEOUT
23.8464521132 PERCENT COVERED
60.2249660492 TOTAL RUNTIME
33 EXECUTED
3200 TOTAL TEST OPERATIONS
1.79390025139 TIME SPENT EXECUTING TEST OPERATIONS
54.8356273174 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
1.64134907722 TIME SPENT CHECKING PROPERTIES
3.43524932861 TOTAL TIME SPENT RUNNING SUT
0.502527952194 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
list2 = sortedcontainers.SortedList()                                    # STEP 0
ival5 = 7                                                                # STEP 1
result = list2 == list2                                                  # STEP 2
ival0 = ival5 + ival5                                                    # STEP 3
dict2 = sortedcontainers.SortedDict()                                    # STEP 4
result = len(dict2.keys())                                               # STEP 5
result = len(dict2.values())                                             # STEP 6
list4 = sortedcontainers.SortedList()                                    # STEP 7
dict3 = dict2.copy()                                                     # STEP 8
list2+=list2                                                             # STEP 9
ival7 = 20                                                              # STEP 10
result = len(dict2.values())                                            # STEP 11
ival8 = 9                                                               # STEP 12
ival5 = 2                                                               # STEP 13
set1 = sortedcontainers.SortedSet()                                     # STEP 14
set3 = set1 & set1                                                      # STEP 15
dict0 = sortedcontainers.SortedDict()                                   # STEP 16
ival3 = 3                                                               # STEP 17
sval6 = 'm'                                                             # STEP 18
set3.islice(start=ival3,stop=ival3)                                     # STEP 19
result = list4 != list2                                                 # STEP 20
set2 = sortedcontainers.SortedSet()                                     # STEP 21
result = len(set2)                                                      # STEP 22
repr(dict3)                                                             # STEP 23
dict3 = sortedcontainers.SortedDict()                                   # STEP 24
set3 = sortedcontainers.SortedSet()                                     # STEP 25
list2.extend(list4)                                                     # STEP 26
sval2 = 'n'                                                             # STEP 27
set3.islice(start=ival3,stop=ival8)                                     # STEP 28
set2 = set1 | set1                                                      # STEP 29
result = sorted(list(dict3.keys()))                                     # STEP 30
sval8 = 'z'                                                             # STEP 31
val1 = ival3                                                            # STEP 32
result = sorted(list(dict2.keys()))                                     # STEP 33
list2.irange(minimum=val1,maximum=val1,inclusive=(False,False))         # STEP 34
set4 = set1 & set1                                                      # STEP 35
set4 |= set3                                                            # STEP 36
set2.islice(start=None,stop=ival5)                                      # STEP 37
set4 = set4 & set2                                                      # STEP 38
dict4 = dict2.fromkeys(set4,val1) ; result = dict4                      # STEP 39
list4.irange(minimum=val1,maximum=val1,inclusive=(False,True),reverse=True)  # STEP 40
set3 = sortedcontainers.SortedSet()                                     # STEP 41
dict2.irange(minimum=val1,maximum=val1,inclusive=(False,True))          # STEP 42
set3.irange(minimum=val1,maximum=val1,inclusive=(False,False))          # STEP 43
set0 = set2 | set1                                                      # STEP 44
dict4.irange(minimum=val1,maximum=val1,inclusive=(False,True))          # STEP 45
list2.insert(ival5,val1)                                                # STEP 46
dict3 = sortedcontainers.SortedDict()                                   # STEP 47
set3 = set3.union(set1)                                                 # STEP 48
result = sorted(list(dict3.keys()))                                     # STEP 49
result = list4 == list2                                                 # STEP 50
result = dict2.peekitem(ival7)                                          # STEP 51
set4 = set2.union(set3)                                                 # STEP 52
set3 = sortedcontainers.SortedSet()                                     # STEP 53
result = sorted(list(dict0.keys()))                                     # STEP 54
list2.discard(val1)                                                     # STEP 55
result = sorted(list(dict3.keys()))                                     # STEP 56
dict0.get(val1,val1)                                                    # STEP 57
result = sorted(list(dict2.keys()))                                     # STEP 58
dict4 = dict4.fromkeys(list2,val1) ; result = dict4                     # STEP 59
result = sorted(list(dict3.keys()))                                     # STEP 60
set3 |= set3                                                            # STEP 61
sval4 = 'j'                                                             # STEP 62
val7 = sval4                                                            # STEP 63
set2 ^= set4                                                            # STEP 64
dict1 = dict2.fromkeys(list2,val1) ; result = dict1                     # STEP 65
set3 |= set3                                                            # STEP 66
dict0.irange(minimum=val1,maximum=val1,inclusive=(False,True))          # STEP 67
result = dict2.pop(val7,val1)                                           # STEP 68
set4.irange(minimum=val1,maximum=val7,inclusive=(False,False),reverse=True)  # STEP 69
sval9 = 't'                                                             # STEP 70
dict2 = dict3.fromkeys(list4,val1) ; result = dict2                     # STEP 71
dict3 = sortedcontainers.SortedDict()                                   # STEP 72
list2.insert(ival7,val7)                                                # STEP 73
list2+=list4                                                            # STEP 74
result = len(dict2.keys())                                              # STEP 75
list4.islice(start=ival0,stop=ival7,reverse=True)                       # STEP 76
ival4 = ival8 + ival7                                                   # STEP 77
dict3.get(val1,val1)                                                    # STEP 78
plist2 = list4 [ival3 : ival4]                                          # STEP 79
dict3.irange(minimum=val1,maximum=val7,inclusive=(True,False))          # STEP 80
list2.append(val7)                                                      # STEP 81
dict3 = sortedcontainers.SortedDict()                                   # STEP 82
sval0 = 'a'                                                             # STEP 83
list4.irange(minimum=val7,maximum=val7,inclusive=(False,False))         # STEP 84
ival9 = 13                                                              # STEP 85
list2.discard(val7)                                                     # STEP 86
ival8 = ival9 + ival9                                                   # STEP 87
val7 in dict0                                                           # STEP 88
list4.irange(minimum=val7,maximum=val7,inclusive=(False,False))         # STEP 89
list2.extend(list4)                                                     # STEP 90
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x12058acf8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 702811, in act11964
    self.p_list[2].extend(self.p_list[4])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
594 BRANCHES COVERED
457 STATEMENTS COVERED

Random testing using config=Config(noExceptionMatch=False, generalize=False, localize=False, speed='FAST', probs='locsample.probs', LOCBaseline=0.2, noAlphaConvert=False, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, html=None, keepLast=False, stopWhenNoCoverage=None, generateLOC=None, computeFeatureStats=False, Pmutate=0.0, timeout=60, output='failure.11421.test', markov=None, noSwarmDependencies=False, startExploit=0.0, maxMustHitBranch=None, useHints=False, silentFail=False, highLowSwarm=None, maxMustHitStatement=None, progress=False, postCover=False, swarmLength=None, noCover=False, noEnumerateEnabled=False, full=True, swarmP=0.5, coverFile='coverage.out', markovP=1.0, swarmProbs=None, genDepth=None, exploitCeiling=0.1, logging=None, noCheck=False, throughput=False, uncaught=False, swarmSwitch=None, verbose=False, reducePool=False, exploit=None, fastQuickAnalysis=False, total=False, verboseExploit=False, swarm=True, sequenceP=1.0, biasLOC=None, timedProgress=30, relax=False, ddmin=False, stutter=None, readQuick=False, verboseActions=False, quickAnalysis=False, noReassign=False, sequenceSize=3, LOCProbs=False, sequencesFromTests=None, maxTests=-1, trackMaxCoverage=None, useQuickSequences=False, exploitBestHint=1, failedLogging=None, stopWhenStatements=None, greedyStutter=False, seed=None, stopWhenHitStatement=None, uniqueValuesAnalysis=False, normalize=False, startExploitStall=0, enumerateEnabled=False, internal=False, profile=False, multiple=True, stopWhenBranches=None, running=False, compareFails=False, Pcrossover=0.2, stopWhenHitBranch=None, depth=100, showActions=False)
TEST #13 STEP #19 (0:00:30.003296) Mon Nov 20 22:05:23 2017 [ 399 stmts 519 branches ] 1219 TOTAL ACTIONS (40.6288697124/s)
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x120ad1cf8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 702166, in act11953
    self.p_list[0].extend(self.p_list[3])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
Original test has 63 steps

SAVING TEST AS failure.11421.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
sval1 = 'c'                                                              # STEP 0
ACTION: sval1 = 'c' 
sval1 = None : <type 'NoneType'>
=> sval1 = 'c' : <type 'str'>
==================================================
sval0 = 'w'                                                              # STEP 1
ACTION: sval0 = 'w' 
sval0 = None : <type 'NoneType'>
=> sval0 = 'w' : <type 'str'>
==================================================
ival9 = 15                                                               # STEP 2
ACTION: ival9 = 15 
ival9 = None : <type 'NoneType'>
=> ival9 = 15 : <type 'int'>
==================================================
set0 = sortedcontainers.SortedSet()                                      # STEP 3
ACTION: set0 = sortedcontainers.SortedSet() 
set0 = None : <type 'NoneType'>
set_REF0 = None : <type 'NoneType'>
=> set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF0 = set([]) 
=> set_REF0 = set([]) : <type 'set'>
==================================================
set2 = set0 | set0                                                       # STEP 4
ACTION: set2 = set0 | set0 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set2 = None : <type 'NoneType'>
set_REF0 = set([]) : <type 'set'>
set_REF2 = None : <type 'NoneType'>
=> set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF2 = set_REF0 | set_REF0 
=> set_REF2 = set([]) : <type 'set'>
==================================================
sval8 = 'n'                                                              # STEP 5
ACTION: sval8 = 'n' 
sval8 = None : <type 'NoneType'>
=> sval8 = 'n' : <type 'str'>
==================================================
ival5 = ival9 * ival9                                                    # STEP 6
ACTION: ival5 = ival9 * ival9 
ival9 = 15 : <type 'int'>
ival5 = None : <type 'NoneType'>
=> ival5 = 225 : <type 'int'>
==================================================
set2 < set0                                                              # STEP 7
ACTION: set2 < set0 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF2 = set([]) : <type 'set'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF2 < set_REF0 
==================================================
set0 < set0                                                              # STEP 8
ACTION: set0 < set0 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF0 < set_REF0 
==================================================
ival0 = 5                                                                # STEP 9
ACTION: ival0 = 5 
ival0 = None : <type 'NoneType'>
=> ival0 = 5 : <type 'int'>
==================================================
set0 = sortedcontainers.SortedSet()                                     # STEP 10
ACTION: set0 = sortedcontainers.SortedSet() 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF0 = set([]) 
==================================================
val1 = sval1                                                            # STEP 11
ACTION: val1 = sval1 
sval1 = 'c' : <type 'str'>
val1 = None : <type 'NoneType'>
=> val1 = 'c' : <type 'str'>
==================================================
set3 = sortedcontainers.SortedSet()                                     # STEP 12
ACTION: set3 = sortedcontainers.SortedSet() 
set3 = None : <type 'NoneType'>
set_REF3 = None : <type 'NoneType'>
=> set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF3 = set([]) 
=> set_REF3 = set([]) : <type 'set'>
==================================================
sval3 = 'h'                                                             # STEP 13
ACTION: sval3 = 'h' 
sval3 = None : <type 'NoneType'>
=> sval3 = 'h' : <type 'str'>
==================================================
set2 = sortedcontainers.SortedSet()                                     # STEP 14
ACTION: set2 = sortedcontainers.SortedSet() 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF2 = set([]) 
==================================================
val7 = ival5                                                            # STEP 15
ACTION: val7 = ival5 
ival5 = 225 : <type 'int'>
val7 = None : <type 'NoneType'>
=> val7 = 225 : <type 'int'>
==================================================
set1 = set0.copy()                                                      # STEP 16
ACTION: set1 = set0.copy() 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set1 = None : <type 'NoneType'>
set_REF0 = set([]) : <type 'set'>
set_REF1 = None : <type 'NoneType'>
=> set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF1 = set_REF0.copy() 
=> set_REF1 = set([]) : <type 'set'>
==================================================
sval6 = 'x'                                                             # STEP 17
ACTION: sval6 = 'x' 
sval6 = None : <type 'NoneType'>
=> sval6 = 'x' : <type 'str'>
==================================================
ival3 = ival9 * ival5                                                   # STEP 18
ACTION: ival3 = ival9 * ival5 
ival9 = 15 : <type 'int'>
ival5 = 225 : <type 'int'>
ival3 = None : <type 'NoneType'>
=> ival3 = 3375 : <type 'int'>
==================================================
set4 = set2 | set0                                                      # STEP 19
ACTION: set4 = set2 | set0 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set4 = None : <type 'NoneType'>
set_REF2 = set([]) : <type 'set'>
set_REF0 = set([]) : <type 'set'>
set_REF4 = None : <type 'NoneType'>
=> set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF4 = set_REF2 | set_REF0 
=> set_REF4 = set([]) : <type 'set'>
==================================================
set4.irange(minimum=val1,maximum=val1,inclusive=(False,False))          # STEP 20
ACTION: set4.irange(minimum=val1,maximum=val1,inclusive=(False,False)) 
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
val1 = 'c' : <type 'str'>
set_REF4 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF4.irange(minimum=val1,maximum=val1,inclusive=(False,False)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'irange'
==================================================
val0 = ival3                                                            # STEP 21
ACTION: val0 = ival3 
ival3 = 3375 : <type 'int'>
val0 = None : <type 'NoneType'>
=> val0 = 3375 : <type 'int'>
==================================================
val4 = ival5                                                            # STEP 22
ACTION: val4 = ival5 
ival5 = 225 : <type 'int'>
val4 = None : <type 'NoneType'>
=> val4 = 225 : <type 'int'>
==================================================
ival5 = ival0 * ival9                                                   # STEP 23
ACTION: ival5 = ival0 * ival9 
ival0 = 5 : <type 'int'>
ival9 = 15 : <type 'int'>
ival5 = 225 : <type 'int'>
=> ival5 = 75 : <type 'int'>
==================================================
ival7 = 18                                                              # STEP 24
ACTION: ival7 = 18 
ival7 = None : <type 'NoneType'>
=> ival7 = 18 : <type 'int'>
==================================================
list0 = sortedcontainers.SortedList()                                   # STEP 25
ACTION: list0 = sortedcontainers.SortedList() 
list0 = None : <type 'NoneType'>
list_REF0 = None : <type 'NoneType'>
=> list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: list_REF0 = [] 
=> list_REF0 = [] : <type 'list'>
==================================================
list0.islice(start=None,stop=ival3)                                     # STEP 26
ACTION: list0.islice(start=None,stop=ival3) 
ival3 = 3375 : <type 'int'>
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF0 = [] : <type 'list'>
REFERENCE ACTION: list_REF0.islice(start=None,stop=ival3) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'islice'
==================================================
set4.irange(minimum=val0,maximum=val7,inclusive=(False,False))          # STEP 27
ACTION: set4.irange(minimum=val0,maximum=val7,inclusive=(False,False)) 
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
val0 = 3375 : <type 'int'>
val7 = 225 : <type 'int'>
set_REF4 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF4.irange(minimum=val0,maximum=val7,inclusive=(False,False)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'irange'
==================================================
ival2 = ival3 * ival5                                                   # STEP 28
ACTION: ival2 = ival3 * ival5 
ival3 = 3375 : <type 'int'>
ival5 = 75 : <type 'int'>
ival2 = None : <type 'NoneType'>
=> ival2 = 253125 : <type 'int'>
==================================================
list0.insert(ival2,val7)                                                # STEP 29
ACTION: list0.insert(ival2,val7) 
ival2 = 253125 : <type 'int'>
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val7 = 225 : <type 'int'>
list_REF0 = [] : <type 'list'>
=> list0 = SortedList([225], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: sortListInsert(list_REF0,ival2,val7) 
=> list_REF0 = [225] : <type 'list'>
==================================================
set2.irange(minimum=val0,maximum=val7,inclusive=(True,False),reverse=True)  # STEP 30
ACTION: set2.irange(minimum=val0,maximum=val7,inclusive=(True,False),reverse=True) 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
val0 = 3375 : <type 'int'>
val7 = 225 : <type 'int'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF2.irange(minimum=val0,maximum=val7,inclusive=(True,False),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'irange'
==================================================
ival1 = ival5 - ival7                                                   # STEP 31
ACTION: ival1 = ival5 - ival7 
ival5 = 75 : <type 'int'>
ival7 = 18 : <type 'int'>
ival1 = None : <type 'NoneType'>
=> ival1 = 57 : <type 'int'>
==================================================
list0.extend(list0)                                                     # STEP 32
ACTION: list0.extend(list0) 
list0 = SortedList([225], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF0 = [225] : <type 'list'>
=> list0 = SortedList([225, 225], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: sortListExtend(list_REF0,list_REF0) 
=> list_REF0 = [225, 225] : <type 'list'>
==================================================
set4 = set2 ^ set0                                                      # STEP 33
ACTION: set4 = set2 ^ set0 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF2 = set([]) : <type 'set'>
set_REF0 = set([]) : <type 'set'>
set_REF4 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF4 = set_REF2 ^ set_REF0 
==================================================
list0 > list0                                                           # STEP 34
ACTION: list0 > list0 
list0 = SortedList([225, 225], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF0 = [225, 225] : <type 'list'>
REFERENCE ACTION: list_REF0 > list_REF0 
==================================================
result = list0 == list0                                                 # STEP 35
ACTION: result = list0 == list0 
list0 = SortedList([225, 225], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF0 = [225, 225] : <type 'list'>
REFERENCE ACTION: result_REF = list_REF0 == list_REF0 
==================================================
set0.irange(minimum=val1,maximum=val7,inclusive=(False,True))           # STEP 36
ACTION: set0.irange(minimum=val1,maximum=val7,inclusive=(False,True)) 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
val1 = 'c' : <type 'str'>
val7 = 225 : <type 'int'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF0.irange(minimum=val1,maximum=val7,inclusive=(False,True)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'irange'
==================================================
result = list0 == list0                                                 # STEP 37
ACTION: result = list0 == list0 
list0 = SortedList([225, 225], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF0 = [225, 225] : <type 'list'>
REFERENCE ACTION: result_REF = list_REF0 == list_REF0 
==================================================
sval5 = 'b'                                                             # STEP 38
ACTION: sval5 = 'b' 
sval5 = None : <type 'NoneType'>
=> sval5 = 'b' : <type 'str'>
==================================================
result = list0 == list0                                                 # STEP 39
ACTION: result = list0 == list0 
list0 = SortedList([225, 225], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF0 = [225, 225] : <type 'list'>
REFERENCE ACTION: result_REF = list_REF0 == list_REF0 
==================================================
ival4 = ival1 - ival2                                                   # STEP 40
ACTION: ival4 = ival1 - ival2 
ival1 = 57 : <type 'int'>
ival2 = 253125 : <type 'int'>
ival4 = None : <type 'NoneType'>
=> ival4 = -253068 : <type 'int'>
==================================================
list3 = sortedcontainers.SortedList()                                   # STEP 41
ACTION: list3 = sortedcontainers.SortedList() 
list3 = None : <type 'NoneType'>
list_REF3 = None : <type 'NoneType'>
=> list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: list_REF3 = [] 
=> list_REF3 = [] : <type 'list'>
==================================================
set0 = set3 | set3                                                      # STEP 42
ACTION: set0 = set3 | set3 
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF3 = set([]) : <type 'set'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF0 = set_REF3 | set_REF3 
==================================================
sval9 = 'g'                                                             # STEP 43
ACTION: sval9 = 'g' 
sval9 = None : <type 'NoneType'>
=> sval9 = 'g' : <type 'str'>
==================================================
list0.irange(minimum=val1,maximum=val0,inclusive=(False,True))          # STEP 44
ACTION: list0.irange(minimum=val1,maximum=val0,inclusive=(False,True)) 
list0 = SortedList([225, 225], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val1 = 'c' : <type 'str'>
val0 = 3375 : <type 'int'>
list_REF0 = [225, 225] : <type 'list'>
REFERENCE ACTION: list_REF0.irange(minimum=val1,maximum=val0,inclusive=(False,True)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
set4 -= set4                                                            # STEP 45
ACTION: set4 -= set4 
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF4 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF4 -= set_REF4 
==================================================
set2 = set3 ^ set3                                                      # STEP 46
ACTION: set2 = set3 ^ set3 
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF3 = set([]) : <type 'set'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF2 = set_REF3 ^ set_REF3 
==================================================
ival0 = 5                                                               # STEP 47
ACTION: ival0 = 5 
ival0 = 5 : <type 'int'>
==================================================
setListSlice(list3,ival0,ival5,list3)                                   # STEP 48
ACTION: setListSlice(list3,ival0,ival5,list3) 
ival0 = 5 : <type 'int'>
ival5 = 75 : <type 'int'>
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [] : <type 'list'>
REFERENCE ACTION: sortListSetSlice(list_REF3,ival0,ival5,list_REF3) 
==================================================
set0.islice(start=None,stop=None)                                       # STEP 49
ACTION: set0.islice(start=None,stop=None) 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF0.islice(start=None,stop=None) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'islice'
==================================================
set4.irange(minimum=val1,maximum=val4,inclusive=(False,True),reverse=True)  # STEP 50
ACTION: set4.irange(minimum=val1,maximum=val4,inclusive=(False,True),reverse=True) 
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
val1 = 'c' : <type 'str'>
val4 = 225 : <type 'int'>
set_REF4 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF4.irange(minimum=val1,maximum=val4,inclusive=(False,True),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'irange'
==================================================
ival2 = ival2 - ival7                                                   # STEP 51
ACTION: ival2 = ival2 - ival7 
ival2 = 253125 : <type 'int'>
ival7 = 18 : <type 'int'>
=> ival2 = 253107 : <type 'int'>
==================================================
iter(set1)                                                              # STEP 52
ACTION: iter(set1) 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: iter(set_REF1) 
==================================================
list0.irange(minimum=val4,maximum=val1,inclusive=(True,False))          # STEP 53
ACTION: list0.irange(minimum=val4,maximum=val1,inclusive=(True,False)) 
list0 = SortedList([225, 225], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val4 = 225 : <type 'int'>
val1 = 'c' : <type 'str'>
list_REF0 = [225, 225] : <type 'list'>
REFERENCE ACTION: list_REF0.irange(minimum=val4,maximum=val1,inclusive=(True,False)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
set3 = set2.copy()                                                      # STEP 54
ACTION: set3 = set2.copy() 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF2 = set([]) : <type 'set'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF3 = set_REF2.copy() 
==================================================
list3.irange(minimum=val4,maximum=val0,inclusive=(False,False),reverse=True)  # STEP 55
ACTION: list3.irange(minimum=val4,maximum=val0,inclusive=(False,False),reverse=True) 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val4 = 225 : <type 'int'>
val0 = 3375 : <type 'int'>
list_REF3 = [] : <type 'list'>
REFERENCE ACTION: list_REF3.irange(minimum=val4,maximum=val0,inclusive=(False,False),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
set0 = sortedcontainers.SortedSet()                                     # STEP 56
ACTION: set0 = sortedcontainers.SortedSet() 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF0 = set([]) 
==================================================
result = list3 == list0                                                 # STEP 57
ACTION: result = list3 == list0 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list0 = SortedList([225, 225], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [] : <type 'list'>
list_REF0 = [225, 225] : <type 'list'>
REFERENCE ACTION: result_REF = list_REF3 == list_REF0 
==================================================
set2.remove(val7)                                                       # STEP 58
ACTION: set2.remove(val7) 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
val7 = 225 : <type 'int'>
set_REF2 = set([]) : <type 'set'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.KeyError'> 225
REFERENCE ACTION: set_REF2.remove(val7) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.KeyError'> 225
==================================================
set4 = sortedcontainers.SortedSet()                                     # STEP 59
ACTION: set4 = sortedcontainers.SortedSet() 
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF4 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF4 = set([]) 
==================================================
set2.irange(minimum=val0,maximum=val0,inclusive=(False,True))           # STEP 60
ACTION: set2.irange(minimum=val0,maximum=val0,inclusive=(False,True)) 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
val0 = 3375 : <type 'int'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF2.irange(minimum=val0,maximum=val0,inclusive=(False,True)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'irange'
==================================================
set1.update(list0)                                                      # STEP 61
ACTION: set1.update(list0) 
list0 = SortedList([225, 225], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
list_REF0 = [225, 225] : <type 'list'>
set_REF1 = set([]) : <type 'set'>
=> set1 = SortedSet([225], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF1.update(list_REF0) 
=> set_REF1 = set([225]) : <type 'set'>
==================================================
list0.extend(list3)                                                     # STEP 62
ACTION: list0.extend(list3) 
list0 = SortedList([225, 225], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF0 = [225, 225] : <type 'list'>
list_REF3 = [] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x120b0c290>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 702166, in act11953
    self.p_list[0].extend(self.p_list[3])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 4
STOPPING TESTING DUE TO TIMEOUT
22.8770841411 PERCENT COVERED
60.2711980343 TOTAL RUNTIME
31 EXECUTED
2967 TOTAL TEST OPERATIONS
1.75631308556 TIME SPENT EXECUTING TEST OPERATIONS
54.9120874405 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
1.60217690468 TIME SPENT CHECKING PROPERTIES
3.35848999023 TOTAL TIME SPENT RUNNING SUT
0.538732051849 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
sval1 = 'c'                                                              # STEP 0
sval0 = 'w'                                                              # STEP 1
ival9 = 15                                                               # STEP 2
set0 = sortedcontainers.SortedSet()                                      # STEP 3
set2 = set0 | set0                                                       # STEP 4
sval8 = 'n'                                                              # STEP 5
ival5 = ival9 * ival9                                                    # STEP 6
set2 < set0                                                              # STEP 7
set0 < set0                                                              # STEP 8
ival0 = 5                                                                # STEP 9
set0 = sortedcontainers.SortedSet()                                     # STEP 10
val1 = sval1                                                            # STEP 11
set3 = sortedcontainers.SortedSet()                                     # STEP 12
sval3 = 'h'                                                             # STEP 13
set2 = sortedcontainers.SortedSet()                                     # STEP 14
val7 = ival5                                                            # STEP 15
set1 = set0.copy()                                                      # STEP 16
sval6 = 'x'                                                             # STEP 17
ival3 = ival9 * ival5                                                   # STEP 18
set4 = set2 | set0                                                      # STEP 19
set4.irange(minimum=val1,maximum=val1,inclusive=(False,False))          # STEP 20
val0 = ival3                                                            # STEP 21
val4 = ival5                                                            # STEP 22
ival5 = ival0 * ival9                                                   # STEP 23
ival7 = 18                                                              # STEP 24
list0 = sortedcontainers.SortedList()                                   # STEP 25
list0.islice(start=None,stop=ival3)                                     # STEP 26
set4.irange(minimum=val0,maximum=val7,inclusive=(False,False))          # STEP 27
ival2 = ival3 * ival5                                                   # STEP 28
list0.insert(ival2,val7)                                                # STEP 29
set2.irange(minimum=val0,maximum=val7,inclusive=(True,False),reverse=True)  # STEP 30
ival1 = ival5 - ival7                                                   # STEP 31
list0.extend(list0)                                                     # STEP 32
set4 = set2 ^ set0                                                      # STEP 33
list0 > list0                                                           # STEP 34
result = list0 == list0                                                 # STEP 35
set0.irange(minimum=val1,maximum=val7,inclusive=(False,True))           # STEP 36
result = list0 == list0                                                 # STEP 37
sval5 = 'b'                                                             # STEP 38
result = list0 == list0                                                 # STEP 39
ival4 = ival1 - ival2                                                   # STEP 40
list3 = sortedcontainers.SortedList()                                   # STEP 41
set0 = set3 | set3                                                      # STEP 42
sval9 = 'g'                                                             # STEP 43
list0.irange(minimum=val1,maximum=val0,inclusive=(False,True))          # STEP 44
set4 -= set4                                                            # STEP 45
set2 = set3 ^ set3                                                      # STEP 46
ival0 = 5                                                               # STEP 47
setListSlice(list3,ival0,ival5,list3)                                   # STEP 48
set0.islice(start=None,stop=None)                                       # STEP 49
set4.irange(minimum=val1,maximum=val4,inclusive=(False,True),reverse=True)  # STEP 50
ival2 = ival2 - ival7                                                   # STEP 51
iter(set1)                                                              # STEP 52
list0.irange(minimum=val4,maximum=val1,inclusive=(True,False))          # STEP 53
set3 = set2.copy()                                                      # STEP 54
list3.irange(minimum=val4,maximum=val0,inclusive=(False,False),reverse=True)  # STEP 55
set0 = sortedcontainers.SortedSet()                                     # STEP 56
result = list3 == list0                                                 # STEP 57
set2.remove(val7)                                                       # STEP 58
set4 = sortedcontainers.SortedSet()                                     # STEP 59
set2.irange(minimum=val0,maximum=val0,inclusive=(False,True))           # STEP 60
set1.update(list0)                                                      # STEP 61
list0.extend(list3)                                                     # STEP 62
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x120b0c290>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 702166, in act11953
    self.p_list[0].extend(self.p_list[3])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
572 BRANCHES COVERED
437 STATEMENTS COVERED

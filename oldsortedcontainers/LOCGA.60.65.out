Random testing using config=Config(noExceptionMatch=False, generalize=False, localize=False, speed='FAST', probs='locsample.probs', LOCBaseline=0.2, noAlphaConvert=False, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, html=None, keepLast=False, stopWhenNoCoverage=None, generateLOC=None, computeFeatureStats=False, Pmutate=0.8, timeout=60, output='failure.10792.test', markov=None, noSwarmDependencies=False, startExploit=0.0, maxMustHitBranch=None, useHints=False, silentFail=False, highLowSwarm=None, maxMustHitStatement=None, progress=False, postCover=False, swarmLength=None, noCover=False, noEnumerateEnabled=False, full=True, swarmP=0.5, coverFile='coverage.out', markovP=1.0, swarmProbs=None, genDepth=None, exploitCeiling=0.1, logging=None, noCheck=False, throughput=False, uncaught=False, swarmSwitch=None, verbose=False, reducePool=False, exploit=0.8, fastQuickAnalysis=False, total=False, verboseExploit=False, swarm=False, sequenceP=1.0, biasLOC=None, timedProgress=30, relax=False, ddmin=False, stutter=None, readQuick=False, verboseActions=False, quickAnalysis=False, noReassign=False, sequenceSize=3, LOCProbs=False, sequencesFromTests=None, maxTests=-1, trackMaxCoverage=None, useQuickSequences=False, exploitBestHint=1, failedLogging=None, stopWhenStatements=None, greedyStutter=False, seed=None, stopWhenHitStatement=None, uniqueValuesAnalysis=False, normalize=False, startExploitStall=0, enumerateEnabled=False, internal=False, profile=False, multiple=True, stopWhenBranches=None, running=False, compareFails=False, Pcrossover=0.2, stopWhenHitBranch=None, depth=100, showActions=False)
** STARTING EXPLOITATION OF TESTS AT TIME 0.651150941849 AFTER 0 TESTS WITH NO NEW COVERAGE **
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x11fb67170>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 702166, in act11953
    self.p_list[0].extend(self.p_list[3])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
Original test has 71 steps

SAVING TEST AS failure.10792.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
dict1 = sortedcontainers.SortedDict()                                    # STEP 0
ACTION: dict1 = sortedcontainers.SortedDict() 
dict1 = None : <type 'NoneType'>
dict_REF1 = None : <type 'NoneType'>
=> dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF1 = {} 
=> dict_REF1 = {} : <type 'dict'>
==================================================
sval0 = 'K'                                                              # STEP 1
ACTION: sval0 = 'K' 
sval0 = None : <type 'NoneType'>
=> sval0 = 'K' : <type 'str'>
==================================================
dict3 = dict1.copy()                                                     # STEP 2
ACTION: dict3 = dict1.copy() 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict3 = None : <type 'NoneType'>
dict_REF1 = {} : <type 'dict'>
dict_REF3 = None : <type 'NoneType'>
=> dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF3 = dict_REF1.copy() 
=> dict_REF3 = {} : <type 'dict'>
==================================================
result = sorted(list(dict1.items()))                                     # STEP 3
ACTION: result = sorted(list(dict1.items())) 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = sorted(list(dict_REF1.items())) 
==================================================
result = sorted(list(dict3.keys()))                                      # STEP 4
ACTION: result = sorted(list(dict3.keys())) 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = sorted(list(dict_REF3.keys())) 
==================================================
result = len(dict3.keys())                                               # STEP 5
ACTION: result = len(dict3.keys())  
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF3.keys())  
==================================================
repr(dict1)                                                              # STEP 6
ACTION: repr(dict1) 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: repr(dict_REF1) 
==================================================
val2 = sval0                                                             # STEP 7
ACTION: val2 = sval0 
sval0 = 'K' : <type 'str'>
val2 = None : <type 'NoneType'>
=> val2 = 'K' : <type 'str'>
==================================================
list3 = sortedcontainers.SortedList()                                    # STEP 8
ACTION: list3 = sortedcontainers.SortedList() 
list3 = None : <type 'NoneType'>
list_REF3 = None : <type 'NoneType'>
=> list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: list_REF3 = [] 
=> list_REF3 = [] : <type 'list'>
==================================================
sval9 = 'R'                                                              # STEP 9
ACTION: sval9 = 'R' 
sval9 = None : <type 'NoneType'>
=> sval9 = 'R' : <type 'str'>
==================================================
dict1.irange(minimum=val2,maximum=val2,inclusive=(True,False))          # STEP 10
ACTION: dict1.irange(minimum=val2,maximum=val2,inclusive=(True,False)) 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val2 = 'K' : <type 'str'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF1.irange(minimum=val2,maximum=val2,inclusive=(True,False)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'irange'
==================================================
dict3.irange(minimum=val2,maximum=val2,inclusive=(False,False))         # STEP 11
ACTION: dict3.irange(minimum=val2,maximum=val2,inclusive=(False,False)) 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val2 = 'K' : <type 'str'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF3.irange(minimum=val2,maximum=val2,inclusive=(False,False)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'irange'
==================================================
dict1.irange(minimum=val2,maximum=val2,inclusive=(False,True))          # STEP 12
ACTION: dict1.irange(minimum=val2,maximum=val2,inclusive=(False,True)) 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val2 = 'K' : <type 'str'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF1.irange(minimum=val2,maximum=val2,inclusive=(False,True)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'irange'
==================================================
sval6 = 'K'                                                             # STEP 13
ACTION: sval6 = 'K' 
sval6 = None : <type 'NoneType'>
=> sval6 = 'K' : <type 'str'>
==================================================
result = dict3 == dict3                                                 # STEP 14
ACTION: result = dict3 == dict3 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = dict_REF3 == dict_REF3 
==================================================
list3 > list3                                                           # STEP 15
ACTION: list3 > list3 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [] : <type 'list'>
REFERENCE ACTION: list_REF3 > list_REF3 
==================================================
dict4 = dict1.fromkeys(list3,val2) ; result = dict4                     # STEP 16
ACTION: dict4 = dict1.fromkeys(list3,val2) ; result = dict4 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict4 = None : <type 'NoneType'>
val2 = 'K' : <type 'str'>
list_REF3 = [] : <type 'list'>
dict_REF1 = {} : <type 'dict'>
dict_REF4 = None : <type 'NoneType'>
=> dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF4 = dict_REF1.fromkeys(list_REF3,val2) ; result_REF = dict_REF4 
=> dict_REF4 = {} : <type 'dict'>
==================================================
dict1.irange(minimum=val2,maximum=val2,inclusive=(False,True))          # STEP 17
ACTION: dict1.irange(minimum=val2,maximum=val2,inclusive=(False,True)) 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val2 = 'K' : <type 'str'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF1.irange(minimum=val2,maximum=val2,inclusive=(False,True)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'irange'
==================================================
list3 >= list3                                                          # STEP 18
ACTION: list3 >= list3 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [] : <type 'list'>
REFERENCE ACTION: list_REF3 >= list_REF3 
==================================================
result = dict1.pop(val2)                                                # STEP 19
ACTION: result = dict1.pop(val2) 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val2 = 'K' : <type 'str'>
dict_REF1 = {} : <type 'dict'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.KeyError'> 'K'
REFERENCE ACTION: result_REF = dict_REF1.pop(val2) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.KeyError'> 'K'
==================================================
dict0 = dict1.fromkeys(list3,val2) ; result = dict0                     # STEP 20
ACTION: dict0 = dict1.fromkeys(list3,val2) ; result = dict0 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict0 = None : <type 'NoneType'>
val2 = 'K' : <type 'str'>
list_REF3 = [] : <type 'list'>
dict_REF1 = {} : <type 'dict'>
dict_REF0 = None : <type 'NoneType'>
=> dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF0 = dict_REF1.fromkeys(list_REF3,val2) ; result_REF = dict_REF0 
=> dict_REF0 = {} : <type 'dict'>
==================================================
list3.discard(val2)                                                     # STEP 21
ACTION: list3.discard(val2) 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val2 = 'K' : <type 'str'>
list_REF3 = [] : <type 'list'>
REFERENCE ACTION: sortListDiscard(list_REF3,val2) 
==================================================
set1 = sortedcontainers.SortedSet()                                     # STEP 22
ACTION: set1 = sortedcontainers.SortedSet() 
set1 = None : <type 'NoneType'>
set_REF1 = None : <type 'NoneType'>
=> set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF1 = set([]) 
=> set_REF1 = set([]) : <type 'set'>
==================================================
set4 = set1.union(set1)                                                 # STEP 23
ACTION: set4 = set1.union(set1) 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set4 = None : <type 'NoneType'>
set_REF1 = set([]) : <type 'set'>
set_REF4 = None : <type 'NoneType'>
=> set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF4 = set_REF1.union(set_REF1) 
=> set_REF4 = set([]) : <type 'set'>
==================================================
set2 = set4 - set1                                                      # STEP 24
ACTION: set2 = set4 - set1 
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set2 = None : <type 'NoneType'>
set_REF4 = set([]) : <type 'set'>
set_REF1 = set([]) : <type 'set'>
set_REF2 = None : <type 'NoneType'>
=> set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF2 = set_REF4 - set_REF1 
=> set_REF2 = set([]) : <type 'set'>
==================================================
list3 >= list3                                                          # STEP 25
ACTION: list3 >= list3 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [] : <type 'list'>
REFERENCE ACTION: list_REF3 >= list_REF3 
==================================================
set1.irange(minimum=val2,maximum=val2,inclusive=(False,False))          # STEP 26
ACTION: set1.irange(minimum=val2,maximum=val2,inclusive=(False,False)) 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
val2 = 'K' : <type 'str'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1.irange(minimum=val2,maximum=val2,inclusive=(False,False)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'irange'
==================================================
set2.irange(minimum=val2,maximum=val2,inclusive=(False,True),reverse=True)  # STEP 27
ACTION: set2.irange(minimum=val2,maximum=val2,inclusive=(False,True),reverse=True) 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
val2 = 'K' : <type 'str'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF2.irange(minimum=val2,maximum=val2,inclusive=(False,True),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'irange'
==================================================
result = dict1.peekitem()                                               # STEP 28
ACTION: result = dict1.peekitem() 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {} : <type 'dict'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: result_REF = sortDictPeekitem(dict_REF1,) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
==================================================
dict1 = dict3.copy()                                                    # STEP 29
ACTION: dict1 = dict3.copy() 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF1 = dict_REF3.copy() 
==================================================
result = list3 == list3                                                 # STEP 30
ACTION: result = list3 == list3 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [] : <type 'list'>
REFERENCE ACTION: result_REF = list_REF3 == list_REF3 
==================================================
list0 = sortedcontainers.SortedList()                                   # STEP 31
ACTION: list0 = sortedcontainers.SortedList() 
list0 = None : <type 'NoneType'>
list_REF0 = None : <type 'NoneType'>
=> list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: list_REF0 = [] 
=> list_REF0 = [] : <type 'list'>
==================================================
reversed(dict1)                                                         # STEP 32
ACTION: reversed(dict1) 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: reversed(dict_REF1) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.TypeError'> argument to reversed() must be a sequence
==================================================
dict3.irange(minimum=val2,maximum=val2,inclusive=(False,False),reverse=True)  # STEP 33
ACTION: dict3.irange(minimum=val2,maximum=val2,inclusive=(False,False),reverse=True) 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val2 = 'K' : <type 'str'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF3.irange(minimum=val2,maximum=val2,inclusive=(False,False),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'irange'
==================================================
list3.irange(minimum=val2,maximum=val2,inclusive=(False,True),reverse=True)  # STEP 34
ACTION: list3.irange(minimum=val2,maximum=val2,inclusive=(False,True),reverse=True) 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val2 = 'K' : <type 'str'>
list_REF3 = [] : <type 'list'>
REFERENCE ACTION: list_REF3.irange(minimum=val2,maximum=val2,inclusive=(False,True),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
dict0.update(dict3)                                                     # STEP 35
ACTION: dict0.update(dict3) 
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF0 = {} : <type 'dict'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF0.update(dict_REF3) 
==================================================
dict1 = dict1.copy()                                                    # STEP 36
ACTION: dict1 = dict1.copy() 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF1 = dict_REF1.copy() 
==================================================
set1.irange(minimum=val2,maximum=val2,inclusive=(True,False),reverse=True)  # STEP 37
ACTION: set1.irange(minimum=val2,maximum=val2,inclusive=(True,False),reverse=True) 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
val2 = 'K' : <type 'str'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1.irange(minimum=val2,maximum=val2,inclusive=(True,False),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'irange'
==================================================
set1 = set2.copy()                                                      # STEP 38
ACTION: set1 = set2.copy() 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF2 = set([]) : <type 'set'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1 = set_REF2.copy() 
==================================================
result = dict0 != dict3                                                 # STEP 39
ACTION: result = dict0 != dict3 
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF0 = {} : <type 'dict'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = dict_REF0 != dict_REF3 
==================================================
val4 = sval0                                                            # STEP 40
ACTION: val4 = sval0 
sval0 = 'K' : <type 'str'>
val4 = None : <type 'NoneType'>
=> val4 = 'K' : <type 'str'>
==================================================
dict0 = sortedcontainers.SortedDict()                                   # STEP 41
ACTION: dict0 = sortedcontainers.SortedDict() 
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF0 = {} 
==================================================
dict0.update(dict3)                                                     # STEP 42
ACTION: dict0.update(dict3) 
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF0 = {} : <type 'dict'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF0.update(dict_REF3) 
==================================================
result = len(dict1)                                                     # STEP 43
ACTION: result = len(dict1) 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF1) 
==================================================
val2 in dict4                                                           # STEP 44
ACTION: val2 in dict4 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val2 = 'K' : <type 'str'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: val2 in dict_REF4 
==================================================
result = (dict0.keys()).count(val2)                                     # STEP 45
ACTION: result = (dict0.keys()).count(val2)  
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val2 = 'K' : <type 'str'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = (dict_REF0.keys()).count(val2)  
==================================================
result = list0 == list0                                                 # STEP 46
ACTION: result = list0 == list0 
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF0 = [] : <type 'list'>
REFERENCE ACTION: result_REF = list_REF0 == list_REF0 
==================================================
result = len(dict1.keys())                                              # STEP 47
ACTION: result = len(dict1.keys())  
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF1.keys())  
==================================================
result = dict0 != dict0                                                 # STEP 48
ACTION: result = dict0 != dict0 
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = dict_REF0 != dict_REF0 
==================================================
result = len(dict1.keys())                                              # STEP 49
ACTION: result = len(dict1.keys())  
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF1.keys())  
==================================================
dict0.get(val4,val2)                                                    # STEP 50
ACTION: dict0.get(val4,val2) 
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val4 = 'K' : <type 'str'>
val2 = 'K' : <type 'str'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF0.get(val4,val2) 
==================================================
result = dict0 == dict4                                                 # STEP 51
ACTION: result = dict0 == dict4 
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF0 = {} : <type 'dict'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = dict_REF0 == dict_REF4 
==================================================
set1.irange(minimum=val4,maximum=val4,inclusive=(False,False),reverse=True)  # STEP 52
ACTION: set1.irange(minimum=val4,maximum=val4,inclusive=(False,False),reverse=True) 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
val4 = 'K' : <type 'str'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1.irange(minimum=val4,maximum=val4,inclusive=(False,False),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'irange'
==================================================
list0.add(val4)                                                         # STEP 53
ACTION: list0.add(val4) 
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val4 = 'K' : <type 'str'>
list_REF0 = [] : <type 'list'>
=> list0 = SortedList(['K'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: sortListAdd(list_REF0,val4) 
=> list_REF0 = ['K'] : <type 'list'>
==================================================
list0.irange(minimum=val2,maximum=val4,inclusive=(True,False))          # STEP 54
ACTION: list0.irange(minimum=val2,maximum=val4,inclusive=(True,False)) 
list0 = SortedList(['K'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val2 = 'K' : <type 'str'>
val4 = 'K' : <type 'str'>
list_REF0 = ['K'] : <type 'list'>
REFERENCE ACTION: list_REF0.irange(minimum=val2,maximum=val4,inclusive=(True,False)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
set1 &= set4                                                            # STEP 55
ACTION: set1 &= set4 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF1 = set([]) : <type 'set'>
set_REF4 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1 &= set_REF4 
==================================================
result = (dict3.keys()).count(val4)                                     # STEP 56
ACTION: result = (dict3.keys()).count(val4)  
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val4 = 'K' : <type 'str'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = (dict_REF3.keys()).count(val4)  
==================================================
dict0 [val2]                                                            # STEP 57
ACTION: dict0 [val2] 
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val2 = 'K' : <type 'str'>
dict_REF0 = {} : <type 'dict'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.KeyError'> 'K'
REFERENCE ACTION: dict_REF0 [val2] 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.KeyError'> 'K'
==================================================
set1.irange(minimum=val2,maximum=val2,inclusive=(True,False),reverse=True)  # STEP 58
ACTION: set1.irange(minimum=val2,maximum=val2,inclusive=(True,False),reverse=True) 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
val2 = 'K' : <type 'str'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1.irange(minimum=val2,maximum=val2,inclusive=(True,False),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'irange'
==================================================
set4.irange(minimum=val2,maximum=val2,inclusive=(True,False),reverse=True)  # STEP 59
ACTION: set4.irange(minimum=val2,maximum=val2,inclusive=(True,False),reverse=True) 
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
val2 = 'K' : <type 'str'>
set_REF4 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF4.irange(minimum=val2,maximum=val2,inclusive=(True,False),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'irange'
==================================================
set4 ^= set4                                                            # STEP 60
ACTION: set4 ^= set4 
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF4 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF4 ^= set_REF4 
==================================================
dict1.irange(minimum=val4,maximum=val2,inclusive=(False,True),reverse=True)  # STEP 61
ACTION: dict1.irange(minimum=val4,maximum=val2,inclusive=(False,True),reverse=True) 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val4 = 'K' : <type 'str'>
val2 = 'K' : <type 'str'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF1.irange(minimum=val4,maximum=val2,inclusive=(False,True),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'irange'
==================================================
ival9 = 10                                                              # STEP 62
ACTION: ival9 = 10 
ival9 = None : <type 'NoneType'>
=> ival9 = 10 : <type 'int'>
==================================================
dict0.irange(minimum=val4,maximum=val2,inclusive=(False,False))         # STEP 63
ACTION: dict0.irange(minimum=val4,maximum=val2,inclusive=(False,False)) 
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val4 = 'K' : <type 'str'>
val2 = 'K' : <type 'str'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF0.irange(minimum=val4,maximum=val2,inclusive=(False,False)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'irange'
==================================================
dict2 = dict3.fromkeys(set2,val4) ; result = dict2                      # STEP 64
ACTION: dict2 = dict3.fromkeys(set2,val4) ; result = dict2 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict2 = None : <type 'NoneType'>
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
val4 = 'K' : <type 'str'>
dict_REF3 = {} : <type 'dict'>
dict_REF2 = None : <type 'NoneType'>
set_REF2 = set([]) : <type 'set'>
=> dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF2 = dict_REF3.fromkeys(set_REF2,val4) ; result_REF = dict_REF2 
=> dict_REF2 = {} : <type 'dict'>
==================================================
dict4 = sortedcontainers.SortedDict()                                   # STEP 65
ACTION: dict4 = sortedcontainers.SortedDict() 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF4 = {} 
==================================================
ival1 = ival9 * ival9                                                   # STEP 66
ACTION: ival1 = ival9 * ival9 
ival9 = 10 : <type 'int'>
ival1 = None : <type 'NoneType'>
=> ival1 = 100 : <type 'int'>
==================================================
set4 = set1 & set2                                                      # STEP 67
ACTION: set4 = set1 & set2 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF1 = set([]) : <type 'set'>
set_REF2 = set([]) : <type 'set'>
set_REF4 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF4 = set_REF1 & set_REF2 
==================================================
reversed(list3)                                                         # STEP 68
ACTION: reversed(list3) 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [] : <type 'list'>
REFERENCE ACTION: reversed(list_REF3) 
==================================================
list3.islice(start=None,stop=ival9)                                     # STEP 69
ACTION: list3.islice(start=None,stop=ival9) 
ival9 = 10 : <type 'int'>
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF3 = [] : <type 'list'>
REFERENCE ACTION: list_REF3.islice(start=None,stop=ival9) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'islice'
==================================================
list0.extend(list3)                                                     # STEP 70
ACTION: list0.extend(list3) 
list0 = SortedList(['K'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF0 = ['K'] : <type 'list'>
list_REF3 = [] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x11fb9f128>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 702166, in act11953
    self.p_list[0].extend(self.p_list[3])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #12 STEP #17 (0:00:30.013381) Mon Nov 20 18:41:43 2017 [ 396 stmts 521 branches ] 1088 TOTAL ACTIONS (36.2504977311/s)
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 168
STOPPING TESTING DUE TO TIMEOUT
25.3974408686 PERCENT COVERED
60.2214648724 TOTAL RUNTIME
24 EXECUTED
2346 TOTAL TEST OPERATIONS
1.5052189827 TIME SPENT EXECUTING TEST OPERATIONS
56.0942437649 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
1.40392923355 TIME SPENT CHECKING PROPERTIES
2.90914821625 TOTAL TIME SPENT RUNNING SUT
0.475025653839 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
dict1 = sortedcontainers.SortedDict()                                    # STEP 0
sval0 = 'K'                                                              # STEP 1
dict3 = dict1.copy()                                                     # STEP 2
result = sorted(list(dict1.items()))                                     # STEP 3
result = sorted(list(dict3.keys()))                                      # STEP 4
result = len(dict3.keys())                                               # STEP 5
repr(dict1)                                                              # STEP 6
val2 = sval0                                                             # STEP 7
list3 = sortedcontainers.SortedList()                                    # STEP 8
sval9 = 'R'                                                              # STEP 9
dict1.irange(minimum=val2,maximum=val2,inclusive=(True,False))          # STEP 10
dict3.irange(minimum=val2,maximum=val2,inclusive=(False,False))         # STEP 11
dict1.irange(minimum=val2,maximum=val2,inclusive=(False,True))          # STEP 12
sval6 = 'K'                                                             # STEP 13
result = dict3 == dict3                                                 # STEP 14
list3 > list3                                                           # STEP 15
dict4 = dict1.fromkeys(list3,val2) ; result = dict4                     # STEP 16
dict1.irange(minimum=val2,maximum=val2,inclusive=(False,True))          # STEP 17
list3 >= list3                                                          # STEP 18
result = dict1.pop(val2)                                                # STEP 19
dict0 = dict1.fromkeys(list3,val2) ; result = dict0                     # STEP 20
list3.discard(val2)                                                     # STEP 21
set1 = sortedcontainers.SortedSet()                                     # STEP 22
set4 = set1.union(set1)                                                 # STEP 23
set2 = set4 - set1                                                      # STEP 24
list3 >= list3                                                          # STEP 25
set1.irange(minimum=val2,maximum=val2,inclusive=(False,False))          # STEP 26
set2.irange(minimum=val2,maximum=val2,inclusive=(False,True),reverse=True)  # STEP 27
result = dict1.peekitem()                                               # STEP 28
dict1 = dict3.copy()                                                    # STEP 29
result = list3 == list3                                                 # STEP 30
list0 = sortedcontainers.SortedList()                                   # STEP 31
reversed(dict1)                                                         # STEP 32
dict3.irange(minimum=val2,maximum=val2,inclusive=(False,False),reverse=True)  # STEP 33
list3.irange(minimum=val2,maximum=val2,inclusive=(False,True),reverse=True)  # STEP 34
dict0.update(dict3)                                                     # STEP 35
dict1 = dict1.copy()                                                    # STEP 36
set1.irange(minimum=val2,maximum=val2,inclusive=(True,False),reverse=True)  # STEP 37
set1 = set2.copy()                                                      # STEP 38
result = dict0 != dict3                                                 # STEP 39
val4 = sval0                                                            # STEP 40
dict0 = sortedcontainers.SortedDict()                                   # STEP 41
dict0.update(dict3)                                                     # STEP 42
result = len(dict1)                                                     # STEP 43
val2 in dict4                                                           # STEP 44
result = (dict0.keys()).count(val2)                                     # STEP 45
result = list0 == list0                                                 # STEP 46
result = len(dict1.keys())                                              # STEP 47
result = dict0 != dict0                                                 # STEP 48
result = len(dict1.keys())                                              # STEP 49
dict0.get(val4,val2)                                                    # STEP 50
result = dict0 == dict4                                                 # STEP 51
set1.irange(minimum=val4,maximum=val4,inclusive=(False,False),reverse=True)  # STEP 52
list0.add(val4)                                                         # STEP 53
list0.irange(minimum=val2,maximum=val4,inclusive=(True,False))          # STEP 54
set1 &= set4                                                            # STEP 55
result = (dict3.keys()).count(val4)                                     # STEP 56
dict0 [val2]                                                            # STEP 57
set1.irange(minimum=val2,maximum=val2,inclusive=(True,False),reverse=True)  # STEP 58
set4.irange(minimum=val2,maximum=val2,inclusive=(True,False),reverse=True)  # STEP 59
set4 ^= set4                                                            # STEP 60
dict1.irange(minimum=val4,maximum=val2,inclusive=(False,True),reverse=True)  # STEP 61
ival9 = 10                                                              # STEP 62
dict0.irange(minimum=val4,maximum=val2,inclusive=(False,False))         # STEP 63
dict2 = dict3.fromkeys(set2,val4) ; result = dict2                      # STEP 64
dict4 = sortedcontainers.SortedDict()                                   # STEP 65
ival1 = ival9 * ival9                                                   # STEP 66
set4 = set1 & set2                                                      # STEP 67
reversed(list3)                                                         # STEP 68
list3.islice(start=None,stop=ival9)                                     # STEP 69
list0.extend(list3)                                                     # STEP 70
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x11fb9f128>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 702166, in act11953
    self.p_list[0].extend(self.p_list[3])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
629 BRANCHES COVERED
483 STATEMENTS COVERED

Random testing using config=Config(noExceptionMatch=False, generalize=False, localize=False, speed='FAST', probs='locsample.probs', LOCBaseline=0.2, noAlphaConvert=False, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, html=None, keepLast=False, stopWhenNoCoverage=None, generateLOC=None, computeFeatureStats=False, Pmutate=0.0, timeout=60, output='failure.11370.test', markov=None, noSwarmDependencies=False, startExploit=0.0, maxMustHitBranch=None, useHints=False, silentFail=False, highLowSwarm=None, maxMustHitStatement=None, progress=False, postCover=False, swarmLength=None, noCover=False, noEnumerateEnabled=False, full=True, swarmP=0.5, coverFile='coverage.out', markovP=1.0, swarmProbs=None, genDepth=None, exploitCeiling=0.1, logging=None, noCheck=False, throughput=False, uncaught=False, swarmSwitch=None, verbose=False, reducePool=False, exploit=None, fastQuickAnalysis=False, total=False, verboseExploit=False, swarm=True, sequenceP=1.0, biasLOC=None, timedProgress=30, relax=False, ddmin=False, stutter=None, readQuick=False, verboseActions=False, quickAnalysis=False, noReassign=False, sequenceSize=3, LOCProbs=False, sequencesFromTests=None, maxTests=-1, trackMaxCoverage=None, useQuickSequences=False, exploitBestHint=1, failedLogging=None, stopWhenStatements=None, greedyStutter=False, seed=None, stopWhenHitStatement=None, uniqueValuesAnalysis=False, normalize=False, startExploitStall=0, enumerateEnabled=False, internal=False, profile=False, multiple=True, stopWhenBranches=None, running=False, compareFails=False, Pcrossover=0.2, stopWhenHitBranch=None, depth=100, showActions=False)
TEST #17 STEP #62 (0:00:30.029987) Mon Nov 20 21:46:58 2017 [ 376 stmts 494 branches ] 1662 TOTAL ACTIONS (55.344679125/s)
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x120d2f3b0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 702580, in act11960
    self.p_list[2].extend(self.p_list[0])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
Original test has 69 steps

SAVING TEST AS failure.11370.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
dict1 = sortedcontainers.SortedDict()                                    # STEP 0
ACTION: dict1 = sortedcontainers.SortedDict() 
dict1 = None : <type 'NoneType'>
dict_REF1 = None : <type 'NoneType'>
=> dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF1 = {} 
=> dict_REF1 = {} : <type 'dict'>
==================================================
dict4 = sortedcontainers.SortedDict()                                    # STEP 1
ACTION: dict4 = sortedcontainers.SortedDict() 
dict4 = None : <type 'NoneType'>
dict_REF4 = None : <type 'NoneType'>
=> dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF4 = {} 
=> dict_REF4 = {} : <type 'dict'>
==================================================
set2 = sortedcontainers.SortedSet()                                      # STEP 2
ACTION: set2 = sortedcontainers.SortedSet() 
set2 = None : <type 'NoneType'>
set_REF2 = None : <type 'NoneType'>
=> set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF2 = set([]) 
=> set_REF2 = set([]) : <type 'set'>
==================================================
list2 = sortedcontainers.SortedList()                                    # STEP 3
ACTION: list2 = sortedcontainers.SortedList() 
list2 = None : <type 'NoneType'>
list_REF2 = None : <type 'NoneType'>
=> list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: list_REF2 = [] 
=> list_REF2 = [] : <type 'list'>
==================================================
dict0 = sortedcontainers.SortedDict()                                    # STEP 4
ACTION: dict0 = sortedcontainers.SortedDict() 
dict0 = None : <type 'NoneType'>
dict_REF0 = None : <type 'NoneType'>
=> dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF0 = {} 
=> dict_REF0 = {} : <type 'dict'>
==================================================
repr(dict4)                                                              # STEP 5
ACTION: repr(dict4) 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: repr(dict_REF4) 
==================================================
result = dict4.popitem(last=False)                                       # STEP 6
ACTION: result = dict4.popitem(last=False) 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF4 = {} : <type 'dict'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.KeyError'> 'popitem(): dictionary is empty'
REFERENCE ACTION: result_REF = sortDictPopitem(dict_REF4,last=False) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.KeyError'> 
==================================================
list0 = sortedcontainers.SortedList()                                    # STEP 7
ACTION: list0 = sortedcontainers.SortedList() 
list0 = None : <type 'NoneType'>
list_REF0 = None : <type 'NoneType'>
=> list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: list_REF0 = [] 
=> list_REF0 = [] : <type 'list'>
==================================================
set2.update(list2)                                                       # STEP 8
ACTION: set2.update(list2) 
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
list_REF2 = [] : <type 'list'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF2.update(list_REF2) 
==================================================
set4 = sortedcontainers.SortedSet()                                      # STEP 9
ACTION: set4 = sortedcontainers.SortedSet() 
set4 = None : <type 'NoneType'>
set_REF4 = None : <type 'NoneType'>
=> set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF4 = set([]) 
=> set_REF4 = set([]) : <type 'set'>
==================================================
result = len(dict1)                                                     # STEP 10
ACTION: result = len(dict1) 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF1) 
==================================================
result = list2 == list0                                                 # STEP 11
ACTION: result = list2 == list0 
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF2 = [] : <type 'list'>
list_REF0 = [] : <type 'list'>
REFERENCE ACTION: result_REF = list_REF2 == list_REF0 
==================================================
result = sorted(list(dict4.keys()))                                     # STEP 12
ACTION: result = sorted(list(dict4.keys())) 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = sorted(list(dict_REF4.keys())) 
==================================================
list0.update(list0)                                                     # STEP 13
ACTION: list0.update(list0) 
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF0 = [] : <type 'list'>
REFERENCE ACTION: sortListMultiAdd(list_REF0,list_REF0) 
==================================================
sval7 = 'J'                                                             # STEP 14
ACTION: sval7 = 'J' 
sval7 = None : <type 'NoneType'>
=> sval7 = 'J' : <type 'str'>
==================================================
list2.update(list0)                                                     # STEP 15
ACTION: list2.update(list0) 
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF2 = [] : <type 'list'>
list_REF0 = [] : <type 'list'>
REFERENCE ACTION: sortListMultiAdd(list_REF2,list_REF0) 
==================================================
repr(set4)                                                              # STEP 16
ACTION: repr(set4) 
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF4 = set([]) : <type 'set'>
REFERENCE ACTION: repr(set_REF4) 
==================================================
set1 = sortedcontainers.SortedSet()                                     # STEP 17
ACTION: set1 = sortedcontainers.SortedSet() 
set1 = None : <type 'NoneType'>
set_REF1 = None : <type 'NoneType'>
=> set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF1 = set([]) 
=> set_REF1 = set([]) : <type 'set'>
==================================================
ival9 = 3                                                               # STEP 18
ACTION: ival9 = 3 
ival9 = None : <type 'NoneType'>
=> ival9 = 3 : <type 'int'>
==================================================
set1.update(list2)                                                      # STEP 19
ACTION: set1.update(list2) 
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
list_REF2 = [] : <type 'list'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1.update(list_REF2) 
==================================================
list2+=list0                                                            # STEP 20
ACTION: list2+=list0 
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF2 = [] : <type 'list'>
list_REF0 = [] : <type 'list'>
REFERENCE ACTION: sortListMultiAdd(list_REF2,list_REF0) 
==================================================
set2.islice(start=None,stop=ival9)                                      # STEP 21
ACTION: set2.islice(start=None,stop=ival9) 
ival9 = 3 : <type 'int'>
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF2.islice(start=None,stop=ival9) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'islice'
==================================================
dict1 = sortedcontainers.SortedDict()                                   # STEP 22
ACTION: dict1 = sortedcontainers.SortedDict() 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF1 = {} 
==================================================
val3 = sval7                                                            # STEP 23
ACTION: val3 = sval7 
sval7 = 'J' : <type 'str'>
val3 = None : <type 'NoneType'>
=> val3 = 'J' : <type 'str'>
==================================================
set4 = sortedcontainers.SortedSet()                                     # STEP 24
ACTION: set4 = sortedcontainers.SortedSet() 
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF4 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF4 = set([]) 
==================================================
result = dict4.peekitem(ival9)                                          # STEP 25
ACTION: result = dict4.peekitem(ival9) 
ival9 = 3 : <type 'int'>
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF4 = {} : <type 'dict'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: result_REF = sortDictPeekitem(dict_REF4,ival9) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
==================================================
set1.irange(minimum=val3,maximum=val3,inclusive=(False,True),reverse=True)  # STEP 26
ACTION: set1.irange(minimum=val3,maximum=val3,inclusive=(False,True),reverse=True) 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
val3 = 'J' : <type 'str'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1.irange(minimum=val3,maximum=val3,inclusive=(False,True),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'irange'
==================================================
repr(set1)                                                              # STEP 27
ACTION: repr(set1) 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: repr(set_REF1) 
==================================================
set1.update(list2)                                                      # STEP 28
ACTION: set1.update(list2) 
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
list_REF2 = [] : <type 'list'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1.update(list_REF2) 
==================================================
iter(list0)                                                             # STEP 29
ACTION: iter(list0) 
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF0 = [] : <type 'list'>
REFERENCE ACTION: iter(list_REF0) 
==================================================
dict4 [val3]                                                            # STEP 30
ACTION: dict4 [val3] 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val3 = 'J' : <type 'str'>
dict_REF4 = {} : <type 'dict'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.KeyError'> 'J'
REFERENCE ACTION: dict_REF4 [val3] 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.KeyError'> 'J'
==================================================
dict4.get(val3,None)                                                    # STEP 31
ACTION: dict4.get(val3,None) 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val3 = 'J' : <type 'str'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF4.get(val3,None) 
==================================================
result = list0.pop(ival9)                                               # STEP 32
ACTION: result = list0.pop(ival9) 
ival9 = 3 : <type 'int'>
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> pop index out of range
REFERENCE ACTION: result_REF = list_REF0.pop(ival9) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> pop from empty list
==================================================
dict3 = dict0.fromkeys(set1,val3) ; result = dict3                      # STEP 33
ACTION: dict3 = dict0.fromkeys(set1,val3) ; result = dict3 
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict3 = None : <type 'NoneType'>
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
val3 = 'J' : <type 'str'>
dict_REF0 = {} : <type 'dict'>
dict_REF3 = None : <type 'NoneType'>
set_REF1 = set([]) : <type 'set'>
=> dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF3 = dict_REF0.fromkeys(set_REF1,val3) ; result_REF = dict_REF3 
=> dict_REF3 = {} : <type 'dict'>
==================================================
set1 = sortedcontainers.SortedSet()                                     # STEP 34
ACTION: set1 = sortedcontainers.SortedSet() 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1 = set([]) 
==================================================
result = len(dict1)                                                     # STEP 35
ACTION: result = len(dict1) 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF1) 
==================================================
result = sorted(list(dict1.keys()))                                     # STEP 36
ACTION: result = sorted(list(dict1.keys())) 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = sorted(list(dict_REF1.keys())) 
==================================================
result = sorted(list(dict4.keys()))                                     # STEP 37
ACTION: result = sorted(list(dict4.keys())) 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = sorted(list(dict_REF4.keys())) 
==================================================
set1.islice(start=None,stop=None)                                       # STEP 38
ACTION: set1.islice(start=None,stop=None) 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1.islice(start=None,stop=None) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'islice'
==================================================
list0.irange(minimum=val3,maximum=val3,inclusive=(True,False))          # STEP 39
ACTION: list0.irange(minimum=val3,maximum=val3,inclusive=(True,False)) 
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val3 = 'J' : <type 'str'>
list_REF0 = [] : <type 'list'>
REFERENCE ACTION: list_REF0.irange(minimum=val3,maximum=val3,inclusive=(True,False)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
list2.add(val3)                                                         # STEP 40
ACTION: list2.add(val3) 
list2 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val3 = 'J' : <type 'str'>
list_REF2 = [] : <type 'list'>
=> list2 = SortedList(['J'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: sortListAdd(list_REF2,val3) 
=> list_REF2 = ['J'] : <type 'list'>
==================================================
result = dict1.pop(val3,val3)                                           # STEP 41
ACTION: result = dict1.pop(val3,val3) 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val3 = 'J' : <type 'str'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = dict_REF1.pop(val3,val3) 
==================================================
result = (dict4.keys()).count(val3)                                     # STEP 42
ACTION: result = (dict4.keys()).count(val3)  
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val3 = 'J' : <type 'str'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = (dict_REF4.keys()).count(val3)  
==================================================
val1 = sval7                                                            # STEP 43
ACTION: val1 = sval7 
sval7 = 'J' : <type 'str'>
val1 = None : <type 'NoneType'>
=> val1 = 'J' : <type 'str'>
==================================================
result = list0.pop(ival9)                                               # STEP 44
ACTION: result = list0.pop(ival9) 
ival9 = 3 : <type 'int'>
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> pop index out of range
REFERENCE ACTION: result_REF = list_REF0.pop(ival9) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> pop from empty list
==================================================
result = sorted(list(dict1.keys()))                                     # STEP 45
ACTION: result = sorted(list(dict1.keys())) 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = sorted(list(dict_REF1.keys())) 
==================================================
ival9 = ival9 - ival9                                                   # STEP 46
ACTION: ival9 = ival9 - ival9 
ival9 = 3 : <type 'int'>
=> ival9 = 0 : <type 'int'>
==================================================
list2.update(list2)                                                     # STEP 47
ACTION: list2.update(list2) 
list2 = SortedList(['J'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF2 = ['J'] : <type 'list'>
=> list2 = SortedList(['J', 'J'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: sortListMultiAdd(list_REF2,list_REF2) 
=> list_REF2 = ['J', 'J'] : <type 'list'>
==================================================
sval8 = sval7 + sval7                                                   # STEP 48
ACTION: sval8 = sval7 + sval7 
sval7 = 'J' : <type 'str'>
sval8 = None : <type 'NoneType'>
=> sval8 = 'JJ' : <type 'str'>
==================================================
sval7 = 'E'                                                             # STEP 49
ACTION: sval7 = 'E' 
sval7 = 'J' : <type 'str'>
=> sval7 = 'E' : <type 'str'>
==================================================
result = sorted(list(dict1.keys()))                                     # STEP 50
ACTION: result = sorted(list(dict1.keys())) 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = sorted(list(dict_REF1.keys())) 
==================================================
val9 = sval8                                                            # STEP 51
ACTION: val9 = sval8 
sval8 = 'JJ' : <type 'str'>
val9 = None : <type 'NoneType'>
=> val9 = 'JJ' : <type 'str'>
==================================================
sval8 = sval7 + sval8                                                   # STEP 52
ACTION: sval8 = sval7 + sval8 
sval7 = 'E' : <type 'str'>
sval8 = 'JJ' : <type 'str'>
=> sval8 = 'EJJ' : <type 'str'>
==================================================
set1.islice(start=None,stop=ival9)                                      # STEP 53
ACTION: set1.islice(start=None,stop=ival9) 
ival9 = 0 : <type 'int'>
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1.islice(start=None,stop=ival9) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'islice'
==================================================
dict3.islice(start=ival9,stop=ival9,reverse=True)                       # STEP 54
ACTION: dict3.islice(start=ival9,stop=ival9,reverse=True) 
ival9 = 0 : <type 'int'>
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF3.islice(start=ival9,stop=ival9,reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'islice'
==================================================
dict4 [val3]                                                            # STEP 55
ACTION: dict4 [val3] 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val3 = 'J' : <type 'str'>
dict_REF4 = {} : <type 'dict'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.KeyError'> 'J'
REFERENCE ACTION: dict_REF4 [val3] 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.KeyError'> 'J'
==================================================
list0.irange(minimum=val3,maximum=val9,inclusive=(False,False),reverse=True)  # STEP 56
ACTION: list0.irange(minimum=val3,maximum=val9,inclusive=(False,False),reverse=True) 
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val3 = 'J' : <type 'str'>
val9 = 'JJ' : <type 'str'>
list_REF0 = [] : <type 'list'>
REFERENCE ACTION: list_REF0.irange(minimum=val3,maximum=val9,inclusive=(False,False),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
dict3 [val9]                                                            # STEP 57
ACTION: dict3 [val9] 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val9 = 'JJ' : <type 'str'>
dict_REF3 = {} : <type 'dict'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.KeyError'> 'JJ'
REFERENCE ACTION: dict_REF3 [val9] 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.KeyError'> 'JJ'
==================================================
dict1.get(val3,None)                                                    # STEP 58
ACTION: dict1.get(val3,None) 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val3 = 'J' : <type 'str'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF1.get(val3,None) 
==================================================
val2 = sval8                                                            # STEP 59
ACTION: val2 = sval8 
sval8 = 'EJJ' : <type 'str'>
val2 = None : <type 'NoneType'>
=> val2 = 'EJJ' : <type 'str'>
==================================================
ival6 = ival9 - ival9                                                   # STEP 60
ACTION: ival6 = ival9 - ival9 
ival9 = 0 : <type 'int'>
ival6 = None : <type 'NoneType'>
=> ival6 = 0 : <type 'int'>
==================================================
set4.irange(minimum=val1,maximum=val3,inclusive=(False,False),reverse=True)  # STEP 61
ACTION: set4.irange(minimum=val1,maximum=val3,inclusive=(False,False),reverse=True) 
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
val1 = 'J' : <type 'str'>
val3 = 'J' : <type 'str'>
set_REF4 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF4.irange(minimum=val1,maximum=val3,inclusive=(False,False),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'irange'
==================================================
result = sorted(list(dict1.keys()))                                     # STEP 62
ACTION: result = sorted(list(dict1.keys())) 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = sorted(list(dict_REF1.keys())) 
==================================================
result = (dict4.items()).count(val2)                                    # STEP 63
ACTION: result = (dict4.items()).count(val2)  
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val2 = 'EJJ' : <type 'str'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = (dict_REF4.items()).count(val2)  
==================================================
result = sorted(list(dict0.keys()))                                     # STEP 64
ACTION: result = sorted(list(dict0.keys())) 
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = sorted(list(dict_REF0.keys())) 
==================================================
set0 = sortedcontainers.SortedSet()                                     # STEP 65
ACTION: set0 = sortedcontainers.SortedSet() 
set0 = None : <type 'NoneType'>
set_REF0 = None : <type 'NoneType'>
=> set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF0 = set([]) 
=> set_REF0 = set([]) : <type 'set'>
==================================================
del list2 [ival9]                                                       # STEP 66
ACTION: del list2 [ival9] 
ival9 = 0 : <type 'int'>
list2 = SortedList(['J', 'J'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF2 = ['J', 'J'] : <type 'list'>
=> list2 = SortedList(['J'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: del list_REF2 [ival9] 
=> list_REF2 = ['J'] : <type 'list'>
==================================================
result = (dict0.keys()).count(val1)                                     # STEP 67
ACTION: result = (dict0.keys()).count(val1)  
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val1 = 'J' : <type 'str'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = (dict_REF0.keys()).count(val1)  
==================================================
list2.extend(list0)                                                     # STEP 68
ACTION: list2.extend(list0) 
list2 = SortedList(['J'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF2 = ['J'] : <type 'list'>
list_REF0 = [] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x120d902d8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 702580, in act11960
    self.p_list[2].extend(self.p_list[0])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 46
STOPPING TESTING DUE TO TIMEOUT
20.938348197 PERCENT COVERED
60.2049489021 TOTAL RUNTIME
33 EXECUTED
3215 TOTAL TEST OPERATIONS
1.73166465759 TIME SPENT EXECUTING TEST OPERATIONS
54.9942605495 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
1.55725431442 TIME SPENT CHECKING PROPERTIES
3.28891897202 TOTAL TIME SPENT RUNNING SUT
0.492908000946 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
dict1 = sortedcontainers.SortedDict()                                    # STEP 0
dict4 = sortedcontainers.SortedDict()                                    # STEP 1
set2 = sortedcontainers.SortedSet()                                      # STEP 2
list2 = sortedcontainers.SortedList()                                    # STEP 3
dict0 = sortedcontainers.SortedDict()                                    # STEP 4
repr(dict4)                                                              # STEP 5
result = dict4.popitem(last=False)                                       # STEP 6
list0 = sortedcontainers.SortedList()                                    # STEP 7
set2.update(list2)                                                       # STEP 8
set4 = sortedcontainers.SortedSet()                                      # STEP 9
result = len(dict1)                                                     # STEP 10
result = list2 == list0                                                 # STEP 11
result = sorted(list(dict4.keys()))                                     # STEP 12
list0.update(list0)                                                     # STEP 13
sval7 = 'J'                                                             # STEP 14
list2.update(list0)                                                     # STEP 15
repr(set4)                                                              # STEP 16
set1 = sortedcontainers.SortedSet()                                     # STEP 17
ival9 = 3                                                               # STEP 18
set1.update(list2)                                                      # STEP 19
list2+=list0                                                            # STEP 20
set2.islice(start=None,stop=ival9)                                      # STEP 21
dict1 = sortedcontainers.SortedDict()                                   # STEP 22
val3 = sval7                                                            # STEP 23
set4 = sortedcontainers.SortedSet()                                     # STEP 24
result = dict4.peekitem(ival9)                                          # STEP 25
set1.irange(minimum=val3,maximum=val3,inclusive=(False,True),reverse=True)  # STEP 26
repr(set1)                                                              # STEP 27
set1.update(list2)                                                      # STEP 28
iter(list0)                                                             # STEP 29
dict4 [val3]                                                            # STEP 30
dict4.get(val3,None)                                                    # STEP 31
result = list0.pop(ival9)                                               # STEP 32
dict3 = dict0.fromkeys(set1,val3) ; result = dict3                      # STEP 33
set1 = sortedcontainers.SortedSet()                                     # STEP 34
result = len(dict1)                                                     # STEP 35
result = sorted(list(dict1.keys()))                                     # STEP 36
result = sorted(list(dict4.keys()))                                     # STEP 37
set1.islice(start=None,stop=None)                                       # STEP 38
list0.irange(minimum=val3,maximum=val3,inclusive=(True,False))          # STEP 39
list2.add(val3)                                                         # STEP 40
result = dict1.pop(val3,val3)                                           # STEP 41
result = (dict4.keys()).count(val3)                                     # STEP 42
val1 = sval7                                                            # STEP 43
result = list0.pop(ival9)                                               # STEP 44
result = sorted(list(dict1.keys()))                                     # STEP 45
ival9 = ival9 - ival9                                                   # STEP 46
list2.update(list2)                                                     # STEP 47
sval8 = sval7 + sval7                                                   # STEP 48
sval7 = 'E'                                                             # STEP 49
result = sorted(list(dict1.keys()))                                     # STEP 50
val9 = sval8                                                            # STEP 51
sval8 = sval7 + sval8                                                   # STEP 52
set1.islice(start=None,stop=ival9)                                      # STEP 53
dict3.islice(start=ival9,stop=ival9,reverse=True)                       # STEP 54
dict4 [val3]                                                            # STEP 55
list0.irange(minimum=val3,maximum=val9,inclusive=(False,False),reverse=True)  # STEP 56
dict3 [val9]                                                            # STEP 57
dict1.get(val3,None)                                                    # STEP 58
val2 = sval8                                                            # STEP 59
ival6 = ival9 - ival9                                                   # STEP 60
set4.irange(minimum=val1,maximum=val3,inclusive=(False,False),reverse=True)  # STEP 61
result = sorted(list(dict1.keys()))                                     # STEP 62
result = (dict4.items()).count(val2)                                    # STEP 63
result = sorted(list(dict0.keys()))                                     # STEP 64
set0 = sortedcontainers.SortedSet()                                     # STEP 65
del list2 [ival9]                                                       # STEP 66
result = (dict0.keys()).count(val1)                                     # STEP 67
list2.extend(list0)                                                     # STEP 68
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x120d902d8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 702580, in act11960
    self.p_list[2].extend(self.p_list[0])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
535 BRANCHES COVERED
406 STATEMENTS COVERED

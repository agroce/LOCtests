Random testing using config=Config(noExceptionMatch=False, generalize=False, localize=False, speed='FAST', probs='locsample.probs', LOCBaseline=0.2, noAlphaConvert=False, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, html=None, keepLast=False, stopWhenNoCoverage=None, generateLOC=None, computeFeatureStats=False, Pmutate=0.8, timeout=60, output='failure.61044.test', markov=None, noSwarmDependencies=False, startExploit=0.0, maxMustHitBranch=None, useHints=False, silentFail=False, highLowSwarm=None, maxMustHitStatement=None, progress=False, postCover=False, swarmLength=None, noCover=False, noEnumerateEnabled=False, full=True, swarmP=0.5, coverFile='coverage.out', markovP=1.0, swarmProbs=None, genDepth=None, exploitCeiling=0.1, logging=None, noCheck=False, throughput=False, uncaught=False, swarmSwitch=None, verbose=False, reducePool=False, exploit=0.8, fastQuickAnalysis=False, total=False, verboseExploit=False, swarm=False, sequenceP=1.0, biasLOC=None, timedProgress=30, relax=False, ddmin=False, stutter=None, readQuick=False, verboseActions=False, quickAnalysis=False, noReassign=False, sequenceSize=3, LOCProbs=False, sequencesFromTests=None, maxTests=-1, trackMaxCoverage=None, useQuickSequences=False, exploitBestHint=1, failedLogging=None, stopWhenStatements=None, greedyStutter=False, seed=None, stopWhenHitStatement=None, uniqueValuesAnalysis=False, normalize=False, startExploitStall=0, enumerateEnabled=False, internal=False, profile=False, multiple=True, stopWhenBranches=None, running=False, compareFails=False, Pcrossover=0.2, stopWhenHitBranch=None, depth=100, showActions=False)
** STARTING EXPLOITATION OF TESTS AT TIME 0.860441923141 AFTER 0 TESTS WITH NO NEW COVERAGE **
TEST #8 STEP #68 (0:00:30.012600) Mon Nov 20 13:52:55 2017 [ 373 stmts 497 branches ] 768 TOTAL ACTIONS (25.5892525608/s)
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x12046cb90>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 702227, in act11954
    self.p_list[0].extend(self.p_list[4])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
Original test has 75 steps

SAVING TEST AS failure.61044.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
ival1 = 3                                                                # STEP 0
ACTION: ival1 = 3 
ival1 = None : <type 'NoneType'>
=> ival1 = 3 : <type 'int'>
==================================================
val9 = ival1                                                             # STEP 1
ACTION: val9 = ival1 
ival1 = 3 : <type 'int'>
val9 = None : <type 'NoneType'>
=> val9 = 3 : <type 'int'>
==================================================
sval8 = 'r'                                                              # STEP 2
ACTION: sval8 = 'r' 
sval8 = None : <type 'NoneType'>
=> sval8 = 'r' : <type 'str'>
==================================================
sval6 = 'R'                                                              # STEP 3
ACTION: sval6 = 'R' 
sval6 = None : <type 'NoneType'>
=> sval6 = 'R' : <type 'str'>
==================================================
val3 = sval6                                                             # STEP 4
ACTION: val3 = sval6 
sval6 = 'R' : <type 'str'>
val3 = None : <type 'NoneType'>
=> val3 = 'R' : <type 'str'>
==================================================
val4 = sval6                                                             # STEP 5
ACTION: val4 = sval6 
sval6 = 'R' : <type 'str'>
val4 = None : <type 'NoneType'>
=> val4 = 'R' : <type 'str'>
==================================================
ival8 = 10                                                               # STEP 6
ACTION: ival8 = 10 
ival8 = None : <type 'NoneType'>
=> ival8 = 10 : <type 'int'>
==================================================
sval0 = sval8 + sval8                                                    # STEP 7
ACTION: sval0 = sval8 + sval8 
sval8 = 'r' : <type 'str'>
sval0 = None : <type 'NoneType'>
=> sval0 = 'rr' : <type 'str'>
==================================================
sval9 = 'v'                                                              # STEP 8
ACTION: sval9 = 'v' 
sval9 = None : <type 'NoneType'>
=> sval9 = 'v' : <type 'str'>
==================================================
dict1 = sortedcontainers.SortedDict()                                    # STEP 9
ACTION: dict1 = sortedcontainers.SortedDict() 
dict1 = None : <type 'NoneType'>
dict_REF1 = None : <type 'NoneType'>
=> dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF1 = {} 
=> dict_REF1 = {} : <type 'dict'>
==================================================
result = len(dict1.keys())                                              # STEP 10
ACTION: result = len(dict1.keys())  
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF1.keys())  
==================================================
list4 = sortedcontainers.SortedList()                                   # STEP 11
ACTION: list4 = sortedcontainers.SortedList() 
list4 = None : <type 'NoneType'>
list_REF4 = None : <type 'NoneType'>
=> list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: list_REF4 = [] 
=> list_REF4 = [] : <type 'list'>
==================================================
ival5 = ival1 + ival8                                                   # STEP 12
ACTION: ival5 = ival1 + ival8 
ival1 = 3 : <type 'int'>
ival8 = 10 : <type 'int'>
ival5 = None : <type 'NoneType'>
=> ival5 = 13 : <type 'int'>
==================================================
plist2 = list4 [ival5 : ival1]                                          # STEP 13
ACTION: plist2 = list4 [ival5 : ival1] 
ival5 = 13 : <type 'int'>
ival1 = 3 : <type 'int'>
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
plist2 = None : <type 'NoneType'>
list_REF4 = [] : <type 'list'>
=> plist2 = [] : <type 'list'>
REFERENCE ACTION: plist2 = list_REF4 [ival5 : ival1] 
==================================================
result = list4.index(val4)                                              # STEP 14
ACTION: result = list4.index(val4) 
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val4 = 'R' : <type 'str'>
list_REF4 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> 'R' is not in list
REFERENCE ACTION: result_REF = list_REF4.index(val4) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.ValueError'> 'R' is not in list
==================================================
val6 = ival8                                                            # STEP 15
ACTION: val6 = ival8 
ival8 = 10 : <type 'int'>
val6 = None : <type 'NoneType'>
=> val6 = 10 : <type 'int'>
==================================================
setListSlice(list4,ival5,ival5,list4)                                   # STEP 16
ACTION: setListSlice(list4,ival5,ival5,list4) 
ival5 = 13 : <type 'int'>
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = [] : <type 'list'>
REFERENCE ACTION: sortListSetSlice(list_REF4,ival5,ival5,list_REF4) 
==================================================
result = dict1.peekitem()                                               # STEP 17
ACTION: result = dict1.peekitem() 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {} : <type 'dict'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: result_REF = sortDictPeekitem(dict_REF1,) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
==================================================
setListSlice(list4,ival5,ival5,list4)                                   # STEP 18
ACTION: setListSlice(list4,ival5,ival5,list4) 
ival5 = 13 : <type 'int'>
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = [] : <type 'list'>
REFERENCE ACTION: sortListSetSlice(list_REF4,ival5,ival5,list_REF4) 
==================================================
repr(list4)                                                             # STEP 19
ACTION: repr(list4) 
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = [] : <type 'list'>
REFERENCE ACTION: repr(list_REF4) 
==================================================
dict1.irange(minimum=val6,maximum=val9,inclusive=(True,False),reverse=True)  # STEP 20
ACTION: dict1.irange(minimum=val6,maximum=val9,inclusive=(True,False),reverse=True) 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val6 = 10 : <type 'int'>
val9 = 3 : <type 'int'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF1.irange(minimum=val6,maximum=val9,inclusive=(True,False),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'irange'
==================================================
sval6 = sval9 + sval6                                                   # STEP 21
ACTION: sval6 = sval9 + sval6 
sval9 = 'v' : <type 'str'>
sval6 = 'R' : <type 'str'>
=> sval6 = 'vR' : <type 'str'>
==================================================
dict1.get(val4,None)                                                    # STEP 22
ACTION: dict1.get(val4,None) 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val4 = 'R' : <type 'str'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF1.get(val4,None) 
==================================================
result = list4.pop(ival5)                                               # STEP 23
ACTION: result = list4.pop(ival5) 
ival5 = 13 : <type 'int'>
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> pop index out of range
REFERENCE ACTION: result_REF = list_REF4.pop(ival5) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> pop from empty list
==================================================
ival2 = ival1 + ival8                                                   # STEP 24
ACTION: ival2 = ival1 + ival8 
ival1 = 3 : <type 'int'>
ival8 = 10 : <type 'int'>
ival2 = None : <type 'NoneType'>
=> ival2 = 13 : <type 'int'>
==================================================
dict0 = dict1.copy()                                                    # STEP 25
ACTION: dict0 = dict1.copy() 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict0 = None : <type 'NoneType'>
dict_REF1 = {} : <type 'dict'>
dict_REF0 = None : <type 'NoneType'>
=> dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF0 = dict_REF1.copy() 
=> dict_REF0 = {} : <type 'dict'>
==================================================
sval7 = 'f'                                                             # STEP 26
ACTION: sval7 = 'f' 
sval7 = None : <type 'NoneType'>
=> sval7 = 'f' : <type 'str'>
==================================================
dict1 = sortedcontainers.SortedDict()                                   # STEP 27
ACTION: dict1 = sortedcontainers.SortedDict() 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF1 = {} 
==================================================
ival6 = ival8 * ival5                                                   # STEP 28
ACTION: ival6 = ival8 * ival5 
ival8 = 10 : <type 'int'>
ival5 = 13 : <type 'int'>
ival6 = None : <type 'NoneType'>
=> ival6 = 130 : <type 'int'>
==================================================
set4 = sortedcontainers.SortedSet()                                     # STEP 29
ACTION: set4 = sortedcontainers.SortedSet() 
set4 = None : <type 'NoneType'>
set_REF4 = None : <type 'NoneType'>
=> set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF4 = set([]) 
=> set_REF4 = set([]) : <type 'set'>
==================================================
set4 &= set4                                                            # STEP 30
ACTION: set4 &= set4 
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF4 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF4 &= set_REF4 
==================================================
result = sorted(list(dict1.keys()))                                     # STEP 31
ACTION: result = sorted(list(dict1.keys())) 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = sorted(list(dict_REF1.keys())) 
==================================================
dict2 = sortedcontainers.SortedDict()                                   # STEP 32
ACTION: dict2 = sortedcontainers.SortedDict() 
dict2 = None : <type 'NoneType'>
dict_REF2 = None : <type 'NoneType'>
=> dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF2 = {} 
=> dict_REF2 = {} : <type 'dict'>
==================================================
val1 = sval9                                                            # STEP 33
ACTION: val1 = sval9 
sval9 = 'v' : <type 'str'>
val1 = None : <type 'NoneType'>
=> val1 = 'v' : <type 'str'>
==================================================
result = dict1.setdefault(val4,val9)                                    # STEP 34
ACTION: result = dict1.setdefault(val4,val9) 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val4 = 'R' : <type 'str'>
val9 = 3 : <type 'int'>
dict_REF1 = {} : <type 'dict'>
=> dict1 = SortedDict(None, 1000, {'R': 3}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: result_REF = dict_REF1.setdefault(val4,val9) 
=> dict_REF1 = {'R': 3} : <type 'dict'>
==================================================
result = dict1 == dict2                                                 # STEP 35
ACTION: result = dict1 == dict2 
dict1 = SortedDict(None, 1000, {'R': 3}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {'R': 3} : <type 'dict'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = dict_REF1 == dict_REF2 
==================================================
dict4 = dict0.fromkeys(set4,val1) ; result = dict4                      # STEP 36
ACTION: dict4 = dict0.fromkeys(set4,val1) ; result = dict4 
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict4 = None : <type 'NoneType'>
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
val1 = 'v' : <type 'str'>
dict_REF0 = {} : <type 'dict'>
dict_REF4 = None : <type 'NoneType'>
set_REF4 = set([]) : <type 'set'>
=> dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF4 = dict_REF0.fromkeys(set_REF4,val1) ; result_REF = dict_REF4 
=> dict_REF4 = {} : <type 'dict'>
==================================================
ival5 = ival6 * ival5                                                   # STEP 37
ACTION: ival5 = ival6 * ival5 
ival6 = 130 : <type 'int'>
ival5 = 13 : <type 'int'>
=> ival5 = 1690 : <type 'int'>
==================================================
dict2 = dict4.copy()                                                    # STEP 38
ACTION: dict2 = dict4.copy() 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF4 = {} : <type 'dict'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF2 = dict_REF4.copy() 
==================================================
set0 = set4 - set4                                                      # STEP 39
ACTION: set0 = set4 - set4 
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set0 = None : <type 'NoneType'>
set_REF4 = set([]) : <type 'set'>
set_REF0 = None : <type 'NoneType'>
=> set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF0 = set_REF4 - set_REF4 
=> set_REF0 = set([]) : <type 'set'>
==================================================
list0 = sortedcontainers.SortedList(plist2)                             # STEP 40
ACTION: list0 = sortedcontainers.SortedList(plist2) 
list0 = None : <type 'NoneType'>
plist2 = [] : <type 'list'>
list_REF0 = None : <type 'NoneType'>
=> list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: list_REF0 = list(plist2) 
=> list_REF0 = [] : <type 'list'>
==================================================
list0.insert(ival1,val4)                                                # STEP 41
ACTION: list0.insert(ival1,val4) 
ival1 = 3 : <type 'int'>
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val4 = 'R' : <type 'str'>
list_REF0 = [] : <type 'list'>
=> list0 = SortedList(['R'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: sortListInsert(list_REF0,ival1,val4) 
=> list_REF0 = ['R'] : <type 'list'>
==================================================
set2 = set0 ^ set4                                                      # STEP 42
ACTION: set2 = set0 ^ set4 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set2 = None : <type 'NoneType'>
set_REF0 = set([]) : <type 'set'>
set_REF4 = set([]) : <type 'set'>
set_REF2 = None : <type 'NoneType'>
=> set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF2 = set_REF0 ^ set_REF4 
=> set_REF2 = set([]) : <type 'set'>
==================================================
dict3 = sortedcontainers.SortedDict()                                   # STEP 43
ACTION: dict3 = sortedcontainers.SortedDict() 
dict3 = None : <type 'NoneType'>
dict_REF3 = None : <type 'NoneType'>
=> dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF3 = {} 
=> dict_REF3 = {} : <type 'dict'>
==================================================
list0.irange(minimum=val6,maximum=val9,inclusive=(False,True))          # STEP 44
ACTION: list0.irange(minimum=val6,maximum=val9,inclusive=(False,True)) 
list0 = SortedList(['R'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val6 = 10 : <type 'int'>
val9 = 3 : <type 'int'>
list_REF0 = ['R'] : <type 'list'>
REFERENCE ACTION: list_REF0.irange(minimum=val6,maximum=val9,inclusive=(False,True)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
val1 = ival1                                                            # STEP 45
ACTION: val1 = ival1 
ival1 = 3 : <type 'int'>
val1 = 'v' : <type 'str'>
=> val1 = 3 : <type 'int'>
==================================================
val8 = ival1                                                            # STEP 46
ACTION: val8 = ival1 
ival1 = 3 : <type 'int'>
val8 = None : <type 'NoneType'>
=> val8 = 3 : <type 'int'>
==================================================
list0.islice(start=None,stop=None)                                      # STEP 47
ACTION: list0.islice(start=None,stop=None) 
list0 = SortedList(['R'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF0 = ['R'] : <type 'list'>
REFERENCE ACTION: list_REF0.islice(start=None,stop=None) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'islice'
==================================================
result = dict2.pop(val6)                                                # STEP 48
ACTION: result = dict2.pop(val6) 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val6 = 10 : <type 'int'>
dict_REF2 = {} : <type 'dict'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.KeyError'> 10
REFERENCE ACTION: result_REF = dict_REF2.pop(val6) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.KeyError'> 10
==================================================
set2 ^= set4                                                            # STEP 49
ACTION: set2 ^= set4 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF2 = set([]) : <type 'set'>
set_REF4 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF2 ^= set_REF4 
==================================================
dict4 = dict1.copy()                                                    # STEP 50
ACTION: dict4 = dict1.copy() 
dict1 = SortedDict(None, 1000, {'R': 3}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {'R': 3} : <type 'dict'>
dict_REF4 = {} : <type 'dict'>
=> dict4 = SortedDict(None, 1000, {'R': 3}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF4 = dict_REF1.copy() 
=> dict_REF4 = {'R': 3} : <type 'dict'>
==================================================
result = set4.issuperset(set0)                                          # STEP 51
ACTION: result = set4.issuperset(set0) 
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF4 = set([]) : <type 'set'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = set_REF4.issuperset(set_REF0) 
==================================================
set0.update(set2)                                                       # STEP 52
ACTION: set0.update(set2) 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF0.update(set_REF2) 
==================================================
result = sorted(list(dict2.keys()))                                     # STEP 53
ACTION: result = sorted(list(dict2.keys())) 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = sorted(list(dict_REF2.keys())) 
==================================================
dict3.irange(minimum=val4,maximum=val1,inclusive=(True,False))          # STEP 54
ACTION: dict3.irange(minimum=val4,maximum=val1,inclusive=(True,False)) 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val4 = 'R' : <type 'str'>
val1 = 3 : <type 'int'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF3.irange(minimum=val4,maximum=val1,inclusive=(True,False)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'irange'
==================================================
dict2.irange(minimum=val8,maximum=val3,inclusive=(True,False))          # STEP 55
ACTION: dict2.irange(minimum=val8,maximum=val3,inclusive=(True,False)) 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val8 = 3 : <type 'int'>
val3 = 'R' : <type 'str'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF2.irange(minimum=val8,maximum=val3,inclusive=(True,False)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'irange'
==================================================
setList(list0,ival5,val6)                                               # STEP 56
ACTION: setList(list0,ival5,val6) 
ival5 = 1690 : <type 'int'>
list0 = SortedList(['R'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val6 = 10 : <type 'int'>
list_REF0 = ['R'] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: sortListSet(list_REF0,ival5,val6) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list assignment index out of range
==================================================
ival0 = ival6 - ival6                                                   # STEP 57
ACTION: ival0 = ival6 - ival6 
ival6 = 130 : <type 'int'>
ival0 = None : <type 'NoneType'>
=> ival0 = 0 : <type 'int'>
==================================================
list0.irange(minimum=val9,maximum=val3,inclusive=(True,False),reverse=True)  # STEP 58
ACTION: list0.irange(minimum=val9,maximum=val3,inclusive=(True,False),reverse=True) 
list0 = SortedList(['R'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val9 = 3 : <type 'int'>
val3 = 'R' : <type 'str'>
list_REF0 = ['R'] : <type 'list'>
REFERENCE ACTION: list_REF0.irange(minimum=val9,maximum=val3,inclusive=(True,False),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
del list0 [ival5]                                                       # STEP 59
ACTION: del list0 [ival5] 
ival5 = 1690 : <type 'int'>
list0 = SortedList(['R'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF0 = ['R'] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: del list_REF0 [ival5] 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list assignment index out of range
==================================================
result = dict3 == dict0                                                 # STEP 60
ACTION: result = dict3 == dict0 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = dict_REF3 == dict_REF0 
==================================================
set0 < set2                                                             # STEP 61
ACTION: set0 < set2 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF0 < set_REF2 
==================================================
list0 >= list4                                                          # STEP 62
ACTION: list0 >= list4 
list0 = SortedList(['R'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF0 = ['R'] : <type 'list'>
list_REF4 = [] : <type 'list'>
REFERENCE ACTION: list_REF0 >= list_REF4 
==================================================
result = dict3.peekitem(ival2)                                          # STEP 63
ACTION: result = dict3.peekitem(ival2) 
ival2 = 13 : <type 'int'>
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: result_REF = sortDictPeekitem(dict_REF3,ival2) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
==================================================
result = sorted(list(dict4.keys()))                                     # STEP 64
ACTION: result = sorted(list(dict4.keys())) 
dict4 = SortedDict(None, 1000, {'R': 3}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF4 = {'R': 3} : <type 'dict'>
REFERENCE ACTION: result_REF = sorted(list(dict_REF4.keys())) 
==================================================
dict0.islice(start=None,stop=ival1)                                     # STEP 65
ACTION: dict0.islice(start=None,stop=ival1) 
ival1 = 3 : <type 'int'>
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF0.islice(start=None,stop=ival1) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'islice'
==================================================
dict3 = dict4.fromkeys(set2,val4) ; result = dict3                      # STEP 66
ACTION: dict3 = dict4.fromkeys(set2,val4) ; result = dict3 
dict4 = SortedDict(None, 1000, {'R': 3}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
val4 = 'R' : <type 'str'>
dict_REF4 = {'R': 3} : <type 'dict'>
dict_REF3 = {} : <type 'dict'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: dict_REF3 = dict_REF4.fromkeys(set_REF2,val4) ; result_REF = dict_REF3 
==================================================
list4 > list4                                                           # STEP 67
ACTION: list4 > list4 
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = [] : <type 'list'>
REFERENCE ACTION: list_REF4 > list_REF4 
==================================================
dict3.irange(minimum=val9,maximum=val4,inclusive=(False,True),reverse=True)  # STEP 68
ACTION: dict3.irange(minimum=val9,maximum=val4,inclusive=(False,True),reverse=True) 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val9 = 3 : <type 'int'>
val4 = 'R' : <type 'str'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF3.irange(minimum=val9,maximum=val4,inclusive=(False,True),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'irange'
==================================================
result = (dict4.keys()).count(val3)                                     # STEP 69
ACTION: result = (dict4.keys()).count(val3)  
dict4 = SortedDict(None, 1000, {'R': 3}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val3 = 'R' : <type 'str'>
dict_REF4 = {'R': 3} : <type 'dict'>
REFERENCE ACTION: result_REF = (dict_REF4.keys()).count(val3)  
==================================================
sval8 = sval9 + sval9                                                   # STEP 70
ACTION: sval8 = sval9 + sval9 
sval9 = 'v' : <type 'str'>
sval8 = 'r' : <type 'str'>
=> sval8 = 'vv' : <type 'str'>
==================================================
val3 = sval7                                                            # STEP 71
ACTION: val3 = sval7 
sval7 = 'f' : <type 'str'>
val3 = 'R' : <type 'str'>
=> val3 = 'f' : <type 'str'>
==================================================
result = list0.count(val6)                                              # STEP 72
ACTION: result = list0.count(val6) 
list0 = SortedList(['R'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val6 = 10 : <type 'int'>
list_REF0 = ['R'] : <type 'list'>
REFERENCE ACTION: result_REF = list_REF0.count(val6) 
==================================================
list4.islice(start=ival1,stop=ival2)                                    # STEP 73
ACTION: list4.islice(start=ival1,stop=ival2) 
ival1 = 3 : <type 'int'>
ival2 = 13 : <type 'int'>
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = [] : <type 'list'>
REFERENCE ACTION: list_REF4.islice(start=ival1,stop=ival2) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'islice'
==================================================
list0.extend(list4)                                                     # STEP 74
ACTION: list0.extend(list4) 
list0 = SortedList(['R'], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF0 = ['R'] : <type 'list'>
list_REF4 = [] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x1204b8c20>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 702227, in act11954
    self.p_list[0].extend(self.p_list[4])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 100
STOPPING TESTING DUE TO TIMEOUT
22.2954633579 PERCENT COVERED
60.2864999771 TOTAL RUNTIME
16 EXECUTED
1575 TOTAL TEST OPERATIONS
1.46043276787 TIME SPENT EXECUTING TEST OPERATIONS
56.2088758945 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
1.22150826454 TIME SPENT CHECKING PROPERTIES
2.68194103241 TOTAL TIME SPENT RUNNING SUT
0.614744663239 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
ival1 = 3                                                                # STEP 0
val9 = ival1                                                             # STEP 1
sval8 = 'r'                                                              # STEP 2
sval6 = 'R'                                                              # STEP 3
val3 = sval6                                                             # STEP 4
val4 = sval6                                                             # STEP 5
ival8 = 10                                                               # STEP 6
sval0 = sval8 + sval8                                                    # STEP 7
sval9 = 'v'                                                              # STEP 8
dict1 = sortedcontainers.SortedDict()                                    # STEP 9
result = len(dict1.keys())                                              # STEP 10
list4 = sortedcontainers.SortedList()                                   # STEP 11
ival5 = ival1 + ival8                                                   # STEP 12
plist2 = list4 [ival5 : ival1]                                          # STEP 13
result = list4.index(val4)                                              # STEP 14
val6 = ival8                                                            # STEP 15
setListSlice(list4,ival5,ival5,list4)                                   # STEP 16
result = dict1.peekitem()                                               # STEP 17
setListSlice(list4,ival5,ival5,list4)                                   # STEP 18
repr(list4)                                                             # STEP 19
dict1.irange(minimum=val6,maximum=val9,inclusive=(True,False),reverse=True)  # STEP 20
sval6 = sval9 + sval6                                                   # STEP 21
dict1.get(val4,None)                                                    # STEP 22
result = list4.pop(ival5)                                               # STEP 23
ival2 = ival1 + ival8                                                   # STEP 24
dict0 = dict1.copy()                                                    # STEP 25
sval7 = 'f'                                                             # STEP 26
dict1 = sortedcontainers.SortedDict()                                   # STEP 27
ival6 = ival8 * ival5                                                   # STEP 28
set4 = sortedcontainers.SortedSet()                                     # STEP 29
set4 &= set4                                                            # STEP 30
result = sorted(list(dict1.keys()))                                     # STEP 31
dict2 = sortedcontainers.SortedDict()                                   # STEP 32
val1 = sval9                                                            # STEP 33
result = dict1.setdefault(val4,val9)                                    # STEP 34
result = dict1 == dict2                                                 # STEP 35
dict4 = dict0.fromkeys(set4,val1) ; result = dict4                      # STEP 36
ival5 = ival6 * ival5                                                   # STEP 37
dict2 = dict4.copy()                                                    # STEP 38
set0 = set4 - set4                                                      # STEP 39
list0 = sortedcontainers.SortedList(plist2)                             # STEP 40
list0.insert(ival1,val4)                                                # STEP 41
set2 = set0 ^ set4                                                      # STEP 42
dict3 = sortedcontainers.SortedDict()                                   # STEP 43
list0.irange(minimum=val6,maximum=val9,inclusive=(False,True))          # STEP 44
val1 = ival1                                                            # STEP 45
val8 = ival1                                                            # STEP 46
list0.islice(start=None,stop=None)                                      # STEP 47
result = dict2.pop(val6)                                                # STEP 48
set2 ^= set4                                                            # STEP 49
dict4 = dict1.copy()                                                    # STEP 50
result = set4.issuperset(set0)                                          # STEP 51
set0.update(set2)                                                       # STEP 52
result = sorted(list(dict2.keys()))                                     # STEP 53
dict3.irange(minimum=val4,maximum=val1,inclusive=(True,False))          # STEP 54
dict2.irange(minimum=val8,maximum=val3,inclusive=(True,False))          # STEP 55
setList(list0,ival5,val6)                                               # STEP 56
ival0 = ival6 - ival6                                                   # STEP 57
list0.irange(minimum=val9,maximum=val3,inclusive=(True,False),reverse=True)  # STEP 58
del list0 [ival5]                                                       # STEP 59
result = dict3 == dict0                                                 # STEP 60
set0 < set2                                                             # STEP 61
list0 >= list4                                                          # STEP 62
result = dict3.peekitem(ival2)                                          # STEP 63
result = sorted(list(dict4.keys()))                                     # STEP 64
dict0.islice(start=None,stop=ival1)                                     # STEP 65
dict3 = dict4.fromkeys(set2,val4) ; result = dict3                      # STEP 66
list4 > list4                                                           # STEP 67
dict3.irange(minimum=val9,maximum=val4,inclusive=(False,True),reverse=True)  # STEP 68
result = (dict4.keys()).count(val3)                                     # STEP 69
sval8 = sval9 + sval9                                                   # STEP 70
val3 = sval7                                                            # STEP 71
result = list0.count(val6)                                              # STEP 72
list4.islice(start=ival1,stop=ival2)                                    # STEP 73
list0.extend(list4)                                                     # STEP 74
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x1204b8c20>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 702227, in act11954
    self.p_list[0].extend(self.p_list[4])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
567 BRANCHES COVERED
429 STATEMENTS COVERED

Random testing using config=Config(noExceptionMatch=False, generalize=False, localize=False, speed='FAST', probs='locsample.probs', LOCBaseline=0.2, noAlphaConvert=False, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, html=None, keepLast=False, stopWhenNoCoverage=None, generateLOC=None, computeFeatureStats=False, Pmutate=0.0, timeout=60, output='failure.11118.test', markov=None, noSwarmDependencies=False, startExploit=0.0, maxMustHitBranch=None, useHints=False, silentFail=False, highLowSwarm=None, maxMustHitStatement=None, progress=False, postCover=False, swarmLength=None, noCover=False, noEnumerateEnabled=False, full=True, swarmP=0.5, coverFile='coverage.out', markovP=1.0, swarmProbs=None, genDepth=None, exploitCeiling=0.1, logging=None, noCheck=False, throughput=False, uncaught=False, swarmSwitch=None, verbose=False, reducePool=False, exploit=None, fastQuickAnalysis=False, total=False, verboseExploit=False, swarm=True, sequenceP=1.0, biasLOC=None, timedProgress=30, relax=False, ddmin=False, stutter=None, readQuick=False, verboseActions=False, quickAnalysis=False, noReassign=False, sequenceSize=3, LOCProbs=False, sequencesFromTests=None, maxTests=-1, trackMaxCoverage=None, useQuickSequences=False, exploitBestHint=1, failedLogging=None, stopWhenStatements=None, greedyStutter=False, seed=None, stopWhenHitStatement=None, uniqueValuesAnalysis=False, normalize=False, startExploitStall=0, enumerateEnabled=False, internal=False, profile=False, multiple=True, stopWhenBranches=None, running=False, compareFails=False, Pcrossover=0.2, stopWhenHitBranch=None, depth=100, showActions=False)
TEST #16 STEP #32 (0:00:30.019626) Mon Nov 20 20:27:08 2017 [ 422 stmts 546 branches ] 1532 TOTAL ACTIONS (51.0332808607/s)
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x11fe9a7a0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 702519, in act11959
    self.p_list[1].extend(self.p_list[4])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
Original test has 88 steps

SAVING TEST AS failure.11118.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
set3 = sortedcontainers.SortedSet()                                      # STEP 0
ACTION: set3 = sortedcontainers.SortedSet() 
set3 = None : <type 'NoneType'>
set_REF3 = None : <type 'NoneType'>
=> set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF3 = set([]) 
=> set_REF3 = set([]) : <type 'set'>
==================================================
set1 = sortedcontainers.SortedSet()                                      # STEP 1
ACTION: set1 = sortedcontainers.SortedSet() 
set1 = None : <type 'NoneType'>
set_REF1 = None : <type 'NoneType'>
=> set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF1 = set([]) 
=> set_REF1 = set([]) : <type 'set'>
==================================================
set0 = set3 & set3                                                       # STEP 2
ACTION: set0 = set3 & set3 
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set0 = None : <type 'NoneType'>
set_REF3 = set([]) : <type 'set'>
set_REF0 = None : <type 'NoneType'>
=> set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF0 = set_REF3 & set_REF3 
=> set_REF0 = set([]) : <type 'set'>
==================================================
set0 &= set3                                                             # STEP 3
ACTION: set0 &= set3 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF0 &= set_REF3 
==================================================
set1 &= set0                                                             # STEP 4
ACTION: set1 &= set0 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF1 = set([]) : <type 'set'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1 &= set_REF0 
==================================================
set2 = sortedcontainers.SortedSet()                                      # STEP 5
ACTION: set2 = sortedcontainers.SortedSet() 
set2 = None : <type 'NoneType'>
set_REF2 = None : <type 'NoneType'>
=> set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF2 = set([]) 
=> set_REF2 = set([]) : <type 'set'>
==================================================
set0 = set2 & set3                                                       # STEP 6
ACTION: set0 = set2 & set3 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF2 = set([]) : <type 'set'>
set_REF3 = set([]) : <type 'set'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF0 = set_REF2 & set_REF3 
==================================================
dict2 = sortedcontainers.SortedDict()                                    # STEP 7
ACTION: dict2 = sortedcontainers.SortedDict() 
dict2 = None : <type 'NoneType'>
dict_REF2 = None : <type 'NoneType'>
=> dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF2 = {} 
=> dict_REF2 = {} : <type 'dict'>
==================================================
result = dict2.peekitem()                                                # STEP 8
ACTION: result = dict2.peekitem() 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF2 = {} : <type 'dict'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: result_REF = sortDictPeekitem(dict_REF2,) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
==================================================
set3 = set1 & set1                                                       # STEP 9
ACTION: set3 = set1 & set1 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF1 = set([]) : <type 'set'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF3 = set_REF1 & set_REF1 
==================================================
result = len(dict2.items())                                             # STEP 10
ACTION: result = len(dict2.items())  
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF2.items())  
==================================================
result = len(dict2.keys())                                              # STEP 11
ACTION: result = len(dict2.keys())  
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF2.keys())  
==================================================
ival0 = 7                                                               # STEP 12
ACTION: ival0 = 7 
ival0 = None : <type 'NoneType'>
=> ival0 = 7 : <type 'int'>
==================================================
result = dict2.peekitem()                                               # STEP 13
ACTION: result = dict2.peekitem() 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF2 = {} : <type 'dict'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: result_REF = sortDictPeekitem(dict_REF2,) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
==================================================
set2 = set0 & set3                                                      # STEP 14
ACTION: set2 = set0 & set3 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
set_REF3 = set([]) : <type 'set'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF2 = set_REF0 & set_REF3 
==================================================
dict3 = sortedcontainers.SortedDict()                                   # STEP 15
ACTION: dict3 = sortedcontainers.SortedDict() 
dict3 = None : <type 'NoneType'>
dict_REF3 = None : <type 'NoneType'>
=> dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF3 = {} 
=> dict_REF3 = {} : <type 'dict'>
==================================================
repr(dict3)                                                             # STEP 16
ACTION: repr(dict3) 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: repr(dict_REF3) 
==================================================
list4 = sortedcontainers.SortedList()                                   # STEP 17
ACTION: list4 = sortedcontainers.SortedList() 
list4 = None : <type 'NoneType'>
list_REF4 = None : <type 'NoneType'>
=> list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: list_REF4 = [] 
=> list_REF4 = [] : <type 'list'>
==================================================
plist3 = list4 [ival0 : ival0]                                          # STEP 18
ACTION: plist3 = list4 [ival0 : ival0] 
ival0 = 7 : <type 'int'>
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
plist3 = None : <type 'NoneType'>
list_REF4 = [] : <type 'list'>
=> plist3 = [] : <type 'list'>
REFERENCE ACTION: plist3 = list_REF4 [ival0 : ival0] 
==================================================
set0 = sortedcontainers.SortedSet()                                     # STEP 19
ACTION: set0 = sortedcontainers.SortedSet() 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF0 = set([]) 
==================================================
plist2 = list4 [ival0 : ival0]                                          # STEP 20
ACTION: plist2 = list4 [ival0 : ival0] 
ival0 = 7 : <type 'int'>
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
plist2 = None : <type 'NoneType'>
list_REF4 = [] : <type 'list'>
=> plist2 = [] : <type 'list'>
REFERENCE ACTION: plist2 = list_REF4 [ival0 : ival0] 
==================================================
list4.update(list4)                                                     # STEP 21
ACTION: list4.update(list4) 
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = [] : <type 'list'>
REFERENCE ACTION: sortListMultiAdd(list_REF4,list_REF4) 
==================================================
ival7 = 13                                                              # STEP 22
ACTION: ival7 = 13 
ival7 = None : <type 'NoneType'>
=> ival7 = 13 : <type 'int'>
==================================================
list4.extend(list4)                                                     # STEP 23
ACTION: list4.extend(list4) 
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = [] : <type 'list'>
REFERENCE ACTION: sortListExtend(list_REF4,list_REF4) 
==================================================
set1 = set2 - set0                                                      # STEP 24
ACTION: set1 = set2 - set0 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF2 = set([]) : <type 'set'>
set_REF0 = set([]) : <type 'set'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1 = set_REF2 - set_REF0 
==================================================
set2.islice(start=None,stop=None)                                       # STEP 25
ACTION: set2.islice(start=None,stop=None) 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF2.islice(start=None,stop=None) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'islice'
==================================================
list4.extend(list4)                                                     # STEP 26
ACTION: list4.extend(list4) 
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = [] : <type 'list'>
REFERENCE ACTION: sortListExtend(list_REF4,list_REF4) 
==================================================
dict4 = sortedcontainers.SortedDict()                                   # STEP 27
ACTION: dict4 = sortedcontainers.SortedDict() 
dict4 = None : <type 'NoneType'>
dict_REF4 = None : <type 'NoneType'>
=> dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF4 = {} 
=> dict_REF4 = {} : <type 'dict'>
==================================================
dict4.update(dict2)                                                     # STEP 28
ACTION: dict4.update(dict2) 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF4 = {} : <type 'dict'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF4.update(dict_REF2) 
==================================================
set3 &= set3                                                            # STEP 29
ACTION: set3 &= set3 
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF3 &= set_REF3 
==================================================
list4.islice(start=ival0,stop=ival7)                                    # STEP 30
ACTION: list4.islice(start=ival0,stop=ival7) 
ival0 = 7 : <type 'int'>
ival7 = 13 : <type 'int'>
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = [] : <type 'list'>
REFERENCE ACTION: list_REF4.islice(start=ival0,stop=ival7) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'islice'
==================================================
dict2 = sortedcontainers.SortedDict()                                   # STEP 31
ACTION: dict2 = sortedcontainers.SortedDict() 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF2 = {} 
==================================================
list4.update(list4)                                                     # STEP 32
ACTION: list4.update(list4) 
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = [] : <type 'list'>
REFERENCE ACTION: sortListMultiAdd(list_REF4,list_REF4) 
==================================================
list4.update(list4)                                                     # STEP 33
ACTION: list4.update(list4) 
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = [] : <type 'list'>
REFERENCE ACTION: sortListMultiAdd(list_REF4,list_REF4) 
==================================================
set2 = set1 & set1                                                      # STEP 34
ACTION: set2 = set1 & set1 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF1 = set([]) : <type 'set'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF2 = set_REF1 & set_REF1 
==================================================
result = len(dict3.keys())                                              # STEP 35
ACTION: result = len(dict3.keys())  
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF3.keys())  
==================================================
list4.islice(start=ival0,stop=ival7)                                    # STEP 36
ACTION: list4.islice(start=ival0,stop=ival7) 
ival0 = 7 : <type 'int'>
ival7 = 13 : <type 'int'>
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = [] : <type 'list'>
REFERENCE ACTION: list_REF4.islice(start=ival0,stop=ival7) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'islice'
==================================================
list4.extend(list4)                                                     # STEP 37
ACTION: list4.extend(list4) 
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = [] : <type 'list'>
REFERENCE ACTION: sortListExtend(list_REF4,list_REF4) 
==================================================
dict3.update(dict4)                                                     # STEP 38
ACTION: dict3.update(dict4) 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF3.update(dict_REF4) 
==================================================
ival0 = ival7 * ival7                                                   # STEP 39
ACTION: ival0 = ival7 * ival7 
ival7 = 13 : <type 'int'>
ival0 = 7 : <type 'int'>
=> ival0 = 169 : <type 'int'>
==================================================
dict3.islice(start=ival0,stop=ival0,reverse=True)                       # STEP 40
ACTION: dict3.islice(start=ival0,stop=ival0,reverse=True) 
ival0 = 169 : <type 'int'>
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF3.islice(start=ival0,stop=ival0,reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'islice'
==================================================
dict0 = sortedcontainers.SortedDict()                                   # STEP 41
ACTION: dict0 = sortedcontainers.SortedDict() 
dict0 = None : <type 'NoneType'>
dict_REF0 = None : <type 'NoneType'>
=> dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF0 = {} 
=> dict_REF0 = {} : <type 'dict'>
==================================================
set2.islice(start=None,stop=None)                                       # STEP 42
ACTION: set2.islice(start=None,stop=None) 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF2.islice(start=None,stop=None) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'islice'
==================================================
dict3.update(dict0)                                                     # STEP 43
ACTION: dict3.update(dict0) 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF3.update(dict_REF0) 
==================================================
set0 &= set3                                                            # STEP 44
ACTION: set0 &= set3 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF0 &= set_REF3 
==================================================
result = len(dict2.keys())                                              # STEP 45
ACTION: result = len(dict2.keys())  
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF2.keys())  
==================================================
set0.islice(start=ival0,stop=ival0)                                     # STEP 46
ACTION: set0.islice(start=ival0,stop=ival0) 
ival0 = 169 : <type 'int'>
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF0.islice(start=ival0,stop=ival0) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'islice'
==================================================
set2 = set3 & set3                                                      # STEP 47
ACTION: set2 = set3 & set3 
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF3 = set([]) : <type 'set'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF2 = set_REF3 & set_REF3 
==================================================
set2.islice(start=None,stop=None)                                       # STEP 48
ACTION: set2.islice(start=None,stop=None) 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF2.islice(start=None,stop=None) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'islice'
==================================================
list4.islice(start=ival7,stop=ival7)                                    # STEP 49
ACTION: list4.islice(start=ival7,stop=ival7) 
ival7 = 13 : <type 'int'>
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = [] : <type 'list'>
REFERENCE ACTION: list_REF4.islice(start=ival7,stop=ival7) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'islice'
==================================================
dict1 = sortedcontainers.SortedDict()                                   # STEP 50
ACTION: dict1 = sortedcontainers.SortedDict() 
dict1 = None : <type 'NoneType'>
dict_REF1 = None : <type 'NoneType'>
=> dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF1 = {} 
=> dict_REF1 = {} : <type 'dict'>
==================================================
result = len(dict3.keys())                                              # STEP 51
ACTION: result = len(dict3.keys())  
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF3.keys())  
==================================================
result = set3 == set3                                                   # STEP 52
ACTION: result = set3 == set3 
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = set_REF3 == set_REF3 
==================================================
val8 = ival7                                                            # STEP 53
ACTION: val8 = ival7 
ival7 = 13 : <type 'int'>
val8 = None : <type 'NoneType'>
=> val8 = 13 : <type 'int'>
==================================================
result = dict4.popitem()                                                # STEP 54
ACTION: result = dict4.popitem() 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF4 = {} : <type 'dict'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.KeyError'> 'popitem(): dictionary is empty'
REFERENCE ACTION: result_REF = sortDictPopitem(dict_REF4,) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.KeyError'> 
==================================================
result = list4.index(val8)                                              # STEP 55
ACTION: result = list4.index(val8) 
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val8 = 13 : <type 'int'>
list_REF4 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> 13 is not in list
REFERENCE ACTION: result_REF = list_REF4.index(val8) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.ValueError'> 13 is not in list
==================================================
val2 = ival0                                                            # STEP 56
ACTION: val2 = ival0 
ival0 = 169 : <type 'int'>
val2 = None : <type 'NoneType'>
=> val2 = 169 : <type 'int'>
==================================================
result = dict4.popitem(last=False)                                      # STEP 57
ACTION: result = dict4.popitem(last=False) 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF4 = {} : <type 'dict'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.KeyError'> 'popitem(): dictionary is empty'
REFERENCE ACTION: result_REF = sortDictPopitem(dict_REF4,last=False) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.KeyError'> 
==================================================
result = (dict1.keys()).count(val8)                                     # STEP 58
ACTION: result = (dict1.keys()).count(val8)  
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val8 = 13 : <type 'int'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = (dict_REF1.keys()).count(val8)  
==================================================
list3 = sortedcontainers.SortedList(plist3)                             # STEP 59
ACTION: list3 = sortedcontainers.SortedList(plist3) 
list3 = None : <type 'NoneType'>
plist3 = [] : <type 'list'>
list_REF3 = None : <type 'NoneType'>
=> list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: list_REF3 = list(plist3) 
=> list_REF3 = [] : <type 'list'>
==================================================
result = dict4.popitem()                                                # STEP 60
ACTION: result = dict4.popitem() 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF4 = {} : <type 'dict'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.KeyError'> 'popitem(): dictionary is empty'
REFERENCE ACTION: result_REF = sortDictPopitem(dict_REF4,) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.KeyError'> 
==================================================
dict0.islice(start=None,stop=None)                                      # STEP 61
ACTION: dict0.islice(start=None,stop=None) 
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF0.islice(start=None,stop=None) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'islice'
==================================================
ival0 = ival0 * ival7                                                   # STEP 62
ACTION: ival0 = ival0 * ival7 
ival0 = 169 : <type 'int'>
ival7 = 13 : <type 'int'>
=> ival0 = 2197 : <type 'int'>
==================================================
dict2.islice(start=None,stop=None)                                      # STEP 63
ACTION: dict2.islice(start=None,stop=None) 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF2.islice(start=None,stop=None) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'islice'
==================================================
set2.irange(minimum=val2,maximum=val8,inclusive=(False,False))          # STEP 64
ACTION: set2.irange(minimum=val2,maximum=val8,inclusive=(False,False)) 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
val2 = 169 : <type 'int'>
val8 = 13 : <type 'int'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF2.irange(minimum=val2,maximum=val8,inclusive=(False,False)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'irange'
==================================================
result = list4.index(val8)                                              # STEP 65
ACTION: result = list4.index(val8) 
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val8 = 13 : <type 'int'>
list_REF4 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> 13 is not in list
REFERENCE ACTION: result_REF = list_REF4.index(val8) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.ValueError'> 13 is not in list
==================================================
dict4 = dict1.fromkeys(list4,val2) ; result = dict4                     # STEP 66
ACTION: dict4 = dict1.fromkeys(list4,val2) ; result = dict4 
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val2 = 169 : <type 'int'>
list_REF4 = [] : <type 'list'>
dict_REF1 = {} : <type 'dict'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF4 = dict_REF1.fromkeys(list_REF4,val2) ; result_REF = dict_REF4 
==================================================
set1.islice(start=None,stop=None)                                       # STEP 67
ACTION: set1.islice(start=None,stop=None) 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1.islice(start=None,stop=None) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'islice'
==================================================
result = len(dict2.items())                                             # STEP 68
ACTION: result = len(dict2.items())  
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF2.items())  
==================================================
dict1.get(val8,None)                                                    # STEP 69
ACTION: dict1.get(val8,None) 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val8 = 13 : <type 'int'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF1.get(val8,None) 
==================================================
list1 = sortedcontainers.SortedList(plist2)                             # STEP 70
ACTION: list1 = sortedcontainers.SortedList(plist2) 
list1 = None : <type 'NoneType'>
plist2 = [] : <type 'list'>
list_REF1 = None : <type 'NoneType'>
=> list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: list_REF1 = list(plist2) 
=> list_REF1 = [] : <type 'list'>
==================================================
result = len(dict1.keys())                                              # STEP 71
ACTION: result = len(dict1.keys())  
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF1.keys())  
==================================================
dict4.islice(start=None,stop=None)                                      # STEP 72
ACTION: dict4.islice(start=None,stop=None) 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF4.islice(start=None,stop=None) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'islice'
==================================================
set2.irange(minimum=val2,maximum=val2,inclusive=(False,False))          # STEP 73
ACTION: set2.irange(minimum=val2,maximum=val2,inclusive=(False,False)) 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
val2 = 169 : <type 'int'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF2.irange(minimum=val2,maximum=val2,inclusive=(False,False)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'irange'
==================================================
result = dict0.pop(val2,val8)                                           # STEP 74
ACTION: result = dict0.pop(val2,val8) 
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val2 = 169 : <type 'int'>
val8 = 13 : <type 'int'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = dict_REF0.pop(val2,val8) 
==================================================
list4 > list3                                                           # STEP 75
ACTION: list4 > list3 
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = [] : <type 'list'>
list_REF3 = [] : <type 'list'>
REFERENCE ACTION: list_REF4 > list_REF3 
==================================================
list1.append(val2)                                                      # STEP 76
ACTION: list1.append(val2) 
list1 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val2 = 169 : <type 'int'>
list_REF1 = [] : <type 'list'>
=> list1 = SortedList([169], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: sortListAppend(list_REF1,val2) 
=> list_REF1 = [169] : <type 'list'>
==================================================
dict3 = dict0.fromkeys(list3,val2) ; result = dict3                     # STEP 77
ACTION: dict3 = dict0.fromkeys(list3,val2) ; result = dict3 
list3 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val2 = 169 : <type 'int'>
list_REF3 = [] : <type 'list'>
dict_REF0 = {} : <type 'dict'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF3 = dict_REF0.fromkeys(list_REF3,val2) ; result_REF = dict_REF3 
==================================================
dict4.get(val8,None)                                                    # STEP 78
ACTION: dict4.get(val8,None) 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val8 = 13 : <type 'int'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF4.get(val8,None) 
==================================================
ival1 = 3                                                               # STEP 79
ACTION: ival1 = 3 
ival1 = None : <type 'NoneType'>
=> ival1 = 3 : <type 'int'>
==================================================
set4 = set3 & set3                                                      # STEP 80
ACTION: set4 = set3 & set3 
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set4 = None : <type 'NoneType'>
set_REF3 = set([]) : <type 'set'>
set_REF4 = None : <type 'NoneType'>
=> set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF4 = set_REF3 & set_REF3 
=> set_REF4 = set([]) : <type 'set'>
==================================================
list1.islice(start=ival1,stop=ival1)                                    # STEP 81
ACTION: list1.islice(start=ival1,stop=ival1) 
ival1 = 3 : <type 'int'>
list1 = SortedList([169], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF1 = [169] : <type 'list'>
REFERENCE ACTION: list_REF1.islice(start=ival1,stop=ival1) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'islice'
==================================================
dict1 [val8]                                                            # STEP 82
ACTION: dict1 [val8] 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val8 = 13 : <type 'int'>
dict_REF1 = {} : <type 'dict'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.KeyError'> 13
REFERENCE ACTION: dict_REF1 [val8] 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.KeyError'> 13
==================================================
val7 = ival7                                                            # STEP 83
ACTION: val7 = ival7 
ival7 = 13 : <type 'int'>
val7 = None : <type 'NoneType'>
=> val7 = 13 : <type 'int'>
==================================================
dict1.islice(start=ival1,stop=ival1,reverse=True)                       # STEP 84
ACTION: dict1.islice(start=ival1,stop=ival1,reverse=True) 
ival1 = 3 : <type 'int'>
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF1.islice(start=ival1,stop=ival1,reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'islice'
==================================================
dict4.islice(start=None,stop=None)                                      # STEP 85
ACTION: dict4.islice(start=None,stop=None) 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF4.islice(start=None,stop=None) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'islice'
==================================================
dict1 = dict3.fromkeys(list4,val2) ; result = dict1                     # STEP 86
ACTION: dict1 = dict3.fromkeys(list4,val2) ; result = dict1 
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val2 = 169 : <type 'int'>
list_REF4 = [] : <type 'list'>
dict_REF3 = {} : <type 'dict'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF1 = dict_REF3.fromkeys(list_REF4,val2) ; result_REF = dict_REF1 
==================================================
list1.extend(list4)                                                     # STEP 87
ACTION: list1.extend(list4) 
list1 = SortedList([169], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF1 = [169] : <type 'list'>
list_REF4 = [] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x11fe56440>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 702519, in act11959
    self.p_list[1].extend(self.p_list[4])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 1
STOPPING TESTING DUE TO TIMEOUT
25.5137650252 PERCENT COVERED
60.24091506 TOTAL RUNTIME
33 EXECUTED
3189 TOTAL TEST OPERATIONS
1.77347254753 TIME SPENT EXECUTING TEST OPERATIONS
54.880594492 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
1.6441719532 TIME SPENT CHECKING PROPERTIES
3.41764450073 TOTAL TIME SPENT RUNNING SUT
0.488709449768 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
set3 = sortedcontainers.SortedSet()                                      # STEP 0
set1 = sortedcontainers.SortedSet()                                      # STEP 1
set0 = set3 & set3                                                       # STEP 2
set0 &= set3                                                             # STEP 3
set1 &= set0                                                             # STEP 4
set2 = sortedcontainers.SortedSet()                                      # STEP 5
set0 = set2 & set3                                                       # STEP 6
dict2 = sortedcontainers.SortedDict()                                    # STEP 7
result = dict2.peekitem()                                                # STEP 8
set3 = set1 & set1                                                       # STEP 9
result = len(dict2.items())                                             # STEP 10
result = len(dict2.keys())                                              # STEP 11
ival0 = 7                                                               # STEP 12
result = dict2.peekitem()                                               # STEP 13
set2 = set0 & set3                                                      # STEP 14
dict3 = sortedcontainers.SortedDict()                                   # STEP 15
repr(dict3)                                                             # STEP 16
list4 = sortedcontainers.SortedList()                                   # STEP 17
plist3 = list4 [ival0 : ival0]                                          # STEP 18
set0 = sortedcontainers.SortedSet()                                     # STEP 19
plist2 = list4 [ival0 : ival0]                                          # STEP 20
list4.update(list4)                                                     # STEP 21
ival7 = 13                                                              # STEP 22
list4.extend(list4)                                                     # STEP 23
set1 = set2 - set0                                                      # STEP 24
set2.islice(start=None,stop=None)                                       # STEP 25
list4.extend(list4)                                                     # STEP 26
dict4 = sortedcontainers.SortedDict()                                   # STEP 27
dict4.update(dict2)                                                     # STEP 28
set3 &= set3                                                            # STEP 29
list4.islice(start=ival0,stop=ival7)                                    # STEP 30
dict2 = sortedcontainers.SortedDict()                                   # STEP 31
list4.update(list4)                                                     # STEP 32
list4.update(list4)                                                     # STEP 33
set2 = set1 & set1                                                      # STEP 34
result = len(dict3.keys())                                              # STEP 35
list4.islice(start=ival0,stop=ival7)                                    # STEP 36
list4.extend(list4)                                                     # STEP 37
dict3.update(dict4)                                                     # STEP 38
ival0 = ival7 * ival7                                                   # STEP 39
dict3.islice(start=ival0,stop=ival0,reverse=True)                       # STEP 40
dict0 = sortedcontainers.SortedDict()                                   # STEP 41
set2.islice(start=None,stop=None)                                       # STEP 42
dict3.update(dict0)                                                     # STEP 43
set0 &= set3                                                            # STEP 44
result = len(dict2.keys())                                              # STEP 45
set0.islice(start=ival0,stop=ival0)                                     # STEP 46
set2 = set3 & set3                                                      # STEP 47
set2.islice(start=None,stop=None)                                       # STEP 48
list4.islice(start=ival7,stop=ival7)                                    # STEP 49
dict1 = sortedcontainers.SortedDict()                                   # STEP 50
result = len(dict3.keys())                                              # STEP 51
result = set3 == set3                                                   # STEP 52
val8 = ival7                                                            # STEP 53
result = dict4.popitem()                                                # STEP 54
result = list4.index(val8)                                              # STEP 55
val2 = ival0                                                            # STEP 56
result = dict4.popitem(last=False)                                      # STEP 57
result = (dict1.keys()).count(val8)                                     # STEP 58
list3 = sortedcontainers.SortedList(plist3)                             # STEP 59
result = dict4.popitem()                                                # STEP 60
dict0.islice(start=None,stop=None)                                      # STEP 61
ival0 = ival0 * ival7                                                   # STEP 62
dict2.islice(start=None,stop=None)                                      # STEP 63
set2.irange(minimum=val2,maximum=val8,inclusive=(False,False))          # STEP 64
result = list4.index(val8)                                              # STEP 65
dict4 = dict1.fromkeys(list4,val2) ; result = dict4                     # STEP 66
set1.islice(start=None,stop=None)                                       # STEP 67
result = len(dict2.items())                                             # STEP 68
dict1.get(val8,None)                                                    # STEP 69
list1 = sortedcontainers.SortedList(plist2)                             # STEP 70
result = len(dict1.keys())                                              # STEP 71
dict4.islice(start=None,stop=None)                                      # STEP 72
set2.irange(minimum=val2,maximum=val2,inclusive=(False,False))          # STEP 73
result = dict0.pop(val2,val8)                                           # STEP 74
list4 > list3                                                           # STEP 75
list1.append(val2)                                                      # STEP 76
dict3 = dict0.fromkeys(list3,val2) ; result = dict3                     # STEP 77
dict4.get(val8,None)                                                    # STEP 78
ival1 = 3                                                               # STEP 79
set4 = set3 & set3                                                      # STEP 80
list1.islice(start=ival1,stop=ival1)                                    # STEP 81
dict1 [val8]                                                            # STEP 82
val7 = ival7                                                            # STEP 83
dict1.islice(start=ival1,stop=ival1,reverse=True)                       # STEP 84
dict4.islice(start=None,stop=None)                                      # STEP 85
dict1 = dict3.fromkeys(list4,val2) ; result = dict1                     # STEP 86
list1.extend(list4)                                                     # STEP 87
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x11fe56440>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 702519, in act11959
    self.p_list[1].extend(self.p_list[4])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
631 BRANCHES COVERED
484 STATEMENTS COVERED

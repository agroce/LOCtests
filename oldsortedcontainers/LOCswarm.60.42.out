Random testing using config=Config(noExceptionMatch=False, generalize=False, localize=False, speed='FAST', probs='locsample.probs', LOCBaseline=0.2, noAlphaConvert=False, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, html=None, keepLast=False, stopWhenNoCoverage=None, generateLOC=None, computeFeatureStats=False, Pmutate=0.0, timeout=60, output='failure.10370.test', markov=None, noSwarmDependencies=False, startExploit=0.0, maxMustHitBranch=None, useHints=False, silentFail=False, highLowSwarm=None, maxMustHitStatement=None, progress=False, postCover=False, swarmLength=None, noCover=False, noEnumerateEnabled=False, full=True, swarmP=0.5, coverFile='coverage.out', markovP=1.0, swarmProbs=None, genDepth=None, exploitCeiling=0.1, logging=None, noCheck=False, throughput=False, uncaught=False, swarmSwitch=None, verbose=False, reducePool=False, exploit=None, fastQuickAnalysis=False, total=False, verboseExploit=False, swarm=True, sequenceP=1.0, biasLOC=None, timedProgress=30, relax=False, ddmin=False, stutter=None, readQuick=False, verboseActions=False, quickAnalysis=False, noReassign=False, sequenceSize=3, LOCProbs=False, sequencesFromTests=None, maxTests=-1, trackMaxCoverage=None, useQuickSequences=False, exploitBestHint=1, failedLogging=None, stopWhenStatements=None, greedyStutter=False, seed=None, stopWhenHitStatement=None, uniqueValuesAnalysis=False, normalize=False, startExploitStall=0, enumerateEnabled=False, internal=False, profile=False, multiple=True, stopWhenBranches=None, running=False, compareFails=False, Pcrossover=0.2, stopWhenHitBranch=None, depth=100, showActions=False)
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x11fdc1bd8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 702227, in act11954
    self.p_list[0].extend(self.p_list[4])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
Original test has 83 steps

SAVING TEST AS failure.10370.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
set0 = sortedcontainers.SortedSet()                                      # STEP 0
ACTION: set0 = sortedcontainers.SortedSet() 
set0 = None : <type 'NoneType'>
set_REF0 = None : <type 'NoneType'>
=> set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF0 = set([]) 
=> set_REF0 = set([]) : <type 'set'>
==================================================
set0.islice(start=None,stop=None)                                        # STEP 1
ACTION: set0.islice(start=None,stop=None) 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF0.islice(start=None,stop=None) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'islice'
==================================================
set0 = set0 ^ set0                                                       # STEP 2
ACTION: set0 = set0 ^ set0 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF0 = set_REF0 ^ set_REF0 
==================================================
set0.islice(start=None,stop=None)                                        # STEP 3
ACTION: set0.islice(start=None,stop=None) 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF0.islice(start=None,stop=None) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'islice'
==================================================
set0 &= set0                                                             # STEP 4
ACTION: set0 &= set0 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF0 &= set_REF0 
==================================================
set4 = sortedcontainers.SortedSet()                                      # STEP 5
ACTION: set4 = sortedcontainers.SortedSet() 
set4 = None : <type 'NoneType'>
set_REF4 = None : <type 'NoneType'>
=> set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF4 = set([]) 
=> set_REF4 = set([]) : <type 'set'>
==================================================
ival5 = 17                                                               # STEP 6
ACTION: ival5 = 17 
ival5 = None : <type 'NoneType'>
=> ival5 = 17 : <type 'int'>
==================================================
set2 = set0 ^ set4                                                       # STEP 7
ACTION: set2 = set0 ^ set4 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set2 = None : <type 'NoneType'>
set_REF0 = set([]) : <type 'set'>
set_REF4 = set([]) : <type 'set'>
set_REF2 = None : <type 'NoneType'>
=> set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF2 = set_REF0 ^ set_REF4 
=> set_REF2 = set([]) : <type 'set'>
==================================================
set0 ^= set2                                                             # STEP 8
ACTION: set0 ^= set2 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF0 ^= set_REF2 
==================================================
ival4 = ival5 * ival5                                                    # STEP 9
ACTION: ival4 = ival5 * ival5 
ival5 = 17 : <type 'int'>
ival4 = None : <type 'NoneType'>
=> ival4 = 289 : <type 'int'>
==================================================
set4 = set2 ^ set4                                                      # STEP 10
ACTION: set4 = set2 ^ set4 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF2 = set([]) : <type 'set'>
set_REF4 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF4 = set_REF2 ^ set_REF4 
==================================================
set2 = set0 ^ set2                                                      # STEP 11
ACTION: set2 = set0 ^ set2 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF2 = set_REF0 ^ set_REF2 
==================================================
set0 = set2 ^ set2                                                      # STEP 12
ACTION: set0 = set2 ^ set2 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF2 = set([]) : <type 'set'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF0 = set_REF2 ^ set_REF2 
==================================================
dict3 = sortedcontainers.SortedDict()                                   # STEP 13
ACTION: dict3 = sortedcontainers.SortedDict() 
dict3 = None : <type 'NoneType'>
dict_REF3 = None : <type 'NoneType'>
=> dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF3 = {} 
=> dict_REF3 = {} : <type 'dict'>
==================================================
result = sorted(list(dict3.keys()))                                     # STEP 14
ACTION: result = sorted(list(dict3.keys())) 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = sorted(list(dict_REF3.keys())) 
==================================================
sval5 = 't'                                                             # STEP 15
ACTION: sval5 = 't' 
sval5 = None : <type 'NoneType'>
=> sval5 = 't' : <type 'str'>
==================================================
ival0 = ival5 - ival5                                                   # STEP 16
ACTION: ival0 = ival5 - ival5 
ival5 = 17 : <type 'int'>
ival0 = None : <type 'NoneType'>
=> ival0 = 0 : <type 'int'>
==================================================
set2 = sortedcontainers.SortedSet()                                     # STEP 17
ACTION: set2 = sortedcontainers.SortedSet() 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF2 = set([]) 
==================================================
ival8 = ival0 * ival4                                                   # STEP 18
ACTION: ival8 = ival0 * ival4 
ival0 = 0 : <type 'int'>
ival4 = 289 : <type 'int'>
ival8 = None : <type 'NoneType'>
=> ival8 = 0 : <type 'int'>
==================================================
set3 = set2 ^ set2                                                      # STEP 19
ACTION: set3 = set2 ^ set2 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set3 = None : <type 'NoneType'>
set_REF2 = set([]) : <type 'set'>
set_REF3 = None : <type 'NoneType'>
=> set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF3 = set_REF2 ^ set_REF2 
=> set_REF3 = set([]) : <type 'set'>
==================================================
result = sorted(list(dict3.keys()))                                     # STEP 20
ACTION: result = sorted(list(dict3.keys())) 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = sorted(list(dict_REF3.keys())) 
==================================================
set2 = set2 - set4                                                      # STEP 21
ACTION: set2 = set2 - set4 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF2 = set([]) : <type 'set'>
set_REF4 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF2 = set_REF2 - set_REF4 
==================================================
list0 = sortedcontainers.SortedList()                                   # STEP 22
ACTION: list0 = sortedcontainers.SortedList() 
list0 = None : <type 'NoneType'>
list_REF0 = None : <type 'NoneType'>
=> list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: list_REF0 = [] 
=> list_REF0 = [] : <type 'list'>
==================================================
set4 = set3 ^ set4                                                      # STEP 23
ACTION: set4 = set3 ^ set4 
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF3 = set([]) : <type 'set'>
set_REF4 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF4 = set_REF3 ^ set_REF4 
==================================================
set4.islice(start=None,stop=ival8)                                      # STEP 24
ACTION: set4.islice(start=None,stop=ival8) 
ival8 = 0 : <type 'int'>
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF4 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF4.islice(start=None,stop=ival8) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'islice'
==================================================
set3.islice(start=None,stop=None)                                       # STEP 25
ACTION: set3.islice(start=None,stop=None) 
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF3.islice(start=None,stop=None) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'islice'
==================================================
result = list0 == list0                                                 # STEP 26
ACTION: result = list0 == list0 
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF0 = [] : <type 'list'>
REFERENCE ACTION: result_REF = list_REF0 == list_REF0 
==================================================
set3 = set2 - set2                                                      # STEP 27
ACTION: set3 = set2 - set2 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF2 = set([]) : <type 'set'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF3 = set_REF2 - set_REF2 
==================================================
dict4 = dict3.copy()                                                    # STEP 28
ACTION: dict4 = dict3.copy() 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict4 = None : <type 'NoneType'>
dict_REF3 = {} : <type 'dict'>
dict_REF4 = None : <type 'NoneType'>
=> dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF4 = dict_REF3.copy() 
=> dict_REF4 = {} : <type 'dict'>
==================================================
result = len(dict4.items())                                             # STEP 29
ACTION: result = len(dict4.items())  
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF4.items())  
==================================================
set3.islice(start=None,stop=ival8)                                      # STEP 30
ACTION: set3.islice(start=None,stop=ival8) 
ival8 = 0 : <type 'int'>
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF3.islice(start=None,stop=ival8) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'islice'
==================================================
result = len(dict4)                                                     # STEP 31
ACTION: result = len(dict4) 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF4) 
==================================================
result = len(dict4)                                                     # STEP 32
ACTION: result = len(dict4) 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF4) 
==================================================
dict3 = sortedcontainers.SortedDict()                                   # STEP 33
ACTION: dict3 = sortedcontainers.SortedDict() 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF3 = {} 
==================================================
set3.islice(start=None,stop=ival8)                                      # STEP 34
ACTION: set3.islice(start=None,stop=ival8) 
ival8 = 0 : <type 'int'>
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF3.islice(start=None,stop=ival8) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'islice'
==================================================
list0.islice(start=None,stop=None)                                      # STEP 35
ACTION: list0.islice(start=None,stop=None) 
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF0 = [] : <type 'list'>
REFERENCE ACTION: list_REF0.islice(start=None,stop=None) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'islice'
==================================================
set0.islice(start=None,stop=None)                                       # STEP 36
ACTION: set0.islice(start=None,stop=None) 
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF0.islice(start=None,stop=None) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'islice'
==================================================
set1 = set4 ^ set0                                                      # STEP 37
ACTION: set1 = set4 ^ set0 
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set0 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set1 = None : <type 'NoneType'>
set_REF4 = set([]) : <type 'set'>
set_REF0 = set([]) : <type 'set'>
set_REF1 = None : <type 'NoneType'>
=> set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF1 = set_REF4 ^ set_REF0 
=> set_REF1 = set([]) : <type 'set'>
==================================================
set1 &= set4                                                            # STEP 38
ACTION: set1 &= set4 
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF1 = set([]) : <type 'set'>
set_REF4 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF1 &= set_REF4 
==================================================
plist4 = list0 [ival0 : ival8]                                          # STEP 39
ACTION: plist4 = list0 [ival0 : ival8] 
ival0 = 0 : <type 'int'>
ival8 = 0 : <type 'int'>
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
plist4 = None : <type 'NoneType'>
list_REF0 = [] : <type 'list'>
=> plist4 = [] : <type 'list'>
REFERENCE ACTION: plist4 = list_REF0 [ival0 : ival8] 
==================================================
dict2 = dict3.copy()                                                    # STEP 40
ACTION: dict2 = dict3.copy() 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict2 = None : <type 'NoneType'>
dict_REF3 = {} : <type 'dict'>
dict_REF2 = None : <type 'NoneType'>
=> dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF2 = dict_REF3.copy() 
=> dict_REF2 = {} : <type 'dict'>
==================================================
sval2 = 'Q'                                                             # STEP 41
ACTION: sval2 = 'Q' 
sval2 = None : <type 'NoneType'>
=> sval2 = 'Q' : <type 'str'>
==================================================
sval7 = 'p'                                                             # STEP 42
ACTION: sval7 = 'p' 
sval7 = None : <type 'NoneType'>
=> sval7 = 'p' : <type 'str'>
==================================================
list0.islice(start=None,stop=None)                                      # STEP 43
ACTION: list0.islice(start=None,stop=None) 
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF0 = [] : <type 'list'>
REFERENCE ACTION: list_REF0.islice(start=None,stop=None) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'islice'
==================================================
sval8 = 'Q'                                                             # STEP 44
ACTION: sval8 = 'Q' 
sval8 = None : <type 'NoneType'>
=> sval8 = 'Q' : <type 'str'>
==================================================
val1 = ival0                                                            # STEP 45
ACTION: val1 = ival0 
ival0 = 0 : <type 'int'>
val1 = None : <type 'NoneType'>
=> val1 = 0 : <type 'int'>
==================================================
dict4 = dict3.copy()                                                    # STEP 46
ACTION: dict4 = dict3.copy() 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF4 = dict_REF3.copy() 
==================================================
set3 = sortedcontainers.SortedSet()                                     # STEP 47
ACTION: set3 = sortedcontainers.SortedSet() 
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF3 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF3 = set([]) 
==================================================
list0+=list0                                                            # STEP 48
ACTION: list0+=list0 
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF0 = [] : <type 'list'>
REFERENCE ACTION: sortListMultiAdd(list_REF0,list_REF0) 
==================================================
list0 > list0                                                           # STEP 49
ACTION: list0 > list0 
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF0 = [] : <type 'list'>
REFERENCE ACTION: list_REF0 > list_REF0 
==================================================
setListSlice(list0,ival5,ival8,list0)                                   # STEP 50
ACTION: setListSlice(list0,ival5,ival8,list0) 
ival5 = 17 : <type 'int'>
ival8 = 0 : <type 'int'>
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF0 = [] : <type 'list'>
REFERENCE ACTION: sortListSetSlice(list_REF0,ival5,ival8,list_REF0) 
==================================================
repr(list0)                                                             # STEP 51
ACTION: repr(list0) 
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF0 = [] : <type 'list'>
REFERENCE ACTION: repr(list_REF0) 
==================================================
plist2 = list0 [ival5 : ival4]                                          # STEP 52
ACTION: plist2 = list0 [ival5 : ival4] 
ival5 = 17 : <type 'int'>
ival4 = 289 : <type 'int'>
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
plist2 = None : <type 'NoneType'>
list_REF0 = [] : <type 'list'>
=> plist2 = [] : <type 'list'>
REFERENCE ACTION: plist2 = list_REF0 [ival5 : ival4] 
==================================================
dict2.get(val1,val1)                                                    # STEP 53
ACTION: dict2.get(val1,val1) 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val1 = 0 : <type 'int'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF2.get(val1,val1) 
==================================================
set3.add(val1)                                                          # STEP 54
ACTION: set3.add(val1) 
set3 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
val1 = 0 : <type 'int'>
set_REF3 = set([]) : <type 'set'>
=> set3 = SortedSet([0], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF3.add(val1) 
=> set_REF3 = set([0]) : <type 'set'>
==================================================
result = dict3.pop(val1,val1)                                           # STEP 55
ACTION: result = dict3.pop(val1,val1) 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val1 = 0 : <type 'int'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = dict_REF3.pop(val1,val1) 
==================================================
dict2.islice(start=ival8,stop=ival4,reverse=True)                       # STEP 56
ACTION: dict2.islice(start=ival8,stop=ival4,reverse=True) 
ival8 = 0 : <type 'int'>
ival4 = 289 : <type 'int'>
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF2.islice(start=ival8,stop=ival4,reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'islice'
==================================================
list0.extend(list0)                                                     # STEP 57
ACTION: list0.extend(list0) 
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF0 = [] : <type 'list'>
REFERENCE ACTION: sortListExtend(list_REF0,list_REF0) 
==================================================
set4 = set3 - set1                                                      # STEP 58
ACTION: set4 = set3 - set1 
set3 = SortedSet([0], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set1 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set4 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF3 = set([0]) : <type 'set'>
set_REF1 = set([]) : <type 'set'>
set_REF4 = set([]) : <type 'set'>
=> set4 = SortedSet([0], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
REFERENCE ACTION: set_REF4 = set_REF3 - set_REF1 
=> set_REF4 = set([0]) : <type 'set'>
==================================================
val7 = ival5                                                            # STEP 59
ACTION: val7 = ival5 
ival5 = 17 : <type 'int'>
val7 = None : <type 'NoneType'>
=> val7 = 17 : <type 'int'>
==================================================
dict2.get(val7,None)                                                    # STEP 60
ACTION: dict2.get(val7,None) 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val7 = 17 : <type 'int'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF2.get(val7,None) 
==================================================
list0 < list0                                                           # STEP 61
ACTION: list0 < list0 
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF0 = [] : <type 'list'>
REFERENCE ACTION: list_REF0 < list_REF0 
==================================================
set2.irange(minimum=val1,maximum=val1,inclusive=(False,False),reverse=True)  # STEP 62
ACTION: set2.irange(minimum=val1,maximum=val1,inclusive=(False,False),reverse=True) 
set2 = SortedSet([], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
val1 = 0 : <type 'int'>
set_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: set_REF2.irange(minimum=val1,maximum=val1,inclusive=(False,False),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'irange'
==================================================
dict2 = dict2.copy()                                                    # STEP 63
ACTION: dict2 = dict2.copy() 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF2 = dict_REF2.copy() 
==================================================
dict4.irange(minimum=val7,maximum=val1,inclusive=(False,False),reverse=True)  # STEP 64
ACTION: dict4.irange(minimum=val7,maximum=val1,inclusive=(False,False),reverse=True) 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val7 = 17 : <type 'int'>
val1 = 0 : <type 'int'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF4.irange(minimum=val7,maximum=val1,inclusive=(False,False),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'irange'
==================================================
result = sorted(list(dict2.keys()))                                     # STEP 65
ACTION: result = sorted(list(dict2.keys())) 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = sorted(list(dict_REF2.keys())) 
==================================================
set3.islice(start=None,stop=None)                                       # STEP 66
ACTION: set3.islice(start=None,stop=None) 
set3 = SortedSet([0], key=None, load=1000) : <class 'sortedcontainers.sortedset.SortedSet'>
set_REF3 = set([0]) : <type 'set'>
REFERENCE ACTION: set_REF3.islice(start=None,stop=None) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'set' object has no attribute 'islice'
==================================================
dict3.irange(minimum=val1,maximum=val7,inclusive=(False,False))         # STEP 67
ACTION: dict3.irange(minimum=val1,maximum=val7,inclusive=(False,False)) 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val1 = 0 : <type 'int'>
val7 = 17 : <type 'int'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF3.irange(minimum=val1,maximum=val7,inclusive=(False,False)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'irange'
==================================================
setListSlice(list0,ival4,ival5,list0)                                   # STEP 68
ACTION: setListSlice(list0,ival4,ival5,list0) 
ival4 = 289 : <type 'int'>
ival5 = 17 : <type 'int'>
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF0 = [] : <type 'list'>
REFERENCE ACTION: sortListSetSlice(list_REF0,ival4,ival5,list_REF0) 
==================================================
dict4.irange(minimum=val1,maximum=val7,inclusive=(False,False))         # STEP 69
ACTION: dict4.irange(minimum=val1,maximum=val7,inclusive=(False,False)) 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val1 = 0 : <type 'int'>
val7 = 17 : <type 'int'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF4.irange(minimum=val1,maximum=val7,inclusive=(False,False)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'irange'
==================================================
result = len(dict2)                                                     # STEP 70
ACTION: result = len(dict2) 
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF2) 
==================================================
list0.discard(val7)                                                     # STEP 71
ACTION: list0.discard(val7) 
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val7 = 17 : <type 'int'>
list_REF0 = [] : <type 'list'>
REFERENCE ACTION: sortListDiscard(list_REF0,val7) 
==================================================
list0+=list0                                                            # STEP 72
ACTION: list0+=list0 
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF0 = [] : <type 'list'>
REFERENCE ACTION: sortListMultiAdd(list_REF0,list_REF0) 
==================================================
dict0 = dict3.copy()                                                    # STEP 73
ACTION: dict0 = dict3.copy() 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict0 = None : <type 'NoneType'>
dict_REF3 = {} : <type 'dict'>
dict_REF0 = None : <type 'NoneType'>
=> dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF0 = dict_REF3.copy() 
=> dict_REF0 = {} : <type 'dict'>
==================================================
result = sorted(list(dict4.keys()))                                     # STEP 74
ACTION: result = sorted(list(dict4.keys())) 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF4 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = sorted(list(dict_REF4.keys())) 
==================================================
dict3 = sortedcontainers.SortedDict()                                   # STEP 75
ACTION: dict3 = sortedcontainers.SortedDict() 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF3 = {} 
==================================================
list0.insert(ival5,val7)                                                # STEP 76
ACTION: list0.insert(ival5,val7) 
ival5 = 17 : <type 'int'>
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val7 = 17 : <type 'int'>
list_REF0 = [] : <type 'list'>
=> list0 = SortedList([17], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: sortListInsert(list_REF0,ival5,val7) 
=> list_REF0 = [17] : <type 'list'>
==================================================
result = list0.count(val7)                                              # STEP 77
ACTION: result = list0.count(val7) 
list0 = SortedList([17], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val7 = 17 : <type 'int'>
list_REF0 = [17] : <type 'list'>
REFERENCE ACTION: result_REF = list_REF0.count(val7) 
==================================================
list4 = sortedcontainers.SortedList(plist2)                             # STEP 78
ACTION: list4 = sortedcontainers.SortedList(plist2) 
list4 = None : <type 'NoneType'>
plist2 = [] : <type 'list'>
list_REF4 = None : <type 'NoneType'>
=> list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: list_REF4 = list(plist2) 
=> list_REF4 = [] : <type 'list'>
==================================================
dict0.islice(start=ival0,stop=ival8,reverse=True)                       # STEP 79
ACTION: dict0.islice(start=ival0,stop=ival8,reverse=True) 
ival0 = 0 : <type 'int'>
ival8 = 0 : <type 'int'>
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF0.islice(start=ival0,stop=ival8,reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'islice'
==================================================
dict0.islice(start=ival5,stop=ival5)                                    # STEP 80
ACTION: dict0.islice(start=ival5,stop=ival5) 
ival5 = 17 : <type 'int'>
dict0 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF0 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF0.islice(start=ival5,stop=ival5) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'islice'
==================================================
dict2 = dict4.copy()                                                    # STEP 81
ACTION: dict2 = dict4.copy() 
dict4 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict2 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF4 = {} : <type 'dict'>
dict_REF2 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF2 = dict_REF4.copy() 
==================================================
list0.extend(list4)                                                     # STEP 82
ACTION: list0.extend(list4) 
list0 = SortedList([17], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF0 = [17] : <type 'list'>
list_REF4 = [] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x11fd33320>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 702227, in act11954
    self.p_list[0].extend(self.p_list[4])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #16 STEP #0 (0:00:30.067308) Mon Nov 20 16:21:32 2017 [ 382 stmts 499 branches ] (no cov+ for 1 tests) 1483 TOTAL ACTIONS (49.3226730678/s)
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x11fe69098>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 703164, in act11970
    self.p_list[4].extend(self.p_list[0])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
Original test has 52 steps

SAVING TEST AS failure.10370.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
list4 = sortedcontainers.SortedList()                                    # STEP 0
ACTION: list4 = sortedcontainers.SortedList() 
list4 = None : <type 'NoneType'>
list_REF4 = None : <type 'NoneType'>
=> list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: list_REF4 = [] 
=> list_REF4 = [] : <type 'list'>
==================================================
dict1 = sortedcontainers.SortedDict()                                    # STEP 1
ACTION: dict1 = sortedcontainers.SortedDict() 
dict1 = None : <type 'NoneType'>
dict_REF1 = None : <type 'NoneType'>
=> dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF1 = {} 
=> dict_REF1 = {} : <type 'dict'>
==================================================
list4.islice(start=None,stop=None)                                       # STEP 2
ACTION: list4.islice(start=None,stop=None) 
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = [] : <type 'list'>
REFERENCE ACTION: list_REF4.islice(start=None,stop=None) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'islice'
==================================================
repr(dict1)                                                              # STEP 3
ACTION: repr(dict1) 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: repr(dict_REF1) 
==================================================
result = dict1 == dict1                                                  # STEP 4
ACTION: result = dict1 == dict1 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = dict_REF1 == dict_REF1 
==================================================
list4.extend(list4)                                                      # STEP 5
ACTION: list4.extend(list4) 
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = [] : <type 'list'>
REFERENCE ACTION: sortListExtend(list_REF4,list_REF4) 
==================================================
list4 <= list4                                                           # STEP 6
ACTION: list4 <= list4 
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = [] : <type 'list'>
REFERENCE ACTION: list_REF4 <= list_REF4 
==================================================
repr(list4)                                                              # STEP 7
ACTION: repr(list4) 
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = [] : <type 'list'>
REFERENCE ACTION: repr(list_REF4) 
==================================================
result = len(dict1)                                                      # STEP 8
ACTION: result = len(dict1) 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = len(dict_REF1) 
==================================================
ival3 = 4                                                                # STEP 9
ACTION: ival3 = 4 
ival3 = None : <type 'NoneType'>
=> ival3 = 4 : <type 'int'>
==================================================
sval4 = 'm'                                                             # STEP 10
ACTION: sval4 = 'm' 
sval4 = None : <type 'NoneType'>
=> sval4 = 'm' : <type 'str'>
==================================================
ival9 = ival3 - ival3                                                   # STEP 11
ACTION: ival9 = ival3 - ival3 
ival3 = 4 : <type 'int'>
ival9 = None : <type 'NoneType'>
=> ival9 = 0 : <type 'int'>
==================================================
val1 = ival3                                                            # STEP 12
ACTION: val1 = ival3 
ival3 = 4 : <type 'int'>
val1 = None : <type 'NoneType'>
=> val1 = 4 : <type 'int'>
==================================================
dict1.islice(start=ival9,stop=ival9)                                    # STEP 13
ACTION: dict1.islice(start=ival9,stop=ival9) 
ival9 = 0 : <type 'int'>
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF1.islice(start=ival9,stop=ival9) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'islice'
==================================================
val8 = ival9                                                            # STEP 14
ACTION: val8 = ival9 
ival9 = 0 : <type 'int'>
val8 = None : <type 'NoneType'>
=> val8 = 0 : <type 'int'>
==================================================
dict1.update(dict1)                                                     # STEP 15
ACTION: dict1.update(dict1) 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF1.update(dict_REF1) 
==================================================
dict3 = sortedcontainers.SortedDict()                                   # STEP 16
ACTION: dict3 = sortedcontainers.SortedDict() 
dict3 = None : <type 'NoneType'>
dict_REF3 = None : <type 'NoneType'>
=> dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
REFERENCE ACTION: dict_REF3 = {} 
=> dict_REF3 = {} : <type 'dict'>
==================================================
ival9 = 13                                                              # STEP 17
ACTION: ival9 = 13 
ival9 = 0 : <type 'int'>
=> ival9 = 13 : <type 'int'>
==================================================
list4+=list4                                                            # STEP 18
ACTION: list4+=list4 
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = [] : <type 'list'>
REFERENCE ACTION: sortListMultiAdd(list_REF4,list_REF4) 
==================================================
result = (dict3.keys()).count(val8)                                     # STEP 19
ACTION: result = (dict3.keys()).count(val8)  
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val8 = 0 : <type 'int'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = (dict_REF3.keys()).count(val8)  
==================================================
result = (dict3.items()).count(val1)                                    # STEP 20
ACTION: result = (dict3.items()).count(val1)  
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val1 = 4 : <type 'int'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = (dict_REF3.items()).count(val1)  
==================================================
list4+=list4                                                            # STEP 21
ACTION: list4+=list4 
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = [] : <type 'list'>
REFERENCE ACTION: sortListMultiAdd(list_REF4,list_REF4) 
==================================================
sval7 = 'e'                                                             # STEP 22
ACTION: sval7 = 'e' 
sval7 = None : <type 'NoneType'>
=> sval7 = 'e' : <type 'str'>
==================================================
dict3.irange(minimum=val8,maximum=val1,inclusive=(False,False))         # STEP 23
ACTION: dict3.irange(minimum=val8,maximum=val1,inclusive=(False,False)) 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val8 = 0 : <type 'int'>
val1 = 4 : <type 'int'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF3.irange(minimum=val8,maximum=val1,inclusive=(False,False)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'irange'
==================================================
dict3.irange(minimum=val1,maximum=val8,inclusive=(False,False),reverse=True)  # STEP 24
ACTION: dict3.irange(minimum=val1,maximum=val8,inclusive=(False,False),reverse=True) 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val1 = 4 : <type 'int'>
val8 = 0 : <type 'int'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF3.irange(minimum=val1,maximum=val8,inclusive=(False,False),reverse=True) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'irange'
==================================================
result = dict3 == dict3                                                 # STEP 25
ACTION: result = dict3 == dict3 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = dict_REF3 == dict_REF3 
==================================================
list4.extend(list4)                                                     # STEP 26
ACTION: list4.extend(list4) 
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = [] : <type 'list'>
REFERENCE ACTION: sortListExtend(list_REF4,list_REF4) 
==================================================
setListSlice(list4,ival3,ival9,list4)                                   # STEP 27
ACTION: setListSlice(list4,ival3,ival9,list4) 
ival3 = 4 : <type 'int'>
ival9 = 13 : <type 'int'>
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = [] : <type 'list'>
REFERENCE ACTION: sortListSetSlice(list_REF4,ival3,ival9,list_REF4) 
==================================================
list4.irange(minimum=val1,maximum=val1,inclusive=(True,False))          # STEP 28
ACTION: list4.irange(minimum=val1,maximum=val1,inclusive=(True,False)) 
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val1 = 4 : <type 'int'>
list_REF4 = [] : <type 'list'>
REFERENCE ACTION: list_REF4.irange(minimum=val1,maximum=val1,inclusive=(True,False)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
list4 *= ival3                                                          # STEP 29
ACTION: list4 *= ival3 
ival3 = 4 : <type 'int'>
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = [] : <type 'list'>
REFERENCE ACTION: sortListMultiply(list_REF4,ival3) 
==================================================
result = (dict1.items()).count(val1)                                    # STEP 30
ACTION: result = (dict1.items()).count(val1)  
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val1 = 4 : <type 'int'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = (dict_REF1.items()).count(val1)  
==================================================
setListSlice(list4,ival3,ival9,list4)                                   # STEP 31
ACTION: setListSlice(list4,ival3,ival9,list4) 
ival3 = 4 : <type 'int'>
ival9 = 13 : <type 'int'>
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = [] : <type 'list'>
REFERENCE ACTION: sortListSetSlice(list_REF4,ival3,ival9,list_REF4) 
==================================================
repr(dict1)                                                             # STEP 32
ACTION: repr(dict1) 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: repr(dict_REF1) 
==================================================
ival8 = ival9 + ival9                                                   # STEP 33
ACTION: ival8 = ival9 + ival9 
ival9 = 13 : <type 'int'>
ival8 = None : <type 'NoneType'>
=> ival8 = 26 : <type 'int'>
==================================================
dict1.islice(start=None,stop=ival3)                                     # STEP 34
ACTION: dict1.islice(start=None,stop=ival3) 
ival3 = 4 : <type 'int'>
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF1.islice(start=None,stop=ival3) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'islice'
==================================================
dict1.irange(minimum=val1,maximum=val1,inclusive=(False,False))         # STEP 35
ACTION: dict1.irange(minimum=val1,maximum=val1,inclusive=(False,False)) 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val1 = 4 : <type 'int'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF1.irange(minimum=val1,maximum=val1,inclusive=(False,False)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'irange'
==================================================
result = list4 == list4                                                 # STEP 36
ACTION: result = list4 == list4 
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = [] : <type 'list'>
REFERENCE ACTION: result_REF = list_REF4 == list_REF4 
==================================================
result = list4.pop(ival3)                                               # STEP 37
ACTION: result = list4.pop(ival3) 
ival3 = 4 : <type 'int'>
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> pop index out of range
REFERENCE ACTION: result_REF = list_REF4.pop(ival3) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> pop from empty list
==================================================
list4.islice(start=None,stop=ival8)                                     # STEP 38
ACTION: list4.islice(start=None,stop=ival8) 
ival8 = 26 : <type 'int'>
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = [] : <type 'list'>
REFERENCE ACTION: list_REF4.islice(start=None,stop=ival8) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'islice'
==================================================
list4.add(val8)                                                         # STEP 39
ACTION: list4.add(val8) 
list4 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val8 = 0 : <type 'int'>
list_REF4 = [] : <type 'list'>
=> list4 = SortedList([0], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: sortListAdd(list_REF4,val8) 
=> list_REF4 = [0] : <type 'list'>
==================================================
dict1.get(val8,None)                                                    # STEP 40
ACTION: dict1.get(val8,None) 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val8 = 0 : <type 'int'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF1.get(val8,None) 
==================================================
result = dict1 == dict1                                                 # STEP 41
ACTION: result = dict1 == dict1 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: result_REF = dict_REF1 == dict_REF1 
==================================================
list4.irange(minimum=val1,maximum=val1,inclusive=(True,False))          # STEP 42
ACTION: list4.irange(minimum=val1,maximum=val1,inclusive=(True,False)) 
list4 = SortedList([0], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val1 = 4 : <type 'int'>
list_REF4 = [0] : <type 'list'>
REFERENCE ACTION: list_REF4.irange(minimum=val1,maximum=val1,inclusive=(True,False)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'list' object has no attribute 'irange'
==================================================
dict3.irange(minimum=val8,maximum=val1,inclusive=(False,True))          # STEP 43
ACTION: dict3.irange(minimum=val8,maximum=val1,inclusive=(False,True)) 
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
val8 = 0 : <type 'int'>
val1 = 4 : <type 'int'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF3.irange(minimum=val8,maximum=val1,inclusive=(False,True)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'irange'
==================================================
plist1 = list4 [ival3 : ival3]                                          # STEP 44
ACTION: plist1 = list4 [ival3 : ival3] 
ival3 = 4 : <type 'int'>
list4 = SortedList([0], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
plist1 = None : <type 'NoneType'>
list_REF4 = [0] : <type 'list'>
=> plist1 = [] : <type 'list'>
REFERENCE ACTION: plist1 = list_REF4 [ival3 : ival3] 
==================================================
list0 = sortedcontainers.SortedList()                                   # STEP 45
ACTION: list0 = sortedcontainers.SortedList() 
list0 = None : <type 'NoneType'>
list_REF0 = None : <type 'NoneType'>
=> list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
REFERENCE ACTION: list_REF0 = [] 
=> list_REF0 = [] : <type 'list'>
==================================================
dict1.islice(start=None,stop=None)                                      # STEP 46
ACTION: dict1.islice(start=None,stop=None) 
dict1 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF1 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF1.islice(start=None,stop=None) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'islice'
==================================================
list0.remove(val1)                                                      # STEP 47
ACTION: list0.remove(val1) 
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
val1 = 4 : <type 'int'>
list_REF0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> 4 not in list
REFERENCE ACTION: list_REF0.remove(val1) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.ValueError'> list.remove(x): x not in list
==================================================
result = dict3.peekitem(ival8)                                          # STEP 48
ACTION: result = dict3.peekitem(ival8) 
ival8 = 26 : <type 'int'>
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
REFERENCE ACTION: result_REF = sortDictPeekitem(dict_REF3,ival8) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
==================================================
list4 <= list0                                                          # STEP 49
ACTION: list4 <= list0 
list4 = SortedList([0], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = [0] : <type 'list'>
list_REF0 = [] : <type 'list'>
REFERENCE ACTION: list_REF4 <= list_REF0 
==================================================
dict3.islice(start=None,stop=ival3)                                     # STEP 50
ACTION: dict3.islice(start=None,stop=ival3) 
ival3 = 4 : <type 'int'>
dict3 = SortedDict(None, 1000, {}) : <class 'sortedcontainers.sorteddict.SortedDict'>
dict_REF3 = {} : <type 'dict'>
REFERENCE ACTION: dict_REF3.islice(start=None,stop=ival3) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'dict' object has no attribute 'islice'
==================================================
list4.extend(list0)                                                     # STEP 51
ACTION: list4.extend(list0) 
list4 = SortedList([0], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list0 = SortedList([], load=1000) : <class 'sortedcontainers.sortedlist.SortedList'>
list_REF4 = [0] : <type 'list'>
list_REF0 = [] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.IndexError'> list index out of range
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x11fdadcb0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 703164, in act11970
    self.p_list[4].extend(self.p_list[0])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 3
STOPPING TESTING DUE TO TIMEOUT
22.6444358278 PERCENT COVERED
60.2000670433 TOTAL RUNTIME
32 EXECUTED
3038 TOTAL TEST OPERATIONS
1.64203119278 TIME SPENT EXECUTING TEST OPERATIONS
55.1770482063 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
1.46888589859 TIME SPENT CHECKING PROPERTIES
3.11091709137 TOTAL TIME SPENT RUNNING SUT
0.499920606613 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
2 FAILED
0 REPEATS OF FAILURES
2 ACTUAL DISTINCT FAILURES

FAILURE 0
set0 = sortedcontainers.SortedSet()                                      # STEP 0
set0.islice(start=None,stop=None)                                        # STEP 1
set0 = set0 ^ set0                                                       # STEP 2
set0.islice(start=None,stop=None)                                        # STEP 3
set0 &= set0                                                             # STEP 4
set4 = sortedcontainers.SortedSet()                                      # STEP 5
ival5 = 17                                                               # STEP 6
set2 = set0 ^ set4                                                       # STEP 7
set0 ^= set2                                                             # STEP 8
ival4 = ival5 * ival5                                                    # STEP 9
set4 = set2 ^ set4                                                      # STEP 10
set2 = set0 ^ set2                                                      # STEP 11
set0 = set2 ^ set2                                                      # STEP 12
dict3 = sortedcontainers.SortedDict()                                   # STEP 13
result = sorted(list(dict3.keys()))                                     # STEP 14
sval5 = 't'                                                             # STEP 15
ival0 = ival5 - ival5                                                   # STEP 16
set2 = sortedcontainers.SortedSet()                                     # STEP 17
ival8 = ival0 * ival4                                                   # STEP 18
set3 = set2 ^ set2                                                      # STEP 19
result = sorted(list(dict3.keys()))                                     # STEP 20
set2 = set2 - set4                                                      # STEP 21
list0 = sortedcontainers.SortedList()                                   # STEP 22
set4 = set3 ^ set4                                                      # STEP 23
set4.islice(start=None,stop=ival8)                                      # STEP 24
set3.islice(start=None,stop=None)                                       # STEP 25
result = list0 == list0                                                 # STEP 26
set3 = set2 - set2                                                      # STEP 27
dict4 = dict3.copy()                                                    # STEP 28
result = len(dict4.items())                                             # STEP 29
set3.islice(start=None,stop=ival8)                                      # STEP 30
result = len(dict4)                                                     # STEP 31
result = len(dict4)                                                     # STEP 32
dict3 = sortedcontainers.SortedDict()                                   # STEP 33
set3.islice(start=None,stop=ival8)                                      # STEP 34
list0.islice(start=None,stop=None)                                      # STEP 35
set0.islice(start=None,stop=None)                                       # STEP 36
set1 = set4 ^ set0                                                      # STEP 37
set1 &= set4                                                            # STEP 38
plist4 = list0 [ival0 : ival8]                                          # STEP 39
dict2 = dict3.copy()                                                    # STEP 40
sval2 = 'Q'                                                             # STEP 41
sval7 = 'p'                                                             # STEP 42
list0.islice(start=None,stop=None)                                      # STEP 43
sval8 = 'Q'                                                             # STEP 44
val1 = ival0                                                            # STEP 45
dict4 = dict3.copy()                                                    # STEP 46
set3 = sortedcontainers.SortedSet()                                     # STEP 47
list0+=list0                                                            # STEP 48
list0 > list0                                                           # STEP 49
setListSlice(list0,ival5,ival8,list0)                                   # STEP 50
repr(list0)                                                             # STEP 51
plist2 = list0 [ival5 : ival4]                                          # STEP 52
dict2.get(val1,val1)                                                    # STEP 53
set3.add(val1)                                                          # STEP 54
result = dict3.pop(val1,val1)                                           # STEP 55
dict2.islice(start=ival8,stop=ival4,reverse=True)                       # STEP 56
list0.extend(list0)                                                     # STEP 57
set4 = set3 - set1                                                      # STEP 58
val7 = ival5                                                            # STEP 59
dict2.get(val7,None)                                                    # STEP 60
list0 < list0                                                           # STEP 61
set2.irange(minimum=val1,maximum=val1,inclusive=(False,False),reverse=True)  # STEP 62
dict2 = dict2.copy()                                                    # STEP 63
dict4.irange(minimum=val7,maximum=val1,inclusive=(False,False),reverse=True)  # STEP 64
result = sorted(list(dict2.keys()))                                     # STEP 65
set3.islice(start=None,stop=None)                                       # STEP 66
dict3.irange(minimum=val1,maximum=val7,inclusive=(False,False))         # STEP 67
setListSlice(list0,ival4,ival5,list0)                                   # STEP 68
dict4.irange(minimum=val1,maximum=val7,inclusive=(False,False))         # STEP 69
result = len(dict2)                                                     # STEP 70
list0.discard(val7)                                                     # STEP 71
list0+=list0                                                            # STEP 72
dict0 = dict3.copy()                                                    # STEP 73
result = sorted(list(dict4.keys()))                                     # STEP 74
dict3 = sortedcontainers.SortedDict()                                   # STEP 75
list0.insert(ival5,val7)                                                # STEP 76
result = list0.count(val7)                                              # STEP 77
list4 = sortedcontainers.SortedList(plist2)                             # STEP 78
dict0.islice(start=ival0,stop=ival8,reverse=True)                       # STEP 79
dict0.islice(start=ival5,stop=ival5)                                    # STEP 80
dict2 = dict4.copy()                                                    # STEP 81
list0.extend(list4)                                                     # STEP 82
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x11fd33320>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 702227, in act11954
    self.p_list[0].extend(self.p_list[4])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
FAILURE 1
list4 = sortedcontainers.SortedList()                                    # STEP 0
dict1 = sortedcontainers.SortedDict()                                    # STEP 1
list4.islice(start=None,stop=None)                                       # STEP 2
repr(dict1)                                                              # STEP 3
result = dict1 == dict1                                                  # STEP 4
list4.extend(list4)                                                      # STEP 5
list4 <= list4                                                           # STEP 6
repr(list4)                                                              # STEP 7
result = len(dict1)                                                      # STEP 8
ival3 = 4                                                                # STEP 9
sval4 = 'm'                                                             # STEP 10
ival9 = ival3 - ival3                                                   # STEP 11
val1 = ival3                                                            # STEP 12
dict1.islice(start=ival9,stop=ival9)                                    # STEP 13
val8 = ival9                                                            # STEP 14
dict1.update(dict1)                                                     # STEP 15
dict3 = sortedcontainers.SortedDict()                                   # STEP 16
ival9 = 13                                                              # STEP 17
list4+=list4                                                            # STEP 18
result = (dict3.keys()).count(val8)                                     # STEP 19
result = (dict3.items()).count(val1)                                    # STEP 20
list4+=list4                                                            # STEP 21
sval7 = 'e'                                                             # STEP 22
dict3.irange(minimum=val8,maximum=val1,inclusive=(False,False))         # STEP 23
dict3.irange(minimum=val1,maximum=val8,inclusive=(False,False),reverse=True)  # STEP 24
result = dict3 == dict3                                                 # STEP 25
list4.extend(list4)                                                     # STEP 26
setListSlice(list4,ival3,ival9,list4)                                   # STEP 27
list4.irange(minimum=val1,maximum=val1,inclusive=(True,False))          # STEP 28
list4 *= ival3                                                          # STEP 29
result = (dict1.items()).count(val1)                                    # STEP 30
setListSlice(list4,ival3,ival9,list4)                                   # STEP 31
repr(dict1)                                                             # STEP 32
ival8 = ival9 + ival9                                                   # STEP 33
dict1.islice(start=None,stop=ival3)                                     # STEP 34
dict1.irange(minimum=val1,maximum=val1,inclusive=(False,False))         # STEP 35
result = list4 == list4                                                 # STEP 36
result = list4.pop(ival3)                                               # STEP 37
list4.islice(start=None,stop=ival8)                                     # STEP 38
list4.add(val8)                                                         # STEP 39
dict1.get(val8,None)                                                    # STEP 40
result = dict1 == dict1                                                 # STEP 41
list4.irange(minimum=val1,maximum=val1,inclusive=(True,False))          # STEP 42
dict3.irange(minimum=val8,maximum=val1,inclusive=(False,True))          # STEP 43
plist1 = list4 [ival3 : ival3]                                          # STEP 44
list0 = sortedcontainers.SortedList()                                   # STEP 45
dict1.islice(start=None,stop=None)                                      # STEP 46
list0.remove(val1)                                                      # STEP 47
result = dict3.peekitem(ival8)                                          # STEP 48
list4 <= list0                                                          # STEP 49
dict3.islice(start=None,stop=ival3)                                     # STEP 50
list4.extend(list0)                                                     # STEP 51
ERROR: (<type 'exceptions.IndexError'>, IndexError('list index out of range',), <traceback object at 0x11fdadcb0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 2306941, in safely
    act[2]()
  File "/Users/alex/tstl/examples/oldsortedcontainers/sut.py", line 703164, in act11970
    self.p_list[4].extend(self.p_list[0])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sortedcontainers/sortedlist.py", line 1083, in extend
    if values[0] < _lists[-1][-1]:
564 BRANCHES COVERED
434 STATEMENTS COVERED

Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.798.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1046e46c8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
Original test has 36 steps

SAVING TEST AS failure.798.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 6                                                                 # STEP 0
ACTION: int2 = 6 
int2 = None : <type 'NoneType'>
=> int2 = 6 : <type 'int'>
==================================================
int3 = 11                                                                # STEP 1
ACTION: int3 = 11 
int3 = None : <type 'NoneType'>
=> int3 = 11 : <type 'int'>
==================================================
int1 = 1                                                                 # STEP 2
ACTION: int1 = 1 
int1 = None : <type 'NoneType'>
=> int1 = 1 : <type 'int'>
==================================================
int0 = 14                                                                # STEP 3
ACTION: int0 = 14 
int0 = None : <type 'NoneType'>
=> int0 = 14 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 4
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x10464eab8> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.insert(int3)                                                        # STEP 5
ACTION: avl0.insert(int3) 
int3 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10464eab8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([11]) : <type 'set'>
==================================================
int3 = 17                                                                # STEP 6
ACTION: int3 = 17 
int3 = 11 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
avl0.insert(int1)                                                        # STEP 7
ACTION: avl0.insert(int1) 
int1 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10464eab8> : <type 'instance'>
avl_REF0 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([1, 11]) : <type 'set'>
==================================================
int1 = 18                                                                # STEP 8
ACTION: int1 = 18 
int1 = 1 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
avl0 == avl0                                                             # STEP 9
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x10464eab8> : <type 'instance'>
avl_REF0 = set([1, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl0.delete(int2)                                                       # STEP 10
ACTION: avl0.delete(int2) 
int2 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10464eab8> : <type 'instance'>
avl_REF0 = set([1, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.insert(int2)                                                       # STEP 11
ACTION: avl0.insert(int2) 
int2 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10464eab8> : <type 'instance'>
avl_REF0 = set([1, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([1, 11, 6]) : <type 'set'>
==================================================
int2 = 8                                                                # STEP 12
ACTION: int2 = 8 
int2 = 6 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 13
ACTION: avl0.delete(int0) 
int0 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10464eab8> : <type 'instance'>
avl_REF0 = set([1, 11, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int0 = 18                                                               # STEP 14
ACTION: int0 = 18 
int0 = 14 : <type 'int'>
=> int0 = 18 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 15
ACTION: avl0.delete(int3) 
int3 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10464eab8> : <type 'instance'>
avl_REF0 = set([1, 11, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.delete(int3)                                                       # STEP 16
ACTION: avl0.delete(int3) 
int3 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10464eab8> : <type 'instance'>
avl_REF0 = set([1, 11, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.delete(int3)                                                       # STEP 17
ACTION: avl0.delete(int3) 
int3 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10464eab8> : <type 'instance'>
avl_REF0 = set([1, 11, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int3 = 13                                                               # STEP 18
ACTION: int3 = 13 
int3 = 17 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 19
ACTION: avl0.delete(int1) 
int1 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10464eab8> : <type 'instance'>
avl_REF0 = set([1, 11, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int1 = 17                                                               # STEP 20
ACTION: int1 = 17 
int1 = 18 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
result = avl0.find(int3)                                                # STEP 21
ACTION: result = avl0.find(int3) 
int3 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10464eab8> : <type 'instance'>
avl_REF0 = set([1, 11, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
avl0.insert(int2)                                                       # STEP 22
ACTION: avl0.insert(int2) 
int2 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10464eab8> : <type 'instance'>
avl_REF0 = set([1, 11, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([8, 1, 11, 6]) : <type 'set'>
==================================================
avl0 == avl0                                                            # STEP 23
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x10464eab8> : <type 'instance'>
avl_REF0 = set([8, 1, 11, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
int2 = 7                                                                # STEP 24
ACTION: int2 = 7 
int2 = 8 : <type 'int'>
=> int2 = 7 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 25
ACTION: avl0.delete(int0) 
int0 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10464eab8> : <type 'instance'>
avl_REF0 = set([8, 1, 11, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int0 = 12                                                               # STEP 26
ACTION: int0 = 12 
int0 = 18 : <type 'int'>
=> int0 = 12 : <type 'int'>
==================================================
int3 = 1                                                                # STEP 27
ACTION: int3 = 1 
int3 = 13 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 28
ACTION: avl0.delete(int2) 
int2 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10464eab8> : <type 'instance'>
avl_REF0 = set([8, 1, 11, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.insert(int0)                                                       # STEP 29
ACTION: avl0.insert(int0) 
int0 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10464eab8> : <type 'instance'>
avl_REF0 = set([8, 1, 11, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([8, 1, 11, 12, 6]) : <type 'set'>
==================================================
result = avl0.find(int1)                                                # STEP 30
ACTION: result = avl0.find(int1) 
int1 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10464eab8> : <type 'instance'>
avl_REF0 = set([8, 1, 11, 12, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
int1 = 19                                                               # STEP 31
ACTION: int1 = 19 
int1 = 17 : <type 'int'>
=> int1 = 19 : <type 'int'>
==================================================
int0 = 5                                                                # STEP 32
ACTION: int0 = 5 
int0 = 12 : <type 'int'>
=> int0 = 5 : <type 'int'>
==================================================
result = avl0.find(int2)                                                # STEP 33
ACTION: result = avl0.find(int2) 
int2 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10464eab8> : <type 'instance'>
avl_REF0 = set([8, 1, 11, 12, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
int2 = 1                                                                # STEP 34
ACTION: int2 = 1 
int2 = 7 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 35
ACTION: avl0.delete(int3) 
int3 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10464eab8> : <type 'instance'>
avl_REF0 = set([8, 1, 11, 12, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([8, 11, 12, 6]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1048e4fc8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #4 STEP #79 (0:00:30.061571) Fri Apr 28 07:19:37 2017 [ 135 stmts 181 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104281878>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 98 steps

SAVING TEST AS failure.798.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 20                                                                # STEP 0
ACTION: int1 = 20 
int1 = None : <type 'NoneType'>
=> int1 = 20 : <type 'int'>
==================================================
int2 = 5                                                                 # STEP 1
ACTION: int2 = 5 
int2 = None : <type 'NoneType'>
=> int2 = 5 : <type 'int'>
==================================================
int0 = 19                                                                # STEP 2
ACTION: int0 = 19 
int0 = None : <type 'NoneType'>
=> int0 = 19 : <type 'int'>
==================================================
int3 = 2                                                                 # STEP 3
ACTION: int3 = 2 
int3 = None : <type 'NoneType'>
=> int3 = 2 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 4
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x104281c20> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
result = avl0.find(int1)                                                 # STEP 5
ACTION: result = avl0.find(int1) 
int1 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104281c20> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl0.delete(int3)                                                        # STEP 6
ACTION: avl0.delete(int3) 
int3 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104281c20> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int1 = 5                                                                 # STEP 7
ACTION: int1 = 5 
int1 = 20 : <type 'int'>
=> int1 = 5 : <type 'int'>
==================================================
int3 = 5                                                                 # STEP 8
ACTION: int3 = 5 
int3 = 2 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 9
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x1049c6998> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl0.find(int2)                                                # STEP 10
ACTION: result = avl0.find(int2) 
int2 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104281c20> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl0.insert(int2)                                                       # STEP 11
ACTION: avl0.insert(int2) 
int2 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104281c20> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([5]) : <type 'set'>
==================================================
int2 = 20                                                               # STEP 12
ACTION: int2 = 20 
int2 = 5 : <type 'int'>
=> int2 = 20 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 13
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x1049e6560> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl2 == avl0                                                            # STEP 14
ACTION: avl2 == avl0 
avl2 = <avl.AVLTree instance at 0x1049c6998> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x104281c20> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
avl_REF0 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF0 
==================================================
result = avl1.inorder()                                                 # STEP 15
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1049e6560> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl0.delete(int2)                                                       # STEP 16
ACTION: avl0.delete(int2) 
int2 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104281c20> : <type 'instance'>
avl_REF0 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int2 = 18                                                               # STEP 17
ACTION: int2 = 18 
int2 = 20 : <type 'int'>
=> int2 = 18 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 18
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x1049c6998> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl0.find(int2)                                                # STEP 19
ACTION: result = avl0.find(int2) 
int2 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104281c20> : <type 'instance'>
avl_REF0 = set([5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl0.delete(int2)                                                       # STEP 20
ACTION: avl0.delete(int2) 
int2 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104281c20> : <type 'instance'>
avl_REF0 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
result = avl2.find(int3)                                                # STEP 21
ACTION: result = avl2.find(int3) 
int3 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1049c6998> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl2 == avl2                                                            # STEP 22
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x1049c6998> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
int3 = 9                                                                # STEP 23
ACTION: int3 = 9 
int3 = 5 : <type 'int'>
=> int3 = 9 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 24
ACTION: avl1 = avl.AVLTree() 
avl1 = <avl.AVLTree instance at 0x1049e6560> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
=> avl1 = <avl.AVLTree instance at 0x104650248> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
==================================================
avl1 == avl1                                                            # STEP 25
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x104650248> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
result = avl0.find(int2)                                                # STEP 26
ACTION: result = avl0.find(int2) 
int2 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104281c20> : <type 'instance'>
avl_REF0 = set([5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl1.insert(int0)                                                       # STEP 27
ACTION: avl1.insert(int0) 
int0 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104650248> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([19]) : <type 'set'>
==================================================
avl2 == avl2                                                            # STEP 28
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x1049c6998> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
int0 = 5                                                                # STEP 29
ACTION: int0 = 5 
int0 = 19 : <type 'int'>
=> int0 = 5 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 30
ACTION: avl0.insert(int3) 
int3 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104281c20> : <type 'instance'>
avl_REF0 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([9, 5]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 31
ACTION: avl1.insert(int3) 
int3 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104650248> : <type 'instance'>
avl_REF1 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([9, 19]) : <type 'set'>
==================================================
avl0 == avl0                                                            # STEP 32
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x104281c20> : <type 'instance'>
avl_REF0 = set([9, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
int3 = 18                                                               # STEP 33
ACTION: int3 = 18 
int3 = 9 : <type 'int'>
=> int3 = 18 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 34
ACTION: avl2.insert(int1) 
int1 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1049c6998> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([5]) : <type 'set'>
==================================================
int2 = 7                                                                # STEP 35
ACTION: int2 = 7 
int2 = 18 : <type 'int'>
=> int2 = 7 : <type 'int'>
==================================================
result = avl1.find(int0)                                                # STEP 36
ACTION: result = avl1.find(int0) 
int0 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104650248> : <type 'instance'>
avl_REF1 = set([9, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
int1 = 12                                                               # STEP 37
ACTION: int1 = 12 
int1 = 5 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 38
ACTION: avl0.insert(int0) 
int0 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104281c20> : <type 'instance'>
avl_REF0 = set([9, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
int0 = 4                                                                # STEP 39
ACTION: int0 = 4 
int0 = 5 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 40
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104281c20> : <type 'instance'>
avl_REF0 = set([9, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl2 == avl2                                                            # STEP 41
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x1049c6998> : <type 'instance'>
avl_REF2 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl2.insert(int0)                                                       # STEP 42
ACTION: avl2.insert(int0) 
int0 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1049c6998> : <type 'instance'>
avl_REF2 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([4, 5]) : <type 'set'>
==================================================
int0 = 2                                                                # STEP 43
ACTION: int0 = 2 
int0 = 4 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 44
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104281c20> : <type 'instance'>
avl_REF0 = set([9, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
result = avl1.inorder()                                                 # STEP 45
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104650248> : <type 'instance'>
avl_REF1 = set([9, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
result = avl1.find(int3)                                                # STEP 46
ACTION: result = avl1.find(int3) 
int3 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104650248> : <type 'instance'>
avl_REF1 = set([9, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
result = avl1.find(int2)                                                # STEP 47
ACTION: result = avl1.find(int2) 
int2 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104650248> : <type 'instance'>
avl_REF1 = set([9, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int2 = 15                                                               # STEP 48
ACTION: int2 = 15 
int2 = 7 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
avl1 == avl2                                                            # STEP 49
ACTION: avl1 == avl2 
avl1 = <avl.AVLTree instance at 0x104650248> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x1049c6998> : <type 'instance'>
avl_REF1 = set([9, 19]) : <type 'set'>
avl_REF2 = set([4, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
result = avl2.inorder()                                                 # STEP 50
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x1049c6998> : <type 'instance'>
avl_REF2 = set([4, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2 == avl2                                                            # STEP 51
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x1049c6998> : <type 'instance'>
avl_REF2 = set([4, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
result = avl1.find(int1)                                                # STEP 52
ACTION: result = avl1.find(int1) 
int1 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104650248> : <type 'instance'>
avl_REF1 = set([9, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int1 = 13                                                               # STEP 53
ACTION: int1 = 13 
int1 = 12 : <type 'int'>
=> int1 = 13 : <type 'int'>
==================================================
int3 = 2                                                                # STEP 54
ACTION: int3 = 2 
int3 = 18 : <type 'int'>
=> int3 = 2 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 55
ACTION: avl0.delete(int0) 
int0 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104281c20> : <type 'instance'>
avl_REF0 = set([9, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.insert(int3)                                                       # STEP 56
ACTION: avl0.insert(int3) 
int3 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104281c20> : <type 'instance'>
avl_REF0 = set([9, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([9, 2, 5]) : <type 'set'>
==================================================
result = avl0.find(int1)                                                # STEP 57
ACTION: result = avl0.find(int1) 
int1 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104281c20> : <type 'instance'>
avl_REF0 = set([9, 2, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl1.insert(int2)                                                       # STEP 58
ACTION: avl1.insert(int2) 
int2 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104650248> : <type 'instance'>
avl_REF1 = set([9, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([9, 19, 15]) : <type 'set'>
==================================================
int3 = 10                                                               # STEP 59
ACTION: int3 = 10 
int3 = 2 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 60
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x1049c6998> : <type 'instance'>
avl_REF2 = set([4, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl2.find(int0)                                                # STEP 61
ACTION: result = avl2.find(int0) 
int0 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1049c6998> : <type 'instance'>
avl_REF2 = set([4, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl1.delete(int0)                                                       # STEP 62
ACTION: avl1.delete(int0) 
int0 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104650248> : <type 'instance'>
avl_REF1 = set([9, 19, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int2 = 19                                                               # STEP 63
ACTION: int2 = 19 
int2 = 15 : <type 'int'>
=> int2 = 19 : <type 'int'>
==================================================
result = avl0.find(int3)                                                # STEP 64
ACTION: result = avl0.find(int3) 
int3 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104281c20> : <type 'instance'>
avl_REF0 = set([9, 2, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
int1 = 13                                                               # STEP 65
ACTION: int1 = 13 
int1 = 13 : <type 'int'>
==================================================
int3 = 3                                                                # STEP 66
ACTION: int3 = 3 
int3 = 10 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
int0 = 2                                                                # STEP 67
ACTION: int0 = 2 
int0 = 2 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 68
ACTION: avl2.insert(int3) 
int3 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1049c6998> : <type 'instance'>
avl_REF2 = set([4, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([3, 4, 5]) : <type 'set'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 69
ACTION: avl0 = avl.AVLTree() 
avl0 = <avl.AVLTree instance at 0x104281c20> : <type 'instance'>
avl_REF0 = set([9, 2, 5]) : <type 'set'>
=> avl0 = <avl.AVLTree instance at 0x10465f3f8> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
result = avl0.find(int0)                                                # STEP 70
ACTION: result = avl0.find(int0) 
int0 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10465f3f8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
int3 = 19                                                               # STEP 71
ACTION: int3 = 19 
int3 = 3 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
avl0 == avl1                                                            # STEP 72
ACTION: avl0 == avl1 
avl0 = <avl.AVLTree instance at 0x10465f3f8> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x104650248> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
avl_REF1 = set([9, 19, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF1 
==================================================
int0 = 7                                                                # STEP 73
ACTION: int0 = 7 
int0 = 2 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
result = avl2.find(int0)                                                # STEP 74
ACTION: result = avl2.find(int0) 
int0 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1049c6998> : <type 'instance'>
avl_REF2 = set([3, 4, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl2.delete(int0)                                                       # STEP 75
ACTION: avl2.delete(int0) 
int0 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1049c6998> : <type 'instance'>
avl_REF2 = set([3, 4, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
result = avl1.find(int1)                                                # STEP 76
ACTION: result = avl1.find(int1) 
int1 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104650248> : <type 'instance'>
avl_REF1 = set([9, 19, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl2 == avl1                                                            # STEP 77
ACTION: avl2 == avl1 
avl2 = <avl.AVLTree instance at 0x1049c6998> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x104650248> : <type 'instance'>
avl_REF2 = set([3, 4, 5]) : <type 'set'>
avl_REF1 = set([9, 19, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
avl0 == avl0                                                            # STEP 78
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x10465f3f8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
int0 = 13                                                               # STEP 79
ACTION: int0 = 13 
int0 = 7 : <type 'int'>
=> int0 = 13 : <type 'int'>
==================================================
avl2 == avl0                                                            # STEP 80
ACTION: avl2 == avl0 
avl2 = <avl.AVLTree instance at 0x1049c6998> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x10465f3f8> : <type 'instance'>
avl_REF2 = set([3, 4, 5]) : <type 'set'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF0 
==================================================
int1 = 12                                                               # STEP 81
ACTION: int1 = 12 
int1 = 13 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
result = avl0.find(int1)                                                # STEP 82
ACTION: result = avl0.find(int1) 
int1 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10465f3f8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl1.insert(int1)                                                       # STEP 83
ACTION: avl1.insert(int1) 
int1 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104650248> : <type 'instance'>
avl_REF1 = set([9, 19, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([9, 19, 12, 15]) : <type 'set'>
==================================================
avl2 == avl1                                                            # STEP 84
ACTION: avl2 == avl1 
avl2 = <avl.AVLTree instance at 0x1049c6998> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x104650248> : <type 'instance'>
avl_REF2 = set([3, 4, 5]) : <type 'set'>
avl_REF1 = set([9, 19, 12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
avl2.insert(int2)                                                       # STEP 85
ACTION: avl2.insert(int2) 
int2 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1049c6998> : <type 'instance'>
avl_REF2 = set([3, 4, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([19, 3, 4, 5]) : <type 'set'>
==================================================
avl0 == avl2                                                            # STEP 86
ACTION: avl0 == avl2 
avl0 = <avl.AVLTree instance at 0x10465f3f8> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x1049c6998> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
avl_REF2 = set([19, 3, 4, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
int2 = 12                                                               # STEP 87
ACTION: int2 = 12 
int2 = 19 : <type 'int'>
=> int2 = 12 : <type 'int'>
==================================================
int1 = 15                                                               # STEP 88
ACTION: int1 = 15 
int1 = 12 : <type 'int'>
=> int1 = 15 : <type 'int'>
==================================================
result = avl1.find(int2)                                                # STEP 89
ACTION: result = avl1.find(int2) 
int2 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104650248> : <type 'instance'>
avl_REF1 = set([9, 19, 12, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int2 = 1                                                                # STEP 90
ACTION: int2 = 1 
int2 = 12 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
avl0 == avl1                                                            # STEP 91
ACTION: avl0 == avl1 
avl0 = <avl.AVLTree instance at 0x10465f3f8> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x104650248> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
avl_REF1 = set([9, 19, 12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF1 
==================================================
avl2 == avl1                                                            # STEP 92
ACTION: avl2 == avl1 
avl2 = <avl.AVLTree instance at 0x1049c6998> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x104650248> : <type 'instance'>
avl_REF2 = set([19, 3, 4, 5]) : <type 'set'>
avl_REF1 = set([9, 19, 12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
result = avl1.find(int0)                                                # STEP 93
ACTION: result = avl1.find(int0) 
int0 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104650248> : <type 'instance'>
avl_REF1 = set([9, 19, 12, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl1 == avl1                                                            # STEP 94
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x104650248> : <type 'instance'>
avl_REF1 = set([9, 19, 12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl0.delete(int2)                                                       # STEP 95
ACTION: avl0.delete(int2) 
int2 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10465f3f8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
result = avl2.find(int3)                                                # STEP 96
ACTION: result = avl2.find(int3) 
int3 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1049c6998> : <type 'instance'>
avl_REF2 = set([19, 3, 4, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl1.delete(int1)                                                       # STEP 97
ACTION: avl1.delete(int1) 
int1 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104650248> : <type 'instance'>
avl_REF1 = set([9, 19, 12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([9, 19, 12]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1049fb440>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 47
STOPPING TESTING DUE TO TIMEOUT
7.9742110621 PERCENT COVERED
60.1551280022 TOTAL RUNTIME
7 EXECUTED
581 TOTAL TEST OPERATIONS
24.1490409374 TIME SPENT EXECUTING TEST OPERATIONS
0.0214507579803 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
24.3014545441 TIME SPENT CHECKING PROPERTIES
48.4504954815 TOTAL TIME SPENT RUNNING SUT
0.00426197052002 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
2 FAILED
0 REPEATS OF FAILURES
2 ACTUAL DISTINCT FAILURES

FAILURE 0
int2 = 6                                                                 # STEP 0
int3 = 11                                                                # STEP 1
int1 = 1                                                                 # STEP 2
int0 = 14                                                                # STEP 3
avl0 = avl.AVLTree()                                                     # STEP 4
avl0.insert(int3)                                                        # STEP 5
int3 = 17                                                                # STEP 6
avl0.insert(int1)                                                        # STEP 7
int1 = 18                                                                # STEP 8
avl0 == avl0                                                             # STEP 9
avl0.delete(int2)                                                       # STEP 10
avl0.insert(int2)                                                       # STEP 11
int2 = 8                                                                # STEP 12
avl0.delete(int0)                                                       # STEP 13
int0 = 18                                                               # STEP 14
avl0.delete(int3)                                                       # STEP 15
avl0.delete(int3)                                                       # STEP 16
avl0.delete(int3)                                                       # STEP 17
int3 = 13                                                               # STEP 18
avl0.delete(int1)                                                       # STEP 19
int1 = 17                                                               # STEP 20
result = avl0.find(int3)                                                # STEP 21
avl0.insert(int2)                                                       # STEP 22
avl0 == avl0                                                            # STEP 23
int2 = 7                                                                # STEP 24
avl0.delete(int0)                                                       # STEP 25
int0 = 12                                                               # STEP 26
int3 = 1                                                                # STEP 27
avl0.delete(int2)                                                       # STEP 28
avl0.insert(int0)                                                       # STEP 29
result = avl0.find(int1)                                                # STEP 30
int1 = 19                                                               # STEP 31
int0 = 5                                                                # STEP 32
result = avl0.find(int2)                                                # STEP 33
int2 = 1                                                                # STEP 34
avl0.delete(int3)                                                       # STEP 35
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1048e4fc8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE 1
int1 = 20                                                                # STEP 0
int2 = 5                                                                 # STEP 1
int0 = 19                                                                # STEP 2
int3 = 2                                                                 # STEP 3
avl0 = avl.AVLTree()                                                     # STEP 4
result = avl0.find(int1)                                                 # STEP 5
avl0.delete(int3)                                                        # STEP 6
int1 = 5                                                                 # STEP 7
int3 = 5                                                                 # STEP 8
avl2 = avl.AVLTree()                                                     # STEP 9
result = avl0.find(int2)                                                # STEP 10
avl0.insert(int2)                                                       # STEP 11
int2 = 20                                                               # STEP 12
avl1 = avl.AVLTree()                                                    # STEP 13
avl2 == avl0                                                            # STEP 14
result = avl1.inorder()                                                 # STEP 15
avl0.delete(int2)                                                       # STEP 16
int2 = 18                                                               # STEP 17
result = avl2.inorder()                                                 # STEP 18
result = avl0.find(int2)                                                # STEP 19
avl0.delete(int2)                                                       # STEP 20
result = avl2.find(int3)                                                # STEP 21
avl2 == avl2                                                            # STEP 22
int3 = 9                                                                # STEP 23
avl1 = avl.AVLTree()                                                    # STEP 24
avl1 == avl1                                                            # STEP 25
result = avl0.find(int2)                                                # STEP 26
avl1.insert(int0)                                                       # STEP 27
avl2 == avl2                                                            # STEP 28
int0 = 5                                                                # STEP 29
avl0.insert(int3)                                                       # STEP 30
avl1.insert(int3)                                                       # STEP 31
avl0 == avl0                                                            # STEP 32
int3 = 18                                                               # STEP 33
avl2.insert(int1)                                                       # STEP 34
int2 = 7                                                                # STEP 35
result = avl1.find(int0)                                                # STEP 36
int1 = 12                                                               # STEP 37
avl0.insert(int0)                                                       # STEP 38
int0 = 4                                                                # STEP 39
result = avl0.inorder()                                                 # STEP 40
avl2 == avl2                                                            # STEP 41
avl2.insert(int0)                                                       # STEP 42
int0 = 2                                                                # STEP 43
result = avl0.inorder()                                                 # STEP 44
result = avl1.inorder()                                                 # STEP 45
result = avl1.find(int3)                                                # STEP 46
result = avl1.find(int2)                                                # STEP 47
int2 = 15                                                               # STEP 48
avl1 == avl2                                                            # STEP 49
result = avl2.inorder()                                                 # STEP 50
avl2 == avl2                                                            # STEP 51
result = avl1.find(int1)                                                # STEP 52
int1 = 13                                                               # STEP 53
int3 = 2                                                                # STEP 54
avl0.delete(int0)                                                       # STEP 55
avl0.insert(int3)                                                       # STEP 56
result = avl0.find(int1)                                                # STEP 57
avl1.insert(int2)                                                       # STEP 58
int3 = 10                                                               # STEP 59
result = avl2.inorder()                                                 # STEP 60
result = avl2.find(int0)                                                # STEP 61
avl1.delete(int0)                                                       # STEP 62
int2 = 19                                                               # STEP 63
result = avl0.find(int3)                                                # STEP 64
int1 = 13                                                               # STEP 65
int3 = 3                                                                # STEP 66
int0 = 2                                                                # STEP 67
avl2.insert(int3)                                                       # STEP 68
avl0 = avl.AVLTree()                                                    # STEP 69
result = avl0.find(int0)                                                # STEP 70
int3 = 19                                                               # STEP 71
avl0 == avl1                                                            # STEP 72
int0 = 7                                                                # STEP 73
result = avl2.find(int0)                                                # STEP 74
avl2.delete(int0)                                                       # STEP 75
result = avl1.find(int1)                                                # STEP 76
avl2 == avl1                                                            # STEP 77
avl0 == avl0                                                            # STEP 78
int0 = 13                                                               # STEP 79
avl2 == avl0                                                            # STEP 80
int1 = 12                                                               # STEP 81
result = avl0.find(int1)                                                # STEP 82
avl1.insert(int1)                                                       # STEP 83
avl2 == avl1                                                            # STEP 84
avl2.insert(int2)                                                       # STEP 85
avl0 == avl2                                                            # STEP 86
int2 = 12                                                               # STEP 87
int1 = 15                                                               # STEP 88
result = avl1.find(int2)                                                # STEP 89
int2 = 1                                                                # STEP 90
avl0 == avl1                                                            # STEP 91
avl2 == avl1                                                            # STEP 92
result = avl1.find(int0)                                                # STEP 93
avl1 == avl1                                                            # STEP 94
avl0.delete(int2)                                                       # STEP 95
result = avl2.find(int3)                                                # STEP 96
avl1.delete(int1)                                                       # STEP 97
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1049fb440>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
200 BRANCHES COVERED
150 STATEMENTS COVERED

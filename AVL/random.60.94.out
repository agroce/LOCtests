Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.1031.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  11 [2:0]
-- < 2 [1:-1]
---- > 5 [0:0] L
-- > 15 [1:0]
---- < 14 [0:0] L
---- > 19 [0:0] L
set([2, 5, 11, 14, 15, 19])
TEST #4 STEP #72 (0:00:30.011325) Fri Apr 28 07:59:17 2017 [ 162 stmts 215 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103975c68>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 100 steps

SAVING TEST AS failure.1031.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 12                                                                # STEP 0
ACTION: int1 = 12 
int1 = None : <type 'NoneType'>
=> int1 = 12 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 1
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x103a61f80> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int3 = 3                                                                 # STEP 2
ACTION: int3 = 3 
int3 = None : <type 'NoneType'>
=> int3 = 3 : <type 'int'>
==================================================
int0 = 9                                                                 # STEP 3
ACTION: int0 = 9 
int0 = None : <type 'NoneType'>
=> int0 = 9 : <type 'int'>
==================================================
int2 = 5                                                                 # STEP 4
ACTION: int2 = 5 
int2 = None : <type 'NoneType'>
=> int2 = 5 : <type 'int'>
==================================================
result = avl0.find(int3)                                                 # STEP 5
ACTION: result = avl0.find(int3) 
int3 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a61f80> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
int3 = 18                                                                # STEP 6
ACTION: int3 = 18 
int3 = 3 : <type 'int'>
=> int3 = 18 : <type 'int'>
==================================================
result = avl0.find(int2)                                                 # STEP 7
ACTION: result = avl0.find(int2) 
int2 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a61f80> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
int2 = 2                                                                 # STEP 8
ACTION: int2 = 2 
int2 = 5 : <type 'int'>
=> int2 = 2 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 9
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x103f9ef80> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 10
ACTION: avl2.insert(int0) 
int0 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103f9ef80> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([9]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 11
ACTION: avl0.delete(int1) 
int1 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a61f80> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int1 = 7                                                                # STEP 12
ACTION: int1 = 7 
int1 = 12 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
int0 = 13                                                               # STEP 13
ACTION: int0 = 13 
int0 = 9 : <type 'int'>
=> int0 = 13 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 14
ACTION: avl0.delete(int0) 
int0 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a61f80> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int0 = 5                                                                # STEP 15
ACTION: int0 = 5 
int0 = 13 : <type 'int'>
=> int0 = 5 : <type 'int'>
==================================================
result = avl2.find(int3)                                                # STEP 16
ACTION: result = avl2.find(int3) 
int3 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103f9ef80> : <type 'instance'>
avl_REF2 = set([9]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
result = avl0.find(int2)                                                # STEP 17
ACTION: result = avl0.find(int2) 
int2 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a61f80> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
int3 = 15                                                               # STEP 18
ACTION: int3 = 15 
int3 = 18 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
int2 = 11                                                               # STEP 19
ACTION: int2 = 11 
int2 = 2 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 20
ACTION: avl0.insert(int2) 
int2 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a61f80> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([11]) : <type 'set'>
==================================================
int2 = 9                                                                # STEP 21
ACTION: int2 = 9 
int2 = 11 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
result = avl2.find(int3)                                                # STEP 22
ACTION: result = avl2.find(int3) 
int3 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103f9ef80> : <type 'instance'>
avl_REF2 = set([9]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl2.delete(int3)                                                       # STEP 23
ACTION: avl2.delete(int3) 
int3 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103f9ef80> : <type 'instance'>
avl_REF2 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int3 = 10                                                               # STEP 24
ACTION: int3 = 10 
int3 = 15 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
result = avl0.find(int1)                                                # STEP 25
ACTION: result = avl0.find(int1) 
int1 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a61f80> : <type 'instance'>
avl_REF0 = set([11]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl0.insert(int1)                                                       # STEP 26
ACTION: avl0.insert(int1) 
int1 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a61f80> : <type 'instance'>
avl_REF0 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([11, 7]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 27
ACTION: avl2.delete(int3) 
int3 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103f9ef80> : <type 'instance'>
avl_REF2 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
result = avl2.find(int1)                                                # STEP 28
ACTION: result = avl2.find(int1) 
int1 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103f9ef80> : <type 'instance'>
avl_REF2 = set([9]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int1 = 9                                                                # STEP 29
ACTION: int1 = 9 
int1 = 7 : <type 'int'>
=> int1 = 9 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 30
ACTION: avl2.insert(int1) 
int1 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103f9ef80> : <type 'instance'>
avl_REF2 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl1 = avl.AVLTree()                                                    # STEP 31
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x103a5cb48> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
result = avl0.find(int2)                                                # STEP 32
ACTION: result = avl0.find(int2) 
int2 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a61f80> : <type 'instance'>
avl_REF0 = set([11, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl2.delete(int0)                                                       # STEP 33
ACTION: avl2.delete(int0) 
int0 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103f9ef80> : <type 'instance'>
avl_REF2 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int0 = 15                                                               # STEP 34
ACTION: int0 = 15 
int0 = 5 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
int1 = 16                                                               # STEP 35
ACTION: int1 = 16 
int1 = 9 : <type 'int'>
=> int1 = 16 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 36
ACTION: avl1.insert(int0) 
int0 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103a5cb48> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([15]) : <type 'set'>
==================================================
int0 = 8                                                                # STEP 37
ACTION: int0 = 8 
int0 = 15 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 38
ACTION: avl1.delete(int0) 
int0 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103a5cb48> : <type 'instance'>
avl_REF1 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int3 = 17                                                               # STEP 39
ACTION: int3 = 17 
int3 = 10 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
result = avl1.find(int1)                                                # STEP 40
ACTION: result = avl1.find(int1) 
int1 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103a5cb48> : <type 'instance'>
avl_REF1 = set([15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int2 = 14                                                               # STEP 41
ACTION: int2 = 14 
int2 = 9 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
result = avl0.find(int1)                                                # STEP 42
ACTION: result = avl0.find(int1) 
int1 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a61f80> : <type 'instance'>
avl_REF0 = set([11, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl0 == avl1                                                            # STEP 43
ACTION: avl0 == avl1 
avl0 = <avl.AVLTree instance at 0x103a61f80> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x103a5cb48> : <type 'instance'>
avl_REF0 = set([11, 7]) : <type 'set'>
avl_REF1 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF1 
==================================================
result = avl0.find(int3)                                                # STEP 44
ACTION: result = avl0.find(int3) 
int3 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a61f80> : <type 'instance'>
avl_REF0 = set([11, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
result = avl1.find(int1)                                                # STEP 45
ACTION: result = avl1.find(int1) 
int1 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103a5cb48> : <type 'instance'>
avl_REF1 = set([15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int1 = 13                                                               # STEP 46
ACTION: int1 = 13 
int1 = 16 : <type 'int'>
=> int1 = 13 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 47
ACTION: avl0.insert(int0) 
int0 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a61f80> : <type 'instance'>
avl_REF0 = set([11, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([8, 11, 7]) : <type 'set'>
==================================================
result = avl1.find(int1)                                                # STEP 48
ACTION: result = avl1.find(int1) 
int1 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103a5cb48> : <type 'instance'>
avl_REF1 = set([15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int0 = 14                                                               # STEP 49
ACTION: int0 = 14 
int0 = 8 : <type 'int'>
=> int0 = 14 : <type 'int'>
==================================================
int1 = 7                                                                # STEP 50
ACTION: int1 = 7 
int1 = 13 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
result = avl2.find(int3)                                                # STEP 51
ACTION: result = avl2.find(int3) 
int3 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103f9ef80> : <type 'instance'>
avl_REF2 = set([9]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
int3 = 1                                                                # STEP 52
ACTION: int3 = 1 
int3 = 17 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 53
ACTION: avl0.delete(int3) 
int3 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a61f80> : <type 'instance'>
avl_REF0 = set([8, 11, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl2 == avl1                                                            # STEP 54
ACTION: avl2 == avl1 
avl2 = <avl.AVLTree instance at 0x103f9ef80> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x103a5cb48> : <type 'instance'>
avl_REF2 = set([9]) : <type 'set'>
avl_REF1 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
int3 = 1                                                                # STEP 55
ACTION: int3 = 1 
int3 = 1 : <type 'int'>
==================================================
avl0 == avl2                                                            # STEP 56
ACTION: avl0 == avl2 
avl0 = <avl.AVLTree instance at 0x103a61f80> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x103f9ef80> : <type 'instance'>
avl_REF0 = set([8, 11, 7]) : <type 'set'>
avl_REF2 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
avl0 == avl0                                                            # STEP 57
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x103a61f80> : <type 'instance'>
avl_REF0 = set([8, 11, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl2.delete(int3)                                                       # STEP 58
ACTION: avl2.delete(int3) 
int3 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103f9ef80> : <type 'instance'>
avl_REF2 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int3 = 15                                                               # STEP 59
ACTION: int3 = 15 
int3 = 1 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 60
ACTION: avl2.insert(int1) 
int1 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103f9ef80> : <type 'instance'>
avl_REF2 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([9, 7]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 61
ACTION: avl1.delete(int3) 
int3 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103a5cb48> : <type 'instance'>
avl_REF1 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int3 = 4                                                                # STEP 62
ACTION: int3 = 4 
int3 = 15 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 63
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x103a5cb48> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.insert(int1)                                                       # STEP 64
ACTION: avl1.insert(int1) 
int1 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103a5cb48> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([7]) : <type 'set'>
==================================================
int1 = 11                                                               # STEP 65
ACTION: int1 = 11 
int1 = 7 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 66
ACTION: avl0.delete(int2) 
int2 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a61f80> : <type 'instance'>
avl_REF0 = set([8, 11, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int2 = 11                                                               # STEP 67
ACTION: int2 = 11 
int2 = 14 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
avl1 == avl0                                                            # STEP 68
ACTION: avl1 == avl0 
avl1 = <avl.AVLTree instance at 0x103a5cb48> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x103a61f80> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
avl_REF0 = set([8, 11, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
avl1.delete(int1)                                                       # STEP 69
ACTION: avl1.delete(int1) 
int1 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103a5cb48> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl0.insert(int3)                                                       # STEP 70
ACTION: avl0.insert(int3) 
int3 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a61f80> : <type 'instance'>
avl_REF0 = set([8, 11, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([8, 11, 4, 7]) : <type 'set'>
==================================================
int1 = 4                                                                # STEP 71
ACTION: int1 = 4 
int1 = 11 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
int3 = 1                                                                # STEP 72
ACTION: int3 = 1 
int3 = 4 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
result = avl0.find(int3)                                                # STEP 73
ACTION: result = avl0.find(int3) 
int3 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a61f80> : <type 'instance'>
avl_REF0 = set([8, 11, 4, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
avl0.insert(int3)                                                       # STEP 74
ACTION: avl0.insert(int3) 
int3 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a61f80> : <type 'instance'>
avl_REF0 = set([8, 11, 4, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([8, 1, 11, 4, 7]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 75
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x103a5cb48> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl0.delete(int3)                                                       # STEP 76
ACTION: avl0.delete(int3) 
int3 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a61f80> : <type 'instance'>
avl_REF0 = set([8, 1, 11, 4, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([8, 11, 4, 7]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 77
ACTION: avl0.delete(int1) 
int1 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a61f80> : <type 'instance'>
avl_REF0 = set([8, 11, 4, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([8, 11, 7]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 78
ACTION: avl0.delete(int1) 
int1 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a61f80> : <type 'instance'>
avl_REF0 = set([8, 11, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int3 = 18                                                               # STEP 79
ACTION: int3 = 18 
int3 = 1 : <type 'int'>
=> int3 = 18 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 80
ACTION: avl1.insert(int3) 
int3 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103a5cb48> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([18, 7]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 81
ACTION: avl2.insert(int1) 
int1 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103f9ef80> : <type 'instance'>
avl_REF2 = set([9, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([9, 4, 7]) : <type 'set'>
==================================================
int1 = 13                                                               # STEP 82
ACTION: int1 = 13 
int1 = 4 : <type 'int'>
=> int1 = 13 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 83
ACTION: avl1.delete(int0) 
int0 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103a5cb48> : <type 'instance'>
avl_REF1 = set([18, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
result = avl2.inorder()                                                 # STEP 84
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x103f9ef80> : <type 'instance'>
avl_REF2 = set([9, 4, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int3 = 2                                                                # STEP 85
ACTION: int3 = 2 
int3 = 18 : <type 'int'>
=> int3 = 2 : <type 'int'>
==================================================
avl1 == avl2                                                            # STEP 86
ACTION: avl1 == avl2 
avl1 = <avl.AVLTree instance at 0x103a5cb48> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x103f9ef80> : <type 'instance'>
avl_REF1 = set([18, 7]) : <type 'set'>
avl_REF2 = set([9, 4, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
result = avl0.find(int0)                                                # STEP 87
ACTION: result = avl0.find(int0) 
int0 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a61f80> : <type 'instance'>
avl_REF0 = set([8, 11, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
avl2.insert(int1)                                                       # STEP 88
ACTION: avl2.insert(int1) 
int1 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103f9ef80> : <type 'instance'>
avl_REF2 = set([9, 4, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([9, 4, 13, 7]) : <type 'set'>
==================================================
int0 = 11                                                               # STEP 89
ACTION: int0 = 11 
int0 = 14 : <type 'int'>
=> int0 = 11 : <type 'int'>
==================================================
int1 = 13                                                               # STEP 90
ACTION: int1 = 13 
int1 = 13 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 91
ACTION: avl0.insert(int3) 
int3 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a61f80> : <type 'instance'>
avl_REF0 = set([8, 11, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([2, 7, 8, 11]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 92
ACTION: avl1.insert(int2) 
int2 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103a5cb48> : <type 'instance'>
avl_REF1 = set([18, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([18, 11, 7]) : <type 'set'>
==================================================
int2 = 9                                                                # STEP 93
ACTION: int2 = 9 
int2 = 11 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
int3 = 7                                                                # STEP 94
ACTION: int3 = 7 
int3 = 2 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
avl1 == avl0                                                            # STEP 95
ACTION: avl1 == avl0 
avl1 = <avl.AVLTree instance at 0x103a5cb48> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x103a61f80> : <type 'instance'>
avl_REF1 = set([18, 11, 7]) : <type 'set'>
avl_REF0 = set([2, 7, 8, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
result = avl0.find(int1)                                                # STEP 96
ACTION: result = avl0.find(int1) 
int1 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a61f80> : <type 'instance'>
avl_REF0 = set([2, 7, 8, 11]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
int1 = 1                                                                # STEP 97
ACTION: int1 = 1 
int1 = 13 : <type 'int'>
=> int1 = 1 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 98
ACTION: avl1.insert(int1) 
int1 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103a5cb48> : <type 'instance'>
avl_REF1 = set([18, 11, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([1, 18, 11, 7]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 99
ACTION: avl1.delete(int0) 
int0 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103a5cb48> : <type 'instance'>
avl_REF1 = set([1, 18, 11, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([1, 18, 7]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103fad248>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 0
STOPPING TESTING DUE TO TIMEOUT
8.68680013573 PERCENT COVERED
67.6522519588 TOTAL RUNTIME
8 EXECUTED
700 TOTAL TEST OPERATIONS
29.2469289303 TIME SPENT EXECUTING TEST OPERATIONS
0.0244033336639 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
29.2993965149 TIME SPENT CHECKING PROPERTIES
58.5463254452 TOTAL TIME SPENT RUNNING SUT
0.00478911399841 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int1 = 12                                                                # STEP 0
avl0 = avl.AVLTree()                                                     # STEP 1
int3 = 3                                                                 # STEP 2
int0 = 9                                                                 # STEP 3
int2 = 5                                                                 # STEP 4
result = avl0.find(int3)                                                 # STEP 5
int3 = 18                                                                # STEP 6
result = avl0.find(int2)                                                 # STEP 7
int2 = 2                                                                 # STEP 8
avl2 = avl.AVLTree()                                                     # STEP 9
avl2.insert(int0)                                                       # STEP 10
avl0.delete(int1)                                                       # STEP 11
int1 = 7                                                                # STEP 12
int0 = 13                                                               # STEP 13
avl0.delete(int0)                                                       # STEP 14
int0 = 5                                                                # STEP 15
result = avl2.find(int3)                                                # STEP 16
result = avl0.find(int2)                                                # STEP 17
int3 = 15                                                               # STEP 18
int2 = 11                                                               # STEP 19
avl0.insert(int2)                                                       # STEP 20
int2 = 9                                                                # STEP 21
result = avl2.find(int3)                                                # STEP 22
avl2.delete(int3)                                                       # STEP 23
int3 = 10                                                               # STEP 24
result = avl0.find(int1)                                                # STEP 25
avl0.insert(int1)                                                       # STEP 26
avl2.delete(int3)                                                       # STEP 27
result = avl2.find(int1)                                                # STEP 28
int1 = 9                                                                # STEP 29
avl2.insert(int1)                                                       # STEP 30
avl1 = avl.AVLTree()                                                    # STEP 31
result = avl0.find(int2)                                                # STEP 32
avl2.delete(int0)                                                       # STEP 33
int0 = 15                                                               # STEP 34
int1 = 16                                                               # STEP 35
avl1.insert(int0)                                                       # STEP 36
int0 = 8                                                                # STEP 37
avl1.delete(int0)                                                       # STEP 38
int3 = 17                                                               # STEP 39
result = avl1.find(int1)                                                # STEP 40
int2 = 14                                                               # STEP 41
result = avl0.find(int1)                                                # STEP 42
avl0 == avl1                                                            # STEP 43
result = avl0.find(int3)                                                # STEP 44
result = avl1.find(int1)                                                # STEP 45
int1 = 13                                                               # STEP 46
avl0.insert(int0)                                                       # STEP 47
result = avl1.find(int1)                                                # STEP 48
int0 = 14                                                               # STEP 49
int1 = 7                                                                # STEP 50
result = avl2.find(int3)                                                # STEP 51
int3 = 1                                                                # STEP 52
avl0.delete(int3)                                                       # STEP 53
avl2 == avl1                                                            # STEP 54
int3 = 1                                                                # STEP 55
avl0 == avl2                                                            # STEP 56
avl0 == avl0                                                            # STEP 57
avl2.delete(int3)                                                       # STEP 58
int3 = 15                                                               # STEP 59
avl2.insert(int1)                                                       # STEP 60
avl1.delete(int3)                                                       # STEP 61
int3 = 4                                                                # STEP 62
avl1 == avl1                                                            # STEP 63
avl1.insert(int1)                                                       # STEP 64
int1 = 11                                                               # STEP 65
avl0.delete(int2)                                                       # STEP 66
int2 = 11                                                               # STEP 67
avl1 == avl0                                                            # STEP 68
avl1.delete(int1)                                                       # STEP 69
avl0.insert(int3)                                                       # STEP 70
int1 = 4                                                                # STEP 71
int3 = 1                                                                # STEP 72
result = avl0.find(int3)                                                # STEP 73
avl0.insert(int3)                                                       # STEP 74
result = avl1.inorder()                                                 # STEP 75
avl0.delete(int3)                                                       # STEP 76
avl0.delete(int1)                                                       # STEP 77
avl0.delete(int1)                                                       # STEP 78
int3 = 18                                                               # STEP 79
avl1.insert(int3)                                                       # STEP 80
avl2.insert(int1)                                                       # STEP 81
int1 = 13                                                               # STEP 82
avl1.delete(int0)                                                       # STEP 83
result = avl2.inorder()                                                 # STEP 84
int3 = 2                                                                # STEP 85
avl1 == avl2                                                            # STEP 86
result = avl0.find(int0)                                                # STEP 87
avl2.insert(int1)                                                       # STEP 88
int0 = 11                                                               # STEP 89
int1 = 13                                                               # STEP 90
avl0.insert(int3)                                                       # STEP 91
avl1.insert(int2)                                                       # STEP 92
int2 = 9                                                                # STEP 93
int3 = 7                                                                # STEP 94
avl1 == avl0                                                            # STEP 95
result = avl0.find(int1)                                                # STEP 96
int1 = 1                                                                # STEP 97
avl1.insert(int1)                                                       # STEP 98
avl1.delete(int0)                                                       # STEP 99
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103fad248>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
219 BRANCHES COVERED
164 STATEMENTS COVERED

Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=True, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.948.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
TEST #4 STEP #64 (0:00:30.009708) Fri Apr 28 07:45:00 2017 [ 137 stmts 180 branches ]
  12 [3:1]
-- < 6 [2:0]
---- < 4 [1:-1]
------ > 5 [0:0] L
---- > 8 [1:0]
------ < 7 [0:0] L
------ > 9 [0:0] L
-- > 15 [1:0]
---- < 13 [0:0] L
---- > 17 [0:0] L
set([4, 5, 6, 7, 8, 9, 12, 13, 15, 17])
  12 [3:0]
-- < 6 [2:0]
---- < 4 [1:-1]
------ > 5 [0:0] L
---- > 8 [1:0]
------ < 7 [0:0] L
------ > 9 [0:0] L
-- > 15 [2:1]
---- < 13 [1:-1]
------ > 14 [0:0] L
---- > 17 [0:0] L
set([4, 5, 6, 7, 8, 9, 12, 13, 14, 15, 17])
  5 [2:0]
-- < 4 [1:1]
---- < 3 [0:0] L
-- > 10 [1:0]
---- < 8 [0:0] L
---- > 16 [0:0] L
set([3, 4, 5, 8, 10, 16])
  5 [2:0]
-- < 4 [1:1]
---- < 3 [0:0] L
-- > 10 [1:0]
---- < 8 [0:0] L
---- > 16 [0:0] L
set([3, 4, 5, 8, 10, 16])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10473afc8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 83 steps

SAVING TEST AS failure.948.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 10                                                                # STEP 0
ACTION: int2 = 10 
int2 = None : <type 'NoneType'>
=> int2 = 10 : <type 'int'>
==================================================
int1 = 17                                                                # STEP 1
ACTION: int1 = 17 
int1 = None : <type 'NoneType'>
=> int1 = 17 : <type 'int'>
==================================================
int3 = 1                                                                 # STEP 2
ACTION: int3 = 1 
int3 = None : <type 'NoneType'>
=> int3 = 1 : <type 'int'>
==================================================
int0 = 5                                                                 # STEP 3
ACTION: int0 = 5 
int0 = None : <type 'NoneType'>
=> int0 = 5 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x104739e60> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.insert(int1)                                                        # STEP 5
ACTION: avl1.insert(int1) 
int1 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104739e60> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([17]) : <type 'set'>
==================================================
int1 = 9                                                                 # STEP 6
ACTION: int1 = 9 
int1 = 17 : <type 'int'>
=> int1 = 9 : <type 'int'>
==================================================
avl1 == avl1                                                             # STEP 7
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x104739e60> : <type 'instance'>
avl_REF1 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.insert(int3)                                                        # STEP 8
ACTION: avl1.insert(int3) 
int3 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104739e60> : <type 'instance'>
avl_REF1 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([17, 1]) : <type 'set'>
==================================================
int3 = 14                                                                # STEP 9
ACTION: int3 = 14 
int3 = 1 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 10
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104739e60> : <type 'instance'>
avl_REF1 = set([17, 1]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1 = avl.AVLTree()                                                    # STEP 11
ACTION: avl1 = avl.AVLTree() 
avl1 = <avl.AVLTree instance at 0x104739e60> : <type 'instance'>
avl_REF1 = set([17, 1]) : <type 'set'>
=> avl1 = <avl.AVLTree instance at 0x104744878> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 12
ACTION: avl1.insert(int1) 
int1 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104744878> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([9]) : <type 'set'>
==================================================
int1 = 7                                                                # STEP 13
ACTION: int1 = 7 
int1 = 9 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 14
ACTION: avl1.delete(int3) 
int3 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104744878> : <type 'instance'>
avl_REF1 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.insert(int0)                                                       # STEP 15
ACTION: avl1.insert(int0) 
int0 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104744878> : <type 'instance'>
avl_REF1 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([9, 5]) : <type 'set'>
==================================================
int0 = 13                                                               # STEP 16
ACTION: int0 = 13 
int0 = 5 : <type 'int'>
=> int0 = 13 : <type 'int'>
==================================================
int3 = 6                                                                # STEP 17
ACTION: int3 = 6 
int3 = 14 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 18
ACTION: avl1.delete(int3) 
int3 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104744878> : <type 'instance'>
avl_REF1 = set([9, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.delete(int1)                                                       # STEP 19
ACTION: avl1.delete(int1) 
int1 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104744878> : <type 'instance'>
avl_REF1 = set([9, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int3 = 12                                                               # STEP 20
ACTION: int3 = 12 
int3 = 6 : <type 'int'>
=> int3 = 12 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 21
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x104744878> : <type 'instance'>
avl_REF1 = set([9, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
int1 = 20                                                               # STEP 22
ACTION: int1 = 20 
int1 = 7 : <type 'int'>
=> int1 = 20 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 23
ACTION: avl1.insert(int0) 
int0 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104744878> : <type 'instance'>
avl_REF1 = set([9, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([9, 5, 13]) : <type 'set'>
==================================================
int0 = 7                                                                # STEP 24
ACTION: int0 = 7 
int0 = 13 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 25
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x104719d88> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2 == avl2                                                            # STEP 26
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x104719d88> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
result = avl1.inorder()                                                 # STEP 27
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104744878> : <type 'instance'>
avl_REF1 = set([9, 5, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl2.delete(int2)                                                       # STEP 28
ACTION: avl2.delete(int2) 
int2 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104719d88> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl1.insert(int3)                                                       # STEP 29
ACTION: avl1.insert(int3) 
int3 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104744878> : <type 'instance'>
avl_REF1 = set([9, 5, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([9, 12, 5, 13]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 30
ACTION: avl1.insert(int1) 
int1 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104744878> : <type 'instance'>
avl_REF1 = set([9, 12, 5, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([9, 12, 5, 20, 13]) : <type 'set'>
==================================================
int3 = 19                                                               # STEP 31
ACTION: int3 = 19 
int3 = 12 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
int2 = 8                                                                # STEP 32
ACTION: int2 = 8 
int2 = 10 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 33
ACTION: avl1.insert(int2) 
int2 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104744878> : <type 'instance'>
avl_REF1 = set([9, 12, 5, 20, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([5, 8, 9, 12, 13, 20]) : <type 'set'>
==================================================
int1 = 17                                                               # STEP 34
ACTION: int1 = 17 
int1 = 20 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 35
ACTION: avl2.delete(int1) 
int1 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104719d88> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl1.delete(int0)                                                       # STEP 36
ACTION: avl1.delete(int0) 
int0 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104744878> : <type 'instance'>
avl_REF1 = set([5, 8, 9, 12, 13, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int1 = 13                                                               # STEP 37
ACTION: int1 = 13 
int1 = 17 : <type 'int'>
=> int1 = 13 : <type 'int'>
==================================================
int2 = 20                                                               # STEP 38
ACTION: int2 = 20 
int2 = 8 : <type 'int'>
=> int2 = 20 : <type 'int'>
==================================================
int0 = 17                                                               # STEP 39
ACTION: int0 = 17 
int0 = 7 : <type 'int'>
=> int0 = 17 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 40
ACTION: avl2.delete(int0) 
int0 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104719d88> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.insert(int2)                                                       # STEP 41
ACTION: avl2.insert(int2) 
int2 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104719d88> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([20]) : <type 'set'>
==================================================
int0 = 5                                                                # STEP 42
ACTION: int0 = 5 
int0 = 17 : <type 'int'>
=> int0 = 5 : <type 'int'>
==================================================
int2 = 10                                                               # STEP 43
ACTION: int2 = 10 
int2 = 20 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
avl2 == avl1                                                            # STEP 44
ACTION: avl2 == avl1 
avl2 = <avl.AVLTree instance at 0x104719d88> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x104744878> : <type 'instance'>
avl_REF2 = set([20]) : <type 'set'>
avl_REF1 = set([5, 8, 9, 12, 13, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
avl2 == avl2                                                            # STEP 45
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x104719d88> : <type 'instance'>
avl_REF2 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl1.insert(int1)                                                       # STEP 46
ACTION: avl1.insert(int1) 
int1 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104744878> : <type 'instance'>
avl_REF1 = set([5, 8, 9, 12, 13, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl2.insert(int2)                                                       # STEP 47
ACTION: avl2.insert(int2) 
int2 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104719d88> : <type 'instance'>
avl_REF2 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([10, 20]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 48
ACTION: avl2.insert(int1) 
int1 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104719d88> : <type 'instance'>
avl_REF2 = set([10, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([10, 20, 13]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 49
ACTION: avl2.insert(int2) 
int2 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104719d88> : <type 'instance'>
avl_REF2 = set([10, 20, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
int1 = 4                                                                # STEP 50
ACTION: int1 = 4 
int1 = 13 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 51
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104744878> : <type 'instance'>
avl_REF1 = set([5, 8, 9, 12, 13, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.delete(int2)                                                       # STEP 52
ACTION: avl1.delete(int2) 
int2 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104744878> : <type 'instance'>
avl_REF1 = set([5, 8, 9, 12, 13, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
result = avl2.inorder()                                                 # STEP 53
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104719d88> : <type 'instance'>
avl_REF2 = set([10, 20, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int2 = 18                                                               # STEP 54
ACTION: int2 = 18 
int2 = 10 : <type 'int'>
=> int2 = 18 : <type 'int'>
==================================================
avl2 == avl2                                                            # STEP 55
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x104719d88> : <type 'instance'>
avl_REF2 = set([10, 20, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
result = avl1.inorder()                                                 # STEP 56
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104744878> : <type 'instance'>
avl_REF1 = set([5, 8, 9, 12, 13, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int1)                                                       # STEP 57
ACTION: avl1.insert(int1) 
int1 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104744878> : <type 'instance'>
avl_REF1 = set([5, 8, 9, 12, 13, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([4, 5, 8, 9, 12, 13, 20]) : <type 'set'>
==================================================
int1 = 4                                                                # STEP 58
ACTION: int1 = 4 
int1 = 4 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 59
ACTION: avl2 = avl.AVLTree() 
avl2 = <avl.AVLTree instance at 0x104719d88> : <type 'instance'>
avl_REF2 = set([10, 20, 13]) : <type 'set'>
=> avl2 = <avl.AVLTree instance at 0x10470db48> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl1 == avl1                                                            # STEP 60
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x104744878> : <type 'instance'>
avl_REF1 = set([4, 5, 8, 9, 12, 13, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.insert(int2)                                                       # STEP 61
ACTION: avl1.insert(int2) 
int2 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104744878> : <type 'instance'>
avl_REF1 = set([4, 5, 8, 9, 12, 13, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([4, 5, 8, 9, 12, 13, 18, 20]) : <type 'set'>
==================================================
avl2 == avl2                                                            # STEP 62
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x10470db48> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl2.insert(int2)                                                       # STEP 63
ACTION: avl2.insert(int2) 
int2 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10470db48> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([18]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 64
ACTION: avl2.delete(int1) 
int1 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10470db48> : <type 'instance'>
avl_REF2 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int2)                                                       # STEP 65
ACTION: avl2.insert(int2) 
int2 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10470db48> : <type 'instance'>
avl_REF2 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
int2 = 10                                                               # STEP 66
ACTION: int2 = 10 
int2 = 18 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
int1 = 20                                                               # STEP 67
ACTION: int1 = 20 
int1 = 4 : <type 'int'>
=> int1 = 20 : <type 'int'>
==================================================
avl2 == avl1                                                            # STEP 68
ACTION: avl2 == avl1 
avl2 = <avl.AVLTree instance at 0x10470db48> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x104744878> : <type 'instance'>
avl_REF2 = set([18]) : <type 'set'>
avl_REF1 = set([4, 5, 8, 9, 12, 13, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
avl2.insert(int0)                                                       # STEP 69
ACTION: avl2.insert(int0) 
int0 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10470db48> : <type 'instance'>
avl_REF2 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([18, 5]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 70
ACTION: avl2.delete(int1) 
int1 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10470db48> : <type 'instance'>
avl_REF2 = set([18, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int0 = 3                                                                # STEP 71
ACTION: int0 = 3 
int0 = 5 : <type 'int'>
=> int0 = 3 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 72
ACTION: avl1.insert(int0) 
int0 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104744878> : <type 'instance'>
avl_REF1 = set([4, 5, 8, 9, 12, 13, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([3, 4, 5, 8, 9, 12, 13, 18, 20]) : <type 'set'>
==================================================
int1 = 10                                                               # STEP 73
ACTION: int1 = 10 
int1 = 20 : <type 'int'>
=> int1 = 10 : <type 'int'>
==================================================
int0 = 5                                                                # STEP 74
ACTION: int0 = 5 
int0 = 3 : <type 'int'>
=> int0 = 5 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 75
ACTION: avl1.delete(int2) 
int2 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104744878> : <type 'instance'>
avl_REF1 = set([3, 4, 5, 8, 9, 12, 13, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int2 = 1                                                                # STEP 76
ACTION: int2 = 1 
int2 = 10 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 77
ACTION: avl2.insert(int2) 
int2 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10470db48> : <type 'instance'>
avl_REF2 = set([18, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([1, 18, 5]) : <type 'set'>
==================================================
avl1 == avl1                                                            # STEP 78
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x104744878> : <type 'instance'>
avl_REF1 = set([3, 4, 5, 8, 9, 12, 13, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.insert(int2)                                                       # STEP 79
ACTION: avl1.insert(int2) 
int2 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104744878> : <type 'instance'>
avl_REF1 = set([3, 4, 5, 8, 9, 12, 13, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([1, 3, 4, 5, 8, 9, 12, 13, 18, 20]) : <type 'set'>
==================================================
int2 = 18                                                               # STEP 80
ACTION: int2 = 18 
int2 = 1 : <type 'int'>
=> int2 = 18 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 81
ACTION: avl1.delete(int2) 
int2 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104744878> : <type 'instance'>
avl_REF1 = set([1, 3, 4, 5, 8, 9, 12, 13, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([1, 3, 4, 5, 8, 9, 12, 13, 20]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 82
ACTION: avl1.delete(int0) 
int0 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104744878> : <type 'instance'>
avl_REF1 = set([1, 3, 4, 5, 8, 9, 12, 13, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([1, 3, 4, 8, 9, 12, 13, 20]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1046d6368>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 0
STOPPING TESTING DUE TO TIMEOUT
8.38140481846 PERCENT COVERED
65.0441479683 TOTAL RUNTIME
8 EXECUTED
683 TOTAL TEST OPERATIONS
28.6788375378 TIME SPENT EXECUTING TEST OPERATIONS
0.0269746780396 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
28.8236172199 TIME SPENT CHECKING PROPERTIES
57.5024547577 TOTAL TIME SPENT RUNNING SUT
0.00464415550232 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int2 = 10                                                                # STEP 0
int1 = 17                                                                # STEP 1
int3 = 1                                                                 # STEP 2
int0 = 5                                                                 # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
avl1.insert(int1)                                                        # STEP 5
int1 = 9                                                                 # STEP 6
avl1 == avl1                                                             # STEP 7
avl1.insert(int3)                                                        # STEP 8
int3 = 14                                                                # STEP 9
result = avl1.inorder()                                                 # STEP 10
avl1 = avl.AVLTree()                                                    # STEP 11
avl1.insert(int1)                                                       # STEP 12
int1 = 7                                                                # STEP 13
avl1.delete(int3)                                                       # STEP 14
avl1.insert(int0)                                                       # STEP 15
int0 = 13                                                               # STEP 16
int3 = 6                                                                # STEP 17
avl1.delete(int3)                                                       # STEP 18
avl1.delete(int1)                                                       # STEP 19
int3 = 12                                                               # STEP 20
avl1 == avl1                                                            # STEP 21
int1 = 20                                                               # STEP 22
avl1.insert(int0)                                                       # STEP 23
int0 = 7                                                                # STEP 24
avl2 = avl.AVLTree()                                                    # STEP 25
avl2 == avl2                                                            # STEP 26
result = avl1.inorder()                                                 # STEP 27
avl2.delete(int2)                                                       # STEP 28
avl1.insert(int3)                                                       # STEP 29
avl1.insert(int1)                                                       # STEP 30
int3 = 19                                                               # STEP 31
int2 = 8                                                                # STEP 32
avl1.insert(int2)                                                       # STEP 33
int1 = 17                                                               # STEP 34
avl2.delete(int1)                                                       # STEP 35
avl1.delete(int0)                                                       # STEP 36
int1 = 13                                                               # STEP 37
int2 = 20                                                               # STEP 38
int0 = 17                                                               # STEP 39
avl2.delete(int0)                                                       # STEP 40
avl2.insert(int2)                                                       # STEP 41
int0 = 5                                                                # STEP 42
int2 = 10                                                               # STEP 43
avl2 == avl1                                                            # STEP 44
avl2 == avl2                                                            # STEP 45
avl1.insert(int1)                                                       # STEP 46
avl2.insert(int2)                                                       # STEP 47
avl2.insert(int1)                                                       # STEP 48
avl2.insert(int2)                                                       # STEP 49
int1 = 4                                                                # STEP 50
result = avl1.inorder()                                                 # STEP 51
avl1.delete(int2)                                                       # STEP 52
result = avl2.inorder()                                                 # STEP 53
int2 = 18                                                               # STEP 54
avl2 == avl2                                                            # STEP 55
result = avl1.inorder()                                                 # STEP 56
avl1.insert(int1)                                                       # STEP 57
int1 = 4                                                                # STEP 58
avl2 = avl.AVLTree()                                                    # STEP 59
avl1 == avl1                                                            # STEP 60
avl1.insert(int2)                                                       # STEP 61
avl2 == avl2                                                            # STEP 62
avl2.insert(int2)                                                       # STEP 63
avl2.delete(int1)                                                       # STEP 64
avl2.insert(int2)                                                       # STEP 65
int2 = 10                                                               # STEP 66
int1 = 20                                                               # STEP 67
avl2 == avl1                                                            # STEP 68
avl2.insert(int0)                                                       # STEP 69
avl2.delete(int1)                                                       # STEP 70
int0 = 3                                                                # STEP 71
avl1.insert(int0)                                                       # STEP 72
int1 = 10                                                               # STEP 73
int0 = 5                                                                # STEP 74
avl1.delete(int2)                                                       # STEP 75
int2 = 1                                                                # STEP 76
avl2.insert(int2)                                                       # STEP 77
avl1 == avl1                                                            # STEP 78
avl1.insert(int2)                                                       # STEP 79
int2 = 18                                                               # STEP 80
avl1.delete(int2)                                                       # STEP 81
avl1.delete(int0)                                                       # STEP 82
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1046d6368>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
210 BRANCHES COVERED
159 STATEMENTS COVERED

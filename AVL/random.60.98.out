Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.1102.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  8 [2:0]
-- < 4 [1:0]
---- < 1 [0:0] L
---- > 7 [0:0] L
-- > 9 [1:-1]
---- > 18 [0:0] L
set([1, 4, 7, 8, 9, 18])
TEST #4 STEP #78 (0:00:30.050582) Fri Apr 28 08:11:38 2017 [ 162 stmts 216 branches ]
  11 [3:1]
-- < 5 [2:1]
---- < 1 [1:-1]
------ > 3 [0:0] L
---- > 10 [0:0] L
-- > 18 [1:1]
---- < 17 [0:0] L
set([1, 3, 5, 10, 11, 17, 18])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105836a28>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 71 steps

SAVING TEST AS failure.1102.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 12                                                                # STEP 0
ACTION: int2 = 12 
int2 = None : <type 'NoneType'>
=> int2 = 12 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 1
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x105864488> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int3 = 18                                                                # STEP 2
ACTION: int3 = 18 
int3 = None : <type 'NoneType'>
=> int3 = 18 : <type 'int'>
==================================================
avl1.insert(int3)                                                        # STEP 3
ACTION: avl1.insert(int3) 
int3 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105864488> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([18]) : <type 'set'>
==================================================
int3 = 10                                                                # STEP 4
ACTION: int3 = 10 
int3 = 18 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
int0 = 20                                                                # STEP 5
ACTION: int0 = 20 
int0 = None : <type 'NoneType'>
=> int0 = 20 : <type 'int'>
==================================================
int1 = 11                                                                # STEP 6
ACTION: int1 = 11 
int1 = None : <type 'NoneType'>
=> int1 = 11 : <type 'int'>
==================================================
avl1.delete(int3)                                                        # STEP 7
ACTION: avl1.delete(int3) 
int3 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105864488> : <type 'instance'>
avl_REF1 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.insert(int3)                                                        # STEP 8
ACTION: avl1.insert(int3) 
int3 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105864488> : <type 'instance'>
avl_REF1 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([18, 10]) : <type 'set'>
==================================================
int3 = 9                                                                 # STEP 9
ACTION: int3 = 9 
int3 = 10 : <type 'int'>
=> int3 = 9 : <type 'int'>
==================================================
result = avl1.find(int1)                                                # STEP 10
ACTION: result = avl1.find(int1) 
int1 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105864488> : <type 'instance'>
avl_REF1 = set([18, 10]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl1.delete(int1)                                                       # STEP 11
ACTION: avl1.delete(int1) 
int1 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105864488> : <type 'instance'>
avl_REF1 = set([18, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.insert(int1)                                                       # STEP 12
ACTION: avl1.insert(int1) 
int1 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105864488> : <type 'instance'>
avl_REF1 = set([18, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([18, 11, 10]) : <type 'set'>
==================================================
int1 = 17                                                               # STEP 13
ACTION: int1 = 17 
int1 = 11 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 14
ACTION: avl1.delete(int0) 
int0 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105864488> : <type 'instance'>
avl_REF1 = set([18, 11, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int0 = 3                                                                # STEP 15
ACTION: int0 = 3 
int0 = 20 : <type 'int'>
=> int0 = 3 : <type 'int'>
==================================================
result = avl1.find(int3)                                                # STEP 16
ACTION: result = avl1.find(int3) 
int3 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105864488> : <type 'instance'>
avl_REF1 = set([18, 11, 10]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
result = avl1.find(int3)                                                # STEP 17
ACTION: result = avl1.find(int3) 
int3 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105864488> : <type 'instance'>
avl_REF1 = set([18, 11, 10]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl1 == avl1                                                            # STEP 18
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x105864488> : <type 'instance'>
avl_REF1 = set([18, 11, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
int3 = 13                                                               # STEP 19
ACTION: int3 = 13 
int3 = 9 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
result = avl1.find(int2)                                                # STEP 20
ACTION: result = avl1.find(int2) 
int2 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105864488> : <type 'instance'>
avl_REF1 = set([18, 11, 10]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int2 = 20                                                               # STEP 21
ACTION: int2 = 20 
int2 = 12 : <type 'int'>
=> int2 = 20 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 22
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x105864488> : <type 'instance'>
avl_REF1 = set([18, 11, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.insert(int1)                                                       # STEP 23
ACTION: avl1.insert(int1) 
int1 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105864488> : <type 'instance'>
avl_REF1 = set([18, 11, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([17, 18, 11, 10]) : <type 'set'>
==================================================
int1 = 3                                                                # STEP 24
ACTION: int1 = 3 
int1 = 17 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 25
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x105864488> : <type 'instance'>
avl_REF1 = set([17, 18, 11, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.delete(int2)                                                       # STEP 26
ACTION: avl1.delete(int2) 
int2 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105864488> : <type 'instance'>
avl_REF1 = set([17, 18, 11, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
result = avl1.find(int1)                                                # STEP 27
ACTION: result = avl1.find(int1) 
int1 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105864488> : <type 'instance'>
avl_REF1 = set([17, 18, 11, 10]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int2 = 8                                                                # STEP 28
ACTION: int2 = 8 
int2 = 20 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 29
ACTION: avl1.delete(int0) 
int0 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105864488> : <type 'instance'>
avl_REF1 = set([17, 18, 11, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.insert(int0)                                                       # STEP 30
ACTION: avl1.insert(int0) 
int0 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105864488> : <type 'instance'>
avl_REF1 = set([17, 18, 11, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([3, 17, 18, 11, 10]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 31
ACTION: avl1.delete(int3) 
int3 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105864488> : <type 'instance'>
avl_REF1 = set([3, 17, 18, 11, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int3 = 5                                                                # STEP 32
ACTION: int3 = 5 
int3 = 13 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
int1 = 5                                                                # STEP 33
ACTION: int1 = 5 
int1 = 3 : <type 'int'>
=> int1 = 5 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 34
ACTION: avl1.delete(int1) 
int1 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105864488> : <type 'instance'>
avl_REF1 = set([3, 17, 18, 11, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int0 = 3                                                                # STEP 35
ACTION: int0 = 3 
int0 = 3 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 36
ACTION: avl1.delete(int2) 
int2 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105864488> : <type 'instance'>
avl_REF1 = set([3, 17, 18, 11, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.insert(int3)                                                       # STEP 37
ACTION: avl1.insert(int3) 
int3 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105864488> : <type 'instance'>
avl_REF1 = set([3, 17, 18, 11, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([3, 5, 10, 11, 17, 18]) : <type 'set'>
==================================================
int1 = 3                                                                # STEP 38
ACTION: int1 = 3 
int1 = 5 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
int3 = 1                                                                # STEP 39
ACTION: int3 = 1 
int3 = 5 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 40
ACTION: avl1.delete(int0) 
int0 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105864488> : <type 'instance'>
avl_REF1 = set([3, 5, 10, 11, 17, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([5, 10, 11, 17, 18]) : <type 'set'>
==================================================
result = avl1.find(int0)                                                # STEP 41
ACTION: result = avl1.find(int0) 
int0 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105864488> : <type 'instance'>
avl_REF1 = set([5, 10, 11, 17, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
int0 = 6                                                                # STEP 42
ACTION: int0 = 6 
int0 = 3 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 43
ACTION: avl1.insert(int3) 
int3 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105864488> : <type 'instance'>
avl_REF1 = set([5, 10, 11, 17, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([1, 5, 10, 11, 17, 18]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 44
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x105864488> : <type 'instance'>
avl_REF1 = set([1, 5, 10, 11, 17, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int2 = 15                                                               # STEP 45
ACTION: int2 = 15 
int2 = 8 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
int3 = 7                                                                # STEP 46
ACTION: int3 = 7 
int3 = 1 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
result = avl1.find(int2)                                                # STEP 47
ACTION: result = avl1.find(int2) 
int2 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105864488> : <type 'instance'>
avl_REF1 = set([1, 5, 10, 11, 17, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl1.insert(int1)                                                       # STEP 48
ACTION: avl1.insert(int1) 
int1 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105864488> : <type 'instance'>
avl_REF1 = set([1, 5, 10, 11, 17, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([1, 3, 5, 10, 11, 17, 18]) : <type 'set'>
==================================================
int2 = 9                                                                # STEP 49
ACTION: int2 = 9 
int2 = 15 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
result = avl1.find(int2)                                                # STEP 50
ACTION: result = avl1.find(int2) 
int2 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105864488> : <type 'instance'>
avl_REF1 = set([1, 3, 5, 10, 11, 17, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int1 = 3                                                                # STEP 51
ACTION: int1 = 3 
int1 = 3 : <type 'int'>
==================================================
int2 = 10                                                               # STEP 52
ACTION: int2 = 10 
int2 = 9 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
result = avl1.find(int1)                                                # STEP 53
ACTION: result = avl1.find(int1) 
int1 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105864488> : <type 'instance'>
avl_REF1 = set([1, 3, 5, 10, 11, 17, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl0 = avl.AVLTree()                                                    # STEP 54
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x103e3db00> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0 == avl1                                                            # STEP 55
ACTION: avl0 == avl1 
avl0 = <avl.AVLTree instance at 0x103e3db00> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x105864488> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
avl_REF1 = set([1, 3, 5, 10, 11, 17, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF1 
==================================================
avl0.delete(int0)                                                       # STEP 56
ACTION: avl0.delete(int0) 
int0 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103e3db00> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.delete(int2)                                                       # STEP 57
ACTION: avl0.delete(int2) 
int2 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103e3db00> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
result = avl1.find(int2)                                                # STEP 58
ACTION: result = avl1.find(int2) 
int2 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105864488> : <type 'instance'>
avl_REF1 = set([1, 3, 5, 10, 11, 17, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
result = avl1.find(int1)                                                # STEP 59
ACTION: result = avl1.find(int1) 
int1 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105864488> : <type 'instance'>
avl_REF1 = set([1, 3, 5, 10, 11, 17, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
result = avl0.find(int2)                                                # STEP 60
ACTION: result = avl0.find(int2) 
int2 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103e3db00> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
int1 = 20                                                               # STEP 61
ACTION: int1 = 20 
int1 = 3 : <type 'int'>
=> int1 = 20 : <type 'int'>
==================================================
int0 = 8                                                                # STEP 62
ACTION: int0 = 8 
int0 = 6 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
result = avl0.find(int0)                                                # STEP 63
ACTION: result = avl0.find(int0) 
int0 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103e3db00> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
int0 = 15                                                               # STEP 64
ACTION: int0 = 15 
int0 = 8 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 65
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x105864488> : <type 'instance'>
avl_REF1 = set([1, 3, 5, 10, 11, 17, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl0.delete(int0)                                                       # STEP 66
ACTION: avl0.delete(int0) 
int0 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103e3db00> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl1.delete(int3)                                                       # STEP 67
ACTION: avl1.delete(int3) 
int3 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105864488> : <type 'instance'>
avl_REF1 = set([1, 3, 5, 10, 11, 17, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int0 = 13                                                               # STEP 68
ACTION: int0 = 13 
int0 = 15 : <type 'int'>
=> int0 = 13 : <type 'int'>
==================================================
avl1.display()                                                          # STEP 69
ACTION: avl1.display() 
avl1 = <avl.AVLTree instance at 0x105864488> : <type 'instance'>
avl_REF1 = set([1, 3, 5, 10, 11, 17, 18]) : <type 'set'>
  11 [3:1]
-- < 5 [2:1]
---- < 1 [1:-1]
------ > 3 [0:0] L
---- > 10 [0:0] L
-- > 18 [1:1]
---- < 17 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([1, 3, 5, 10, 11, 17, 18])
==================================================
avl1.delete(int2)                                                       # STEP 70
ACTION: avl1.delete(int2) 
int2 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105864488> : <type 'instance'>
avl_REF1 = set([1, 3, 5, 10, 11, 17, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([1, 3, 5, 11, 17, 18]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103cf1170>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 12
STOPPING TESTING DUE TO TIMEOUT
8.58500169664 PERCENT COVERED
60.1708598137 TOTAL RUNTIME
8 EXECUTED
683 TOTAL TEST OPERATIONS
27.0486736298 TIME SPENT EXECUTING TEST OPERATIONS
0.0234191417694 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
27.2448284626 TIME SPENT CHECKING PROPERTIES
54.2935020924 TOTAL TIME SPENT RUNNING SUT
0.0043797492981 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int2 = 12                                                                # STEP 0
avl1 = avl.AVLTree()                                                     # STEP 1
int3 = 18                                                                # STEP 2
avl1.insert(int3)                                                        # STEP 3
int3 = 10                                                                # STEP 4
int0 = 20                                                                # STEP 5
int1 = 11                                                                # STEP 6
avl1.delete(int3)                                                        # STEP 7
avl1.insert(int3)                                                        # STEP 8
int3 = 9                                                                 # STEP 9
result = avl1.find(int1)                                                # STEP 10
avl1.delete(int1)                                                       # STEP 11
avl1.insert(int1)                                                       # STEP 12
int1 = 17                                                               # STEP 13
avl1.delete(int0)                                                       # STEP 14
int0 = 3                                                                # STEP 15
result = avl1.find(int3)                                                # STEP 16
result = avl1.find(int3)                                                # STEP 17
avl1 == avl1                                                            # STEP 18
int3 = 13                                                               # STEP 19
result = avl1.find(int2)                                                # STEP 20
int2 = 20                                                               # STEP 21
avl1 == avl1                                                            # STEP 22
avl1.insert(int1)                                                       # STEP 23
int1 = 3                                                                # STEP 24
avl1 == avl1                                                            # STEP 25
avl1.delete(int2)                                                       # STEP 26
result = avl1.find(int1)                                                # STEP 27
int2 = 8                                                                # STEP 28
avl1.delete(int0)                                                       # STEP 29
avl1.insert(int0)                                                       # STEP 30
avl1.delete(int3)                                                       # STEP 31
int3 = 5                                                                # STEP 32
int1 = 5                                                                # STEP 33
avl1.delete(int1)                                                       # STEP 34
int0 = 3                                                                # STEP 35
avl1.delete(int2)                                                       # STEP 36
avl1.insert(int3)                                                       # STEP 37
int1 = 3                                                                # STEP 38
int3 = 1                                                                # STEP 39
avl1.delete(int0)                                                       # STEP 40
result = avl1.find(int0)                                                # STEP 41
int0 = 6                                                                # STEP 42
avl1.insert(int3)                                                       # STEP 43
result = avl1.inorder()                                                 # STEP 44
int2 = 15                                                               # STEP 45
int3 = 7                                                                # STEP 46
result = avl1.find(int2)                                                # STEP 47
avl1.insert(int1)                                                       # STEP 48
int2 = 9                                                                # STEP 49
result = avl1.find(int2)                                                # STEP 50
int1 = 3                                                                # STEP 51
int2 = 10                                                               # STEP 52
result = avl1.find(int1)                                                # STEP 53
avl0 = avl.AVLTree()                                                    # STEP 54
avl0 == avl1                                                            # STEP 55
avl0.delete(int0)                                                       # STEP 56
avl0.delete(int2)                                                       # STEP 57
result = avl1.find(int2)                                                # STEP 58
result = avl1.find(int1)                                                # STEP 59
result = avl0.find(int2)                                                # STEP 60
int1 = 20                                                               # STEP 61
int0 = 8                                                                # STEP 62
result = avl0.find(int0)                                                # STEP 63
int0 = 15                                                               # STEP 64
avl1 == avl1                                                            # STEP 65
avl0.delete(int0)                                                       # STEP 66
avl1.delete(int3)                                                       # STEP 67
int0 = 13                                                               # STEP 68
avl1.display()                                                          # STEP 69
avl1.delete(int2)                                                       # STEP 70
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103cf1170>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
216 BRANCHES COVERED
162 STATEMENTS COVERED

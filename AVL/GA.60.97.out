Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.15074.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
TEST #3 STEP #73 (0:00:30.073402) Sun Apr 30 05:39:25 2017 [ 150 stmts 199 branches ]
  13 [2:0]
-- < 7 [1:1]
---- < 3 [0:0] L
-- > 17 [1:0]
---- < 14 [0:0] L
---- > 19 [0:0] L
set([3, 7, 13, 14, 17, 19])
  5 [2:0]
-- < 4 [1:1]
---- < 1 [0:0] L
-- > 13 [1:0]
---- < 7 [0:0] L
---- > 15 [0:0] L
set([1, 4, 5, 7, 13, 15])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104d59d40>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
Original test has 32 steps

SAVING TEST AS failure.15074.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 19                                                                # STEP 0
ACTION: int1 = 19 
int1 = None : <type 'NoneType'>
=> int1 = 19 : <type 'int'>
==================================================
int2 = 2                                                                 # STEP 1
ACTION: int2 = 2 
int2 = None : <type 'NoneType'>
=> int2 = 2 : <type 'int'>
==================================================
int0 = 13                                                                # STEP 2
ACTION: int0 = 13 
int0 = None : <type 'NoneType'>
=> int0 = 13 : <type 'int'>
==================================================
int3 = 12                                                                # STEP 3
ACTION: int3 = 12 
int3 = None : <type 'NoneType'>
=> int3 = 12 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 4
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x104aed908> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.delete(int1)                                                        # STEP 5
ACTION: avl0.delete(int1) 
int1 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x104aed908> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int1 = 17                                                                # STEP 6
ACTION: int1 = 17 
int1 = 19 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
result = avl0.find(int3)                                                 # STEP 7
ACTION: result = avl0.find(int3) 
int3 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x104aed908> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
avl0.insert(int3)                                                        # STEP 8
ACTION: avl0.insert(int3) 
int3 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x104aed908> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([12]) : <type 'set'>
==================================================
result = avl0.find(int3)                                                 # STEP 9
ACTION: result = avl0.find(int3) 
int3 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x104aed908> : <type 'instance'>
avl_REF0 = set([12]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
int3 = 3                                                                # STEP 10
ACTION: int3 = 3 
int3 = 12 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 11
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x104aed908> : <type 'instance'>
avl_REF0 = set([12]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int0)                                                       # STEP 12
ACTION: avl0.insert(int0) 
int0 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x104aed908> : <type 'instance'>
avl_REF0 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([12, 13]) : <type 'set'>
==================================================
int0 = 3                                                                # STEP 13
ACTION: int0 = 3 
int0 = 13 : <type 'int'>
=> int0 = 3 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 14
ACTION: avl0.insert(int0) 
int0 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x104aed908> : <type 'instance'>
avl_REF0 = set([12, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([3, 12, 13]) : <type 'set'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 15
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x104fb1878> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl2.find(int1)                                                # STEP 16
ACTION: result = avl2.find(int1) 
int1 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104fb1878> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
result = avl2.find(int2)                                                # STEP 17
ACTION: result = avl2.find(int2) 
int2 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104fb1878> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int2 = 9                                                                # STEP 18
ACTION: int2 = 9 
int2 = 2 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
avl0 == avl2                                                            # STEP 19
ACTION: avl0 == avl2 
avl0 = <avlbug2.AVLTree instance at 0x104aed908> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x104fb1878> : <type 'instance'>
avl_REF0 = set([3, 12, 13]) : <type 'set'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
int1 = 20                                                               # STEP 20
ACTION: int1 = 20 
int1 = 17 : <type 'int'>
=> int1 = 20 : <type 'int'>
==================================================
int0 = 19                                                               # STEP 21
ACTION: int0 = 19 
int0 = 3 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 22
ACTION: avl2.delete(int1) 
int1 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104fb1878> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int1 = 17                                                               # STEP 23
ACTION: int1 = 17 
int1 = 20 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 24
ACTION: avl0.insert(int0) 
int0 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x104aed908> : <type 'instance'>
avl_REF0 = set([3, 12, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([19, 3, 12, 13]) : <type 'set'>
==================================================
result = avl2.find(int1)                                                # STEP 25
ACTION: result = avl2.find(int1) 
int1 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104fb1878> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int1 = 9                                                                # STEP 26
ACTION: int1 = 9 
int1 = 17 : <type 'int'>
=> int1 = 9 : <type 'int'>
==================================================
avl2 == avl2                                                            # STEP 27
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x104fb1878> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
result = avl2.find(int1)                                                # STEP 28
ACTION: result = avl2.find(int1) 
int1 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104fb1878> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl0 == avl0                                                            # STEP 29
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x104aed908> : <type 'instance'>
avl_REF0 = set([19, 3, 12, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
int0 = 19                                                               # STEP 30
ACTION: int0 = 19 
int0 = 19 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 31
ACTION: avl0.delete(int3) 
int3 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x104aed908> : <type 'instance'>
avl_REF0 = set([19, 3, 12, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([19, 12, 13]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104fa6368>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 0
STOPPING TESTING DUE TO TIMEOUT
8.7057265806 PERCENT COVERED
61.9841041565 TOTAL RUNTIME
7 EXECUTED
532 TOTAL TEST OPERATIONS
29.1221804619 TIME SPENT EXECUTING TEST OPERATIONS
0.0217099189758 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
29.2769930363 TIME SPENT CHECKING PROPERTIES
58.3991734982 TOTAL TIME SPENT RUNNING SUT
0.00524592399597 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int1 = 19                                                                # STEP 0
int2 = 2                                                                 # STEP 1
int0 = 13                                                                # STEP 2
int3 = 12                                                                # STEP 3
avl0 = avl.AVLTree()                                                     # STEP 4
avl0.delete(int1)                                                        # STEP 5
int1 = 17                                                                # STEP 6
result = avl0.find(int3)                                                 # STEP 7
avl0.insert(int3)                                                        # STEP 8
result = avl0.find(int3)                                                 # STEP 9
int3 = 3                                                                # STEP 10
result = avl0.inorder()                                                 # STEP 11
avl0.insert(int0)                                                       # STEP 12
int0 = 3                                                                # STEP 13
avl0.insert(int0)                                                       # STEP 14
avl2 = avl.AVLTree()                                                    # STEP 15
result = avl2.find(int1)                                                # STEP 16
result = avl2.find(int2)                                                # STEP 17
int2 = 9                                                                # STEP 18
avl0 == avl2                                                            # STEP 19
int1 = 20                                                               # STEP 20
int0 = 19                                                               # STEP 21
avl2.delete(int1)                                                       # STEP 22
int1 = 17                                                               # STEP 23
avl0.insert(int0)                                                       # STEP 24
result = avl2.find(int1)                                                # STEP 25
int1 = 9                                                                # STEP 26
avl2 == avl2                                                            # STEP 27
result = avl2.find(int1)                                                # STEP 28
avl0 == avl0                                                            # STEP 29
int0 = 19                                                               # STEP 30
avl0.delete(int3)                                                       # STEP 31
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104fa6368>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
218 BRANCHES COVERED
163 STATEMENTS COVERED

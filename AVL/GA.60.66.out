Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.14629.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  8 [2:0]
-- < 6 [1:1]
---- < 1 [0:0] L
-- > 13 [1:0]
---- < 10 [0:0] L
---- > 18 [0:0] L
set([1, 6, 8, 10, 13, 18])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1038f3cf8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
Original test has 55 steps

SAVING TEST AS failure.14629.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 18                                                                # STEP 0
ACTION: int0 = 18 
int0 = None : <type 'NoneType'>
=> int0 = 18 : <type 'int'>
==================================================
int3 = 20                                                                # STEP 1
ACTION: int3 = 20 
int3 = None : <type 'NoneType'>
=> int3 = 20 : <type 'int'>
==================================================
int1 = 4                                                                 # STEP 2
ACTION: int1 = 4 
int1 = None : <type 'NoneType'>
=> int1 = 4 : <type 'int'>
==================================================
int2 = 11                                                                # STEP 3
ACTION: int2 = 11 
int2 = None : <type 'NoneType'>
=> int2 = 11 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x1038b22d8> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
result = avl1.find(int3)                                                 # STEP 5
ACTION: result = avl1.find(int3) 
int3 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1038b22d8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
result = avl1.find(int0)                                                 # STEP 6
ACTION: result = avl1.find(int0) 
int0 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1038b22d8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl1.insert(int0)                                                        # STEP 7
ACTION: avl1.insert(int0) 
int0 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1038b22d8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([18]) : <type 'set'>
==================================================
int3 = 17                                                                # STEP 8
ACTION: int3 = 17 
int3 = 20 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
avl1.delete(int3)                                                        # STEP 9
ACTION: avl1.delete(int3) 
int3 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1038b22d8> : <type 'instance'>
avl_REF1 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
result = avl1.find(int0)                                                # STEP 10
ACTION: result = avl1.find(int0) 
int0 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1038b22d8> : <type 'instance'>
avl_REF1 = set([18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
int3 = 1                                                                # STEP 11
ACTION: int3 = 1 
int3 = 17 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
int0 = 15                                                               # STEP 12
ACTION: int0 = 15 
int0 = 18 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
result = avl1.find(int1)                                                # STEP 13
ACTION: result = avl1.find(int1) 
int1 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1038b22d8> : <type 'instance'>
avl_REF1 = set([18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int1 = 1                                                                # STEP 14
ACTION: int1 = 1 
int1 = 4 : <type 'int'>
=> int1 = 1 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 15
ACTION: avl1.delete(int1) 
int1 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1038b22d8> : <type 'instance'>
avl_REF1 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int1 = 13                                                               # STEP 16
ACTION: int1 = 13 
int1 = 1 : <type 'int'>
=> int1 = 13 : <type 'int'>
==================================================
result = avl1.find(int0)                                                # STEP 17
ACTION: result = avl1.find(int0) 
int0 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1038b22d8> : <type 'instance'>
avl_REF1 = set([18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl1.insert(int3)                                                       # STEP 18
ACTION: avl1.insert(int3) 
int3 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1038b22d8> : <type 'instance'>
avl_REF1 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([1, 18]) : <type 'set'>
==================================================
int3 = 12                                                               # STEP 19
ACTION: int3 = 12 
int3 = 1 : <type 'int'>
=> int3 = 12 : <type 'int'>
==================================================
int0 = 20                                                               # STEP 20
ACTION: int0 = 20 
int0 = 15 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 21
ACTION: avl1.insert(int1) 
int1 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1038b22d8> : <type 'instance'>
avl_REF1 = set([1, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([1, 18, 13]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 22
ACTION: avl1.insert(int1) 
int1 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1038b22d8> : <type 'instance'>
avl_REF1 = set([1, 18, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
result = avl1.find(int2)                                                # STEP 23
ACTION: result = avl1.find(int2) 
int2 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1038b22d8> : <type 'instance'>
avl_REF1 = set([1, 18, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int2 = 3                                                                # STEP 24
ACTION: int2 = 3 
int2 = 11 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
result = avl1.find(int1)                                                # STEP 25
ACTION: result = avl1.find(int1) 
int1 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1038b22d8> : <type 'instance'>
avl_REF1 = set([1, 18, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int1 = 7                                                                # STEP 26
ACTION: int1 = 7 
int1 = 13 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 27
ACTION: avl1.delete(int2) 
int2 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1038b22d8> : <type 'instance'>
avl_REF1 = set([1, 18, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
result = avl1.find(int3)                                                # STEP 28
ACTION: result = avl1.find(int3) 
int3 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1038b22d8> : <type 'instance'>
avl_REF1 = set([1, 18, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
int3 = 8                                                                # STEP 29
ACTION: int3 = 8 
int3 = 12 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 30
ACTION: avl1.delete(int0) 
int0 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1038b22d8> : <type 'instance'>
avl_REF1 = set([1, 18, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int0 = 5                                                                # STEP 31
ACTION: int0 = 5 
int0 = 20 : <type 'int'>
=> int0 = 5 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 32
ACTION: avl1.insert(int3) 
int3 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1038b22d8> : <type 'instance'>
avl_REF1 = set([1, 18, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([8, 1, 18, 13]) : <type 'set'>
==================================================
int2 = 6                                                                # STEP 33
ACTION: int2 = 6 
int2 = 3 : <type 'int'>
=> int2 = 6 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 34
ACTION: avl1.delete(int0) 
int0 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1038b22d8> : <type 'instance'>
avl_REF1 = set([8, 1, 18, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.insert(int2)                                                       # STEP 35
ACTION: avl1.insert(int2) 
int2 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1038b22d8> : <type 'instance'>
avl_REF1 = set([8, 1, 18, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([8, 1, 18, 13, 6]) : <type 'set'>
==================================================
int3 = 10                                                               # STEP 36
ACTION: int3 = 10 
int3 = 8 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
int2 = 14                                                               # STEP 37
ACTION: int2 = 14 
int2 = 6 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 38
ACTION: avl1.delete(int2) 
int2 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1038b22d8> : <type 'instance'>
avl_REF1 = set([8, 1, 18, 13, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int0 = 10                                                               # STEP 39
ACTION: int0 = 10 
int0 = 5 : <type 'int'>
=> int0 = 10 : <type 'int'>
==================================================
int2 = 5                                                                # STEP 40
ACTION: int2 = 5 
int2 = 14 : <type 'int'>
=> int2 = 5 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 41
ACTION: avl1.delete(int0) 
int0 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1038b22d8> : <type 'instance'>
avl_REF1 = set([8, 1, 18, 13, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.insert(int0)                                                       # STEP 42
ACTION: avl1.insert(int0) 
int0 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1038b22d8> : <type 'instance'>
avl_REF1 = set([8, 1, 18, 13, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([1, 6, 8, 10, 13, 18]) : <type 'set'>
==================================================
result = avl1.find(int1)                                                # STEP 43
ACTION: result = avl1.find(int1) 
int1 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1038b22d8> : <type 'instance'>
avl_REF1 = set([1, 6, 8, 10, 13, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int1 = 16                                                               # STEP 44
ACTION: int1 = 16 
int1 = 7 : <type 'int'>
=> int1 = 16 : <type 'int'>
==================================================
int0 = 11                                                               # STEP 45
ACTION: int0 = 11 
int0 = 10 : <type 'int'>
=> int0 = 11 : <type 'int'>
==================================================
result = avl1.find(int2)                                                # STEP 46
ACTION: result = avl1.find(int2) 
int2 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1038b22d8> : <type 'instance'>
avl_REF1 = set([1, 6, 8, 10, 13, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl1.delete(int0)                                                       # STEP 47
ACTION: avl1.delete(int0) 
int0 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1038b22d8> : <type 'instance'>
avl_REF1 = set([1, 6, 8, 10, 13, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int0 = 17                                                               # STEP 48
ACTION: int0 = 17 
int0 = 11 : <type 'int'>
=> int0 = 17 : <type 'int'>
==================================================
result = avl1.find(int0)                                                # STEP 49
ACTION: result = avl1.find(int0) 
int0 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1038b22d8> : <type 'instance'>
avl_REF1 = set([1, 6, 8, 10, 13, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
int0 = 17                                                               # STEP 50
ACTION: int0 = 17 
int0 = 17 : <type 'int'>
==================================================
int2 = 1                                                                # STEP 51
ACTION: int2 = 1 
int2 = 5 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
avl1.display()                                                          # STEP 52
ACTION: avl1.display() 
avl1 = <avlbug2.AVLTree instance at 0x1038b22d8> : <type 'instance'>
avl_REF1 = set([1, 6, 8, 10, 13, 18]) : <type 'set'>
  8 [2:0]
-- < 6 [1:1]
---- < 1 [0:0] L
-- > 13 [1:0]
---- < 10 [0:0] L
---- > 18 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([1, 6, 8, 10, 13, 18])
==================================================
avl1.insert(int1)                                                       # STEP 53
ACTION: avl1.insert(int1) 
int1 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1038b22d8> : <type 'instance'>
avl_REF1 = set([1, 6, 8, 10, 13, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([1, 6, 8, 10, 13, 16, 18]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 54
ACTION: avl1.delete(int2) 
int2 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1038b22d8> : <type 'instance'>
avl_REF1 = set([1, 6, 8, 10, 13, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([6, 8, 10, 13, 16, 18]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x101f23638>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #3 STEP #76 (0:00:30.078104) Sun Apr 30 04:36:07 2017 [ 161 stmts 213 branches ]
  9 [3:-1]
-- < 8 [1:1]
---- < 5 [0:0] L
-- > 15 [2:1]
---- < 13 [1:1]
------ < 11 [0:0] L
---- > 16 [0:0] L
set([5, 8, 9, 11, 13, 15, 16])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103bf71b8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
Original test has 71 steps

SAVING TEST AS failure.14629.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 8                                                                 # STEP 0
ACTION: int3 = 8 
int3 = None : <type 'NoneType'>
=> int3 = 8 : <type 'int'>
==================================================
int0 = 2                                                                 # STEP 1
ACTION: int0 = 2 
int0 = None : <type 'NoneType'>
=> int0 = 2 : <type 'int'>
==================================================
int2 = 4                                                                 # STEP 2
ACTION: int2 = 4 
int2 = None : <type 'NoneType'>
=> int2 = 4 : <type 'int'>
==================================================
int1 = 12                                                                # STEP 3
ACTION: int1 = 12 
int1 = None : <type 'NoneType'>
=> int1 = 12 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x103bf7440> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 5
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x103bf7758> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.insert(int0)                                                        # STEP 6
ACTION: avl1.insert(int0) 
int0 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103bf7758> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([2]) : <type 'set'>
==================================================
avl2.delete(int1)                                                        # STEP 7
ACTION: avl2.delete(int1) 
int1 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103bf7440> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int0 = 17                                                                # STEP 8
ACTION: int0 = 17 
int0 = 2 : <type 'int'>
=> int0 = 17 : <type 'int'>
==================================================
avl2.insert(int0)                                                        # STEP 9
ACTION: avl2.insert(int0) 
int0 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103bf7440> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([17]) : <type 'set'>
==================================================
int0 = 16                                                               # STEP 10
ACTION: int0 = 16 
int0 = 17 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 11
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x103bf7440> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2 == avl2                                                            # STEP 12
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x103bf7440> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
result = avl2.find(int1)                                                # STEP 13
ACTION: result = avl2.find(int1) 
int1 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103bf7440> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int1 = 11                                                               # STEP 14
ACTION: int1 = 11 
int1 = 12 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 15
ACTION: avl2.delete(int2) 
int2 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103bf7440> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int2 = 16                                                               # STEP 16
ACTION: int2 = 16 
int2 = 4 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 17
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x103bf7440> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl1.find(int3)                                                # STEP 18
ACTION: result = avl1.find(int3) 
int3 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103bf7758> : <type 'instance'>
avl_REF1 = set([2]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl2.delete(int2)                                                       # STEP 19
ACTION: avl2.delete(int2) 
int2 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103bf7440> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.insert(int0)                                                       # STEP 20
ACTION: avl2.insert(int0) 
int0 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103bf7440> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([16, 17]) : <type 'set'>
==================================================
int2 = 7                                                                # STEP 21
ACTION: int2 = 7 
int2 = 16 : <type 'int'>
=> int2 = 7 : <type 'int'>
==================================================
int0 = 13                                                               # STEP 22
ACTION: int0 = 13 
int0 = 16 : <type 'int'>
=> int0 = 13 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 23
ACTION: avl1.insert(int1) 
int1 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103bf7758> : <type 'instance'>
avl_REF1 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([2, 11]) : <type 'set'>
==================================================
int1 = 9                                                                # STEP 24
ACTION: int1 = 9 
int1 = 11 : <type 'int'>
=> int1 = 9 : <type 'int'>
==================================================
int3 = 10                                                               # STEP 25
ACTION: int3 = 10 
int3 = 8 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 26
ACTION: avl1.insert(int3) 
int3 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103bf7758> : <type 'instance'>
avl_REF1 = set([2, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([2, 11, 10]) : <type 'set'>
==================================================
result = avl2.find(int3)                                                # STEP 27
ACTION: result = avl2.find(int3) 
int3 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103bf7440> : <type 'instance'>
avl_REF2 = set([16, 17]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl2.delete(int1)                                                       # STEP 28
ACTION: avl2.delete(int1) 
int1 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103bf7440> : <type 'instance'>
avl_REF2 = set([16, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int3 = 4                                                                # STEP 29
ACTION: int3 = 4 
int3 = 10 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
int1 = 9                                                                # STEP 30
ACTION: int1 = 9 
int1 = 9 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 31
ACTION: avl2.delete(int0) 
int0 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103bf7440> : <type 'instance'>
avl_REF2 = set([16, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.insert(int1)                                                       # STEP 32
ACTION: avl2.insert(int1) 
int1 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103bf7440> : <type 'instance'>
avl_REF2 = set([16, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([16, 17, 9]) : <type 'set'>
==================================================
int1 = 1                                                                # STEP 33
ACTION: int1 = 1 
int1 = 9 : <type 'int'>
=> int1 = 1 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 34
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x103bf7440> : <type 'instance'>
avl_REF2 = set([16, 17, 9]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int0 = 14                                                               # STEP 35
ACTION: int0 = 14 
int0 = 13 : <type 'int'>
=> int0 = 14 : <type 'int'>
==================================================
result = avl2.find(int1)                                                # STEP 36
ACTION: result = avl2.find(int1) 
int1 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103bf7440> : <type 'instance'>
avl_REF2 = set([16, 17, 9]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl2 = avl.AVLTree()                                                    # STEP 37
ACTION: avl2 = avl.AVLTree() 
avl2 = <avlbug2.AVLTree instance at 0x103bf7440> : <type 'instance'>
avl_REF2 = set([16, 17, 9]) : <type 'set'>
=> avl2 = <avlbug2.AVLTree instance at 0x103be9ef0> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 38
ACTION: avl2.insert(int2) 
int2 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103be9ef0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([7]) : <type 'set'>
==================================================
int1 = 1                                                                # STEP 39
ACTION: int1 = 1 
int1 = 1 : <type 'int'>
==================================================
result = avl1.find(int0)                                                # STEP 40
ACTION: result = avl1.find(int0) 
int0 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103bf7758> : <type 'instance'>
avl_REF1 = set([2, 11, 10]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
int2 = 8                                                                # STEP 41
ACTION: int2 = 8 
int2 = 7 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
result = avl1.find(int2)                                                # STEP 42
ACTION: result = avl1.find(int2) 
int2 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103bf7758> : <type 'instance'>
avl_REF1 = set([2, 11, 10]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int0 = 19                                                               # STEP 43
ACTION: int0 = 19 
int0 = 14 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 44
ACTION: avl2.insert(int2) 
int2 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103be9ef0> : <type 'instance'>
avl_REF2 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([8, 7]) : <type 'set'>
==================================================
int2 = 9                                                                # STEP 45
ACTION: int2 = 9 
int2 = 8 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 46
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x103be9ef0> : <type 'instance'>
avl_REF2 = set([8, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int2)                                                       # STEP 47
ACTION: avl2.insert(int2) 
int2 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103be9ef0> : <type 'instance'>
avl_REF2 = set([8, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([8, 9, 7]) : <type 'set'>
==================================================
int2 = 19                                                               # STEP 48
ACTION: int2 = 19 
int2 = 9 : <type 'int'>
=> int2 = 19 : <type 'int'>
==================================================
result = avl1.find(int1)                                                # STEP 49
ACTION: result = avl1.find(int1) 
int1 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103bf7758> : <type 'instance'>
avl_REF1 = set([2, 11, 10]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl0 = avl.AVLTree()                                                    # STEP 50
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x103d76098> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl2 == avl1                                                            # STEP 51
ACTION: avl2 == avl1 
avl2 = <avlbug2.AVLTree instance at 0x103be9ef0> : <type 'instance'>
avl1 = <avlbug2.AVLTree instance at 0x103bf7758> : <type 'instance'>
avl_REF2 = set([8, 9, 7]) : <type 'set'>
avl_REF1 = set([2, 11, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
result = avl2.find(int2)                                                # STEP 52
ACTION: result = avl2.find(int2) 
int2 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103be9ef0> : <type 'instance'>
avl_REF2 = set([8, 9, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl2.insert(int1)                                                       # STEP 53
ACTION: avl2.insert(int1) 
int1 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103be9ef0> : <type 'instance'>
avl_REF2 = set([8, 9, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([8, 9, 1, 7]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 54
ACTION: avl2.delete(int2) 
int2 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103be9ef0> : <type 'instance'>
avl_REF2 = set([8, 9, 1, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
result = avl0.inorder()                                                 # STEP 55
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x103d76098> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int1 = 3                                                                # STEP 56
ACTION: int1 = 3 
int1 = 1 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
result = avl0.find(int1)                                                # STEP 57
ACTION: result = avl0.find(int1) 
int1 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103d76098> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl2.delete(int2)                                                       # STEP 58
ACTION: avl2.delete(int2) 
int2 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103be9ef0> : <type 'instance'>
avl_REF2 = set([8, 9, 1, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl0.insert(int1)                                                       # STEP 59
ACTION: avl0.insert(int1) 
int1 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103d76098> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([3]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 60
ACTION: avl2.insert(int3) 
int3 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103be9ef0> : <type 'instance'>
avl_REF2 = set([8, 9, 1, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([8, 9, 1, 4, 7]) : <type 'set'>
==================================================
int3 = 12                                                               # STEP 61
ACTION: int3 = 12 
int3 = 4 : <type 'int'>
=> int3 = 12 : <type 'int'>
==================================================
int2 = 9                                                                # STEP 62
ACTION: int2 = 9 
int2 = 19 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
avl0 == avl2                                                            # STEP 63
ACTION: avl0 == avl2 
avl0 = <avlbug2.AVLTree instance at 0x103d76098> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x103be9ef0> : <type 'instance'>
avl_REF0 = set([3]) : <type 'set'>
avl_REF2 = set([8, 9, 1, 4, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
result = avl0.inorder()                                                 # STEP 64
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x103d76098> : <type 'instance'>
avl_REF0 = set([3]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl1 == avl1                                                            # STEP 65
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x103bf7758> : <type 'instance'>
avl_REF1 = set([2, 11, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl0.delete(int0)                                                       # STEP 66
ACTION: avl0.delete(int0) 
int0 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103d76098> : <type 'instance'>
avl_REF0 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int1 = 3                                                                # STEP 67
ACTION: int1 = 3 
int1 = 3 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 68
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x103d76098> : <type 'instance'>
avl_REF0 = set([3]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
result = avl1.find(int1)                                                # STEP 69
ACTION: result = avl1.find(int1) 
int1 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103bf7758> : <type 'instance'>
avl_REF1 = set([2, 11, 10]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl2.delete(int2)                                                       # STEP 70
ACTION: avl2.delete(int2) 
int2 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103be9ef0> : <type 'instance'>
avl_REF2 = set([8, 9, 1, 4, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([8, 1, 4, 7]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103bd4758>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 15
STOPPING TESTING DUE TO TIMEOUT
8.63952333664 PERCENT COVERED
60.2495479584 TOTAL RUNTIME
6 EXECUTED
441 TOTAL TEST OPERATIONS
23.1505169868 TIME SPENT EXECUTING TEST OPERATIONS
0.0182390213013 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
23.3951892853 TIME SPENT CHECKING PROPERTIES
46.5457062721 TOTAL TIME SPENT RUNNING SUT
0.00663495063782 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
2 FAILED
0 REPEATS OF FAILURES
2 ACTUAL DISTINCT FAILURES

FAILURE 0
int0 = 18                                                                # STEP 0
int3 = 20                                                                # STEP 1
int1 = 4                                                                 # STEP 2
int2 = 11                                                                # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
result = avl1.find(int3)                                                 # STEP 5
result = avl1.find(int0)                                                 # STEP 6
avl1.insert(int0)                                                        # STEP 7
int3 = 17                                                                # STEP 8
avl1.delete(int3)                                                        # STEP 9
result = avl1.find(int0)                                                # STEP 10
int3 = 1                                                                # STEP 11
int0 = 15                                                               # STEP 12
result = avl1.find(int1)                                                # STEP 13
int1 = 1                                                                # STEP 14
avl1.delete(int1)                                                       # STEP 15
int1 = 13                                                               # STEP 16
result = avl1.find(int0)                                                # STEP 17
avl1.insert(int3)                                                       # STEP 18
int3 = 12                                                               # STEP 19
int0 = 20                                                               # STEP 20
avl1.insert(int1)                                                       # STEP 21
avl1.insert(int1)                                                       # STEP 22
result = avl1.find(int2)                                                # STEP 23
int2 = 3                                                                # STEP 24
result = avl1.find(int1)                                                # STEP 25
int1 = 7                                                                # STEP 26
avl1.delete(int2)                                                       # STEP 27
result = avl1.find(int3)                                                # STEP 28
int3 = 8                                                                # STEP 29
avl1.delete(int0)                                                       # STEP 30
int0 = 5                                                                # STEP 31
avl1.insert(int3)                                                       # STEP 32
int2 = 6                                                                # STEP 33
avl1.delete(int0)                                                       # STEP 34
avl1.insert(int2)                                                       # STEP 35
int3 = 10                                                               # STEP 36
int2 = 14                                                               # STEP 37
avl1.delete(int2)                                                       # STEP 38
int0 = 10                                                               # STEP 39
int2 = 5                                                                # STEP 40
avl1.delete(int0)                                                       # STEP 41
avl1.insert(int0)                                                       # STEP 42
result = avl1.find(int1)                                                # STEP 43
int1 = 16                                                               # STEP 44
int0 = 11                                                               # STEP 45
result = avl1.find(int2)                                                # STEP 46
avl1.delete(int0)                                                       # STEP 47
int0 = 17                                                               # STEP 48
result = avl1.find(int0)                                                # STEP 49
int0 = 17                                                               # STEP 50
int2 = 1                                                                # STEP 51
avl1.display()                                                          # STEP 52
avl1.insert(int1)                                                       # STEP 53
avl1.delete(int2)                                                       # STEP 54
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x101f23638>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE 1
int3 = 8                                                                 # STEP 0
int0 = 2                                                                 # STEP 1
int2 = 4                                                                 # STEP 2
int1 = 12                                                                # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
avl1 = avl.AVLTree()                                                     # STEP 5
avl1.insert(int0)                                                        # STEP 6
avl2.delete(int1)                                                        # STEP 7
int0 = 17                                                                # STEP 8
avl2.insert(int0)                                                        # STEP 9
int0 = 16                                                               # STEP 10
result = avl2.inorder()                                                 # STEP 11
avl2 == avl2                                                            # STEP 12
result = avl2.find(int1)                                                # STEP 13
int1 = 11                                                               # STEP 14
avl2.delete(int2)                                                       # STEP 15
int2 = 16                                                               # STEP 16
result = avl2.inorder()                                                 # STEP 17
result = avl1.find(int3)                                                # STEP 18
avl2.delete(int2)                                                       # STEP 19
avl2.insert(int0)                                                       # STEP 20
int2 = 7                                                                # STEP 21
int0 = 13                                                               # STEP 22
avl1.insert(int1)                                                       # STEP 23
int1 = 9                                                                # STEP 24
int3 = 10                                                               # STEP 25
avl1.insert(int3)                                                       # STEP 26
result = avl2.find(int3)                                                # STEP 27
avl2.delete(int1)                                                       # STEP 28
int3 = 4                                                                # STEP 29
int1 = 9                                                                # STEP 30
avl2.delete(int0)                                                       # STEP 31
avl2.insert(int1)                                                       # STEP 32
int1 = 1                                                                # STEP 33
result = avl2.inorder()                                                 # STEP 34
int0 = 14                                                               # STEP 35
result = avl2.find(int1)                                                # STEP 36
avl2 = avl.AVLTree()                                                    # STEP 37
avl2.insert(int2)                                                       # STEP 38
int1 = 1                                                                # STEP 39
result = avl1.find(int0)                                                # STEP 40
int2 = 8                                                                # STEP 41
result = avl1.find(int2)                                                # STEP 42
int0 = 19                                                               # STEP 43
avl2.insert(int2)                                                       # STEP 44
int2 = 9                                                                # STEP 45
result = avl2.inorder()                                                 # STEP 46
avl2.insert(int2)                                                       # STEP 47
int2 = 19                                                               # STEP 48
result = avl1.find(int1)                                                # STEP 49
avl0 = avl.AVLTree()                                                    # STEP 50
avl2 == avl1                                                            # STEP 51
result = avl2.find(int2)                                                # STEP 52
avl2.insert(int1)                                                       # STEP 53
avl2.delete(int2)                                                       # STEP 54
result = avl0.inorder()                                                 # STEP 55
int1 = 3                                                                # STEP 56
result = avl0.find(int1)                                                # STEP 57
avl2.delete(int2)                                                       # STEP 58
avl0.insert(int1)                                                       # STEP 59
avl2.insert(int3)                                                       # STEP 60
int3 = 12                                                               # STEP 61
int2 = 9                                                                # STEP 62
avl0 == avl2                                                            # STEP 63
result = avl0.inorder()                                                 # STEP 64
avl1 == avl1                                                            # STEP 65
avl0.delete(int0)                                                       # STEP 66
int1 = 3                                                                # STEP 67
result = avl0.inorder()                                                 # STEP 68
result = avl1.find(int1)                                                # STEP 69
avl2.delete(int2)                                                       # STEP 70
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103bd4758>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
216 BRANCHES COVERED
162 STATEMENTS COVERED

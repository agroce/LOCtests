Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=True, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.99827.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  14 [2:0]
-- < 11 [1:0]
---- < 2 [0:0] L
---- > 13 [0:0] L
-- > 19 [1:1]
---- < 17 [0:0] L
set([2, 11, 13, 14, 17, 19])
  14 [3:1]
-- < 11 [2:1]
---- < 7 [1:0]
------ < 2 [0:0] L
------ > 10 [0:0] L
---- > 13 [0:0] L
-- > 19 [1:1]
---- < 17 [0:0] L
set([2, 7, 10, 11, 13, 14, 17, 19])
TEST #4 STEP #99 (0:00:30.018347) Fri Apr 28 05:03:01 2017 [ 137 stmts 184 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105821050>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 86 steps

SAVING TEST AS failure.99827.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 3                                                                 # STEP 0
ACTION: int1 = 3 
int1 = None : <type 'NoneType'>
=> int1 = 3 : <type 'int'>
==================================================
int3 = 18                                                                # STEP 1
ACTION: int3 = 18 
int3 = None : <type 'NoneType'>
=> int3 = 18 : <type 'int'>
==================================================
int2 = 7                                                                 # STEP 2
ACTION: int2 = 7 
int2 = None : <type 'NoneType'>
=> int2 = 7 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 3
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x104565680> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int0 = 6                                                                 # STEP 4
ACTION: int0 = 6 
int0 = None : <type 'NoneType'>
=> int0 = 6 : <type 'int'>
==================================================
avl1.insert(int1)                                                        # STEP 5
ACTION: avl1.insert(int1) 
int1 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104565680> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([3]) : <type 'set'>
==================================================
int1 = 19                                                                # STEP 6
ACTION: int1 = 19 
int1 = 3 : <type 'int'>
=> int1 = 19 : <type 'int'>
==================================================
avl1.delete(int0)                                                        # STEP 7
ACTION: avl1.delete(int0) 
int0 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104565680> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl2 = avl.AVLTree()                                                     # STEP 8
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x10457e4d0> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int0 = 15                                                                # STEP 9
ACTION: int0 = 15 
int0 = 6 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
result = avl1.find(int1)                                                # STEP 10
ACTION: result = avl1.find(int1) 
int1 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104565680> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int1 = 14                                                               # STEP 11
ACTION: int1 = 14 
int1 = 19 : <type 'int'>
=> int1 = 14 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 12
ACTION: avl1.insert(int2) 
int2 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104565680> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([3, 7]) : <type 'set'>
==================================================
int2 = 8                                                                # STEP 13
ACTION: int2 = 8 
int2 = 7 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
result = avl1.find(int0)                                                # STEP 14
ACTION: result = avl1.find(int0) 
int0 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104565680> : <type 'instance'>
avl_REF1 = set([3, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
int0 = 13                                                               # STEP 15
ACTION: int0 = 13 
int0 = 15 : <type 'int'>
=> int0 = 13 : <type 'int'>
==================================================
result = avl1.find(int3)                                                # STEP 16
ACTION: result = avl1.find(int3) 
int3 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104565680> : <type 'instance'>
avl_REF1 = set([3, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
int3 = 16                                                               # STEP 17
ACTION: int3 = 16 
int3 = 18 : <type 'int'>
=> int3 = 16 : <type 'int'>
==================================================
result = avl1.find(int3)                                                # STEP 18
ACTION: result = avl1.find(int3) 
int3 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104565680> : <type 'instance'>
avl_REF1 = set([3, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
int3 = 20                                                               # STEP 19
ACTION: int3 = 20 
int3 = 16 : <type 'int'>
=> int3 = 20 : <type 'int'>
==================================================
result = avl2.find(int3)                                                # STEP 20
ACTION: result = avl2.find(int3) 
int3 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10457e4d0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl1.insert(int3)                                                       # STEP 21
ACTION: avl1.insert(int3) 
int3 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104565680> : <type 'instance'>
avl_REF1 = set([3, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([3, 20, 7]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 22
ACTION: avl2.insert(int3) 
int3 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10457e4d0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([20]) : <type 'set'>
==================================================
int3 = 10                                                               # STEP 23
ACTION: int3 = 10 
int3 = 20 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 24
ACTION: avl1.insert(int2) 
int2 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104565680> : <type 'instance'>
avl_REF1 = set([3, 20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([8, 3, 20, 7]) : <type 'set'>
==================================================
int2 = 14                                                               # STEP 25
ACTION: int2 = 14 
int2 = 8 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
result = avl2.find(int2)                                                # STEP 26
ACTION: result = avl2.find(int2) 
int2 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10457e4d0> : <type 'instance'>
avl_REF2 = set([20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl2.delete(int2)                                                       # STEP 27
ACTION: avl2.delete(int2) 
int2 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10457e4d0> : <type 'instance'>
avl_REF2 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
result = avl1.inorder()                                                 # STEP 28
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104565680> : <type 'instance'>
avl_REF1 = set([8, 3, 20, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl2.insert(int3)                                                       # STEP 29
ACTION: avl2.insert(int3) 
int3 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10457e4d0> : <type 'instance'>
avl_REF2 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([10, 20]) : <type 'set'>
==================================================
result = avl1.find(int2)                                                # STEP 30
ACTION: result = avl1.find(int2) 
int2 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104565680> : <type 'instance'>
avl_REF1 = set([8, 3, 20, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl1.delete(int0)                                                       # STEP 31
ACTION: avl1.delete(int0) 
int0 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104565680> : <type 'instance'>
avl_REF1 = set([8, 3, 20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int2 = 8                                                                # STEP 32
ACTION: int2 = 8 
int2 = 14 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
int0 = 8                                                                # STEP 33
ACTION: int0 = 8 
int0 = 13 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
result = avl2.find(int2)                                                # STEP 34
ACTION: result = avl2.find(int2) 
int2 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10457e4d0> : <type 'instance'>
avl_REF2 = set([10, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int3 = 6                                                                # STEP 35
ACTION: int3 = 6 
int3 = 10 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
int2 = 11                                                               # STEP 36
ACTION: int2 = 11 
int2 = 8 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
result = avl2.find(int2)                                                # STEP 37
ACTION: result = avl2.find(int2) 
int2 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10457e4d0> : <type 'instance'>
avl_REF2 = set([10, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int2 = 7                                                                # STEP 38
ACTION: int2 = 7 
int2 = 11 : <type 'int'>
=> int2 = 7 : <type 'int'>
==================================================
result = avl2.find(int3)                                                # STEP 39
ACTION: result = avl2.find(int3) 
int3 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10457e4d0> : <type 'instance'>
avl_REF2 = set([10, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
int3 = 12                                                               # STEP 40
ACTION: int3 = 12 
int3 = 6 : <type 'int'>
=> int3 = 12 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 41
ACTION: avl1.insert(int0) 
int0 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104565680> : <type 'instance'>
avl_REF1 = set([8, 3, 20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
int0 = 11                                                               # STEP 42
ACTION: int0 = 11 
int0 = 8 : <type 'int'>
=> int0 = 11 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 43
ACTION: avl2.insert(int3) 
int3 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10457e4d0> : <type 'instance'>
avl_REF2 = set([10, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([12, 10, 20]) : <type 'set'>
==================================================
result = avl2.find(int3)                                                # STEP 44
ACTION: result = avl2.find(int3) 
int3 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10457e4d0> : <type 'instance'>
avl_REF2 = set([12, 10, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
int3 = 18                                                               # STEP 45
ACTION: int3 = 18 
int3 = 12 : <type 'int'>
=> int3 = 18 : <type 'int'>
==================================================
result = avl2.find(int3)                                                # STEP 46
ACTION: result = avl2.find(int3) 
int3 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10457e4d0> : <type 'instance'>
avl_REF2 = set([12, 10, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl2.delete(int0)                                                       # STEP 47
ACTION: avl2.delete(int0) 
int0 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10457e4d0> : <type 'instance'>
avl_REF2 = set([12, 10, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int0 = 12                                                               # STEP 48
ACTION: int0 = 12 
int0 = 11 : <type 'int'>
=> int0 = 12 : <type 'int'>
==================================================
int3 = 6                                                                # STEP 49
ACTION: int3 = 6 
int3 = 18 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 50
ACTION: avl2.insert(int2) 
int2 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10457e4d0> : <type 'instance'>
avl_REF2 = set([12, 10, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([12, 10, 20, 7]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 51
ACTION: avl2.delete(int2) 
int2 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10457e4d0> : <type 'instance'>
avl_REF2 = set([12, 10, 20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([12, 10, 20]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 52
ACTION: avl1.delete(int2) 
int2 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104565680> : <type 'instance'>
avl_REF1 = set([8, 3, 20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([8, 3, 20]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 53
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104565680> : <type 'instance'>
avl_REF1 = set([8, 3, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
result = avl1.find(int0)                                                # STEP 54
ACTION: result = avl1.find(int0) 
int0 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104565680> : <type 'instance'>
avl_REF1 = set([8, 3, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl1.delete(int0)                                                       # STEP 55
ACTION: avl1.delete(int0) 
int0 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104565680> : <type 'instance'>
avl_REF1 = set([8, 3, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int2 = 2                                                                # STEP 56
ACTION: int2 = 2 
int2 = 7 : <type 'int'>
=> int2 = 2 : <type 'int'>
==================================================
result = avl2.find(int3)                                                # STEP 57
ACTION: result = avl2.find(int3) 
int3 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10457e4d0> : <type 'instance'>
avl_REF2 = set([12, 10, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
int0 = 14                                                               # STEP 58
ACTION: int0 = 14 
int0 = 12 : <type 'int'>
=> int0 = 14 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 59
ACTION: avl2.insert(int2) 
int2 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10457e4d0> : <type 'instance'>
avl_REF2 = set([12, 10, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([12, 10, 20, 2]) : <type 'set'>
==================================================
int3 = 20                                                               # STEP 60
ACTION: int3 = 20 
int3 = 6 : <type 'int'>
=> int3 = 20 : <type 'int'>
==================================================
int2 = 14                                                               # STEP 61
ACTION: int2 = 14 
int2 = 2 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
result = avl1.find(int2)                                                # STEP 62
ACTION: result = avl1.find(int2) 
int2 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104565680> : <type 'instance'>
avl_REF1 = set([8, 3, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int2 = 5                                                                # STEP 63
ACTION: int2 = 5 
int2 = 14 : <type 'int'>
=> int2 = 5 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 64
ACTION: avl2.insert(int2) 
int2 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10457e4d0> : <type 'instance'>
avl_REF2 = set([12, 10, 20, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([12, 10, 20, 2, 5]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 65
ACTION: avl1.insert(int0) 
int0 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104565680> : <type 'instance'>
avl_REF1 = set([8, 3, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([8, 3, 20, 14]) : <type 'set'>
==================================================
int2 = 4                                                                # STEP 66
ACTION: int2 = 4 
int2 = 5 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
int0 = 4                                                                # STEP 67
ACTION: int0 = 4 
int0 = 14 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 68
ACTION: avl2.delete(int2) 
int2 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10457e4d0> : <type 'instance'>
avl_REF2 = set([12, 10, 20, 2, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int2 = 15                                                               # STEP 69
ACTION: int2 = 15 
int2 = 4 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 70
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x102f9fab8> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 71
ACTION: avl1.insert(int0) 
int0 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104565680> : <type 'instance'>
avl_REF1 = set([8, 3, 20, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([3, 4, 8, 14, 20]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 72
ACTION: avl1.delete(int1) 
int1 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104565680> : <type 'instance'>
avl_REF1 = set([3, 4, 8, 14, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([3, 4, 8, 20]) : <type 'set'>
==================================================
int0 = 13                                                               # STEP 73
ACTION: int0 = 13 
int0 = 4 : <type 'int'>
=> int0 = 13 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 74
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104565680> : <type 'instance'>
avl_REF1 = set([3, 4, 8, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int1 = 11                                                               # STEP 75
ACTION: int1 = 11 
int1 = 14 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 76
ACTION: avl2.insert(int0) 
int0 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10457e4d0> : <type 'instance'>
avl_REF2 = set([12, 10, 20, 2, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([2, 5, 10, 12, 13, 20]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 77
ACTION: avl0.delete(int2) 
int2 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x102f9fab8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
result = avl1.find(int0)                                                # STEP 78
ACTION: result = avl1.find(int0) 
int0 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104565680> : <type 'instance'>
avl_REF1 = set([3, 4, 8, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
int2 = 6                                                                # STEP 79
ACTION: int2 = 6 
int2 = 15 : <type 'int'>
=> int2 = 6 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 80
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104565680> : <type 'instance'>
avl_REF1 = set([3, 4, 8, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1 = avl.AVLTree()                                                    # STEP 81
ACTION: avl1 = avl.AVLTree() 
avl1 = <avl.AVLTree instance at 0x104565680> : <type 'instance'>
avl_REF1 = set([3, 4, 8, 20]) : <type 'set'>
=> avl1 = <avl.AVLTree instance at 0x102fa4878> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int0 = 3                                                                # STEP 82
ACTION: int0 = 3 
int0 = 13 : <type 'int'>
=> int0 = 3 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 83
ACTION: avl2.delete(int1) 
int1 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10457e4d0> : <type 'instance'>
avl_REF2 = set([2, 5, 10, 12, 13, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int1)                                                       # STEP 84
ACTION: avl2.insert(int1) 
int1 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10457e4d0> : <type 'instance'>
avl_REF2 = set([2, 5, 10, 12, 13, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([2, 5, 10, 11, 12, 13, 20]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 85
ACTION: avl2.delete(int3) 
int3 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10457e4d0> : <type 'instance'>
avl_REF2 = set([2, 5, 10, 11, 12, 13, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([2, 5, 10, 11, 12, 13]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102fb1a28>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 0
STOPPING TESTING DUE TO TIMEOUT
8.04207668816 PERCENT COVERED
66.1492061615 TOTAL RUNTIME
9 EXECUTED
786 TOTAL TEST OPERATIONS
29.3552801609 TIME SPENT EXECUTING TEST OPERATIONS
0.0274600982666 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
29.5439326763 TIME SPENT CHECKING PROPERTIES
58.8992128372 TOTAL TIME SPENT RUNNING SUT
0.00466585159302 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int1 = 3                                                                 # STEP 0
int3 = 18                                                                # STEP 1
int2 = 7                                                                 # STEP 2
avl1 = avl.AVLTree()                                                     # STEP 3
int0 = 6                                                                 # STEP 4
avl1.insert(int1)                                                        # STEP 5
int1 = 19                                                                # STEP 6
avl1.delete(int0)                                                        # STEP 7
avl2 = avl.AVLTree()                                                     # STEP 8
int0 = 15                                                                # STEP 9
result = avl1.find(int1)                                                # STEP 10
int1 = 14                                                               # STEP 11
avl1.insert(int2)                                                       # STEP 12
int2 = 8                                                                # STEP 13
result = avl1.find(int0)                                                # STEP 14
int0 = 13                                                               # STEP 15
result = avl1.find(int3)                                                # STEP 16
int3 = 16                                                               # STEP 17
result = avl1.find(int3)                                                # STEP 18
int3 = 20                                                               # STEP 19
result = avl2.find(int3)                                                # STEP 20
avl1.insert(int3)                                                       # STEP 21
avl2.insert(int3)                                                       # STEP 22
int3 = 10                                                               # STEP 23
avl1.insert(int2)                                                       # STEP 24
int2 = 14                                                               # STEP 25
result = avl2.find(int2)                                                # STEP 26
avl2.delete(int2)                                                       # STEP 27
result = avl1.inorder()                                                 # STEP 28
avl2.insert(int3)                                                       # STEP 29
result = avl1.find(int2)                                                # STEP 30
avl1.delete(int0)                                                       # STEP 31
int2 = 8                                                                # STEP 32
int0 = 8                                                                # STEP 33
result = avl2.find(int2)                                                # STEP 34
int3 = 6                                                                # STEP 35
int2 = 11                                                               # STEP 36
result = avl2.find(int2)                                                # STEP 37
int2 = 7                                                                # STEP 38
result = avl2.find(int3)                                                # STEP 39
int3 = 12                                                               # STEP 40
avl1.insert(int0)                                                       # STEP 41
int0 = 11                                                               # STEP 42
avl2.insert(int3)                                                       # STEP 43
result = avl2.find(int3)                                                # STEP 44
int3 = 18                                                               # STEP 45
result = avl2.find(int3)                                                # STEP 46
avl2.delete(int0)                                                       # STEP 47
int0 = 12                                                               # STEP 48
int3 = 6                                                                # STEP 49
avl2.insert(int2)                                                       # STEP 50
avl2.delete(int2)                                                       # STEP 51
avl1.delete(int2)                                                       # STEP 52
result = avl1.inorder()                                                 # STEP 53
result = avl1.find(int0)                                                # STEP 54
avl1.delete(int0)                                                       # STEP 55
int2 = 2                                                                # STEP 56
result = avl2.find(int3)                                                # STEP 57
int0 = 14                                                               # STEP 58
avl2.insert(int2)                                                       # STEP 59
int3 = 20                                                               # STEP 60
int2 = 14                                                               # STEP 61
result = avl1.find(int2)                                                # STEP 62
int2 = 5                                                                # STEP 63
avl2.insert(int2)                                                       # STEP 64
avl1.insert(int0)                                                       # STEP 65
int2 = 4                                                                # STEP 66
int0 = 4                                                                # STEP 67
avl2.delete(int2)                                                       # STEP 68
int2 = 15                                                               # STEP 69
avl0 = avl.AVLTree()                                                    # STEP 70
avl1.insert(int0)                                                       # STEP 71
avl1.delete(int1)                                                       # STEP 72
int0 = 13                                                               # STEP 73
result = avl1.inorder()                                                 # STEP 74
int1 = 11                                                               # STEP 75
avl2.insert(int0)                                                       # STEP 76
avl0.delete(int2)                                                       # STEP 77
result = avl1.find(int0)                                                # STEP 78
int2 = 6                                                                # STEP 79
result = avl1.inorder()                                                 # STEP 80
avl1 = avl.AVLTree()                                                    # STEP 81
int0 = 3                                                                # STEP 82
avl2.delete(int1)                                                       # STEP 83
avl2.insert(int1)                                                       # STEP 84
avl2.delete(int3)                                                       # STEP 85
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102fb1a28>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
203 BRANCHES COVERED
152 STATEMENTS COVERED

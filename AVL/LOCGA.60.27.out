Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.62094.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10286f5a8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
Original test has 46 steps

SAVING TEST AS failure.62094.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 10                                                                # STEP 0
ACTION: int0 = 10 
int0 = None : <type 'NoneType'>
=> int0 = 10 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 1
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x1027195a8> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int1 = 14                                                                # STEP 2
ACTION: int1 = 14 
int1 = None : <type 'NoneType'>
=> int1 = 14 : <type 'int'>
==================================================
int2 = 17                                                                # STEP 3
ACTION: int2 = 17 
int2 = None : <type 'NoneType'>
=> int2 = 17 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 4
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x1025e97e8> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.delete(int1)                                                        # STEP 5
ACTION: avl0.delete(int1) 
int1 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1025e97e8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.insert(int1)                                                        # STEP 6
ACTION: avl0.insert(int1) 
int1 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1025e97e8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([14]) : <type 'set'>
==================================================
avl0.delete(int2)                                                        # STEP 7
ACTION: avl0.delete(int2) 
int2 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1025e97e8> : <type 'instance'>
avl_REF0 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl2.insert(int2)                                                        # STEP 8
ACTION: avl2.insert(int2) 
int2 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1027195a8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([17]) : <type 'set'>
==================================================
avl0.insert(int0)                                                        # STEP 9
ACTION: avl0.insert(int0) 
int0 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1025e97e8> : <type 'instance'>
avl_REF0 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([10, 14]) : <type 'set'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 10
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x102537320> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 11
ACTION: avl0.delete(int2) 
int2 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1025e97e8> : <type 'instance'>
avl_REF0 = set([10, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.insert(int1)                                                       # STEP 12
ACTION: avl0.insert(int1) 
int1 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1025e97e8> : <type 'instance'>
avl_REF0 = set([10, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
int3 = 14                                                               # STEP 13
ACTION: int3 = 14 
int3 = None : <type 'NoneType'>
=> int3 = 14 : <type 'int'>
==================================================
int2 = 12                                                               # STEP 14
ACTION: int2 = 12 
int2 = 17 : <type 'int'>
=> int2 = 12 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 15
ACTION: avl0.insert(int1) 
int1 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1025e97e8> : <type 'instance'>
avl_REF0 = set([10, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl1.insert(int0)                                                       # STEP 16
ACTION: avl1.insert(int0) 
int0 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102537320> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([10]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 17
ACTION: avl1.insert(int1) 
int1 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102537320> : <type 'instance'>
avl_REF1 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([10, 14]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 18
ACTION: avl2.delete(int2) 
int2 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1027195a8> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.delete(int0)                                                       # STEP 19
ACTION: avl2.delete(int0) 
int0 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1027195a8> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl1.insert(int1)                                                       # STEP 20
ACTION: avl1.insert(int1) 
int1 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102537320> : <type 'instance'>
avl_REF1 = set([10, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl2.delete(int2)                                                       # STEP 21
ACTION: avl2.delete(int2) 
int2 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1027195a8> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.delete(int2)                                                       # STEP 22
ACTION: avl2.delete(int2) 
int2 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1027195a8> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl0.insert(int2)                                                       # STEP 23
ACTION: avl0.insert(int2) 
int2 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1025e97e8> : <type 'instance'>
avl_REF0 = set([10, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([10, 12, 14]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 24
ACTION: avl0.delete(int1) 
int1 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1025e97e8> : <type 'instance'>
avl_REF0 = set([10, 12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([10, 12]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 25
ACTION: avl1.insert(int1) 
int1 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102537320> : <type 'instance'>
avl_REF1 = set([10, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
int2 = 18                                                               # STEP 26
ACTION: int2 = 18 
int2 = 12 : <type 'int'>
=> int2 = 18 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 27
ACTION: avl2.delete(int2) 
int2 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1027195a8> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int2 = 5                                                                # STEP 28
ACTION: int2 = 5 
int2 = 18 : <type 'int'>
=> int2 = 5 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 29
ACTION: avl1.delete(int2) 
int2 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102537320> : <type 'instance'>
avl_REF1 = set([10, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int2 = 3                                                                # STEP 30
ACTION: int2 = 3 
int2 = 5 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
int1 = 19                                                               # STEP 31
ACTION: int1 = 19 
int1 = 14 : <type 'int'>
=> int1 = 19 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 32
ACTION: avl1.delete(int3) 
int3 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102537320> : <type 'instance'>
avl_REF1 = set([10, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([10]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 33
ACTION: avl2.insert(int2) 
int2 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1027195a8> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([17, 3]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 34
ACTION: avl1.delete(int0) 
int0 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102537320> : <type 'instance'>
avl_REF1 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1 == avl0                                                            # STEP 35
ACTION: avl1 == avl0 
avl1 = <avlbug2.AVLTree instance at 0x102537320> : <type 'instance'>
avl0 = <avlbug2.AVLTree instance at 0x1025e97e8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
avl_REF0 = set([10, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
avl0.insert(int1)                                                       # STEP 36
ACTION: avl0.insert(int1) 
int1 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1025e97e8> : <type 'instance'>
avl_REF0 = set([10, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([10, 19, 12]) : <type 'set'>
==================================================
int2 = 15                                                               # STEP 37
ACTION: int2 = 15 
int2 = 3 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
int3 = 7                                                                # STEP 38
ACTION: int3 = 7 
int3 = 14 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 39
ACTION: avl2.delete(int0) 
int0 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1027195a8> : <type 'instance'>
avl_REF2 = set([17, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl0.delete(int3)                                                       # STEP 40
ACTION: avl0.delete(int3) 
int3 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1025e97e8> : <type 'instance'>
avl_REF0 = set([10, 19, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl2.insert(int3)                                                       # STEP 41
ACTION: avl2.insert(int3) 
int3 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1027195a8> : <type 'instance'>
avl_REF2 = set([17, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([17, 3, 7]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 42
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x1025e97e8> : <type 'instance'>
avl_REF0 = set([10, 19, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
result = avl0.find(int1)                                                # STEP 43
ACTION: result = avl0.find(int1) 
int1 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1025e97e8> : <type 'instance'>
avl_REF0 = set([10, 19, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl0.insert(int2)                                                       # STEP 44
ACTION: avl0.insert(int2) 
int2 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1025e97e8> : <type 'instance'>
avl_REF0 = set([10, 19, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([10, 19, 12, 15]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 45
ACTION: avl0.delete(int0) 
int0 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1025e97e8> : <type 'instance'>
avl_REF0 = set([10, 19, 12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([19, 12, 15]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102bef878>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
  8 [2:0]
-- < 4 [1:0]
---- < 2 [0:0] L
---- > 5 [0:0] L
-- > 13 [1:-1]
---- > 18 [0:0] L
set([2, 4, 5, 8, 13, 18])
  8 [2:0]
-- < 4 [1:0]
---- < 2 [0:0] L
---- > 5 [0:0] L
-- > 13 [1:-1]
---- > 18 [0:0] L
set([2, 4, 5, 8, 13, 18])
  8 [3:1]
-- < 4 [2:1]
---- < 2 [1:-1]
------ > 3 [0:0] L
---- > 5 [0:0] L
-- > 13 [1:-1]
---- > 18 [0:0] L
set([2, 3, 4, 5, 8, 13, 18])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10278ecf8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
Original test has 75 steps

SAVING TEST AS failure.62094.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 14                                                                # STEP 0
ACTION: int0 = 14 
int0 = None : <type 'NoneType'>
=> int0 = 14 : <type 'int'>
==================================================
int2 = 14                                                                # STEP 1
ACTION: int2 = 14 
int2 = None : <type 'NoneType'>
=> int2 = 14 : <type 'int'>
==================================================
int3 = 11                                                                # STEP 2
ACTION: int3 = 11 
int3 = None : <type 'NoneType'>
=> int3 = 11 : <type 'int'>
==================================================
int1 = 8                                                                 # STEP 3
ACTION: int1 = 8 
int1 = None : <type 'NoneType'>
=> int1 = 8 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x10279f440> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.delete(int0)                                                        # STEP 5
ACTION: avl1.delete(int0) 
int0 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10279f440> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.delete(int2)                                                        # STEP 6
ACTION: avl1.delete(int2) 
int2 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10279f440> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
result = avl1.inorder()                                                  # STEP 7
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x10279f440> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int1)                                                        # STEP 8
ACTION: avl1.insert(int1) 
int1 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10279f440> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([8]) : <type 'set'>
==================================================
avl1.insert(int0)                                                        # STEP 9
ACTION: avl1.insert(int0) 
int0 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10279f440> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([8, 14]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 10
ACTION: avl1.delete(int0) 
int0 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10279f440> : <type 'instance'>
avl_REF1 = set([8, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([8]) : <type 'set'>
==================================================
result = avl1.find(int1)                                                # STEP 11
ACTION: result = avl1.find(int1) 
int1 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10279f440> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl1.delete(int0)                                                       # STEP 12
ACTION: avl1.delete(int0) 
int0 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10279f440> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.insert(int2)                                                       # STEP 13
ACTION: avl1.insert(int2) 
int2 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10279f440> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([8, 14]) : <type 'set'>
==================================================
result = avl1.find(int3)                                                # STEP 14
ACTION: result = avl1.find(int3) 
int3 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10279f440> : <type 'instance'>
avl_REF1 = set([8, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
result = avl1.find(int1)                                                # STEP 15
ACTION: result = avl1.find(int1) 
int1 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10279f440> : <type 'instance'>
avl_REF1 = set([8, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl1.insert(int0)                                                       # STEP 16
ACTION: avl1.insert(int0) 
int0 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10279f440> : <type 'instance'>
avl_REF1 = set([8, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
int2 = 11                                                               # STEP 17
ACTION: int2 = 11 
int2 = 14 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 18
ACTION: avl1.insert(int1) 
int1 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10279f440> : <type 'instance'>
avl_REF1 = set([8, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl1.delete(int0)                                                       # STEP 19
ACTION: avl1.delete(int0) 
int0 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10279f440> : <type 'instance'>
avl_REF1 = set([8, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([8]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 20
ACTION: avl1.insert(int0) 
int0 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10279f440> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([8, 14]) : <type 'set'>
==================================================
result = avl1.find(int2)                                                # STEP 21
ACTION: result = avl1.find(int2) 
int2 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10279f440> : <type 'instance'>
avl_REF1 = set([8, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int3 = 1                                                                # STEP 22
ACTION: int3 = 1 
int3 = 11 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 23
ACTION: avl1.insert(int0) 
int0 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10279f440> : <type 'instance'>
avl_REF1 = set([8, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
int1 = 14                                                               # STEP 24
ACTION: int1 = 14 
int1 = 8 : <type 'int'>
=> int1 = 14 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 25
ACTION: avl1.insert(int0) 
int0 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10279f440> : <type 'instance'>
avl_REF1 = set([8, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
result = avl1.find(int3)                                                # STEP 26
ACTION: result = avl1.find(int3) 
int3 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10279f440> : <type 'instance'>
avl_REF1 = set([8, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl1.insert(int0)                                                       # STEP 27
ACTION: avl1.insert(int0) 
int0 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10279f440> : <type 'instance'>
avl_REF1 = set([8, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.delete(int2)                                                       # STEP 28
ACTION: avl1.delete(int2) 
int2 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10279f440> : <type 'instance'>
avl_REF1 = set([8, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.delete(int3)                                                       # STEP 29
ACTION: avl1.delete(int3) 
int3 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10279f440> : <type 'instance'>
avl_REF1 = set([8, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.insert(int0)                                                       # STEP 30
ACTION: avl1.insert(int0) 
int0 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10279f440> : <type 'instance'>
avl_REF1 = set([8, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.insert(int1)                                                       # STEP 31
ACTION: avl1.insert(int1) 
int1 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10279f440> : <type 'instance'>
avl_REF1 = set([8, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
int3 = 4                                                                # STEP 32
ACTION: int3 = 4 
int3 = 1 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 33
ACTION: avl1.insert(int3) 
int3 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10279f440> : <type 'instance'>
avl_REF1 = set([8, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([8, 4, 14]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 34
ACTION: avl1.delete(int0) 
int0 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10279f440> : <type 'instance'>
avl_REF1 = set([8, 4, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([8, 4]) : <type 'set'>
==================================================
int3 = 14                                                               # STEP 35
ACTION: int3 = 14 
int3 = 4 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 36
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x10279f440> : <type 'instance'>
avl_REF1 = set([8, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.delete(int2)                                                       # STEP 37
ACTION: avl1.delete(int2) 
int2 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10279f440> : <type 'instance'>
avl_REF1 = set([8, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.insert(int0)                                                       # STEP 38
ACTION: avl1.insert(int0) 
int0 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10279f440> : <type 'instance'>
avl_REF1 = set([8, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([8, 4, 14]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 39
ACTION: avl1.delete(int3) 
int3 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10279f440> : <type 'instance'>
avl_REF1 = set([8, 4, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([8, 4]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 40
ACTION: avl1.delete(int0) 
int0 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10279f440> : <type 'instance'>
avl_REF1 = set([8, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int0 = 5                                                                # STEP 41
ACTION: int0 = 5 
int0 = 14 : <type 'int'>
=> int0 = 5 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 42
ACTION: avl1.delete(int3) 
int3 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10279f440> : <type 'instance'>
avl_REF1 = set([8, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int1 = 2                                                                # STEP 43
ACTION: int1 = 2 
int1 = 14 : <type 'int'>
=> int1 = 2 : <type 'int'>
==================================================
result = avl1.find(int1)                                                # STEP 44
ACTION: result = avl1.find(int1) 
int1 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10279f440> : <type 'instance'>
avl_REF1 = set([8, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int3 = 9                                                                # STEP 45
ACTION: int3 = 9 
int3 = 14 : <type 'int'>
=> int3 = 9 : <type 'int'>
==================================================
int1 = 5                                                                # STEP 46
ACTION: int1 = 5 
int1 = 2 : <type 'int'>
=> int1 = 5 : <type 'int'>
==================================================
int2 = 13                                                               # STEP 47
ACTION: int2 = 13 
int2 = 11 : <type 'int'>
=> int2 = 13 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 48
ACTION: avl1.delete(int3) 
int3 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10279f440> : <type 'instance'>
avl_REF1 = set([8, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.insert(int0)                                                       # STEP 49
ACTION: avl1.insert(int0) 
int0 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10279f440> : <type 'instance'>
avl_REF1 = set([8, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([8, 4, 5]) : <type 'set'>
==================================================
int3 = 18                                                               # STEP 50
ACTION: int3 = 18 
int3 = 9 : <type 'int'>
=> int3 = 18 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 51
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x10279f440> : <type 'instance'>
avl_REF1 = set([8, 4, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
int0 = 9                                                                # STEP 52
ACTION: int0 = 9 
int0 = 5 : <type 'int'>
=> int0 = 9 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 53
ACTION: avl1.insert(int2) 
int2 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10279f440> : <type 'instance'>
avl_REF1 = set([8, 4, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([8, 4, 5, 13]) : <type 'set'>
==================================================
int2 = 2                                                                # STEP 54
ACTION: int2 = 2 
int2 = 13 : <type 'int'>
=> int2 = 2 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 55
ACTION: avl1.delete(int0) 
int0 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10279f440> : <type 'instance'>
avl_REF1 = set([8, 4, 5, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int0 = 3                                                                # STEP 56
ACTION: int0 = 3 
int0 = 9 : <type 'int'>
=> int0 = 3 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 57
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x10279f440> : <type 'instance'>
avl_REF1 = set([8, 4, 5, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.delete(int1)                                                       # STEP 58
ACTION: avl1.delete(int1) 
int1 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10279f440> : <type 'instance'>
avl_REF1 = set([8, 4, 5, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([8, 4, 13]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 59
ACTION: avl1.insert(int2) 
int2 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10279f440> : <type 'instance'>
avl_REF1 = set([8, 4, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([2, 4, 8, 13]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 60
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x10279f440> : <type 'instance'>
avl_REF1 = set([2, 4, 8, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int2 = 14                                                               # STEP 61
ACTION: int2 = 14 
int2 = 2 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 62
ACTION: avl1.insert(int1) 
int1 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10279f440> : <type 'instance'>
avl_REF1 = set([2, 4, 8, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([2, 4, 5, 8, 13]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 63
ACTION: avl1.insert(int3) 
int3 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10279f440> : <type 'instance'>
avl_REF1 = set([2, 4, 5, 8, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([2, 4, 5, 8, 13, 18]) : <type 'set'>
==================================================
avl1.display()                                                          # STEP 64
ACTION: avl1.display() 
avl1 = <avlbug2.AVLTree instance at 0x10279f440> : <type 'instance'>
avl_REF1 = set([2, 4, 5, 8, 13, 18]) : <type 'set'>
  8 [2:0]
-- < 4 [1:0]
---- < 2 [0:0] L
---- > 5 [0:0] L
-- > 13 [1:-1]
---- > 18 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([2, 4, 5, 8, 13, 18])
==================================================
avl1.delete(int0)                                                       # STEP 65
ACTION: avl1.delete(int0) 
int0 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10279f440> : <type 'instance'>
avl_REF1 = set([2, 4, 5, 8, 13, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.display()                                                          # STEP 66
ACTION: avl1.display() 
avl1 = <avlbug2.AVLTree instance at 0x10279f440> : <type 'instance'>
avl_REF1 = set([2, 4, 5, 8, 13, 18]) : <type 'set'>
  8 [2:0]
-- < 4 [1:0]
---- < 2 [0:0] L
---- > 5 [0:0] L
-- > 13 [1:-1]
---- > 18 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([2, 4, 5, 8, 13, 18])
==================================================
avl1.insert(int3)                                                       # STEP 67
ACTION: avl1.insert(int3) 
int3 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10279f440> : <type 'instance'>
avl_REF1 = set([2, 4, 5, 8, 13, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
avl1.insert(int0)                                                       # STEP 68
ACTION: avl1.insert(int0) 
int0 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10279f440> : <type 'instance'>
avl_REF1 = set([2, 4, 5, 8, 13, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([2, 3, 4, 5, 8, 13, 18]) : <type 'set'>
==================================================
int3 = 18                                                               # STEP 69
ACTION: int3 = 18 
int3 = 18 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 70
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x10279f440> : <type 'instance'>
avl_REF1 = set([2, 3, 4, 5, 8, 13, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
result = avl1.find(int1)                                                # STEP 71
ACTION: result = avl1.find(int1) 
int1 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10279f440> : <type 'instance'>
avl_REF1 = set([2, 3, 4, 5, 8, 13, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl1.display()                                                          # STEP 72
ACTION: avl1.display() 
avl1 = <avlbug2.AVLTree instance at 0x10279f440> : <type 'instance'>
avl_REF1 = set([2, 3, 4, 5, 8, 13, 18]) : <type 'set'>
  8 [3:1]
-- < 4 [2:1]
---- < 2 [1:-1]
------ > 3 [0:0] L
---- > 5 [0:0] L
-- > 13 [1:-1]
---- > 18 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([2, 3, 4, 5, 8, 13, 18])
==================================================
int0 = 15                                                               # STEP 73
ACTION: int0 = 15 
int0 = 3 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 74
ACTION: avl1.delete(int1) 
int1 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10279f440> : <type 'instance'>
avl_REF1 = set([2, 3, 4, 5, 8, 13, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([2, 3, 4, 8, 13, 18]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102db0fc8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
TEST #3 STEP #48 (0:00:30.038095) Mon May  1 17:43:28 2017 [ 160 stmts 210 branches ]
  13 [2:0]
-- < 9 [1:0]
---- < 1 [0:0] L
---- > 11 [0:0] L
-- > 15 [1:1]
---- < 14 [0:0] L
set([1, 9, 11, 13, 14, 15])
  13 [2:0]
-- < 9 [1:0]
---- < 1 [0:0] L
---- > 11 [0:0] L
-- > 15 [1:1]
---- < 14 [0:0] L
set([1, 9, 11, 13, 14, 15])
  13 [2:0]
-- < 9 [1:0]
---- < 1 [0:0] L
---- > 11 [0:0] L
-- > 15 [1:1]
---- < 14 [0:0] L
set([1, 9, 11, 13, 14, 15])
  13 [2:0]
-- < 9 [1:0]
---- < 1 [0:0] L
---- > 11 [0:0] L
-- > 15 [1:1]
---- < 14 [0:0] L
set([1, 9, 11, 13, 14, 15])
  13 [2:0]
-- < 9 [1:0]
---- < 1 [0:0] L
---- > 11 [0:0] L
-- > 15 [1:1]
---- < 14 [0:0] L
set([1, 9, 11, 13, 14, 15])
  13 [2:0]
-- < 9 [1:0]
---- < 1 [0:0] L
---- > 11 [0:0] L
-- > 15 [1:1]
---- < 14 [0:0] L
set([1, 9, 11, 13, 14, 15])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102bac290>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
Original test has 30 steps

SAVING TEST AS failure.62094.test.2
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 7                                                                 # STEP 0
ACTION: int1 = 7 
int1 = None : <type 'NoneType'>
=> int1 = 7 : <type 'int'>
==================================================
int3 = 4                                                                 # STEP 1
ACTION: int3 = 4 
int3 = None : <type 'NoneType'>
=> int3 = 4 : <type 'int'>
==================================================
int2 = 20                                                                # STEP 2
ACTION: int2 = 20 
int2 = None : <type 'NoneType'>
=> int2 = 20 : <type 'int'>
==================================================
int0 = 17                                                                # STEP 3
ACTION: int0 = 17 
int0 = None : <type 'NoneType'>
=> int0 = 17 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 4
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x102bac9e0> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0 == avl0                                                             # STEP 5
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x102bac9e0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
result = avl0.find(int3)                                                 # STEP 6
ACTION: result = avl0.find(int3) 
int3 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102bac9e0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
avl0.delete(int2)                                                        # STEP 7
ACTION: avl0.delete(int2) 
int2 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102bac9e0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.delete(int2)                                                        # STEP 8
ACTION: avl0.delete(int2) 
int2 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102bac9e0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.delete(int2)                                                        # STEP 9
ACTION: avl0.delete(int2) 
int2 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102bac9e0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
result = avl0.inorder()                                                 # STEP 10
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x102bac9e0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int0)                                                       # STEP 11
ACTION: avl0.insert(int0) 
int0 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102bac9e0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([17]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 12
ACTION: avl0.insert(int3) 
int3 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102bac9e0> : <type 'instance'>
avl_REF0 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([17, 4]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 13
ACTION: avl0.delete(int1) 
int1 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102bac9e0> : <type 'instance'>
avl_REF0 = set([17, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.delete(int1)                                                       # STEP 14
ACTION: avl0.delete(int1) 
int1 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102bac9e0> : <type 'instance'>
avl_REF0 = set([17, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.insert(int1)                                                       # STEP 15
ACTION: avl0.insert(int1) 
int1 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102bac9e0> : <type 'instance'>
avl_REF0 = set([17, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([17, 4, 7]) : <type 'set'>
==================================================
avl0 == avl0                                                            # STEP 16
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x102bac9e0> : <type 'instance'>
avl_REF0 = set([17, 4, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
result = avl0.find(int0)                                                # STEP 17
ACTION: result = avl0.find(int0) 
int0 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102bac9e0> : <type 'instance'>
avl_REF0 = set([17, 4, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
avl0.insert(int1)                                                       # STEP 18
ACTION: avl0.insert(int1) 
int1 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102bac9e0> : <type 'instance'>
avl_REF0 = set([17, 4, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl0.delete(int1)                                                       # STEP 19
ACTION: avl0.delete(int1) 
int1 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102bac9e0> : <type 'instance'>
avl_REF0 = set([17, 4, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([17, 4]) : <type 'set'>
==================================================
avl0 == avl0                                                            # STEP 20
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x102bac9e0> : <type 'instance'>
avl_REF0 = set([17, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl0.delete(int1)                                                       # STEP 21
ACTION: avl0.delete(int1) 
int1 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102bac9e0> : <type 'instance'>
avl_REF0 = set([17, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int1 = 4                                                                # STEP 22
ACTION: int1 = 4 
int1 = 7 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
int0 = 18                                                               # STEP 23
ACTION: int0 = 18 
int0 = 17 : <type 'int'>
=> int0 = 18 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 24
ACTION: avl0.insert(int1) 
int1 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102bac9e0> : <type 'instance'>
avl_REF0 = set([17, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl0.insert(int2)                                                       # STEP 25
ACTION: avl0.insert(int2) 
int2 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102bac9e0> : <type 'instance'>
avl_REF0 = set([17, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([17, 4, 20]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 26
ACTION: avl0.delete(int0) 
int0 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102bac9e0> : <type 'instance'>
avl_REF0 = set([17, 4, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int0 = 2                                                                # STEP 27
ACTION: int0 = 2 
int0 = 18 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 28
ACTION: avl0.insert(int0) 
int0 = 2 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102bac9e0> : <type 'instance'>
avl_REF0 = set([17, 4, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([17, 2, 4, 20]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 29
ACTION: avl0.delete(int2) 
int2 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102bac9e0> : <type 'instance'>
avl_REF0 = set([17, 2, 4, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([17, 2, 4]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102ba4ea8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 3 DISTINCT FAILURES
  5 [3:-1]
-- < 3 [1:0]
---- < 2 [0:0] L
---- > 4 [0:0] L
-- > 11 [2:-1]
---- < 9 [0:0] L
---- > 15 [1:1]
------ < 13 [0:0] L
set([2, 3, 4, 5, 9, 11, 13, 15])
  5 [2:0]
-- < 3 [1:-1]
---- > 4 [0:0] L
-- > 11 [1:0]
---- < 9 [0:0] L
---- > 13 [0:0] L
set([3, 4, 5, 9, 11, 13])
  5 [3:-1]
-- < 3 [1:-1]
---- > 4 [0:0] L
-- > 11 [2:-1]
---- < 9 [0:0] L
---- > 15 [1:0]
------ < 13 [0:0] L
------ > 18 [0:0] L
set([3, 4, 5, 9, 11, 13, 15, 18])
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 79
STOPPING TESTING DUE TO TIMEOUT
8.15438189205 PERCENT COVERED
60.2859041691 TOTAL RUNTIME
6 EXECUTED
430 TOTAL TEST OPERATIONS
22.0191640854 TIME SPENT EXECUTING TEST OPERATIONS
0.0490546226501 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
22.2320878506 TIME SPENT CHECKING PROPERTIES
44.251251936 TOTAL TIME SPENT RUNNING SUT
0.00399494171143 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
3 FAILED
0 REPEATS OF FAILURES
3 ACTUAL DISTINCT FAILURES

FAILURE 0
int0 = 10                                                                # STEP 0
avl2 = avl.AVLTree()                                                     # STEP 1
int1 = 14                                                                # STEP 2
int2 = 17                                                                # STEP 3
avl0 = avl.AVLTree()                                                     # STEP 4
avl0.delete(int1)                                                        # STEP 5
avl0.insert(int1)                                                        # STEP 6
avl0.delete(int2)                                                        # STEP 7
avl2.insert(int2)                                                        # STEP 8
avl0.insert(int0)                                                        # STEP 9
avl1 = avl.AVLTree()                                                    # STEP 10
avl0.delete(int2)                                                       # STEP 11
avl0.insert(int1)                                                       # STEP 12
int3 = 14                                                               # STEP 13
int2 = 12                                                               # STEP 14
avl0.insert(int1)                                                       # STEP 15
avl1.insert(int0)                                                       # STEP 16
avl1.insert(int1)                                                       # STEP 17
avl2.delete(int2)                                                       # STEP 18
avl2.delete(int0)                                                       # STEP 19
avl1.insert(int1)                                                       # STEP 20
avl2.delete(int2)                                                       # STEP 21
avl2.delete(int2)                                                       # STEP 22
avl0.insert(int2)                                                       # STEP 23
avl0.delete(int1)                                                       # STEP 24
avl1.insert(int1)                                                       # STEP 25
int2 = 18                                                               # STEP 26
avl2.delete(int2)                                                       # STEP 27
int2 = 5                                                                # STEP 28
avl1.delete(int2)                                                       # STEP 29
int2 = 3                                                                # STEP 30
int1 = 19                                                               # STEP 31
avl1.delete(int3)                                                       # STEP 32
avl2.insert(int2)                                                       # STEP 33
avl1.delete(int0)                                                       # STEP 34
avl1 == avl0                                                            # STEP 35
avl0.insert(int1)                                                       # STEP 36
int2 = 15                                                               # STEP 37
int3 = 7                                                                # STEP 38
avl2.delete(int0)                                                       # STEP 39
avl0.delete(int3)                                                       # STEP 40
avl2.insert(int3)                                                       # STEP 41
result = avl0.inorder()                                                 # STEP 42
result = avl0.find(int1)                                                # STEP 43
avl0.insert(int2)                                                       # STEP 44
avl0.delete(int0)                                                       # STEP 45
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102bef878>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE 1
int0 = 14                                                                # STEP 0
int2 = 14                                                                # STEP 1
int3 = 11                                                                # STEP 2
int1 = 8                                                                 # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
avl1.delete(int0)                                                        # STEP 5
avl1.delete(int2)                                                        # STEP 6
result = avl1.inorder()                                                  # STEP 7
avl1.insert(int1)                                                        # STEP 8
avl1.insert(int0)                                                        # STEP 9
avl1.delete(int0)                                                       # STEP 10
result = avl1.find(int1)                                                # STEP 11
avl1.delete(int0)                                                       # STEP 12
avl1.insert(int2)                                                       # STEP 13
result = avl1.find(int3)                                                # STEP 14
result = avl1.find(int1)                                                # STEP 15
avl1.insert(int0)                                                       # STEP 16
int2 = 11                                                               # STEP 17
avl1.insert(int1)                                                       # STEP 18
avl1.delete(int0)                                                       # STEP 19
avl1.insert(int0)                                                       # STEP 20
result = avl1.find(int2)                                                # STEP 21
int3 = 1                                                                # STEP 22
avl1.insert(int0)                                                       # STEP 23
int1 = 14                                                               # STEP 24
avl1.insert(int0)                                                       # STEP 25
result = avl1.find(int3)                                                # STEP 26
avl1.insert(int0)                                                       # STEP 27
avl1.delete(int2)                                                       # STEP 28
avl1.delete(int3)                                                       # STEP 29
avl1.insert(int0)                                                       # STEP 30
avl1.insert(int1)                                                       # STEP 31
int3 = 4                                                                # STEP 32
avl1.insert(int3)                                                       # STEP 33
avl1.delete(int0)                                                       # STEP 34
int3 = 14                                                               # STEP 35
result = avl1.inorder()                                                 # STEP 36
avl1.delete(int2)                                                       # STEP 37
avl1.insert(int0)                                                       # STEP 38
avl1.delete(int3)                                                       # STEP 39
avl1.delete(int0)                                                       # STEP 40
int0 = 5                                                                # STEP 41
avl1.delete(int3)                                                       # STEP 42
int1 = 2                                                                # STEP 43
result = avl1.find(int1)                                                # STEP 44
int3 = 9                                                                # STEP 45
int1 = 5                                                                # STEP 46
int2 = 13                                                               # STEP 47
avl1.delete(int3)                                                       # STEP 48
avl1.insert(int0)                                                       # STEP 49
int3 = 18                                                               # STEP 50
avl1 == avl1                                                            # STEP 51
int0 = 9                                                                # STEP 52
avl1.insert(int2)                                                       # STEP 53
int2 = 2                                                                # STEP 54
avl1.delete(int0)                                                       # STEP 55
int0 = 3                                                                # STEP 56
avl1 == avl1                                                            # STEP 57
avl1.delete(int1)                                                       # STEP 58
avl1.insert(int2)                                                       # STEP 59
result = avl1.inorder()                                                 # STEP 60
int2 = 14                                                               # STEP 61
avl1.insert(int1)                                                       # STEP 62
avl1.insert(int3)                                                       # STEP 63
avl1.display()                                                          # STEP 64
avl1.delete(int0)                                                       # STEP 65
avl1.display()                                                          # STEP 66
avl1.insert(int3)                                                       # STEP 67
avl1.insert(int0)                                                       # STEP 68
int3 = 18                                                               # STEP 69
result = avl1.inorder()                                                 # STEP 70
result = avl1.find(int1)                                                # STEP 71
avl1.display()                                                          # STEP 72
int0 = 15                                                               # STEP 73
avl1.delete(int1)                                                       # STEP 74
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102db0fc8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE 2
int1 = 7                                                                 # STEP 0
int3 = 4                                                                 # STEP 1
int2 = 20                                                                # STEP 2
int0 = 17                                                                # STEP 3
avl0 = avl.AVLTree()                                                     # STEP 4
avl0 == avl0                                                             # STEP 5
result = avl0.find(int3)                                                 # STEP 6
avl0.delete(int2)                                                        # STEP 7
avl0.delete(int2)                                                        # STEP 8
avl0.delete(int2)                                                        # STEP 9
result = avl0.inorder()                                                 # STEP 10
avl0.insert(int0)                                                       # STEP 11
avl0.insert(int3)                                                       # STEP 12
avl0.delete(int1)                                                       # STEP 13
avl0.delete(int1)                                                       # STEP 14
avl0.insert(int1)                                                       # STEP 15
avl0 == avl0                                                            # STEP 16
result = avl0.find(int0)                                                # STEP 17
avl0.insert(int1)                                                       # STEP 18
avl0.delete(int1)                                                       # STEP 19
avl0 == avl0                                                            # STEP 20
avl0.delete(int1)                                                       # STEP 21
int1 = 4                                                                # STEP 22
int0 = 18                                                               # STEP 23
avl0.insert(int1)                                                       # STEP 24
avl0.insert(int2)                                                       # STEP 25
avl0.delete(int0)                                                       # STEP 26
int0 = 2                                                                # STEP 27
avl0.insert(int0)                                                       # STEP 28
avl0.delete(int2)                                                       # STEP 29
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102ba4ea8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
212 BRANCHES COVERED
160 STATEMENTS COVERED

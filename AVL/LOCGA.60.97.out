Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.62602.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  15 [2:0]
-- < 10 [1:0]
---- < 5 [0:0] L
---- > 12 [0:0] L
-- > 20 [1:1]
---- < 18 [0:0] L
set([5, 10, 12, 15, 18, 20])
  15 [3:1]
-- < 10 [2:1]
---- < 5 [1:1]
------ < 1 [0:0] L
---- > 12 [0:0] L
-- > 20 [1:1]
---- < 18 [0:0] L
set([1, 5, 10, 12, 15, 18, 20])
  15 [3:1]
-- < 10 [2:1]
---- < 5 [1:1]
------ < 1 [0:0] L
---- > 12 [0:0] L
-- > 20 [1:1]
---- < 18 [0:0] L
set([1, 5, 10, 12, 15, 18, 20])
  7 [3:-1]
-- < 3 [1:1]
---- < 1 [0:0] L
-- > 14 [2:-1]
---- < 9 [0:0] L
---- > 18 [1:1]
------ < 16 [0:0] L
set([1, 3, 7, 9, 14, 16, 18])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1029c9050>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
Original test has 70 steps

SAVING TEST AS failure.62602.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 1                                                                 # STEP 0
ACTION: int3 = 1 
int3 = None : <type 'NoneType'>
=> int3 = 1 : <type 'int'>
==================================================
int1 = 3                                                                 # STEP 1
ACTION: int1 = 3 
int1 = None : <type 'NoneType'>
=> int1 = 3 : <type 'int'>
==================================================
int0 = 3                                                                 # STEP 2
ACTION: int0 = 3 
int0 = None : <type 'NoneType'>
=> int0 = 3 : <type 'int'>
==================================================
int2 = 18                                                                # STEP 3
ACTION: int2 = 18 
int2 = None : <type 'NoneType'>
=> int2 = 18 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 4
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x102f6f488> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.insert(int2)                                                        # STEP 5
ACTION: avl0.insert(int2) 
int2 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102f6f488> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([18]) : <type 'set'>
==================================================
avl0.insert(int2)                                                        # STEP 6
ACTION: avl0.insert(int2) 
int2 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102f6f488> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl0.insert(int1)                                                        # STEP 7
ACTION: avl0.insert(int1) 
int1 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102f6f488> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([18, 3]) : <type 'set'>
==================================================
avl0.delete(int0)                                                        # STEP 8
ACTION: avl0.delete(int0) 
int0 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102f6f488> : <type 'instance'>
avl_REF0 = set([18, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([18]) : <type 'set'>
==================================================
int2 = 16                                                                # STEP 9
ACTION: int2 = 16 
int2 = 18 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 10
ACTION: avl0.delete(int1) 
int1 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102f6f488> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.insert(int0)                                                       # STEP 11
ACTION: avl0.insert(int0) 
int0 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102f6f488> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([18, 3]) : <type 'set'>
==================================================
int0 = 7                                                                # STEP 12
ACTION: int0 = 7 
int0 = 3 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
int1 = 15                                                               # STEP 13
ACTION: int1 = 15 
int1 = 3 : <type 'int'>
=> int1 = 15 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 14
ACTION: avl0.insert(int0) 
int0 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102f6f488> : <type 'instance'>
avl_REF0 = set([18, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([18, 3, 7]) : <type 'set'>
==================================================
int0 = 9                                                                # STEP 15
ACTION: int0 = 9 
int0 = 7 : <type 'int'>
=> int0 = 9 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 16
ACTION: avl0.delete(int2) 
int2 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102f6f488> : <type 'instance'>
avl_REF0 = set([18, 3, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int2 = 14                                                               # STEP 17
ACTION: int2 = 14 
int2 = 16 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
result = avl0.find(int3)                                                # STEP 18
ACTION: result = avl0.find(int3) 
int3 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102f6f488> : <type 'instance'>
avl_REF0 = set([18, 3, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
int3 = 6                                                                # STEP 19
ACTION: int3 = 6 
int3 = 1 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 20
ACTION: avl0.insert(int2) 
int2 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102f6f488> : <type 'instance'>
avl_REF0 = set([18, 3, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([18, 3, 14, 7]) : <type 'set'>
==================================================
int2 = 1                                                                # STEP 21
ACTION: int2 = 1 
int2 = 14 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 22
ACTION: avl0.delete(int2) 
int2 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102f6f488> : <type 'instance'>
avl_REF0 = set([18, 3, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int2 = 14                                                               # STEP 23
ACTION: int2 = 14 
int2 = 1 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 24
ACTION: avl0.delete(int1) 
int1 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102f6f488> : <type 'instance'>
avl_REF0 = set([18, 3, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.delete(int2)                                                       # STEP 25
ACTION: avl0.delete(int2) 
int2 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102f6f488> : <type 'instance'>
avl_REF0 = set([18, 3, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([18, 3, 7]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 26
ACTION: avl0.insert(int2) 
int2 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102f6f488> : <type 'instance'>
avl_REF0 = set([18, 3, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([18, 3, 14, 7]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 27
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x102f6f488> : <type 'instance'>
avl_REF0 = set([18, 3, 14, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int0)                                                       # STEP 28
ACTION: avl0.insert(int0) 
int0 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102f6f488> : <type 'instance'>
avl_REF0 = set([18, 3, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([9, 18, 3, 14, 7]) : <type 'set'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 29
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x102e84e18> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 30
ACTION: avl2.delete(int0) 
int0 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102e84e18> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.delete(int2)                                                       # STEP 31
ACTION: avl2.delete(int2) 
int2 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102e84e18> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl0.insert(int0)                                                       # STEP 32
ACTION: avl0.insert(int0) 
int0 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102f6f488> : <type 'instance'>
avl_REF0 = set([9, 18, 3, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
avl2.insert(int3)                                                       # STEP 33
ACTION: avl2.insert(int3) 
int3 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102e84e18> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([6]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 34
ACTION: avl0.insert(int0) 
int0 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102f6f488> : <type 'instance'>
avl_REF0 = set([9, 18, 3, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
avl2 == avl2                                                            # STEP 35
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x102e84e18> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
int1 = 1                                                                # STEP 36
ACTION: int1 = 1 
int1 = 15 : <type 'int'>
=> int1 = 1 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 37
ACTION: avl0.delete(int3) 
int3 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102f6f488> : <type 'instance'>
avl_REF0 = set([9, 18, 3, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl2.delete(int0)                                                       # STEP 38
ACTION: avl2.delete(int0) 
int0 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102e84e18> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.delete(int0)                                                       # STEP 39
ACTION: avl2.delete(int0) 
int0 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102e84e18> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.insert(int0)                                                       # STEP 40
ACTION: avl2.insert(int0) 
int0 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102e84e18> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([9, 6]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 41
ACTION: avl2.insert(int0) 
int0 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102e84e18> : <type 'instance'>
avl_REF2 = set([9, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
int3 = 17                                                               # STEP 42
ACTION: int3 = 17 
int3 = 6 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 43
ACTION: avl2.delete(int0) 
int0 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102e84e18> : <type 'instance'>
avl_REF2 = set([9, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([6]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 44
ACTION: avl2.delete(int1) 
int1 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102e84e18> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.delete(int2)                                                       # STEP 45
ACTION: avl2.delete(int2) 
int2 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102e84e18> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
result = avl2.inorder()                                                 # STEP 46
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x102e84e18> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int1)                                                       # STEP 47
ACTION: avl2.insert(int1) 
int1 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102e84e18> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([1, 6]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 48
ACTION: avl2.insert(int0) 
int0 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102e84e18> : <type 'instance'>
avl_REF2 = set([1, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([1, 6, 9]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 49
ACTION: avl0.insert(int1) 
int1 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102f6f488> : <type 'instance'>
avl_REF0 = set([9, 18, 3, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([1, 3, 7, 9, 14, 18]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 50
ACTION: avl2.delete(int1) 
int1 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102e84e18> : <type 'instance'>
avl_REF2 = set([1, 6, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([6, 9]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 51
ACTION: avl2.delete(int0) 
int0 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102e84e18> : <type 'instance'>
avl_REF2 = set([6, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([6]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 52
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x102f6f488> : <type 'instance'>
avl_REF0 = set([1, 3, 7, 9, 14, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl2.delete(int2)                                                       # STEP 53
ACTION: avl2.delete(int2) 
int2 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102e84e18> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.insert(int3)                                                       # STEP 54
ACTION: avl2.insert(int3) 
int3 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102e84e18> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([17, 6]) : <type 'set'>
==================================================
int1 = 16                                                               # STEP 55
ACTION: int1 = 16 
int1 = 1 : <type 'int'>
=> int1 = 16 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 56
ACTION: avl2.delete(int1) 
int1 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102e84e18> : <type 'instance'>
avl_REF2 = set([17, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int3)                                                       # STEP 57
ACTION: avl2.insert(int3) 
int3 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102e84e18> : <type 'instance'>
avl_REF2 = set([17, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
avl0.insert(int1)                                                       # STEP 58
ACTION: avl0.insert(int1) 
int1 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102f6f488> : <type 'instance'>
avl_REF0 = set([1, 3, 7, 9, 14, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([1, 3, 7, 9, 14, 16, 18]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 59
ACTION: avl0.insert(int2) 
int2 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102f6f488> : <type 'instance'>
avl_REF0 = set([1, 3, 7, 9, 14, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
int2 = 6                                                                # STEP 60
ACTION: int2 = 6 
int2 = 14 : <type 'int'>
=> int2 = 6 : <type 'int'>
==================================================
avl0.display()                                                          # STEP 61
ACTION: avl0.display() 
avl0 = <avlbug2.AVLTree instance at 0x102f6f488> : <type 'instance'>
avl_REF0 = set([1, 3, 7, 9, 14, 16, 18]) : <type 'set'>
  7 [3:-1]
-- < 3 [1:1]
---- < 1 [0:0] L
-- > 14 [2:-1]
---- < 9 [0:0] L
---- > 18 [1:1]
------ < 16 [0:0] L
REFERENCE ACTION: print(avl_REF0) 
set([1, 3, 7, 9, 14, 16, 18])
==================================================
result = avl2.find(int3)                                                # STEP 62
ACTION: result = avl2.find(int3) 
int3 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102e84e18> : <type 'instance'>
avl_REF2 = set([17, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
result = avl0.inorder()                                                 # STEP 63
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x102f6f488> : <type 'instance'>
avl_REF0 = set([1, 3, 7, 9, 14, 16, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl2.insert(int2)                                                       # STEP 64
ACTION: avl2.insert(int2) 
int2 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102e84e18> : <type 'instance'>
avl_REF2 = set([17, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
int0 = 9                                                                # STEP 65
ACTION: int0 = 9 
int0 = 9 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 66
ACTION: avl0.insert(int0) 
int0 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102f6f488> : <type 'instance'>
avl_REF0 = set([1, 3, 7, 9, 14, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
result = avl2.inorder()                                                 # STEP 67
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x102e84e18> : <type 'instance'>
avl_REF2 = set([17, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int1 = 16                                                               # STEP 68
ACTION: int1 = 16 
int1 = 16 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 69
ACTION: avl0.delete(int0) 
int0 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102f6f488> : <type 'instance'>
avl_REF0 = set([1, 3, 7, 9, 14, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([1, 3, 7, 14, 16, 18]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102ed8368>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #4 STEP #0 (0:00:31.672877) Mon May  1 18:55:50 2017 [ 159 stmts 210 branches ]
  17 [2:0]
-- < 5 [1:0]
---- < 1 [0:0] L
---- > 9 [0:0] L
-- > 18 [1:-1]
---- > 19 [0:0] L
set([1, 5, 9, 17, 18, 19])
  9 [2:0]
-- < 1 [1:-1]
---- > 4 [0:0] L
-- > 17 [1:0]
---- < 11 [0:0] L
---- > 18 [0:0] L
set([1, 4, 9, 11, 17, 18])
  9 [2:0]
-- < 1 [1:-1]
---- > 4 [0:0] L
-- > 17 [1:0]
---- < 11 [0:0] L
---- > 18 [0:0] L
set([1, 4, 9, 11, 17, 18])
  9 [2:0]
-- < 1 [1:-1]
---- > 4 [0:0] L
-- > 17 [1:0]
---- < 11 [0:0] L
---- > 18 [0:0] L
set([1, 4, 9, 11, 17, 18])
  9 [2:0]
-- < 1 [1:-1]
---- > 4 [0:0] L
-- > 17 [1:0]
---- < 11 [0:0] L
---- > 18 [0:0] L
set([1, 4, 9, 11, 17, 18])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1025fc368>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
Original test has 50 steps

SAVING TEST AS failure.62602.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 19                                                                # STEP 0
ACTION: int1 = 19 
int1 = None : <type 'NoneType'>
=> int1 = 19 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 1
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x102779a28> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl2.inorder()                                                  # STEP 2
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x102779a28> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int3 = 6                                                                 # STEP 3
ACTION: int3 = 6 
int3 = None : <type 'NoneType'>
=> int3 = 6 : <type 'int'>
==================================================
avl2.insert(int1)                                                        # STEP 4
ACTION: avl2.insert(int1) 
int1 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102779a28> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([19]) : <type 'set'>
==================================================
int1 = 7                                                                 # STEP 5
ACTION: int1 = 7 
int1 = 19 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
result = avl2.find(int1)                                                 # STEP 6
ACTION: result = avl2.find(int1) 
int1 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102779a28> : <type 'instance'>
avl_REF2 = set([19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int1 = 18                                                                # STEP 7
ACTION: int1 = 18 
int1 = 7 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
int0 = 3                                                                 # STEP 8
ACTION: int0 = 3 
int0 = None : <type 'NoneType'>
=> int0 = 3 : <type 'int'>
==================================================
result = avl2.find(int3)                                                 # STEP 9
ACTION: result = avl2.find(int3) 
int3 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102779a28> : <type 'instance'>
avl_REF2 = set([19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl2.delete(int0)                                                       # STEP 10
ACTION: avl2.delete(int0) 
int0 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102779a28> : <type 'instance'>
avl_REF2 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int3 = 2                                                                # STEP 11
ACTION: int3 = 2 
int3 = 6 : <type 'int'>
=> int3 = 2 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 12
ACTION: avl2.delete(int0) 
int0 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102779a28> : <type 'instance'>
avl_REF2 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.delete(int0)                                                       # STEP 13
ACTION: avl2.delete(int0) 
int0 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102779a28> : <type 'instance'>
avl_REF2 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2 == avl2                                                            # STEP 14
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x102779a28> : <type 'instance'>
avl_REF2 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
int2 = 8                                                                # STEP 15
ACTION: int2 = 8 
int2 = None : <type 'NoneType'>
=> int2 = 8 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 16
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x102779a28> : <type 'instance'>
avl_REF2 = set([19]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int0)                                                       # STEP 17
ACTION: avl2.delete(int0) 
int0 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102779a28> : <type 'instance'>
avl_REF2 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.delete(int1)                                                       # STEP 18
ACTION: avl2.delete(int1) 
int1 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102779a28> : <type 'instance'>
avl_REF2 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int3)                                                       # STEP 19
ACTION: avl2.insert(int3) 
int3 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102779a28> : <type 'instance'>
avl_REF2 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([2, 19]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 20
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x102779a28> : <type 'instance'>
avl_REF2 = set([2, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int1)                                                       # STEP 21
ACTION: avl2.insert(int1) 
int1 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102779a28> : <type 'instance'>
avl_REF2 = set([2, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([2, 19, 18]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 22
ACTION: avl2.insert(int2) 
int2 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102779a28> : <type 'instance'>
avl_REF2 = set([2, 19, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([8, 2, 19, 18]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 23
ACTION: avl2.insert(int3) 
int3 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102779a28> : <type 'instance'>
avl_REF2 = set([8, 2, 19, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
int2 = 10                                                               # STEP 24
ACTION: int2 = 10 
int2 = 8 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 25
ACTION: avl2.delete(int0) 
int0 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102779a28> : <type 'instance'>
avl_REF2 = set([8, 2, 19, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.delete(int0)                                                       # STEP 26
ACTION: avl2.delete(int0) 
int0 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102779a28> : <type 'instance'>
avl_REF2 = set([8, 2, 19, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.insert(int1)                                                       # STEP 27
ACTION: avl2.insert(int1) 
int1 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102779a28> : <type 'instance'>
avl_REF2 = set([8, 2, 19, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
int0 = 4                                                                # STEP 28
ACTION: int0 = 4 
int0 = 3 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 29
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x102779a28> : <type 'instance'>
avl_REF2 = set([8, 2, 19, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int3)                                                       # STEP 30
ACTION: avl2.insert(int3) 
int3 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102779a28> : <type 'instance'>
avl_REF2 = set([8, 2, 19, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
result = avl2.find(int0)                                                # STEP 31
ACTION: result = avl2.find(int0) 
int0 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102779a28> : <type 'instance'>
avl_REF2 = set([8, 2, 19, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
int0 = 6                                                                # STEP 32
ACTION: int0 = 6 
int0 = 4 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 33
ACTION: avl2.insert(int2) 
int2 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102779a28> : <type 'instance'>
avl_REF2 = set([8, 2, 19, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([8, 10, 2, 19, 18]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 34
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x102779a28> : <type 'instance'>
avl_REF2 = set([8, 10, 2, 19, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl2.find(int3)                                                # STEP 35
ACTION: result = avl2.find(int3) 
int3 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102779a28> : <type 'instance'>
avl_REF2 = set([8, 10, 2, 19, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
int3 = 13                                                               # STEP 36
ACTION: int3 = 13 
int3 = 2 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 37
ACTION: avl2.insert(int2) 
int2 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102779a28> : <type 'instance'>
avl_REF2 = set([8, 10, 2, 19, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl2.insert(int1)                                                       # STEP 38
ACTION: avl2.insert(int1) 
int1 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102779a28> : <type 'instance'>
avl_REF2 = set([8, 10, 2, 19, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl2.insert(int0)                                                       # STEP 39
ACTION: avl2.insert(int0) 
int0 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102779a28> : <type 'instance'>
avl_REF2 = set([8, 10, 2, 19, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([2, 6, 8, 10, 18, 19]) : <type 'set'>
==================================================
int1 = 7                                                                # STEP 40
ACTION: int1 = 7 
int1 = 18 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 41
ACTION: avl2.insert(int3) 
int3 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102779a28> : <type 'instance'>
avl_REF2 = set([2, 6, 8, 10, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([2, 6, 8, 10, 13, 18, 19]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 42
ACTION: avl2.delete(int2) 
int2 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102779a28> : <type 'instance'>
avl_REF2 = set([2, 6, 8, 10, 13, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([2, 6, 8, 13, 18, 19]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 43
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x102779a28> : <type 'instance'>
avl_REF2 = set([2, 6, 8, 13, 18, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl2.find(int1)                                                # STEP 44
ACTION: result = avl2.find(int1) 
int1 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102779a28> : <type 'instance'>
avl_REF2 = set([2, 6, 8, 13, 18, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl2.delete(int0)                                                       # STEP 45
ACTION: avl2.delete(int0) 
int0 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102779a28> : <type 'instance'>
avl_REF2 = set([2, 6, 8, 13, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([2, 8, 13, 18, 19]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 46
ACTION: avl2.insert(int2) 
int2 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102779a28> : <type 'instance'>
avl_REF2 = set([2, 8, 13, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([2, 8, 10, 13, 18, 19]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 47
ACTION: avl2.insert(int1) 
int1 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102779a28> : <type 'instance'>
avl_REF2 = set([2, 8, 10, 13, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([2, 7, 8, 10, 13, 18, 19]) : <type 'set'>
==================================================
int2 = 13                                                               # STEP 48
ACTION: int2 = 13 
int2 = 10 : <type 'int'>
=> int2 = 13 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 49
ACTION: avl2.delete(int2) 
int2 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102779a28> : <type 'instance'>
avl_REF2 = set([2, 7, 8, 10, 13, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([2, 7, 8, 10, 18, 19]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10276e170>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
  10 [2:0]
-- < 6 [1:0]
---- < 2 [0:0] L
---- > 9 [0:0] L
-- > 14 [1:1]
---- < 12 [0:0] L
set([2, 6, 9, 10, 12, 14])
  10 [3:1]
-- < 6 [2:-1]
---- < 2 [0:0] L
---- > 9 [1:1]
------ < 7 [0:0] L
-- > 14 [1:0]
---- < 12 [0:0] L
---- > 16 [0:0] L
set([2, 6, 7, 9, 10, 12, 14, 16])
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 2
STOPPING TESTING DUE TO TIMEOUT
8.38653511317 PERCENT COVERED
60.2069549561 TOTAL RUNTIME
7 EXECUTED
522 TOTAL TEST OPERATIONS
24.3070561886 TIME SPENT EXECUTING TEST OPERATIONS
0.0538847446442 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
24.399740696 TIME SPENT CHECKING PROPERTIES
48.7067968845 TOTAL TIME SPENT RUNNING SUT
0.00387001037598 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
2 FAILED
0 REPEATS OF FAILURES
2 ACTUAL DISTINCT FAILURES

FAILURE 0
int3 = 1                                                                 # STEP 0
int1 = 3                                                                 # STEP 1
int0 = 3                                                                 # STEP 2
int2 = 18                                                                # STEP 3
avl0 = avl.AVLTree()                                                     # STEP 4
avl0.insert(int2)                                                        # STEP 5
avl0.insert(int2)                                                        # STEP 6
avl0.insert(int1)                                                        # STEP 7
avl0.delete(int0)                                                        # STEP 8
int2 = 16                                                                # STEP 9
avl0.delete(int1)                                                       # STEP 10
avl0.insert(int0)                                                       # STEP 11
int0 = 7                                                                # STEP 12
int1 = 15                                                               # STEP 13
avl0.insert(int0)                                                       # STEP 14
int0 = 9                                                                # STEP 15
avl0.delete(int2)                                                       # STEP 16
int2 = 14                                                               # STEP 17
result = avl0.find(int3)                                                # STEP 18
int3 = 6                                                                # STEP 19
avl0.insert(int2)                                                       # STEP 20
int2 = 1                                                                # STEP 21
avl0.delete(int2)                                                       # STEP 22
int2 = 14                                                               # STEP 23
avl0.delete(int1)                                                       # STEP 24
avl0.delete(int2)                                                       # STEP 25
avl0.insert(int2)                                                       # STEP 26
result = avl0.inorder()                                                 # STEP 27
avl0.insert(int0)                                                       # STEP 28
avl2 = avl.AVLTree()                                                    # STEP 29
avl2.delete(int0)                                                       # STEP 30
avl2.delete(int2)                                                       # STEP 31
avl0.insert(int0)                                                       # STEP 32
avl2.insert(int3)                                                       # STEP 33
avl0.insert(int0)                                                       # STEP 34
avl2 == avl2                                                            # STEP 35
int1 = 1                                                                # STEP 36
avl0.delete(int3)                                                       # STEP 37
avl2.delete(int0)                                                       # STEP 38
avl2.delete(int0)                                                       # STEP 39
avl2.insert(int0)                                                       # STEP 40
avl2.insert(int0)                                                       # STEP 41
int3 = 17                                                               # STEP 42
avl2.delete(int0)                                                       # STEP 43
avl2.delete(int1)                                                       # STEP 44
avl2.delete(int2)                                                       # STEP 45
result = avl2.inorder()                                                 # STEP 46
avl2.insert(int1)                                                       # STEP 47
avl2.insert(int0)                                                       # STEP 48
avl0.insert(int1)                                                       # STEP 49
avl2.delete(int1)                                                       # STEP 50
avl2.delete(int0)                                                       # STEP 51
result = avl0.inorder()                                                 # STEP 52
avl2.delete(int2)                                                       # STEP 53
avl2.insert(int3)                                                       # STEP 54
int1 = 16                                                               # STEP 55
avl2.delete(int1)                                                       # STEP 56
avl2.insert(int3)                                                       # STEP 57
avl0.insert(int1)                                                       # STEP 58
avl0.insert(int2)                                                       # STEP 59
int2 = 6                                                                # STEP 60
avl0.display()                                                          # STEP 61
result = avl2.find(int3)                                                # STEP 62
result = avl0.inorder()                                                 # STEP 63
avl2.insert(int2)                                                       # STEP 64
int0 = 9                                                                # STEP 65
avl0.insert(int0)                                                       # STEP 66
result = avl2.inorder()                                                 # STEP 67
int1 = 16                                                               # STEP 68
avl0.delete(int0)                                                       # STEP 69
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102ed8368>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE 1
int1 = 19                                                                # STEP 0
avl2 = avl.AVLTree()                                                     # STEP 1
result = avl2.inorder()                                                  # STEP 2
int3 = 6                                                                 # STEP 3
avl2.insert(int1)                                                        # STEP 4
int1 = 7                                                                 # STEP 5
result = avl2.find(int1)                                                 # STEP 6
int1 = 18                                                                # STEP 7
int0 = 3                                                                 # STEP 8
result = avl2.find(int3)                                                 # STEP 9
avl2.delete(int0)                                                       # STEP 10
int3 = 2                                                                # STEP 11
avl2.delete(int0)                                                       # STEP 12
avl2.delete(int0)                                                       # STEP 13
avl2 == avl2                                                            # STEP 14
int2 = 8                                                                # STEP 15
result = avl2.inorder()                                                 # STEP 16
avl2.delete(int0)                                                       # STEP 17
avl2.delete(int1)                                                       # STEP 18
avl2.insert(int3)                                                       # STEP 19
result = avl2.inorder()                                                 # STEP 20
avl2.insert(int1)                                                       # STEP 21
avl2.insert(int2)                                                       # STEP 22
avl2.insert(int3)                                                       # STEP 23
int2 = 10                                                               # STEP 24
avl2.delete(int0)                                                       # STEP 25
avl2.delete(int0)                                                       # STEP 26
avl2.insert(int1)                                                       # STEP 27
int0 = 4                                                                # STEP 28
result = avl2.inorder()                                                 # STEP 29
avl2.insert(int3)                                                       # STEP 30
result = avl2.find(int0)                                                # STEP 31
int0 = 6                                                                # STEP 32
avl2.insert(int2)                                                       # STEP 33
result = avl2.inorder()                                                 # STEP 34
result = avl2.find(int3)                                                # STEP 35
int3 = 13                                                               # STEP 36
avl2.insert(int2)                                                       # STEP 37
avl2.insert(int1)                                                       # STEP 38
avl2.insert(int0)                                                       # STEP 39
int1 = 7                                                                # STEP 40
avl2.insert(int3)                                                       # STEP 41
avl2.delete(int2)                                                       # STEP 42
result = avl2.inorder()                                                 # STEP 43
result = avl2.find(int1)                                                # STEP 44
avl2.delete(int0)                                                       # STEP 45
avl2.insert(int2)                                                       # STEP 46
avl2.insert(int1)                                                       # STEP 47
int2 = 13                                                               # STEP 48
avl2.delete(int2)                                                       # STEP 49
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10276e170>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
220 BRANCHES COVERED
164 STATEMENTS COVERED

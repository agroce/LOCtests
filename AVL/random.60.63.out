Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.468.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  14 [2:0]
-- < 11 [1:0]
---- < 7 [0:0] L
---- > 12 [0:0] L
-- > 19 [1:1]
---- < 18 [0:0] L
set([7, 11, 12, 14, 18, 19])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1037d79e0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 68 steps

SAVING TEST AS failure.468.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 9                                                                 # STEP 0
ACTION: int1 = 9 
int1 = None : <type 'NoneType'>
=> int1 = 9 : <type 'int'>
==================================================
int0 = 11                                                                # STEP 1
ACTION: int0 = 11 
int0 = None : <type 'NoneType'>
=> int0 = 11 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 2
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x10335e830> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int3 = 19                                                                # STEP 3
ACTION: int3 = 19 
int3 = None : <type 'NoneType'>
=> int3 = 19 : <type 'int'>
==================================================
int2 = 12                                                                # STEP 4
ACTION: int2 = 12 
int2 = None : <type 'NoneType'>
=> int2 = 12 : <type 'int'>
==================================================
avl2.delete(int0)                                                        # STEP 5
ACTION: avl2.delete(int0) 
int0 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10335e830> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.insert(int2)                                                        # STEP 6
ACTION: avl2.insert(int2) 
int2 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10335e830> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([12]) : <type 'set'>
==================================================
int0 = 7                                                                 # STEP 7
ACTION: int0 = 7 
int0 = 11 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
int2 = 3                                                                 # STEP 8
ACTION: int2 = 3 
int2 = 12 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
avl2.insert(int2)                                                        # STEP 9
ACTION: avl2.insert(int2) 
int2 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10335e830> : <type 'instance'>
avl_REF2 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([3, 12]) : <type 'set'>
==================================================
result = avl2.find(int0)                                                # STEP 10
ACTION: result = avl2.find(int0) 
int0 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10335e830> : <type 'instance'>
avl_REF2 = set([3, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
int2 = 18                                                               # STEP 11
ACTION: int2 = 18 
int2 = 3 : <type 'int'>
=> int2 = 18 : <type 'int'>
==================================================
result = avl2.find(int2)                                                # STEP 12
ACTION: result = avl2.find(int2) 
int2 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10335e830> : <type 'instance'>
avl_REF2 = set([3, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int2 = 17                                                               # STEP 13
ACTION: int2 = 17 
int2 = 18 : <type 'int'>
=> int2 = 17 : <type 'int'>
==================================================
int0 = 2                                                                # STEP 14
ACTION: int0 = 2 
int0 = 7 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 15
ACTION: avl2.insert(int3) 
int3 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10335e830> : <type 'instance'>
avl_REF2 = set([3, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([19, 3, 12]) : <type 'set'>
==================================================
int3 = 1                                                                # STEP 16
ACTION: int3 = 1 
int3 = 19 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
result = avl2.find(int1)                                                # STEP 17
ACTION: result = avl2.find(int1) 
int1 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10335e830> : <type 'instance'>
avl_REF2 = set([19, 3, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl2.insert(int3)                                                       # STEP 18
ACTION: avl2.insert(int3) 
int3 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10335e830> : <type 'instance'>
avl_REF2 = set([19, 3, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([19, 1, 3, 12]) : <type 'set'>
==================================================
int1 = 7                                                                # STEP 19
ACTION: int1 = 7 
int1 = 9 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 20
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x10335e830> : <type 'instance'>
avl_REF2 = set([19, 1, 3, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl2.find(int3)                                                # STEP 21
ACTION: result = avl2.find(int3) 
int3 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10335e830> : <type 'instance'>
avl_REF2 = set([19, 1, 3, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
int3 = 17                                                               # STEP 22
ACTION: int3 = 17 
int3 = 1 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
avl2 == avl2                                                            # STEP 23
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x10335e830> : <type 'instance'>
avl_REF2 = set([19, 1, 3, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl2.delete(int3)                                                       # STEP 24
ACTION: avl2.delete(int3) 
int3 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10335e830> : <type 'instance'>
avl_REF2 = set([19, 1, 3, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.insert(int1)                                                       # STEP 25
ACTION: avl2.insert(int1) 
int1 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10335e830> : <type 'instance'>
avl_REF2 = set([19, 1, 3, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([19, 1, 3, 12, 7]) : <type 'set'>
==================================================
result = avl2.find(int2)                                                # STEP 26
ACTION: result = avl2.find(int2) 
int2 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10335e830> : <type 'instance'>
avl_REF2 = set([19, 1, 3, 12, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int2 = 9                                                                # STEP 27
ACTION: int2 = 9 
int2 = 17 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
int3 = 6                                                                # STEP 28
ACTION: int3 = 6 
int3 = 17 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
int1 = 15                                                               # STEP 29
ACTION: int1 = 15 
int1 = 7 : <type 'int'>
=> int1 = 15 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 30
ACTION: avl2.insert(int1) 
int1 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10335e830> : <type 'instance'>
avl_REF2 = set([19, 1, 3, 12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([1, 3, 7, 12, 15, 19]) : <type 'set'>
==================================================
int1 = 4                                                                # STEP 31
ACTION: int1 = 4 
int1 = 15 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
result = avl2.find(int2)                                                # STEP 32
ACTION: result = avl2.find(int2) 
int2 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10335e830> : <type 'instance'>
avl_REF2 = set([1, 3, 7, 12, 15, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl1 = avl.AVLTree()                                                    # STEP 33
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x103785f80> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
result = avl2.find(int0)                                                # STEP 34
ACTION: result = avl2.find(int0) 
int0 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10335e830> : <type 'instance'>
avl_REF2 = set([1, 3, 7, 12, 15, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
int2 = 5                                                                # STEP 35
ACTION: int2 = 5 
int2 = 9 : <type 'int'>
=> int2 = 5 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 36
ACTION: avl2.insert(int1) 
int1 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10335e830> : <type 'instance'>
avl_REF2 = set([1, 3, 7, 12, 15, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([1, 3, 4, 7, 12, 15, 19]) : <type 'set'>
==================================================
int1 = 6                                                                # STEP 37
ACTION: int1 = 6 
int1 = 4 : <type 'int'>
=> int1 = 6 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 38
ACTION: avl1.insert(int3) 
int3 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103785f80> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([6]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 39
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x10335e830> : <type 'instance'>
avl_REF2 = set([1, 3, 4, 7, 12, 15, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl1.insert(int3)                                                       # STEP 40
ACTION: avl1.insert(int3) 
int3 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103785f80> : <type 'instance'>
avl_REF1 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
result = avl2.find(int2)                                                # STEP 41
ACTION: result = avl2.find(int2) 
int2 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10335e830> : <type 'instance'>
avl_REF2 = set([1, 3, 4, 7, 12, 15, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int3 = 4                                                                # STEP 42
ACTION: int3 = 4 
int3 = 6 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
int0 = 19                                                               # STEP 43
ACTION: int0 = 19 
int0 = 2 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 44
ACTION: avl1.insert(int3) 
int3 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103785f80> : <type 'instance'>
avl_REF1 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([4, 6]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 45
ACTION: avl1.insert(int2) 
int2 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103785f80> : <type 'instance'>
avl_REF1 = set([4, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([4, 5, 6]) : <type 'set'>
==================================================
int2 = 16                                                               # STEP 46
ACTION: int2 = 16 
int2 = 5 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 47
ACTION: avl2.delete(int3) 
int3 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10335e830> : <type 'instance'>
avl_REF2 = set([1, 3, 4, 7, 12, 15, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([1, 3, 7, 12, 15, 19]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 48
ACTION: avl2.insert(int2) 
int2 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10335e830> : <type 'instance'>
avl_REF2 = set([1, 3, 7, 12, 15, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([1, 3, 7, 12, 15, 16, 19]) : <type 'set'>
==================================================
result = avl1.find(int0)                                                # STEP 49
ACTION: result = avl1.find(int0) 
int0 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103785f80> : <type 'instance'>
avl_REF1 = set([4, 5, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
int3 = 13                                                               # STEP 50
ACTION: int3 = 13 
int3 = 4 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
int2 = 15                                                               # STEP 51
ACTION: int2 = 15 
int2 = 16 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
result = avl1.find(int0)                                                # STEP 52
ACTION: result = avl1.find(int0) 
int0 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103785f80> : <type 'instance'>
avl_REF1 = set([4, 5, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl2.insert(int3)                                                       # STEP 53
ACTION: avl2.insert(int3) 
int3 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10335e830> : <type 'instance'>
avl_REF2 = set([1, 3, 7, 12, 15, 16, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([1, 3, 7, 12, 13, 15, 16, 19]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 54
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x10335e830> : <type 'instance'>
avl_REF2 = set([1, 3, 7, 12, 13, 15, 16, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int0 = 9                                                                # STEP 55
ACTION: int0 = 9 
int0 = 19 : <type 'int'>
=> int0 = 9 : <type 'int'>
==================================================
int3 = 20                                                               # STEP 56
ACTION: int3 = 20 
int3 = 13 : <type 'int'>
=> int3 = 20 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 57
ACTION: avl1.insert(int3) 
int3 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103785f80> : <type 'instance'>
avl_REF1 = set([4, 5, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([20, 4, 5, 6]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 58
ACTION: avl2.delete(int3) 
int3 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10335e830> : <type 'instance'>
avl_REF2 = set([1, 3, 7, 12, 13, 15, 16, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl1.insert(int0)                                                       # STEP 59
ACTION: avl1.insert(int0) 
int0 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103785f80> : <type 'instance'>
avl_REF1 = set([20, 4, 5, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([20, 4, 5, 6, 9]) : <type 'set'>
==================================================
int3 = 16                                                               # STEP 60
ACTION: int3 = 16 
int3 = 20 : <type 'int'>
=> int3 = 16 : <type 'int'>
==================================================
int0 = 2                                                                # STEP 61
ACTION: int0 = 2 
int0 = 9 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
result = avl2.find(int2)                                                # STEP 62
ACTION: result = avl2.find(int2) 
int2 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10335e830> : <type 'instance'>
avl_REF2 = set([1, 3, 7, 12, 13, 15, 16, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int2 = 6                                                                # STEP 63
ACTION: int2 = 6 
int2 = 15 : <type 'int'>
=> int2 = 6 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 64
ACTION: avl1.insert(int1) 
int1 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103785f80> : <type 'instance'>
avl_REF1 = set([20, 4, 5, 6, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl1.delete(int1)                                                       # STEP 65
ACTION: avl1.delete(int1) 
int1 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103785f80> : <type 'instance'>
avl_REF1 = set([20, 4, 5, 6, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([20, 4, 5, 9]) : <type 'set'>
==================================================
avl1 == avl2                                                            # STEP 66
ACTION: avl1 == avl2 
avl1 = <avl.AVLTree instance at 0x103785f80> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x10335e830> : <type 'instance'>
avl_REF1 = set([20, 4, 5, 9]) : <type 'set'>
avl_REF2 = set([1, 3, 7, 12, 13, 15, 16, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
avl2.delete(int3)                                                       # STEP 67
ACTION: avl2.delete(int3) 
int3 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10335e830> : <type 'instance'>
avl_REF2 = set([1, 3, 7, 12, 13, 15, 16, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([1, 3, 7, 12, 13, 15, 19]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10363bd88>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #4 STEP #24 (0:00:30.083872) Fri Apr 28 06:24:36 2017 [ 161 stmts 214 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103614878>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 99 steps

SAVING TEST AS failure.468.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 4                                                                 # STEP 0
ACTION: int1 = 4 
int1 = None : <type 'NoneType'>
=> int1 = 4 : <type 'int'>
==================================================
int2 = 19                                                                # STEP 1
ACTION: int2 = 19 
int2 = None : <type 'NoneType'>
=> int2 = 19 : <type 'int'>
==================================================
int3 = 3                                                                 # STEP 2
ACTION: int3 = 3 
int3 = None : <type 'NoneType'>
=> int3 = 3 : <type 'int'>
==================================================
int0 = 4                                                                 # STEP 3
ACTION: int0 = 4 
int0 = None : <type 'NoneType'>
=> int0 = 4 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x103614bd8> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 5
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x103614ef0> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl1.delete(int2)                                                        # STEP 6
ACTION: avl1.delete(int2) 
int2 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103614bd8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
result = avl0.find(int0)                                                 # STEP 7
ACTION: result = avl0.find(int0) 
int0 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103614ef0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
avl0.insert(int3)                                                        # STEP 8
ACTION: avl0.insert(int3) 
int3 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103614ef0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([3]) : <type 'set'>
==================================================
avl0 == avl1                                                             # STEP 9
ACTION: avl0 == avl1 
avl0 = <avl.AVLTree instance at 0x103614ef0> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x103614bd8> : <type 'instance'>
avl_REF0 = set([3]) : <type 'set'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF1 
==================================================
avl0.insert(int0)                                                       # STEP 10
ACTION: avl0.insert(int0) 
int0 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103614ef0> : <type 'instance'>
avl_REF0 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([3, 4]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 11
ACTION: avl1.insert(int0) 
int0 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103614bd8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([4]) : <type 'set'>
==================================================
result = avl1.find(int0)                                                # STEP 12
ACTION: result = avl1.find(int0) 
int0 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103614bd8> : <type 'instance'>
avl_REF1 = set([4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
int0 = 18                                                               # STEP 13
ACTION: int0 = 18 
int0 = 4 : <type 'int'>
=> int0 = 18 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 14
ACTION: avl0.delete(int0) 
int0 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103614ef0> : <type 'instance'>
avl_REF0 = set([3, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl1.insert(int2)                                                       # STEP 15
ACTION: avl1.insert(int2) 
int2 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103614bd8> : <type 'instance'>
avl_REF1 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([19, 4]) : <type 'set'>
==================================================
int0 = 3                                                                # STEP 16
ACTION: int0 = 3 
int0 = 18 : <type 'int'>
=> int0 = 3 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 17
ACTION: avl0.delete(int2) 
int2 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103614ef0> : <type 'instance'>
avl_REF0 = set([3, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int3 = 12                                                               # STEP 18
ACTION: int3 = 12 
int3 = 3 : <type 'int'>
=> int3 = 12 : <type 'int'>
==================================================
int2 = 12                                                               # STEP 19
ACTION: int2 = 12 
int2 = 19 : <type 'int'>
=> int2 = 12 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 20
ACTION: avl1.insert(int0) 
int0 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103614bd8> : <type 'instance'>
avl_REF1 = set([19, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([3, 19, 4]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 21
ACTION: avl1.insert(int3) 
int3 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103614bd8> : <type 'instance'>
avl_REF1 = set([3, 19, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([3, 12, 19, 4]) : <type 'set'>
==================================================
int3 = 19                                                               # STEP 22
ACTION: int3 = 19 
int3 = 12 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
int0 = 20                                                               # STEP 23
ACTION: int0 = 20 
int0 = 3 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 24
ACTION: avl0.delete(int2) 
int2 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103614ef0> : <type 'instance'>
avl_REF0 = set([3, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int2 = 20                                                               # STEP 25
ACTION: int2 = 20 
int2 = 12 : <type 'int'>
=> int2 = 20 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 26
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x103614bd8> : <type 'instance'>
avl_REF1 = set([3, 12, 19, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
result = avl1.find(int3)                                                # STEP 27
ACTION: result = avl1.find(int3) 
int3 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103614bd8> : <type 'instance'>
avl_REF1 = set([3, 12, 19, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
int3 = 2                                                                # STEP 28
ACTION: int3 = 2 
int3 = 19 : <type 'int'>
=> int3 = 2 : <type 'int'>
==================================================
result = avl0.find(int0)                                                # STEP 29
ACTION: result = avl0.find(int0) 
int0 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103614ef0> : <type 'instance'>
avl_REF0 = set([3, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
avl0.insert(int0)                                                       # STEP 30
ACTION: avl0.insert(int0) 
int0 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103614ef0> : <type 'instance'>
avl_REF0 = set([3, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([20, 3, 4]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 31
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x103614ef0> : <type 'instance'>
avl_REF0 = set([20, 3, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl1.delete(int0)                                                       # STEP 32
ACTION: avl1.delete(int0) 
int0 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103614bd8> : <type 'instance'>
avl_REF1 = set([3, 12, 19, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1 == avl1                                                            # STEP 33
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x103614bd8> : <type 'instance'>
avl_REF1 = set([3, 12, 19, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl0 = avl.AVLTree()                                                    # STEP 34
ACTION: avl0 = avl.AVLTree() 
avl0 = <avl.AVLTree instance at 0x103614ef0> : <type 'instance'>
avl_REF0 = set([20, 3, 4]) : <type 'set'>
=> avl0 = <avl.AVLTree instance at 0x10482b050> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 35
ACTION: avl1.delete(int0) 
int0 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103614bd8> : <type 'instance'>
avl_REF1 = set([3, 12, 19, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
result = avl1.find(int0)                                                # STEP 36
ACTION: result = avl1.find(int0) 
int0 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103614bd8> : <type 'instance'>
avl_REF1 = set([3, 12, 19, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
result = avl0.inorder()                                                 # STEP 37
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x10482b050> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
result = avl0.find(int0)                                                # STEP 38
ACTION: result = avl0.find(int0) 
int0 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10482b050> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
int0 = 12                                                               # STEP 39
ACTION: int0 = 12 
int0 = 20 : <type 'int'>
=> int0 = 12 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 40
ACTION: avl0 = avl.AVLTree() 
avl0 = <avl.AVLTree instance at 0x10482b050> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
=> avl0 = <avl.AVLTree instance at 0x10482bd40> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
==================================================
avl1.insert(int0)                                                       # STEP 41
ACTION: avl1.insert(int0) 
int0 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103614bd8> : <type 'instance'>
avl_REF1 = set([3, 12, 19, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl0.insert(int0)                                                       # STEP 42
ACTION: avl0.insert(int0) 
int0 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10482bd40> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([12]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 43
ACTION: avl1.insert(int0) 
int0 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103614bd8> : <type 'instance'>
avl_REF1 = set([3, 12, 19, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
result = avl1.find(int1)                                                # STEP 44
ACTION: result = avl1.find(int1) 
int1 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103614bd8> : <type 'instance'>
avl_REF1 = set([3, 12, 19, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl1.insert(int3)                                                       # STEP 45
ACTION: avl1.insert(int3) 
int3 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103614bd8> : <type 'instance'>
avl_REF1 = set([3, 12, 19, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([3, 12, 2, 19, 4]) : <type 'set'>
==================================================
int3 = 12                                                               # STEP 46
ACTION: int3 = 12 
int3 = 2 : <type 'int'>
=> int3 = 12 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 47
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x103604170> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int0 = 19                                                               # STEP 48
ACTION: int0 = 19 
int0 = 12 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 49
ACTION: avl1.delete(int0) 
int0 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103614bd8> : <type 'instance'>
avl_REF1 = set([3, 12, 2, 19, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([3, 12, 2, 4]) : <type 'set'>
==================================================
avl2 == avl0                                                            # STEP 50
ACTION: avl2 == avl0 
avl2 = <avl.AVLTree instance at 0x103604170> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x10482bd40> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
avl_REF0 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF0 
==================================================
int1 = 12                                                               # STEP 51
ACTION: int1 = 12 
int1 = 4 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 52
ACTION: avl1.insert(int3) 
int3 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103614bd8> : <type 'instance'>
avl_REF1 = set([3, 12, 2, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
int0 = 17                                                               # STEP 53
ACTION: int0 = 17 
int0 = 19 : <type 'int'>
=> int0 = 17 : <type 'int'>
==================================================
int3 = 15                                                               # STEP 54
ACTION: int3 = 15 
int3 = 12 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
result = avl1.find(int1)                                                # STEP 55
ACTION: result = avl1.find(int1) 
int1 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103614bd8> : <type 'instance'>
avl_REF1 = set([3, 12, 2, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int1 = 2                                                                # STEP 56
ACTION: int1 = 2 
int1 = 12 : <type 'int'>
=> int1 = 2 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 57
ACTION: avl0.delete(int3) 
int3 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10482bd40> : <type 'instance'>
avl_REF0 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
result = avl1.find(int2)                                                # STEP 58
ACTION: result = avl1.find(int2) 
int2 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103614bd8> : <type 'instance'>
avl_REF1 = set([3, 12, 2, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
result = avl1.find(int3)                                                # STEP 59
ACTION: result = avl1.find(int3) 
int3 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103614bd8> : <type 'instance'>
avl_REF1 = set([3, 12, 2, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl1.delete(int2)                                                       # STEP 60
ACTION: avl1.delete(int2) 
int2 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103614bd8> : <type 'instance'>
avl_REF1 = set([3, 12, 2, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl2.delete(int2)                                                       # STEP 61
ACTION: avl2.delete(int2) 
int2 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103604170> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl0.delete(int1)                                                       # STEP 62
ACTION: avl0.delete(int1) 
int1 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10482bd40> : <type 'instance'>
avl_REF0 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int2 = 20                                                               # STEP 63
ACTION: int2 = 20 
int2 = 20 : <type 'int'>
==================================================
avl0 == avl1                                                            # STEP 64
ACTION: avl0 == avl1 
avl0 = <avl.AVLTree instance at 0x10482bd40> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x103614bd8> : <type 'instance'>
avl_REF0 = set([12]) : <type 'set'>
avl_REF1 = set([3, 12, 2, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF1 
==================================================
int3 = 4                                                                # STEP 65
ACTION: int3 = 4 
int3 = 15 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 66
ACTION: avl0.insert(int3) 
int3 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10482bd40> : <type 'instance'>
avl_REF0 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([4, 12]) : <type 'set'>
==================================================
int3 = 1                                                                # STEP 67
ACTION: int3 = 1 
int3 = 4 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
result = avl2.find(int2)                                                # STEP 68
ACTION: result = avl2.find(int2) 
int2 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103604170> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl0.insert(int3)                                                       # STEP 69
ACTION: avl0.insert(int3) 
int3 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10482bd40> : <type 'instance'>
avl_REF0 = set([4, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([4, 12, 1]) : <type 'set'>
==================================================
int1 = 4                                                                # STEP 70
ACTION: int1 = 4 
int1 = 2 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 71
ACTION: avl1.insert(int2) 
int2 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103614bd8> : <type 'instance'>
avl_REF1 = set([3, 12, 2, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([2, 3, 4, 12, 20]) : <type 'set'>
==================================================
result = avl0.find(int0)                                                # STEP 72
ACTION: result = avl0.find(int0) 
int0 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10482bd40> : <type 'instance'>
avl_REF0 = set([4, 12, 1]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
int3 = 17                                                               # STEP 73
ACTION: int3 = 17 
int3 = 1 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
int2 = 4                                                                # STEP 74
ACTION: int2 = 4 
int2 = 20 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
result = avl0.find(int1)                                                # STEP 75
ACTION: result = avl0.find(int1) 
int1 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10482bd40> : <type 'instance'>
avl_REF0 = set([4, 12, 1]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
result = avl2.find(int3)                                                # STEP 76
ACTION: result = avl2.find(int3) 
int3 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103604170> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
int1 = 16                                                               # STEP 77
ACTION: int1 = 16 
int1 = 4 : <type 'int'>
=> int1 = 16 : <type 'int'>
==================================================
avl1 == avl2                                                            # STEP 78
ACTION: avl1 == avl2 
avl1 = <avl.AVLTree instance at 0x103614bd8> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x103604170> : <type 'instance'>
avl_REF1 = set([2, 3, 4, 12, 20]) : <type 'set'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
int3 = 15                                                               # STEP 79
ACTION: int3 = 15 
int3 = 17 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 80
ACTION: avl0.delete(int1) 
int1 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10482bd40> : <type 'instance'>
avl_REF0 = set([4, 12, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int1 = 14                                                               # STEP 81
ACTION: int1 = 14 
int1 = 16 : <type 'int'>
=> int1 = 14 : <type 'int'>
==================================================
int0 = 15                                                               # STEP 82
ACTION: int0 = 15 
int0 = 17 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 83
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x10482bd40> : <type 'instance'>
avl_REF0 = set([4, 12, 1]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl1 == avl1                                                            # STEP 84
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x103614bd8> : <type 'instance'>
avl_REF1 = set([2, 3, 4, 12, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.insert(int2)                                                       # STEP 85
ACTION: avl1.insert(int2) 
int2 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103614bd8> : <type 'instance'>
avl_REF1 = set([2, 3, 4, 12, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
result = avl2.find(int3)                                                # STEP 86
ACTION: result = avl2.find(int3) 
int3 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103604170> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl1 == avl2                                                            # STEP 87
ACTION: avl1 == avl2 
avl1 = <avl.AVLTree instance at 0x103614bd8> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x103604170> : <type 'instance'>
avl_REF1 = set([2, 3, 4, 12, 20]) : <type 'set'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
int2 = 13                                                               # STEP 88
ACTION: int2 = 13 
int2 = 4 : <type 'int'>
=> int2 = 13 : <type 'int'>
==================================================
result = avl0.find(int2)                                                # STEP 89
ACTION: result = avl0.find(int2) 
int2 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10482bd40> : <type 'instance'>
avl_REF0 = set([4, 12, 1]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
int3 = 2                                                                # STEP 90
ACTION: int3 = 2 
int3 = 15 : <type 'int'>
=> int3 = 2 : <type 'int'>
==================================================
int2 = 3                                                                # STEP 91
ACTION: int2 = 3 
int2 = 13 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
result = avl0.find(int1)                                                # STEP 92
ACTION: result = avl0.find(int1) 
int1 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10482bd40> : <type 'instance'>
avl_REF0 = set([4, 12, 1]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl0.insert(int1)                                                       # STEP 93
ACTION: avl0.insert(int1) 
int1 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10482bd40> : <type 'instance'>
avl_REF0 = set([4, 12, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([4, 12, 14, 1]) : <type 'set'>
==================================================
int1 = 2                                                                # STEP 94
ACTION: int1 = 2 
int1 = 14 : <type 'int'>
=> int1 = 2 : <type 'int'>
==================================================
avl1 == avl2                                                            # STEP 95
ACTION: avl1 == avl2 
avl1 = <avl.AVLTree instance at 0x103614bd8> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x103604170> : <type 'instance'>
avl_REF1 = set([2, 3, 4, 12, 20]) : <type 'set'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
result = avl1.inorder()                                                 # STEP 96
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x103614bd8> : <type 'instance'>
avl_REF1 = set([2, 3, 4, 12, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.delete(int2)                                                       # STEP 97
ACTION: avl1.delete(int2) 
int2 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103614bd8> : <type 'instance'>
avl_REF1 = set([2, 3, 4, 12, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([2, 4, 12, 20]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 98
ACTION: avl1.delete(int3) 
int3 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103614bd8> : <type 'instance'>
avl_REF1 = set([2, 4, 12, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([4, 12, 20]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10483b710>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 0
STOPPING TESTING DUE TO TIMEOUT
8.6528673227 PERCENT COVERED
60.9542379379 TOTAL RUNTIME
7 EXECUTED
567 TOTAL TEST OPERATIONS
23.4624454975 TIME SPENT EXECUTING TEST OPERATIONS
0.0201685428619 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
23.7002167702 TIME SPENT CHECKING PROPERTIES
47.1626622677 TOTAL TIME SPENT RUNNING SUT
0.0040819644928 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
2 FAILED
0 REPEATS OF FAILURES
2 ACTUAL DISTINCT FAILURES

FAILURE 0
int1 = 9                                                                 # STEP 0
int0 = 11                                                                # STEP 1
avl2 = avl.AVLTree()                                                     # STEP 2
int3 = 19                                                                # STEP 3
int2 = 12                                                                # STEP 4
avl2.delete(int0)                                                        # STEP 5
avl2.insert(int2)                                                        # STEP 6
int0 = 7                                                                 # STEP 7
int2 = 3                                                                 # STEP 8
avl2.insert(int2)                                                        # STEP 9
result = avl2.find(int0)                                                # STEP 10
int2 = 18                                                               # STEP 11
result = avl2.find(int2)                                                # STEP 12
int2 = 17                                                               # STEP 13
int0 = 2                                                                # STEP 14
avl2.insert(int3)                                                       # STEP 15
int3 = 1                                                                # STEP 16
result = avl2.find(int1)                                                # STEP 17
avl2.insert(int3)                                                       # STEP 18
int1 = 7                                                                # STEP 19
result = avl2.inorder()                                                 # STEP 20
result = avl2.find(int3)                                                # STEP 21
int3 = 17                                                               # STEP 22
avl2 == avl2                                                            # STEP 23
avl2.delete(int3)                                                       # STEP 24
avl2.insert(int1)                                                       # STEP 25
result = avl2.find(int2)                                                # STEP 26
int2 = 9                                                                # STEP 27
int3 = 6                                                                # STEP 28
int1 = 15                                                               # STEP 29
avl2.insert(int1)                                                       # STEP 30
int1 = 4                                                                # STEP 31
result = avl2.find(int2)                                                # STEP 32
avl1 = avl.AVLTree()                                                    # STEP 33
result = avl2.find(int0)                                                # STEP 34
int2 = 5                                                                # STEP 35
avl2.insert(int1)                                                       # STEP 36
int1 = 6                                                                # STEP 37
avl1.insert(int3)                                                       # STEP 38
result = avl2.inorder()                                                 # STEP 39
avl1.insert(int3)                                                       # STEP 40
result = avl2.find(int2)                                                # STEP 41
int3 = 4                                                                # STEP 42
int0 = 19                                                               # STEP 43
avl1.insert(int3)                                                       # STEP 44
avl1.insert(int2)                                                       # STEP 45
int2 = 16                                                               # STEP 46
avl2.delete(int3)                                                       # STEP 47
avl2.insert(int2)                                                       # STEP 48
result = avl1.find(int0)                                                # STEP 49
int3 = 13                                                               # STEP 50
int2 = 15                                                               # STEP 51
result = avl1.find(int0)                                                # STEP 52
avl2.insert(int3)                                                       # STEP 53
result = avl2.inorder()                                                 # STEP 54
int0 = 9                                                                # STEP 55
int3 = 20                                                               # STEP 56
avl1.insert(int3)                                                       # STEP 57
avl2.delete(int3)                                                       # STEP 58
avl1.insert(int0)                                                       # STEP 59
int3 = 16                                                               # STEP 60
int0 = 2                                                                # STEP 61
result = avl2.find(int2)                                                # STEP 62
int2 = 6                                                                # STEP 63
avl1.insert(int1)                                                       # STEP 64
avl1.delete(int1)                                                       # STEP 65
avl1 == avl2                                                            # STEP 66
avl2.delete(int3)                                                       # STEP 67
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10363bd88>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE 1
int1 = 4                                                                 # STEP 0
int2 = 19                                                                # STEP 1
int3 = 3                                                                 # STEP 2
int0 = 4                                                                 # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
avl0 = avl.AVLTree()                                                     # STEP 5
avl1.delete(int2)                                                        # STEP 6
result = avl0.find(int0)                                                 # STEP 7
avl0.insert(int3)                                                        # STEP 8
avl0 == avl1                                                             # STEP 9
avl0.insert(int0)                                                       # STEP 10
avl1.insert(int0)                                                       # STEP 11
result = avl1.find(int0)                                                # STEP 12
int0 = 18                                                               # STEP 13
avl0.delete(int0)                                                       # STEP 14
avl1.insert(int2)                                                       # STEP 15
int0 = 3                                                                # STEP 16
avl0.delete(int2)                                                       # STEP 17
int3 = 12                                                               # STEP 18
int2 = 12                                                               # STEP 19
avl1.insert(int0)                                                       # STEP 20
avl1.insert(int3)                                                       # STEP 21
int3 = 19                                                               # STEP 22
int0 = 20                                                               # STEP 23
avl0.delete(int2)                                                       # STEP 24
int2 = 20                                                               # STEP 25
avl1 == avl1                                                            # STEP 26
result = avl1.find(int3)                                                # STEP 27
int3 = 2                                                                # STEP 28
result = avl0.find(int0)                                                # STEP 29
avl0.insert(int0)                                                       # STEP 30
result = avl0.inorder()                                                 # STEP 31
avl1.delete(int0)                                                       # STEP 32
avl1 == avl1                                                            # STEP 33
avl0 = avl.AVLTree()                                                    # STEP 34
avl1.delete(int0)                                                       # STEP 35
result = avl1.find(int0)                                                # STEP 36
result = avl0.inorder()                                                 # STEP 37
result = avl0.find(int0)                                                # STEP 38
int0 = 12                                                               # STEP 39
avl0 = avl.AVLTree()                                                    # STEP 40
avl1.insert(int0)                                                       # STEP 41
avl0.insert(int0)                                                       # STEP 42
avl1.insert(int0)                                                       # STEP 43
result = avl1.find(int1)                                                # STEP 44
avl1.insert(int3)                                                       # STEP 45
int3 = 12                                                               # STEP 46
avl2 = avl.AVLTree()                                                    # STEP 47
int0 = 19                                                               # STEP 48
avl1.delete(int0)                                                       # STEP 49
avl2 == avl0                                                            # STEP 50
int1 = 12                                                               # STEP 51
avl1.insert(int3)                                                       # STEP 52
int0 = 17                                                               # STEP 53
int3 = 15                                                               # STEP 54
result = avl1.find(int1)                                                # STEP 55
int1 = 2                                                                # STEP 56
avl0.delete(int3)                                                       # STEP 57
result = avl1.find(int2)                                                # STEP 58
result = avl1.find(int3)                                                # STEP 59
avl1.delete(int2)                                                       # STEP 60
avl2.delete(int2)                                                       # STEP 61
avl0.delete(int1)                                                       # STEP 62
int2 = 20                                                               # STEP 63
avl0 == avl1                                                            # STEP 64
int3 = 4                                                                # STEP 65
avl0.insert(int3)                                                       # STEP 66
int3 = 1                                                                # STEP 67
result = avl2.find(int2)                                                # STEP 68
avl0.insert(int3)                                                       # STEP 69
int1 = 4                                                                # STEP 70
avl1.insert(int2)                                                       # STEP 71
result = avl0.find(int0)                                                # STEP 72
int3 = 17                                                               # STEP 73
int2 = 4                                                                # STEP 74
result = avl0.find(int1)                                                # STEP 75
result = avl2.find(int3)                                                # STEP 76
int1 = 16                                                               # STEP 77
avl1 == avl2                                                            # STEP 78
int3 = 15                                                               # STEP 79
avl0.delete(int1)                                                       # STEP 80
int1 = 14                                                               # STEP 81
int0 = 15                                                               # STEP 82
result = avl0.inorder()                                                 # STEP 83
avl1 == avl1                                                            # STEP 84
avl1.insert(int2)                                                       # STEP 85
result = avl2.find(int3)                                                # STEP 86
avl1 == avl2                                                            # STEP 87
int2 = 13                                                               # STEP 88
result = avl0.find(int2)                                                # STEP 89
int3 = 2                                                                # STEP 90
int2 = 3                                                                # STEP 91
result = avl0.find(int1)                                                # STEP 92
avl0.insert(int1)                                                       # STEP 93
int1 = 2                                                                # STEP 94
avl1 == avl2                                                            # STEP 95
result = avl1.inorder()                                                 # STEP 96
avl1.delete(int2)                                                       # STEP 97
avl1.delete(int3)                                                       # STEP 98
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10483b710>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
218 BRANCHES COVERED
163 STATEMENTS COVERED

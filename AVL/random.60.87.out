Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.907.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  8 [2:0]
-- < 6 [1:1]
---- < 5 [0:0] L
-- > 17 [1:0]
---- < 14 [0:0] L
---- > 18 [0:0] L
set([5, 6, 8, 14, 17, 18])
TEST #4 STEP #42 (0:00:30.033849) Fri Apr 28 07:37:55 2017 [ 145 stmts 194 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105a05b90>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 41 steps

SAVING TEST AS failure.907.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 11                                                                # STEP 0
ACTION: int1 = 11 
int1 = None : <type 'NoneType'>
=> int1 = 11 : <type 'int'>
==================================================
int2 = 16                                                                # STEP 1
ACTION: int2 = 16 
int2 = None : <type 'NoneType'>
=> int2 = 16 : <type 'int'>
==================================================
int3 = 3                                                                 # STEP 2
ACTION: int3 = 3 
int3 = None : <type 'NoneType'>
=> int3 = 3 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 3
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x1043c9320> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.delete(int3)                                                        # STEP 4
ACTION: avl2.delete(int3) 
int3 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1043c9320> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int3 = 5                                                                 # STEP 5
ACTION: int3 = 5 
int3 = 3 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
int0 = 9                                                                 # STEP 6
ACTION: int0 = 9 
int0 = None : <type 'NoneType'>
=> int0 = 9 : <type 'int'>
==================================================
avl2.insert(int0)                                                        # STEP 7
ACTION: avl2.insert(int0) 
int0 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1043c9320> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([9]) : <type 'set'>
==================================================
avl2.insert(int3)                                                        # STEP 8
ACTION: avl2.insert(int3) 
int3 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1043c9320> : <type 'instance'>
avl_REF2 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([9, 5]) : <type 'set'>
==================================================
result = avl2.find(int2)                                                 # STEP 9
ACTION: result = avl2.find(int2) 
int2 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1043c9320> : <type 'instance'>
avl_REF2 = set([9, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl2.insert(int3)                                                       # STEP 10
ACTION: avl2.insert(int3) 
int3 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1043c9320> : <type 'instance'>
avl_REF2 = set([9, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
int0 = 8                                                                # STEP 11
ACTION: int0 = 8 
int0 = 9 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
int2 = 6                                                                # STEP 12
ACTION: int2 = 6 
int2 = 16 : <type 'int'>
=> int2 = 6 : <type 'int'>
==================================================
int3 = 9                                                                # STEP 13
ACTION: int3 = 9 
int3 = 5 : <type 'int'>
=> int3 = 9 : <type 'int'>
==================================================
result = avl2.find(int3)                                                # STEP 14
ACTION: result = avl2.find(int3) 
int3 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1043c9320> : <type 'instance'>
avl_REF2 = set([9, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
result = avl2.inorder()                                                 # STEP 15
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x1043c9320> : <type 'instance'>
avl_REF2 = set([9, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl1 = avl.AVLTree()                                                    # STEP 16
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x105a216c8> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int3 = 4                                                                # STEP 17
ACTION: int3 = 4 
int3 = 9 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
result = avl1.find(int2)                                                # STEP 18
ACTION: result = avl1.find(int2) 
int2 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105a216c8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int2 = 7                                                                # STEP 19
ACTION: int2 = 7 
int2 = 6 : <type 'int'>
=> int2 = 7 : <type 'int'>
==================================================
result = avl1.find(int3)                                                # STEP 20
ACTION: result = avl1.find(int3) 
int3 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105a216c8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl1.insert(int3)                                                       # STEP 21
ACTION: avl1.insert(int3) 
int3 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105a216c8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([4]) : <type 'set'>
==================================================
result = avl1.find(int0)                                                # STEP 22
ACTION: result = avl1.find(int0) 
int0 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105a216c8> : <type 'instance'>
avl_REF1 = set([4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
int0 = 20                                                               # STEP 23
ACTION: int0 = 20 
int0 = 8 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 24
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x105a216c8> : <type 'instance'>
avl_REF1 = set([4]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int0)                                                       # STEP 25
ACTION: avl1.insert(int0) 
int0 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105a216c8> : <type 'instance'>
avl_REF1 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([20, 4]) : <type 'set'>
==================================================
avl1 == avl2                                                            # STEP 26
ACTION: avl1 == avl2 
avl1 = <avl.AVLTree instance at 0x105a216c8> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x1043c9320> : <type 'instance'>
avl_REF1 = set([20, 4]) : <type 'set'>
avl_REF2 = set([9, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
avl1.insert(int0)                                                       # STEP 27
ACTION: avl1.insert(int0) 
int0 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105a216c8> : <type 'instance'>
avl_REF1 = set([20, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.delete(int2)                                                       # STEP 28
ACTION: avl1.delete(int2) 
int2 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105a216c8> : <type 'instance'>
avl_REF1 = set([20, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int3 = 2                                                                # STEP 29
ACTION: int3 = 2 
int3 = 4 : <type 'int'>
=> int3 = 2 : <type 'int'>
==================================================
result = avl2.find(int1)                                                # STEP 30
ACTION: result = avl2.find(int1) 
int1 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1043c9320> : <type 'instance'>
avl_REF2 = set([9, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int0 = 7                                                                # STEP 31
ACTION: int0 = 7 
int0 = 20 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
int1 = 2                                                                # STEP 32
ACTION: int1 = 2 
int1 = 11 : <type 'int'>
=> int1 = 2 : <type 'int'>
==================================================
int2 = 16                                                               # STEP 33
ACTION: int2 = 16 
int2 = 7 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
result = avl1.find(int0)                                                # STEP 34
ACTION: result = avl1.find(int0) 
int0 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105a216c8> : <type 'instance'>
avl_REF1 = set([20, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
int0 = 16                                                               # STEP 35
ACTION: int0 = 16 
int0 = 7 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 36
ACTION: avl1.insert(int2) 
int2 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105a216c8> : <type 'instance'>
avl_REF1 = set([20, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([16, 20, 4]) : <type 'set'>
==================================================
int2 = 14                                                               # STEP 37
ACTION: int2 = 14 
int2 = 16 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 38
ACTION: avl1.insert(int1) 
int1 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105a216c8> : <type 'instance'>
avl_REF1 = set([16, 20, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([16, 20, 2, 4]) : <type 'set'>
==================================================
result = avl2.find(int0)                                                # STEP 39
ACTION: result = avl2.find(int0) 
int0 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1043c9320> : <type 'instance'>
avl_REF2 = set([9, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl1.delete(int0)                                                       # STEP 40
ACTION: avl1.delete(int0) 
int0 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105a216c8> : <type 'instance'>
avl_REF1 = set([16, 20, 2, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([20, 2, 4]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105a25cf8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 13
STOPPING TESTING DUE TO TIMEOUT
8.58500169664 PERCENT COVERED
60.2161140442 TOTAL RUNTIME
8 EXECUTED
654 TOTAL TEST OPERATIONS
28.17964077 TIME SPENT EXECUTING TEST OPERATIONS
0.0236644744873 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
28.3878564835 TIME SPENT CHECKING PROPERTIES
56.5674972534 TOTAL TIME SPENT RUNNING SUT
0.00478291511536 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int1 = 11                                                                # STEP 0
int2 = 16                                                                # STEP 1
int3 = 3                                                                 # STEP 2
avl2 = avl.AVLTree()                                                     # STEP 3
avl2.delete(int3)                                                        # STEP 4
int3 = 5                                                                 # STEP 5
int0 = 9                                                                 # STEP 6
avl2.insert(int0)                                                        # STEP 7
avl2.insert(int3)                                                        # STEP 8
result = avl2.find(int2)                                                 # STEP 9
avl2.insert(int3)                                                       # STEP 10
int0 = 8                                                                # STEP 11
int2 = 6                                                                # STEP 12
int3 = 9                                                                # STEP 13
result = avl2.find(int3)                                                # STEP 14
result = avl2.inorder()                                                 # STEP 15
avl1 = avl.AVLTree()                                                    # STEP 16
int3 = 4                                                                # STEP 17
result = avl1.find(int2)                                                # STEP 18
int2 = 7                                                                # STEP 19
result = avl1.find(int3)                                                # STEP 20
avl1.insert(int3)                                                       # STEP 21
result = avl1.find(int0)                                                # STEP 22
int0 = 20                                                               # STEP 23
result = avl1.inorder()                                                 # STEP 24
avl1.insert(int0)                                                       # STEP 25
avl1 == avl2                                                            # STEP 26
avl1.insert(int0)                                                       # STEP 27
avl1.delete(int2)                                                       # STEP 28
int3 = 2                                                                # STEP 29
result = avl2.find(int1)                                                # STEP 30
int0 = 7                                                                # STEP 31
int1 = 2                                                                # STEP 32
int2 = 16                                                               # STEP 33
result = avl1.find(int0)                                                # STEP 34
int0 = 16                                                               # STEP 35
avl1.insert(int2)                                                       # STEP 36
int2 = 14                                                               # STEP 37
avl1.insert(int1)                                                       # STEP 38
result = avl2.find(int0)                                                # STEP 39
avl1.delete(int0)                                                       # STEP 40
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105a25cf8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
216 BRANCHES COVERED
162 STATEMENTS COVERED

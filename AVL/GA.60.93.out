Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.15015.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1027225f0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
Original test has 23 steps

SAVING TEST AS failure.15015.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 1                                                                 # STEP 0
ACTION: int3 = 1 
int3 = None : <type 'NoneType'>
=> int3 = 1 : <type 'int'>
==================================================
int0 = 2                                                                 # STEP 1
ACTION: int0 = 2 
int0 = None : <type 'NoneType'>
=> int0 = 2 : <type 'int'>
==================================================
int2 = 2                                                                 # STEP 2
ACTION: int2 = 2 
int2 = None : <type 'NoneType'>
=> int2 = 2 : <type 'int'>
==================================================
int1 = 3                                                                 # STEP 3
ACTION: int1 = 3 
int1 = None : <type 'NoneType'>
=> int1 = 3 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x1048271b8> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int0)                                                        # STEP 5
ACTION: avl2.insert(int0) 
int0 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1048271b8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([2]) : <type 'set'>
==================================================
avl2 == avl2                                                             # STEP 6
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x1048271b8> : <type 'instance'>
avl_REF2 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
int0 = 3                                                                 # STEP 7
ACTION: int0 = 3 
int0 = 2 : <type 'int'>
=> int0 = 3 : <type 'int'>
==================================================
avl2.insert(int2)                                                        # STEP 8
ACTION: avl2.insert(int2) 
int2 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1048271b8> : <type 'instance'>
avl_REF2 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
int2 = 11                                                                # STEP 9
ACTION: int2 = 11 
int2 = 2 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
avl2 == avl2                                                            # STEP 10
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x1048271b8> : <type 'instance'>
avl_REF2 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl2.insert(int1)                                                       # STEP 11
ACTION: avl2.insert(int1) 
int1 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1048271b8> : <type 'instance'>
avl_REF2 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([2, 3]) : <type 'set'>
==================================================
int1 = 14                                                               # STEP 12
ACTION: int1 = 14 
int1 = 3 : <type 'int'>
=> int1 = 14 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 13
ACTION: avl2.delete(int2) 
int2 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1048271b8> : <type 'instance'>
avl_REF2 = set([2, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.insert(int1)                                                       # STEP 14
ACTION: avl2.insert(int1) 
int1 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1048271b8> : <type 'instance'>
avl_REF2 = set([2, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([2, 3, 14]) : <type 'set'>
==================================================
int1 = 16                                                               # STEP 15
ACTION: int1 = 16 
int1 = 14 : <type 'int'>
=> int1 = 16 : <type 'int'>
==================================================
avl2 == avl2                                                            # STEP 16
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x1048271b8> : <type 'instance'>
avl_REF2 = set([2, 3, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
result = avl2.inorder()                                                 # STEP 17
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x1048271b8> : <type 'instance'>
avl_REF2 = set([2, 3, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int2 = 16                                                               # STEP 18
ACTION: int2 = 16 
int2 = 11 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
result = avl2.find(int1)                                                # STEP 19
ACTION: result = avl2.find(int1) 
int1 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1048271b8> : <type 'instance'>
avl_REF2 = set([2, 3, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int1 = 11                                                               # STEP 20
ACTION: int1 = 11 
int1 = 16 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 21
ACTION: avl2.insert(int3) 
int3 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1048271b8> : <type 'instance'>
avl_REF2 = set([2, 3, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([1, 2, 3, 14]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 22
ACTION: avl2.delete(int0) 
int0 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1048271b8> : <type 'instance'>
avl_REF2 = set([1, 2, 3, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([1, 2, 14]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10332f0e0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10314cdd0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
Original test has 43 steps

SAVING TEST AS failure.15015.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 11                                                                # STEP 0
ACTION: int1 = 11 
int1 = None : <type 'NoneType'>
=> int1 = 11 : <type 'int'>
==================================================
int2 = 20                                                                # STEP 1
ACTION: int2 = 20 
int2 = None : <type 'NoneType'>
=> int2 = 20 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 2
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x1031511b8> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int3 = 15                                                                # STEP 3
ACTION: int3 = 15 
int3 = None : <type 'NoneType'>
=> int3 = 15 : <type 'int'>
==================================================
avl2.delete(int1)                                                        # STEP 4
ACTION: avl2.delete(int1) 
int1 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1031511b8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl1 = avl.AVLTree()                                                     # STEP 5
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x1031519e0> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl2.delete(int3)                                                        # STEP 6
ACTION: avl2.delete(int3) 
int3 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1031511b8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int3 = 1                                                                 # STEP 7
ACTION: int3 = 1 
int3 = 15 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
avl1.delete(int2)                                                        # STEP 8
ACTION: avl1.delete(int2) 
int2 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1031519e0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl2.delete(int3)                                                        # STEP 9
ACTION: avl2.delete(int3) 
int3 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1031511b8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl1.delete(int3)                                                       # STEP 10
ACTION: avl1.delete(int3) 
int3 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1031519e0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int3 = 13                                                               # STEP 11
ACTION: int3 = 13 
int3 = 1 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 12
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x1031519e0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
int2 = 7                                                                # STEP 13
ACTION: int2 = 7 
int2 = 20 : <type 'int'>
=> int2 = 7 : <type 'int'>
==================================================
int0 = 20                                                               # STEP 14
ACTION: int0 = 20 
int0 = None : <type 'NoneType'>
=> int0 = 20 : <type 'int'>
==================================================
int1 = 2                                                                # STEP 15
ACTION: int1 = 2 
int1 = 11 : <type 'int'>
=> int1 = 2 : <type 'int'>
==================================================
avl2 == avl1                                                            # STEP 16
ACTION: avl2 == avl1 
avl2 = <avlbug2.AVLTree instance at 0x1031511b8> : <type 'instance'>
avl1 = <avlbug2.AVLTree instance at 0x1031519e0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
avl1.delete(int2)                                                       # STEP 17
ACTION: avl1.delete(int2) 
int2 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1031519e0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.insert(int1)                                                       # STEP 18
ACTION: avl1.insert(int1) 
int1 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1031519e0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([2]) : <type 'set'>
==================================================
int2 = 9                                                                # STEP 19
ACTION: int2 = 9 
int2 = 7 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 20
ACTION: avl1.insert(int2) 
int2 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1031519e0> : <type 'instance'>
avl_REF1 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([9, 2]) : <type 'set'>
==================================================
int2 = 8                                                                # STEP 21
ACTION: int2 = 8 
int2 = 9 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
int1 = 6                                                                # STEP 22
ACTION: int1 = 6 
int1 = 2 : <type 'int'>
=> int1 = 6 : <type 'int'>
==================================================
result = avl2.find(int0)                                                # STEP 23
ACTION: result = avl2.find(int0) 
int0 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1031511b8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
int0 = 12                                                               # STEP 24
ACTION: int0 = 12 
int0 = 20 : <type 'int'>
=> int0 = 12 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 25
ACTION: avl1.delete(int2) 
int2 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1031519e0> : <type 'instance'>
avl_REF1 = set([9, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.insert(int1)                                                       # STEP 26
ACTION: avl1.insert(int1) 
int1 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1031519e0> : <type 'instance'>
avl_REF1 = set([9, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([9, 2, 6]) : <type 'set'>
==================================================
int2 = 7                                                                # STEP 27
ACTION: int2 = 7 
int2 = 8 : <type 'int'>
=> int2 = 7 : <type 'int'>
==================================================
result = avl1.find(int2)                                                # STEP 28
ACTION: result = avl1.find(int2) 
int2 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1031519e0> : <type 'instance'>
avl_REF1 = set([9, 2, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int2 = 11                                                               # STEP 29
ACTION: int2 = 11 
int2 = 7 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 30
ACTION: avl1.insert(int3) 
int3 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1031519e0> : <type 'instance'>
avl_REF1 = set([9, 2, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([9, 2, 13, 6]) : <type 'set'>
==================================================
int1 = 15                                                               # STEP 31
ACTION: int1 = 15 
int1 = 6 : <type 'int'>
=> int1 = 15 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 32
ACTION: avl2.delete(int0) 
int0 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1031511b8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int3 = 2                                                                # STEP 33
ACTION: int3 = 2 
int3 = 13 : <type 'int'>
=> int3 = 2 : <type 'int'>
==================================================
avl2 == avl1                                                            # STEP 34
ACTION: avl2 == avl1 
avl2 = <avlbug2.AVLTree instance at 0x1031511b8> : <type 'instance'>
avl1 = <avlbug2.AVLTree instance at 0x1031519e0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
avl_REF1 = set([9, 2, 13, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
int0 = 4                                                                # STEP 35
ACTION: int0 = 4 
int0 = 12 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
result = avl1.find(int2)                                                # STEP 36
ACTION: result = avl1.find(int2) 
int2 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1031519e0> : <type 'instance'>
avl_REF1 = set([9, 2, 13, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl1.delete(int0)                                                       # STEP 37
ACTION: avl1.delete(int0) 
int0 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1031519e0> : <type 'instance'>
avl_REF1 = set([9, 2, 13, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int2 = 5                                                                # STEP 38
ACTION: int2 = 5 
int2 = 11 : <type 'int'>
=> int2 = 5 : <type 'int'>
==================================================
int0 = 10                                                               # STEP 39
ACTION: int0 = 10 
int0 = 4 : <type 'int'>
=> int0 = 10 : <type 'int'>
==================================================
result = avl1.find(int3)                                                # STEP 40
ACTION: result = avl1.find(int3) 
int3 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1031519e0> : <type 'instance'>
avl_REF1 = set([9, 2, 13, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
result = avl2.find(int2)                                                # STEP 41
ACTION: result = avl2.find(int2) 
int2 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1031511b8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl1.delete(int3)                                                       # STEP 42
ACTION: avl1.delete(int3) 
int3 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1031519e0> : <type 'instance'>
avl_REF1 = set([9, 2, 13, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([9, 13, 6]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10315ad88>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
TEST #4 STEP #42 (0:00:30.095068) Sun Apr 30 05:31:13 2017 [ 146 stmts 194 branches ]
  5 [3:-1]
-- < 4 [1:1]
---- < 3 [0:0] L
-- > 15 [2:1]
---- < 12 [1:0]
------ < 11 [0:0] L
------ > 13 [0:0] L
---- > 18 [0:0] L
set([3, 4, 5, 11, 12, 13, 15, 18])
  5 [3:-1]
-- < 4 [1:1]
---- < 3 [0:0] L
-- > 15 [2:1]
---- < 12 [1:0]
------ < 11 [0:0] L
------ > 13 [0:0] L
---- > 18 [0:0] L
set([3, 4, 5, 11, 12, 13, 15, 18])
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 17
STOPPING TESTING DUE TO TIMEOUT
8.57332009268 PERCENT COVERED
60.2597060204 TOTAL RUNTIME
7 EXECUTED
483 TOTAL TEST OPERATIONS
26.3177938461 TIME SPENT EXECUTING TEST OPERATIONS
0.0201239585876 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
26.4509527683 TIME SPENT CHECKING PROPERTIES
52.7687466145 TOTAL TIME SPENT RUNNING SUT
0.0053391456604 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
2 FAILED
0 REPEATS OF FAILURES
2 ACTUAL DISTINCT FAILURES

FAILURE 0
int3 = 1                                                                 # STEP 0
int0 = 2                                                                 # STEP 1
int2 = 2                                                                 # STEP 2
int1 = 3                                                                 # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
avl2.insert(int0)                                                        # STEP 5
avl2 == avl2                                                             # STEP 6
int0 = 3                                                                 # STEP 7
avl2.insert(int2)                                                        # STEP 8
int2 = 11                                                                # STEP 9
avl2 == avl2                                                            # STEP 10
avl2.insert(int1)                                                       # STEP 11
int1 = 14                                                               # STEP 12
avl2.delete(int2)                                                       # STEP 13
avl2.insert(int1)                                                       # STEP 14
int1 = 16                                                               # STEP 15
avl2 == avl2                                                            # STEP 16
result = avl2.inorder()                                                 # STEP 17
int2 = 16                                                               # STEP 18
result = avl2.find(int1)                                                # STEP 19
int1 = 11                                                               # STEP 20
avl2.insert(int3)                                                       # STEP 21
avl2.delete(int0)                                                       # STEP 22
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10332f0e0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE 1
int1 = 11                                                                # STEP 0
int2 = 20                                                                # STEP 1
avl2 = avl.AVLTree()                                                     # STEP 2
int3 = 15                                                                # STEP 3
avl2.delete(int1)                                                        # STEP 4
avl1 = avl.AVLTree()                                                     # STEP 5
avl2.delete(int3)                                                        # STEP 6
int3 = 1                                                                 # STEP 7
avl1.delete(int2)                                                        # STEP 8
avl2.delete(int3)                                                        # STEP 9
avl1.delete(int3)                                                       # STEP 10
int3 = 13                                                               # STEP 11
avl1 == avl1                                                            # STEP 12
int2 = 7                                                                # STEP 13
int0 = 20                                                               # STEP 14
int1 = 2                                                                # STEP 15
avl2 == avl1                                                            # STEP 16
avl1.delete(int2)                                                       # STEP 17
avl1.insert(int1)                                                       # STEP 18
int2 = 9                                                                # STEP 19
avl1.insert(int2)                                                       # STEP 20
int2 = 8                                                                # STEP 21
int1 = 6                                                                # STEP 22
result = avl2.find(int0)                                                # STEP 23
int0 = 12                                                               # STEP 24
avl1.delete(int2)                                                       # STEP 25
avl1.insert(int1)                                                       # STEP 26
int2 = 7                                                                # STEP 27
result = avl1.find(int2)                                                # STEP 28
int2 = 11                                                               # STEP 29
avl1.insert(int3)                                                       # STEP 30
int1 = 15                                                               # STEP 31
avl2.delete(int0)                                                       # STEP 32
int3 = 2                                                                # STEP 33
avl2 == avl1                                                            # STEP 34
int0 = 4                                                                # STEP 35
result = avl1.find(int2)                                                # STEP 36
avl1.delete(int0)                                                       # STEP 37
int2 = 5                                                                # STEP 38
int0 = 10                                                               # STEP 39
result = avl1.find(int3)                                                # STEP 40
result = avl2.find(int2)                                                # STEP 41
avl1.delete(int3)                                                       # STEP 42
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10315ad88>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
214 BRANCHES COVERED
161 STATEMENTS COVERED

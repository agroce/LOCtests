Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.99820.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105881ef0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 89 steps

SAVING TEST AS failure.99820.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 15                                                                # STEP 0
ACTION: int0 = 15 
int0 = None : <type 'NoneType'>
=> int0 = 15 : <type 'int'>
==================================================
int1 = 20                                                                # STEP 1
ACTION: int1 = 20 
int1 = None : <type 'NoneType'>
=> int1 = 20 : <type 'int'>
==================================================
int3 = 19                                                                # STEP 2
ACTION: int3 = 19 
int3 = None : <type 'NoneType'>
=> int3 = 19 : <type 'int'>
==================================================
int2 = 8                                                                 # STEP 3
ACTION: int2 = 8 
int2 = None : <type 'NoneType'>
=> int2 = 8 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x104195680> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 5
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x104195998> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl1.delete(int0)                                                        # STEP 6
ACTION: avl1.delete(int0) 
int0 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104195680> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int0 = 3                                                                 # STEP 7
ACTION: int0 = 3 
int0 = 15 : <type 'int'>
=> int0 = 3 : <type 'int'>
==================================================
avl1 == avl1                                                             # STEP 8
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x104195680> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl2.delete(int0)                                                        # STEP 9
ACTION: avl2.delete(int0) 
int0 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104195998> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int0 = 7                                                                # STEP 10
ACTION: int0 = 7 
int0 = 3 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 11
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104195998> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl1.delete(int1)                                                       # STEP 12
ACTION: avl1.delete(int1) 
int1 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104195680> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int1 = 14                                                               # STEP 13
ACTION: int1 = 14 
int1 = 20 : <type 'int'>
=> int1 = 14 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 14
ACTION: avl1.insert(int3) 
int3 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104195680> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([19]) : <type 'set'>
==================================================
int3 = 18                                                               # STEP 15
ACTION: int3 = 18 
int3 = 19 : <type 'int'>
=> int3 = 18 : <type 'int'>
==================================================
result = avl2.find(int2)                                                # STEP 16
ACTION: result = avl2.find(int2) 
int2 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104195998> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int2 = 9                                                                # STEP 17
ACTION: int2 = 9 
int2 = 8 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 18
ACTION: avl2 = avl.AVLTree() 
avl2 = <avl.AVLTree instance at 0x104195998> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
=> avl2 = <avl.AVLTree instance at 0x105889c68> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
==================================================
avl2.insert(int0)                                                       # STEP 19
ACTION: avl2.insert(int0) 
int0 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105889c68> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([7]) : <type 'set'>
==================================================
int0 = 18                                                               # STEP 20
ACTION: int0 = 18 
int0 = 7 : <type 'int'>
=> int0 = 18 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 21
ACTION: avl1.delete(int2) 
int2 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104195680> : <type 'instance'>
avl_REF1 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int2 = 16                                                               # STEP 22
ACTION: int2 = 16 
int2 = 9 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 23
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x10415ea70> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
result = avl1.find(int0)                                                # STEP 24
ACTION: result = avl1.find(int0) 
int0 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104195680> : <type 'instance'>
avl_REF1 = set([19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl0.delete(int3)                                                       # STEP 25
ACTION: avl0.delete(int3) 
int3 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10415ea70> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.insert(int2)                                                       # STEP 26
ACTION: avl0.insert(int2) 
int2 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10415ea70> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([16]) : <type 'set'>
==================================================
int0 = 12                                                               # STEP 27
ACTION: int0 = 12 
int0 = 18 : <type 'int'>
=> int0 = 12 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 28
ACTION: avl0.delete(int3) 
int3 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10415ea70> : <type 'instance'>
avl_REF0 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
result = avl1.find(int3)                                                # STEP 29
ACTION: result = avl1.find(int3) 
int3 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104195680> : <type 'instance'>
avl_REF1 = set([19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
int2 = 9                                                                # STEP 30
ACTION: int2 = 9 
int2 = 16 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
result = avl2.find(int2)                                                # STEP 31
ACTION: result = avl2.find(int2) 
int2 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105889c68> : <type 'instance'>
avl_REF2 = set([7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl0.delete(int0)                                                       # STEP 32
ACTION: avl0.delete(int0) 
int0 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10415ea70> : <type 'instance'>
avl_REF0 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int3 = 8                                                                # STEP 33
ACTION: int3 = 8 
int3 = 18 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 34
ACTION: avl0.delete(int1) 
int1 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10415ea70> : <type 'instance'>
avl_REF0 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int1 = 15                                                               # STEP 35
ACTION: int1 = 15 
int1 = 14 : <type 'int'>
=> int1 = 15 : <type 'int'>
==================================================
int2 = 10                                                               # STEP 36
ACTION: int2 = 10 
int2 = 9 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 37
ACTION: avl1.delete(int1) 
int1 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104195680> : <type 'instance'>
avl_REF1 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl2 == avl0                                                            # STEP 38
ACTION: avl2 == avl0 
avl2 = <avl.AVLTree instance at 0x105889c68> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x10415ea70> : <type 'instance'>
avl_REF2 = set([7]) : <type 'set'>
avl_REF0 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF0 
==================================================
int0 = 9                                                                # STEP 39
ACTION: int0 = 9 
int0 = 12 : <type 'int'>
=> int0 = 9 : <type 'int'>
==================================================
result = avl1.find(int3)                                                # STEP 40
ACTION: result = avl1.find(int3) 
int3 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104195680> : <type 'instance'>
avl_REF1 = set([19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
int3 = 16                                                               # STEP 41
ACTION: int3 = 16 
int3 = 8 : <type 'int'>
=> int3 = 16 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 42
ACTION: avl0.insert(int1) 
int1 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10415ea70> : <type 'instance'>
avl_REF0 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([16, 15]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 43
ACTION: avl1.insert(int3) 
int3 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104195680> : <type 'instance'>
avl_REF1 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([16, 19]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 44
ACTION: avl1.insert(int0) 
int0 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104195680> : <type 'instance'>
avl_REF1 = set([16, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([16, 9, 19]) : <type 'set'>
==================================================
int0 = 4                                                                # STEP 45
ACTION: int0 = 4 
int0 = 9 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
result = avl1.find(int1)                                                # STEP 46
ACTION: result = avl1.find(int1) 
int1 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104195680> : <type 'instance'>
avl_REF1 = set([16, 9, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl2 == avl1                                                            # STEP 47
ACTION: avl2 == avl1 
avl2 = <avl.AVLTree instance at 0x105889c68> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x104195680> : <type 'instance'>
avl_REF2 = set([7]) : <type 'set'>
avl_REF1 = set([16, 9, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
int3 = 18                                                               # STEP 48
ACTION: int3 = 18 
int3 = 16 : <type 'int'>
=> int3 = 18 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 49
ACTION: avl0.delete(int3) 
int3 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10415ea70> : <type 'instance'>
avl_REF0 = set([16, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl1.delete(int2)                                                       # STEP 50
ACTION: avl1.delete(int2) 
int2 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104195680> : <type 'instance'>
avl_REF1 = set([16, 9, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int3 = 3                                                                # STEP 51
ACTION: int3 = 3 
int3 = 18 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
int1 = 16                                                               # STEP 52
ACTION: int1 = 16 
int1 = 15 : <type 'int'>
=> int1 = 16 : <type 'int'>
==================================================
int2 = 15                                                               # STEP 53
ACTION: int2 = 15 
int2 = 10 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 54
ACTION: avl2.delete(int3) 
int3 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105889c68> : <type 'instance'>
avl_REF2 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int3 = 10                                                               # STEP 55
ACTION: int3 = 10 
int3 = 3 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
avl0 == avl1                                                            # STEP 56
ACTION: avl0 == avl1 
avl0 = <avl.AVLTree instance at 0x10415ea70> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x104195680> : <type 'instance'>
avl_REF0 = set([16, 15]) : <type 'set'>
avl_REF1 = set([16, 9, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF1 
==================================================
avl0 == avl2                                                            # STEP 57
ACTION: avl0 == avl2 
avl0 = <avl.AVLTree instance at 0x10415ea70> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x105889c68> : <type 'instance'>
avl_REF0 = set([16, 15]) : <type 'set'>
avl_REF2 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
result = avl1.find(int0)                                                # STEP 58
ACTION: result = avl1.find(int0) 
int0 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104195680> : <type 'instance'>
avl_REF1 = set([16, 9, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
result = avl2.find(int1)                                                # STEP 59
ACTION: result = avl2.find(int1) 
int1 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105889c68> : <type 'instance'>
avl_REF2 = set([7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int1 = 4                                                                # STEP 60
ACTION: int1 = 4 
int1 = 16 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
int0 = 9                                                                # STEP 61
ACTION: int0 = 9 
int0 = 4 : <type 'int'>
=> int0 = 9 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 62
ACTION: avl1.insert(int1) 
int1 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104195680> : <type 'instance'>
avl_REF1 = set([16, 9, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([16, 9, 19, 4]) : <type 'set'>
==================================================
int1 = 12                                                               # STEP 63
ACTION: int1 = 12 
int1 = 4 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 64
ACTION: avl2.insert(int1) 
int1 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105889c68> : <type 'instance'>
avl_REF2 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([12, 7]) : <type 'set'>
==================================================
int1 = 14                                                               # STEP 65
ACTION: int1 = 14 
int1 = 12 : <type 'int'>
=> int1 = 14 : <type 'int'>
==================================================
result = avl1.find(int0)                                                # STEP 66
ACTION: result = avl1.find(int0) 
int0 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104195680> : <type 'instance'>
avl_REF1 = set([16, 9, 19, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl1.insert(int0)                                                       # STEP 67
ACTION: avl1.insert(int0) 
int0 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104195680> : <type 'instance'>
avl_REF1 = set([16, 9, 19, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
int0 = 14                                                               # STEP 68
ACTION: int0 = 14 
int0 = 9 : <type 'int'>
=> int0 = 14 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 69
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x105889c68> : <type 'instance'>
avl_REF2 = set([12, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl2.find(int3)                                                # STEP 70
ACTION: result = avl2.find(int3) 
int3 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105889c68> : <type 'instance'>
avl_REF2 = set([12, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl2.delete(int3)                                                       # STEP 71
ACTION: avl2.delete(int3) 
int3 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105889c68> : <type 'instance'>
avl_REF2 = set([12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
result = avl2.find(int3)                                                # STEP 72
ACTION: result = avl2.find(int3) 
int3 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105889c68> : <type 'instance'>
avl_REF2 = set([12, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl2.delete(int3)                                                       # STEP 73
ACTION: avl2.delete(int3) 
int3 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105889c68> : <type 'instance'>
avl_REF2 = set([12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
result = avl2.find(int0)                                                # STEP 74
ACTION: result = avl2.find(int0) 
int0 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105889c68> : <type 'instance'>
avl_REF2 = set([12, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
int0 = 4                                                                # STEP 75
ACTION: int0 = 4 
int0 = 14 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
int3 = 9                                                                # STEP 76
ACTION: int3 = 9 
int3 = 10 : <type 'int'>
=> int3 = 9 : <type 'int'>
==================================================
avl1 == avl2                                                            # STEP 77
ACTION: avl1 == avl2 
avl1 = <avl.AVLTree instance at 0x104195680> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x105889c68> : <type 'instance'>
avl_REF1 = set([16, 9, 19, 4]) : <type 'set'>
avl_REF2 = set([12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
result = avl1.find(int1)                                                # STEP 78
ACTION: result = avl1.find(int1) 
int1 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104195680> : <type 'instance'>
avl_REF1 = set([16, 9, 19, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl0.insert(int2)                                                       # STEP 79
ACTION: avl0.insert(int2) 
int2 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10415ea70> : <type 'instance'>
avl_REF0 = set([16, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
int2 = 16                                                               # STEP 80
ACTION: int2 = 16 
int2 = 15 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 81
ACTION: avl2.insert(int0) 
int0 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105889c68> : <type 'instance'>
avl_REF2 = set([12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([4, 12, 7]) : <type 'set'>
==================================================
int0 = 16                                                               # STEP 82
ACTION: int0 = 16 
int0 = 4 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
result = avl1.find(int3)                                                # STEP 83
ACTION: result = avl1.find(int3) 
int3 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104195680> : <type 'instance'>
avl_REF1 = set([16, 9, 19, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
int1 = 4                                                                # STEP 84
ACTION: int1 = 4 
int1 = 14 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
int3 = 14                                                               # STEP 85
ACTION: int3 = 14 
int3 = 9 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 86
ACTION: avl2.delete(int1) 
int1 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105889c68> : <type 'instance'>
avl_REF2 = set([4, 12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([12, 7]) : <type 'set'>
==================================================
int1 = 12                                                               # STEP 87
ACTION: int1 = 12 
int1 = 4 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 88
ACTION: avl1.delete(int2) 
int2 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104195680> : <type 'instance'>
avl_REF1 = set([16, 9, 19, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([9, 19, 4]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1044fc908>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #3 STEP #91 (0:00:30.017634) Fri Apr 28 05:02:01 2017 [ 146 stmts 194 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1044cbea8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 58 steps

SAVING TEST AS failure.99820.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 6                                                                 # STEP 0
ACTION: int2 = 6 
int2 = None : <type 'NoneType'>
=> int2 = 6 : <type 'int'>
==================================================
int1 = 6                                                                 # STEP 1
ACTION: int1 = 6 
int1 = None : <type 'NoneType'>
=> int1 = 6 : <type 'int'>
==================================================
int0 = 12                                                                # STEP 2
ACTION: int0 = 12 
int0 = None : <type 'NoneType'>
=> int0 = 12 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 3
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x1044e3320> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int3 = 6                                                                 # STEP 4
ACTION: int3 = 6 
int3 = None : <type 'NoneType'>
=> int3 = 6 : <type 'int'>
==================================================
avl2.delete(int3)                                                        # STEP 5
ACTION: avl2.delete(int3) 
int3 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1044e3320> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.delete(int3)                                                        # STEP 6
ACTION: avl2.delete(int3) 
int3 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1044e3320> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.delete(int2)                                                        # STEP 7
ACTION: avl2.delete(int2) 
int2 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1044e3320> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.delete(int0)                                                        # STEP 8
ACTION: avl2.delete(int0) 
int0 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1044e3320> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int3 = 11                                                                # STEP 9
ACTION: int3 = 11 
int3 = 6 : <type 'int'>
=> int3 = 11 : <type 'int'>
==================================================
int0 = 2                                                                # STEP 10
ACTION: int0 = 2 
int0 = 12 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
int2 = 19                                                               # STEP 11
ACTION: int2 = 19 
int2 = 6 : <type 'int'>
=> int2 = 19 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 12
ACTION: avl2.delete(int3) 
int3 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1044e3320> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
result = avl2.find(int1)                                                # STEP 13
ACTION: result = avl2.find(int1) 
int1 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1044e3320> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int3 = 20                                                               # STEP 14
ACTION: int3 = 20 
int3 = 11 : <type 'int'>
=> int3 = 20 : <type 'int'>
==================================================
int1 = 4                                                                # STEP 15
ACTION: int1 = 4 
int1 = 6 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
result = avl2.find(int1)                                                # STEP 16
ACTION: result = avl2.find(int1) 
int1 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1044e3320> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int1 = 13                                                               # STEP 17
ACTION: int1 = 13 
int1 = 4 : <type 'int'>
=> int1 = 13 : <type 'int'>
==================================================
result = avl2.find(int1)                                                # STEP 18
ACTION: result = avl2.find(int1) 
int1 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1044e3320> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
result = avl2.inorder()                                                 # STEP 19
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x1044e3320> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int2)                                                       # STEP 20
ACTION: avl2.insert(int2) 
int2 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1044e3320> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([19]) : <type 'set'>
==================================================
avl2 == avl2                                                            # STEP 21
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x1044e3320> : <type 'instance'>
avl_REF2 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
int2 = 15                                                               # STEP 22
ACTION: int2 = 15 
int2 = 19 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
int1 = 6                                                                # STEP 23
ACTION: int1 = 6 
int1 = 13 : <type 'int'>
=> int1 = 6 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 24
ACTION: avl2 = avl.AVLTree() 
avl2 = <avl.AVLTree instance at 0x1044e3320> : <type 'instance'>
avl_REF2 = set([19]) : <type 'set'>
=> avl2 = <avl.AVLTree instance at 0x1044e2a70> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 25
ACTION: avl2.delete(int2) 
int2 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1044e2a70> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.insert(int0)                                                       # STEP 26
ACTION: avl2.insert(int0) 
int0 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1044e2a70> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([2]) : <type 'set'>
==================================================
int0 = 1                                                                # STEP 27
ACTION: int0 = 1 
int0 = 2 : <type 'int'>
=> int0 = 1 : <type 'int'>
==================================================
int2 = 9                                                                # STEP 28
ACTION: int2 = 9 
int2 = 15 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 29
ACTION: avl2.delete(int3) 
int3 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1044e2a70> : <type 'instance'>
avl_REF2 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2 == avl2                                                            # STEP 30
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x1044e2a70> : <type 'instance'>
avl_REF2 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
int3 = 13                                                               # STEP 31
ACTION: int3 = 13 
int3 = 20 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 32
ACTION: avl2.insert(int1) 
int1 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1044e2a70> : <type 'instance'>
avl_REF2 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([2, 6]) : <type 'set'>
==================================================
int1 = 20                                                               # STEP 33
ACTION: int1 = 20 
int1 = 6 : <type 'int'>
=> int1 = 20 : <type 'int'>
==================================================
result = avl2.find(int1)                                                # STEP 34
ACTION: result = avl2.find(int1) 
int1 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1044e2a70> : <type 'instance'>
avl_REF2 = set([2, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
result = avl2.find(int2)                                                # STEP 35
ACTION: result = avl2.find(int2) 
int2 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1044e2a70> : <type 'instance'>
avl_REF2 = set([2, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int2 = 3                                                                # STEP 36
ACTION: int2 = 3 
int2 = 9 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 37
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x1044cecf8> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 38
ACTION: avl1.delete(int0) 
int0 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1044cecf8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
result = avl1.find(int2)                                                # STEP 39
ACTION: result = avl1.find(int2) 
int2 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1044cecf8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl1.insert(int2)                                                       # STEP 40
ACTION: avl1.insert(int2) 
int2 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1044cecf8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([3]) : <type 'set'>
==================================================
int0 = 6                                                                # STEP 41
ACTION: int0 = 6 
int0 = 1 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
int1 = 17                                                               # STEP 42
ACTION: int1 = 17 
int1 = 20 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 43
ACTION: avl1.delete(int3) 
int3 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1044cecf8> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
result = avl2.find(int1)                                                # STEP 44
ACTION: result = avl2.find(int1) 
int1 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1044e2a70> : <type 'instance'>
avl_REF2 = set([2, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int1 = 18                                                               # STEP 45
ACTION: int1 = 18 
int1 = 17 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 46
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x1044e2a70> : <type 'instance'>
avl_REF2 = set([2, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int3)                                                       # STEP 47
ACTION: avl2.insert(int3) 
int3 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1044e2a70> : <type 'instance'>
avl_REF2 = set([2, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([2, 13, 6]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 48
ACTION: avl2.insert(int3) 
int3 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1044e2a70> : <type 'instance'>
avl_REF2 = set([2, 13, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
avl2.insert(int2)                                                       # STEP 49
ACTION: avl2.insert(int2) 
int2 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1044e2a70> : <type 'instance'>
avl_REF2 = set([2, 13, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([2, 3, 13, 6]) : <type 'set'>
==================================================
int3 = 4                                                                # STEP 50
ACTION: int3 = 4 
int3 = 13 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
result = avl1.find(int2)                                                # STEP 51
ACTION: result = avl1.find(int2) 
int2 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1044cecf8> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl1.delete(int1)                                                       # STEP 52
ACTION: avl1.delete(int1) 
int1 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1044cecf8> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int2 = 1                                                                # STEP 53
ACTION: int2 = 1 
int2 = 3 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
int1 = 2                                                                # STEP 54
ACTION: int1 = 2 
int1 = 18 : <type 'int'>
=> int1 = 2 : <type 'int'>
==================================================
avl2 == avl1                                                            # STEP 55
ACTION: avl2 == avl1 
avl2 = <avl.AVLTree instance at 0x1044e2a70> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x1044cecf8> : <type 'instance'>
avl_REF2 = set([2, 3, 13, 6]) : <type 'set'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
result = avl1.find(int2)                                                # STEP 56
ACTION: result = avl1.find(int2) 
int2 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1044cecf8> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl2.delete(int0)                                                       # STEP 57
ACTION: avl2.delete(int0) 
int0 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1044e2a70> : <type 'instance'>
avl_REF2 = set([2, 3, 13, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([2, 3, 13]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1044f4440>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 54
STOPPING TESTING DUE TO TIMEOUT
7.83847980998 PERCENT COVERED
60.1794900894 TOTAL RUNTIME
7 EXECUTED
601 TOTAL TEST OPERATIONS
23.8118646145 TIME SPENT EXECUTING TEST OPERATIONS
0.0215878486633 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
23.9264149666 TIME SPENT CHECKING PROPERTIES
47.7382795811 TOTAL TIME SPENT RUNNING SUT
0.00431084632874 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
2 FAILED
0 REPEATS OF FAILURES
2 ACTUAL DISTINCT FAILURES

FAILURE 0
int0 = 15                                                                # STEP 0
int1 = 20                                                                # STEP 1
int3 = 19                                                                # STEP 2
int2 = 8                                                                 # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
avl2 = avl.AVLTree()                                                     # STEP 5
avl1.delete(int0)                                                        # STEP 6
int0 = 3                                                                 # STEP 7
avl1 == avl1                                                             # STEP 8
avl2.delete(int0)                                                        # STEP 9
int0 = 7                                                                # STEP 10
result = avl2.inorder()                                                 # STEP 11
avl1.delete(int1)                                                       # STEP 12
int1 = 14                                                               # STEP 13
avl1.insert(int3)                                                       # STEP 14
int3 = 18                                                               # STEP 15
result = avl2.find(int2)                                                # STEP 16
int2 = 9                                                                # STEP 17
avl2 = avl.AVLTree()                                                    # STEP 18
avl2.insert(int0)                                                       # STEP 19
int0 = 18                                                               # STEP 20
avl1.delete(int2)                                                       # STEP 21
int2 = 16                                                               # STEP 22
avl0 = avl.AVLTree()                                                    # STEP 23
result = avl1.find(int0)                                                # STEP 24
avl0.delete(int3)                                                       # STEP 25
avl0.insert(int2)                                                       # STEP 26
int0 = 12                                                               # STEP 27
avl0.delete(int3)                                                       # STEP 28
result = avl1.find(int3)                                                # STEP 29
int2 = 9                                                                # STEP 30
result = avl2.find(int2)                                                # STEP 31
avl0.delete(int0)                                                       # STEP 32
int3 = 8                                                                # STEP 33
avl0.delete(int1)                                                       # STEP 34
int1 = 15                                                               # STEP 35
int2 = 10                                                               # STEP 36
avl1.delete(int1)                                                       # STEP 37
avl2 == avl0                                                            # STEP 38
int0 = 9                                                                # STEP 39
result = avl1.find(int3)                                                # STEP 40
int3 = 16                                                               # STEP 41
avl0.insert(int1)                                                       # STEP 42
avl1.insert(int3)                                                       # STEP 43
avl1.insert(int0)                                                       # STEP 44
int0 = 4                                                                # STEP 45
result = avl1.find(int1)                                                # STEP 46
avl2 == avl1                                                            # STEP 47
int3 = 18                                                               # STEP 48
avl0.delete(int3)                                                       # STEP 49
avl1.delete(int2)                                                       # STEP 50
int3 = 3                                                                # STEP 51
int1 = 16                                                               # STEP 52
int2 = 15                                                               # STEP 53
avl2.delete(int3)                                                       # STEP 54
int3 = 10                                                               # STEP 55
avl0 == avl1                                                            # STEP 56
avl0 == avl2                                                            # STEP 57
result = avl1.find(int0)                                                # STEP 58
result = avl2.find(int1)                                                # STEP 59
int1 = 4                                                                # STEP 60
int0 = 9                                                                # STEP 61
avl1.insert(int1)                                                       # STEP 62
int1 = 12                                                               # STEP 63
avl2.insert(int1)                                                       # STEP 64
int1 = 14                                                               # STEP 65
result = avl1.find(int0)                                                # STEP 66
avl1.insert(int0)                                                       # STEP 67
int0 = 14                                                               # STEP 68
result = avl2.inorder()                                                 # STEP 69
result = avl2.find(int3)                                                # STEP 70
avl2.delete(int3)                                                       # STEP 71
result = avl2.find(int3)                                                # STEP 72
avl2.delete(int3)                                                       # STEP 73
result = avl2.find(int0)                                                # STEP 74
int0 = 4                                                                # STEP 75
int3 = 9                                                                # STEP 76
avl1 == avl2                                                            # STEP 77
result = avl1.find(int1)                                                # STEP 78
avl0.insert(int2)                                                       # STEP 79
int2 = 16                                                               # STEP 80
avl2.insert(int0)                                                       # STEP 81
int0 = 16                                                               # STEP 82
result = avl1.find(int3)                                                # STEP 83
int1 = 4                                                                # STEP 84
int3 = 14                                                               # STEP 85
avl2.delete(int1)                                                       # STEP 86
int1 = 12                                                               # STEP 87
avl1.delete(int2)                                                       # STEP 88
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1044fc908>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE 1
int2 = 6                                                                 # STEP 0
int1 = 6                                                                 # STEP 1
int0 = 12                                                                # STEP 2
avl2 = avl.AVLTree()                                                     # STEP 3
int3 = 6                                                                 # STEP 4
avl2.delete(int3)                                                        # STEP 5
avl2.delete(int3)                                                        # STEP 6
avl2.delete(int2)                                                        # STEP 7
avl2.delete(int0)                                                        # STEP 8
int3 = 11                                                                # STEP 9
int0 = 2                                                                # STEP 10
int2 = 19                                                               # STEP 11
avl2.delete(int3)                                                       # STEP 12
result = avl2.find(int1)                                                # STEP 13
int3 = 20                                                               # STEP 14
int1 = 4                                                                # STEP 15
result = avl2.find(int1)                                                # STEP 16
int1 = 13                                                               # STEP 17
result = avl2.find(int1)                                                # STEP 18
result = avl2.inorder()                                                 # STEP 19
avl2.insert(int2)                                                       # STEP 20
avl2 == avl2                                                            # STEP 21
int2 = 15                                                               # STEP 22
int1 = 6                                                                # STEP 23
avl2 = avl.AVLTree()                                                    # STEP 24
avl2.delete(int2)                                                       # STEP 25
avl2.insert(int0)                                                       # STEP 26
int0 = 1                                                                # STEP 27
int2 = 9                                                                # STEP 28
avl2.delete(int3)                                                       # STEP 29
avl2 == avl2                                                            # STEP 30
int3 = 13                                                               # STEP 31
avl2.insert(int1)                                                       # STEP 32
int1 = 20                                                               # STEP 33
result = avl2.find(int1)                                                # STEP 34
result = avl2.find(int2)                                                # STEP 35
int2 = 3                                                                # STEP 36
avl1 = avl.AVLTree()                                                    # STEP 37
avl1.delete(int0)                                                       # STEP 38
result = avl1.find(int2)                                                # STEP 39
avl1.insert(int2)                                                       # STEP 40
int0 = 6                                                                # STEP 41
int1 = 17                                                               # STEP 42
avl1.delete(int3)                                                       # STEP 43
result = avl2.find(int1)                                                # STEP 44
int1 = 18                                                               # STEP 45
result = avl2.inorder()                                                 # STEP 46
avl2.insert(int3)                                                       # STEP 47
avl2.insert(int3)                                                       # STEP 48
avl2.insert(int2)                                                       # STEP 49
int3 = 4                                                                # STEP 50
result = avl1.find(int2)                                                # STEP 51
avl1.delete(int1)                                                       # STEP 52
int2 = 1                                                                # STEP 53
int1 = 2                                                                # STEP 54
avl2 == avl1                                                            # STEP 55
result = avl1.find(int2)                                                # STEP 56
avl2.delete(int0)                                                       # STEP 57
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1044f4440>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
196 BRANCHES COVERED
147 STATEMENTS COVERED

Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.62567.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  12 [2:0]
-- < 9 [1:1]
---- < 3 [0:0] L
-- > 18 [1:0]
---- < 14 [0:0] L
---- > 20 [0:0] L
set([3, 9, 12, 14, 18, 20])
  12 [2:0]
-- < 9 [1:1]
---- < 3 [0:0] L
-- > 18 [1:0]
---- < 14 [0:0] L
---- > 20 [0:0] L
set([3, 9, 12, 14, 18, 20])
  12 [2:0]
-- < 9 [1:1]
---- < 3 [0:0] L
-- > 18 [1:0]
---- < 14 [0:0] L
---- > 20 [0:0] L
set([3, 9, 12, 14, 18, 20])
  12 [2:0]
-- < 9 [1:1]
---- < 3 [0:0] L
-- > 18 [1:0]
---- < 14 [0:0] L
---- > 20 [0:0] L
set([3, 9, 12, 14, 18, 20])
  12 [2:0]
-- < 9 [1:1]
---- < 3 [0:0] L
-- > 18 [1:0]
---- < 14 [0:0] L
---- > 20 [0:0] L
set([3, 9, 12, 14, 18, 20])
  14 [2:0]
-- < 9 [1:0]
---- < 3 [0:0] L
---- > 11 [0:0] L
-- > 18 [1:-1]
---- > 20 [0:0] L
set([3, 9, 11, 14, 18, 20])
  14 [2:0]
-- < 9 [1:0]
---- < 3 [0:0] L
---- > 11 [0:0] L
-- > 18 [1:-1]
---- > 20 [0:0] L
set([3, 9, 11, 14, 18, 20])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102978680>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
Original test has 53 steps

SAVING TEST AS failure.62567.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 17                                                                # STEP 0
ACTION: int2 = 17 
int2 = None : <type 'NoneType'>
=> int2 = 17 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 1
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x10296a680> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.delete(int2)                                                        # STEP 2
ACTION: avl2.delete(int2) 
int2 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10296a680> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int2 = 17                                                                # STEP 3
ACTION: int2 = 17 
int2 = 17 : <type 'int'>
==================================================
int0 = 8                                                                 # STEP 4
ACTION: int0 = 8 
int0 = None : <type 'NoneType'>
=> int0 = 8 : <type 'int'>
==================================================
int1 = 1                                                                 # STEP 5
ACTION: int1 = 1 
int1 = None : <type 'NoneType'>
=> int1 = 1 : <type 'int'>
==================================================
int3 = 10                                                                # STEP 6
ACTION: int3 = 10 
int3 = None : <type 'NoneType'>
=> int3 = 10 : <type 'int'>
==================================================
avl2.insert(int2)                                                        # STEP 7
ACTION: avl2.insert(int2) 
int2 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10296a680> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([17]) : <type 'set'>
==================================================
avl2.delete(int3)                                                        # STEP 8
ACTION: avl2.delete(int3) 
int3 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10296a680> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.delete(int3)                                                        # STEP 9
ACTION: avl2.delete(int3) 
int3 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10296a680> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int3 = 4                                                                # STEP 10
ACTION: int3 = 4 
int3 = 10 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
int2 = 10                                                               # STEP 11
ACTION: int2 = 10 
int2 = 17 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 12
ACTION: avl2.delete(int1) 
int1 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10296a680> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int0)                                                       # STEP 13
ACTION: avl2.insert(int0) 
int0 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10296a680> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([8, 17]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 14
ACTION: avl2.delete(int1) 
int1 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10296a680> : <type 'instance'>
avl_REF2 = set([8, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int2)                                                       # STEP 15
ACTION: avl2.insert(int2) 
int2 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10296a680> : <type 'instance'>
avl_REF2 = set([8, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([8, 17, 10]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 16
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x10296a680> : <type 'instance'>
avl_REF2 = set([8, 17, 10]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2 = avl.AVLTree()                                                    # STEP 17
ACTION: avl2 = avl.AVLTree() 
avl2 = <avlbug2.AVLTree instance at 0x10296a680> : <type 'instance'>
avl_REF2 = set([8, 17, 10]) : <type 'set'>
=> avl2 = <avlbug2.AVLTree instance at 0x10137e560> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int1 = 5                                                                # STEP 18
ACTION: int1 = 5 
int1 = 1 : <type 'int'>
=> int1 = 5 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 19
ACTION: avl2.insert(int2) 
int2 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10137e560> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([10]) : <type 'set'>
==================================================
result = avl2.find(int1)                                                # STEP 20
ACTION: result = avl2.find(int1) 
int1 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10137e560> : <type 'instance'>
avl_REF2 = set([10]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl2.delete(int1)                                                       # STEP 21
ACTION: avl2.delete(int1) 
int1 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10137e560> : <type 'instance'>
avl_REF2 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
result = avl2.find(int1)                                                # STEP 22
ACTION: result = avl2.find(int1) 
int1 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10137e560> : <type 'instance'>
avl_REF2 = set([10]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
result = avl2.inorder()                                                 # STEP 23
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x10137e560> : <type 'instance'>
avl_REF2 = set([10]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int0)                                                       # STEP 24
ACTION: avl2.insert(int0) 
int0 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10137e560> : <type 'instance'>
avl_REF2 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([8, 10]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 25
ACTION: avl2.delete(int3) 
int3 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10137e560> : <type 'instance'>
avl_REF2 = set([8, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.delete(int3)                                                       # STEP 26
ACTION: avl2.delete(int3) 
int3 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10137e560> : <type 'instance'>
avl_REF2 = set([8, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.delete(int2)                                                       # STEP 27
ACTION: avl2.delete(int2) 
int2 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10137e560> : <type 'instance'>
avl_REF2 = set([8, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([8]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 28
ACTION: avl2.insert(int3) 
int3 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10137e560> : <type 'instance'>
avl_REF2 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([8, 4]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 29
ACTION: avl2.insert(int0) 
int0 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10137e560> : <type 'instance'>
avl_REF2 = set([8, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
int3 = 11                                                               # STEP 30
ACTION: int3 = 11 
int3 = 4 : <type 'int'>
=> int3 = 11 : <type 'int'>
==================================================
avl2 == avl2                                                            # STEP 31
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x10137e560> : <type 'instance'>
avl_REF2 = set([8, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl2.insert(int2)                                                       # STEP 32
ACTION: avl2.insert(int2) 
int2 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10137e560> : <type 'instance'>
avl_REF2 = set([8, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([8, 10, 4]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 33
ACTION: avl2.insert(int2) 
int2 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10137e560> : <type 'instance'>
avl_REF2 = set([8, 10, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
int1 = 6                                                                # STEP 34
ACTION: int1 = 6 
int1 = 5 : <type 'int'>
=> int1 = 6 : <type 'int'>
==================================================
result = avl2.find(int0)                                                # STEP 35
ACTION: result = avl2.find(int0) 
int0 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10137e560> : <type 'instance'>
avl_REF2 = set([8, 10, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl2.insert(int3)                                                       # STEP 36
ACTION: avl2.insert(int3) 
int3 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10137e560> : <type 'instance'>
avl_REF2 = set([8, 10, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([8, 10, 11, 4]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 37
ACTION: avl2.delete(int1) 
int1 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10137e560> : <type 'instance'>
avl_REF2 = set([8, 10, 11, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.delete(int0)                                                       # STEP 38
ACTION: avl2.delete(int0) 
int0 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10137e560> : <type 'instance'>
avl_REF2 = set([8, 10, 11, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([10, 11, 4]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 39
ACTION: avl2.insert(int3) 
int3 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10137e560> : <type 'instance'>
avl_REF2 = set([10, 11, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
result = avl2.inorder()                                                 # STEP 40
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x10137e560> : <type 'instance'>
avl_REF2 = set([10, 11, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl2.inorder()                                                 # STEP 41
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x10137e560> : <type 'instance'>
avl_REF2 = set([10, 11, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int2)                                                       # STEP 42
ACTION: avl2.insert(int2) 
int2 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10137e560> : <type 'instance'>
avl_REF2 = set([10, 11, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
int0 = 6                                                                # STEP 43
ACTION: int0 = 6 
int0 = 8 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 44
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x10137e560> : <type 'instance'>
avl_REF2 = set([10, 11, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int1)                                                       # STEP 45
ACTION: avl2.insert(int1) 
int1 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10137e560> : <type 'instance'>
avl_REF2 = set([10, 11, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([10, 11, 4, 6]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 46
ACTION: avl2.insert(int1) 
int1 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10137e560> : <type 'instance'>
avl_REF2 = set([10, 11, 4, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl2.insert(int2)                                                       # STEP 47
ACTION: avl2.insert(int2) 
int2 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10137e560> : <type 'instance'>
avl_REF2 = set([10, 11, 4, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
result = avl2.find(int0)                                                # STEP 48
ACTION: result = avl2.find(int0) 
int0 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10137e560> : <type 'instance'>
avl_REF2 = set([10, 11, 4, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl2.insert(int0)                                                       # STEP 49
ACTION: avl2.insert(int0) 
int0 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10137e560> : <type 'instance'>
avl_REF2 = set([10, 11, 4, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl2.insert(int3)                                                       # STEP 50
ACTION: avl2.insert(int3) 
int3 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10137e560> : <type 'instance'>
avl_REF2 = set([10, 11, 4, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
avl2.insert(int3)                                                       # STEP 51
ACTION: avl2.insert(int3) 
int3 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10137e560> : <type 'instance'>
avl_REF2 = set([10, 11, 4, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
avl2.delete(int2)                                                       # STEP 52
ACTION: avl2.delete(int2) 
int2 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10137e560> : <type 'instance'>
avl_REF2 = set([10, 11, 4, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([11, 4, 6]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10300bf80>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #3 STEP #75 (0:00:30.052250) Mon May  1 18:49:36 2017 [ 160 stmts 212 branches ]
  12 [3:-1]
-- < 10 [1:1]
---- < 2 [0:0] L
-- > 15 [2:-1]
---- < 14 [0:0] L
---- > 18 [1:1]
------ < 16 [0:0] L
set([2, 10, 12, 14, 15, 16, 18])
  12 [3:-1]
-- < 6 [1:0]
---- < 2 [0:0] L
---- > 10 [0:0] L
-- > 15 [2:0]
---- < 14 [1:1]
------ < 13 [0:0] L
---- > 18 [1:1]
------ < 16 [0:0] L
set([2, 6, 10, 12, 13, 14, 15, 16, 18])
  9 [2:0]
-- < 7 [1:1]
---- < 6 [0:0] L
-- > 14 [1:0]
---- < 12 [0:0] L
---- > 17 [0:0] L
set([6, 7, 9, 12, 14, 17])
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 56
STOPPING TESTING DUE TO TIMEOUT
8.21242019733 PERCENT COVERED
60.2042970657 TOTAL RUNTIME
6 EXECUTED
509 TOTAL TEST OPERATIONS
27.0608353615 TIME SPENT EXECUTING TEST OPERATIONS
0.0562644004822 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
27.2382874489 TIME SPENT CHECKING PROPERTIES
54.2991228104 TOTAL TIME SPENT RUNNING SUT
0.0040431022644 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int2 = 17                                                                # STEP 0
avl2 = avl.AVLTree()                                                     # STEP 1
avl2.delete(int2)                                                        # STEP 2
int2 = 17                                                                # STEP 3
int0 = 8                                                                 # STEP 4
int1 = 1                                                                 # STEP 5
int3 = 10                                                                # STEP 6
avl2.insert(int2)                                                        # STEP 7
avl2.delete(int3)                                                        # STEP 8
avl2.delete(int3)                                                        # STEP 9
int3 = 4                                                                # STEP 10
int2 = 10                                                               # STEP 11
avl2.delete(int1)                                                       # STEP 12
avl2.insert(int0)                                                       # STEP 13
avl2.delete(int1)                                                       # STEP 14
avl2.insert(int2)                                                       # STEP 15
result = avl2.inorder()                                                 # STEP 16
avl2 = avl.AVLTree()                                                    # STEP 17
int1 = 5                                                                # STEP 18
avl2.insert(int2)                                                       # STEP 19
result = avl2.find(int1)                                                # STEP 20
avl2.delete(int1)                                                       # STEP 21
result = avl2.find(int1)                                                # STEP 22
result = avl2.inorder()                                                 # STEP 23
avl2.insert(int0)                                                       # STEP 24
avl2.delete(int3)                                                       # STEP 25
avl2.delete(int3)                                                       # STEP 26
avl2.delete(int2)                                                       # STEP 27
avl2.insert(int3)                                                       # STEP 28
avl2.insert(int0)                                                       # STEP 29
int3 = 11                                                               # STEP 30
avl2 == avl2                                                            # STEP 31
avl2.insert(int2)                                                       # STEP 32
avl2.insert(int2)                                                       # STEP 33
int1 = 6                                                                # STEP 34
result = avl2.find(int0)                                                # STEP 35
avl2.insert(int3)                                                       # STEP 36
avl2.delete(int1)                                                       # STEP 37
avl2.delete(int0)                                                       # STEP 38
avl2.insert(int3)                                                       # STEP 39
result = avl2.inorder()                                                 # STEP 40
result = avl2.inorder()                                                 # STEP 41
avl2.insert(int2)                                                       # STEP 42
int0 = 6                                                                # STEP 43
result = avl2.inorder()                                                 # STEP 44
avl2.insert(int1)                                                       # STEP 45
avl2.insert(int1)                                                       # STEP 46
avl2.insert(int2)                                                       # STEP 47
result = avl2.find(int0)                                                # STEP 48
avl2.insert(int0)                                                       # STEP 49
avl2.insert(int3)                                                       # STEP 50
avl2.insert(int3)                                                       # STEP 51
avl2.delete(int2)                                                       # STEP 52
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10300bf80>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
214 BRANCHES COVERED
161 STATEMENTS COVERED

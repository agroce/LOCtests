Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.15099.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
TEST #3 STEP #73 (0:00:30.083187) Sun Apr 30 05:43:30 2017 [ 149 stmts 198 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104a7e8c0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
Original test has 89 steps

SAVING TEST AS failure.15099.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 5                                                                 # STEP 0
ACTION: int0 = 5 
int0 = None : <type 'NoneType'>
=> int0 = 5 : <type 'int'>
==================================================
int1 = 10                                                                # STEP 1
ACTION: int1 = 10 
int1 = None : <type 'NoneType'>
=> int1 = 10 : <type 'int'>
==================================================
int3 = 4                                                                 # STEP 2
ACTION: int3 = 4 
int3 = None : <type 'NoneType'>
=> int3 = 4 : <type 'int'>
==================================================
int2 = 3                                                                 # STEP 3
ACTION: int2 = 3 
int2 = None : <type 'NoneType'>
=> int2 = 3 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x101dcaf38> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl2.find(int3)                                                 # STEP 5
ACTION: result = avl2.find(int3) 
int3 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101dcaf38> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
result = avl2.find(int3)                                                 # STEP 6
ACTION: result = avl2.find(int3) 
int3 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101dcaf38> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
int3 = 11                                                                # STEP 7
ACTION: int3 = 11 
int3 = 4 : <type 'int'>
=> int3 = 11 : <type 'int'>
==================================================
avl2.delete(int1)                                                        # STEP 8
ACTION: avl2.delete(int1) 
int1 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101dcaf38> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int1 = 3                                                                 # STEP 9
ACTION: int1 = 3 
int1 = 10 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
result = avl2.find(int1)                                                # STEP 10
ACTION: result = avl2.find(int1) 
int1 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101dcaf38> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl2.insert(int3)                                                       # STEP 11
ACTION: avl2.insert(int3) 
int3 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101dcaf38> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([11]) : <type 'set'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 12
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x103c25560> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int3 = 13                                                               # STEP 13
ACTION: int3 = 13 
int3 = 11 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
result = avl0.find(int2)                                                # STEP 14
ACTION: result = avl0.find(int2) 
int2 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c25560> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl0.delete(int1)                                                       # STEP 15
ACTION: avl0.delete(int1) 
int1 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c25560> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int2 = 11                                                               # STEP 16
ACTION: int2 = 11 
int2 = 3 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
result = avl0.find(int2)                                                # STEP 17
ACTION: result = avl0.find(int2) 
int2 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c25560> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
int2 = 5                                                                # STEP 18
ACTION: int2 = 5 
int2 = 11 : <type 'int'>
=> int2 = 5 : <type 'int'>
==================================================
int1 = 3                                                                # STEP 19
ACTION: int1 = 3 
int1 = 3 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 20
ACTION: avl0.delete(int1) 
int1 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c25560> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.insert(int2)                                                       # STEP 21
ACTION: avl0.insert(int2) 
int2 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c25560> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([5]) : <type 'set'>
==================================================
avl2 == avl2                                                            # STEP 22
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x101dcaf38> : <type 'instance'>
avl_REF2 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
int2 = 8                                                                # STEP 23
ACTION: int2 = 8 
int2 = 5 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
avl0 == avl2                                                            # STEP 24
ACTION: avl0 == avl2 
avl0 = <avlbug2.AVLTree instance at 0x103c25560> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x101dcaf38> : <type 'instance'>
avl_REF0 = set([5]) : <type 'set'>
avl_REF2 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
avl0.delete(int3)                                                       # STEP 25
ACTION: avl0.delete(int3) 
int3 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c25560> : <type 'instance'>
avl_REF0 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int1 = 13                                                               # STEP 26
ACTION: int1 = 13 
int1 = 3 : <type 'int'>
=> int1 = 13 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 27
ACTION: avl0.insert(int0) 
int0 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c25560> : <type 'instance'>
avl_REF0 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
int3 = 1                                                                # STEP 28
ACTION: int3 = 1 
int3 = 13 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
result = avl2.find(int1)                                                # STEP 29
ACTION: result = avl2.find(int1) 
int1 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101dcaf38> : <type 'instance'>
avl_REF2 = set([11]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int1 = 14                                                               # STEP 30
ACTION: int1 = 14 
int1 = 13 : <type 'int'>
=> int1 = 14 : <type 'int'>
==================================================
int0 = 17                                                               # STEP 31
ACTION: int0 = 17 
int0 = 5 : <type 'int'>
=> int0 = 17 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 32
ACTION: avl0.insert(int3) 
int3 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c25560> : <type 'instance'>
avl_REF0 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([1, 5]) : <type 'set'>
==================================================
avl2 == avl0                                                            # STEP 33
ACTION: avl2 == avl0 
avl2 = <avlbug2.AVLTree instance at 0x101dcaf38> : <type 'instance'>
avl0 = <avlbug2.AVLTree instance at 0x103c25560> : <type 'instance'>
avl_REF2 = set([11]) : <type 'set'>
avl_REF0 = set([1, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF0 
==================================================
avl1 = avl.AVLTree()                                                    # STEP 34
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x103c0fbd8> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
result = avl0.find(int3)                                                # STEP 35
ACTION: result = avl0.find(int3) 
int3 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c25560> : <type 'instance'>
avl_REF0 = set([1, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
avl0 == avl2                                                            # STEP 36
ACTION: avl0 == avl2 
avl0 = <avlbug2.AVLTree instance at 0x103c25560> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x101dcaf38> : <type 'instance'>
avl_REF0 = set([1, 5]) : <type 'set'>
avl_REF2 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
avl1 == avl2                                                            # STEP 37
ACTION: avl1 == avl2 
avl1 = <avlbug2.AVLTree instance at 0x103c0fbd8> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x101dcaf38> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
avl_REF2 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
avl1.insert(int0)                                                       # STEP 38
ACTION: avl1.insert(int0) 
int0 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103c0fbd8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([17]) : <type 'set'>
==================================================
int0 = 3                                                                # STEP 39
ACTION: int0 = 3 
int0 = 17 : <type 'int'>
=> int0 = 3 : <type 'int'>
==================================================
int3 = 4                                                                # STEP 40
ACTION: int3 = 4 
int3 = 1 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
result = avl1.find(int0)                                                # STEP 41
ACTION: result = avl1.find(int0) 
int0 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103c0fbd8> : <type 'instance'>
avl_REF1 = set([17]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl1.delete(int2)                                                       # STEP 42
ACTION: avl1.delete(int2) 
int2 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103c0fbd8> : <type 'instance'>
avl_REF1 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.insert(int3)                                                       # STEP 43
ACTION: avl1.insert(int3) 
int3 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103c0fbd8> : <type 'instance'>
avl_REF1 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([17, 4]) : <type 'set'>
==================================================
int0 = 6                                                                # STEP 44
ACTION: int0 = 6 
int0 = 3 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
avl2 == avl0                                                            # STEP 45
ACTION: avl2 == avl0 
avl2 = <avlbug2.AVLTree instance at 0x101dcaf38> : <type 'instance'>
avl0 = <avlbug2.AVLTree instance at 0x103c25560> : <type 'instance'>
avl_REF2 = set([11]) : <type 'set'>
avl_REF0 = set([1, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF0 
==================================================
result = avl0.inorder()                                                 # STEP 46
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x103c25560> : <type 'instance'>
avl_REF0 = set([1, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl1.delete(int2)                                                       # STEP 47
ACTION: avl1.delete(int2) 
int2 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103c0fbd8> : <type 'instance'>
avl_REF1 = set([17, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int3 = 10                                                               # STEP 48
ACTION: int3 = 10 
int3 = 4 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 49
ACTION: avl0.insert(int1) 
int1 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c25560> : <type 'instance'>
avl_REF0 = set([1, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([1, 5, 14]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 50
ACTION: avl2.insert(int2) 
int2 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101dcaf38> : <type 'instance'>
avl_REF2 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([8, 11]) : <type 'set'>
==================================================
int2 = 7                                                                # STEP 51
ACTION: int2 = 7 
int2 = 8 : <type 'int'>
=> int2 = 7 : <type 'int'>
==================================================
int1 = 5                                                                # STEP 52
ACTION: int1 = 5 
int1 = 14 : <type 'int'>
=> int1 = 5 : <type 'int'>
==================================================
result = avl2.find(int1)                                                # STEP 53
ACTION: result = avl2.find(int1) 
int1 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101dcaf38> : <type 'instance'>
avl_REF2 = set([8, 11]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl1.delete(int2)                                                       # STEP 54
ACTION: avl1.delete(int2) 
int2 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103c0fbd8> : <type 'instance'>
avl_REF1 = set([17, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int2 = 8                                                                # STEP 55
ACTION: int2 = 8 
int2 = 7 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
int1 = 2                                                                # STEP 56
ACTION: int1 = 2 
int1 = 5 : <type 'int'>
=> int1 = 2 : <type 'int'>
==================================================
result = avl0.find(int3)                                                # STEP 57
ACTION: result = avl0.find(int3) 
int3 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c25560> : <type 'instance'>
avl_REF0 = set([1, 5, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
avl2.insert(int2)                                                       # STEP 58
ACTION: avl2.insert(int2) 
int2 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101dcaf38> : <type 'instance'>
avl_REF2 = set([8, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
int2 = 9                                                                # STEP 59
ACTION: int2 = 9 
int2 = 8 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
result = avl2.find(int2)                                                # STEP 60
ACTION: result = avl2.find(int2) 
int2 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101dcaf38> : <type 'instance'>
avl_REF2 = set([8, 11]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int2 = 16                                                               # STEP 61
ACTION: int2 = 16 
int2 = 9 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
avl2 == avl0                                                            # STEP 62
ACTION: avl2 == avl0 
avl2 = <avlbug2.AVLTree instance at 0x101dcaf38> : <type 'instance'>
avl0 = <avlbug2.AVLTree instance at 0x103c25560> : <type 'instance'>
avl_REF2 = set([8, 11]) : <type 'set'>
avl_REF0 = set([1, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF0 
==================================================
result = avl0.find(int1)                                                # STEP 63
ACTION: result = avl0.find(int1) 
int1 = 2 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c25560> : <type 'instance'>
avl_REF0 = set([1, 5, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl2.delete(int0)                                                       # STEP 64
ACTION: avl2.delete(int0) 
int0 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101dcaf38> : <type 'instance'>
avl_REF2 = set([8, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int1 = 4                                                                # STEP 65
ACTION: int1 = 4 
int1 = 2 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 66
ACTION: avl1.insert(int3) 
int3 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103c0fbd8> : <type 'instance'>
avl_REF1 = set([17, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([17, 10, 4]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 67
ACTION: avl0.delete(int1) 
int1 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c25560> : <type 'instance'>
avl_REF0 = set([1, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int1 = 12                                                               # STEP 68
ACTION: int1 = 12 
int1 = 4 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 69
ACTION: avl0.delete(int1) 
int1 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c25560> : <type 'instance'>
avl_REF0 = set([1, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int1 = 5                                                                # STEP 70
ACTION: int1 = 5 
int1 = 12 : <type 'int'>
=> int1 = 5 : <type 'int'>
==================================================
int3 = 1                                                                # STEP 71
ACTION: int3 = 1 
int3 = 10 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
result = avl2.find(int3)                                                # STEP 72
ACTION: result = avl2.find(int3) 
int3 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101dcaf38> : <type 'instance'>
avl_REF2 = set([8, 11]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
int0 = 8                                                                # STEP 73
ACTION: int0 = 8 
int0 = 6 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 74
ACTION: avl2.insert(int1) 
int1 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101dcaf38> : <type 'instance'>
avl_REF2 = set([8, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([8, 11, 5]) : <type 'set'>
==================================================
int3 = 14                                                               # STEP 75
ACTION: int3 = 14 
int3 = 1 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 76
ACTION: avl1.insert(int3) 
int3 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103c0fbd8> : <type 'instance'>
avl_REF1 = set([17, 10, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([17, 10, 4, 14]) : <type 'set'>
==================================================
int3 = 19                                                               # STEP 77
ACTION: int3 = 19 
int3 = 14 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
result = avl2.find(int0)                                                # STEP 78
ACTION: result = avl2.find(int0) 
int0 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101dcaf38> : <type 'instance'>
avl_REF2 = set([8, 11, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl2.delete(int1)                                                       # STEP 79
ACTION: avl2.delete(int1) 
int1 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101dcaf38> : <type 'instance'>
avl_REF2 = set([8, 11, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([8, 11]) : <type 'set'>
==================================================
result = avl2.find(int2)                                                # STEP 80
ACTION: result = avl2.find(int2) 
int2 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101dcaf38> : <type 'instance'>
avl_REF2 = set([8, 11]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int1 = 11                                                               # STEP 81
ACTION: int1 = 11 
int1 = 5 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
int2 = 16                                                               # STEP 82
ACTION: int2 = 16 
int2 = 16 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 83
ACTION: avl0.delete(int2) 
int2 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c25560> : <type 'instance'>
avl_REF0 = set([1, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int0 = 8                                                                # STEP 84
ACTION: int0 = 8 
int0 = 8 : <type 'int'>
==================================================
result = avl0.find(int1)                                                # STEP 85
ACTION: result = avl0.find(int1) 
int1 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c25560> : <type 'instance'>
avl_REF0 = set([1, 5, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
int1 = 9                                                                # STEP 86
ACTION: int1 = 9 
int1 = 11 : <type 'int'>
=> int1 = 9 : <type 'int'>
==================================================
int2 = 4                                                                # STEP 87
ACTION: int2 = 4 
int2 = 16 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 88
ACTION: avl1.delete(int2) 
int2 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103c0fbd8> : <type 'instance'>
avl_REF1 = set([17, 10, 4, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([17, 10, 14]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x101ddd320>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 0
STOPPING TESTING DUE TO TIMEOUT
8.10989738497 PERCENT COVERED
62.0601420403 TOTAL RUNTIME
6 EXECUTED
489 TOTAL TEST OPERATIONS
26.4691236019 TIME SPENT EXECUTING TEST OPERATIONS
0.019656419754 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
26.7040371895 TIME SPENT CHECKING PROPERTIES
53.1731607914 TOTAL TIME SPENT RUNNING SUT
0.00469970703125 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int0 = 5                                                                 # STEP 0
int1 = 10                                                                # STEP 1
int3 = 4                                                                 # STEP 2
int2 = 3                                                                 # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
result = avl2.find(int3)                                                 # STEP 5
result = avl2.find(int3)                                                 # STEP 6
int3 = 11                                                                # STEP 7
avl2.delete(int1)                                                        # STEP 8
int1 = 3                                                                 # STEP 9
result = avl2.find(int1)                                                # STEP 10
avl2.insert(int3)                                                       # STEP 11
avl0 = avl.AVLTree()                                                    # STEP 12
int3 = 13                                                               # STEP 13
result = avl0.find(int2)                                                # STEP 14
avl0.delete(int1)                                                       # STEP 15
int2 = 11                                                               # STEP 16
result = avl0.find(int2)                                                # STEP 17
int2 = 5                                                                # STEP 18
int1 = 3                                                                # STEP 19
avl0.delete(int1)                                                       # STEP 20
avl0.insert(int2)                                                       # STEP 21
avl2 == avl2                                                            # STEP 22
int2 = 8                                                                # STEP 23
avl0 == avl2                                                            # STEP 24
avl0.delete(int3)                                                       # STEP 25
int1 = 13                                                               # STEP 26
avl0.insert(int0)                                                       # STEP 27
int3 = 1                                                                # STEP 28
result = avl2.find(int1)                                                # STEP 29
int1 = 14                                                               # STEP 30
int0 = 17                                                               # STEP 31
avl0.insert(int3)                                                       # STEP 32
avl2 == avl0                                                            # STEP 33
avl1 = avl.AVLTree()                                                    # STEP 34
result = avl0.find(int3)                                                # STEP 35
avl0 == avl2                                                            # STEP 36
avl1 == avl2                                                            # STEP 37
avl1.insert(int0)                                                       # STEP 38
int0 = 3                                                                # STEP 39
int3 = 4                                                                # STEP 40
result = avl1.find(int0)                                                # STEP 41
avl1.delete(int2)                                                       # STEP 42
avl1.insert(int3)                                                       # STEP 43
int0 = 6                                                                # STEP 44
avl2 == avl0                                                            # STEP 45
result = avl0.inorder()                                                 # STEP 46
avl1.delete(int2)                                                       # STEP 47
int3 = 10                                                               # STEP 48
avl0.insert(int1)                                                       # STEP 49
avl2.insert(int2)                                                       # STEP 50
int2 = 7                                                                # STEP 51
int1 = 5                                                                # STEP 52
result = avl2.find(int1)                                                # STEP 53
avl1.delete(int2)                                                       # STEP 54
int2 = 8                                                                # STEP 55
int1 = 2                                                                # STEP 56
result = avl0.find(int3)                                                # STEP 57
avl2.insert(int2)                                                       # STEP 58
int2 = 9                                                                # STEP 59
result = avl2.find(int2)                                                # STEP 60
int2 = 16                                                               # STEP 61
avl2 == avl0                                                            # STEP 62
result = avl0.find(int1)                                                # STEP 63
avl2.delete(int0)                                                       # STEP 64
int1 = 4                                                                # STEP 65
avl1.insert(int3)                                                       # STEP 66
avl0.delete(int1)                                                       # STEP 67
int1 = 12                                                               # STEP 68
avl0.delete(int1)                                                       # STEP 69
int1 = 5                                                                # STEP 70
int3 = 1                                                                # STEP 71
result = avl2.find(int3)                                                # STEP 72
int0 = 8                                                                # STEP 73
avl2.insert(int1)                                                       # STEP 74
int3 = 14                                                               # STEP 75
avl1.insert(int3)                                                       # STEP 76
int3 = 19                                                               # STEP 77
result = avl2.find(int0)                                                # STEP 78
avl2.delete(int1)                                                       # STEP 79
result = avl2.find(int2)                                                # STEP 80
int1 = 11                                                               # STEP 81
int2 = 16                                                               # STEP 82
avl0.delete(int2)                                                       # STEP 83
int0 = 8                                                                # STEP 84
result = avl0.find(int1)                                                # STEP 85
int1 = 9                                                                # STEP 86
int2 = 4                                                                # STEP 87
avl1.delete(int2)                                                       # STEP 88
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x101ddd320>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
202 BRANCHES COVERED
151 STATEMENTS COVERED

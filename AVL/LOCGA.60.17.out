Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.62023.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  8 [2:0]
-- < 4 [1:0]
---- < 3 [0:0] L
---- > 6 [0:0] L
-- > 11 [1:0]
---- < 9 [0:0] L
---- > 13 [0:0] L
set([3, 4, 6, 8, 9, 11, 13])
  8 [2:0]
-- < 4 [1:0]
---- < 3 [0:0] L
---- > 6 [0:0] L
-- > 11 [1:0]
---- < 9 [0:0] L
---- > 13 [0:0] L
set([3, 4, 6, 8, 9, 11, 13])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102e97908>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
Original test has 80 steps

SAVING TEST AS failure.62023.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
avl1 = avl.AVLTree()                                                     # STEP 0
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x100f99758> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
result = avl1.inorder()                                                  # STEP 1
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x100f99758> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
result = avl1.inorder()                                                  # STEP 2
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x100f99758> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int0 = 14                                                                # STEP 3
ACTION: int0 = 14 
int0 = None : <type 'NoneType'>
=> int0 = 14 : <type 'int'>
==================================================
avl1.insert(int0)                                                        # STEP 4
ACTION: avl1.insert(int0) 
int0 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x100f99758> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([14]) : <type 'set'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 5
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x102c20fc8> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl1.delete(int0)                                                        # STEP 6
ACTION: avl1.delete(int0) 
int0 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x100f99758> : <type 'instance'>
avl_REF1 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.insert(int0)                                                        # STEP 7
ACTION: avl1.insert(int0) 
int0 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x100f99758> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([14]) : <type 'set'>
==================================================
avl1.insert(int0)                                                        # STEP 8
ACTION: avl1.insert(int0) 
int0 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x100f99758> : <type 'instance'>
avl_REF1 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
int3 = 8                                                                 # STEP 9
ACTION: int3 = 8 
int3 = None : <type 'NoneType'>
=> int3 = 8 : <type 'int'>
==================================================
int1 = 5                                                                # STEP 10
ACTION: int1 = 5 
int1 = None : <type 'NoneType'>
=> int1 = 5 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 11
ACTION: avl0.insert(int1) 
int1 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102c20fc8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([5]) : <type 'set'>
==================================================
int0 = 16                                                               # STEP 12
ACTION: int0 = 16 
int0 = 14 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 13
ACTION: avl0.delete(int1) 
int1 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102c20fc8> : <type 'instance'>
avl_REF0 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 14
ACTION: avl0.insert(int3) 
int3 = 8 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102c20fc8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([8]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 15
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x100f99758> : <type 'instance'>
avl_REF1 = set([14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int3 = 3                                                                # STEP 16
ACTION: int3 = 3 
int3 = 8 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 17
ACTION: avl1.delete(int1) 
int1 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x100f99758> : <type 'instance'>
avl_REF1 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
result = avl1.find(int0)                                                # STEP 18
ACTION: result = avl1.find(int0) 
int0 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x100f99758> : <type 'instance'>
avl_REF1 = set([14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl0.delete(int1)                                                       # STEP 19
ACTION: avl0.delete(int1) 
int1 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102c20fc8> : <type 'instance'>
avl_REF0 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int2 = 7                                                                # STEP 20
ACTION: int2 = 7 
int2 = None : <type 'NoneType'>
=> int2 = 7 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 21
ACTION: avl0.insert(int0) 
int0 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102c20fc8> : <type 'instance'>
avl_REF0 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([8, 16]) : <type 'set'>
==================================================
int0 = 15                                                               # STEP 22
ACTION: int0 = 15 
int0 = 16 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 23
ACTION: avl1.delete(int3) 
int3 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x100f99758> : <type 'instance'>
avl_REF1 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl0.delete(int1)                                                       # STEP 24
ACTION: avl0.delete(int1) 
int1 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102c20fc8> : <type 'instance'>
avl_REF0 = set([8, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl1 == avl1                                                            # STEP 25
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x100f99758> : <type 'instance'>
avl_REF1 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl2 = avl.AVLTree()                                                    # STEP 26
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x102d67680> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int3 = 7                                                                # STEP 27
ACTION: int3 = 7 
int3 = 3 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 28
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x102d67680> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl0.insert(int2)                                                       # STEP 29
ACTION: avl0.insert(int2) 
int2 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102c20fc8> : <type 'instance'>
avl_REF0 = set([8, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([8, 16, 7]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 30
ACTION: avl0.delete(int2) 
int2 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102c20fc8> : <type 'instance'>
avl_REF0 = set([8, 16, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([8, 16]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 31
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x102d67680> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int1 = 9                                                                # STEP 32
ACTION: int1 = 9 
int1 = 5 : <type 'int'>
=> int1 = 9 : <type 'int'>
==================================================
int2 = 19                                                               # STEP 33
ACTION: int2 = 19 
int2 = 7 : <type 'int'>
=> int2 = 19 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 34
ACTION: avl2.delete(int3) 
int3 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102d67680> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int3 = 1                                                                # STEP 35
ACTION: int3 = 1 
int3 = 7 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 36
ACTION: avl2.insert(int3) 
int3 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102d67680> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([1]) : <type 'set'>
==================================================
int3 = 8                                                                # STEP 37
ACTION: int3 = 8 
int3 = 1 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 38
ACTION: avl0.insert(int3) 
int3 = 8 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102c20fc8> : <type 'instance'>
avl_REF0 = set([8, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
avl1.delete(int2)                                                       # STEP 39
ACTION: avl1.delete(int2) 
int2 = 19 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x100f99758> : <type 'instance'>
avl_REF1 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl0.insert(int3)                                                       # STEP 40
ACTION: avl0.insert(int3) 
int3 = 8 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102c20fc8> : <type 'instance'>
avl_REF0 = set([8, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
avl2 = avl.AVLTree()                                                    # STEP 41
ACTION: avl2 = avl.AVLTree() 
avl2 = <avlbug2.AVLTree instance at 0x102d67680> : <type 'instance'>
avl_REF2 = set([1]) : <type 'set'>
=> avl2 = <avlbug2.AVLTree instance at 0x102db6998> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 42
ACTION: avl2.insert(int2) 
int2 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102db6998> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([19]) : <type 'set'>
==================================================
avl0 == avl2                                                            # STEP 43
ACTION: avl0 == avl2 
avl0 = <avlbug2.AVLTree instance at 0x102c20fc8> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x102db6998> : <type 'instance'>
avl_REF0 = set([8, 16]) : <type 'set'>
avl_REF2 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
avl2.delete(int0)                                                       # STEP 44
ACTION: avl2.delete(int0) 
int0 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102db6998> : <type 'instance'>
avl_REF2 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2 == avl0                                                            # STEP 45
ACTION: avl2 == avl0 
avl2 = <avlbug2.AVLTree instance at 0x102db6998> : <type 'instance'>
avl0 = <avlbug2.AVLTree instance at 0x102c20fc8> : <type 'instance'>
avl_REF2 = set([19]) : <type 'set'>
avl_REF0 = set([8, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF0 
==================================================
int3 = 17                                                               # STEP 46
ACTION: int3 = 17 
int3 = 8 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 47
ACTION: avl0.insert(int3) 
int3 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102c20fc8> : <type 'instance'>
avl_REF0 = set([8, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([8, 16, 17]) : <type 'set'>
==================================================
int3 = 19                                                               # STEP 48
ACTION: int3 = 19 
int3 = 17 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 49
ACTION: avl1 = avl.AVLTree() 
avl1 = <avlbug2.AVLTree instance at 0x100f99758> : <type 'instance'>
avl_REF1 = set([14]) : <type 'set'>
=> avl1 = <avlbug2.AVLTree instance at 0x102dd7a70> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 50
ACTION: avl1.insert(int1) 
int1 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102dd7a70> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([9]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 51
ACTION: avl1.insert(int1) 
int1 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102dd7a70> : <type 'instance'>
avl_REF1 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
int1 = 7                                                                # STEP 52
ACTION: int1 = 7 
int1 = 9 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 53
ACTION: avl0.delete(int2) 
int2 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102c20fc8> : <type 'instance'>
avl_REF0 = set([8, 16, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl2.delete(int2)                                                       # STEP 54
ACTION: avl2.delete(int2) 
int2 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102db6998> : <type 'instance'>
avl_REF2 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 55
ACTION: avl1.delete(int2) 
int2 = 19 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102dd7a70> : <type 'instance'>
avl_REF1 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl2.delete(int1)                                                       # STEP 56
ACTION: avl2.delete(int1) 
int1 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102db6998> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int2 = 5                                                                # STEP 57
ACTION: int2 = 5 
int2 = 19 : <type 'int'>
=> int2 = 5 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 58
ACTION: avl2.insert(int0) 
int0 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102db6998> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([15]) : <type 'set'>
==================================================
int0 = 16                                                               # STEP 59
ACTION: int0 = 16 
int0 = 15 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
int1 = 8                                                                # STEP 60
ACTION: int1 = 8 
int1 = 7 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
result = avl2.find(int1)                                                # STEP 61
ACTION: result = avl2.find(int1) 
int1 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102db6998> : <type 'instance'>
avl_REF2 = set([15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl0.delete(int2)                                                       # STEP 62
ACTION: avl0.delete(int2) 
int2 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102c20fc8> : <type 'instance'>
avl_REF0 = set([8, 16, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.delete(int0)                                                       # STEP 63
ACTION: avl0.delete(int0) 
int0 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102c20fc8> : <type 'instance'>
avl_REF0 = set([8, 16, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([8, 17]) : <type 'set'>
==================================================
int1 = 17                                                               # STEP 64
ACTION: int1 = 17 
int1 = 8 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
int2 = 12                                                               # STEP 65
ACTION: int2 = 12 
int2 = 5 : <type 'int'>
=> int2 = 12 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 66
ACTION: avl2.insert(int0) 
int0 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102db6998> : <type 'instance'>
avl_REF2 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([16, 15]) : <type 'set'>
==================================================
int0 = 17                                                               # STEP 67
ACTION: int0 = 17 
int0 = 16 : <type 'int'>
=> int0 = 17 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 68
ACTION: avl2.insert(int3) 
int3 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102db6998> : <type 'instance'>
avl_REF2 = set([16, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([16, 19, 15]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 69
ACTION: avl0.delete(int1) 
int1 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102c20fc8> : <type 'instance'>
avl_REF0 = set([8, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([8]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 70
ACTION: avl1.insert(int0) 
int0 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102dd7a70> : <type 'instance'>
avl_REF1 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([9, 17]) : <type 'set'>
==================================================
int0 = 10                                                               # STEP 71
ACTION: int0 = 10 
int0 = 17 : <type 'int'>
=> int0 = 10 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 72
ACTION: avl2.delete(int2) 
int2 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102db6998> : <type 'instance'>
avl_REF2 = set([16, 19, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl1 == avl2                                                            # STEP 73
ACTION: avl1 == avl2 
avl1 = <avlbug2.AVLTree instance at 0x102dd7a70> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x102db6998> : <type 'instance'>
avl_REF1 = set([9, 17]) : <type 'set'>
avl_REF2 = set([16, 19, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
avl2.insert(int0)                                                       # STEP 74
ACTION: avl2.insert(int0) 
int0 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102db6998> : <type 'instance'>
avl_REF2 = set([16, 19, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([16, 10, 19, 15]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 75
ACTION: avl0.insert(int1) 
int1 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102c20fc8> : <type 'instance'>
avl_REF0 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([8, 17]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 76
ACTION: avl2.insert(int0) 
int0 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102db6998> : <type 'instance'>
avl_REF2 = set([16, 10, 19, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
int1 = 9                                                                # STEP 77
ACTION: int1 = 9 
int1 = 17 : <type 'int'>
=> int1 = 9 : <type 'int'>
==================================================
int3 = 16                                                               # STEP 78
ACTION: int3 = 16 
int3 = 19 : <type 'int'>
=> int3 = 16 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 79
ACTION: avl2.delete(int3) 
int3 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102db6998> : <type 'instance'>
avl_REF2 = set([16, 10, 19, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([10, 19, 15]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102da4638>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #3 STEP #36 (0:00:30.005662) Mon May  1 17:33:10 2017 [ 158 stmts 210 branches ]
  6 [2:0]
-- < 3 [1:0]
---- < 1 [0:0] L
---- > 5 [0:0] L
-- > 20 [1:1]
---- < 17 [0:0] L
set([1, 3, 5, 6, 17, 20])
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 17
STOPPING TESTING DUE TO TIMEOUT
8.21242019733 PERCENT COVERED
60.2965087891 TOTAL RUNTIME
6 EXECUTED
497 TOTAL TEST OPERATIONS
25.910197258 TIME SPENT EXECUTING TEST OPERATIONS
0.0556275844574 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
26.0249590874 TIME SPENT CHECKING PROPERTIES
51.9351563454 TOTAL TIME SPENT RUNNING SUT
0.00425338745117 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
avl1 = avl.AVLTree()                                                     # STEP 0
result = avl1.inorder()                                                  # STEP 1
result = avl1.inorder()                                                  # STEP 2
int0 = 14                                                                # STEP 3
avl1.insert(int0)                                                        # STEP 4
avl0 = avl.AVLTree()                                                     # STEP 5
avl1.delete(int0)                                                        # STEP 6
avl1.insert(int0)                                                        # STEP 7
avl1.insert(int0)                                                        # STEP 8
int3 = 8                                                                 # STEP 9
int1 = 5                                                                # STEP 10
avl0.insert(int1)                                                       # STEP 11
int0 = 16                                                               # STEP 12
avl0.delete(int1)                                                       # STEP 13
avl0.insert(int3)                                                       # STEP 14
result = avl1.inorder()                                                 # STEP 15
int3 = 3                                                                # STEP 16
avl1.delete(int1)                                                       # STEP 17
result = avl1.find(int0)                                                # STEP 18
avl0.delete(int1)                                                       # STEP 19
int2 = 7                                                                # STEP 20
avl0.insert(int0)                                                       # STEP 21
int0 = 15                                                               # STEP 22
avl1.delete(int3)                                                       # STEP 23
avl0.delete(int1)                                                       # STEP 24
avl1 == avl1                                                            # STEP 25
avl2 = avl.AVLTree()                                                    # STEP 26
int3 = 7                                                                # STEP 27
result = avl2.inorder()                                                 # STEP 28
avl0.insert(int2)                                                       # STEP 29
avl0.delete(int2)                                                       # STEP 30
result = avl2.inorder()                                                 # STEP 31
int1 = 9                                                                # STEP 32
int2 = 19                                                               # STEP 33
avl2.delete(int3)                                                       # STEP 34
int3 = 1                                                                # STEP 35
avl2.insert(int3)                                                       # STEP 36
int3 = 8                                                                # STEP 37
avl0.insert(int3)                                                       # STEP 38
avl1.delete(int2)                                                       # STEP 39
avl0.insert(int3)                                                       # STEP 40
avl2 = avl.AVLTree()                                                    # STEP 41
avl2.insert(int2)                                                       # STEP 42
avl0 == avl2                                                            # STEP 43
avl2.delete(int0)                                                       # STEP 44
avl2 == avl0                                                            # STEP 45
int3 = 17                                                               # STEP 46
avl0.insert(int3)                                                       # STEP 47
int3 = 19                                                               # STEP 48
avl1 = avl.AVLTree()                                                    # STEP 49
avl1.insert(int1)                                                       # STEP 50
avl1.insert(int1)                                                       # STEP 51
int1 = 7                                                                # STEP 52
avl0.delete(int2)                                                       # STEP 53
avl2.delete(int2)                                                       # STEP 54
avl1.delete(int2)                                                       # STEP 55
avl2.delete(int1)                                                       # STEP 56
int2 = 5                                                                # STEP 57
avl2.insert(int0)                                                       # STEP 58
int0 = 16                                                               # STEP 59
int1 = 8                                                                # STEP 60
result = avl2.find(int1)                                                # STEP 61
avl0.delete(int2)                                                       # STEP 62
avl0.delete(int0)                                                       # STEP 63
int1 = 17                                                               # STEP 64
int2 = 12                                                               # STEP 65
avl2.insert(int0)                                                       # STEP 66
int0 = 17                                                               # STEP 67
avl2.insert(int3)                                                       # STEP 68
avl0.delete(int1)                                                       # STEP 69
avl1.insert(int0)                                                       # STEP 70
int0 = 10                                                               # STEP 71
avl2.delete(int2)                                                       # STEP 72
avl1 == avl2                                                            # STEP 73
avl2.insert(int0)                                                       # STEP 74
avl0.insert(int1)                                                       # STEP 75
avl2.insert(int0)                                                       # STEP 76
int1 = 9                                                                # STEP 77
int3 = 16                                                               # STEP 78
avl2.delete(int3)                                                       # STEP 79
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102da4638>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
214 BRANCHES COVERED
161 STATEMENTS COVERED

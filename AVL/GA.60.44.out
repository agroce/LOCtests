Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.14325.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10354a368>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
Original test has 71 steps

SAVING TEST AS failure.14325.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 20                                                                # STEP 0
ACTION: int0 = 20 
int0 = None : <type 'NoneType'>
=> int0 = 20 : <type 'int'>
==================================================
int2 = 10                                                                # STEP 1
ACTION: int2 = 10 
int2 = None : <type 'NoneType'>
=> int2 = 10 : <type 'int'>
==================================================
int3 = 9                                                                 # STEP 2
ACTION: int3 = 9 
int3 = None : <type 'NoneType'>
=> int3 = 9 : <type 'int'>
==================================================
int1 = 12                                                                # STEP 3
ACTION: int1 = 12 
int1 = None : <type 'NoneType'>
=> int1 = 12 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 4
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x1034530e0> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.insert(int2)                                                        # STEP 5
ACTION: avl0.insert(int2) 
int2 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1034530e0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([10]) : <type 'set'>
==================================================
avl0.delete(int0)                                                        # STEP 6
ACTION: avl0.delete(int0) 
int0 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1034530e0> : <type 'instance'>
avl_REF0 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int0 = 15                                                                # STEP 7
ACTION: int0 = 15 
int0 = 20 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 8
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x1031cbf38> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl0.insert(int3)                                                        # STEP 9
ACTION: avl0.insert(int3) 
int3 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1034530e0> : <type 'instance'>
avl_REF0 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([9, 10]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 10
ACTION: avl1.delete(int1) 
int1 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1031cbf38> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int2 = 13                                                               # STEP 11
ACTION: int2 = 13 
int2 = 10 : <type 'int'>
=> int2 = 13 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 12
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x1031cbf38> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.insert(int2)                                                       # STEP 13
ACTION: avl1.insert(int2) 
int2 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1031cbf38> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([13]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 14
ACTION: avl1.delete(int3) 
int3 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1031cbf38> : <type 'instance'>
avl_REF1 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int2 = 16                                                               # STEP 15
ACTION: int2 = 16 
int2 = 13 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
int1 = 3                                                                # STEP 16
ACTION: int1 = 3 
int1 = 12 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 17
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x103511dd0> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int3 = 3                                                                # STEP 18
ACTION: int3 = 3 
int3 = 9 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
result = avl0.find(int0)                                                # STEP 19
ACTION: result = avl0.find(int0) 
int0 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1034530e0> : <type 'instance'>
avl_REF0 = set([9, 10]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
result = avl2.find(int1)                                                # STEP 20
ACTION: result = avl2.find(int1) 
int1 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103511dd0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int1 = 5                                                                # STEP 21
ACTION: int1 = 5 
int1 = 3 : <type 'int'>
=> int1 = 5 : <type 'int'>
==================================================
int0 = 14                                                               # STEP 22
ACTION: int0 = 14 
int0 = 15 : <type 'int'>
=> int0 = 14 : <type 'int'>
==================================================
result = avl1.find(int2)                                                # STEP 23
ACTION: result = avl1.find(int2) 
int2 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1031cbf38> : <type 'instance'>
avl_REF1 = set([13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl1.insert(int3)                                                       # STEP 24
ACTION: avl1.insert(int3) 
int3 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1031cbf38> : <type 'instance'>
avl_REF1 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([3, 13]) : <type 'set'>
==================================================
int3 = 12                                                               # STEP 25
ACTION: int3 = 12 
int3 = 3 : <type 'int'>
=> int3 = 12 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 26
ACTION: avl2.insert(int3) 
int3 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103511dd0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([12]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 27
ACTION: avl1.delete(int1) 
int1 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1031cbf38> : <type 'instance'>
avl_REF1 = set([3, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
result = avl0.find(int2)                                                # STEP 28
ACTION: result = avl0.find(int2) 
int2 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1034530e0> : <type 'instance'>
avl_REF0 = set([9, 10]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl0.insert(int2)                                                       # STEP 29
ACTION: avl0.insert(int2) 
int2 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1034530e0> : <type 'instance'>
avl_REF0 = set([9, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([16, 9, 10]) : <type 'set'>
==================================================
int1 = 18                                                               # STEP 30
ACTION: int1 = 18 
int1 = 5 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 31
ACTION: avl1.delete(int0) 
int0 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1031cbf38> : <type 'instance'>
avl_REF1 = set([3, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl2.insert(int1)                                                       # STEP 32
ACTION: avl2.insert(int1) 
int1 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103511dd0> : <type 'instance'>
avl_REF2 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([18, 12]) : <type 'set'>
==================================================
int1 = 15                                                               # STEP 33
ACTION: int1 = 15 
int1 = 18 : <type 'int'>
=> int1 = 15 : <type 'int'>
==================================================
int2 = 7                                                                # STEP 34
ACTION: int2 = 7 
int2 = 16 : <type 'int'>
=> int2 = 7 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 35
ACTION: avl2.insert(int3) 
int3 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103511dd0> : <type 'instance'>
avl_REF2 = set([18, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
result = avl2.find(int3)                                                # STEP 36
ACTION: result = avl2.find(int3) 
int3 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103511dd0> : <type 'instance'>
avl_REF2 = set([18, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl1.insert(int0)                                                       # STEP 37
ACTION: avl1.insert(int0) 
int0 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1031cbf38> : <type 'instance'>
avl_REF1 = set([3, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([3, 13, 14]) : <type 'set'>
==================================================
int0 = 9                                                                # STEP 38
ACTION: int0 = 9 
int0 = 14 : <type 'int'>
=> int0 = 9 : <type 'int'>
==================================================
int3 = 13                                                               # STEP 39
ACTION: int3 = 13 
int3 = 12 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 40
ACTION: avl2.insert(int3) 
int3 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103511dd0> : <type 'instance'>
avl_REF2 = set([18, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([18, 12, 13]) : <type 'set'>
==================================================
result = avl2.find(int1)                                                # STEP 41
ACTION: result = avl2.find(int1) 
int1 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103511dd0> : <type 'instance'>
avl_REF2 = set([18, 12, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int3 = 1                                                                # STEP 42
ACTION: int3 = 1 
int3 = 13 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 43
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x1034530e0> : <type 'instance'>
avl_REF0 = set([16, 9, 10]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
result = avl0.find(int1)                                                # STEP 44
ACTION: result = avl0.find(int1) 
int1 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1034530e0> : <type 'instance'>
avl_REF0 = set([16, 9, 10]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl2.insert(int3)                                                       # STEP 45
ACTION: avl2.insert(int3) 
int3 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103511dd0> : <type 'instance'>
avl_REF2 = set([18, 12, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([1, 18, 12, 13]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 46
ACTION: avl0.delete(int1) 
int1 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1034530e0> : <type 'instance'>
avl_REF0 = set([16, 9, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl1 == avl0                                                            # STEP 47
ACTION: avl1 == avl0 
avl1 = <avlbug2.AVLTree instance at 0x1031cbf38> : <type 'instance'>
avl0 = <avlbug2.AVLTree instance at 0x1034530e0> : <type 'instance'>
avl_REF1 = set([3, 13, 14]) : <type 'set'>
avl_REF0 = set([16, 9, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
avl2.insert(int3)                                                       # STEP 48
ACTION: avl2.insert(int3) 
int3 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103511dd0> : <type 'instance'>
avl_REF2 = set([1, 18, 12, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
avl0.insert(int3)                                                       # STEP 49
ACTION: avl0.insert(int3) 
int3 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1034530e0> : <type 'instance'>
avl_REF0 = set([16, 9, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([16, 9, 10, 1]) : <type 'set'>
==================================================
int3 = 19                                                               # STEP 50
ACTION: int3 = 19 
int3 = 1 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 51
ACTION: avl0.delete(int2) 
int2 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1034530e0> : <type 'instance'>
avl_REF0 = set([16, 9, 10, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl1 == avl1                                                            # STEP 52
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x1031cbf38> : <type 'instance'>
avl_REF1 = set([3, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.insert(int0)                                                       # STEP 53
ACTION: avl1.insert(int0) 
int0 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1031cbf38> : <type 'instance'>
avl_REF1 = set([3, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([9, 3, 13, 14]) : <type 'set'>
==================================================
int0 = 2                                                                # STEP 54
ACTION: int0 = 2 
int0 = 9 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 55
ACTION: avl1.insert(int0) 
int0 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1031cbf38> : <type 'instance'>
avl_REF1 = set([9, 3, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([9, 2, 3, 13, 14]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 56
ACTION: avl1.delete(int1) 
int1 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1031cbf38> : <type 'instance'>
avl_REF1 = set([9, 2, 3, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int0 = 16                                                               # STEP 57
ACTION: int0 = 16 
int0 = 2 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 58
ACTION: avl0.insert(int2) 
int2 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1034530e0> : <type 'instance'>
avl_REF0 = set([16, 9, 10, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([16, 9, 10, 7, 1]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 59
ACTION: avl2.insert(int2) 
int2 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103511dd0> : <type 'instance'>
avl_REF2 = set([1, 18, 12, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([1, 18, 12, 13, 7]) : <type 'set'>
==================================================
result = avl1.find(int3)                                                # STEP 60
ACTION: result = avl1.find(int3) 
int3 = 19 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1031cbf38> : <type 'instance'>
avl_REF1 = set([9, 2, 3, 13, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
int1 = 13                                                               # STEP 61
ACTION: int1 = 13 
int1 = 15 : <type 'int'>
=> int1 = 13 : <type 'int'>
==================================================
int3 = 9                                                                # STEP 62
ACTION: int3 = 9 
int3 = 19 : <type 'int'>
=> int3 = 9 : <type 'int'>
==================================================
result = avl1.find(int2)                                                # STEP 63
ACTION: result = avl1.find(int2) 
int2 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1031cbf38> : <type 'instance'>
avl_REF1 = set([9, 2, 3, 13, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int2 = 1                                                                # STEP 64
ACTION: int2 = 1 
int2 = 7 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 65
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x1031cbf38> : <type 'instance'>
avl_REF1 = set([9, 2, 3, 13, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
result = avl2.inorder()                                                 # STEP 66
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x103511dd0> : <type 'instance'>
avl_REF2 = set([1, 18, 12, 13, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl0.find(int0)                                                # STEP 67
ACTION: result = avl0.find(int0) 
int0 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1034530e0> : <type 'instance'>
avl_REF0 = set([16, 9, 10, 7, 1]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
int0 = 19                                                               # STEP 68
ACTION: int0 = 19 
int0 = 16 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
avl0 == avl0                                                            # STEP 69
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x1034530e0> : <type 'instance'>
avl_REF0 = set([16, 9, 10, 7, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl2.delete(int1)                                                       # STEP 70
ACTION: avl2.delete(int1) 
int1 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103511dd0> : <type 'instance'>
avl_REF2 = set([1, 18, 12, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([1, 18, 12, 7]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103051dd0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1027932d8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
Original test has 62 steps

SAVING TEST AS failure.14325.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 6                                                                 # STEP 0
ACTION: int2 = 6 
int2 = None : <type 'NoneType'>
=> int2 = 6 : <type 'int'>
==================================================
int0 = 8                                                                 # STEP 1
ACTION: int0 = 8 
int0 = None : <type 'NoneType'>
=> int0 = 8 : <type 'int'>
==================================================
int3 = 6                                                                 # STEP 2
ACTION: int3 = 6 
int3 = None : <type 'NoneType'>
=> int3 = 6 : <type 'int'>
==================================================
int1 = 9                                                                 # STEP 3
ACTION: int1 = 9 
int1 = None : <type 'NoneType'>
=> int1 = 9 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 4
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x102793758> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.insert(int1)                                                        # STEP 5
ACTION: avl0.insert(int1) 
int1 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102793758> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([9]) : <type 'set'>
==================================================
avl0.insert(int0)                                                        # STEP 6
ACTION: avl0.insert(int0) 
int0 = 8 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102793758> : <type 'instance'>
avl_REF0 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([8, 9]) : <type 'set'>
==================================================
int1 = 1                                                                 # STEP 7
ACTION: int1 = 1 
int1 = 9 : <type 'int'>
=> int1 = 1 : <type 'int'>
==================================================
int0 = 9                                                                 # STEP 8
ACTION: int0 = 9 
int0 = 8 : <type 'int'>
=> int0 = 9 : <type 'int'>
==================================================
result = avl0.find(int3)                                                 # STEP 9
ACTION: result = avl0.find(int3) 
int3 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102793758> : <type 'instance'>
avl_REF0 = set([8, 9]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
int3 = 7                                                                # STEP 10
ACTION: int3 = 7 
int3 = 6 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 11
ACTION: avl0.insert(int0) 
int0 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102793758> : <type 'instance'>
avl_REF0 = set([8, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
int0 = 8                                                                # STEP 12
ACTION: int0 = 8 
int0 = 9 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
result = avl0.find(int0)                                                # STEP 13
ACTION: result = avl0.find(int0) 
int0 = 8 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102793758> : <type 'instance'>
avl_REF0 = set([8, 9]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
avl0 == avl0                                                            # STEP 14
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x102793758> : <type 'instance'>
avl_REF0 = set([8, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
int0 = 1                                                                # STEP 15
ACTION: int0 = 1 
int0 = 8 : <type 'int'>
=> int0 = 1 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 16
ACTION: avl0.delete(int1) 
int1 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102793758> : <type 'instance'>
avl_REF0 = set([8, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int1 = 6                                                                # STEP 17
ACTION: int1 = 6 
int1 = 1 : <type 'int'>
=> int1 = 6 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 18
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x102793758> : <type 'instance'>
avl_REF0 = set([8, 9]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
result = avl0.find(int1)                                                # STEP 19
ACTION: result = avl0.find(int1) 
int1 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102793758> : <type 'instance'>
avl_REF0 = set([8, 9]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
result = avl0.inorder()                                                 # STEP 20
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x102793758> : <type 'instance'>
avl_REF0 = set([8, 9]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0 = avl.AVLTree()                                                    # STEP 21
ACTION: avl0 = avl.AVLTree() 
avl0 = <avlbug2.AVLTree instance at 0x102793758> : <type 'instance'>
avl_REF0 = set([8, 9]) : <type 'set'>
=> avl0 = <avlbug2.AVLTree instance at 0x103152290> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int1 = 7                                                                # STEP 22
ACTION: int1 = 7 
int1 = 6 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 23
ACTION: avl0.delete(int1) 
int1 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103152290> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int1 = 15                                                               # STEP 24
ACTION: int1 = 15 
int1 = 7 : <type 'int'>
=> int1 = 15 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 25
ACTION: avl0.delete(int2) 
int2 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103152290> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.delete(int1)                                                       # STEP 26
ACTION: avl0.delete(int1) 
int1 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103152290> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.insert(int0)                                                       # STEP 27
ACTION: avl0.insert(int0) 
int0 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103152290> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([1]) : <type 'set'>
==================================================
int0 = 1                                                                # STEP 28
ACTION: int0 = 1 
int0 = 1 : <type 'int'>
==================================================
int1 = 10                                                               # STEP 29
ACTION: int1 = 10 
int1 = 15 : <type 'int'>
=> int1 = 10 : <type 'int'>
==================================================
int2 = 15                                                               # STEP 30
ACTION: int2 = 15 
int2 = 6 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 31
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x102511b48> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 32
ACTION: avl0.insert(int3) 
int3 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103152290> : <type 'instance'>
avl_REF0 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([1, 7]) : <type 'set'>
==================================================
int3 = 3                                                                # STEP 33
ACTION: int3 = 3 
int3 = 7 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
result = avl0.find(int2)                                                # STEP 34
ACTION: result = avl0.find(int2) 
int2 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103152290> : <type 'instance'>
avl_REF0 = set([1, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
result = avl0.find(int2)                                                # STEP 35
ACTION: result = avl0.find(int2) 
int2 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103152290> : <type 'instance'>
avl_REF0 = set([1, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
result = avl0.find(int2)                                                # STEP 36
ACTION: result = avl0.find(int2) 
int2 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103152290> : <type 'instance'>
avl_REF0 = set([1, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
int2 = 19                                                               # STEP 37
ACTION: int2 = 19 
int2 = 15 : <type 'int'>
=> int2 = 19 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 38
ACTION: avl0.insert(int1) 
int1 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103152290> : <type 'instance'>
avl_REF0 = set([1, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([1, 10, 7]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 39
ACTION: avl1.insert(int1) 
int1 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102511b48> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([10]) : <type 'set'>
==================================================
int1 = 3                                                                # STEP 40
ACTION: int1 = 3 
int1 = 10 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 41
ACTION: avl1.insert(int0) 
int0 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102511b48> : <type 'instance'>
avl_REF1 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([1, 10]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 42
ACTION: avl1.delete(int0) 
int0 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102511b48> : <type 'instance'>
avl_REF1 = set([1, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([10]) : <type 'set'>
==================================================
int0 = 20                                                               # STEP 43
ACTION: int0 = 20 
int0 = 1 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 44
ACTION: avl1.insert(int1) 
int1 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102511b48> : <type 'instance'>
avl_REF1 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([10, 3]) : <type 'set'>
==================================================
int1 = 2                                                                # STEP 45
ACTION: int1 = 2 
int1 = 3 : <type 'int'>
=> int1 = 2 : <type 'int'>
==================================================
result = avl0.find(int0)                                                # STEP 46
ACTION: result = avl0.find(int0) 
int0 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103152290> : <type 'instance'>
avl_REF0 = set([1, 10, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
int0 = 8                                                                # STEP 47
ACTION: int0 = 8 
int0 = 20 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 48
ACTION: avl1.delete(int0) 
int0 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102511b48> : <type 'instance'>
avl_REF1 = set([10, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl0.insert(int3)                                                       # STEP 49
ACTION: avl0.insert(int3) 
int3 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103152290> : <type 'instance'>
avl_REF0 = set([1, 10, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([1, 10, 3, 7]) : <type 'set'>
==================================================
avl1 == avl0                                                            # STEP 50
ACTION: avl1 == avl0 
avl1 = <avlbug2.AVLTree instance at 0x102511b48> : <type 'instance'>
avl0 = <avlbug2.AVLTree instance at 0x103152290> : <type 'instance'>
avl_REF1 = set([10, 3]) : <type 'set'>
avl_REF0 = set([1, 10, 3, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
int3 = 1                                                                # STEP 51
ACTION: int3 = 1 
int3 = 3 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
int0 = 1                                                                # STEP 52
ACTION: int0 = 1 
int0 = 8 : <type 'int'>
=> int0 = 1 : <type 'int'>
==================================================
result = avl1.find(int2)                                                # STEP 53
ACTION: result = avl1.find(int2) 
int2 = 19 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102511b48> : <type 'instance'>
avl_REF1 = set([10, 3]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int2 = 19                                                               # STEP 54
ACTION: int2 = 19 
int2 = 19 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 55
ACTION: avl0.delete(int0) 
int0 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103152290> : <type 'instance'>
avl_REF0 = set([1, 10, 3, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([10, 3, 7]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 56
ACTION: avl1.insert(int3) 
int3 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102511b48> : <type 'instance'>
avl_REF1 = set([10, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([1, 10, 3]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 57
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x102511b48> : <type 'instance'>
avl_REF1 = set([1, 10, 3]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int3 = 7                                                                # STEP 58
ACTION: int3 = 7 
int3 = 1 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
result = avl1.find(int0)                                                # STEP 59
ACTION: result = avl1.find(int0) 
int0 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102511b48> : <type 'instance'>
avl_REF1 = set([1, 10, 3]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl1.insert(int2)                                                       # STEP 60
ACTION: avl1.insert(int2) 
int2 = 19 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102511b48> : <type 'instance'>
avl_REF1 = set([1, 10, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([19, 1, 10, 3]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 61
ACTION: avl1.delete(int0) 
int0 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102511b48> : <type 'instance'>
avl_REF1 = set([19, 1, 10, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([19, 10, 3]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10252f7a0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
TEST #3 STEP #19 (0:00:30.090056) Sun Apr 30 03:51:21 2017 [ 149 stmts 198 branches ]
  7 [2:0]
-- < 5 [1:1]
---- < 2 [0:0] L
-- > 16 [1:0]
---- < 13 [0:0] L
---- > 18 [0:0] L
set([2, 5, 7, 13, 16, 18])
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 1
STOPPING TESTING DUE TO TIMEOUT
8.7057265806 PERCENT COVERED
60.2790601254 TOTAL RUNTIME
6 EXECUTED
434 TOTAL TEST OPERATIONS
22.8788368702 TIME SPENT EXECUTING TEST OPERATIONS
0.0174276828766 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
23.1564500332 TIME SPENT CHECKING PROPERTIES
46.0352869034 TOTAL TIME SPENT RUNNING SUT
0.00470614433289 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
2 FAILED
0 REPEATS OF FAILURES
2 ACTUAL DISTINCT FAILURES

FAILURE 0
int0 = 20                                                                # STEP 0
int2 = 10                                                                # STEP 1
int3 = 9                                                                 # STEP 2
int1 = 12                                                                # STEP 3
avl0 = avl.AVLTree()                                                     # STEP 4
avl0.insert(int2)                                                        # STEP 5
avl0.delete(int0)                                                        # STEP 6
int0 = 15                                                                # STEP 7
avl1 = avl.AVLTree()                                                     # STEP 8
avl0.insert(int3)                                                        # STEP 9
avl1.delete(int1)                                                       # STEP 10
int2 = 13                                                               # STEP 11
avl1 == avl1                                                            # STEP 12
avl1.insert(int2)                                                       # STEP 13
avl1.delete(int3)                                                       # STEP 14
int2 = 16                                                               # STEP 15
int1 = 3                                                                # STEP 16
avl2 = avl.AVLTree()                                                    # STEP 17
int3 = 3                                                                # STEP 18
result = avl0.find(int0)                                                # STEP 19
result = avl2.find(int1)                                                # STEP 20
int1 = 5                                                                # STEP 21
int0 = 14                                                               # STEP 22
result = avl1.find(int2)                                                # STEP 23
avl1.insert(int3)                                                       # STEP 24
int3 = 12                                                               # STEP 25
avl2.insert(int3)                                                       # STEP 26
avl1.delete(int1)                                                       # STEP 27
result = avl0.find(int2)                                                # STEP 28
avl0.insert(int2)                                                       # STEP 29
int1 = 18                                                               # STEP 30
avl1.delete(int0)                                                       # STEP 31
avl2.insert(int1)                                                       # STEP 32
int1 = 15                                                               # STEP 33
int2 = 7                                                                # STEP 34
avl2.insert(int3)                                                       # STEP 35
result = avl2.find(int3)                                                # STEP 36
avl1.insert(int0)                                                       # STEP 37
int0 = 9                                                                # STEP 38
int3 = 13                                                               # STEP 39
avl2.insert(int3)                                                       # STEP 40
result = avl2.find(int1)                                                # STEP 41
int3 = 1                                                                # STEP 42
result = avl0.inorder()                                                 # STEP 43
result = avl0.find(int1)                                                # STEP 44
avl2.insert(int3)                                                       # STEP 45
avl0.delete(int1)                                                       # STEP 46
avl1 == avl0                                                            # STEP 47
avl2.insert(int3)                                                       # STEP 48
avl0.insert(int3)                                                       # STEP 49
int3 = 19                                                               # STEP 50
avl0.delete(int2)                                                       # STEP 51
avl1 == avl1                                                            # STEP 52
avl1.insert(int0)                                                       # STEP 53
int0 = 2                                                                # STEP 54
avl1.insert(int0)                                                       # STEP 55
avl1.delete(int1)                                                       # STEP 56
int0 = 16                                                               # STEP 57
avl0.insert(int2)                                                       # STEP 58
avl2.insert(int2)                                                       # STEP 59
result = avl1.find(int3)                                                # STEP 60
int1 = 13                                                               # STEP 61
int3 = 9                                                                # STEP 62
result = avl1.find(int2)                                                # STEP 63
int2 = 1                                                                # STEP 64
result = avl1.inorder()                                                 # STEP 65
result = avl2.inorder()                                                 # STEP 66
result = avl0.find(int0)                                                # STEP 67
int0 = 19                                                               # STEP 68
avl0 == avl0                                                            # STEP 69
avl2.delete(int1)                                                       # STEP 70
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103051dd0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE 1
int2 = 6                                                                 # STEP 0
int0 = 8                                                                 # STEP 1
int3 = 6                                                                 # STEP 2
int1 = 9                                                                 # STEP 3
avl0 = avl.AVLTree()                                                     # STEP 4
avl0.insert(int1)                                                        # STEP 5
avl0.insert(int0)                                                        # STEP 6
int1 = 1                                                                 # STEP 7
int0 = 9                                                                 # STEP 8
result = avl0.find(int3)                                                 # STEP 9
int3 = 7                                                                # STEP 10
avl0.insert(int0)                                                       # STEP 11
int0 = 8                                                                # STEP 12
result = avl0.find(int0)                                                # STEP 13
avl0 == avl0                                                            # STEP 14
int0 = 1                                                                # STEP 15
avl0.delete(int1)                                                       # STEP 16
int1 = 6                                                                # STEP 17
result = avl0.inorder()                                                 # STEP 18
result = avl0.find(int1)                                                # STEP 19
result = avl0.inorder()                                                 # STEP 20
avl0 = avl.AVLTree()                                                    # STEP 21
int1 = 7                                                                # STEP 22
avl0.delete(int1)                                                       # STEP 23
int1 = 15                                                               # STEP 24
avl0.delete(int2)                                                       # STEP 25
avl0.delete(int1)                                                       # STEP 26
avl0.insert(int0)                                                       # STEP 27
int0 = 1                                                                # STEP 28
int1 = 10                                                               # STEP 29
int2 = 15                                                               # STEP 30
avl1 = avl.AVLTree()                                                    # STEP 31
avl0.insert(int3)                                                       # STEP 32
int3 = 3                                                                # STEP 33
result = avl0.find(int2)                                                # STEP 34
result = avl0.find(int2)                                                # STEP 35
result = avl0.find(int2)                                                # STEP 36
int2 = 19                                                               # STEP 37
avl0.insert(int1)                                                       # STEP 38
avl1.insert(int1)                                                       # STEP 39
int1 = 3                                                                # STEP 40
avl1.insert(int0)                                                       # STEP 41
avl1.delete(int0)                                                       # STEP 42
int0 = 20                                                               # STEP 43
avl1.insert(int1)                                                       # STEP 44
int1 = 2                                                                # STEP 45
result = avl0.find(int0)                                                # STEP 46
int0 = 8                                                                # STEP 47
avl1.delete(int0)                                                       # STEP 48
avl0.insert(int3)                                                       # STEP 49
avl1 == avl0                                                            # STEP 50
int3 = 1                                                                # STEP 51
int0 = 1                                                                # STEP 52
result = avl1.find(int2)                                                # STEP 53
int2 = 19                                                               # STEP 54
avl0.delete(int0)                                                       # STEP 55
avl1.insert(int3)                                                       # STEP 56
result = avl1.inorder()                                                 # STEP 57
int3 = 7                                                                # STEP 58
result = avl1.find(int0)                                                # STEP 59
avl1.insert(int2)                                                       # STEP 60
avl1.delete(int0)                                                       # STEP 61
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10252f7a0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
218 BRANCHES COVERED
163 STATEMENTS COVERED

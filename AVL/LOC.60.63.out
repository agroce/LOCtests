Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.457.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  5 [2:0]
-- < 2 [1:0]
---- < 1 [0:0] L
---- > 3 [0:0] L
-- > 9 [1:-1]
---- > 15 [0:0] L
set([1, 2, 3, 5, 9, 15])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10426b680>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 27 steps

SAVING TEST AS failure.457.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
avl1 = avl.AVLTree()                                                     # STEP 0
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x10453b320> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int1 = 3                                                                 # STEP 1
ACTION: int1 = 3 
int1 = None : <type 'NoneType'>
=> int1 = 3 : <type 'int'>
==================================================
result = avl1.find(int1)                                                 # STEP 2
ACTION: result = avl1.find(int1) 
int1 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10453b320> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl1.insert(int1)                                                        # STEP 3
ACTION: avl1.insert(int1) 
int1 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10453b320> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([3]) : <type 'set'>
==================================================
avl1.insert(int1)                                                        # STEP 4
ACTION: avl1.insert(int1) 
int1 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10453b320> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl1.delete(int1)                                                        # STEP 5
ACTION: avl1.delete(int1) 
int1 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10453b320> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.insert(int1)                                                        # STEP 6
ACTION: avl1.insert(int1) 
int1 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10453b320> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([3]) : <type 'set'>
==================================================
int2 = 19                                                                # STEP 7
ACTION: int2 = 19 
int2 = None : <type 'NoneType'>
=> int2 = 19 : <type 'int'>
==================================================
int1 = 6                                                                 # STEP 8
ACTION: int1 = 6 
int1 = 3 : <type 'int'>
=> int1 = 6 : <type 'int'>
==================================================
avl1.delete(int2)                                                        # STEP 9
ACTION: avl1.delete(int2) 
int2 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10453b320> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.delete(int1)                                                       # STEP 10
ACTION: avl1.delete(int1) 
int1 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10453b320> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.insert(int2)                                                       # STEP 11
ACTION: avl1.insert(int2) 
int2 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10453b320> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([19, 3]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 12
ACTION: avl1.insert(int2) 
int2 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10453b320> : <type 'instance'>
avl_REF1 = set([19, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
avl1.delete(int2)                                                       # STEP 13
ACTION: avl1.delete(int2) 
int2 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10453b320> : <type 'instance'>
avl_REF1 = set([19, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([3]) : <type 'set'>
==================================================
int1 = 10                                                               # STEP 14
ACTION: int1 = 10 
int1 = 6 : <type 'int'>
=> int1 = 10 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 15
ACTION: avl1.delete(int1) 
int1 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10453b320> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.insert(int1)                                                       # STEP 16
ACTION: avl1.insert(int1) 
int1 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10453b320> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([10, 3]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 17
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x10453b320> : <type 'instance'>
avl_REF1 = set([10, 3]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int1 = 7                                                                # STEP 18
ACTION: int1 = 7 
int1 = 10 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 19
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x10453b320> : <type 'instance'>
avl_REF1 = set([10, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.insert(int1)                                                       # STEP 20
ACTION: avl1.insert(int1) 
int1 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10453b320> : <type 'instance'>
avl_REF1 = set([10, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([10, 3, 7]) : <type 'set'>
==================================================
int0 = 19                                                               # STEP 21
ACTION: int0 = 19 
int0 = None : <type 'NoneType'>
=> int0 = 19 : <type 'int'>
==================================================
int1 = 16                                                               # STEP 22
ACTION: int1 = 16 
int1 = 7 : <type 'int'>
=> int1 = 16 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 23
ACTION: avl1.delete(int0) 
int0 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10453b320> : <type 'instance'>
avl_REF1 = set([10, 3, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.insert(int0)                                                       # STEP 24
ACTION: avl1.insert(int0) 
int0 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10453b320> : <type 'instance'>
avl_REF1 = set([10, 3, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([19, 10, 3, 7]) : <type 'set'>
==================================================
int0 = 3                                                                # STEP 25
ACTION: int0 = 3 
int0 = 19 : <type 'int'>
=> int0 = 3 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 26
ACTION: avl1.delete(int0) 
int0 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10453b320> : <type 'instance'>
avl_REF1 = set([19, 10, 3, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([19, 10, 7]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10433bf38>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
  8 [2:0]
-- < 3 [1:0]
---- < 2 [0:0] L
---- > 7 [0:0] L
-- > 15 [1:1]
---- < 13 [0:0] L
set([2, 3, 7, 8, 13, 15])
  8 [2:0]
-- < 3 [1:0]
---- < 2 [0:0] L
---- > 7 [0:0] L
-- > 15 [1:1]
---- < 13 [0:0] L
set([2, 3, 7, 8, 13, 15])
  8 [2:0]
-- < 3 [1:0]
---- < 2 [0:0] L
---- > 5 [0:0] L
-- > 15 [1:1]
---- < 13 [0:0] L
set([2, 3, 5, 8, 13, 15])
  8 [2:0]
-- < 3 [1:0]
---- < 2 [0:0] L
---- > 5 [0:0] L
-- > 15 [1:1]
---- < 13 [0:0] L
set([2, 3, 5, 8, 13, 15])
TEST #5 STEP #7 (0:00:30.068210) Fri Apr 28 06:23:35 2017 [ 161 stmts 214 branches ]
  11 [2:0]
-- < 6 [1:1]
---- < 5 [0:0] L
-- > 15 [1:0]
---- < 14 [0:0] L
---- > 19 [0:0] L
set([5, 6, 11, 14, 15, 19])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1059b2560>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
Original test has 30 steps

SAVING TEST AS failure.457.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 17                                                                # STEP 0
ACTION: int2 = 17 
int2 = None : <type 'NoneType'>
=> int2 = 17 : <type 'int'>
==================================================
int1 = 7                                                                 # STEP 1
ACTION: int1 = 7 
int1 = None : <type 'NoneType'>
=> int1 = 7 : <type 'int'>
==================================================
int3 = 19                                                                # STEP 2
ACTION: int3 = 19 
int3 = None : <type 'NoneType'>
=> int3 = 19 : <type 'int'>
==================================================
int0 = 11                                                                # STEP 3
ACTION: int0 = 11 
int0 = None : <type 'NoneType'>
=> int0 = 11 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 4
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x1059b2cb0> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
result = avl0.inorder()                                                  # STEP 5
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x1059b2cb0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int2)                                                        # STEP 6
ACTION: avl0.insert(int2) 
int2 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059b2cb0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([17]) : <type 'set'>
==================================================
int2 = 17                                                                # STEP 7
ACTION: int2 = 17 
int2 = 17 : <type 'int'>
==================================================
avl0.insert(int2)                                                        # STEP 8
ACTION: avl0.insert(int2) 
int2 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059b2cb0> : <type 'instance'>
avl_REF0 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl0.insert(int0)                                                        # STEP 9
ACTION: avl0.insert(int0) 
int0 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059b2cb0> : <type 'instance'>
avl_REF0 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([17, 11]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 10
ACTION: avl0.delete(int3) 
int3 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059b2cb0> : <type 'instance'>
avl_REF0 = set([17, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int3 = 3                                                                # STEP 11
ACTION: int3 = 3 
int3 = 19 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 12
ACTION: avl0.insert(int2) 
int2 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059b2cb0> : <type 'instance'>
avl_REF0 = set([17, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl0 == avl0                                                            # STEP 13
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x1059b2cb0> : <type 'instance'>
avl_REF0 = set([17, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl0.insert(int3)                                                       # STEP 14
ACTION: avl0.insert(int3) 
int3 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059b2cb0> : <type 'instance'>
avl_REF0 = set([17, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([3, 17, 11]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 15
ACTION: avl0.insert(int2) 
int2 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059b2cb0> : <type 'instance'>
avl_REF0 = set([3, 17, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl0.insert(int1)                                                       # STEP 16
ACTION: avl0.insert(int1) 
int1 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059b2cb0> : <type 'instance'>
avl_REF0 = set([3, 17, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([3, 17, 11, 7]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 17
ACTION: avl0.insert(int0) 
int0 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059b2cb0> : <type 'instance'>
avl_REF0 = set([3, 17, 11, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
avl0.insert(int0)                                                       # STEP 18
ACTION: avl0.insert(int0) 
int0 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059b2cb0> : <type 'instance'>
avl_REF0 = set([3, 17, 11, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
int3 = 13                                                               # STEP 19
ACTION: int3 = 13 
int3 = 3 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 20
ACTION: avl0.delete(int3) 
int3 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059b2cb0> : <type 'instance'>
avl_REF0 = set([3, 17, 11, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int0 = 3                                                                # STEP 21
ACTION: int0 = 3 
int0 = 11 : <type 'int'>
=> int0 = 3 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 22
ACTION: avl0.insert(int0) 
int0 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059b2cb0> : <type 'instance'>
avl_REF0 = set([3, 17, 11, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
avl0.delete(int1)                                                       # STEP 23
ACTION: avl0.delete(int1) 
int1 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059b2cb0> : <type 'instance'>
avl_REF0 = set([3, 17, 11, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([3, 17, 11]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 24
ACTION: avl0.insert(int1) 
int1 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059b2cb0> : <type 'instance'>
avl_REF0 = set([3, 17, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([3, 17, 11, 7]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 25
ACTION: avl0.delete(int3) 
int3 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059b2cb0> : <type 'instance'>
avl_REF0 = set([3, 17, 11, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.delete(int3)                                                       # STEP 26
ACTION: avl0.delete(int3) 
int3 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059b2cb0> : <type 'instance'>
avl_REF0 = set([3, 17, 11, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
result = avl0.inorder()                                                 # STEP 27
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x1059b2cb0> : <type 'instance'>
avl_REF0 = set([3, 17, 11, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int3 = 20                                                               # STEP 28
ACTION: int3 = 20 
int3 = 13 : <type 'int'>
=> int3 = 20 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 29
ACTION: avl0.delete(int2) 
int2 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059b2cb0> : <type 'instance'>
avl_REF0 = set([3, 17, 11, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([3, 11, 7]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1047a1170>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
  8 [2:0]
-- < 6 [1:1]
---- < 2 [0:0] L
-- > 13 [1:0]
---- < 11 [0:0] L
---- > 14 [0:0] L
set([2, 6, 8, 11, 13, 14])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105819710>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 43 steps

SAVING TEST AS failure.457.test.2
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 6                                                                 # STEP 0
ACTION: int1 = 6 
int1 = None : <type 'NoneType'>
=> int1 = 6 : <type 'int'>
==================================================
int3 = 17                                                                # STEP 1
ACTION: int3 = 17 
int3 = None : <type 'NoneType'>
=> int3 = 17 : <type 'int'>
==================================================
int2 = 7                                                                 # STEP 2
ACTION: int2 = 7 
int2 = None : <type 'NoneType'>
=> int2 = 7 : <type 'int'>
==================================================
int0 = 4                                                                 # STEP 3
ACTION: int0 = 4 
int0 = None : <type 'NoneType'>
=> int0 = 4 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x105819998> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int3)                                                        # STEP 5
ACTION: avl2.insert(int3) 
int3 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105819998> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([17]) : <type 'set'>
==================================================
int3 = 15                                                                # STEP 6
ACTION: int3 = 15 
int3 = 17 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
avl2.delete(int0)                                                        # STEP 7
ACTION: avl2.delete(int0) 
int0 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105819998> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int0 = 1                                                                 # STEP 8
ACTION: int0 = 1 
int0 = 4 : <type 'int'>
=> int0 = 1 : <type 'int'>
==================================================
avl2.delete(int0)                                                        # STEP 9
ACTION: avl2.delete(int0) 
int0 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105819998> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.delete(int3)                                                       # STEP 10
ACTION: avl2.delete(int3) 
int3 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105819998> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.delete(int1)                                                       # STEP 11
ACTION: avl2.delete(int1) 
int1 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105819998> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.delete(int2)                                                       # STEP 12
ACTION: avl2.delete(int2) 
int2 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105819998> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2 == avl2                                                            # STEP 13
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x105819998> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl2.insert(int3)                                                       # STEP 14
ACTION: avl2.insert(int3) 
int3 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105819998> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([17, 15]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 15
ACTION: avl2.insert(int0) 
int0 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105819998> : <type 'instance'>
avl_REF2 = set([17, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([17, 1, 15]) : <type 'set'>
==================================================
int3 = 20                                                               # STEP 16
ACTION: int3 = 20 
int3 = 15 : <type 'int'>
=> int3 = 20 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 17
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x10478ce18> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
result = avl2.find(int1)                                                # STEP 18
ACTION: result = avl2.find(int1) 
int1 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105819998> : <type 'instance'>
avl_REF2 = set([17, 1, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl0.delete(int3)                                                       # STEP 19
ACTION: avl0.delete(int3) 
int3 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10478ce18> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
result = avl2.find(int2)                                                # STEP 20
ACTION: result = avl2.find(int2) 
int2 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105819998> : <type 'instance'>
avl_REF2 = set([17, 1, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl0.insert(int2)                                                       # STEP 21
ACTION: avl0.insert(int2) 
int2 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10478ce18> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([7]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 22
ACTION: avl0.insert(int2) 
int2 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10478ce18> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
int0 = 16                                                               # STEP 23
ACTION: int0 = 16 
int0 = 1 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 24
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x1058351b8> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 25
ACTION: avl2.delete(int0) 
int0 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105819998> : <type 'instance'>
avl_REF2 = set([17, 1, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int3 = 3                                                                # STEP 26
ACTION: int3 = 3 
int3 = 20 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
int2 = 13                                                               # STEP 27
ACTION: int2 = 13 
int2 = 7 : <type 'int'>
=> int2 = 13 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 28
ACTION: avl2.insert(int0) 
int0 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105819998> : <type 'instance'>
avl_REF2 = set([17, 1, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([16, 17, 1, 15]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 29
ACTION: avl1.insert(int0) 
int0 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058351b8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([16]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 30
ACTION: avl2.insert(int2) 
int2 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105819998> : <type 'instance'>
avl_REF2 = set([16, 17, 1, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([16, 17, 1, 13, 15]) : <type 'set'>
==================================================
int2 = 8                                                                # STEP 31
ACTION: int2 = 8 
int2 = 13 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 32
ACTION: avl0.insert(int0) 
int0 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10478ce18> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([16, 7]) : <type 'set'>
==================================================
avl0 == avl2                                                            # STEP 33
ACTION: avl0 == avl2 
avl0 = <avl.AVLTree instance at 0x10478ce18> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x105819998> : <type 'instance'>
avl_REF0 = set([16, 7]) : <type 'set'>
avl_REF2 = set([16, 17, 1, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
avl2.delete(int0)                                                       # STEP 34
ACTION: avl2.delete(int0) 
int0 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105819998> : <type 'instance'>
avl_REF2 = set([16, 17, 1, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([17, 1, 13, 15]) : <type 'set'>
==================================================
int1 = 3                                                                # STEP 35
ACTION: int1 = 3 
int1 = 6 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
int0 = 17                                                               # STEP 36
ACTION: int0 = 17 
int0 = 16 : <type 'int'>
=> int0 = 17 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 37
ACTION: avl0.insert(int0) 
int0 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10478ce18> : <type 'instance'>
avl_REF0 = set([16, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([16, 17, 7]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 38
ACTION: avl2.insert(int3) 
int3 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105819998> : <type 'instance'>
avl_REF2 = set([17, 1, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([1, 3, 13, 15, 17]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 39
ACTION: avl1.delete(int0) 
int0 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058351b8> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl0.delete(int2)                                                       # STEP 40
ACTION: avl0.delete(int2) 
int2 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10478ce18> : <type 'instance'>
avl_REF0 = set([16, 17, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl1.delete(int2)                                                       # STEP 41
ACTION: avl1.delete(int2) 
int2 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058351b8> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl2.delete(int0)                                                       # STEP 42
ACTION: avl2.delete(int0) 
int0 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105819998> : <type 'instance'>
avl_REF2 = set([1, 3, 13, 15, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([1, 3, 13, 15]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105805560>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 3 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 18
STOPPING TESTING DUE TO TIMEOUT
8.58500169664 PERCENT COVERED
60.1981430054 TOTAL RUNTIME
9 EXECUTED
618 TOTAL TEST OPERATIONS
25.7965481281 TIME SPENT EXECUTING TEST OPERATIONS
0.0688621997833 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
25.884326458 TIME SPENT CHECKING PROPERTIES
51.6808745861 TOTAL TIME SPENT RUNNING SUT
0.00503849983215 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
3 FAILED
0 REPEATS OF FAILURES
3 ACTUAL DISTINCT FAILURES

FAILURE 0
avl1 = avl.AVLTree()                                                     # STEP 0
int1 = 3                                                                 # STEP 1
result = avl1.find(int1)                                                 # STEP 2
avl1.insert(int1)                                                        # STEP 3
avl1.insert(int1)                                                        # STEP 4
avl1.delete(int1)                                                        # STEP 5
avl1.insert(int1)                                                        # STEP 6
int2 = 19                                                                # STEP 7
int1 = 6                                                                 # STEP 8
avl1.delete(int2)                                                        # STEP 9
avl1.delete(int1)                                                       # STEP 10
avl1.insert(int2)                                                       # STEP 11
avl1.insert(int2)                                                       # STEP 12
avl1.delete(int2)                                                       # STEP 13
int1 = 10                                                               # STEP 14
avl1.delete(int1)                                                       # STEP 15
avl1.insert(int1)                                                       # STEP 16
result = avl1.inorder()                                                 # STEP 17
int1 = 7                                                                # STEP 18
avl1 == avl1                                                            # STEP 19
avl1.insert(int1)                                                       # STEP 20
int0 = 19                                                               # STEP 21
int1 = 16                                                               # STEP 22
avl1.delete(int0)                                                       # STEP 23
avl1.insert(int0)                                                       # STEP 24
int0 = 3                                                                # STEP 25
avl1.delete(int0)                                                       # STEP 26
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10433bf38>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE 1
int2 = 17                                                                # STEP 0
int1 = 7                                                                 # STEP 1
int3 = 19                                                                # STEP 2
int0 = 11                                                                # STEP 3
avl0 = avl.AVLTree()                                                     # STEP 4
result = avl0.inorder()                                                  # STEP 5
avl0.insert(int2)                                                        # STEP 6
int2 = 17                                                                # STEP 7
avl0.insert(int2)                                                        # STEP 8
avl0.insert(int0)                                                        # STEP 9
avl0.delete(int3)                                                       # STEP 10
int3 = 3                                                                # STEP 11
avl0.insert(int2)                                                       # STEP 12
avl0 == avl0                                                            # STEP 13
avl0.insert(int3)                                                       # STEP 14
avl0.insert(int2)                                                       # STEP 15
avl0.insert(int1)                                                       # STEP 16
avl0.insert(int0)                                                       # STEP 17
avl0.insert(int0)                                                       # STEP 18
int3 = 13                                                               # STEP 19
avl0.delete(int3)                                                       # STEP 20
int0 = 3                                                                # STEP 21
avl0.insert(int0)                                                       # STEP 22
avl0.delete(int1)                                                       # STEP 23
avl0.insert(int1)                                                       # STEP 24
avl0.delete(int3)                                                       # STEP 25
avl0.delete(int3)                                                       # STEP 26
result = avl0.inorder()                                                 # STEP 27
int3 = 20                                                               # STEP 28
avl0.delete(int2)                                                       # STEP 29
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1047a1170>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE 2
int1 = 6                                                                 # STEP 0
int3 = 17                                                                # STEP 1
int2 = 7                                                                 # STEP 2
int0 = 4                                                                 # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
avl2.insert(int3)                                                        # STEP 5
int3 = 15                                                                # STEP 6
avl2.delete(int0)                                                        # STEP 7
int0 = 1                                                                 # STEP 8
avl2.delete(int0)                                                        # STEP 9
avl2.delete(int3)                                                       # STEP 10
avl2.delete(int1)                                                       # STEP 11
avl2.delete(int2)                                                       # STEP 12
avl2 == avl2                                                            # STEP 13
avl2.insert(int3)                                                       # STEP 14
avl2.insert(int0)                                                       # STEP 15
int3 = 20                                                               # STEP 16
avl0 = avl.AVLTree()                                                    # STEP 17
result = avl2.find(int1)                                                # STEP 18
avl0.delete(int3)                                                       # STEP 19
result = avl2.find(int2)                                                # STEP 20
avl0.insert(int2)                                                       # STEP 21
avl0.insert(int2)                                                       # STEP 22
int0 = 16                                                               # STEP 23
avl1 = avl.AVLTree()                                                    # STEP 24
avl2.delete(int0)                                                       # STEP 25
int3 = 3                                                                # STEP 26
int2 = 13                                                               # STEP 27
avl2.insert(int0)                                                       # STEP 28
avl1.insert(int0)                                                       # STEP 29
avl2.insert(int2)                                                       # STEP 30
int2 = 8                                                                # STEP 31
avl0.insert(int0)                                                       # STEP 32
avl0 == avl2                                                            # STEP 33
avl2.delete(int0)                                                       # STEP 34
int1 = 3                                                                # STEP 35
int0 = 17                                                               # STEP 36
avl0.insert(int0)                                                       # STEP 37
avl2.insert(int3)                                                       # STEP 38
avl1.delete(int0)                                                       # STEP 39
avl0.delete(int2)                                                       # STEP 40
avl1.delete(int2)                                                       # STEP 41
avl2.delete(int0)                                                       # STEP 42
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105805560>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
216 BRANCHES COVERED
162 STATEMENTS COVERED

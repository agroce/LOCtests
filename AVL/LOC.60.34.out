Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.99780.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  12 [2:0]
-- < 3 [1:0]
---- < 2 [0:0] L
---- > 7 [0:0] L
-- > 17 [1:1]
---- < 16 [0:0] L
set([2, 3, 7, 12, 16, 17])
  12 [3:1]
-- < 3 [2:-1]
---- < 2 [0:0] L
---- > 7 [1:1]
------ < 6 [0:0] L
-- > 17 [1:1]
---- < 16 [0:0] L
set([2, 3, 6, 7, 12, 16, 17])
  12 [2:0]
-- < 2 [1:0]
---- < 1 [0:0] L
---- > 3 [0:0] L
-- > 16 [1:-1]
---- > 17 [0:0] L
set([1, 2, 3, 12, 16, 17])
  12 [3:1]
-- < 2 [2:-1]
---- < 1 [0:0] L
---- > 3 [1:-1]
------ > 7 [0:0] L
-- > 16 [1:-1]
---- > 17 [0:0] L
set([1, 2, 3, 7, 12, 16, 17])
TEST #4 STEP #79 (0:00:30.049744) Fri Apr 28 04:54:53 2017 [ 163 stmts 218 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104b1c878>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 45 steps

SAVING TEST AS failure.99780.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
avl1 = avl.AVLTree()                                                     # STEP 0
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x104bee998> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
result = avl1.inorder()                                                  # STEP 1
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104bee998> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
result = avl1.inorder()                                                  # STEP 2
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104bee998> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
result = avl1.inorder()                                                  # STEP 3
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104bee998> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int0 = 13                                                                # STEP 4
ACTION: int0 = 13 
int0 = None : <type 'NoneType'>
=> int0 = 13 : <type 'int'>
==================================================
avl1 == avl1                                                             # STEP 5
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x104bee998> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
result = avl1.find(int0)                                                 # STEP 6
ACTION: result = avl1.find(int0) 
int0 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104bee998> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
int0 = 6                                                                 # STEP 7
ACTION: int0 = 6 
int0 = 13 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
result = avl1.find(int0)                                                 # STEP 8
ACTION: result = avl1.find(int0) 
int0 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104bee998> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl1.delete(int0)                                                        # STEP 9
ACTION: avl1.delete(int0) 
int0 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104bee998> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int0 = 3                                                                # STEP 10
ACTION: int0 = 3 
int0 = 6 : <type 'int'>
=> int0 = 3 : <type 'int'>
==================================================
int3 = 20                                                               # STEP 11
ACTION: int3 = 20 
int3 = None : <type 'NoneType'>
=> int3 = 20 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 12
ACTION: avl1.insert(int3) 
int3 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104bee998> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([20]) : <type 'set'>
==================================================
int3 = 9                                                                # STEP 13
ACTION: int3 = 9 
int3 = 20 : <type 'int'>
=> int3 = 9 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 14
ACTION: avl1.insert(int3) 
int3 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104bee998> : <type 'instance'>
avl_REF1 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([9, 20]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 15
ACTION: avl1.insert(int3) 
int3 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104bee998> : <type 'instance'>
avl_REF1 = set([9, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
avl1.insert(int0)                                                       # STEP 16
ACTION: avl1.insert(int0) 
int0 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104bee998> : <type 'instance'>
avl_REF1 = set([9, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([9, 3, 20]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 17
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104bee998> : <type 'instance'>
avl_REF1 = set([9, 3, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int3 = 12                                                               # STEP 18
ACTION: int3 = 12 
int3 = 9 : <type 'int'>
=> int3 = 12 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 19
ACTION: avl1.insert(int3) 
int3 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104bee998> : <type 'instance'>
avl_REF1 = set([9, 3, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([9, 3, 20, 12]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 20
ACTION: avl1.insert(int0) 
int0 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104bee998> : <type 'instance'>
avl_REF1 = set([9, 3, 20, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.delete(int3)                                                       # STEP 21
ACTION: avl1.delete(int3) 
int3 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104bee998> : <type 'instance'>
avl_REF1 = set([9, 3, 20, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([9, 3, 20]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 22
ACTION: avl1.delete(int0) 
int0 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104bee998> : <type 'instance'>
avl_REF1 = set([9, 3, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([9, 20]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 23
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104bee998> : <type 'instance'>
avl_REF1 = set([9, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int1 = 7                                                                # STEP 24
ACTION: int1 = 7 
int1 = None : <type 'NoneType'>
=> int1 = 7 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 25
ACTION: avl1.insert(int0) 
int0 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104bee998> : <type 'instance'>
avl_REF1 = set([9, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([9, 3, 20]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 26
ACTION: avl1.insert(int0) 
int0 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104bee998> : <type 'instance'>
avl_REF1 = set([9, 3, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.delete(int1)                                                       # STEP 27
ACTION: avl1.delete(int1) 
int1 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104bee998> : <type 'instance'>
avl_REF1 = set([9, 3, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
result = avl1.inorder()                                                 # STEP 28
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104bee998> : <type 'instance'>
avl_REF1 = set([9, 3, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int3)                                                       # STEP 29
ACTION: avl1.insert(int3) 
int3 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104bee998> : <type 'instance'>
avl_REF1 = set([9, 3, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([9, 3, 20, 12]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 30
ACTION: avl1.insert(int1) 
int1 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104bee998> : <type 'instance'>
avl_REF1 = set([9, 3, 20, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([9, 3, 20, 12, 7]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 31
ACTION: avl1.insert(int3) 
int3 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104bee998> : <type 'instance'>
avl_REF1 = set([9, 3, 20, 12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
avl1 == avl1                                                            # STEP 32
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x104bee998> : <type 'instance'>
avl_REF1 = set([9, 3, 20, 12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.delete(int0)                                                       # STEP 33
ACTION: avl1.delete(int0) 
int0 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104bee998> : <type 'instance'>
avl_REF1 = set([9, 3, 20, 12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([9, 20, 12, 7]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 34
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104bee998> : <type 'instance'>
avl_REF1 = set([9, 20, 12, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int0)                                                       # STEP 35
ACTION: avl1.insert(int0) 
int0 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104bee998> : <type 'instance'>
avl_REF1 = set([9, 20, 12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([9, 3, 20, 12, 7]) : <type 'set'>
==================================================
result = avl1.find(int1)                                                # STEP 36
ACTION: result = avl1.find(int1) 
int1 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104bee998> : <type 'instance'>
avl_REF1 = set([9, 3, 20, 12, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
result = avl1.find(int1)                                                # STEP 37
ACTION: result = avl1.find(int1) 
int1 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104bee998> : <type 'instance'>
avl_REF1 = set([9, 3, 20, 12, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
result = avl1.inorder()                                                 # STEP 38
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104bee998> : <type 'instance'>
avl_REF1 = set([9, 3, 20, 12, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int3)                                                       # STEP 39
ACTION: avl1.insert(int3) 
int3 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104bee998> : <type 'instance'>
avl_REF1 = set([9, 3, 20, 12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
avl1.delete(int0)                                                       # STEP 40
ACTION: avl1.delete(int0) 
int0 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104bee998> : <type 'instance'>
avl_REF1 = set([9, 3, 20, 12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([9, 20, 12, 7]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 41
ACTION: avl1.insert(int1) 
int1 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104bee998> : <type 'instance'>
avl_REF1 = set([9, 20, 12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
result = avl1.inorder()                                                 # STEP 42
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104bee998> : <type 'instance'>
avl_REF1 = set([9, 20, 12, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int0 = 13                                                               # STEP 43
ACTION: int0 = 13 
int0 = 3 : <type 'int'>
=> int0 = 13 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 44
ACTION: avl1.delete(int1) 
int1 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104bee998> : <type 'instance'>
avl_REF1 = set([9, 20, 12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([9, 20, 12]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10589c1b8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10589d050>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
Original test has 58 steps

SAVING TEST AS failure.99780.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 6                                                                 # STEP 0
ACTION: int1 = 6 
int1 = None : <type 'NoneType'>
=> int1 = 6 : <type 'int'>
==================================================
int2 = 16                                                                # STEP 1
ACTION: int2 = 16 
int2 = None : <type 'NoneType'>
=> int2 = 16 : <type 'int'>
==================================================
int0 = 5                                                                 # STEP 2
ACTION: int0 = 5 
int0 = None : <type 'NoneType'>
=> int0 = 5 : <type 'int'>
==================================================
int3 = 6                                                                 # STEP 3
ACTION: int3 = 6 
int3 = None : <type 'NoneType'>
=> int3 = 6 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 4
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x10589d7a0> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
result = avl0.inorder()                                                  # STEP 5
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x10589d7a0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.delete(int0)                                                        # STEP 6
ACTION: avl0.delete(int0) 
int0 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10589d7a0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int0 = 13                                                                # STEP 7
ACTION: int0 = 13 
int0 = 5 : <type 'int'>
=> int0 = 13 : <type 'int'>
==================================================
result = avl0.find(int1)                                                 # STEP 8
ACTION: result = avl0.find(int1) 
int1 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10589d7a0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
int1 = 14                                                                # STEP 9
ACTION: int1 = 14 
int1 = 6 : <type 'int'>
=> int1 = 14 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 10
ACTION: avl0.delete(int0) 
int0 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10589d7a0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int0 = 15                                                               # STEP 11
ACTION: int0 = 15 
int0 = 13 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 12
ACTION: avl0.insert(int3) 
int3 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10589d7a0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([6]) : <type 'set'>
==================================================
int3 = 15                                                               # STEP 13
ACTION: int3 = 15 
int3 = 6 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 14
ACTION: avl0.delete(int3) 
int3 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10589d7a0> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.insert(int2)                                                       # STEP 15
ACTION: avl0.insert(int2) 
int2 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10589d7a0> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([16, 6]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 16
ACTION: avl0.insert(int0) 
int0 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10589d7a0> : <type 'instance'>
avl_REF0 = set([16, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([16, 6, 15]) : <type 'set'>
==================================================
int0 = 13                                                               # STEP 17
ACTION: int0 = 13 
int0 = 15 : <type 'int'>
=> int0 = 13 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 18
ACTION: avl0.delete(int3) 
int3 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10589d7a0> : <type 'instance'>
avl_REF0 = set([16, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([16, 6]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 19
ACTION: avl0.insert(int1) 
int1 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10589d7a0> : <type 'instance'>
avl_REF0 = set([16, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([16, 14, 6]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 20
ACTION: avl0.insert(int3) 
int3 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10589d7a0> : <type 'instance'>
avl_REF0 = set([16, 14, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([16, 14, 6, 15]) : <type 'set'>
==================================================
result = avl0.find(int0)                                                # STEP 21
ACTION: result = avl0.find(int0) 
int0 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10589d7a0> : <type 'instance'>
avl_REF0 = set([16, 14, 6, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
result = avl0.find(int3)                                                # STEP 22
ACTION: result = avl0.find(int3) 
int3 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10589d7a0> : <type 'instance'>
avl_REF0 = set([16, 14, 6, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
avl0.insert(int2)                                                       # STEP 23
ACTION: avl0.insert(int2) 
int2 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10589d7a0> : <type 'instance'>
avl_REF0 = set([16, 14, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl0.insert(int3)                                                       # STEP 24
ACTION: avl0.insert(int3) 
int3 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10589d7a0> : <type 'instance'>
avl_REF0 = set([16, 14, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
result = avl0.find(int2)                                                # STEP 25
ACTION: result = avl0.find(int2) 
int2 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10589d7a0> : <type 'instance'>
avl_REF0 = set([16, 14, 6, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl0.delete(int0)                                                       # STEP 26
ACTION: avl0.delete(int0) 
int0 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10589d7a0> : <type 'instance'>
avl_REF0 = set([16, 14, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.insert(int3)                                                       # STEP 27
ACTION: avl0.insert(int3) 
int3 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10589d7a0> : <type 'instance'>
avl_REF0 = set([16, 14, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
avl0.insert(int2)                                                       # STEP 28
ACTION: avl0.insert(int2) 
int2 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10589d7a0> : <type 'instance'>
avl_REF0 = set([16, 14, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
int1 = 3                                                                # STEP 29
ACTION: int1 = 3 
int1 = 14 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 30
ACTION: avl0.insert(int3) 
int3 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10589d7a0> : <type 'instance'>
avl_REF0 = set([16, 14, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
result = avl0.find(int3)                                                # STEP 31
ACTION: result = avl0.find(int3) 
int3 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10589d7a0> : <type 'instance'>
avl_REF0 = set([16, 14, 6, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
avl0.insert(int2)                                                       # STEP 32
ACTION: avl0.insert(int2) 
int2 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10589d7a0> : <type 'instance'>
avl_REF0 = set([16, 14, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
result = avl0.find(int1)                                                # STEP 33
ACTION: result = avl0.find(int1) 
int1 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10589d7a0> : <type 'instance'>
avl_REF0 = set([16, 14, 6, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
int1 = 19                                                               # STEP 34
ACTION: int1 = 19 
int1 = 3 : <type 'int'>
=> int1 = 19 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 35
ACTION: avl0.delete(int3) 
int3 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10589d7a0> : <type 'instance'>
avl_REF0 = set([16, 14, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([16, 14, 6]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 36
ACTION: avl0.insert(int2) 
int2 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10589d7a0> : <type 'instance'>
avl_REF0 = set([16, 14, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl0.delete(int3)                                                       # STEP 37
ACTION: avl0.delete(int3) 
int3 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10589d7a0> : <type 'instance'>
avl_REF0 = set([16, 14, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
result = avl0.inorder()                                                 # STEP 38
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x10589d7a0> : <type 'instance'>
avl_REF0 = set([16, 14, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.delete(int0)                                                       # STEP 39
ACTION: avl0.delete(int0) 
int0 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10589d7a0> : <type 'instance'>
avl_REF0 = set([16, 14, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.delete(int0)                                                       # STEP 40
ACTION: avl0.delete(int0) 
int0 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10589d7a0> : <type 'instance'>
avl_REF0 = set([16, 14, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.insert(int2)                                                       # STEP 41
ACTION: avl0.insert(int2) 
int2 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10589d7a0> : <type 'instance'>
avl_REF0 = set([16, 14, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl0.insert(int2)                                                       # STEP 42
ACTION: avl0.insert(int2) 
int2 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10589d7a0> : <type 'instance'>
avl_REF0 = set([16, 14, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl0.delete(int1)                                                       # STEP 43
ACTION: avl0.delete(int1) 
int1 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10589d7a0> : <type 'instance'>
avl_REF0 = set([16, 14, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.insert(int1)                                                       # STEP 44
ACTION: avl0.insert(int1) 
int1 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10589d7a0> : <type 'instance'>
avl_REF0 = set([16, 14, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([16, 19, 14, 6]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 45
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x10589d7a0> : <type 'instance'>
avl_REF0 = set([16, 19, 14, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.delete(int1)                                                       # STEP 46
ACTION: avl0.delete(int1) 
int1 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10589d7a0> : <type 'instance'>
avl_REF0 = set([16, 19, 14, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([16, 14, 6]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 47
ACTION: avl0.delete(int3) 
int3 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10589d7a0> : <type 'instance'>
avl_REF0 = set([16, 14, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.insert(int2)                                                       # STEP 48
ACTION: avl0.insert(int2) 
int2 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10589d7a0> : <type 'instance'>
avl_REF0 = set([16, 14, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
int1 = 13                                                               # STEP 49
ACTION: int1 = 13 
int1 = 19 : <type 'int'>
=> int1 = 13 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 50
ACTION: avl0.delete(int3) 
int3 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10589d7a0> : <type 'instance'>
avl_REF0 = set([16, 14, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int0 = 8                                                                # STEP 51
ACTION: int0 = 8 
int0 = 13 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
result = avl0.find(int3)                                                # STEP 52
ACTION: result = avl0.find(int3) 
int3 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10589d7a0> : <type 'instance'>
avl_REF0 = set([16, 14, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
result = avl0.inorder()                                                 # STEP 53
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x10589d7a0> : <type 'instance'>
avl_REF0 = set([16, 14, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
result = avl0.find(int3)                                                # STEP 54
ACTION: result = avl0.find(int3) 
int3 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10589d7a0> : <type 'instance'>
avl_REF0 = set([16, 14, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
avl0.insert(int0)                                                       # STEP 55
ACTION: avl0.insert(int0) 
int0 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10589d7a0> : <type 'instance'>
avl_REF0 = set([16, 14, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([6, 8, 14, 16]) : <type 'set'>
==================================================
int0 = 17                                                               # STEP 56
ACTION: int0 = 17 
int0 = 8 : <type 'int'>
=> int0 = 17 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 57
ACTION: avl0.delete(int2) 
int2 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10589d7a0> : <type 'instance'>
avl_REF0 = set([6, 8, 14, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([6, 8, 14]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104f1f488>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104f11d40>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 35 steps

SAVING TEST AS failure.99780.test.2
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
avl2 = avl.AVLTree()                                                     # STEP 0
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x1058a85a8> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 1
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x104f11ea8> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int0 = 4                                                                 # STEP 2
ACTION: int0 = 4 
int0 = None : <type 'NoneType'>
=> int0 = 4 : <type 'int'>
==================================================
int3 = 12                                                                # STEP 3
ACTION: int3 = 12 
int3 = None : <type 'NoneType'>
=> int3 = 12 : <type 'int'>
==================================================
avl2.insert(int3)                                                        # STEP 4
ACTION: avl2.insert(int3) 
int3 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058a85a8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([12]) : <type 'set'>
==================================================
avl1.insert(int0)                                                        # STEP 5
ACTION: avl1.insert(int0) 
int0 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f11ea8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([4]) : <type 'set'>
==================================================
avl2.delete(int3)                                                        # STEP 6
ACTION: avl2.delete(int3) 
int3 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058a85a8> : <type 'instance'>
avl_REF2 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int3)                                                        # STEP 7
ACTION: avl2.insert(int3) 
int3 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058a85a8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([12]) : <type 'set'>
==================================================
result = avl1.find(int0)                                                 # STEP 8
ACTION: result = avl1.find(int0) 
int0 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f11ea8> : <type 'instance'>
avl_REF1 = set([4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl2.insert(int3)                                                        # STEP 9
ACTION: avl2.insert(int3) 
int3 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058a85a8> : <type 'instance'>
avl_REF2 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
avl2 == avl2                                                            # STEP 10
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x1058a85a8> : <type 'instance'>
avl_REF2 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
int3 = 17                                                               # STEP 11
ACTION: int3 = 17 
int3 = 12 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
int1 = 13                                                               # STEP 12
ACTION: int1 = 13 
int1 = None : <type 'NoneType'>
=> int1 = 13 : <type 'int'>
==================================================
int0 = 6                                                                # STEP 13
ACTION: int0 = 6 
int0 = 4 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 14
ACTION: avl2.insert(int1) 
int1 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058a85a8> : <type 'instance'>
avl_REF2 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([12, 13]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 15
ACTION: avl1.delete(int0) 
int0 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f11ea8> : <type 'instance'>
avl_REF1 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.insert(int3)                                                       # STEP 16
ACTION: avl1.insert(int3) 
int3 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f11ea8> : <type 'instance'>
avl_REF1 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([17, 4]) : <type 'set'>
==================================================
result = avl2.find(int3)                                                # STEP 17
ACTION: result = avl2.find(int3) 
int3 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058a85a8> : <type 'instance'>
avl_REF2 = set([12, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl2.delete(int1)                                                       # STEP 18
ACTION: avl2.delete(int1) 
int1 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058a85a8> : <type 'instance'>
avl_REF2 = set([12, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([12]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 19
ACTION: avl1.delete(int0) 
int0 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f11ea8> : <type 'instance'>
avl_REF1 = set([17, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
result = avl2.find(int3)                                                # STEP 20
ACTION: result = avl2.find(int3) 
int3 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058a85a8> : <type 'instance'>
avl_REF2 = set([12]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl1.delete(int1)                                                       # STEP 21
ACTION: avl1.delete(int1) 
int1 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f11ea8> : <type 'instance'>
avl_REF1 = set([17, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.insert(int3)                                                       # STEP 22
ACTION: avl1.insert(int3) 
int3 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f11ea8> : <type 'instance'>
avl_REF1 = set([17, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
int0 = 11                                                               # STEP 23
ACTION: int0 = 11 
int0 = 6 : <type 'int'>
=> int0 = 11 : <type 'int'>
==================================================
int3 = 5                                                                # STEP 24
ACTION: int3 = 5 
int3 = 17 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
int2 = 6                                                                # STEP 25
ACTION: int2 = 6 
int2 = None : <type 'NoneType'>
=> int2 = 6 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 26
ACTION: avl1.delete(int0) 
int0 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f11ea8> : <type 'instance'>
avl_REF1 = set([17, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
result = avl1.find(int3)                                                # STEP 27
ACTION: result = avl1.find(int3) 
int3 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f11ea8> : <type 'instance'>
avl_REF1 = set([17, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl2.insert(int3)                                                       # STEP 28
ACTION: avl2.insert(int3) 
int3 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058a85a8> : <type 'instance'>
avl_REF2 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([12, 5]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 29
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x1058a85a8> : <type 'instance'>
avl_REF2 = set([12, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int3 = 12                                                               # STEP 30
ACTION: int3 = 12 
int3 = 5 : <type 'int'>
=> int3 = 12 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 31
ACTION: avl2.insert(int1) 
int1 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058a85a8> : <type 'instance'>
avl_REF2 = set([12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([12, 5, 13]) : <type 'set'>
==================================================
int0 = 1                                                                # STEP 32
ACTION: int0 = 1 
int0 = 11 : <type 'int'>
=> int0 = 1 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 33
ACTION: avl2.insert(int2) 
int2 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058a85a8> : <type 'instance'>
avl_REF2 = set([12, 5, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([12, 5, 6, 13]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 34
ACTION: avl2.delete(int1) 
int1 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058a85a8> : <type 'instance'>
avl_REF2 = set([12, 5, 6, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([12, 5, 6]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10581e908>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 3 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104f35050>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 35 steps

SAVING TEST AS failure.99780.test.3
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 16                                                                # STEP 0
ACTION: int1 = 16 
int1 = None : <type 'NoneType'>
=> int1 = 16 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 1
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x104f11c20> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
result = avl1.find(int1)                                                 # STEP 2
ACTION: result = avl1.find(int1) 
int1 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f11c20> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl1.delete(int1)                                                        # STEP 3
ACTION: avl1.delete(int1) 
int1 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f11c20> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.insert(int1)                                                        # STEP 4
ACTION: avl1.insert(int1) 
int1 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f11c20> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([16]) : <type 'set'>
==================================================
result = avl1.find(int1)                                                 # STEP 5
ACTION: result = avl1.find(int1) 
int1 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f11c20> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
result = avl1.find(int1)                                                 # STEP 6
ACTION: result = avl1.find(int1) 
int1 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f11c20> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl1.insert(int1)                                                        # STEP 7
ACTION: avl1.insert(int1) 
int1 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f11c20> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl1 == avl1                                                             # STEP 8
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x104f11c20> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.insert(int1)                                                        # STEP 9
ACTION: avl1.insert(int1) 
int1 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f11c20> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
int1 = 5                                                                # STEP 10
ACTION: int1 = 5 
int1 = 16 : <type 'int'>
=> int1 = 5 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 11
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x1058119e0> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 12
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104f11c20> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl2.insert(int1)                                                       # STEP 13
ACTION: avl2.insert(int1) 
int1 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058119e0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([5]) : <type 'set'>
==================================================
int1 = 20                                                               # STEP 14
ACTION: int1 = 20 
int1 = 5 : <type 'int'>
=> int1 = 20 : <type 'int'>
==================================================
int0 = 12                                                               # STEP 15
ACTION: int0 = 12 
int0 = None : <type 'NoneType'>
=> int0 = 12 : <type 'int'>
==================================================
int2 = 3                                                                # STEP 16
ACTION: int2 = 3 
int2 = None : <type 'NoneType'>
=> int2 = 3 : <type 'int'>
==================================================
int3 = 19                                                               # STEP 17
ACTION: int3 = 19 
int3 = None : <type 'NoneType'>
=> int3 = 19 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 18
ACTION: avl2.insert(int3) 
int3 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058119e0> : <type 'instance'>
avl_REF2 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([19, 5]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 19
ACTION: avl2.insert(int1) 
int1 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058119e0> : <type 'instance'>
avl_REF2 = set([19, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([19, 20, 5]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 20
ACTION: avl2.insert(int2) 
int2 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058119e0> : <type 'instance'>
avl_REF2 = set([19, 20, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([3, 19, 20, 5]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 21
ACTION: avl2.insert(int0) 
int0 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058119e0> : <type 'instance'>
avl_REF2 = set([3, 19, 20, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([3, 12, 19, 20, 5]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 22
ACTION: avl2.insert(int2) 
int2 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058119e0> : <type 'instance'>
avl_REF2 = set([3, 12, 19, 20, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl2.insert(int0)                                                       # STEP 23
ACTION: avl2.insert(int0) 
int0 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058119e0> : <type 'instance'>
avl_REF2 = set([3, 12, 19, 20, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl2.insert(int1)                                                       # STEP 24
ACTION: avl2.insert(int1) 
int1 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058119e0> : <type 'instance'>
avl_REF2 = set([3, 12, 19, 20, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl2.insert(int3)                                                       # STEP 25
ACTION: avl2.insert(int3) 
int3 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058119e0> : <type 'instance'>
avl_REF2 = set([3, 12, 19, 20, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
avl2.insert(int0)                                                       # STEP 26
ACTION: avl2.insert(int0) 
int0 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058119e0> : <type 'instance'>
avl_REF2 = set([3, 12, 19, 20, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl1.delete(int2)                                                       # STEP 27
ACTION: avl1.delete(int2) 
int2 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f11c20> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int1 = 17                                                               # STEP 28
ACTION: int1 = 17 
int1 = 20 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
int3 = 10                                                               # STEP 29
ACTION: int3 = 10 
int3 = 19 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
int2 = 13                                                               # STEP 30
ACTION: int2 = 13 
int2 = 3 : <type 'int'>
=> int2 = 13 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 31
ACTION: avl1.insert(int2) 
int2 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f11c20> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([16, 13]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 32
ACTION: avl1.delete(int3) 
int3 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f11c20> : <type 'instance'>
avl_REF1 = set([16, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int0 = 20                                                               # STEP 33
ACTION: int0 = 20 
int0 = 12 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 34
ACTION: avl2.delete(int0) 
int0 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058119e0> : <type 'instance'>
avl_REF2 = set([3, 12, 19, 20, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([3, 12, 19, 5]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10582db48>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 4 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 21
STOPPING TESTING DUE TO TIMEOUT
8.72073294876 PERCENT COVERED
60.2366418839 TOTAL RUNTIME
9 EXECUTED
594 TOTAL TEST OPERATIONS
23.1971986294 TIME SPENT EXECUTING TEST OPERATIONS
0.0647206306458 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
23.4460937977 TIME SPENT CHECKING PROPERTIES
46.6432924271 TOTAL TIME SPENT RUNNING SUT
0.00496196746826 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
4 FAILED
0 REPEATS OF FAILURES
4 ACTUAL DISTINCT FAILURES

FAILURE 0
avl1 = avl.AVLTree()                                                     # STEP 0
result = avl1.inorder()                                                  # STEP 1
result = avl1.inorder()                                                  # STEP 2
result = avl1.inorder()                                                  # STEP 3
int0 = 13                                                                # STEP 4
avl1 == avl1                                                             # STEP 5
result = avl1.find(int0)                                                 # STEP 6
int0 = 6                                                                 # STEP 7
result = avl1.find(int0)                                                 # STEP 8
avl1.delete(int0)                                                        # STEP 9
int0 = 3                                                                # STEP 10
int3 = 20                                                               # STEP 11
avl1.insert(int3)                                                       # STEP 12
int3 = 9                                                                # STEP 13
avl1.insert(int3)                                                       # STEP 14
avl1.insert(int3)                                                       # STEP 15
avl1.insert(int0)                                                       # STEP 16
result = avl1.inorder()                                                 # STEP 17
int3 = 12                                                               # STEP 18
avl1.insert(int3)                                                       # STEP 19
avl1.insert(int0)                                                       # STEP 20
avl1.delete(int3)                                                       # STEP 21
avl1.delete(int0)                                                       # STEP 22
result = avl1.inorder()                                                 # STEP 23
int1 = 7                                                                # STEP 24
avl1.insert(int0)                                                       # STEP 25
avl1.insert(int0)                                                       # STEP 26
avl1.delete(int1)                                                       # STEP 27
result = avl1.inorder()                                                 # STEP 28
avl1.insert(int3)                                                       # STEP 29
avl1.insert(int1)                                                       # STEP 30
avl1.insert(int3)                                                       # STEP 31
avl1 == avl1                                                            # STEP 32
avl1.delete(int0)                                                       # STEP 33
result = avl1.inorder()                                                 # STEP 34
avl1.insert(int0)                                                       # STEP 35
result = avl1.find(int1)                                                # STEP 36
result = avl1.find(int1)                                                # STEP 37
result = avl1.inorder()                                                 # STEP 38
avl1.insert(int3)                                                       # STEP 39
avl1.delete(int0)                                                       # STEP 40
avl1.insert(int1)                                                       # STEP 41
result = avl1.inorder()                                                 # STEP 42
int0 = 13                                                               # STEP 43
avl1.delete(int1)                                                       # STEP 44
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10589c1b8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE 1
int1 = 6                                                                 # STEP 0
int2 = 16                                                                # STEP 1
int0 = 5                                                                 # STEP 2
int3 = 6                                                                 # STEP 3
avl0 = avl.AVLTree()                                                     # STEP 4
result = avl0.inorder()                                                  # STEP 5
avl0.delete(int0)                                                        # STEP 6
int0 = 13                                                                # STEP 7
result = avl0.find(int1)                                                 # STEP 8
int1 = 14                                                                # STEP 9
avl0.delete(int0)                                                       # STEP 10
int0 = 15                                                               # STEP 11
avl0.insert(int3)                                                       # STEP 12
int3 = 15                                                               # STEP 13
avl0.delete(int3)                                                       # STEP 14
avl0.insert(int2)                                                       # STEP 15
avl0.insert(int0)                                                       # STEP 16
int0 = 13                                                               # STEP 17
avl0.delete(int3)                                                       # STEP 18
avl0.insert(int1)                                                       # STEP 19
avl0.insert(int3)                                                       # STEP 20
result = avl0.find(int0)                                                # STEP 21
result = avl0.find(int3)                                                # STEP 22
avl0.insert(int2)                                                       # STEP 23
avl0.insert(int3)                                                       # STEP 24
result = avl0.find(int2)                                                # STEP 25
avl0.delete(int0)                                                       # STEP 26
avl0.insert(int3)                                                       # STEP 27
avl0.insert(int2)                                                       # STEP 28
int1 = 3                                                                # STEP 29
avl0.insert(int3)                                                       # STEP 30
result = avl0.find(int3)                                                # STEP 31
avl0.insert(int2)                                                       # STEP 32
result = avl0.find(int1)                                                # STEP 33
int1 = 19                                                               # STEP 34
avl0.delete(int3)                                                       # STEP 35
avl0.insert(int2)                                                       # STEP 36
avl0.delete(int3)                                                       # STEP 37
result = avl0.inorder()                                                 # STEP 38
avl0.delete(int0)                                                       # STEP 39
avl0.delete(int0)                                                       # STEP 40
avl0.insert(int2)                                                       # STEP 41
avl0.insert(int2)                                                       # STEP 42
avl0.delete(int1)                                                       # STEP 43
avl0.insert(int1)                                                       # STEP 44
result = avl0.inorder()                                                 # STEP 45
avl0.delete(int1)                                                       # STEP 46
avl0.delete(int3)                                                       # STEP 47
avl0.insert(int2)                                                       # STEP 48
int1 = 13                                                               # STEP 49
avl0.delete(int3)                                                       # STEP 50
int0 = 8                                                                # STEP 51
result = avl0.find(int3)                                                # STEP 52
result = avl0.inorder()                                                 # STEP 53
result = avl0.find(int3)                                                # STEP 54
avl0.insert(int0)                                                       # STEP 55
int0 = 17                                                               # STEP 56
avl0.delete(int2)                                                       # STEP 57
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104f1f488>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE 2
avl2 = avl.AVLTree()                                                     # STEP 0
avl1 = avl.AVLTree()                                                     # STEP 1
int0 = 4                                                                 # STEP 2
int3 = 12                                                                # STEP 3
avl2.insert(int3)                                                        # STEP 4
avl1.insert(int0)                                                        # STEP 5
avl2.delete(int3)                                                        # STEP 6
avl2.insert(int3)                                                        # STEP 7
result = avl1.find(int0)                                                 # STEP 8
avl2.insert(int3)                                                        # STEP 9
avl2 == avl2                                                            # STEP 10
int3 = 17                                                               # STEP 11
int1 = 13                                                               # STEP 12
int0 = 6                                                                # STEP 13
avl2.insert(int1)                                                       # STEP 14
avl1.delete(int0)                                                       # STEP 15
avl1.insert(int3)                                                       # STEP 16
result = avl2.find(int3)                                                # STEP 17
avl2.delete(int1)                                                       # STEP 18
avl1.delete(int0)                                                       # STEP 19
result = avl2.find(int3)                                                # STEP 20
avl1.delete(int1)                                                       # STEP 21
avl1.insert(int3)                                                       # STEP 22
int0 = 11                                                               # STEP 23
int3 = 5                                                                # STEP 24
int2 = 6                                                                # STEP 25
avl1.delete(int0)                                                       # STEP 26
result = avl1.find(int3)                                                # STEP 27
avl2.insert(int3)                                                       # STEP 28
result = avl2.inorder()                                                 # STEP 29
int3 = 12                                                               # STEP 30
avl2.insert(int1)                                                       # STEP 31
int0 = 1                                                                # STEP 32
avl2.insert(int2)                                                       # STEP 33
avl2.delete(int1)                                                       # STEP 34
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10581e908>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE 3
int1 = 16                                                                # STEP 0
avl1 = avl.AVLTree()                                                     # STEP 1
result = avl1.find(int1)                                                 # STEP 2
avl1.delete(int1)                                                        # STEP 3
avl1.insert(int1)                                                        # STEP 4
result = avl1.find(int1)                                                 # STEP 5
result = avl1.find(int1)                                                 # STEP 6
avl1.insert(int1)                                                        # STEP 7
avl1 == avl1                                                             # STEP 8
avl1.insert(int1)                                                        # STEP 9
int1 = 5                                                                # STEP 10
avl2 = avl.AVLTree()                                                    # STEP 11
result = avl1.inorder()                                                 # STEP 12
avl2.insert(int1)                                                       # STEP 13
int1 = 20                                                               # STEP 14
int0 = 12                                                               # STEP 15
int2 = 3                                                                # STEP 16
int3 = 19                                                               # STEP 17
avl2.insert(int3)                                                       # STEP 18
avl2.insert(int1)                                                       # STEP 19
avl2.insert(int2)                                                       # STEP 20
avl2.insert(int0)                                                       # STEP 21
avl2.insert(int2)                                                       # STEP 22
avl2.insert(int0)                                                       # STEP 23
avl2.insert(int1)                                                       # STEP 24
avl2.insert(int3)                                                       # STEP 25
avl2.insert(int0)                                                       # STEP 26
avl1.delete(int2)                                                       # STEP 27
int1 = 17                                                               # STEP 28
int3 = 10                                                               # STEP 29
int2 = 13                                                               # STEP 30
avl1.insert(int2)                                                       # STEP 31
avl1.delete(int3)                                                       # STEP 32
int0 = 20                                                               # STEP 33
avl2.delete(int0)                                                       # STEP 34
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10582db48>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
220 BRANCHES COVERED
164 STATEMENTS COVERED

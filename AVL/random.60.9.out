Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.99330.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1045a1878>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
Original test has 95 steps

SAVING TEST AS failure.99330.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 14                                                                # STEP 0
ACTION: int3 = 14 
int3 = None : <type 'NoneType'>
=> int3 = 14 : <type 'int'>
==================================================
int2 = 20                                                                # STEP 1
ACTION: int2 = 20 
int2 = None : <type 'NoneType'>
=> int2 = 20 : <type 'int'>
==================================================
int1 = 18                                                                # STEP 2
ACTION: int1 = 18 
int1 = None : <type 'NoneType'>
=> int1 = 18 : <type 'int'>
==================================================
int0 = 7                                                                 # STEP 3
ACTION: int0 = 7 
int0 = None : <type 'NoneType'>
=> int0 = 7 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x104428c20> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
result = avl1.find(int1)                                                 # STEP 5
ACTION: result = avl1.find(int1) 
int1 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104428c20> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl0 = avl.AVLTree()                                                     # STEP 6
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x104315200> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int1 = 1                                                                 # STEP 7
ACTION: int1 = 1 
int1 = 18 : <type 'int'>
=> int1 = 1 : <type 'int'>
==================================================
result = avl0.find(int1)                                                 # STEP 8
ACTION: result = avl0.find(int1) 
int1 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104315200> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
int1 = 19                                                                # STEP 9
ACTION: int1 = 19 
int1 = 1 : <type 'int'>
=> int1 = 19 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 10
ACTION: avl1.insert(int3) 
int3 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104428c20> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([14]) : <type 'set'>
==================================================
int3 = 6                                                                # STEP 11
ACTION: int3 = 6 
int3 = 14 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 12
ACTION: avl1.insert(int3) 
int3 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104428c20> : <type 'instance'>
avl_REF1 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([6, 14]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 13
ACTION: avl1.insert(int1) 
int1 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104428c20> : <type 'instance'>
avl_REF1 = set([6, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([19, 6, 14]) : <type 'set'>
==================================================
int1 = 12                                                               # STEP 14
ACTION: int1 = 12 
int1 = 19 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 15
ACTION: avl0.delete(int0) 
int0 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104315200> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int3 = 8                                                                # STEP 16
ACTION: int3 = 8 
int3 = 6 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 17
ACTION: avl1.delete(int2) 
int2 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104428c20> : <type 'instance'>
avl_REF1 = set([19, 6, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int2 = 3                                                                # STEP 18
ACTION: int2 = 3 
int2 = 20 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 19
ACTION: avl1.delete(int1) 
int1 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104428c20> : <type 'instance'>
avl_REF1 = set([19, 6, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl0.insert(int3)                                                       # STEP 20
ACTION: avl0.insert(int3) 
int3 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104315200> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([8]) : <type 'set'>
==================================================
int3 = 3                                                                # STEP 21
ACTION: int3 = 3 
int3 = 8 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 22
ACTION: avl0.delete(int1) 
int1 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104315200> : <type 'instance'>
avl_REF0 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int0 = 14                                                               # STEP 23
ACTION: int0 = 14 
int0 = 7 : <type 'int'>
=> int0 = 14 : <type 'int'>
==================================================
int1 = 19                                                               # STEP 24
ACTION: int1 = 19 
int1 = 12 : <type 'int'>
=> int1 = 19 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 25
ACTION: avl0.delete(int2) 
int2 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104315200> : <type 'instance'>
avl_REF0 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int2 = 16                                                               # STEP 26
ACTION: int2 = 16 
int2 = 3 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 27
ACTION: avl1.delete(int0) 
int0 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104428c20> : <type 'instance'>
avl_REF1 = set([19, 6, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([19, 6]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 28
ACTION: avl1.delete(int1) 
int1 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104428c20> : <type 'instance'>
avl_REF1 = set([19, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([6]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 29
ACTION: avl0.delete(int2) 
int2 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104315200> : <type 'instance'>
avl_REF0 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int2 = 11                                                               # STEP 30
ACTION: int2 = 11 
int2 = 16 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
int0 = 10                                                               # STEP 31
ACTION: int0 = 10 
int0 = 14 : <type 'int'>
=> int0 = 10 : <type 'int'>
==================================================
avl1 == avl0                                                            # STEP 32
ACTION: avl1 == avl0 
avl1 = <avl.AVLTree instance at 0x104428c20> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x104315200> : <type 'instance'>
avl_REF1 = set([6]) : <type 'set'>
avl_REF0 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
avl1.insert(int3)                                                       # STEP 33
ACTION: avl1.insert(int3) 
int3 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104428c20> : <type 'instance'>
avl_REF1 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([3, 6]) : <type 'set'>
==================================================
int1 = 1                                                                # STEP 34
ACTION: int1 = 1 
int1 = 19 : <type 'int'>
=> int1 = 1 : <type 'int'>
==================================================
int3 = 5                                                                # STEP 35
ACTION: int3 = 5 
int3 = 3 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 36
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104428c20> : <type 'instance'>
avl_REF1 = set([3, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl0.insert(int1)                                                       # STEP 37
ACTION: avl0.insert(int1) 
int1 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104315200> : <type 'instance'>
avl_REF0 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([8, 1]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 38
ACTION: avl0.insert(int1) 
int1 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104315200> : <type 'instance'>
avl_REF0 = set([8, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
result = avl1.find(int3)                                                # STEP 39
ACTION: result = avl1.find(int3) 
int3 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104428c20> : <type 'instance'>
avl_REF1 = set([3, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
int3 = 14                                                               # STEP 40
ACTION: int3 = 14 
int3 = 5 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
int1 = 19                                                               # STEP 41
ACTION: int1 = 19 
int1 = 1 : <type 'int'>
=> int1 = 19 : <type 'int'>
==================================================
avl1 == avl0                                                            # STEP 42
ACTION: avl1 == avl0 
avl1 = <avl.AVLTree instance at 0x104428c20> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x104315200> : <type 'instance'>
avl_REF1 = set([3, 6]) : <type 'set'>
avl_REF0 = set([8, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
avl0 == avl0                                                            # STEP 43
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x104315200> : <type 'instance'>
avl_REF0 = set([8, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl1.delete(int0)                                                       # STEP 44
ACTION: avl1.delete(int0) 
int0 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104428c20> : <type 'instance'>
avl_REF1 = set([3, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.insert(int0)                                                       # STEP 45
ACTION: avl1.insert(int0) 
int0 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104428c20> : <type 'instance'>
avl_REF1 = set([3, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([10, 3, 6]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 46
ACTION: avl0.insert(int3) 
int3 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104315200> : <type 'instance'>
avl_REF0 = set([8, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([8, 1, 14]) : <type 'set'>
==================================================
int0 = 4                                                                # STEP 47
ACTION: int0 = 4 
int0 = 10 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 48
ACTION: avl1 = avl.AVLTree() 
avl1 = <avl.AVLTree instance at 0x104428c20> : <type 'instance'>
avl_REF1 = set([10, 3, 6]) : <type 'set'>
=> avl1 = <avl.AVLTree instance at 0x10424c7e8> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
result = avl0.find(int3)                                                # STEP 49
ACTION: result = avl0.find(int3) 
int3 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104315200> : <type 'instance'>
avl_REF0 = set([8, 1, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
int3 = 17                                                               # STEP 50
ACTION: int3 = 17 
int3 = 14 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 51
ACTION: avl0.delete(int2) 
int2 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104315200> : <type 'instance'>
avl_REF0 = set([8, 1, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int2 = 5                                                                # STEP 52
ACTION: int2 = 5 
int2 = 11 : <type 'int'>
=> int2 = 5 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 53
ACTION: avl0.insert(int3) 
int3 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104315200> : <type 'instance'>
avl_REF0 = set([8, 1, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([8, 1, 14, 17]) : <type 'set'>
==================================================
int3 = 18                                                               # STEP 54
ACTION: int3 = 18 
int3 = 17 : <type 'int'>
=> int3 = 18 : <type 'int'>
==================================================
result = avl0.find(int2)                                                # STEP 55
ACTION: result = avl0.find(int2) 
int2 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104315200> : <type 'instance'>
avl_REF0 = set([8, 1, 14, 17]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
int2 = 11                                                               # STEP 56
ACTION: int2 = 11 
int2 = 5 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
result = avl1.find(int3)                                                # STEP 57
ACTION: result = avl1.find(int3) 
int3 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10424c7e8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
int3 = 13                                                               # STEP 58
ACTION: int3 = 13 
int3 = 18 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 59
ACTION: avl0.insert(int1) 
int1 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104315200> : <type 'instance'>
avl_REF0 = set([8, 1, 14, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([8, 1, 19, 14, 17]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 60
ACTION: avl0.delete(int2) 
int2 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104315200> : <type 'instance'>
avl_REF0 = set([8, 1, 19, 14, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int1 = 13                                                               # STEP 61
ACTION: int1 = 13 
int1 = 19 : <type 'int'>
=> int1 = 13 : <type 'int'>
==================================================
int2 = 1                                                                # STEP 62
ACTION: int2 = 1 
int2 = 11 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
result = avl0.find(int1)                                                # STEP 63
ACTION: result = avl0.find(int1) 
int1 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104315200> : <type 'instance'>
avl_REF0 = set([8, 1, 19, 14, 17]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl1.insert(int0)                                                       # STEP 64
ACTION: avl1.insert(int0) 
int0 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10424c7e8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([4]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 65
ACTION: avl0.delete(int3) 
int3 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104315200> : <type 'instance'>
avl_REF0 = set([8, 1, 19, 14, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int3 = 17                                                               # STEP 66
ACTION: int3 = 17 
int3 = 13 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 67
ACTION: avl0.delete(int1) 
int1 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104315200> : <type 'instance'>
avl_REF0 = set([8, 1, 19, 14, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int0 = 1                                                                # STEP 68
ACTION: int0 = 1 
int0 = 4 : <type 'int'>
=> int0 = 1 : <type 'int'>
==================================================
result = avl0.find(int3)                                                # STEP 69
ACTION: result = avl0.find(int3) 
int3 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104315200> : <type 'instance'>
avl_REF0 = set([8, 1, 19, 14, 17]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
int3 = 14                                                               # STEP 70
ACTION: int3 = 14 
int3 = 17 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
int1 = 2                                                                # STEP 71
ACTION: int1 = 2 
int1 = 13 : <type 'int'>
=> int1 = 2 : <type 'int'>
==================================================
result = avl0.find(int2)                                                # STEP 72
ACTION: result = avl0.find(int2) 
int2 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104315200> : <type 'instance'>
avl_REF0 = set([8, 1, 19, 14, 17]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
int2 = 14                                                               # STEP 73
ACTION: int2 = 14 
int2 = 1 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 74
ACTION: avl0.delete(int3) 
int3 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104315200> : <type 'instance'>
avl_REF0 = set([8, 1, 19, 14, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([8, 1, 19, 17]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 75
ACTION: avl0.insert(int2) 
int2 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104315200> : <type 'instance'>
avl_REF0 = set([8, 1, 19, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([8, 1, 19, 14, 17]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 76
ACTION: avl1.insert(int3) 
int3 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10424c7e8> : <type 'instance'>
avl_REF1 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([4, 14]) : <type 'set'>
==================================================
int2 = 10                                                               # STEP 77
ACTION: int2 = 10 
int2 = 14 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 78
ACTION: avl1.insert(int3) 
int3 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10424c7e8> : <type 'instance'>
avl_REF1 = set([4, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
int3 = 16                                                               # STEP 79
ACTION: int3 = 16 
int3 = 14 : <type 'int'>
=> int3 = 16 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 80
ACTION: avl1.insert(int1) 
int1 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10424c7e8> : <type 'instance'>
avl_REF1 = set([4, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([2, 4, 14]) : <type 'set'>
==================================================
int1 = 1                                                                # STEP 81
ACTION: int1 = 1 
int1 = 2 : <type 'int'>
=> int1 = 1 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 82
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104315200> : <type 'instance'>
avl_REF0 = set([8, 1, 19, 14, 17]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
result = avl0.find(int3)                                                # STEP 83
ACTION: result = avl0.find(int3) 
int3 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104315200> : <type 'instance'>
avl_REF0 = set([8, 1, 19, 14, 17]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
int3 = 1                                                                # STEP 84
ACTION: int3 = 1 
int3 = 16 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 85
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x10424c7e8> : <type 'instance'>
avl_REF1 = set([2, 4, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1 == avl1                                                            # STEP 86
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x10424c7e8> : <type 'instance'>
avl_REF1 = set([2, 4, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.delete(int2)                                                       # STEP 87
ACTION: avl1.delete(int2) 
int2 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10424c7e8> : <type 'instance'>
avl_REF1 = set([2, 4, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl0.insert(int3)                                                       # STEP 88
ACTION: avl0.insert(int3) 
int3 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104315200> : <type 'instance'>
avl_REF0 = set([8, 1, 19, 14, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
int2 = 4                                                                # STEP 89
ACTION: int2 = 4 
int2 = 10 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 90
ACTION: avl1.delete(int1) 
int1 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10424c7e8> : <type 'instance'>
avl_REF1 = set([2, 4, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl0 == avl1                                                            # STEP 91
ACTION: avl0 == avl1 
avl0 = <avl.AVLTree instance at 0x104315200> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x10424c7e8> : <type 'instance'>
avl_REF0 = set([8, 1, 19, 14, 17]) : <type 'set'>
avl_REF1 = set([2, 4, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF1 
==================================================
result = avl1.find(int2)                                                # STEP 92
ACTION: result = avl1.find(int2) 
int2 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10424c7e8> : <type 'instance'>
avl_REF1 = set([2, 4, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl1.delete(int0)                                                       # STEP 93
ACTION: avl1.delete(int0) 
int0 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10424c7e8> : <type 'instance'>
avl_REF1 = set([2, 4, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl0.delete(int1)                                                       # STEP 94
ACTION: avl0.delete(int1) 
int1 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104315200> : <type 'instance'>
avl_REF0 = set([8, 1, 19, 14, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([8, 19, 14, 17]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104246e18>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #4 STEP #16 (0:00:30.026463) Fri Apr 28 03:39:29 2017 [ 146 stmts 194 branches ]
  9 [2:0]
-- < 3 [1:0]
---- < 2 [0:0] L
---- > 5 [0:0] L
-- > 18 [1:0]
---- < 14 [0:0] L
---- > 20 [0:0] L
set([2, 3, 5, 9, 14, 18, 20])
  11 [2:0]
-- < 4 [1:0]
---- < 2 [0:0] L
---- > 9 [0:0] L
-- > 20 [1:1]
---- < 19 [0:0] L
set([2, 4, 9, 11, 19, 20])
  11 [2:0]
-- < 4 [1:0]
---- < 2 [0:0] L
---- > 9 [0:0] L
-- > 20 [1:1]
---- < 19 [0:0] L
set([2, 4, 9, 11, 19, 20])
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 6
STOPPING TESTING DUE TO TIMEOUT
8.6528673227 PERCENT COVERED
60.2360019684 TOTAL RUNTIME
8 EXECUTED
701 TOTAL TEST OPERATIONS
26.4070541859 TIME SPENT EXECUTING TEST OPERATIONS
0.0243446826935 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
26.6788268089 TIME SPENT CHECKING PROPERTIES
53.0858809948 TOTAL TIME SPENT RUNNING SUT
0.00449919700623 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int3 = 14                                                                # STEP 0
int2 = 20                                                                # STEP 1
int1 = 18                                                                # STEP 2
int0 = 7                                                                 # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
result = avl1.find(int1)                                                 # STEP 5
avl0 = avl.AVLTree()                                                     # STEP 6
int1 = 1                                                                 # STEP 7
result = avl0.find(int1)                                                 # STEP 8
int1 = 19                                                                # STEP 9
avl1.insert(int3)                                                       # STEP 10
int3 = 6                                                                # STEP 11
avl1.insert(int3)                                                       # STEP 12
avl1.insert(int1)                                                       # STEP 13
int1 = 12                                                               # STEP 14
avl0.delete(int0)                                                       # STEP 15
int3 = 8                                                                # STEP 16
avl1.delete(int2)                                                       # STEP 17
int2 = 3                                                                # STEP 18
avl1.delete(int1)                                                       # STEP 19
avl0.insert(int3)                                                       # STEP 20
int3 = 3                                                                # STEP 21
avl0.delete(int1)                                                       # STEP 22
int0 = 14                                                               # STEP 23
int1 = 19                                                               # STEP 24
avl0.delete(int2)                                                       # STEP 25
int2 = 16                                                               # STEP 26
avl1.delete(int0)                                                       # STEP 27
avl1.delete(int1)                                                       # STEP 28
avl0.delete(int2)                                                       # STEP 29
int2 = 11                                                               # STEP 30
int0 = 10                                                               # STEP 31
avl1 == avl0                                                            # STEP 32
avl1.insert(int3)                                                       # STEP 33
int1 = 1                                                                # STEP 34
int3 = 5                                                                # STEP 35
result = avl1.inorder()                                                 # STEP 36
avl0.insert(int1)                                                       # STEP 37
avl0.insert(int1)                                                       # STEP 38
result = avl1.find(int3)                                                # STEP 39
int3 = 14                                                               # STEP 40
int1 = 19                                                               # STEP 41
avl1 == avl0                                                            # STEP 42
avl0 == avl0                                                            # STEP 43
avl1.delete(int0)                                                       # STEP 44
avl1.insert(int0)                                                       # STEP 45
avl0.insert(int3)                                                       # STEP 46
int0 = 4                                                                # STEP 47
avl1 = avl.AVLTree()                                                    # STEP 48
result = avl0.find(int3)                                                # STEP 49
int3 = 17                                                               # STEP 50
avl0.delete(int2)                                                       # STEP 51
int2 = 5                                                                # STEP 52
avl0.insert(int3)                                                       # STEP 53
int3 = 18                                                               # STEP 54
result = avl0.find(int2)                                                # STEP 55
int2 = 11                                                               # STEP 56
result = avl1.find(int3)                                                # STEP 57
int3 = 13                                                               # STEP 58
avl0.insert(int1)                                                       # STEP 59
avl0.delete(int2)                                                       # STEP 60
int1 = 13                                                               # STEP 61
int2 = 1                                                                # STEP 62
result = avl0.find(int1)                                                # STEP 63
avl1.insert(int0)                                                       # STEP 64
avl0.delete(int3)                                                       # STEP 65
int3 = 17                                                               # STEP 66
avl0.delete(int1)                                                       # STEP 67
int0 = 1                                                                # STEP 68
result = avl0.find(int3)                                                # STEP 69
int3 = 14                                                               # STEP 70
int1 = 2                                                                # STEP 71
result = avl0.find(int2)                                                # STEP 72
int2 = 14                                                               # STEP 73
avl0.delete(int3)                                                       # STEP 74
avl0.insert(int2)                                                       # STEP 75
avl1.insert(int3)                                                       # STEP 76
int2 = 10                                                               # STEP 77
avl1.insert(int3)                                                       # STEP 78
int3 = 16                                                               # STEP 79
avl1.insert(int1)                                                       # STEP 80
int1 = 1                                                                # STEP 81
result = avl0.inorder()                                                 # STEP 82
result = avl0.find(int3)                                                # STEP 83
int3 = 1                                                                # STEP 84
result = avl1.inorder()                                                 # STEP 85
avl1 == avl1                                                            # STEP 86
avl1.delete(int2)                                                       # STEP 87
avl0.insert(int3)                                                       # STEP 88
int2 = 4                                                                # STEP 89
avl1.delete(int1)                                                       # STEP 90
avl0 == avl1                                                            # STEP 91
result = avl1.find(int2)                                                # STEP 92
avl1.delete(int0)                                                       # STEP 93
avl0.delete(int1)                                                       # STEP 94
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104246e18>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
218 BRANCHES COVERED
163 STATEMENTS COVERED

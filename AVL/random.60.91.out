Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.976.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1025fc680>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 65 steps

SAVING TEST AS failure.976.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 2                                                                 # STEP 0
ACTION: int1 = 2 
int1 = None : <type 'NoneType'>
=> int1 = 2 : <type 'int'>
==================================================
int3 = 19                                                                # STEP 1
ACTION: int3 = 19 
int3 = None : <type 'NoneType'>
=> int3 = 19 : <type 'int'>
==================================================
int2 = 5                                                                 # STEP 2
ACTION: int2 = 5 
int2 = None : <type 'NoneType'>
=> int2 = 5 : <type 'int'>
==================================================
int0 = 4                                                                 # STEP 3
ACTION: int0 = 4 
int0 = None : <type 'NoneType'>
=> int0 = 4 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x103fe4f38> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
result = avl1.find(int2)                                                 # STEP 5
ACTION: result = avl1.find(int2) 
int2 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103fe4f38> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl1.delete(int0)                                                        # STEP 6
ACTION: avl1.delete(int0) 
int0 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103fe4f38> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1 == avl1                                                             # STEP 7
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x103fe4f38> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
int0 = 12                                                                # STEP 8
ACTION: int0 = 12 
int0 = 4 : <type 'int'>
=> int0 = 12 : <type 'int'>
==================================================
avl1.insert(int1)                                                        # STEP 9
ACTION: avl1.insert(int1) 
int1 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103fe4f38> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([2]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 10
ACTION: avl1.insert(int3) 
int3 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103fe4f38> : <type 'instance'>
avl_REF1 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([2, 19]) : <type 'set'>
==================================================
int3 = 11                                                               # STEP 11
ACTION: int3 = 11 
int3 = 19 : <type 'int'>
=> int3 = 11 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 12
ACTION: avl1.delete(int2) 
int2 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103fe4f38> : <type 'instance'>
avl_REF1 = set([2, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.delete(int2)                                                       # STEP 13
ACTION: avl1.delete(int2) 
int2 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103fe4f38> : <type 'instance'>
avl_REF1 = set([2, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int1 = 3                                                                # STEP 14
ACTION: int1 = 3 
int1 = 2 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
int2 = 20                                                               # STEP 15
ACTION: int2 = 20 
int2 = 5 : <type 'int'>
=> int2 = 20 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 16
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x103fe4f38> : <type 'instance'>
avl_REF1 = set([2, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
result = avl1.find(int0)                                                # STEP 17
ACTION: result = avl1.find(int0) 
int0 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103fe4f38> : <type 'instance'>
avl_REF1 = set([2, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
result = avl1.find(int2)                                                # STEP 18
ACTION: result = avl1.find(int2) 
int2 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103fe4f38> : <type 'instance'>
avl_REF1 = set([2, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl1.insert(int3)                                                       # STEP 19
ACTION: avl1.insert(int3) 
int3 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103fe4f38> : <type 'instance'>
avl_REF1 = set([2, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([11, 2, 19]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 20
ACTION: avl1.delete(int2) 
int2 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103fe4f38> : <type 'instance'>
avl_REF1 = set([11, 2, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.delete(int3)                                                       # STEP 21
ACTION: avl1.delete(int3) 
int3 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103fe4f38> : <type 'instance'>
avl_REF1 = set([11, 2, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([2, 19]) : <type 'set'>
==================================================
int3 = 13                                                               # STEP 22
ACTION: int3 = 13 
int3 = 11 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
int2 = 15                                                               # STEP 23
ACTION: int2 = 15 
int2 = 20 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
int0 = 13                                                               # STEP 24
ACTION: int0 = 13 
int0 = 12 : <type 'int'>
=> int0 = 13 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 25
ACTION: avl1.insert(int3) 
int3 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103fe4f38> : <type 'instance'>
avl_REF1 = set([2, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([2, 19, 13]) : <type 'set'>
==================================================
result = avl1.find(int3)                                                # STEP 26
ACTION: result = avl1.find(int3) 
int3 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103fe4f38> : <type 'instance'>
avl_REF1 = set([2, 19, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
int3 = 8                                                                # STEP 27
ACTION: int3 = 8 
int3 = 13 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
result = avl1.find(int2)                                                # STEP 28
ACTION: result = avl1.find(int2) 
int2 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103fe4f38> : <type 'instance'>
avl_REF1 = set([2, 19, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int2 = 2                                                                # STEP 29
ACTION: int2 = 2 
int2 = 15 : <type 'int'>
=> int2 = 2 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 30
ACTION: avl1.delete(int0) 
int0 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103fe4f38> : <type 'instance'>
avl_REF1 = set([2, 19, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([2, 19]) : <type 'set'>
==================================================
result = avl1.find(int3)                                                # STEP 31
ACTION: result = avl1.find(int3) 
int3 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103fe4f38> : <type 'instance'>
avl_REF1 = set([2, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
int3 = 11                                                               # STEP 32
ACTION: int3 = 11 
int3 = 8 : <type 'int'>
=> int3 = 11 : <type 'int'>
==================================================
int0 = 8                                                                # STEP 33
ACTION: int0 = 8 
int0 = 13 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 34
ACTION: avl1.delete(int1) 
int1 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103fe4f38> : <type 'instance'>
avl_REF1 = set([2, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.insert(int0)                                                       # STEP 35
ACTION: avl1.insert(int0) 
int0 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103fe4f38> : <type 'instance'>
avl_REF1 = set([2, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([8, 2, 19]) : <type 'set'>
==================================================
int0 = 7                                                                # STEP 36
ACTION: int0 = 7 
int0 = 8 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
int1 = 18                                                               # STEP 37
ACTION: int1 = 18 
int1 = 3 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
result = avl1.find(int3)                                                # STEP 38
ACTION: result = avl1.find(int3) 
int3 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103fe4f38> : <type 'instance'>
avl_REF1 = set([8, 2, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
int3 = 12                                                               # STEP 39
ACTION: int3 = 12 
int3 = 11 : <type 'int'>
=> int3 = 12 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 40
ACTION: avl1.insert(int0) 
int0 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103fe4f38> : <type 'instance'>
avl_REF1 = set([8, 2, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([8, 2, 19, 7]) : <type 'set'>
==================================================
int0 = 6                                                                # STEP 41
ACTION: int0 = 6 
int0 = 7 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 42
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x103f85998> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 43
ACTION: avl1.insert(int2) 
int2 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103fe4f38> : <type 'instance'>
avl_REF1 = set([8, 2, 19, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
result = avl1.inorder()                                                 # STEP 44
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x103fe4f38> : <type 'instance'>
avl_REF1 = set([8, 2, 19, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int2 = 14                                                               # STEP 45
ACTION: int2 = 14 
int2 = 2 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
avl0 == avl1                                                            # STEP 46
ACTION: avl0 == avl1 
avl0 = <avl.AVLTree instance at 0x103f85998> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x103fe4f38> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
avl_REF1 = set([8, 2, 19, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF1 
==================================================
result = avl1.find(int3)                                                # STEP 47
ACTION: result = avl1.find(int3) 
int3 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103fe4f38> : <type 'instance'>
avl_REF1 = set([8, 2, 19, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
result = avl0.find(int0)                                                # STEP 48
ACTION: result = avl0.find(int0) 
int0 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103f85998> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
int3 = 7                                                                # STEP 49
ACTION: int3 = 7 
int3 = 12 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
int0 = 19                                                               # STEP 50
ACTION: int0 = 19 
int0 = 6 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 51
ACTION: avl1.insert(int3) 
int3 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103fe4f38> : <type 'instance'>
avl_REF1 = set([8, 2, 19, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
int3 = 1                                                                # STEP 52
ACTION: int3 = 1 
int3 = 7 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 53
ACTION: avl0.insert(int2) 
int2 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103f85998> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([14]) : <type 'set'>
==================================================
result = avl0.find(int0)                                                # STEP 54
ACTION: result = avl0.find(int0) 
int0 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103f85998> : <type 'instance'>
avl_REF0 = set([14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
int0 = 19                                                               # STEP 55
ACTION: int0 = 19 
int0 = 19 : <type 'int'>
==================================================
int2 = 18                                                               # STEP 56
ACTION: int2 = 18 
int2 = 14 : <type 'int'>
=> int2 = 18 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 57
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x103f85998> : <type 'instance'>
avl_REF0 = set([14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.delete(int2)                                                       # STEP 58
ACTION: avl0.delete(int2) 
int2 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103f85998> : <type 'instance'>
avl_REF0 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.insert(int2)                                                       # STEP 59
ACTION: avl0.insert(int2) 
int2 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103f85998> : <type 'instance'>
avl_REF0 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([18, 14]) : <type 'set'>
==================================================
int2 = 7                                                                # STEP 60
ACTION: int2 = 7 
int2 = 18 : <type 'int'>
=> int2 = 7 : <type 'int'>
==================================================
result = avl0.find(int2)                                                # STEP 61
ACTION: result = avl0.find(int2) 
int2 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103f85998> : <type 'instance'>
avl_REF0 = set([18, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
result = avl0.find(int1)                                                # STEP 62
ACTION: result = avl0.find(int1) 
int1 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103f85998> : <type 'instance'>
avl_REF0 = set([18, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
int2 = 8                                                                # STEP 63
ACTION: int2 = 8 
int2 = 7 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 64
ACTION: avl1.delete(int0) 
int0 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103fe4f38> : <type 'instance'>
avl_REF1 = set([8, 2, 19, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([8, 2, 7]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103d55368>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #4 STEP #17 (0:00:30.008592) Fri Apr 28 07:50:10 2017 [ 148 stmts 195 branches ]
  7 [2:0]
-- < 2 [1:0]
---- < 1 [0:0] L
---- > 3 [0:0] L
-- > 12 [1:-1]
---- > 16 [0:0] L
set([1, 2, 3, 7, 12, 16])
  7 [2:0]
-- < 2 [1:0]
---- < 1 [0:0] L
---- > 3 [0:0] L
-- > 12 [1:-1]
---- > 16 [0:0] L
set([1, 2, 3, 7, 12, 16])
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 67
STOPPING TESTING DUE TO TIMEOUT
8.51713607058 PERCENT COVERED
60.2289011478 TOTAL RUNTIME
7 EXECUTED
632 TOTAL TEST OPERATIONS
27.2040116787 TIME SPENT EXECUTING TEST OPERATIONS
0.0231895446777 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
27.2886321545 TIME SPENT CHECKING PROPERTIES
54.4926438332 TOTAL TIME SPENT RUNNING SUT
0.0043740272522 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int1 = 2                                                                 # STEP 0
int3 = 19                                                                # STEP 1
int2 = 5                                                                 # STEP 2
int0 = 4                                                                 # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
result = avl1.find(int2)                                                 # STEP 5
avl1.delete(int0)                                                        # STEP 6
avl1 == avl1                                                             # STEP 7
int0 = 12                                                                # STEP 8
avl1.insert(int1)                                                        # STEP 9
avl1.insert(int3)                                                       # STEP 10
int3 = 11                                                               # STEP 11
avl1.delete(int2)                                                       # STEP 12
avl1.delete(int2)                                                       # STEP 13
int1 = 3                                                                # STEP 14
int2 = 20                                                               # STEP 15
avl1 == avl1                                                            # STEP 16
result = avl1.find(int0)                                                # STEP 17
result = avl1.find(int2)                                                # STEP 18
avl1.insert(int3)                                                       # STEP 19
avl1.delete(int2)                                                       # STEP 20
avl1.delete(int3)                                                       # STEP 21
int3 = 13                                                               # STEP 22
int2 = 15                                                               # STEP 23
int0 = 13                                                               # STEP 24
avl1.insert(int3)                                                       # STEP 25
result = avl1.find(int3)                                                # STEP 26
int3 = 8                                                                # STEP 27
result = avl1.find(int2)                                                # STEP 28
int2 = 2                                                                # STEP 29
avl1.delete(int0)                                                       # STEP 30
result = avl1.find(int3)                                                # STEP 31
int3 = 11                                                               # STEP 32
int0 = 8                                                                # STEP 33
avl1.delete(int1)                                                       # STEP 34
avl1.insert(int0)                                                       # STEP 35
int0 = 7                                                                # STEP 36
int1 = 18                                                               # STEP 37
result = avl1.find(int3)                                                # STEP 38
int3 = 12                                                               # STEP 39
avl1.insert(int0)                                                       # STEP 40
int0 = 6                                                                # STEP 41
avl0 = avl.AVLTree()                                                    # STEP 42
avl1.insert(int2)                                                       # STEP 43
result = avl1.inorder()                                                 # STEP 44
int2 = 14                                                               # STEP 45
avl0 == avl1                                                            # STEP 46
result = avl1.find(int3)                                                # STEP 47
result = avl0.find(int0)                                                # STEP 48
int3 = 7                                                                # STEP 49
int0 = 19                                                               # STEP 50
avl1.insert(int3)                                                       # STEP 51
int3 = 1                                                                # STEP 52
avl0.insert(int2)                                                       # STEP 53
result = avl0.find(int0)                                                # STEP 54
int0 = 19                                                               # STEP 55
int2 = 18                                                               # STEP 56
result = avl0.inorder()                                                 # STEP 57
avl0.delete(int2)                                                       # STEP 58
avl0.insert(int2)                                                       # STEP 59
int2 = 7                                                                # STEP 60
result = avl0.find(int2)                                                # STEP 61
result = avl0.find(int1)                                                # STEP 62
int2 = 8                                                                # STEP 63
avl1.delete(int0)                                                       # STEP 64
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103d55368>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
214 BRANCHES COVERED
161 STATEMENTS COVERED

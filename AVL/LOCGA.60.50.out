Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.62277.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105018b00>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
Original test has 99 steps

SAVING TEST AS failure.62277.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 10                                                                # STEP 0
ACTION: int2 = 10 
int2 = None : <type 'NoneType'>
=> int2 = 10 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 1
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x104babd88> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.delete(int2)                                                        # STEP 2
ACTION: avl1.delete(int2) 
int2 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x104babd88> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.insert(int2)                                                        # STEP 3
ACTION: avl1.insert(int2) 
int2 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x104babd88> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([10]) : <type 'set'>
==================================================
avl1.delete(int2)                                                        # STEP 4
ACTION: avl1.delete(int2) 
int2 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x104babd88> : <type 'instance'>
avl_REF1 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1 == avl1                                                             # STEP 5
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x104babd88> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
int1 = 1                                                                 # STEP 6
ACTION: int1 = 1 
int1 = None : <type 'NoneType'>
=> int1 = 1 : <type 'int'>
==================================================
avl1.delete(int1)                                                        # STEP 7
ACTION: avl1.delete(int1) 
int1 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x104babd88> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.delete(int1)                                                        # STEP 8
ACTION: avl1.delete(int1) 
int1 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x104babd88> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.insert(int2)                                                        # STEP 9
ACTION: avl1.insert(int2) 
int2 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x104babd88> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([10]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 10
ACTION: avl1.delete(int1) 
int1 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x104babd88> : <type 'instance'>
avl_REF1 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
result = avl1.inorder()                                                 # STEP 11
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x104babd88> : <type 'instance'>
avl_REF1 = set([10]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
result = avl1.find(int1)                                                # STEP 12
ACTION: result = avl1.find(int1) 
int1 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x104babd88> : <type 'instance'>
avl_REF1 = set([10]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int1 = 6                                                                # STEP 13
ACTION: int1 = 6 
int1 = 1 : <type 'int'>
=> int1 = 6 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 14
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x104babd88> : <type 'instance'>
avl_REF1 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
result = avl1.inorder()                                                 # STEP 15
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x104babd88> : <type 'instance'>
avl_REF1 = set([10]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int1)                                                       # STEP 16
ACTION: avl1.insert(int1) 
int1 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x104babd88> : <type 'instance'>
avl_REF1 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([10, 6]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 17
ACTION: avl1.delete(int2) 
int2 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x104babd88> : <type 'instance'>
avl_REF1 = set([10, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([6]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 18
ACTION: avl1.delete(int2) 
int2 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x104babd88> : <type 'instance'>
avl_REF1 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
result = avl1.find(int2)                                                # STEP 19
ACTION: result = avl1.find(int2) 
int2 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x104babd88> : <type 'instance'>
avl_REF1 = set([6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl1 == avl1                                                            # STEP 20
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x104babd88> : <type 'instance'>
avl_REF1 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
int1 = 17                                                               # STEP 21
ACTION: int1 = 17 
int1 = 6 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 22
ACTION: avl1.delete(int1) 
int1 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x104babd88> : <type 'instance'>
avl_REF1 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int2 = 6                                                                # STEP 23
ACTION: int2 = 6 
int2 = 10 : <type 'int'>
=> int2 = 6 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 24
ACTION: avl1.insert(int1) 
int1 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x104babd88> : <type 'instance'>
avl_REF1 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([17, 6]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 25
ACTION: avl1.insert(int2) 
int2 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x104babd88> : <type 'instance'>
avl_REF1 = set([17, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
avl1.delete(int2)                                                       # STEP 26
ACTION: avl1.delete(int2) 
int2 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x104babd88> : <type 'instance'>
avl_REF1 = set([17, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([17]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 27
ACTION: avl1.delete(int1) 
int1 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x104babd88> : <type 'instance'>
avl_REF1 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int0 = 15                                                               # STEP 28
ACTION: int0 = 15 
int0 = None : <type 'NoneType'>
=> int0 = 15 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 29
ACTION: avl1.delete(int2) 
int2 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x104babd88> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int1 = 11                                                               # STEP 30
ACTION: int1 = 11 
int1 = 17 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 31
ACTION: avl1.insert(int0) 
int0 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x104babd88> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([15]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 32
ACTION: avl1.delete(int0) 
int0 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x104babd88> : <type 'instance'>
avl_REF1 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
result = avl1.find(int2)                                                # STEP 33
ACTION: result = avl1.find(int2) 
int2 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x104babd88> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl1.insert(int0)                                                       # STEP 34
ACTION: avl1.insert(int0) 
int0 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x104babd88> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([15]) : <type 'set'>
==================================================
int0 = 8                                                                # STEP 35
ACTION: int0 = 8 
int0 = 15 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
result = avl1.find(int1)                                                # STEP 36
ACTION: result = avl1.find(int1) 
int1 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x104babd88> : <type 'instance'>
avl_REF1 = set([15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
result = avl1.find(int0)                                                # STEP 37
ACTION: result = avl1.find(int0) 
int0 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x104babd88> : <type 'instance'>
avl_REF1 = set([15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl1.insert(int0)                                                       # STEP 38
ACTION: avl1.insert(int0) 
int0 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x104babd88> : <type 'instance'>
avl_REF1 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([8, 15]) : <type 'set'>
==================================================
int0 = 16                                                               # STEP 39
ACTION: int0 = 16 
int0 = 8 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 40
ACTION: avl1.delete(int0) 
int0 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x104babd88> : <type 'instance'>
avl_REF1 = set([8, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.delete(int1)                                                       # STEP 41
ACTION: avl1.delete(int1) 
int1 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x104babd88> : <type 'instance'>
avl_REF1 = set([8, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.insert(int0)                                                       # STEP 42
ACTION: avl1.insert(int0) 
int0 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x104babd88> : <type 'instance'>
avl_REF1 = set([8, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([8, 16, 15]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 43
ACTION: avl1.delete(int1) 
int1 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x104babd88> : <type 'instance'>
avl_REF1 = set([8, 16, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.delete(int0)                                                       # STEP 44
ACTION: avl1.delete(int0) 
int0 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x104babd88> : <type 'instance'>
avl_REF1 = set([8, 16, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([8, 15]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 45
ACTION: avl1.delete(int0) 
int0 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x104babd88> : <type 'instance'>
avl_REF1 = set([8, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.insert(int2)                                                       # STEP 46
ACTION: avl1.insert(int2) 
int2 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x104babd88> : <type 'instance'>
avl_REF1 = set([8, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([8, 6, 15]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 47
ACTION: avl1.insert(int2) 
int2 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x104babd88> : <type 'instance'>
avl_REF1 = set([8, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
avl1.insert(int1)                                                       # STEP 48
ACTION: avl1.insert(int1) 
int1 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x104babd88> : <type 'instance'>
avl_REF1 = set([8, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([6, 8, 11, 15]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 49
ACTION: avl1.delete(int0) 
int0 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x104babd88> : <type 'instance'>
avl_REF1 = set([6, 8, 11, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int2 = 10                                                               # STEP 50
ACTION: int2 = 10 
int2 = 6 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 51
ACTION: avl1.insert(int1) 
int1 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x104babd88> : <type 'instance'>
avl_REF1 = set([6, 8, 11, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
result = avl1.inorder()                                                 # STEP 52
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x104babd88> : <type 'instance'>
avl_REF1 = set([6, 8, 11, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int3 = 15                                                               # STEP 53
ACTION: int3 = 15 
int3 = None : <type 'NoneType'>
=> int3 = 15 : <type 'int'>
==================================================
int0 = 15                                                               # STEP 54
ACTION: int0 = 15 
int0 = 16 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 55
ACTION: avl1.insert(int2) 
int2 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x104babd88> : <type 'instance'>
avl_REF1 = set([6, 8, 11, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([6, 8, 10, 11, 15]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 56
ACTION: avl1.delete(int1) 
int1 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x104babd88> : <type 'instance'>
avl_REF1 = set([6, 8, 10, 11, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([6, 8, 10, 15]) : <type 'set'>
==================================================
avl1 == avl1                                                            # STEP 57
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x104babd88> : <type 'instance'>
avl_REF1 = set([6, 8, 10, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.insert(int0)                                                       # STEP 58
ACTION: avl1.insert(int0) 
int0 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x104babd88> : <type 'instance'>
avl_REF1 = set([6, 8, 10, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.insert(int2)                                                       # STEP 59
ACTION: avl1.insert(int2) 
int2 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x104babd88> : <type 'instance'>
avl_REF1 = set([6, 8, 10, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
avl1.insert(int3)                                                       # STEP 60
ACTION: avl1.insert(int3) 
int3 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x104babd88> : <type 'instance'>
avl_REF1 = set([6, 8, 10, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
int1 = 19                                                               # STEP 61
ACTION: int1 = 19 
int1 = 11 : <type 'int'>
=> int1 = 19 : <type 'int'>
==================================================
result = avl1.find(int3)                                                # STEP 62
ACTION: result = avl1.find(int3) 
int3 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x104babd88> : <type 'instance'>
avl_REF1 = set([6, 8, 10, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl1.delete(int2)                                                       # STEP 63
ACTION: avl1.delete(int2) 
int2 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x104babd88> : <type 'instance'>
avl_REF1 = set([6, 8, 10, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([6, 8, 15]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 64
ACTION: avl1.insert(int1) 
int1 = 19 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x104babd88> : <type 'instance'>
avl_REF1 = set([6, 8, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([6, 8, 15, 19]) : <type 'set'>
==================================================
int0 = 18                                                               # STEP 65
ACTION: int0 = 18 
int0 = 15 : <type 'int'>
=> int0 = 18 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 66
ACTION: avl1.insert(int2) 
int2 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x104babd88> : <type 'instance'>
avl_REF1 = set([6, 8, 15, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([6, 8, 10, 15, 19]) : <type 'set'>
==================================================
int1 = 4                                                                # STEP 67
ACTION: int1 = 4 
int1 = 19 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
int3 = 12                                                               # STEP 68
ACTION: int3 = 12 
int3 = 15 : <type 'int'>
=> int3 = 12 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 69
ACTION: avl1.delete(int0) 
int0 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x104babd88> : <type 'instance'>
avl_REF1 = set([6, 8, 10, 15, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int0 = 10                                                               # STEP 70
ACTION: int0 = 10 
int0 = 18 : <type 'int'>
=> int0 = 10 : <type 'int'>
==================================================
int2 = 10                                                               # STEP 71
ACTION: int2 = 10 
int2 = 10 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 72
ACTION: avl1.delete(int0) 
int0 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x104babd88> : <type 'instance'>
avl_REF1 = set([6, 8, 10, 15, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([6, 8, 15, 19]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 73
ACTION: avl1.delete(int1) 
int1 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x104babd88> : <type 'instance'>
avl_REF1 = set([6, 8, 15, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.delete(int2)                                                       # STEP 74
ACTION: avl1.delete(int2) 
int2 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x104babd88> : <type 'instance'>
avl_REF1 = set([6, 8, 15, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int0 = 19                                                               # STEP 75
ACTION: int0 = 19 
int0 = 10 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 76
ACTION: avl1.delete(int1) 
int1 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x104babd88> : <type 'instance'>
avl_REF1 = set([6, 8, 15, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
result = avl1.inorder()                                                 # STEP 77
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x104babd88> : <type 'instance'>
avl_REF1 = set([6, 8, 15, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
result = avl1.inorder()                                                 # STEP 78
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x104babd88> : <type 'instance'>
avl_REF1 = set([6, 8, 15, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
result = avl1.inorder()                                                 # STEP 79
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x104babd88> : <type 'instance'>
avl_REF1 = set([6, 8, 15, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.delete(int0)                                                       # STEP 80
ACTION: avl1.delete(int0) 
int0 = 19 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x104babd88> : <type 'instance'>
avl_REF1 = set([6, 8, 15, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([6, 8, 15]) : <type 'set'>
==================================================
avl1 == avl1                                                            # STEP 81
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x104babd88> : <type 'instance'>
avl_REF1 = set([6, 8, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.insert(int0)                                                       # STEP 82
ACTION: avl1.insert(int0) 
int0 = 19 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x104babd88> : <type 'instance'>
avl_REF1 = set([6, 8, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([6, 8, 15, 19]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 83
ACTION: avl1.insert(int1) 
int1 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x104babd88> : <type 'instance'>
avl_REF1 = set([6, 8, 15, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([4, 6, 8, 15, 19]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 84
ACTION: avl1.insert(int1) 
int1 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x104babd88> : <type 'instance'>
avl_REF1 = set([4, 6, 8, 15, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
int0 = 7                                                                # STEP 85
ACTION: int0 = 7 
int0 = 19 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 86
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x104babd88> : <type 'instance'>
avl_REF1 = set([4, 6, 8, 15, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int3)                                                       # STEP 87
ACTION: avl1.insert(int3) 
int3 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x104babd88> : <type 'instance'>
avl_REF1 = set([4, 6, 8, 15, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([4, 6, 8, 12, 15, 19]) : <type 'set'>
==================================================
int3 = 9                                                                # STEP 88
ACTION: int3 = 9 
int3 = 12 : <type 'int'>
=> int3 = 9 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 89
ACTION: avl1.insert(int2) 
int2 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x104babd88> : <type 'instance'>
avl_REF1 = set([4, 6, 8, 12, 15, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([4, 6, 8, 10, 12, 15, 19]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 90
ACTION: avl1.insert(int1) 
int1 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x104babd88> : <type 'instance'>
avl_REF1 = set([4, 6, 8, 10, 12, 15, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl1.delete(int3)                                                       # STEP 91
ACTION: avl1.delete(int3) 
int3 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x104babd88> : <type 'instance'>
avl_REF1 = set([4, 6, 8, 10, 12, 15, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int1 = 3                                                                # STEP 92
ACTION: int1 = 3 
int1 = 4 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 93
ACTION: avl1.insert(int1) 
int1 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x104babd88> : <type 'instance'>
avl_REF1 = set([4, 6, 8, 10, 12, 15, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([3, 4, 6, 8, 10, 12, 15, 19]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 94
ACTION: avl1.delete(int1) 
int1 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x104babd88> : <type 'instance'>
avl_REF1 = set([3, 4, 6, 8, 10, 12, 15, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([4, 6, 8, 10, 12, 15, 19]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 95
ACTION: avl1.insert(int3) 
int3 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x104babd88> : <type 'instance'>
avl_REF1 = set([4, 6, 8, 10, 12, 15, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([4, 6, 8, 9, 10, 12, 15, 19]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 96
ACTION: avl1.insert(int3) 
int3 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x104babd88> : <type 'instance'>
avl_REF1 = set([4, 6, 8, 9, 10, 12, 15, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
int3 = 4                                                                # STEP 97
ACTION: int3 = 4 
int3 = 9 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 98
ACTION: avl1.delete(int3) 
int3 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x104babd88> : <type 'instance'>
avl_REF1 = set([4, 6, 8, 9, 10, 12, 15, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([6, 8, 9, 10, 12, 15, 19]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104e6e440>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1048c9cb0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
Original test has 49 steps

SAVING TEST AS failure.62277.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 6                                                                 # STEP 0
ACTION: int3 = 6 
int3 = None : <type 'NoneType'>
=> int3 = 6 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 1
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x1048c9e60> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int3)                                                        # STEP 2
ACTION: avl2.insert(int3) 
int3 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1048c9e60> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([6]) : <type 'set'>
==================================================
int2 = 8                                                                 # STEP 3
ACTION: int2 = 8 
int2 = None : <type 'NoneType'>
=> int2 = 8 : <type 'int'>
==================================================
result = avl2.inorder()                                                  # STEP 4
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x1048c9e60> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int3)                                                        # STEP 5
ACTION: avl2.insert(int3) 
int3 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1048c9e60> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
result = avl2.find(int3)                                                 # STEP 6
ACTION: result = avl2.find(int3) 
int3 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1048c9e60> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
result = avl2.find(int2)                                                 # STEP 7
ACTION: result = avl2.find(int2) 
int2 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1048c9e60> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl2.insert(int3)                                                        # STEP 8
ACTION: avl2.insert(int3) 
int3 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1048c9e60> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
int1 = 20                                                                # STEP 9
ACTION: int1 = 20 
int1 = None : <type 'NoneType'>
=> int1 = 20 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 10
ACTION: avl2.insert(int3) 
int3 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1048c9e60> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
avl2.delete(int1)                                                       # STEP 11
ACTION: avl2.delete(int1) 
int1 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1048c9e60> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int2 = 8                                                                # STEP 12
ACTION: int2 = 8 
int2 = 8 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 13
ACTION: avl2.delete(int1) 
int1 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1048c9e60> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int3)                                                       # STEP 14
ACTION: avl2.insert(int3) 
int3 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1048c9e60> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
int0 = 18                                                               # STEP 15
ACTION: int0 = 18 
int0 = None : <type 'NoneType'>
=> int0 = 18 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 16
ACTION: avl2.insert(int3) 
int3 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1048c9e60> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
int3 = 8                                                                # STEP 17
ACTION: int3 = 8 
int3 = 6 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 18
ACTION: avl2.delete(int0) 
int0 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1048c9e60> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.insert(int0)                                                       # STEP 19
ACTION: avl2.insert(int0) 
int0 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1048c9e60> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([18, 6]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 20
ACTION: avl2.delete(int3) 
int3 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1048c9e60> : <type 'instance'>
avl_REF2 = set([18, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.delete(int3)                                                       # STEP 21
ACTION: avl2.delete(int3) 
int3 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1048c9e60> : <type 'instance'>
avl_REF2 = set([18, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.delete(int0)                                                       # STEP 22
ACTION: avl2.delete(int0) 
int0 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1048c9e60> : <type 'instance'>
avl_REF2 = set([18, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([6]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 23
ACTION: avl2.insert(int1) 
int1 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1048c9e60> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([20, 6]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 24
ACTION: avl2.delete(int3) 
int3 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1048c9e60> : <type 'instance'>
avl_REF2 = set([20, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
result = avl2.inorder()                                                 # STEP 25
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x1048c9e60> : <type 'instance'>
avl_REF2 = set([20, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int0)                                                       # STEP 26
ACTION: avl2.insert(int0) 
int0 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1048c9e60> : <type 'instance'>
avl_REF2 = set([20, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([18, 20, 6]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 27
ACTION: avl2.delete(int3) 
int3 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1048c9e60> : <type 'instance'>
avl_REF2 = set([18, 20, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.insert(int1)                                                       # STEP 28
ACTION: avl2.insert(int1) 
int1 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1048c9e60> : <type 'instance'>
avl_REF2 = set([18, 20, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl2.delete(int2)                                                       # STEP 29
ACTION: avl2.delete(int2) 
int2 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1048c9e60> : <type 'instance'>
avl_REF2 = set([18, 20, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.insert(int1)                                                       # STEP 30
ACTION: avl2.insert(int1) 
int1 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1048c9e60> : <type 'instance'>
avl_REF2 = set([18, 20, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
result = avl2.find(int1)                                                # STEP 31
ACTION: result = avl2.find(int1) 
int1 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1048c9e60> : <type 'instance'>
avl_REF2 = set([18, 20, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl2.insert(int3)                                                       # STEP 32
ACTION: avl2.insert(int3) 
int3 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1048c9e60> : <type 'instance'>
avl_REF2 = set([18, 20, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([8, 18, 20, 6]) : <type 'set'>
==================================================
result = avl2.find(int3)                                                # STEP 33
ACTION: result = avl2.find(int3) 
int3 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1048c9e60> : <type 'instance'>
avl_REF2 = set([8, 18, 20, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
int3 = 17                                                               # STEP 34
ACTION: int3 = 17 
int3 = 8 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
result = avl2.find(int0)                                                # STEP 35
ACTION: result = avl2.find(int0) 
int0 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1048c9e60> : <type 'instance'>
avl_REF2 = set([8, 18, 20, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl2.delete(int2)                                                       # STEP 36
ACTION: avl2.delete(int2) 
int2 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1048c9e60> : <type 'instance'>
avl_REF2 = set([8, 18, 20, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([18, 20, 6]) : <type 'set'>
==================================================
result = avl2.find(int3)                                                # STEP 37
ACTION: result = avl2.find(int3) 
int3 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1048c9e60> : <type 'instance'>
avl_REF2 = set([18, 20, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl2.insert(int0)                                                       # STEP 38
ACTION: avl2.insert(int0) 
int0 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1048c9e60> : <type 'instance'>
avl_REF2 = set([18, 20, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
result = avl2.inorder()                                                 # STEP 39
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x1048c9e60> : <type 'instance'>
avl_REF2 = set([18, 20, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int3)                                                       # STEP 40
ACTION: avl2.insert(int3) 
int3 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1048c9e60> : <type 'instance'>
avl_REF2 = set([18, 20, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([17, 18, 20, 6]) : <type 'set'>
==================================================
int0 = 12                                                               # STEP 41
ACTION: int0 = 12 
int0 = 18 : <type 'int'>
=> int0 = 12 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 42
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x1048c9e60> : <type 'instance'>
avl_REF2 = set([17, 18, 20, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int0)                                                       # STEP 43
ACTION: avl2.insert(int0) 
int0 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1048c9e60> : <type 'instance'>
avl_REF2 = set([17, 18, 20, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([6, 12, 17, 18, 20]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 44
ACTION: avl2.delete(int0) 
int0 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1048c9e60> : <type 'instance'>
avl_REF2 = set([6, 12, 17, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([6, 17, 18, 20]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 45
ACTION: avl2.insert(int2) 
int2 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1048c9e60> : <type 'instance'>
avl_REF2 = set([6, 17, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([6, 8, 17, 18, 20]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 46
ACTION: avl2.insert(int3) 
int3 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1048c9e60> : <type 'instance'>
avl_REF2 = set([6, 8, 17, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
avl2.delete(int0)                                                       # STEP 47
ACTION: avl2.delete(int0) 
int0 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1048c9e60> : <type 'instance'>
avl_REF2 = set([6, 8, 17, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.delete(int1)                                                       # STEP 48
ACTION: avl2.delete(int1) 
int1 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1048c9e60> : <type 'instance'>
avl_REF2 = set([6, 8, 17, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([6, 8, 17, 18]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104fb8098>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
TEST #3 STEP #0 (0:00:30.338397) Mon May  1 18:07:08 2017 [ 147 stmts 193 branches ]
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 88
STOPPING TESTING DUE TO TIMEOUT
7.6900754498 PERCENT COVERED
60.2257399559 TOTAL RUNTIME
5 EXECUTED
436 TOTAL TEST OPERATIONS
22.3267297745 TIME SPENT EXECUTING TEST OPERATIONS
0.0465457439423 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
22.3989369869 TIME SPENT CHECKING PROPERTIES
44.7256667614 TOTAL TIME SPENT RUNNING SUT
0.00302505493164 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
2 FAILED
0 REPEATS OF FAILURES
2 ACTUAL DISTINCT FAILURES

FAILURE 0
int2 = 10                                                                # STEP 0
avl1 = avl.AVLTree()                                                     # STEP 1
avl1.delete(int2)                                                        # STEP 2
avl1.insert(int2)                                                        # STEP 3
avl1.delete(int2)                                                        # STEP 4
avl1 == avl1                                                             # STEP 5
int1 = 1                                                                 # STEP 6
avl1.delete(int1)                                                        # STEP 7
avl1.delete(int1)                                                        # STEP 8
avl1.insert(int2)                                                        # STEP 9
avl1.delete(int1)                                                       # STEP 10
result = avl1.inorder()                                                 # STEP 11
result = avl1.find(int1)                                                # STEP 12
int1 = 6                                                                # STEP 13
avl1 == avl1                                                            # STEP 14
result = avl1.inorder()                                                 # STEP 15
avl1.insert(int1)                                                       # STEP 16
avl1.delete(int2)                                                       # STEP 17
avl1.delete(int2)                                                       # STEP 18
result = avl1.find(int2)                                                # STEP 19
avl1 == avl1                                                            # STEP 20
int1 = 17                                                               # STEP 21
avl1.delete(int1)                                                       # STEP 22
int2 = 6                                                                # STEP 23
avl1.insert(int1)                                                       # STEP 24
avl1.insert(int2)                                                       # STEP 25
avl1.delete(int2)                                                       # STEP 26
avl1.delete(int1)                                                       # STEP 27
int0 = 15                                                               # STEP 28
avl1.delete(int2)                                                       # STEP 29
int1 = 11                                                               # STEP 30
avl1.insert(int0)                                                       # STEP 31
avl1.delete(int0)                                                       # STEP 32
result = avl1.find(int2)                                                # STEP 33
avl1.insert(int0)                                                       # STEP 34
int0 = 8                                                                # STEP 35
result = avl1.find(int1)                                                # STEP 36
result = avl1.find(int0)                                                # STEP 37
avl1.insert(int0)                                                       # STEP 38
int0 = 16                                                               # STEP 39
avl1.delete(int0)                                                       # STEP 40
avl1.delete(int1)                                                       # STEP 41
avl1.insert(int0)                                                       # STEP 42
avl1.delete(int1)                                                       # STEP 43
avl1.delete(int0)                                                       # STEP 44
avl1.delete(int0)                                                       # STEP 45
avl1.insert(int2)                                                       # STEP 46
avl1.insert(int2)                                                       # STEP 47
avl1.insert(int1)                                                       # STEP 48
avl1.delete(int0)                                                       # STEP 49
int2 = 10                                                               # STEP 50
avl1.insert(int1)                                                       # STEP 51
result = avl1.inorder()                                                 # STEP 52
int3 = 15                                                               # STEP 53
int0 = 15                                                               # STEP 54
avl1.insert(int2)                                                       # STEP 55
avl1.delete(int1)                                                       # STEP 56
avl1 == avl1                                                            # STEP 57
avl1.insert(int0)                                                       # STEP 58
avl1.insert(int2)                                                       # STEP 59
avl1.insert(int3)                                                       # STEP 60
int1 = 19                                                               # STEP 61
result = avl1.find(int3)                                                # STEP 62
avl1.delete(int2)                                                       # STEP 63
avl1.insert(int1)                                                       # STEP 64
int0 = 18                                                               # STEP 65
avl1.insert(int2)                                                       # STEP 66
int1 = 4                                                                # STEP 67
int3 = 12                                                               # STEP 68
avl1.delete(int0)                                                       # STEP 69
int0 = 10                                                               # STEP 70
int2 = 10                                                               # STEP 71
avl1.delete(int0)                                                       # STEP 72
avl1.delete(int1)                                                       # STEP 73
avl1.delete(int2)                                                       # STEP 74
int0 = 19                                                               # STEP 75
avl1.delete(int1)                                                       # STEP 76
result = avl1.inorder()                                                 # STEP 77
result = avl1.inorder()                                                 # STEP 78
result = avl1.inorder()                                                 # STEP 79
avl1.delete(int0)                                                       # STEP 80
avl1 == avl1                                                            # STEP 81
avl1.insert(int0)                                                       # STEP 82
avl1.insert(int1)                                                       # STEP 83
avl1.insert(int1)                                                       # STEP 84
int0 = 7                                                                # STEP 85
result = avl1.inorder()                                                 # STEP 86
avl1.insert(int3)                                                       # STEP 87
int3 = 9                                                                # STEP 88
avl1.insert(int2)                                                       # STEP 89
avl1.insert(int1)                                                       # STEP 90
avl1.delete(int3)                                                       # STEP 91
int1 = 3                                                                # STEP 92
avl1.insert(int1)                                                       # STEP 93
avl1.delete(int1)                                                       # STEP 94
avl1.insert(int3)                                                       # STEP 95
avl1.insert(int3)                                                       # STEP 96
int3 = 4                                                                # STEP 97
avl1.delete(int3)                                                       # STEP 98
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104e6e440>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE 1
int3 = 6                                                                 # STEP 0
avl2 = avl.AVLTree()                                                     # STEP 1
avl2.insert(int3)                                                        # STEP 2
int2 = 8                                                                 # STEP 3
result = avl2.inorder()                                                  # STEP 4
avl2.insert(int3)                                                        # STEP 5
result = avl2.find(int3)                                                 # STEP 6
result = avl2.find(int2)                                                 # STEP 7
avl2.insert(int3)                                                        # STEP 8
int1 = 20                                                                # STEP 9
avl2.insert(int3)                                                       # STEP 10
avl2.delete(int1)                                                       # STEP 11
int2 = 8                                                                # STEP 12
avl2.delete(int1)                                                       # STEP 13
avl2.insert(int3)                                                       # STEP 14
int0 = 18                                                               # STEP 15
avl2.insert(int3)                                                       # STEP 16
int3 = 8                                                                # STEP 17
avl2.delete(int0)                                                       # STEP 18
avl2.insert(int0)                                                       # STEP 19
avl2.delete(int3)                                                       # STEP 20
avl2.delete(int3)                                                       # STEP 21
avl2.delete(int0)                                                       # STEP 22
avl2.insert(int1)                                                       # STEP 23
avl2.delete(int3)                                                       # STEP 24
result = avl2.inorder()                                                 # STEP 25
avl2.insert(int0)                                                       # STEP 26
avl2.delete(int3)                                                       # STEP 27
avl2.insert(int1)                                                       # STEP 28
avl2.delete(int2)                                                       # STEP 29
avl2.insert(int1)                                                       # STEP 30
result = avl2.find(int1)                                                # STEP 31
avl2.insert(int3)                                                       # STEP 32
result = avl2.find(int3)                                                # STEP 33
int3 = 17                                                               # STEP 34
result = avl2.find(int0)                                                # STEP 35
avl2.delete(int2)                                                       # STEP 36
result = avl2.find(int3)                                                # STEP 37
avl2.insert(int0)                                                       # STEP 38
result = avl2.inorder()                                                 # STEP 39
avl2.insert(int3)                                                       # STEP 40
int0 = 12                                                               # STEP 41
result = avl2.inorder()                                                 # STEP 42
avl2.insert(int0)                                                       # STEP 43
avl2.delete(int0)                                                       # STEP 44
avl2.insert(int2)                                                       # STEP 45
avl2.insert(int3)                                                       # STEP 46
avl2.delete(int0)                                                       # STEP 47
avl2.delete(int1)                                                       # STEP 48
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104fb8098>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
198 BRANCHES COVERED
149 STATEMENTS COVERED

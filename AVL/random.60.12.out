Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.99381.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  12 [3:1]
-- < 7 [2:1]
---- < 2 [1:-1]
------ > 6 [0:0] L
---- > 11 [0:0] L
-- > 15 [1:-1]
---- > 17 [0:0] L
set([2, 6, 7, 11, 12, 15, 17])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103fb0f80>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
Original test has 97 steps

SAVING TEST AS failure.99381.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 8                                                                 # STEP 0
ACTION: int2 = 8 
int2 = None : <type 'NoneType'>
=> int2 = 8 : <type 'int'>
==================================================
int3 = 4                                                                 # STEP 1
ACTION: int3 = 4 
int3 = None : <type 'NoneType'>
=> int3 = 4 : <type 'int'>
==================================================
int1 = 3                                                                 # STEP 2
ACTION: int1 = 3 
int1 = None : <type 'NoneType'>
=> int1 = 3 : <type 'int'>
==================================================
int0 = 4                                                                 # STEP 3
ACTION: int0 = 4 
int0 = None : <type 'NoneType'>
=> int0 = 4 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x102fda1b8> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.insert(int1)                                                        # STEP 5
ACTION: avl1.insert(int1) 
int1 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102fda1b8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([3]) : <type 'set'>
==================================================
avl1.delete(int0)                                                        # STEP 6
ACTION: avl1.delete(int0) 
int0 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102fda1b8> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int1 = 19                                                                # STEP 7
ACTION: int1 = 19 
int1 = 3 : <type 'int'>
=> int1 = 19 : <type 'int'>
==================================================
avl1.insert(int3)                                                        # STEP 8
ACTION: avl1.insert(int3) 
int3 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102fda1b8> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([3, 4]) : <type 'set'>
==================================================
int0 = 14                                                                # STEP 9
ACTION: int0 = 14 
int0 = 4 : <type 'int'>
=> int0 = 14 : <type 'int'>
==================================================
int3 = 16                                                               # STEP 10
ACTION: int3 = 16 
int3 = 4 : <type 'int'>
=> int3 = 16 : <type 'int'>
==================================================
result = avl1.find(int1)                                                # STEP 11
ACTION: result = avl1.find(int1) 
int1 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102fda1b8> : <type 'instance'>
avl_REF1 = set([3, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int1 = 5                                                                # STEP 12
ACTION: int1 = 5 
int1 = 19 : <type 'int'>
=> int1 = 5 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 13
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x103ff9dd0> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 14
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x103ff9dd0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int1)                                                       # STEP 15
ACTION: avl2.delete(int1) 
int1 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103ff9dd0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int1 = 4                                                                # STEP 16
ACTION: int1 = 4 
int1 = 5 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
result = avl1.find(int3)                                                # STEP 17
ACTION: result = avl1.find(int3) 
int3 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102fda1b8> : <type 'instance'>
avl_REF1 = set([3, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
result = avl1.find(int3)                                                # STEP 18
ACTION: result = avl1.find(int3) 
int3 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102fda1b8> : <type 'instance'>
avl_REF1 = set([3, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
result = avl2.find(int1)                                                # STEP 19
ACTION: result = avl2.find(int1) 
int1 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103ff9dd0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int1 = 8                                                                # STEP 20
ACTION: int1 = 8 
int1 = 4 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 21
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x103abe320> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
result = avl1.find(int1)                                                # STEP 22
ACTION: result = avl1.find(int1) 
int1 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102fda1b8> : <type 'instance'>
avl_REF1 = set([3, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int3 = 10                                                               # STEP 23
ACTION: int3 = 10 
int3 = 16 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 24
ACTION: avl0.insert(int3) 
int3 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103abe320> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([10]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 25
ACTION: avl2.insert(int1) 
int1 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103ff9dd0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([8]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 26
ACTION: avl1.delete(int2) 
int2 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102fda1b8> : <type 'instance'>
avl_REF1 = set([3, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int2 = 16                                                               # STEP 27
ACTION: int2 = 16 
int2 = 8 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
int3 = 12                                                               # STEP 28
ACTION: int3 = 12 
int3 = 10 : <type 'int'>
=> int3 = 12 : <type 'int'>
==================================================
int1 = 20                                                               # STEP 29
ACTION: int1 = 20 
int1 = 8 : <type 'int'>
=> int1 = 20 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 30
ACTION: avl0.insert(int0) 
int0 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103abe320> : <type 'instance'>
avl_REF0 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([10, 14]) : <type 'set'>
==================================================
int0 = 4                                                                # STEP 31
ACTION: int0 = 4 
int0 = 14 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 32
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x103ff9dd0> : <type 'instance'>
avl_REF2 = set([8]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int1)                                                       # STEP 33
ACTION: avl2.insert(int1) 
int1 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103ff9dd0> : <type 'instance'>
avl_REF2 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([8, 20]) : <type 'set'>
==================================================
int1 = 10                                                               # STEP 34
ACTION: int1 = 10 
int1 = 20 : <type 'int'>
=> int1 = 10 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 35
ACTION: avl0.insert(int0) 
int0 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103abe320> : <type 'instance'>
avl_REF0 = set([10, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([10, 4, 14]) : <type 'set'>
==================================================
int0 = 7                                                                # STEP 36
ACTION: int0 = 7 
int0 = 4 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 37
ACTION: avl0.insert(int0) 
int0 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103abe320> : <type 'instance'>
avl_REF0 = set([10, 4, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([10, 4, 14, 7]) : <type 'set'>
==================================================
int0 = 8                                                                # STEP 38
ACTION: int0 = 8 
int0 = 7 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 39
ACTION: avl2.delete(int0) 
int0 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103ff9dd0> : <type 'instance'>
avl_REF2 = set([8, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([20]) : <type 'set'>
==================================================
result = avl1.find(int1)                                                # STEP 40
ACTION: result = avl1.find(int1) 
int1 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102fda1b8> : <type 'instance'>
avl_REF1 = set([3, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int0 = 15                                                               # STEP 41
ACTION: int0 = 15 
int0 = 8 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
int1 = 13                                                               # STEP 42
ACTION: int1 = 13 
int1 = 10 : <type 'int'>
=> int1 = 13 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 43
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x103abe320> : <type 'instance'>
avl_REF0 = set([10, 4, 14, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl1.delete(int1)                                                       # STEP 44
ACTION: avl1.delete(int1) 
int1 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102fda1b8> : <type 'instance'>
avl_REF1 = set([3, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl2 == avl0                                                            # STEP 45
ACTION: avl2 == avl0 
avl2 = <avl.AVLTree instance at 0x103ff9dd0> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x103abe320> : <type 'instance'>
avl_REF2 = set([20]) : <type 'set'>
avl_REF0 = set([10, 4, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF0 
==================================================
result = avl1.inorder()                                                 # STEP 46
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x102fda1b8> : <type 'instance'>
avl_REF1 = set([3, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int1 = 7                                                                # STEP 47
ACTION: int1 = 7 
int1 = 13 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
result = avl1.find(int1)                                                # STEP 48
ACTION: result = avl1.find(int1) 
int1 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102fda1b8> : <type 'instance'>
avl_REF1 = set([3, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl1.delete(int3)                                                       # STEP 49
ACTION: avl1.delete(int3) 
int3 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102fda1b8> : <type 'instance'>
avl_REF1 = set([3, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl0.delete(int1)                                                       # STEP 50
ACTION: avl0.delete(int1) 
int1 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103abe320> : <type 'instance'>
avl_REF0 = set([10, 4, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([10, 4, 14]) : <type 'set'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 51
ACTION: avl2 = avl.AVLTree() 
avl2 = <avl.AVLTree instance at 0x103ff9dd0> : <type 'instance'>
avl_REF2 = set([20]) : <type 'set'>
=> avl2 = <avl.AVLTree instance at 0x103a66440> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int3 = 2                                                                # STEP 52
ACTION: int3 = 2 
int3 = 12 : <type 'int'>
=> int3 = 2 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 53
ACTION: avl0.insert(int1) 
int1 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103abe320> : <type 'instance'>
avl_REF0 = set([10, 4, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([10, 4, 14, 7]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 54
ACTION: avl0.delete(int1) 
int1 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103abe320> : <type 'instance'>
avl_REF0 = set([10, 4, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([10, 4, 14]) : <type 'set'>
==================================================
avl0 == avl1                                                            # STEP 55
ACTION: avl0 == avl1 
avl0 = <avl.AVLTree instance at 0x103abe320> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x102fda1b8> : <type 'instance'>
avl_REF0 = set([10, 4, 14]) : <type 'set'>
avl_REF1 = set([3, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF1 
==================================================
avl0.insert(int1)                                                       # STEP 56
ACTION: avl0.insert(int1) 
int1 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103abe320> : <type 'instance'>
avl_REF0 = set([10, 4, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([10, 4, 14, 7]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 57
ACTION: avl1.delete(int0) 
int0 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102fda1b8> : <type 'instance'>
avl_REF1 = set([3, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
result = avl0.find(int3)                                                # STEP 58
ACTION: result = avl0.find(int3) 
int3 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103abe320> : <type 'instance'>
avl_REF0 = set([10, 4, 14, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
result = avl0.find(int3)                                                # STEP 59
ACTION: result = avl0.find(int3) 
int3 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103abe320> : <type 'instance'>
avl_REF0 = set([10, 4, 14, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
int0 = 13                                                               # STEP 60
ACTION: int0 = 13 
int0 = 15 : <type 'int'>
=> int0 = 13 : <type 'int'>
==================================================
result = avl0.find(int1)                                                # STEP 61
ACTION: result = avl0.find(int1) 
int1 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103abe320> : <type 'instance'>
avl_REF0 = set([10, 4, 14, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
int1 = 19                                                               # STEP 62
ACTION: int1 = 19 
int1 = 7 : <type 'int'>
=> int1 = 19 : <type 'int'>
==================================================
int3 = 8                                                                # STEP 63
ACTION: int3 = 8 
int3 = 2 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 64
ACTION: avl1.delete(int1) 
int1 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102fda1b8> : <type 'instance'>
avl_REF1 = set([3, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int1 = 5                                                                # STEP 65
ACTION: int1 = 5 
int1 = 19 : <type 'int'>
=> int1 = 5 : <type 'int'>
==================================================
result = avl0.find(int2)                                                # STEP 66
ACTION: result = avl0.find(int2) 
int2 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103abe320> : <type 'instance'>
avl_REF0 = set([10, 4, 14, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
int2 = 18                                                               # STEP 67
ACTION: int2 = 18 
int2 = 16 : <type 'int'>
=> int2 = 18 : <type 'int'>
==================================================
result = avl0.find(int1)                                                # STEP 68
ACTION: result = avl0.find(int1) 
int1 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103abe320> : <type 'instance'>
avl_REF0 = set([10, 4, 14, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
int1 = 5                                                                # STEP 69
ACTION: int1 = 5 
int1 = 5 : <type 'int'>
==================================================
avl0 == avl0                                                            # STEP 70
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x103abe320> : <type 'instance'>
avl_REF0 = set([10, 4, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl1.delete(int3)                                                       # STEP 71
ACTION: avl1.delete(int3) 
int3 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102fda1b8> : <type 'instance'>
avl_REF1 = set([3, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.insert(int3)                                                       # STEP 72
ACTION: avl1.insert(int3) 
int3 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102fda1b8> : <type 'instance'>
avl_REF1 = set([3, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([8, 3, 4]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 73
ACTION: avl1.delete(int3) 
int3 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102fda1b8> : <type 'instance'>
avl_REF1 = set([8, 3, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([3, 4]) : <type 'set'>
==================================================
int3 = 19                                                               # STEP 74
ACTION: int3 = 19 
int3 = 8 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
result = avl1.find(int0)                                                # STEP 75
ACTION: result = avl1.find(int0) 
int0 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102fda1b8> : <type 'instance'>
avl_REF1 = set([3, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl2.insert(int1)                                                       # STEP 76
ACTION: avl2.insert(int1) 
int1 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a66440> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([5]) : <type 'set'>
==================================================
avl1 == avl2                                                            # STEP 77
ACTION: avl1 == avl2 
avl1 = <avl.AVLTree instance at 0x102fda1b8> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x103a66440> : <type 'instance'>
avl_REF1 = set([3, 4]) : <type 'set'>
avl_REF2 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
avl2.delete(int3)                                                       # STEP 78
ACTION: avl2.delete(int3) 
int3 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a66440> : <type 'instance'>
avl_REF2 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl0.insert(int1)                                                       # STEP 79
ACTION: avl0.insert(int1) 
int1 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103abe320> : <type 'instance'>
avl_REF0 = set([10, 4, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([10, 4, 5, 14, 7]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 80
ACTION: avl0.delete(int3) 
int3 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103abe320> : <type 'instance'>
avl_REF0 = set([10, 4, 5, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl1.delete(int0)                                                       # STEP 81
ACTION: avl1.delete(int0) 
int0 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102fda1b8> : <type 'instance'>
avl_REF1 = set([3, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int1 = 20                                                               # STEP 82
ACTION: int1 = 20 
int1 = 5 : <type 'int'>
=> int1 = 20 : <type 'int'>
==================================================
int0 = 11                                                               # STEP 83
ACTION: int0 = 11 
int0 = 13 : <type 'int'>
=> int0 = 11 : <type 'int'>
==================================================
int3 = 17                                                               # STEP 84
ACTION: int3 = 17 
int3 = 19 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 85
ACTION: avl1.insert(int2) 
int2 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102fda1b8> : <type 'instance'>
avl_REF1 = set([3, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([18, 3, 4]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 86
ACTION: avl2.delete(int2) 
int2 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a66440> : <type 'instance'>
avl_REF2 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int2 = 14                                                               # STEP 87
ACTION: int2 = 14 
int2 = 18 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
avl2 == avl2                                                            # STEP 88
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x103a66440> : <type 'instance'>
avl_REF2 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl0.delete(int1)                                                       # STEP 89
ACTION: avl0.delete(int1) 
int1 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103abe320> : <type 'instance'>
avl_REF0 = set([10, 4, 5, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl2.delete(int1)                                                       # STEP 90
ACTION: avl2.delete(int1) 
int1 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a66440> : <type 'instance'>
avl_REF2 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
result = avl1.find(int0)                                                # STEP 91
ACTION: result = avl1.find(int0) 
int0 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102fda1b8> : <type 'instance'>
avl_REF1 = set([18, 3, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
result = avl0.find(int0)                                                # STEP 92
ACTION: result = avl0.find(int0) 
int0 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103abe320> : <type 'instance'>
avl_REF0 = set([10, 4, 5, 14, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
avl2.insert(int1)                                                       # STEP 93
ACTION: avl2.insert(int1) 
int1 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a66440> : <type 'instance'>
avl_REF2 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([20, 5]) : <type 'set'>
==================================================
int1 = 7                                                                # STEP 94
ACTION: int1 = 7 
int1 = 20 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 95
ACTION: avl1.insert(int0) 
int0 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102fda1b8> : <type 'instance'>
avl_REF1 = set([18, 3, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([11, 18, 3, 4]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 96
ACTION: avl0.delete(int2) 
int2 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103abe320> : <type 'instance'>
avl_REF0 = set([10, 4, 5, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([10, 4, 5, 7]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103e83cb0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #5 STEP #0 (0:00:36.645066) Fri Apr 28 03:48:45 2017 [ 149 stmts 201 branches ]
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 12
STOPPING TESTING DUE TO TIMEOUT
8.6528673227 PERCENT COVERED
60.1616609097 TOTAL RUNTIME
8 EXECUTED
709 TOTAL TEST OPERATIONS
26.1167395115 TIME SPENT EXECUTING TEST OPERATIONS
0.0247547626495 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
26.3167250156 TIME SPENT CHECKING PROPERTIES
52.4334645271 TOTAL TIME SPENT RUNNING SUT
0.00446629524231 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int2 = 8                                                                 # STEP 0
int3 = 4                                                                 # STEP 1
int1 = 3                                                                 # STEP 2
int0 = 4                                                                 # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
avl1.insert(int1)                                                        # STEP 5
avl1.delete(int0)                                                        # STEP 6
int1 = 19                                                                # STEP 7
avl1.insert(int3)                                                        # STEP 8
int0 = 14                                                                # STEP 9
int3 = 16                                                               # STEP 10
result = avl1.find(int1)                                                # STEP 11
int1 = 5                                                                # STEP 12
avl2 = avl.AVLTree()                                                    # STEP 13
result = avl2.inorder()                                                 # STEP 14
avl2.delete(int1)                                                       # STEP 15
int1 = 4                                                                # STEP 16
result = avl1.find(int3)                                                # STEP 17
result = avl1.find(int3)                                                # STEP 18
result = avl2.find(int1)                                                # STEP 19
int1 = 8                                                                # STEP 20
avl0 = avl.AVLTree()                                                    # STEP 21
result = avl1.find(int1)                                                # STEP 22
int3 = 10                                                               # STEP 23
avl0.insert(int3)                                                       # STEP 24
avl2.insert(int1)                                                       # STEP 25
avl1.delete(int2)                                                       # STEP 26
int2 = 16                                                               # STEP 27
int3 = 12                                                               # STEP 28
int1 = 20                                                               # STEP 29
avl0.insert(int0)                                                       # STEP 30
int0 = 4                                                                # STEP 31
result = avl2.inorder()                                                 # STEP 32
avl2.insert(int1)                                                       # STEP 33
int1 = 10                                                               # STEP 34
avl0.insert(int0)                                                       # STEP 35
int0 = 7                                                                # STEP 36
avl0.insert(int0)                                                       # STEP 37
int0 = 8                                                                # STEP 38
avl2.delete(int0)                                                       # STEP 39
result = avl1.find(int1)                                                # STEP 40
int0 = 15                                                               # STEP 41
int1 = 13                                                               # STEP 42
result = avl0.inorder()                                                 # STEP 43
avl1.delete(int1)                                                       # STEP 44
avl2 == avl0                                                            # STEP 45
result = avl1.inorder()                                                 # STEP 46
int1 = 7                                                                # STEP 47
result = avl1.find(int1)                                                # STEP 48
avl1.delete(int3)                                                       # STEP 49
avl0.delete(int1)                                                       # STEP 50
avl2 = avl.AVLTree()                                                    # STEP 51
int3 = 2                                                                # STEP 52
avl0.insert(int1)                                                       # STEP 53
avl0.delete(int1)                                                       # STEP 54
avl0 == avl1                                                            # STEP 55
avl0.insert(int1)                                                       # STEP 56
avl1.delete(int0)                                                       # STEP 57
result = avl0.find(int3)                                                # STEP 58
result = avl0.find(int3)                                                # STEP 59
int0 = 13                                                               # STEP 60
result = avl0.find(int1)                                                # STEP 61
int1 = 19                                                               # STEP 62
int3 = 8                                                                # STEP 63
avl1.delete(int1)                                                       # STEP 64
int1 = 5                                                                # STEP 65
result = avl0.find(int2)                                                # STEP 66
int2 = 18                                                               # STEP 67
result = avl0.find(int1)                                                # STEP 68
int1 = 5                                                                # STEP 69
avl0 == avl0                                                            # STEP 70
avl1.delete(int3)                                                       # STEP 71
avl1.insert(int3)                                                       # STEP 72
avl1.delete(int3)                                                       # STEP 73
int3 = 19                                                               # STEP 74
result = avl1.find(int0)                                                # STEP 75
avl2.insert(int1)                                                       # STEP 76
avl1 == avl2                                                            # STEP 77
avl2.delete(int3)                                                       # STEP 78
avl0.insert(int1)                                                       # STEP 79
avl0.delete(int3)                                                       # STEP 80
avl1.delete(int0)                                                       # STEP 81
int1 = 20                                                               # STEP 82
int0 = 11                                                               # STEP 83
int3 = 17                                                               # STEP 84
avl1.insert(int2)                                                       # STEP 85
avl2.delete(int2)                                                       # STEP 86
int2 = 14                                                               # STEP 87
avl2 == avl2                                                            # STEP 88
avl0.delete(int1)                                                       # STEP 89
avl2.delete(int1)                                                       # STEP 90
result = avl1.find(int0)                                                # STEP 91
result = avl0.find(int0)                                                # STEP 92
avl2.insert(int1)                                                       # STEP 93
int1 = 7                                                                # STEP 94
avl1.insert(int0)                                                       # STEP 95
avl0.delete(int2)                                                       # STEP 96
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103e83cb0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
218 BRANCHES COVERED
163 STATEMENTS COVERED

Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.61907.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  5 [2:0]
-- < 4 [1:1]
---- < 1 [0:0] L
-- > 13 [1:0]
---- < 11 [0:0] L
---- > 15 [0:0] L
set([1, 4, 5, 11, 13, 15])
TEST #3 STEP #73 (0:00:30.022557) Mon May  1 17:18:45 2017 [ 159 stmts 210 branches ]
  16 [2:0]
-- < 1 [1:-1]
---- > 5 [0:0] L
-- > 18 [1:0]
---- < 17 [0:0] L
---- > 20 [0:0] L
set([1, 5, 16, 17, 18, 20])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105882830>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
Original test has 86 steps

SAVING TEST AS failure.61907.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 11                                                                # STEP 0
ACTION: int1 = 11 
int1 = None : <type 'NoneType'>
=> int1 = 11 : <type 'int'>
==================================================
int0 = 3                                                                 # STEP 1
ACTION: int0 = 3 
int0 = None : <type 'NoneType'>
=> int0 = 3 : <type 'int'>
==================================================
int3 = 20                                                                # STEP 2
ACTION: int3 = 20 
int3 = None : <type 'NoneType'>
=> int3 = 20 : <type 'int'>
==================================================
int2 = 12                                                                # STEP 3
ACTION: int2 = 12 
int2 = None : <type 'NoneType'>
=> int2 = 12 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x105662560> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.delete(int1)                                                        # STEP 5
ACTION: avl1.delete(int1) 
int1 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105662560> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int1 = 16                                                                # STEP 6
ACTION: int1 = 16 
int1 = 11 : <type 'int'>
=> int1 = 16 : <type 'int'>
==================================================
avl1 == avl1                                                             # STEP 7
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x105662560> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.delete(int0)                                                        # STEP 8
ACTION: avl1.delete(int0) 
int0 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105662560> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.insert(int0)                                                        # STEP 9
ACTION: avl1.insert(int0) 
int0 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105662560> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([3]) : <type 'set'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 10
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x1051c0638> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 11
ACTION: avl2.insert(int3) 
int3 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1051c0638> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([20]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 12
ACTION: avl1.insert(int0) 
int0 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105662560> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl2.insert(int0)                                                       # STEP 13
ACTION: avl2.insert(int0) 
int0 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1051c0638> : <type 'instance'>
avl_REF2 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([3, 20]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 14
ACTION: avl1.insert(int0) 
int0 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105662560> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl2.delete(int2)                                                       # STEP 15
ACTION: avl2.delete(int2) 
int2 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1051c0638> : <type 'instance'>
avl_REF2 = set([3, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl1.insert(int1)                                                       # STEP 16
ACTION: avl1.insert(int1) 
int1 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105662560> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([16, 3]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 17
ACTION: avl1.insert(int0) 
int0 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105662560> : <type 'instance'>
avl_REF1 = set([16, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.insert(int1)                                                       # STEP 18
ACTION: avl1.insert(int1) 
int1 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105662560> : <type 'instance'>
avl_REF1 = set([16, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
result = avl1.find(int0)                                                # STEP 19
ACTION: result = avl1.find(int0) 
int0 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105662560> : <type 'instance'>
avl_REF1 = set([16, 3]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl2.delete(int0)                                                       # STEP 20
ACTION: avl2.delete(int0) 
int0 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1051c0638> : <type 'instance'>
avl_REF2 = set([3, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([20]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 21
ACTION: avl1.delete(int3) 
int3 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105662560> : <type 'instance'>
avl_REF1 = set([16, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.delete(int0)                                                       # STEP 22
ACTION: avl1.delete(int0) 
int0 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105662560> : <type 'instance'>
avl_REF1 = set([16, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([16]) : <type 'set'>
==================================================
result = avl1.find(int2)                                                # STEP 23
ACTION: result = avl1.find(int2) 
int2 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105662560> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl1.delete(int3)                                                       # STEP 24
ACTION: avl1.delete(int3) 
int3 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105662560> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int3 = 17                                                               # STEP 25
ACTION: int3 = 17 
int3 = 20 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
int0 = 2                                                                # STEP 26
ACTION: int0 = 2 
int0 = 3 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 27
ACTION: avl1.insert(int0) 
int0 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105662560> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([16, 2]) : <type 'set'>
==================================================
int2 = 13                                                               # STEP 28
ACTION: int2 = 13 
int2 = 12 : <type 'int'>
=> int2 = 13 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 29
ACTION: avl2.insert(int1) 
int1 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1051c0638> : <type 'instance'>
avl_REF2 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([16, 20]) : <type 'set'>
==================================================
int1 = 11                                                               # STEP 30
ACTION: int1 = 11 
int1 = 16 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 31
ACTION: avl1.delete(int2) 
int2 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105662560> : <type 'instance'>
avl_REF1 = set([16, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.delete(int0)                                                       # STEP 32
ACTION: avl1.delete(int0) 
int0 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105662560> : <type 'instance'>
avl_REF1 = set([16, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([16]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 33
ACTION: avl2.delete(int0) 
int0 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1051c0638> : <type 'instance'>
avl_REF2 = set([16, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int2 = 14                                                               # STEP 34
ACTION: int2 = 14 
int2 = 13 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
int0 = 11                                                               # STEP 35
ACTION: int0 = 11 
int0 = 2 : <type 'int'>
=> int0 = 11 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 36
ACTION: avl2.insert(int2) 
int2 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1051c0638> : <type 'instance'>
avl_REF2 = set([16, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([16, 20, 14]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 37
ACTION: avl2.insert(int0) 
int0 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1051c0638> : <type 'instance'>
avl_REF2 = set([16, 20, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([16, 11, 20, 14]) : <type 'set'>
==================================================
result = avl2.find(int0)                                                # STEP 38
ACTION: result = avl2.find(int0) 
int0 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1051c0638> : <type 'instance'>
avl_REF2 = set([16, 11, 20, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
result = avl1.inorder()                                                 # STEP 39
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x105662560> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int2 = 1                                                                # STEP 40
ACTION: int2 = 1 
int2 = 14 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
int0 = 3                                                                # STEP 41
ACTION: int0 = 3 
int0 = 11 : <type 'int'>
=> int0 = 3 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 42
ACTION: avl2.insert(int2) 
int2 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1051c0638> : <type 'instance'>
avl_REF2 = set([16, 11, 20, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([16, 1, 11, 20, 14]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 43
ACTION: avl1.insert(int0) 
int0 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105662560> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([16, 3]) : <type 'set'>
==================================================
int2 = 14                                                               # STEP 44
ACTION: int2 = 14 
int2 = 1 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
result = avl1.find(int2)                                                # STEP 45
ACTION: result = avl1.find(int2) 
int2 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105662560> : <type 'instance'>
avl_REF1 = set([16, 3]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl2.delete(int1)                                                       # STEP 46
ACTION: avl2.delete(int1) 
int1 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1051c0638> : <type 'instance'>
avl_REF2 = set([16, 1, 11, 20, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([16, 1, 20, 14]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 47
ACTION: avl1.delete(int0) 
int0 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105662560> : <type 'instance'>
avl_REF1 = set([16, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([16]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 48
ACTION: avl1.insert(int1) 
int1 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105662560> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([16, 11]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 49
ACTION: avl1.insert(int1) 
int1 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105662560> : <type 'instance'>
avl_REF1 = set([16, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl2.delete(int1)                                                       # STEP 50
ACTION: avl2.delete(int1) 
int1 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1051c0638> : <type 'instance'>
avl_REF2 = set([16, 1, 20, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int0 = 14                                                               # STEP 51
ACTION: int0 = 14 
int0 = 3 : <type 'int'>
=> int0 = 14 : <type 'int'>
==================================================
int2 = 18                                                               # STEP 52
ACTION: int2 = 18 
int2 = 14 : <type 'int'>
=> int2 = 18 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 53
ACTION: avl2.delete(int0) 
int0 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1051c0638> : <type 'instance'>
avl_REF2 = set([16, 1, 20, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([16, 1, 20]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 54
ACTION: avl2.delete(int3) 
int3 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1051c0638> : <type 'instance'>
avl_REF2 = set([16, 1, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.delete(int1)                                                       # STEP 55
ACTION: avl2.delete(int1) 
int1 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1051c0638> : <type 'instance'>
avl_REF2 = set([16, 1, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.delete(int1)                                                       # STEP 56
ACTION: avl2.delete(int1) 
int1 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1051c0638> : <type 'instance'>
avl_REF2 = set([16, 1, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl1 == avl1                                                            # STEP 57
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x105662560> : <type 'instance'>
avl_REF1 = set([16, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
int0 = 2                                                                # STEP 58
ACTION: int0 = 2 
int0 = 14 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 59
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x1051c0638> : <type 'instance'>
avl_REF2 = set([16, 1, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl2.find(int3)                                                # STEP 60
ACTION: result = avl2.find(int3) 
int3 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1051c0638> : <type 'instance'>
avl_REF2 = set([16, 1, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl2.insert(int3)                                                       # STEP 61
ACTION: avl2.insert(int3) 
int3 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1051c0638> : <type 'instance'>
avl_REF2 = set([16, 1, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([1, 16, 17, 20]) : <type 'set'>
==================================================
int1 = 5                                                                # STEP 62
ACTION: int1 = 5 
int1 = 11 : <type 'int'>
=> int1 = 5 : <type 'int'>
==================================================
int3 = 10                                                               # STEP 63
ACTION: int3 = 10 
int3 = 17 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 64
ACTION: avl1.insert(int0) 
int0 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105662560> : <type 'instance'>
avl_REF1 = set([16, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([16, 2, 11]) : <type 'set'>
==================================================
int0 = 12                                                               # STEP 65
ACTION: int0 = 12 
int0 = 2 : <type 'int'>
=> int0 = 12 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 66
ACTION: avl2.insert(int2) 
int2 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1051c0638> : <type 'instance'>
avl_REF2 = set([1, 16, 17, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([1, 16, 17, 18, 20]) : <type 'set'>
==================================================
int2 = 18                                                               # STEP 67
ACTION: int2 = 18 
int2 = 18 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 68
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x1051c0638> : <type 'instance'>
avl_REF2 = set([1, 16, 17, 18, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl1.delete(int1)                                                       # STEP 69
ACTION: avl1.delete(int1) 
int1 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105662560> : <type 'instance'>
avl_REF1 = set([16, 2, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl2.insert(int1)                                                       # STEP 70
ACTION: avl2.insert(int1) 
int1 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1051c0638> : <type 'instance'>
avl_REF2 = set([1, 16, 17, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([1, 5, 16, 17, 18, 20]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 71
ACTION: avl1.insert(int0) 
int0 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105662560> : <type 'instance'>
avl_REF1 = set([16, 2, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([16, 2, 11, 12]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 72
ACTION: avl2.delete(int1) 
int1 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1051c0638> : <type 'instance'>
avl_REF2 = set([1, 5, 16, 17, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([1, 16, 17, 18, 20]) : <type 'set'>
==================================================
result = avl2.find(int2)                                                # STEP 73
ACTION: result = avl2.find(int2) 
int2 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1051c0638> : <type 'instance'>
avl_REF2 = set([1, 16, 17, 18, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl2.insert(int1)                                                       # STEP 74
ACTION: avl2.insert(int1) 
int1 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1051c0638> : <type 'instance'>
avl_REF2 = set([1, 16, 17, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([1, 5, 16, 17, 18, 20]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 75
ACTION: avl2.delete(int0) 
int0 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1051c0638> : <type 'instance'>
avl_REF2 = set([1, 5, 16, 17, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int2 = 11                                                               # STEP 76
ACTION: int2 = 11 
int2 = 18 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
int0 = 2                                                                # STEP 77
ACTION: int0 = 2 
int0 = 12 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 78
ACTION: avl1.delete(int1) 
int1 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105662560> : <type 'instance'>
avl_REF1 = set([16, 2, 11, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.insert(int2)                                                       # STEP 79
ACTION: avl1.insert(int2) 
int2 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105662560> : <type 'instance'>
avl_REF1 = set([16, 2, 11, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
avl2.display()                                                          # STEP 80
ACTION: avl2.display() 
avl2 = <avlbug2.AVLTree instance at 0x1051c0638> : <type 'instance'>
avl_REF2 = set([1, 5, 16, 17, 18, 20]) : <type 'set'>
  16 [2:0]
-- < 1 [1:-1]
---- > 5 [0:0] L
-- > 18 [1:0]
---- < 17 [0:0] L
---- > 20 [0:0] L
REFERENCE ACTION: print(avl_REF2) 
set([1, 5, 16, 17, 18, 20])
==================================================
result = avl2.find(int1)                                                # STEP 81
ACTION: result = avl2.find(int1) 
int1 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1051c0638> : <type 'instance'>
avl_REF2 = set([1, 5, 16, 17, 18, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl2.delete(int0)                                                       # STEP 82
ACTION: avl2.delete(int0) 
int0 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1051c0638> : <type 'instance'>
avl_REF2 = set([1, 5, 16, 17, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl1.delete(int1)                                                       # STEP 83
ACTION: avl1.delete(int1) 
int1 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105662560> : <type 'instance'>
avl_REF1 = set([16, 2, 11, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl2.delete(int1)                                                       # STEP 84
ACTION: avl2.delete(int1) 
int1 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1051c0638> : <type 'instance'>
avl_REF2 = set([1, 5, 16, 17, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([1, 16, 17, 18, 20]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 85
ACTION: avl1.delete(int0) 
int0 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105662560> : <type 'instance'>
avl_REF1 = set([16, 2, 11, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([16, 11, 12]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1057baea8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
  4 [2:0]
-- < 3 [1:1]
---- < 1 [0:0] L
-- > 7 [1:0]
---- < 5 [0:0] L
---- > 11 [0:0] L
set([1, 3, 4, 5, 7, 11])
  4 [3:-1]
-- < 3 [1:1]
---- < 1 [0:0] L
-- > 7 [2:-1]
---- < 5 [0:0] L
---- > 11 [1:-1]
------ > 19 [0:0] L
set([1, 3, 4, 5, 7, 11, 19])
  4 [3:-1]
-- < 3 [1:1]
---- < 1 [0:0] L
-- > 7 [2:-1]
---- < 5 [0:0] L
---- > 11 [1:-1]
------ > 19 [0:0] L
set([1, 3, 4, 5, 7, 11, 19])
  4 [3:-1]
-- < 3 [1:1]
---- < 1 [0:0] L
-- > 7 [2:-1]
---- < 5 [0:0] L
---- > 11 [1:-1]
------ > 19 [0:0] L
set([1, 3, 4, 5, 7, 11, 19])
  4 [3:-1]
-- < 3 [1:1]
---- < 1 [0:0] L
-- > 7 [2:-1]
---- < 5 [0:0] L
---- > 11 [1:-1]
------ > 19 [0:0] L
set([1, 3, 4, 5, 7, 11, 19])
  4 [3:-1]
-- < 3 [1:1]
---- < 1 [0:0] L
-- > 7 [2:-1]
---- < 5 [0:0] L
---- > 11 [1:-1]
------ > 19 [0:0] L
set([1, 3, 4, 5, 7, 11, 19])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10575f4d0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
Original test has 78 steps

SAVING TEST AS failure.61907.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
avl2 = avl.AVLTree()                                                     # STEP 0
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x10574f560> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl2.inorder()                                                  # STEP 1
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x10574f560> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int2 = 7                                                                 # STEP 2
ACTION: int2 = 7 
int2 = None : <type 'NoneType'>
=> int2 = 7 : <type 'int'>
==================================================
result = avl2.find(int2)                                                 # STEP 3
ACTION: result = avl2.find(int2) 
int2 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10574f560> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl2.delete(int2)                                                        # STEP 4
ACTION: avl2.delete(int2) 
int2 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10574f560> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.insert(int2)                                                        # STEP 5
ACTION: avl2.insert(int2) 
int2 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10574f560> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([7]) : <type 'set'>
==================================================
avl2.insert(int2)                                                        # STEP 6
ACTION: avl2.insert(int2) 
int2 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10574f560> : <type 'instance'>
avl_REF2 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
int1 = 17                                                                # STEP 7
ACTION: int1 = 17 
int1 = None : <type 'NoneType'>
=> int1 = 17 : <type 'int'>
==================================================
int3 = 6                                                                 # STEP 8
ACTION: int3 = 6 
int3 = None : <type 'NoneType'>
=> int3 = 6 : <type 'int'>
==================================================
int0 = 4                                                                 # STEP 9
ACTION: int0 = 4 
int0 = None : <type 'NoneType'>
=> int0 = 4 : <type 'int'>
==================================================
int2 = 15                                                               # STEP 10
ACTION: int2 = 15 
int2 = 7 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 11
ACTION: avl2.insert(int1) 
int1 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10574f560> : <type 'instance'>
avl_REF2 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([17, 7]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 12
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x10574f560> : <type 'instance'>
avl_REF2 = set([17, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl1 = avl.AVLTree()                                                    # STEP 13
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x105785950> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
result = avl2.find(int3)                                                # STEP 14
ACTION: result = avl2.find(int3) 
int3 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10574f560> : <type 'instance'>
avl_REF2 = set([17, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
int3 = 6                                                                # STEP 15
ACTION: int3 = 6 
int3 = 6 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 16
ACTION: avl2.insert(int0) 
int0 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10574f560> : <type 'instance'>
avl_REF2 = set([17, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([17, 4, 7]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 17
ACTION: avl1.delete(int0) 
int0 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105785950> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.insert(int0)                                                       # STEP 18
ACTION: avl1.insert(int0) 
int0 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105785950> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([4]) : <type 'set'>
==================================================
avl1 == avl2                                                            # STEP 19
ACTION: avl1 == avl2 
avl1 = <avlbug2.AVLTree instance at 0x105785950> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x10574f560> : <type 'instance'>
avl_REF1 = set([4]) : <type 'set'>
avl_REF2 = set([17, 4, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
avl1.insert(int3)                                                       # STEP 20
ACTION: avl1.insert(int3) 
int3 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105785950> : <type 'instance'>
avl_REF1 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([4, 6]) : <type 'set'>
==================================================
int3 = 3                                                                # STEP 21
ACTION: int3 = 3 
int3 = 6 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 22
ACTION: avl2.insert(int3) 
int3 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10574f560> : <type 'instance'>
avl_REF2 = set([17, 4, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([17, 3, 4, 7]) : <type 'set'>
==================================================
int0 = 4                                                                # STEP 23
ACTION: int0 = 4 
int0 = 4 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 24
ACTION: avl2.delete(int2) 
int2 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10574f560> : <type 'instance'>
avl_REF2 = set([17, 3, 4, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl1.insert(int0)                                                       # STEP 25
ACTION: avl1.insert(int0) 
int0 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105785950> : <type 'instance'>
avl_REF1 = set([4, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
int3 = 5                                                                # STEP 26
ACTION: int3 = 5 
int3 = 3 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
result = avl2.find(int0)                                                # STEP 27
ACTION: result = avl2.find(int0) 
int0 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10574f560> : <type 'instance'>
avl_REF2 = set([17, 3, 4, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl2.delete(int2)                                                       # STEP 28
ACTION: avl2.delete(int2) 
int2 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10574f560> : <type 'instance'>
avl_REF2 = set([17, 3, 4, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int2 = 11                                                               # STEP 29
ACTION: int2 = 11 
int2 = 15 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 30
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x105785950> : <type 'instance'>
avl_REF1 = set([4, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
result = avl2.find(int2)                                                # STEP 31
ACTION: result = avl2.find(int2) 
int2 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10574f560> : <type 'instance'>
avl_REF2 = set([17, 3, 4, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl1.delete(int0)                                                       # STEP 32
ACTION: avl1.delete(int0) 
int0 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105785950> : <type 'instance'>
avl_REF1 = set([4, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([6]) : <type 'set'>
==================================================
result = avl2.find(int1)                                                # STEP 33
ACTION: result = avl2.find(int1) 
int1 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10574f560> : <type 'instance'>
avl_REF2 = set([17, 3, 4, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl1.delete(int0)                                                       # STEP 34
ACTION: avl1.delete(int0) 
int0 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105785950> : <type 'instance'>
avl_REF1 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl2.insert(int2)                                                       # STEP 35
ACTION: avl2.insert(int2) 
int2 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10574f560> : <type 'instance'>
avl_REF2 = set([17, 3, 4, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([11, 17, 3, 4, 7]) : <type 'set'>
==================================================
result = avl2.find(int0)                                                # STEP 36
ACTION: result = avl2.find(int0) 
int0 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10574f560> : <type 'instance'>
avl_REF2 = set([11, 17, 3, 4, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl2.insert(int3)                                                       # STEP 37
ACTION: avl2.insert(int3) 
int3 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10574f560> : <type 'instance'>
avl_REF2 = set([11, 17, 3, 4, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([3, 4, 5, 7, 11, 17]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 38
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x10574f560> : <type 'instance'>
avl_REF2 = set([3, 4, 5, 7, 11, 17]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int2 = 1                                                                # STEP 39
ACTION: int2 = 1 
int2 = 11 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 40
ACTION: avl2.delete(int1) 
int1 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10574f560> : <type 'instance'>
avl_REF2 = set([3, 4, 5, 7, 11, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([3, 4, 5, 7, 11]) : <type 'set'>
==================================================
avl1 == avl1                                                            # STEP 41
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x105785950> : <type 'instance'>
avl_REF1 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
int0 = 6                                                                # STEP 42
ACTION: int0 = 6 
int0 = 4 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 43
ACTION: avl1.delete(int3) 
int3 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105785950> : <type 'instance'>
avl_REF1 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl2.insert(int2)                                                       # STEP 44
ACTION: avl2.insert(int2) 
int2 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10574f560> : <type 'instance'>
avl_REF2 = set([3, 4, 5, 7, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([1, 3, 4, 5, 7, 11]) : <type 'set'>
==================================================
avl2.display()                                                          # STEP 45
ACTION: avl2.display() 
avl2 = <avlbug2.AVLTree instance at 0x10574f560> : <type 'instance'>
avl_REF2 = set([1, 3, 4, 5, 7, 11]) : <type 'set'>
  4 [2:0]
-- < 3 [1:1]
---- < 1 [0:0] L
-- > 7 [1:0]
---- < 5 [0:0] L
---- > 11 [0:0] L
REFERENCE ACTION: print(avl_REF2) 
set([1, 3, 4, 5, 7, 11])
==================================================
avl1.insert(int2)                                                       # STEP 46
ACTION: avl1.insert(int2) 
int2 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105785950> : <type 'instance'>
avl_REF1 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([1, 6]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 47
ACTION: avl1.insert(int3) 
int3 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105785950> : <type 'instance'>
avl_REF1 = set([1, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([1, 5, 6]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 48
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x105785950> : <type 'instance'>
avl_REF1 = set([1, 5, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.delete(int0)                                                       # STEP 49
ACTION: avl1.delete(int0) 
int0 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105785950> : <type 'instance'>
avl_REF1 = set([1, 5, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([1, 5]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 50
ACTION: avl1.delete(int1) 
int1 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105785950> : <type 'instance'>
avl_REF1 = set([1, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.insert(int2)                                                       # STEP 51
ACTION: avl1.insert(int2) 
int2 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105785950> : <type 'instance'>
avl_REF1 = set([1, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
result = avl2.find(int1)                                                # STEP 52
ACTION: result = avl2.find(int1) 
int1 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10574f560> : <type 'instance'>
avl_REF2 = set([1, 3, 4, 5, 7, 11]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int3 = 19                                                               # STEP 53
ACTION: int3 = 19 
int3 = 5 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 54
ACTION: avl1.insert(int1) 
int1 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105785950> : <type 'instance'>
avl_REF1 = set([1, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([1, 5, 17]) : <type 'set'>
==================================================
int0 = 18                                                               # STEP 55
ACTION: int0 = 18 
int0 = 6 : <type 'int'>
=> int0 = 18 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 56
ACTION: avl1.insert(int2) 
int2 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105785950> : <type 'instance'>
avl_REF1 = set([1, 5, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
avl2.insert(int0)                                                       # STEP 57
ACTION: avl2.insert(int0) 
int0 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10574f560> : <type 'instance'>
avl_REF2 = set([1, 3, 4, 5, 7, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([1, 3, 4, 5, 7, 11, 18]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 58
ACTION: avl2.delete(int0) 
int0 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10574f560> : <type 'instance'>
avl_REF2 = set([1, 3, 4, 5, 7, 11, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([1, 3, 4, 5, 7, 11]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 59
ACTION: avl1.insert(int2) 
int2 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105785950> : <type 'instance'>
avl_REF1 = set([1, 5, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
avl2.delete(int3)                                                       # STEP 60
ACTION: avl2.delete(int3) 
int3 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10574f560> : <type 'instance'>
avl_REF2 = set([1, 3, 4, 5, 7, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.delete(int0)                                                       # STEP 61
ACTION: avl2.delete(int0) 
int0 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10574f560> : <type 'instance'>
avl_REF2 = set([1, 3, 4, 5, 7, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.delete(int0)                                                       # STEP 62
ACTION: avl2.delete(int0) 
int0 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10574f560> : <type 'instance'>
avl_REF2 = set([1, 3, 4, 5, 7, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.insert(int3)                                                       # STEP 63
ACTION: avl2.insert(int3) 
int3 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10574f560> : <type 'instance'>
avl_REF2 = set([1, 3, 4, 5, 7, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([1, 3, 4, 5, 7, 11, 19]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 64
ACTION: avl1.insert(int0) 
int0 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105785950> : <type 'instance'>
avl_REF1 = set([1, 5, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([1, 5, 17, 18]) : <type 'set'>
==================================================
avl2.display()                                                          # STEP 65
ACTION: avl2.display() 
avl2 = <avlbug2.AVLTree instance at 0x10574f560> : <type 'instance'>
avl_REF2 = set([1, 3, 4, 5, 7, 11, 19]) : <type 'set'>
  4 [3:-1]
-- < 3 [1:1]
---- < 1 [0:0] L
-- > 7 [2:-1]
---- < 5 [0:0] L
---- > 11 [1:-1]
------ > 19 [0:0] L
REFERENCE ACTION: print(avl_REF2) 
set([1, 3, 4, 5, 7, 11, 19])
==================================================
result = avl2.inorder()                                                 # STEP 66
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x10574f560> : <type 'instance'>
avl_REF2 = set([1, 3, 4, 5, 7, 11, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int3)                                                       # STEP 67
ACTION: avl2.insert(int3) 
int3 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10574f560> : <type 'instance'>
avl_REF2 = set([1, 3, 4, 5, 7, 11, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
avl1 == avl2                                                            # STEP 68
ACTION: avl1 == avl2 
avl1 = <avlbug2.AVLTree instance at 0x105785950> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x10574f560> : <type 'instance'>
avl_REF1 = set([1, 5, 17, 18]) : <type 'set'>
avl_REF2 = set([1, 3, 4, 5, 7, 11, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
avl2.delete(int0)                                                       # STEP 69
ACTION: avl2.delete(int0) 
int0 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10574f560> : <type 'instance'>
avl_REF2 = set([1, 3, 4, 5, 7, 11, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.display()                                                          # STEP 70
ACTION: avl2.display() 
avl2 = <avlbug2.AVLTree instance at 0x10574f560> : <type 'instance'>
avl_REF2 = set([1, 3, 4, 5, 7, 11, 19]) : <type 'set'>
  4 [3:-1]
-- < 3 [1:1]
---- < 1 [0:0] L
-- > 7 [2:-1]
---- < 5 [0:0] L
---- > 11 [1:-1]
------ > 19 [0:0] L
REFERENCE ACTION: print(avl_REF2) 
set([1, 3, 4, 5, 7, 11, 19])
==================================================
avl1.insert(int0)                                                       # STEP 71
ACTION: avl1.insert(int0) 
int0 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105785950> : <type 'instance'>
avl_REF1 = set([1, 5, 17, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
int1 = 7                                                                # STEP 72
ACTION: int1 = 7 
int1 = 17 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
avl2.display()                                                          # STEP 73
ACTION: avl2.display() 
avl2 = <avlbug2.AVLTree instance at 0x10574f560> : <type 'instance'>
avl_REF2 = set([1, 3, 4, 5, 7, 11, 19]) : <type 'set'>
  4 [3:-1]
-- < 3 [1:1]
---- < 1 [0:0] L
-- > 7 [2:-1]
---- < 5 [0:0] L
---- > 11 [1:-1]
------ > 19 [0:0] L
REFERENCE ACTION: print(avl_REF2) 
set([1, 3, 4, 5, 7, 11, 19])
==================================================
avl2.display()                                                          # STEP 74
ACTION: avl2.display() 
avl2 = <avlbug2.AVLTree instance at 0x10574f560> : <type 'instance'>
avl_REF2 = set([1, 3, 4, 5, 7, 11, 19]) : <type 'set'>
  4 [3:-1]
-- < 3 [1:1]
---- < 1 [0:0] L
-- > 7 [2:-1]
---- < 5 [0:0] L
---- > 11 [1:-1]
------ > 19 [0:0] L
REFERENCE ACTION: print(avl_REF2) 
set([1, 3, 4, 5, 7, 11, 19])
==================================================
avl2.insert(int3)                                                       # STEP 75
ACTION: avl2.insert(int3) 
int3 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10574f560> : <type 'instance'>
avl_REF2 = set([1, 3, 4, 5, 7, 11, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
avl2.display()                                                          # STEP 76
ACTION: avl2.display() 
avl2 = <avlbug2.AVLTree instance at 0x10574f560> : <type 'instance'>
avl_REF2 = set([1, 3, 4, 5, 7, 11, 19]) : <type 'set'>
  4 [3:-1]
-- < 3 [1:1]
---- < 1 [0:0] L
-- > 7 [2:-1]
---- < 5 [0:0] L
---- > 11 [1:-1]
------ > 19 [0:0] L
REFERENCE ACTION: print(avl_REF2) 
set([1, 3, 4, 5, 7, 11, 19])
==================================================
avl2.delete(int2)                                                       # STEP 77
ACTION: avl2.delete(int2) 
int2 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10574f560> : <type 'instance'>
avl_REF2 = set([1, 3, 4, 5, 7, 11, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([3, 4, 5, 7, 11, 19]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1057a6b90>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 38
STOPPING TESTING DUE TO TIMEOUT
8.15438189205 PERCENT COVERED
60.2166690826 TOTAL RUNTIME
5 EXECUTED
402 TOTAL TEST OPERATIONS
21.521198988 TIME SPENT EXECUTING TEST OPERATIONS
0.0466227531433 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
21.5887525082 TIME SPENT CHECKING PROPERTIES
43.1099514961 TOTAL TIME SPENT RUNNING SUT
0.00375199317932 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
2 FAILED
0 REPEATS OF FAILURES
2 ACTUAL DISTINCT FAILURES

FAILURE 0
int1 = 11                                                                # STEP 0
int0 = 3                                                                 # STEP 1
int3 = 20                                                                # STEP 2
int2 = 12                                                                # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
avl1.delete(int1)                                                        # STEP 5
int1 = 16                                                                # STEP 6
avl1 == avl1                                                             # STEP 7
avl1.delete(int0)                                                        # STEP 8
avl1.insert(int0)                                                        # STEP 9
avl2 = avl.AVLTree()                                                    # STEP 10
avl2.insert(int3)                                                       # STEP 11
avl1.insert(int0)                                                       # STEP 12
avl2.insert(int0)                                                       # STEP 13
avl1.insert(int0)                                                       # STEP 14
avl2.delete(int2)                                                       # STEP 15
avl1.insert(int1)                                                       # STEP 16
avl1.insert(int0)                                                       # STEP 17
avl1.insert(int1)                                                       # STEP 18
result = avl1.find(int0)                                                # STEP 19
avl2.delete(int0)                                                       # STEP 20
avl1.delete(int3)                                                       # STEP 21
avl1.delete(int0)                                                       # STEP 22
result = avl1.find(int2)                                                # STEP 23
avl1.delete(int3)                                                       # STEP 24
int3 = 17                                                               # STEP 25
int0 = 2                                                                # STEP 26
avl1.insert(int0)                                                       # STEP 27
int2 = 13                                                               # STEP 28
avl2.insert(int1)                                                       # STEP 29
int1 = 11                                                               # STEP 30
avl1.delete(int2)                                                       # STEP 31
avl1.delete(int0)                                                       # STEP 32
avl2.delete(int0)                                                       # STEP 33
int2 = 14                                                               # STEP 34
int0 = 11                                                               # STEP 35
avl2.insert(int2)                                                       # STEP 36
avl2.insert(int0)                                                       # STEP 37
result = avl2.find(int0)                                                # STEP 38
result = avl1.inorder()                                                 # STEP 39
int2 = 1                                                                # STEP 40
int0 = 3                                                                # STEP 41
avl2.insert(int2)                                                       # STEP 42
avl1.insert(int0)                                                       # STEP 43
int2 = 14                                                               # STEP 44
result = avl1.find(int2)                                                # STEP 45
avl2.delete(int1)                                                       # STEP 46
avl1.delete(int0)                                                       # STEP 47
avl1.insert(int1)                                                       # STEP 48
avl1.insert(int1)                                                       # STEP 49
avl2.delete(int1)                                                       # STEP 50
int0 = 14                                                               # STEP 51
int2 = 18                                                               # STEP 52
avl2.delete(int0)                                                       # STEP 53
avl2.delete(int3)                                                       # STEP 54
avl2.delete(int1)                                                       # STEP 55
avl2.delete(int1)                                                       # STEP 56
avl1 == avl1                                                            # STEP 57
int0 = 2                                                                # STEP 58
result = avl2.inorder()                                                 # STEP 59
result = avl2.find(int3)                                                # STEP 60
avl2.insert(int3)                                                       # STEP 61
int1 = 5                                                                # STEP 62
int3 = 10                                                               # STEP 63
avl1.insert(int0)                                                       # STEP 64
int0 = 12                                                               # STEP 65
avl2.insert(int2)                                                       # STEP 66
int2 = 18                                                               # STEP 67
result = avl2.inorder()                                                 # STEP 68
avl1.delete(int1)                                                       # STEP 69
avl2.insert(int1)                                                       # STEP 70
avl1.insert(int0)                                                       # STEP 71
avl2.delete(int1)                                                       # STEP 72
result = avl2.find(int2)                                                # STEP 73
avl2.insert(int1)                                                       # STEP 74
avl2.delete(int0)                                                       # STEP 75
int2 = 11                                                               # STEP 76
int0 = 2                                                                # STEP 77
avl1.delete(int1)                                                       # STEP 78
avl1.insert(int2)                                                       # STEP 79
avl2.display()                                                          # STEP 80
result = avl2.find(int1)                                                # STEP 81
avl2.delete(int0)                                                       # STEP 82
avl1.delete(int1)                                                       # STEP 83
avl2.delete(int1)                                                       # STEP 84
avl1.delete(int0)                                                       # STEP 85
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1057baea8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE 1
avl2 = avl.AVLTree()                                                     # STEP 0
result = avl2.inorder()                                                  # STEP 1
int2 = 7                                                                 # STEP 2
result = avl2.find(int2)                                                 # STEP 3
avl2.delete(int2)                                                        # STEP 4
avl2.insert(int2)                                                        # STEP 5
avl2.insert(int2)                                                        # STEP 6
int1 = 17                                                                # STEP 7
int3 = 6                                                                 # STEP 8
int0 = 4                                                                 # STEP 9
int2 = 15                                                               # STEP 10
avl2.insert(int1)                                                       # STEP 11
result = avl2.inorder()                                                 # STEP 12
avl1 = avl.AVLTree()                                                    # STEP 13
result = avl2.find(int3)                                                # STEP 14
int3 = 6                                                                # STEP 15
avl2.insert(int0)                                                       # STEP 16
avl1.delete(int0)                                                       # STEP 17
avl1.insert(int0)                                                       # STEP 18
avl1 == avl2                                                            # STEP 19
avl1.insert(int3)                                                       # STEP 20
int3 = 3                                                                # STEP 21
avl2.insert(int3)                                                       # STEP 22
int0 = 4                                                                # STEP 23
avl2.delete(int2)                                                       # STEP 24
avl1.insert(int0)                                                       # STEP 25
int3 = 5                                                                # STEP 26
result = avl2.find(int0)                                                # STEP 27
avl2.delete(int2)                                                       # STEP 28
int2 = 11                                                               # STEP 29
result = avl1.inorder()                                                 # STEP 30
result = avl2.find(int2)                                                # STEP 31
avl1.delete(int0)                                                       # STEP 32
result = avl2.find(int1)                                                # STEP 33
avl1.delete(int0)                                                       # STEP 34
avl2.insert(int2)                                                       # STEP 35
result = avl2.find(int0)                                                # STEP 36
avl2.insert(int3)                                                       # STEP 37
result = avl2.inorder()                                                 # STEP 38
int2 = 1                                                                # STEP 39
avl2.delete(int1)                                                       # STEP 40
avl1 == avl1                                                            # STEP 41
int0 = 6                                                                # STEP 42
avl1.delete(int3)                                                       # STEP 43
avl2.insert(int2)                                                       # STEP 44
avl2.display()                                                          # STEP 45
avl1.insert(int2)                                                       # STEP 46
avl1.insert(int3)                                                       # STEP 47
result = avl1.inorder()                                                 # STEP 48
avl1.delete(int0)                                                       # STEP 49
avl1.delete(int1)                                                       # STEP 50
avl1.insert(int2)                                                       # STEP 51
result = avl2.find(int1)                                                # STEP 52
int3 = 19                                                               # STEP 53
avl1.insert(int1)                                                       # STEP 54
int0 = 18                                                               # STEP 55
avl1.insert(int2)                                                       # STEP 56
avl2.insert(int0)                                                       # STEP 57
avl2.delete(int0)                                                       # STEP 58
avl1.insert(int2)                                                       # STEP 59
avl2.delete(int3)                                                       # STEP 60
avl2.delete(int0)                                                       # STEP 61
avl2.delete(int0)                                                       # STEP 62
avl2.insert(int3)                                                       # STEP 63
avl1.insert(int0)                                                       # STEP 64
avl2.display()                                                          # STEP 65
result = avl2.inorder()                                                 # STEP 66
avl2.insert(int3)                                                       # STEP 67
avl1 == avl2                                                            # STEP 68
avl2.delete(int0)                                                       # STEP 69
avl2.display()                                                          # STEP 70
avl1.insert(int0)                                                       # STEP 71
int1 = 7                                                                # STEP 72
avl2.display()                                                          # STEP 73
avl2.display()                                                          # STEP 74
avl2.insert(int3)                                                       # STEP 75
avl2.display()                                                          # STEP 76
avl2.delete(int2)                                                       # STEP 77
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1057a6b90>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
212 BRANCHES COVERED
160 STATEMENTS COVERED

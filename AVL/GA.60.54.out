Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.14466.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102c231b8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
Original test has 59 steps

SAVING TEST AS failure.14466.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 5                                                                 # STEP 0
ACTION: int1 = 5 
int1 = None : <type 'NoneType'>
=> int1 = 5 : <type 'int'>
==================================================
int0 = 18                                                                # STEP 1
ACTION: int0 = 18 
int0 = None : <type 'NoneType'>
=> int0 = 18 : <type 'int'>
==================================================
int3 = 1                                                                 # STEP 2
ACTION: int3 = 1 
int3 = None : <type 'NoneType'>
=> int3 = 1 : <type 'int'>
==================================================
int2 = 14                                                                # STEP 3
ACTION: int2 = 14 
int2 = None : <type 'NoneType'>
=> int2 = 14 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 4
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x10267e998> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
result = avl0.inorder()                                                  # STEP 5
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x10267e998> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
result = avl0.find(int3)                                                 # STEP 6
ACTION: result = avl0.find(int3) 
int3 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10267e998> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
int3 = 15                                                                # STEP 7
ACTION: int3 = 15 
int3 = 1 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 8
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x102a8fc68> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
result = avl1.find(int2)                                                 # STEP 9
ACTION: result = avl1.find(int2) 
int2 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102a8fc68> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl1.insert(int2)                                                       # STEP 10
ACTION: avl1.insert(int2) 
int2 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102a8fc68> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([14]) : <type 'set'>
==================================================
result = avl1.find(int1)                                                # STEP 11
ACTION: result = avl1.find(int1) 
int1 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102a8fc68> : <type 'instance'>
avl_REF1 = set([14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl0.delete(int1)                                                       # STEP 12
ACTION: avl0.delete(int1) 
int1 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10267e998> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
result = avl0.find(int1)                                                # STEP 13
ACTION: result = avl0.find(int1) 
int1 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10267e998> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
int2 = 11                                                               # STEP 14
ACTION: int2 = 11 
int2 = 14 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 15
ACTION: avl0.delete(int2) 
int2 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10267e998> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.insert(int3)                                                       # STEP 16
ACTION: avl0.insert(int3) 
int3 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10267e998> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([15]) : <type 'set'>
==================================================
int2 = 18                                                               # STEP 17
ACTION: int2 = 18 
int2 = 11 : <type 'int'>
=> int2 = 18 : <type 'int'>
==================================================
int3 = 12                                                               # STEP 18
ACTION: int3 = 12 
int3 = 15 : <type 'int'>
=> int3 = 12 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 19
ACTION: avl1.insert(int0) 
int0 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102a8fc68> : <type 'instance'>
avl_REF1 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([18, 14]) : <type 'set'>
==================================================
int1 = 3                                                                # STEP 20
ACTION: int1 = 3 
int1 = 5 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
int0 = 8                                                                # STEP 21
ACTION: int0 = 8 
int0 = 18 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
result = avl1.find(int2)                                                # STEP 22
ACTION: result = avl1.find(int2) 
int2 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102a8fc68> : <type 'instance'>
avl_REF1 = set([18, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
result = avl1.find(int0)                                                # STEP 23
ACTION: result = avl1.find(int0) 
int0 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102a8fc68> : <type 'instance'>
avl_REF1 = set([18, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
int2 = 2                                                                # STEP 24
ACTION: int2 = 2 
int2 = 18 : <type 'int'>
=> int2 = 2 : <type 'int'>
==================================================
int0 = 16                                                               # STEP 25
ACTION: int0 = 16 
int0 = 8 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 26
ACTION: avl0.insert(int3) 
int3 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10267e998> : <type 'instance'>
avl_REF0 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([12, 15]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 27
ACTION: avl0.delete(int1) 
int1 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10267e998> : <type 'instance'>
avl_REF0 = set([12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.delete(int0)                                                       # STEP 28
ACTION: avl0.delete(int0) 
int0 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10267e998> : <type 'instance'>
avl_REF0 = set([12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int3 = 13                                                               # STEP 29
ACTION: int3 = 13 
int3 = 12 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
int0 = 13                                                               # STEP 30
ACTION: int0 = 13 
int0 = 16 : <type 'int'>
=> int0 = 13 : <type 'int'>
==================================================
int1 = 4                                                                # STEP 31
ACTION: int1 = 4 
int1 = 3 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 32
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x102a8fc68> : <type 'instance'>
avl_REF1 = set([18, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.delete(int2)                                                       # STEP 33
ACTION: avl1.delete(int2) 
int2 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102a8fc68> : <type 'instance'>
avl_REF1 = set([18, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int2 = 6                                                                # STEP 34
ACTION: int2 = 6 
int2 = 2 : <type 'int'>
=> int2 = 6 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 35
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x102a8fc68> : <type 'instance'>
avl_REF1 = set([18, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
result = avl1.find(int2)                                                # STEP 36
ACTION: result = avl1.find(int2) 
int2 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102a8fc68> : <type 'instance'>
avl_REF1 = set([18, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl0.delete(int0)                                                       # STEP 37
ACTION: avl0.delete(int0) 
int0 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10267e998> : <type 'instance'>
avl_REF0 = set([12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int2 = 18                                                               # STEP 38
ACTION: int2 = 18 
int2 = 6 : <type 'int'>
=> int2 = 18 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 39
ACTION: avl1.insert(int2) 
int2 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102a8fc68> : <type 'instance'>
avl_REF1 = set([18, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
int0 = 11                                                               # STEP 40
ACTION: int0 = 11 
int0 = 13 : <type 'int'>
=> int0 = 11 : <type 'int'>
==================================================
int2 = 11                                                               # STEP 41
ACTION: int2 = 11 
int2 = 18 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 42
ACTION: avl0.insert(int3) 
int3 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10267e998> : <type 'instance'>
avl_REF0 = set([12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([12, 13, 15]) : <type 'set'>
==================================================
int3 = 5                                                                # STEP 43
ACTION: int3 = 5 
int3 = 13 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
result = avl1.find(int3)                                                # STEP 44
ACTION: result = avl1.find(int3) 
int3 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102a8fc68> : <type 'instance'>
avl_REF1 = set([18, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl0.insert(int3)                                                       # STEP 45
ACTION: avl0.insert(int3) 
int3 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10267e998> : <type 'instance'>
avl_REF0 = set([12, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([5, 12, 13, 15]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 46
ACTION: avl1.insert(int3) 
int3 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102a8fc68> : <type 'instance'>
avl_REF1 = set([18, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([18, 5, 14]) : <type 'set'>
==================================================
result = avl1.find(int0)                                                # STEP 47
ACTION: result = avl1.find(int0) 
int0 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102a8fc68> : <type 'instance'>
avl_REF1 = set([18, 5, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl1.insert(int3)                                                       # STEP 48
ACTION: avl1.insert(int3) 
int3 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102a8fc68> : <type 'instance'>
avl_REF1 = set([18, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
result = avl0.find(int0)                                                # STEP 49
ACTION: result = avl0.find(int0) 
int0 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10267e998> : <type 'instance'>
avl_REF0 = set([5, 12, 13, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
int0 = 13                                                               # STEP 50
ACTION: int0 = 13 
int0 = 11 : <type 'int'>
=> int0 = 13 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 51
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x102a8fc68> : <type 'instance'>
avl_REF1 = set([18, 5, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl0.insert(int2)                                                       # STEP 52
ACTION: avl0.insert(int2) 
int2 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10267e998> : <type 'instance'>
avl_REF0 = set([5, 12, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([5, 11, 12, 13, 15]) : <type 'set'>
==================================================
int3 = 16                                                               # STEP 53
ACTION: int3 = 16 
int3 = 5 : <type 'int'>
=> int3 = 16 : <type 'int'>
==================================================
int2 = 2                                                                # STEP 54
ACTION: int2 = 2 
int2 = 11 : <type 'int'>
=> int2 = 2 : <type 'int'>
==================================================
result = avl1.find(int0)                                                # STEP 55
ACTION: result = avl1.find(int0) 
int0 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102a8fc68> : <type 'instance'>
avl_REF1 = set([18, 5, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl1.insert(int2)                                                       # STEP 56
ACTION: avl1.insert(int2) 
int2 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102a8fc68> : <type 'instance'>
avl_REF1 = set([18, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([18, 2, 5, 14]) : <type 'set'>
==================================================
int2 = 19                                                               # STEP 57
ACTION: int2 = 19 
int2 = 2 : <type 'int'>
=> int2 = 19 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 58
ACTION: avl0.delete(int0) 
int0 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10267e998> : <type 'instance'>
avl_REF0 = set([5, 11, 12, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([5, 11, 12, 15]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102acea28>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #3 STEP #64 (0:00:30.003284) Sun Apr 30 04:11:41 2017 [ 142 stmts 187 branches ]
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 43
STOPPING TESTING DUE TO TIMEOUT
8.04369414101 PERCENT COVERED
60.2715919018 TOTAL RUNTIME
6 EXECUTED
502 TOTAL TEST OPERATIONS
26.7588472366 TIME SPENT EXECUTING TEST OPERATIONS
0.0204951763153 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
26.9342200756 TIME SPENT CHECKING PROPERTIES
53.6930673122 TOTAL TIME SPENT RUNNING SUT
0.00465393066406 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int1 = 5                                                                 # STEP 0
int0 = 18                                                                # STEP 1
int3 = 1                                                                 # STEP 2
int2 = 14                                                                # STEP 3
avl0 = avl.AVLTree()                                                     # STEP 4
result = avl0.inorder()                                                  # STEP 5
result = avl0.find(int3)                                                 # STEP 6
int3 = 15                                                                # STEP 7
avl1 = avl.AVLTree()                                                     # STEP 8
result = avl1.find(int2)                                                 # STEP 9
avl1.insert(int2)                                                       # STEP 10
result = avl1.find(int1)                                                # STEP 11
avl0.delete(int1)                                                       # STEP 12
result = avl0.find(int1)                                                # STEP 13
int2 = 11                                                               # STEP 14
avl0.delete(int2)                                                       # STEP 15
avl0.insert(int3)                                                       # STEP 16
int2 = 18                                                               # STEP 17
int3 = 12                                                               # STEP 18
avl1.insert(int0)                                                       # STEP 19
int1 = 3                                                                # STEP 20
int0 = 8                                                                # STEP 21
result = avl1.find(int2)                                                # STEP 22
result = avl1.find(int0)                                                # STEP 23
int2 = 2                                                                # STEP 24
int0 = 16                                                               # STEP 25
avl0.insert(int3)                                                       # STEP 26
avl0.delete(int1)                                                       # STEP 27
avl0.delete(int0)                                                       # STEP 28
int3 = 13                                                               # STEP 29
int0 = 13                                                               # STEP 30
int1 = 4                                                                # STEP 31
result = avl1.inorder()                                                 # STEP 32
avl1.delete(int2)                                                       # STEP 33
int2 = 6                                                                # STEP 34
result = avl1.inorder()                                                 # STEP 35
result = avl1.find(int2)                                                # STEP 36
avl0.delete(int0)                                                       # STEP 37
int2 = 18                                                               # STEP 38
avl1.insert(int2)                                                       # STEP 39
int0 = 11                                                               # STEP 40
int2 = 11                                                               # STEP 41
avl0.insert(int3)                                                       # STEP 42
int3 = 5                                                                # STEP 43
result = avl1.find(int3)                                                # STEP 44
avl0.insert(int3)                                                       # STEP 45
avl1.insert(int3)                                                       # STEP 46
result = avl1.find(int0)                                                # STEP 47
avl1.insert(int3)                                                       # STEP 48
result = avl0.find(int0)                                                # STEP 49
int0 = 13                                                               # STEP 50
result = avl1.inorder()                                                 # STEP 51
avl0.insert(int2)                                                       # STEP 52
int3 = 16                                                               # STEP 53
int2 = 2                                                                # STEP 54
result = avl1.find(int0)                                                # STEP 55
avl1.insert(int2)                                                       # STEP 56
int2 = 19                                                               # STEP 57
avl0.delete(int0)                                                       # STEP 58
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102acea28>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
200 BRANCHES COVERED
150 STATEMENTS COVERED

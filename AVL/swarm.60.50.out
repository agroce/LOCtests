Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=True, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.201.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
TEST #4 STEP #67 (0:00:30.007273) Fri Apr 28 05:45:53 2017 [ 128 stmts 171 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1058274d0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 60 steps

SAVING TEST AS failure.201.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 1                                                                 # STEP 0
ACTION: int0 = 1 
int0 = None : <type 'NoneType'>
=> int0 = 1 : <type 'int'>
==================================================
int2 = 12                                                                # STEP 1
ACTION: int2 = 12 
int2 = None : <type 'NoneType'>
=> int2 = 12 : <type 'int'>
==================================================
int1 = 9                                                                 # STEP 2
ACTION: int1 = 9 
int1 = None : <type 'NoneType'>
=> int1 = 9 : <type 'int'>
==================================================
int3 = 10                                                                # STEP 3
ACTION: int3 = 10 
int3 = None : <type 'NoneType'>
=> int3 = 10 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 4
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x103f7eea8> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.delete(int0)                                                        # STEP 5
ACTION: avl0.delete(int0) 
int0 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103f7eea8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int0 = 15                                                                # STEP 6
ACTION: int0 = 15 
int0 = 1 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 7
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x103a6c710> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
result = avl1.find(int3)                                                 # STEP 8
ACTION: result = avl1.find(int3) 
int3 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103a6c710> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
int3 = 4                                                                 # STEP 9
ACTION: int3 = 4 
int3 = 10 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 10
ACTION: avl1.insert(int1) 
int1 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103a6c710> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([9]) : <type 'set'>
==================================================
int1 = 15                                                               # STEP 11
ACTION: int1 = 15 
int1 = 9 : <type 'int'>
=> int1 = 15 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 12
ACTION: avl1.insert(int2) 
int2 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103a6c710> : <type 'instance'>
avl_REF1 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([9, 12]) : <type 'set'>
==================================================
int2 = 10                                                               # STEP 13
ACTION: int2 = 10 
int2 = 12 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 14
ACTION: avl1.delete(int1) 
int1 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103a6c710> : <type 'instance'>
avl_REF1 = set([9, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl0.insert(int2)                                                       # STEP 15
ACTION: avl0.insert(int2) 
int2 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103f7eea8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([10]) : <type 'set'>
==================================================
result = avl0.find(int0)                                                # STEP 16
ACTION: result = avl0.find(int0) 
int0 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103f7eea8> : <type 'instance'>
avl_REF0 = set([10]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
int0 = 10                                                               # STEP 17
ACTION: int0 = 10 
int0 = 15 : <type 'int'>
=> int0 = 10 : <type 'int'>
==================================================
int1 = 19                                                               # STEP 18
ACTION: int1 = 19 
int1 = 15 : <type 'int'>
=> int1 = 19 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 19
ACTION: avl0.delete(int0) 
int0 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103f7eea8> : <type 'instance'>
avl_REF0 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int2 = 5                                                                # STEP 20
ACTION: int2 = 5 
int2 = 10 : <type 'int'>
=> int2 = 5 : <type 'int'>
==================================================
int0 = 3                                                                # STEP 21
ACTION: int0 = 3 
int0 = 10 : <type 'int'>
=> int0 = 3 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 22
ACTION: avl1.insert(int2) 
int2 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103a6c710> : <type 'instance'>
avl_REF1 = set([9, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([9, 12, 5]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 23
ACTION: avl1.delete(int1) 
int1 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103a6c710> : <type 'instance'>
avl_REF1 = set([9, 12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int2 = 14                                                               # STEP 24
ACTION: int2 = 14 
int2 = 5 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 25
ACTION: avl0.delete(int3) 
int3 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103f7eea8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int3 = 8                                                                # STEP 26
ACTION: int3 = 8 
int3 = 4 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
int1 = 18                                                               # STEP 27
ACTION: int1 = 18 
int1 = 19 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 28
ACTION: avl1.delete(int0) 
int0 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103a6c710> : <type 'instance'>
avl_REF1 = set([9, 12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int0 = 14                                                               # STEP 29
ACTION: int0 = 14 
int0 = 3 : <type 'int'>
=> int0 = 14 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 30
ACTION: avl0.insert(int2) 
int2 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103f7eea8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([14]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 31
ACTION: avl0.delete(int0) 
int0 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103f7eea8> : <type 'instance'>
avl_REF0 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 32
ACTION: avl0.insert(int0) 
int0 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103f7eea8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([14]) : <type 'set'>
==================================================
result = avl0.find(int2)                                                # STEP 33
ACTION: result = avl0.find(int2) 
int2 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103f7eea8> : <type 'instance'>
avl_REF0 = set([14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
int2 = 9                                                                # STEP 34
ACTION: int2 = 9 
int2 = 14 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 35
ACTION: avl1.delete(int3) 
int3 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103a6c710> : <type 'instance'>
avl_REF1 = set([9, 12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int3 = 15                                                               # STEP 36
ACTION: int3 = 15 
int3 = 8 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 37
ACTION: avl0.delete(int2) 
int2 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103f7eea8> : <type 'instance'>
avl_REF0 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int2 = 3                                                                # STEP 38
ACTION: int2 = 3 
int2 = 9 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 39
ACTION: avl1.delete(int0) 
int0 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103a6c710> : <type 'instance'>
avl_REF1 = set([9, 12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int0 = 6                                                                # STEP 40
ACTION: int0 = 6 
int0 = 14 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 41
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x103b5c290> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 42
ACTION: avl0.delete(int3) 
int3 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103f7eea8> : <type 'instance'>
avl_REF0 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.delete(int1)                                                       # STEP 43
ACTION: avl0.delete(int1) 
int1 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103f7eea8> : <type 'instance'>
avl_REF0 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl1.insert(int2)                                                       # STEP 44
ACTION: avl1.insert(int2) 
int2 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103a6c710> : <type 'instance'>
avl_REF1 = set([9, 12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([9, 3, 12, 5]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 45
ACTION: avl0.insert(int0) 
int0 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103f7eea8> : <type 'instance'>
avl_REF0 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([6, 14]) : <type 'set'>
==================================================
int2 = 1                                                                # STEP 46
ACTION: int2 = 1 
int2 = 3 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
result = avl0.find(int0)                                                # STEP 47
ACTION: result = avl0.find(int0) 
int0 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103f7eea8> : <type 'instance'>
avl_REF0 = set([6, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
int1 = 2                                                                # STEP 48
ACTION: int1 = 2 
int1 = 18 : <type 'int'>
=> int1 = 2 : <type 'int'>
==================================================
int3 = 6                                                                # STEP 49
ACTION: int3 = 6 
int3 = 15 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
int0 = 17                                                               # STEP 50
ACTION: int0 = 17 
int0 = 6 : <type 'int'>
=> int0 = 17 : <type 'int'>
==================================================
result = avl1.find(int3)                                                # STEP 51
ACTION: result = avl1.find(int3) 
int3 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103a6c710> : <type 'instance'>
avl_REF1 = set([9, 3, 12, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl0.delete(int3)                                                       # STEP 52
ACTION: avl0.delete(int3) 
int3 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103f7eea8> : <type 'instance'>
avl_REF0 = set([6, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([14]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 53
ACTION: avl1.delete(int2) 
int2 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103a6c710> : <type 'instance'>
avl_REF1 = set([9, 3, 12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int2 = 4                                                                # STEP 54
ACTION: int2 = 4 
int2 = 1 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
int3 = 12                                                               # STEP 55
ACTION: int3 = 12 
int3 = 6 : <type 'int'>
=> int3 = 12 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 56
ACTION: avl1.delete(int0) 
int0 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103a6c710> : <type 'instance'>
avl_REF1 = set([9, 3, 12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl2.delete(int0)                                                       # STEP 57
ACTION: avl2.delete(int0) 
int0 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b5c290> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int0 = 19                                                               # STEP 58
ACTION: int0 = 19 
int0 = 17 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 59
ACTION: avl1.delete(int3) 
int3 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103a6c710> : <type 'instance'>
avl_REF1 = set([9, 3, 12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([9, 3, 5]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103b752d8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 25
STOPPING TESTING DUE TO TIMEOUT
7.12589073634 PERCENT COVERED
60.1784358025 TOTAL RUNTIME
8 EXECUTED
685 TOTAL TEST OPERATIONS
27.4065232277 TIME SPENT EXECUTING TEST OPERATIONS
0.0234100818634 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
27.5229263306 TIME SPENT CHECKING PROPERTIES
54.9294495583 TOTAL TIME SPENT RUNNING SUT
0.00449991226196 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int0 = 1                                                                 # STEP 0
int2 = 12                                                                # STEP 1
int1 = 9                                                                 # STEP 2
int3 = 10                                                                # STEP 3
avl0 = avl.AVLTree()                                                     # STEP 4
avl0.delete(int0)                                                        # STEP 5
int0 = 15                                                                # STEP 6
avl1 = avl.AVLTree()                                                     # STEP 7
result = avl1.find(int3)                                                 # STEP 8
int3 = 4                                                                 # STEP 9
avl1.insert(int1)                                                       # STEP 10
int1 = 15                                                               # STEP 11
avl1.insert(int2)                                                       # STEP 12
int2 = 10                                                               # STEP 13
avl1.delete(int1)                                                       # STEP 14
avl0.insert(int2)                                                       # STEP 15
result = avl0.find(int0)                                                # STEP 16
int0 = 10                                                               # STEP 17
int1 = 19                                                               # STEP 18
avl0.delete(int0)                                                       # STEP 19
int2 = 5                                                                # STEP 20
int0 = 3                                                                # STEP 21
avl1.insert(int2)                                                       # STEP 22
avl1.delete(int1)                                                       # STEP 23
int2 = 14                                                               # STEP 24
avl0.delete(int3)                                                       # STEP 25
int3 = 8                                                                # STEP 26
int1 = 18                                                               # STEP 27
avl1.delete(int0)                                                       # STEP 28
int0 = 14                                                               # STEP 29
avl0.insert(int2)                                                       # STEP 30
avl0.delete(int0)                                                       # STEP 31
avl0.insert(int0)                                                       # STEP 32
result = avl0.find(int2)                                                # STEP 33
int2 = 9                                                                # STEP 34
avl1.delete(int3)                                                       # STEP 35
int3 = 15                                                               # STEP 36
avl0.delete(int2)                                                       # STEP 37
int2 = 3                                                                # STEP 38
avl1.delete(int0)                                                       # STEP 39
int0 = 6                                                                # STEP 40
avl2 = avl.AVLTree()                                                    # STEP 41
avl0.delete(int3)                                                       # STEP 42
avl0.delete(int1)                                                       # STEP 43
avl1.insert(int2)                                                       # STEP 44
avl0.insert(int0)                                                       # STEP 45
int2 = 1                                                                # STEP 46
result = avl0.find(int0)                                                # STEP 47
int1 = 2                                                                # STEP 48
int3 = 6                                                                # STEP 49
int0 = 17                                                               # STEP 50
result = avl1.find(int3)                                                # STEP 51
avl0.delete(int3)                                                       # STEP 52
avl1.delete(int2)                                                       # STEP 53
int2 = 4                                                                # STEP 54
int3 = 12                                                               # STEP 55
avl1.delete(int0)                                                       # STEP 56
avl2.delete(int0)                                                       # STEP 57
int0 = 19                                                               # STEP 58
avl1.delete(int3)                                                       # STEP 59
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103b752d8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
180 BRANCHES COVERED
134 STATEMENTS COVERED

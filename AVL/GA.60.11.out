Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.13856.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  7 [3:-1]
-- < 2 [1:-1]
---- > 4 [0:0] L
-- > 17 [2:1]
---- < 8 [1:-1]
------ > 16 [0:0] L
---- > 19 [0:0] L
set([2, 4, 7, 8, 16, 17, 19])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1032c6998>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
Original test has 58 steps

SAVING TEST AS failure.13856.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 17                                                                # STEP 0
ACTION: int2 = 17 
int2 = None : <type 'NoneType'>
=> int2 = 17 : <type 'int'>
==================================================
int1 = 19                                                                # STEP 1
ACTION: int1 = 19 
int1 = None : <type 'NoneType'>
=> int1 = 19 : <type 'int'>
==================================================
int3 = 10                                                                # STEP 2
ACTION: int3 = 10 
int3 = None : <type 'NoneType'>
=> int3 = 10 : <type 'int'>
==================================================
int0 = 18                                                                # STEP 3
ACTION: int0 = 18 
int0 = None : <type 'NoneType'>
=> int0 = 18 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x101e1dc20> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.insert(int1)                                                        # STEP 5
ACTION: avl1.insert(int1) 
int1 = 19 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101e1dc20> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([19]) : <type 'set'>
==================================================
int1 = 14                                                                # STEP 6
ACTION: int1 = 14 
int1 = 19 : <type 'int'>
=> int1 = 14 : <type 'int'>
==================================================
result = avl1.find(int1)                                                 # STEP 7
ACTION: result = avl1.find(int1) 
int1 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101e1dc20> : <type 'instance'>
avl_REF1 = set([19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl1.delete(int2)                                                        # STEP 8
ACTION: avl1.delete(int2) 
int2 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101e1dc20> : <type 'instance'>
avl_REF1 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl2 = avl.AVLTree()                                                     # STEP 9
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x101f5e248> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int1 = 18                                                               # STEP 10
ACTION: int1 = 18 
int1 = 14 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
int2 = 3                                                                # STEP 11
ACTION: int2 = 3 
int2 = 17 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 12
ACTION: avl1.insert(int1) 
int1 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101e1dc20> : <type 'instance'>
avl_REF1 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([18, 19]) : <type 'set'>
==================================================
int1 = 15                                                               # STEP 13
ACTION: int1 = 15 
int1 = 18 : <type 'int'>
=> int1 = 15 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 14
ACTION: avl1.insert(int3) 
int3 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101e1dc20> : <type 'instance'>
avl_REF1 = set([18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([18, 19, 10]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 15
ACTION: avl1.insert(int1) 
int1 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101e1dc20> : <type 'instance'>
avl_REF1 = set([18, 19, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([18, 19, 10, 15]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 16
ACTION: avl2.insert(int1) 
int1 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101f5e248> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([15]) : <type 'set'>
==================================================
int3 = 13                                                               # STEP 17
ACTION: int3 = 13 
int3 = 10 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
int1 = 17                                                               # STEP 18
ACTION: int1 = 17 
int1 = 15 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 19
ACTION: avl2.insert(int2) 
int2 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101f5e248> : <type 'instance'>
avl_REF2 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([3, 15]) : <type 'set'>
==================================================
int2 = 10                                                               # STEP 20
ACTION: int2 = 10 
int2 = 3 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 21
ACTION: avl1.delete(int2) 
int2 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101e1dc20> : <type 'instance'>
avl_REF1 = set([18, 19, 10, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([18, 19, 15]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 22
ACTION: avl2.delete(int1) 
int1 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101f5e248> : <type 'instance'>
avl_REF2 = set([3, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int1 = 3                                                                # STEP 23
ACTION: int1 = 3 
int1 = 17 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 24
ACTION: avl1.delete(int3) 
int3 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101e1dc20> : <type 'instance'>
avl_REF1 = set([18, 19, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int2 = 19                                                               # STEP 25
ACTION: int2 = 19 
int2 = 10 : <type 'int'>
=> int2 = 19 : <type 'int'>
==================================================
int3 = 9                                                                # STEP 26
ACTION: int3 = 9 
int3 = 13 : <type 'int'>
=> int3 = 9 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 27
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x101e1dc20> : <type 'instance'>
avl_REF1 = set([18, 19, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl2.delete(int2)                                                       # STEP 28
ACTION: avl2.delete(int2) 
int2 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101f5e248> : <type 'instance'>
avl_REF2 = set([3, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.insert(int3)                                                       # STEP 29
ACTION: avl2.insert(int3) 
int3 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101f5e248> : <type 'instance'>
avl_REF2 = set([3, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([9, 3, 15]) : <type 'set'>
==================================================
int3 = 11                                                               # STEP 30
ACTION: int3 = 11 
int3 = 9 : <type 'int'>
=> int3 = 11 : <type 'int'>
==================================================
int2 = 7                                                                # STEP 31
ACTION: int2 = 7 
int2 = 19 : <type 'int'>
=> int2 = 7 : <type 'int'>
==================================================
result = avl1.find(int1)                                                # STEP 32
ACTION: result = avl1.find(int1) 
int1 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101e1dc20> : <type 'instance'>
avl_REF1 = set([18, 19, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int1 = 15                                                               # STEP 33
ACTION: int1 = 15 
int1 = 3 : <type 'int'>
=> int1 = 15 : <type 'int'>
==================================================
avl2 == avl1                                                            # STEP 34
ACTION: avl2 == avl1 
avl2 = <avlbug2.AVLTree instance at 0x101f5e248> : <type 'instance'>
avl1 = <avlbug2.AVLTree instance at 0x101e1dc20> : <type 'instance'>
avl_REF2 = set([9, 3, 15]) : <type 'set'>
avl_REF1 = set([18, 19, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
result = avl1.find(int2)                                                # STEP 35
ACTION: result = avl1.find(int2) 
int2 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101e1dc20> : <type 'instance'>
avl_REF1 = set([18, 19, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int2 = 19                                                               # STEP 36
ACTION: int2 = 19 
int2 = 7 : <type 'int'>
=> int2 = 19 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 37
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x101f42ef0> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 38
ACTION: avl2.insert(int3) 
int3 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101f5e248> : <type 'instance'>
avl_REF2 = set([9, 3, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([11, 9, 3, 15]) : <type 'set'>
==================================================
int3 = 8                                                                # STEP 39
ACTION: int3 = 8 
int3 = 11 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 40
ACTION: avl1.insert(int0) 
int0 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101e1dc20> : <type 'instance'>
avl_REF1 = set([18, 19, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.delete(int3)                                                       # STEP 41
ACTION: avl1.delete(int3) 
int3 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101e1dc20> : <type 'instance'>
avl_REF1 = set([18, 19, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int3 = 5                                                                # STEP 42
ACTION: int3 = 5 
int3 = 8 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 43
ACTION: avl0.insert(int0) 
int0 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101f42ef0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([18]) : <type 'set'>
==================================================
int0 = 11                                                               # STEP 44
ACTION: int0 = 11 
int0 = 18 : <type 'int'>
=> int0 = 11 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 45
ACTION: avl1.delete(int2) 
int2 = 19 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101e1dc20> : <type 'instance'>
avl_REF1 = set([18, 19, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([18, 15]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 46
ACTION: avl1.delete(int3) 
int3 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101e1dc20> : <type 'instance'>
avl_REF1 = set([18, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl2.insert(int2)                                                       # STEP 47
ACTION: avl2.insert(int2) 
int2 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101f5e248> : <type 'instance'>
avl_REF2 = set([11, 9, 3, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([11, 9, 3, 19, 15]) : <type 'set'>
==================================================
int3 = 17                                                               # STEP 48
ACTION: int3 = 17 
int3 = 5 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
result = avl1.find(int3)                                                # STEP 49
ACTION: result = avl1.find(int3) 
int3 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101e1dc20> : <type 'instance'>
avl_REF1 = set([18, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
int3 = 3                                                                # STEP 50
ACTION: int3 = 3 
int3 = 17 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
int2 = 3                                                                # STEP 51
ACTION: int2 = 3 
int2 = 19 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
result = avl2.find(int2)                                                # STEP 52
ACTION: result = avl2.find(int2) 
int2 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101f5e248> : <type 'instance'>
avl_REF2 = set([11, 9, 3, 19, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl0.insert(int2)                                                       # STEP 53
ACTION: avl0.insert(int2) 
int2 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101f42ef0> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([18, 3]) : <type 'set'>
==================================================
int2 = 10                                                               # STEP 54
ACTION: int2 = 10 
int2 = 3 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
avl1 == avl0                                                            # STEP 55
ACTION: avl1 == avl0 
avl1 = <avlbug2.AVLTree instance at 0x101e1dc20> : <type 'instance'>
avl0 = <avlbug2.AVLTree instance at 0x101f42ef0> : <type 'instance'>
avl_REF1 = set([18, 15]) : <type 'set'>
avl_REF0 = set([18, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
avl1 = avl.AVLTree()                                                    # STEP 56
ACTION: avl1 = avl.AVLTree() 
avl1 = <avlbug2.AVLTree instance at 0x101e1dc20> : <type 'instance'>
avl_REF1 = set([18, 15]) : <type 'set'>
=> avl1 = <avlbug2.AVLTree instance at 0x103553b90> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 57
ACTION: avl2.delete(int3) 
int3 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101f5e248> : <type 'instance'>
avl_REF2 = set([11, 9, 3, 19, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([11, 9, 19, 15]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103553dd0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #4 STEP #0 (0:00:32.546448) Sun Apr 30 02:43:46 2017 [ 161 stmts 216 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103576560>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
Original test has 82 steps

SAVING TEST AS failure.13856.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 3                                                                 # STEP 0
ACTION: int3 = 3 
int3 = None : <type 'NoneType'>
=> int3 = 3 : <type 'int'>
==================================================
int0 = 12                                                                # STEP 1
ACTION: int0 = 12 
int0 = None : <type 'NoneType'>
=> int0 = 12 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 2
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x1032c6758> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int1 = 13                                                                # STEP 3
ACTION: int1 = 13 
int1 = None : <type 'NoneType'>
=> int1 = 13 : <type 'int'>
==================================================
int2 = 11                                                                # STEP 4
ACTION: int2 = 11 
int2 = None : <type 'NoneType'>
=> int2 = 11 : <type 'int'>
==================================================
avl0.delete(int1)                                                        # STEP 5
ACTION: avl0.delete(int1) 
int1 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1032c6758> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int1 = 7                                                                 # STEP 6
ACTION: int1 = 7 
int1 = 13 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
avl0.delete(int2)                                                        # STEP 7
ACTION: avl0.delete(int2) 
int2 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1032c6758> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
result = avl0.find(int0)                                                 # STEP 8
ACTION: result = avl0.find(int0) 
int0 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1032c6758> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
int0 = 9                                                                 # STEP 9
ACTION: int0 = 9 
int0 = 12 : <type 'int'>
=> int0 = 9 : <type 'int'>
==================================================
int2 = 17                                                               # STEP 10
ACTION: int2 = 17 
int2 = 11 : <type 'int'>
=> int2 = 17 : <type 'int'>
==================================================
result = avl0.find(int3)                                                # STEP 11
ACTION: result = avl0.find(int3) 
int3 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1032c6758> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
int3 = 8                                                                # STEP 12
ACTION: int3 = 8 
int3 = 3 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 13
ACTION: avl0.insert(int1) 
int1 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1032c6758> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([7]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 14
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x1032c6758> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
result = avl0.find(int0)                                                # STEP 15
ACTION: result = avl0.find(int0) 
int0 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1032c6758> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
int0 = 20                                                               # STEP 16
ACTION: int0 = 20 
int0 = 9 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 17
ACTION: avl0.delete(int3) 
int3 = 8 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1032c6758> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.insert(int0)                                                       # STEP 18
ACTION: avl0.insert(int0) 
int0 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1032c6758> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([20, 7]) : <type 'set'>
==================================================
int3 = 1                                                                # STEP 19
ACTION: int3 = 1 
int3 = 8 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
int0 = 1                                                                # STEP 20
ACTION: int0 = 1 
int0 = 20 : <type 'int'>
=> int0 = 1 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 21
ACTION: avl0.delete(int0) 
int0 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1032c6758> : <type 'instance'>
avl_REF0 = set([20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl2 = avl.AVLTree()                                                    # STEP 22
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x101e5f3f8> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 23
ACTION: avl2.insert(int2) 
int2 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101e5f3f8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([17]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 24
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x1032c6758> : <type 'instance'>
avl_REF0 = set([20, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl2.delete(int3)                                                       # STEP 25
ACTION: avl2.delete(int3) 
int3 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101e5f3f8> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.insert(int2)                                                       # STEP 26
ACTION: avl2.insert(int2) 
int2 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101e5f3f8> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
int1 = 7                                                                # STEP 27
ACTION: int1 = 7 
int1 = 7 : <type 'int'>
==================================================
int3 = 16                                                               # STEP 28
ACTION: int3 = 16 
int3 = 1 : <type 'int'>
=> int3 = 16 : <type 'int'>
==================================================
int0 = 18                                                               # STEP 29
ACTION: int0 = 18 
int0 = 1 : <type 'int'>
=> int0 = 18 : <type 'int'>
==================================================
int2 = 8                                                                # STEP 30
ACTION: int2 = 8 
int2 = 17 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 31
ACTION: avl2.delete(int1) 
int1 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101e5f3f8> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2 == avl0                                                            # STEP 32
ACTION: avl2 == avl0 
avl2 = <avlbug2.AVLTree instance at 0x101e5f3f8> : <type 'instance'>
avl0 = <avlbug2.AVLTree instance at 0x1032c6758> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
avl_REF0 = set([20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF0 
==================================================
result = avl2.find(int1)                                                # STEP 33
ACTION: result = avl2.find(int1) 
int1 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101e5f3f8> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int1 = 6                                                                # STEP 34
ACTION: int1 = 6 
int1 = 7 : <type 'int'>
=> int1 = 6 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 35
ACTION: avl2.delete(int2) 
int2 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101e5f3f8> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl0.insert(int3)                                                       # STEP 36
ACTION: avl0.insert(int3) 
int3 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1032c6758> : <type 'instance'>
avl_REF0 = set([20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([16, 20, 7]) : <type 'set'>
==================================================
int3 = 15                                                               # STEP 37
ACTION: int3 = 15 
int3 = 16 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
int2 = 4                                                                # STEP 38
ACTION: int2 = 4 
int2 = 8 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 39
ACTION: avl0.insert(int3) 
int3 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1032c6758> : <type 'instance'>
avl_REF0 = set([16, 20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([16, 15, 20, 7]) : <type 'set'>
==================================================
result = avl2.find(int2)                                                # STEP 40
ACTION: result = avl2.find(int2) 
int2 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101e5f3f8> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl0.insert(int0)                                                       # STEP 41
ACTION: avl0.insert(int0) 
int0 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1032c6758> : <type 'instance'>
avl_REF0 = set([16, 15, 20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([16, 18, 15, 20, 7]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 42
ACTION: avl0.insert(int1) 
int1 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1032c6758> : <type 'instance'>
avl_REF0 = set([16, 18, 15, 20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([6, 7, 15, 16, 18, 20]) : <type 'set'>
==================================================
int0 = 17                                                               # STEP 43
ACTION: int0 = 17 
int0 = 18 : <type 'int'>
=> int0 = 17 : <type 'int'>
==================================================
avl2 == avl2                                                            # STEP 44
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x101e5f3f8> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
int1 = 6                                                                # STEP 45
ACTION: int1 = 6 
int1 = 6 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 46
ACTION: avl0.delete(int2) 
int2 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1032c6758> : <type 'instance'>
avl_REF0 = set([6, 7, 15, 16, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int2 = 9                                                                # STEP 47
ACTION: int2 = 9 
int2 = 4 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
avl2 == avl2                                                            # STEP 48
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x101e5f3f8> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl2.delete(int0)                                                       # STEP 49
ACTION: avl2.delete(int0) 
int0 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101e5f3f8> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl0 == avl2                                                            # STEP 50
ACTION: avl0 == avl2 
avl0 = <avlbug2.AVLTree instance at 0x1032c6758> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x101e5f3f8> : <type 'instance'>
avl_REF0 = set([6, 7, 15, 16, 18, 20]) : <type 'set'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
avl2.delete(int2)                                                       # STEP 51
ACTION: avl2.delete(int2) 
int2 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101e5f3f8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int3 = 4                                                                # STEP 52
ACTION: int3 = 4 
int3 = 15 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
int2 = 1                                                                # STEP 53
ACTION: int2 = 1 
int2 = 9 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
result = avl0.find(int0)                                                # STEP 54
ACTION: result = avl0.find(int0) 
int0 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1032c6758> : <type 'instance'>
avl_REF0 = set([6, 7, 15, 16, 18, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
int0 = 14                                                               # STEP 55
ACTION: int0 = 14 
int0 = 17 : <type 'int'>
=> int0 = 14 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 56
ACTION: avl2.insert(int0) 
int0 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101e5f3f8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([14]) : <type 'set'>
==================================================
int0 = 11                                                               # STEP 57
ACTION: int0 = 11 
int0 = 14 : <type 'int'>
=> int0 = 11 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 58
ACTION: avl2.insert(int3) 
int3 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101e5f3f8> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([4, 14]) : <type 'set'>
==================================================
result = avl2.find(int2)                                                # STEP 59
ACTION: result = avl2.find(int2) 
int2 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101e5f3f8> : <type 'instance'>
avl_REF2 = set([4, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl2 == avl2                                                            # STEP 60
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x101e5f3f8> : <type 'instance'>
avl_REF2 = set([4, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl0 == avl0                                                            # STEP 61
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x1032c6758> : <type 'instance'>
avl_REF0 = set([6, 7, 15, 16, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
int3 = 5                                                                # STEP 62
ACTION: int3 = 5 
int3 = 4 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
int2 = 17                                                               # STEP 63
ACTION: int2 = 17 
int2 = 1 : <type 'int'>
=> int2 = 17 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 64
ACTION: avl0.insert(int0) 
int0 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1032c6758> : <type 'instance'>
avl_REF0 = set([6, 7, 15, 16, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([6, 7, 11, 15, 16, 18, 20]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 65
ACTION: avl0.insert(int2) 
int2 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1032c6758> : <type 'instance'>
avl_REF0 = set([6, 7, 11, 15, 16, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([6, 7, 11, 15, 16, 17, 18, 20]) : <type 'set'>
==================================================
int2 = 1                                                                # STEP 66
ACTION: int2 = 1 
int2 = 17 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
avl0 == avl0                                                            # STEP 67
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x1032c6758> : <type 'instance'>
avl_REF0 = set([6, 7, 11, 15, 16, 17, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
result = avl0.inorder()                                                 # STEP 68
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x1032c6758> : <type 'instance'>
avl_REF0 = set([6, 7, 11, 15, 16, 17, 18, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
result = avl2.find(int3)                                                # STEP 69
ACTION: result = avl2.find(int3) 
int3 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101e5f3f8> : <type 'instance'>
avl_REF2 = set([4, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
int0 = 5                                                                # STEP 70
ACTION: int0 = 5 
int0 = 11 : <type 'int'>
=> int0 = 5 : <type 'int'>
==================================================
int3 = 2                                                                # STEP 71
ACTION: int3 = 2 
int3 = 5 : <type 'int'>
=> int3 = 2 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 72
ACTION: avl0.delete(int0) 
int0 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1032c6758> : <type 'instance'>
avl_REF0 = set([6, 7, 11, 15, 16, 17, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.delete(int0)                                                       # STEP 73
ACTION: avl0.delete(int0) 
int0 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1032c6758> : <type 'instance'>
avl_REF0 = set([6, 7, 11, 15, 16, 17, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
result = avl0.find(int2)                                                # STEP 74
ACTION: result = avl0.find(int2) 
int2 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1032c6758> : <type 'instance'>
avl_REF0 = set([6, 7, 11, 15, 16, 17, 18, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl0 == avl0                                                            # STEP 75
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x1032c6758> : <type 'instance'>
avl_REF0 = set([6, 7, 11, 15, 16, 17, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
int0 = 20                                                               # STEP 76
ACTION: int0 = 20 
int0 = 5 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
int2 = 4                                                                # STEP 77
ACTION: int2 = 4 
int2 = 1 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 78
ACTION: avl2.delete(int0) 
int0 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101e5f3f8> : <type 'instance'>
avl_REF2 = set([4, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl0.delete(int0)                                                       # STEP 79
ACTION: avl0.delete(int0) 
int0 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1032c6758> : <type 'instance'>
avl_REF0 = set([6, 7, 11, 15, 16, 17, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([6, 7, 11, 15, 16, 17, 18]) : <type 'set'>
==================================================
int0 = 12                                                               # STEP 80
ACTION: int0 = 12 
int0 = 20 : <type 'int'>
=> int0 = 12 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 81
ACTION: avl0.delete(int1) 
int1 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1032c6758> : <type 'instance'>
avl_REF0 = set([6, 7, 11, 15, 16, 17, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([7, 11, 15, 16, 17, 18]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10357d950>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 2
STOPPING TESTING DUE TO TIMEOUT
8.83813306852 PERCENT COVERED
60.2911801338 TOTAL RUNTIME
6 EXECUTED
442 TOTAL TEST OPERATIONS
22.6923546791 TIME SPENT EXECUTING TEST OPERATIONS
0.0170931816101 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
22.8690857887 TIME SPENT CHECKING PROPERTIES
45.5614404678 TOTAL TIME SPENT RUNNING SUT
0.00464224815369 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
2 FAILED
0 REPEATS OF FAILURES
2 ACTUAL DISTINCT FAILURES

FAILURE 0
int2 = 17                                                                # STEP 0
int1 = 19                                                                # STEP 1
int3 = 10                                                                # STEP 2
int0 = 18                                                                # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
avl1.insert(int1)                                                        # STEP 5
int1 = 14                                                                # STEP 6
result = avl1.find(int1)                                                 # STEP 7
avl1.delete(int2)                                                        # STEP 8
avl2 = avl.AVLTree()                                                     # STEP 9
int1 = 18                                                               # STEP 10
int2 = 3                                                                # STEP 11
avl1.insert(int1)                                                       # STEP 12
int1 = 15                                                               # STEP 13
avl1.insert(int3)                                                       # STEP 14
avl1.insert(int1)                                                       # STEP 15
avl2.insert(int1)                                                       # STEP 16
int3 = 13                                                               # STEP 17
int1 = 17                                                               # STEP 18
avl2.insert(int2)                                                       # STEP 19
int2 = 10                                                               # STEP 20
avl1.delete(int2)                                                       # STEP 21
avl2.delete(int1)                                                       # STEP 22
int1 = 3                                                                # STEP 23
avl1.delete(int3)                                                       # STEP 24
int2 = 19                                                               # STEP 25
int3 = 9                                                                # STEP 26
result = avl1.inorder()                                                 # STEP 27
avl2.delete(int2)                                                       # STEP 28
avl2.insert(int3)                                                       # STEP 29
int3 = 11                                                               # STEP 30
int2 = 7                                                                # STEP 31
result = avl1.find(int1)                                                # STEP 32
int1 = 15                                                               # STEP 33
avl2 == avl1                                                            # STEP 34
result = avl1.find(int2)                                                # STEP 35
int2 = 19                                                               # STEP 36
avl0 = avl.AVLTree()                                                    # STEP 37
avl2.insert(int3)                                                       # STEP 38
int3 = 8                                                                # STEP 39
avl1.insert(int0)                                                       # STEP 40
avl1.delete(int3)                                                       # STEP 41
int3 = 5                                                                # STEP 42
avl0.insert(int0)                                                       # STEP 43
int0 = 11                                                               # STEP 44
avl1.delete(int2)                                                       # STEP 45
avl1.delete(int3)                                                       # STEP 46
avl2.insert(int2)                                                       # STEP 47
int3 = 17                                                               # STEP 48
result = avl1.find(int3)                                                # STEP 49
int3 = 3                                                                # STEP 50
int2 = 3                                                                # STEP 51
result = avl2.find(int2)                                                # STEP 52
avl0.insert(int2)                                                       # STEP 53
int2 = 10                                                               # STEP 54
avl1 == avl0                                                            # STEP 55
avl1 = avl.AVLTree()                                                    # STEP 56
avl2.delete(int3)                                                       # STEP 57
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103553dd0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE 1
int3 = 3                                                                 # STEP 0
int0 = 12                                                                # STEP 1
avl0 = avl.AVLTree()                                                     # STEP 2
int1 = 13                                                                # STEP 3
int2 = 11                                                                # STEP 4
avl0.delete(int1)                                                        # STEP 5
int1 = 7                                                                 # STEP 6
avl0.delete(int2)                                                        # STEP 7
result = avl0.find(int0)                                                 # STEP 8
int0 = 9                                                                 # STEP 9
int2 = 17                                                               # STEP 10
result = avl0.find(int3)                                                # STEP 11
int3 = 8                                                                # STEP 12
avl0.insert(int1)                                                       # STEP 13
result = avl0.inorder()                                                 # STEP 14
result = avl0.find(int0)                                                # STEP 15
int0 = 20                                                               # STEP 16
avl0.delete(int3)                                                       # STEP 17
avl0.insert(int0)                                                       # STEP 18
int3 = 1                                                                # STEP 19
int0 = 1                                                                # STEP 20
avl0.delete(int0)                                                       # STEP 21
avl2 = avl.AVLTree()                                                    # STEP 22
avl2.insert(int2)                                                       # STEP 23
result = avl0.inorder()                                                 # STEP 24
avl2.delete(int3)                                                       # STEP 25
avl2.insert(int2)                                                       # STEP 26
int1 = 7                                                                # STEP 27
int3 = 16                                                               # STEP 28
int0 = 18                                                               # STEP 29
int2 = 8                                                                # STEP 30
avl2.delete(int1)                                                       # STEP 31
avl2 == avl0                                                            # STEP 32
result = avl2.find(int1)                                                # STEP 33
int1 = 6                                                                # STEP 34
avl2.delete(int2)                                                       # STEP 35
avl0.insert(int3)                                                       # STEP 36
int3 = 15                                                               # STEP 37
int2 = 4                                                                # STEP 38
avl0.insert(int3)                                                       # STEP 39
result = avl2.find(int2)                                                # STEP 40
avl0.insert(int0)                                                       # STEP 41
avl0.insert(int1)                                                       # STEP 42
int0 = 17                                                               # STEP 43
avl2 == avl2                                                            # STEP 44
int1 = 6                                                                # STEP 45
avl0.delete(int2)                                                       # STEP 46
int2 = 9                                                                # STEP 47
avl2 == avl2                                                            # STEP 48
avl2.delete(int0)                                                       # STEP 49
avl0 == avl2                                                            # STEP 50
avl2.delete(int2)                                                       # STEP 51
int3 = 4                                                                # STEP 52
int2 = 1                                                                # STEP 53
result = avl0.find(int0)                                                # STEP 54
int0 = 14                                                               # STEP 55
avl2.insert(int0)                                                       # STEP 56
int0 = 11                                                               # STEP 57
avl2.insert(int3)                                                       # STEP 58
result = avl2.find(int2)                                                # STEP 59
avl2 == avl2                                                            # STEP 60
avl0 == avl0                                                            # STEP 61
int3 = 5                                                                # STEP 62
int2 = 17                                                               # STEP 63
avl0.insert(int0)                                                       # STEP 64
avl0.insert(int2)                                                       # STEP 65
int2 = 1                                                                # STEP 66
avl0 == avl0                                                            # STEP 67
result = avl0.inorder()                                                 # STEP 68
result = avl2.find(int3)                                                # STEP 69
int0 = 5                                                                # STEP 70
int3 = 2                                                                # STEP 71
avl0.delete(int0)                                                       # STEP 72
avl0.delete(int0)                                                       # STEP 73
result = avl0.find(int2)                                                # STEP 74
avl0 == avl0                                                            # STEP 75
int0 = 20                                                               # STEP 76
int2 = 4                                                                # STEP 77
avl2.delete(int0)                                                       # STEP 78
avl0.delete(int0)                                                       # STEP 79
int0 = 12                                                               # STEP 80
avl0.delete(int1)                                                       # STEP 81
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10357d950>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
222 BRANCHES COVERED
165 STATEMENTS COVERED

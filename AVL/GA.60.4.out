Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.13755.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
TEST #3 STEP #73 (0:00:30.010275) Sun Apr 30 02:29:21 2017 [ 146 stmts 194 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105856c20>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
Original test has 53 steps

SAVING TEST AS failure.13755.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 4                                                                 # STEP 0
ACTION: int1 = 4 
int1 = None : <type 'NoneType'>
=> int1 = 4 : <type 'int'>
==================================================
int3 = 12                                                                # STEP 1
ACTION: int3 = 12 
int3 = None : <type 'NoneType'>
=> int3 = 12 : <type 'int'>
==================================================
int0 = 1                                                                 # STEP 2
ACTION: int0 = 1 
int0 = None : <type 'NoneType'>
=> int0 = 1 : <type 'int'>
==================================================
int2 = 18                                                                # STEP 3
ACTION: int2 = 18 
int2 = None : <type 'NoneType'>
=> int2 = 18 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x10523f4d0> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.delete(int3)                                                        # STEP 5
ACTION: avl1.delete(int3) 
int3 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10523f4d0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.delete(int0)                                                        # STEP 6
ACTION: avl1.delete(int0) 
int0 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10523f4d0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int3 = 20                                                                # STEP 7
ACTION: int3 = 20 
int3 = 12 : <type 'int'>
=> int3 = 20 : <type 'int'>
==================================================
int0 = 11                                                                # STEP 8
ACTION: int0 = 11 
int0 = 1 : <type 'int'>
=> int0 = 11 : <type 'int'>
==================================================
avl1.insert(int0)                                                        # STEP 9
ACTION: avl1.insert(int0) 
int0 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10523f4d0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([11]) : <type 'set'>
==================================================
result = avl1.find(int3)                                                # STEP 10
ACTION: result = avl1.find(int3) 
int3 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10523f4d0> : <type 'instance'>
avl_REF1 = set([11]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
int3 = 12                                                               # STEP 11
ACTION: int3 = 12 
int3 = 20 : <type 'int'>
=> int3 = 12 : <type 'int'>
==================================================
int0 = 13                                                               # STEP 12
ACTION: int0 = 13 
int0 = 11 : <type 'int'>
=> int0 = 13 : <type 'int'>
==================================================
result = avl1.find(int3)                                                # STEP 13
ACTION: result = avl1.find(int3) 
int3 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10523f4d0> : <type 'instance'>
avl_REF1 = set([11]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
int3 = 2                                                                # STEP 14
ACTION: int3 = 2 
int3 = 12 : <type 'int'>
=> int3 = 2 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 15
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x10523f4d0> : <type 'instance'>
avl_REF1 = set([11]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
result = avl1.find(int3)                                                # STEP 16
ACTION: result = avl1.find(int3) 
int3 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10523f4d0> : <type 'instance'>
avl_REF1 = set([11]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
int3 = 5                                                                # STEP 17
ACTION: int3 = 5 
int3 = 2 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 18
ACTION: avl1.delete(int1) 
int1 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10523f4d0> : <type 'instance'>
avl_REF1 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
result = avl1.find(int1)                                                # STEP 19
ACTION: result = avl1.find(int1) 
int1 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10523f4d0> : <type 'instance'>
avl_REF1 = set([11]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
result = avl1.find(int0)                                                # STEP 20
ACTION: result = avl1.find(int0) 
int0 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10523f4d0> : <type 'instance'>
avl_REF1 = set([11]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
int1 = 10                                                               # STEP 21
ACTION: int1 = 10 
int1 = 4 : <type 'int'>
=> int1 = 10 : <type 'int'>
==================================================
int0 = 4                                                                # STEP 22
ACTION: int0 = 4 
int0 = 13 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
result = avl1.find(int3)                                                # STEP 23
ACTION: result = avl1.find(int3) 
int3 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10523f4d0> : <type 'instance'>
avl_REF1 = set([11]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl1.insert(int1)                                                       # STEP 24
ACTION: avl1.insert(int1) 
int1 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10523f4d0> : <type 'instance'>
avl_REF1 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([10, 11]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 25
ACTION: avl1.insert(int2) 
int2 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10523f4d0> : <type 'instance'>
avl_REF1 = set([10, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([10, 11, 18]) : <type 'set'>
==================================================
int2 = 9                                                                # STEP 26
ACTION: int2 = 9 
int2 = 18 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
int1 = 6                                                                # STEP 27
ACTION: int1 = 6 
int1 = 10 : <type 'int'>
=> int1 = 6 : <type 'int'>
==================================================
int3 = 1                                                                # STEP 28
ACTION: int3 = 1 
int3 = 5 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
result = avl1.find(int2)                                                # STEP 29
ACTION: result = avl1.find(int2) 
int2 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10523f4d0> : <type 'instance'>
avl_REF1 = set([10, 11, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl1.delete(int3)                                                       # STEP 30
ACTION: avl1.delete(int3) 
int3 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10523f4d0> : <type 'instance'>
avl_REF1 = set([10, 11, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int2 = 16                                                               # STEP 31
ACTION: int2 = 16 
int2 = 9 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
int3 = 13                                                               # STEP 32
ACTION: int3 = 13 
int3 = 1 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
result = avl1.find(int3)                                                # STEP 33
ACTION: result = avl1.find(int3) 
int3 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10523f4d0> : <type 'instance'>
avl_REF1 = set([10, 11, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl1.insert(int0)                                                       # STEP 34
ACTION: avl1.insert(int0) 
int0 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10523f4d0> : <type 'instance'>
avl_REF1 = set([10, 11, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([10, 11, 4, 18]) : <type 'set'>
==================================================
result = avl1.find(int2)                                                # STEP 35
ACTION: result = avl1.find(int2) 
int2 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10523f4d0> : <type 'instance'>
avl_REF1 = set([10, 11, 4, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int0 = 9                                                                # STEP 36
ACTION: int0 = 9 
int0 = 4 : <type 'int'>
=> int0 = 9 : <type 'int'>
==================================================
int2 = 17                                                               # STEP 37
ACTION: int2 = 17 
int2 = 16 : <type 'int'>
=> int2 = 17 : <type 'int'>
==================================================
int3 = 6                                                                # STEP 38
ACTION: int3 = 6 
int3 = 13 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 39
ACTION: avl1.insert(int3) 
int3 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10523f4d0> : <type 'instance'>
avl_REF1 = set([10, 11, 4, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([10, 11, 4, 18, 6]) : <type 'set'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 40
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x10534d488> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2 == avl2                                                            # STEP 41
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x10534d488> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
int3 = 20                                                               # STEP 42
ACTION: int3 = 20 
int3 = 6 : <type 'int'>
=> int3 = 20 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 43
ACTION: avl2.insert(int0) 
int0 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10534d488> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([9]) : <type 'set'>
==================================================
int0 = 18                                                               # STEP 44
ACTION: int0 = 18 
int0 = 9 : <type 'int'>
=> int0 = 18 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 45
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x10534d488> : <type 'instance'>
avl_REF2 = set([9]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl2.inorder()                                                 # STEP 46
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x10534d488> : <type 'instance'>
avl_REF2 = set([9]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl2.find(int1)                                                # STEP 47
ACTION: result = avl2.find(int1) 
int1 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10534d488> : <type 'instance'>
avl_REF2 = set([9]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
result = avl2.find(int2)                                                # STEP 48
ACTION: result = avl2.find(int2) 
int2 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10534d488> : <type 'instance'>
avl_REF2 = set([9]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int1 = 16                                                               # STEP 49
ACTION: int1 = 16 
int1 = 6 : <type 'int'>
=> int1 = 16 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 50
ACTION: avl2.insert(int1) 
int1 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10534d488> : <type 'instance'>
avl_REF2 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([16, 9]) : <type 'set'>
==================================================
int1 = 4                                                                # STEP 51
ACTION: int1 = 4 
int1 = 16 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 52
ACTION: avl1.delete(int0) 
int0 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10523f4d0> : <type 'instance'>
avl_REF1 = set([10, 11, 4, 18, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([10, 11, 4, 6]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10534f0e0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 55
STOPPING TESTING DUE TO TIMEOUT
8.04369414101 PERCENT COVERED
60.2658190727 TOTAL RUNTIME
6 EXECUTED
508 TOTAL TEST OPERATIONS
27.5314819813 TIME SPENT EXECUTING TEST OPERATIONS
0.0220022201538 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
27.5345890522 TIME SPENT CHECKING PROPERTIES
55.0660710335 TOTAL TIME SPENT RUNNING SUT
0.00452947616577 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int1 = 4                                                                 # STEP 0
int3 = 12                                                                # STEP 1
int0 = 1                                                                 # STEP 2
int2 = 18                                                                # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
avl1.delete(int3)                                                        # STEP 5
avl1.delete(int0)                                                        # STEP 6
int3 = 20                                                                # STEP 7
int0 = 11                                                                # STEP 8
avl1.insert(int0)                                                        # STEP 9
result = avl1.find(int3)                                                # STEP 10
int3 = 12                                                               # STEP 11
int0 = 13                                                               # STEP 12
result = avl1.find(int3)                                                # STEP 13
int3 = 2                                                                # STEP 14
result = avl1.inorder()                                                 # STEP 15
result = avl1.find(int3)                                                # STEP 16
int3 = 5                                                                # STEP 17
avl1.delete(int1)                                                       # STEP 18
result = avl1.find(int1)                                                # STEP 19
result = avl1.find(int0)                                                # STEP 20
int1 = 10                                                               # STEP 21
int0 = 4                                                                # STEP 22
result = avl1.find(int3)                                                # STEP 23
avl1.insert(int1)                                                       # STEP 24
avl1.insert(int2)                                                       # STEP 25
int2 = 9                                                                # STEP 26
int1 = 6                                                                # STEP 27
int3 = 1                                                                # STEP 28
result = avl1.find(int2)                                                # STEP 29
avl1.delete(int3)                                                       # STEP 30
int2 = 16                                                               # STEP 31
int3 = 13                                                               # STEP 32
result = avl1.find(int3)                                                # STEP 33
avl1.insert(int0)                                                       # STEP 34
result = avl1.find(int2)                                                # STEP 35
int0 = 9                                                                # STEP 36
int2 = 17                                                               # STEP 37
int3 = 6                                                                # STEP 38
avl1.insert(int3)                                                       # STEP 39
avl2 = avl.AVLTree()                                                    # STEP 40
avl2 == avl2                                                            # STEP 41
int3 = 20                                                               # STEP 42
avl2.insert(int0)                                                       # STEP 43
int0 = 18                                                               # STEP 44
result = avl2.inorder()                                                 # STEP 45
result = avl2.inorder()                                                 # STEP 46
result = avl2.find(int1)                                                # STEP 47
result = avl2.find(int2)                                                # STEP 48
int1 = 16                                                               # STEP 49
avl2.insert(int1)                                                       # STEP 50
int1 = 4                                                                # STEP 51
avl1.delete(int0)                                                       # STEP 52
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10534f0e0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
200 BRANCHES COVERED
150 STATEMENTS COVERED

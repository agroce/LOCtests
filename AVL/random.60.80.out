Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.780.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
TEST #4 STEP #46 (0:00:30.005329) Fri Apr 28 07:16:34 2017 [ 138 stmts 186 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103e47290>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 88 steps

SAVING TEST AS failure.780.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 2                                                                 # STEP 0
ACTION: int1 = 2 
int1 = None : <type 'NoneType'>
=> int1 = 2 : <type 'int'>
==================================================
int3 = 4                                                                 # STEP 1
ACTION: int3 = 4 
int3 = None : <type 'NoneType'>
=> int3 = 4 : <type 'int'>
==================================================
int2 = 8                                                                 # STEP 2
ACTION: int2 = 8 
int2 = None : <type 'NoneType'>
=> int2 = 8 : <type 'int'>
==================================================
int0 = 12                                                                # STEP 3
ACTION: int0 = 12 
int0 = None : <type 'NoneType'>
=> int0 = 12 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x103f8aa28> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
result = avl1.find(int2)                                                 # STEP 5
ACTION: result = avl1.find(int2) 
int2 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103f8aa28> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int2 = 1                                                                 # STEP 6
ACTION: int2 = 1 
int2 = 8 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
avl1.delete(int2)                                                        # STEP 7
ACTION: avl1.delete(int2) 
int2 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103f8aa28> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int2 = 14                                                                # STEP 8
ACTION: int2 = 14 
int2 = 1 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
avl1.insert(int0)                                                        # STEP 9
ACTION: avl1.insert(int0) 
int0 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103f8aa28> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([12]) : <type 'set'>
==================================================
int0 = 9                                                                # STEP 10
ACTION: int0 = 9 
int0 = 12 : <type 'int'>
=> int0 = 9 : <type 'int'>
==================================================
result = avl1.find(int2)                                                # STEP 11
ACTION: result = avl1.find(int2) 
int2 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103f8aa28> : <type 'instance'>
avl_REF1 = set([12]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int2 = 20                                                               # STEP 12
ACTION: int2 = 20 
int2 = 14 : <type 'int'>
=> int2 = 20 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 13
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x103f8aa28> : <type 'instance'>
avl_REF1 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
result = avl1.find(int1)                                                # STEP 14
ACTION: result = avl1.find(int1) 
int1 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103f8aa28> : <type 'instance'>
avl_REF1 = set([12]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl1 == avl1                                                            # STEP 15
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x103f8aa28> : <type 'instance'>
avl_REF1 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
int1 = 18                                                               # STEP 16
ACTION: int1 = 18 
int1 = 2 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
result = avl1.find(int0)                                                # STEP 17
ACTION: result = avl1.find(int0) 
int0 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103f8aa28> : <type 'instance'>
avl_REF1 = set([12]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl1.delete(int0)                                                       # STEP 18
ACTION: avl1.delete(int0) 
int0 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103f8aa28> : <type 'instance'>
avl_REF1 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.delete(int2)                                                       # STEP 19
ACTION: avl1.delete(int2) 
int2 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103f8aa28> : <type 'instance'>
avl_REF1 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.insert(int1)                                                       # STEP 20
ACTION: avl1.insert(int1) 
int1 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103f8aa28> : <type 'instance'>
avl_REF1 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([18, 12]) : <type 'set'>
==================================================
int1 = 2                                                                # STEP 21
ACTION: int1 = 2 
int1 = 18 : <type 'int'>
=> int1 = 2 : <type 'int'>
==================================================
int0 = 11                                                               # STEP 22
ACTION: int0 = 11 
int0 = 9 : <type 'int'>
=> int0 = 11 : <type 'int'>
==================================================
int2 = 6                                                                # STEP 23
ACTION: int2 = 6 
int2 = 20 : <type 'int'>
=> int2 = 6 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 24
ACTION: avl1.delete(int3) 
int3 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103f8aa28> : <type 'instance'>
avl_REF1 = set([18, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int3 = 14                                                               # STEP 25
ACTION: int3 = 14 
int3 = 4 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 26
ACTION: avl1.delete(int1) 
int1 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103f8aa28> : <type 'instance'>
avl_REF1 = set([18, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.delete(int2)                                                       # STEP 27
ACTION: avl1.delete(int2) 
int2 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103f8aa28> : <type 'instance'>
avl_REF1 = set([18, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int1 = 1                                                                # STEP 28
ACTION: int1 = 1 
int1 = 2 : <type 'int'>
=> int1 = 1 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 29
ACTION: avl1.insert(int1) 
int1 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103f8aa28> : <type 'instance'>
avl_REF1 = set([18, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([1, 18, 12]) : <type 'set'>
==================================================
avl1 == avl1                                                            # STEP 30
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x103f8aa28> : <type 'instance'>
avl_REF1 = set([1, 18, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl2 = avl.AVLTree()                                                    # STEP 31
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x1039522d8> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 32
ACTION: avl1.insert(int2) 
int2 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103f8aa28> : <type 'instance'>
avl_REF1 = set([1, 18, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([1, 18, 12, 6]) : <type 'set'>
==================================================
result = avl2.find(int3)                                                # STEP 33
ACTION: result = avl2.find(int3) 
int3 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1039522d8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
int3 = 6                                                                # STEP 34
ACTION: int3 = 6 
int3 = 14 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 35
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x103f8aa28> : <type 'instance'>
avl_REF1 = set([1, 18, 12, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl2.insert(int1)                                                       # STEP 36
ACTION: avl2.insert(int1) 
int1 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1039522d8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([1]) : <type 'set'>
==================================================
result = avl2.find(int1)                                                # STEP 37
ACTION: result = avl2.find(int1) 
int1 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1039522d8> : <type 'instance'>
avl_REF2 = set([1]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int1 = 12                                                               # STEP 38
ACTION: int1 = 12 
int1 = 1 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 39
ACTION: avl2.insert(int3) 
int3 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1039522d8> : <type 'instance'>
avl_REF2 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([1, 6]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 40
ACTION: avl1.delete(int0) 
int0 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103f8aa28> : <type 'instance'>
avl_REF1 = set([1, 18, 12, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int0 = 16                                                               # STEP 41
ACTION: int0 = 16 
int0 = 11 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
avl2 == avl2                                                            # STEP 42
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x1039522d8> : <type 'instance'>
avl_REF2 = set([1, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
int3 = 19                                                               # STEP 43
ACTION: int3 = 19 
int3 = 6 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
int2 = 14                                                               # STEP 44
ACTION: int2 = 14 
int2 = 6 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 45
ACTION: avl1.insert(int0) 
int0 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103f8aa28> : <type 'instance'>
avl_REF1 = set([1, 18, 12, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([16, 1, 18, 12, 6]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 46
ACTION: avl2.delete(int3) 
int3 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1039522d8> : <type 'instance'>
avl_REF2 = set([1, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int0 = 20                                                               # STEP 47
ACTION: int0 = 20 
int0 = 16 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
int3 = 7                                                                # STEP 48
ACTION: int3 = 7 
int3 = 19 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
result = avl2.find(int2)                                                # STEP 49
ACTION: result = avl2.find(int2) 
int2 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1039522d8> : <type 'instance'>
avl_REF2 = set([1, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl2.insert(int3)                                                       # STEP 50
ACTION: avl2.insert(int3) 
int3 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1039522d8> : <type 'instance'>
avl_REF2 = set([1, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([1, 6, 7]) : <type 'set'>
==================================================
int2 = 1                                                                # STEP 51
ACTION: int2 = 1 
int2 = 14 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
int3 = 18                                                               # STEP 52
ACTION: int3 = 18 
int3 = 7 : <type 'int'>
=> int3 = 18 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 53
ACTION: avl2.delete(int2) 
int2 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1039522d8> : <type 'instance'>
avl_REF2 = set([1, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([6, 7]) : <type 'set'>
==================================================
avl1 == avl1                                                            # STEP 54
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x103f8aa28> : <type 'instance'>
avl_REF1 = set([16, 1, 18, 12, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
result = avl1.find(int1)                                                # STEP 55
ACTION: result = avl1.find(int1) 
int1 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103f8aa28> : <type 'instance'>
avl_REF1 = set([16, 1, 18, 12, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
result = avl2.find(int3)                                                # STEP 56
ACTION: result = avl2.find(int3) 
int3 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1039522d8> : <type 'instance'>
avl_REF2 = set([6, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
int1 = 18                                                               # STEP 57
ACTION: int1 = 18 
int1 = 12 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
int3 = 15                                                               # STEP 58
ACTION: int3 = 15 
int3 = 18 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 59
ACTION: avl2.delete(int3) 
int3 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1039522d8> : <type 'instance'>
avl_REF2 = set([6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
result = avl1.inorder()                                                 # STEP 60
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x103f8aa28> : <type 'instance'>
avl_REF1 = set([16, 1, 18, 12, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int2 = 20                                                               # STEP 61
ACTION: int2 = 20 
int2 = 1 : <type 'int'>
=> int2 = 20 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 62
ACTION: avl1.delete(int1) 
int1 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103f8aa28> : <type 'instance'>
avl_REF1 = set([16, 1, 18, 12, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([16, 1, 12, 6]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 63
ACTION: avl2.insert(int1) 
int1 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1039522d8> : <type 'instance'>
avl_REF2 = set([6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([18, 6, 7]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 64
ACTION: avl2.insert(int1) 
int1 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1039522d8> : <type 'instance'>
avl_REF2 = set([18, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
int3 = 18                                                               # STEP 65
ACTION: int3 = 18 
int3 = 15 : <type 'int'>
=> int3 = 18 : <type 'int'>
==================================================
avl1 == avl2                                                            # STEP 66
ACTION: avl1 == avl2 
avl1 = <avl.AVLTree instance at 0x103f8aa28> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x1039522d8> : <type 'instance'>
avl_REF1 = set([16, 1, 12, 6]) : <type 'set'>
avl_REF2 = set([18, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
result = avl2.find(int0)                                                # STEP 67
ACTION: result = avl2.find(int0) 
int0 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1039522d8> : <type 'instance'>
avl_REF2 = set([18, 6, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
int1 = 16                                                               # STEP 68
ACTION: int1 = 16 
int1 = 18 : <type 'int'>
=> int1 = 16 : <type 'int'>
==================================================
int0 = 17                                                               # STEP 69
ACTION: int0 = 17 
int0 = 20 : <type 'int'>
=> int0 = 17 : <type 'int'>
==================================================
result = avl2.find(int3)                                                # STEP 70
ACTION: result = avl2.find(int3) 
int3 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1039522d8> : <type 'instance'>
avl_REF2 = set([18, 6, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
int3 = 5                                                                # STEP 71
ACTION: int3 = 5 
int3 = 18 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 72
ACTION: avl2.insert(int2) 
int2 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1039522d8> : <type 'instance'>
avl_REF2 = set([18, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([18, 20, 6, 7]) : <type 'set'>
==================================================
int2 = 5                                                                # STEP 73
ACTION: int2 = 5 
int2 = 20 : <type 'int'>
=> int2 = 5 : <type 'int'>
==================================================
avl2 == avl2                                                            # STEP 74
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x1039522d8> : <type 'instance'>
avl_REF2 = set([18, 20, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
result = avl1.find(int3)                                                # STEP 75
ACTION: result = avl1.find(int3) 
int3 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103f8aa28> : <type 'instance'>
avl_REF1 = set([16, 1, 12, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
int3 = 8                                                                # STEP 76
ACTION: int3 = 8 
int3 = 5 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 77
ACTION: avl2.delete(int2) 
int2 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1039522d8> : <type 'instance'>
avl_REF2 = set([18, 20, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
result = avl2.find(int3)                                                # STEP 78
ACTION: result = avl2.find(int3) 
int3 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1039522d8> : <type 'instance'>
avl_REF2 = set([18, 20, 6, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
result = avl1.find(int0)                                                # STEP 79
ACTION: result = avl1.find(int0) 
int0 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103f8aa28> : <type 'instance'>
avl_REF1 = set([16, 1, 12, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl1.delete(int0)                                                       # STEP 80
ACTION: avl1.delete(int0) 
int0 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103f8aa28> : <type 'instance'>
avl_REF1 = set([16, 1, 12, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
result = avl1.find(int3)                                                # STEP 81
ACTION: result = avl1.find(int3) 
int3 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103f8aa28> : <type 'instance'>
avl_REF1 = set([16, 1, 12, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
int3 = 13                                                               # STEP 82
ACTION: int3 = 13 
int3 = 8 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
int0 = 6                                                                # STEP 83
ACTION: int0 = 6 
int0 = 17 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
int2 = 4                                                                # STEP 84
ACTION: int2 = 4 
int2 = 5 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 85
ACTION: avl2.insert(int0) 
int0 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1039522d8> : <type 'instance'>
avl_REF2 = set([18, 20, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
int0 = 20                                                               # STEP 86
ACTION: int0 = 20 
int0 = 6 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 87
ACTION: avl1.delete(int1) 
int1 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103f8aa28> : <type 'instance'>
avl_REF1 = set([16, 1, 12, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([1, 12, 6]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10415e830>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 42
STOPPING TESTING DUE TO TIMEOUT
8.17780794028 PERCENT COVERED
60.1875579357 TOTAL RUNTIME
7 EXECUTED
630 TOTAL TEST OPERATIONS
26.3363616467 TIME SPENT EXECUTING TEST OPERATIONS
0.0229642391205 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
26.4836494923 TIME SPENT CHECKING PROPERTIES
52.8200111389 TOTAL TIME SPENT RUNNING SUT
0.00401544570923 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int1 = 2                                                                 # STEP 0
int3 = 4                                                                 # STEP 1
int2 = 8                                                                 # STEP 2
int0 = 12                                                                # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
result = avl1.find(int2)                                                 # STEP 5
int2 = 1                                                                 # STEP 6
avl1.delete(int2)                                                        # STEP 7
int2 = 14                                                                # STEP 8
avl1.insert(int0)                                                        # STEP 9
int0 = 9                                                                # STEP 10
result = avl1.find(int2)                                                # STEP 11
int2 = 20                                                               # STEP 12
avl1 == avl1                                                            # STEP 13
result = avl1.find(int1)                                                # STEP 14
avl1 == avl1                                                            # STEP 15
int1 = 18                                                               # STEP 16
result = avl1.find(int0)                                                # STEP 17
avl1.delete(int0)                                                       # STEP 18
avl1.delete(int2)                                                       # STEP 19
avl1.insert(int1)                                                       # STEP 20
int1 = 2                                                                # STEP 21
int0 = 11                                                               # STEP 22
int2 = 6                                                                # STEP 23
avl1.delete(int3)                                                       # STEP 24
int3 = 14                                                               # STEP 25
avl1.delete(int1)                                                       # STEP 26
avl1.delete(int2)                                                       # STEP 27
int1 = 1                                                                # STEP 28
avl1.insert(int1)                                                       # STEP 29
avl1 == avl1                                                            # STEP 30
avl2 = avl.AVLTree()                                                    # STEP 31
avl1.insert(int2)                                                       # STEP 32
result = avl2.find(int3)                                                # STEP 33
int3 = 6                                                                # STEP 34
avl1 == avl1                                                            # STEP 35
avl2.insert(int1)                                                       # STEP 36
result = avl2.find(int1)                                                # STEP 37
int1 = 12                                                               # STEP 38
avl2.insert(int3)                                                       # STEP 39
avl1.delete(int0)                                                       # STEP 40
int0 = 16                                                               # STEP 41
avl2 == avl2                                                            # STEP 42
int3 = 19                                                               # STEP 43
int2 = 14                                                               # STEP 44
avl1.insert(int0)                                                       # STEP 45
avl2.delete(int3)                                                       # STEP 46
int0 = 20                                                               # STEP 47
int3 = 7                                                                # STEP 48
result = avl2.find(int2)                                                # STEP 49
avl2.insert(int3)                                                       # STEP 50
int2 = 1                                                                # STEP 51
int3 = 18                                                               # STEP 52
avl2.delete(int2)                                                       # STEP 53
avl1 == avl1                                                            # STEP 54
result = avl1.find(int1)                                                # STEP 55
result = avl2.find(int3)                                                # STEP 56
int1 = 18                                                               # STEP 57
int3 = 15                                                               # STEP 58
avl2.delete(int3)                                                       # STEP 59
result = avl1.inorder()                                                 # STEP 60
int2 = 20                                                               # STEP 61
avl1.delete(int1)                                                       # STEP 62
avl2.insert(int1)                                                       # STEP 63
avl2.insert(int1)                                                       # STEP 64
int3 = 18                                                               # STEP 65
avl1 == avl2                                                            # STEP 66
result = avl2.find(int0)                                                # STEP 67
int1 = 16                                                               # STEP 68
int0 = 17                                                               # STEP 69
result = avl2.find(int3)                                                # STEP 70
int3 = 5                                                                # STEP 71
avl2.insert(int2)                                                       # STEP 72
int2 = 5                                                                # STEP 73
avl2 == avl2                                                            # STEP 74
result = avl1.find(int3)                                                # STEP 75
int3 = 8                                                                # STEP 76
avl2.delete(int2)                                                       # STEP 77
result = avl2.find(int3)                                                # STEP 78
result = avl1.find(int0)                                                # STEP 79
avl1.delete(int0)                                                       # STEP 80
result = avl1.find(int3)                                                # STEP 81
int3 = 13                                                               # STEP 82
int0 = 6                                                                # STEP 83
int2 = 4                                                                # STEP 84
avl2.insert(int0)                                                       # STEP 85
int0 = 20                                                               # STEP 86
avl1.delete(int1)                                                       # STEP 87
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10415e830>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
206 BRANCHES COVERED
153 STATEMENTS COVERED

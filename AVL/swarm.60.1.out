Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=True, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.98968.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1047d45f0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
Original test has 62 steps

SAVING TEST AS failure.98968.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 2                                                                 # STEP 0
ACTION: int3 = 2 
int3 = None : <type 'NoneType'>
=> int3 = 2 : <type 'int'>
==================================================
int0 = 4                                                                 # STEP 1
ACTION: int0 = 4 
int0 = None : <type 'NoneType'>
=> int0 = 4 : <type 'int'>
==================================================
int2 = 12                                                                # STEP 2
ACTION: int2 = 12 
int2 = None : <type 'NoneType'>
=> int2 = 12 : <type 'int'>
==================================================
int1 = 13                                                                # STEP 3
ACTION: int1 = 13 
int1 = None : <type 'NoneType'>
=> int1 = 13 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x1042e5a70> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.insert(int2)                                                        # STEP 5
ACTION: avl1.insert(int2) 
int2 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042e5a70> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([12]) : <type 'set'>
==================================================
avl1.delete(int1)                                                        # STEP 6
ACTION: avl1.delete(int1) 
int1 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042e5a70> : <type 'instance'>
avl_REF1 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int2 = 6                                                                 # STEP 7
ACTION: int2 = 6 
int2 = 12 : <type 'int'>
=> int2 = 6 : <type 'int'>
==================================================
int1 = 3                                                                 # STEP 8
ACTION: int1 = 3 
int1 = 13 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
avl1.delete(int3)                                                        # STEP 9
ACTION: avl1.delete(int3) 
int3 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042e5a70> : <type 'instance'>
avl_REF1 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int3 = 8                                                                # STEP 10
ACTION: int3 = 8 
int3 = 2 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 11
ACTION: avl1.insert(int1) 
int1 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042e5a70> : <type 'instance'>
avl_REF1 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([3, 12]) : <type 'set'>
==================================================
int1 = 19                                                               # STEP 12
ACTION: int1 = 19 
int1 = 3 : <type 'int'>
=> int1 = 19 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 13
ACTION: avl1.delete(int2) 
int2 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042e5a70> : <type 'instance'>
avl_REF1 = set([3, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int2 = 12                                                               # STEP 14
ACTION: int2 = 12 
int2 = 6 : <type 'int'>
=> int2 = 12 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 15
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x1042f1950> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 16
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x1042f1c68> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 17
ACTION: avl1.delete(int0) 
int0 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042e5a70> : <type 'instance'>
avl_REF1 = set([3, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl0.insert(int0)                                                       # STEP 18
ACTION: avl0.insert(int0) 
int0 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1042f1950> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([4]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 19
ACTION: avl2.insert(int2) 
int2 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042f1c68> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([12]) : <type 'set'>
==================================================
int0 = 18                                                               # STEP 20
ACTION: int0 = 18 
int0 = 4 : <type 'int'>
=> int0 = 18 : <type 'int'>
==================================================
int2 = 16                                                               # STEP 21
ACTION: int2 = 16 
int2 = 12 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 22
ACTION: avl2.insert(int1) 
int1 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042f1c68> : <type 'instance'>
avl_REF2 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([19, 12]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 23
ACTION: avl1.insert(int2) 
int2 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042e5a70> : <type 'instance'>
avl_REF1 = set([3, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([16, 3, 12]) : <type 'set'>
==================================================
int1 = 14                                                               # STEP 24
ACTION: int1 = 14 
int1 = 19 : <type 'int'>
=> int1 = 14 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 25
ACTION: avl2.insert(int1) 
int1 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042f1c68> : <type 'instance'>
avl_REF2 = set([19, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([19, 12, 14]) : <type 'set'>
==================================================
int2 = 15                                                               # STEP 26
ACTION: int2 = 15 
int2 = 16 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 27
ACTION: avl0.insert(int3) 
int3 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1042f1950> : <type 'instance'>
avl_REF0 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([8, 4]) : <type 'set'>
==================================================
int3 = 7                                                                # STEP 28
ACTION: int3 = 7 
int3 = 8 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 29
ACTION: avl0.insert(int2) 
int2 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1042f1950> : <type 'instance'>
avl_REF0 = set([8, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([8, 4, 15]) : <type 'set'>
==================================================
int2 = 4                                                                # STEP 30
ACTION: int2 = 4 
int2 = 15 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 31
ACTION: avl0.delete(int3) 
int3 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1042f1950> : <type 'instance'>
avl_REF0 = set([8, 4, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl2.insert(int0)                                                       # STEP 32
ACTION: avl2.insert(int0) 
int0 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042f1c68> : <type 'instance'>
avl_REF2 = set([19, 12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([18, 19, 12, 14]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 33
ACTION: avl2.delete(int2) 
int2 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042f1c68> : <type 'instance'>
avl_REF2 = set([18, 19, 12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int1 = 5                                                                # STEP 34
ACTION: int1 = 5 
int1 = 14 : <type 'int'>
=> int1 = 5 : <type 'int'>
==================================================
int3 = 19                                                               # STEP 35
ACTION: int3 = 19 
int3 = 7 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
int2 = 14                                                               # STEP 36
ACTION: int2 = 14 
int2 = 4 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 37
ACTION: avl2.insert(int1) 
int1 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042f1c68> : <type 'instance'>
avl_REF2 = set([18, 19, 12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([18, 19, 12, 5, 14]) : <type 'set'>
==================================================
int0 = 15                                                               # STEP 38
ACTION: int0 = 15 
int0 = 18 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 39
ACTION: avl2.delete(int3) 
int3 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042f1c68> : <type 'instance'>
avl_REF2 = set([18, 19, 12, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([18, 12, 5, 14]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 40
ACTION: avl2.delete(int1) 
int1 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042f1c68> : <type 'instance'>
avl_REF2 = set([18, 12, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([18, 12, 14]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 41
ACTION: avl2.insert(int0) 
int0 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042f1c68> : <type 'instance'>
avl_REF2 = set([18, 12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([12, 14, 15, 18]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 42
ACTION: avl2.insert(int2) 
int2 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042f1c68> : <type 'instance'>
avl_REF2 = set([12, 14, 15, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
int3 = 2                                                                # STEP 43
ACTION: int3 = 2 
int3 = 19 : <type 'int'>
=> int3 = 2 : <type 'int'>
==================================================
int0 = 14                                                               # STEP 44
ACTION: int0 = 14 
int0 = 15 : <type 'int'>
=> int0 = 14 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 45
ACTION: avl0.insert(int1) 
int1 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1042f1950> : <type 'instance'>
avl_REF0 = set([8, 4, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([8, 4, 5, 15]) : <type 'set'>
==================================================
int1 = 12                                                               # STEP 46
ACTION: int1 = 12 
int1 = 5 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 47
ACTION: avl1.insert(int2) 
int2 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042e5a70> : <type 'instance'>
avl_REF1 = set([16, 3, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([16, 3, 12, 14]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 48
ACTION: avl1.insert(int1) 
int1 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042e5a70> : <type 'instance'>
avl_REF1 = set([16, 3, 12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
int1 = 6                                                                # STEP 49
ACTION: int1 = 6 
int1 = 12 : <type 'int'>
=> int1 = 6 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 50
ACTION: avl2.delete(int2) 
int2 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042f1c68> : <type 'instance'>
avl_REF2 = set([12, 14, 15, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([12, 15, 18]) : <type 'set'>
==================================================
int2 = 20                                                               # STEP 51
ACTION: int2 = 20 
int2 = 14 : <type 'int'>
=> int2 = 20 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 52
ACTION: avl2.delete(int1) 
int1 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042f1c68> : <type 'instance'>
avl_REF2 = set([12, 15, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl0.delete(int3)                                                       # STEP 53
ACTION: avl0.delete(int3) 
int3 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1042f1950> : <type 'instance'>
avl_REF0 = set([8, 4, 5, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int1 = 20                                                               # STEP 54
ACTION: int1 = 20 
int1 = 6 : <type 'int'>
=> int1 = 20 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 55
ACTION: avl1.delete(int1) 
int1 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042e5a70> : <type 'instance'>
avl_REF1 = set([16, 3, 12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl0.delete(int2)                                                       # STEP 56
ACTION: avl0.delete(int2) 
int2 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1042f1950> : <type 'instance'>
avl_REF0 = set([8, 4, 5, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int1 = 12                                                               # STEP 57
ACTION: int1 = 12 
int1 = 20 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
int3 = 18                                                               # STEP 58
ACTION: int3 = 18 
int3 = 2 : <type 'int'>
=> int3 = 18 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 59
ACTION: avl2.delete(int2) 
int2 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042f1c68> : <type 'instance'>
avl_REF2 = set([12, 15, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int2 = 15                                                               # STEP 60
ACTION: int2 = 15 
int2 = 20 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 61
ACTION: avl0.delete(int2) 
int2 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1042f1950> : <type 'instance'>
avl_REF0 = set([8, 4, 5, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([8, 4, 5]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1042e6710>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #4 STEP #76 (0:00:30.015078) Fri Apr 28 03:16:11 2017 [ 151 stmts 202 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1050fe368>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 26 steps

SAVING TEST AS failure.98968.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 14                                                                # STEP 0
ACTION: int3 = 14 
int3 = None : <type 'NoneType'>
=> int3 = 14 : <type 'int'>
==================================================
int1 = 18                                                                # STEP 1
ACTION: int1 = 18 
int1 = None : <type 'NoneType'>
=> int1 = 18 : <type 'int'>
==================================================
int2 = 18                                                                # STEP 2
ACTION: int2 = 18 
int2 = None : <type 'NoneType'>
=> int2 = 18 : <type 'int'>
==================================================
int0 = 15                                                                # STEP 3
ACTION: int0 = 15 
int0 = None : <type 'NoneType'>
=> int0 = 15 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x1050fea70> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 5
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x1050fed88> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl2.delete(int2)                                                        # STEP 6
ACTION: avl2.delete(int2) 
int2 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1050fea70> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl1.insert(int0)                                                        # STEP 7
ACTION: avl1.insert(int0) 
int0 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1050fed88> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([15]) : <type 'set'>
==================================================
int0 = 19                                                                # STEP 8
ACTION: int0 = 19 
int0 = 15 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
avl1.insert(int2)                                                        # STEP 9
ACTION: avl1.insert(int2) 
int2 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1050fed88> : <type 'instance'>
avl_REF1 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([18, 15]) : <type 'set'>
==================================================
int2 = 16                                                               # STEP 10
ACTION: int2 = 16 
int2 = 18 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 11
ACTION: avl1.insert(int2) 
int2 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1050fed88> : <type 'instance'>
avl_REF1 = set([18, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([16, 18, 15]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 12
ACTION: avl1.delete(int0) 
int0 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1050fed88> : <type 'instance'>
avl_REF1 = set([16, 18, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int0 = 13                                                               # STEP 13
ACTION: int0 = 13 
int0 = 19 : <type 'int'>
=> int0 = 13 : <type 'int'>
==================================================
int2 = 7                                                                # STEP 14
ACTION: int2 = 7 
int2 = 16 : <type 'int'>
=> int2 = 7 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 15
ACTION: avl2.insert(int1) 
int1 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1050fea70> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([18]) : <type 'set'>
==================================================
int1 = 17                                                               # STEP 16
ACTION: int1 = 17 
int1 = 18 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 17
ACTION: avl2.delete(int3) 
int3 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1050fea70> : <type 'instance'>
avl_REF2 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.delete(int3)                                                       # STEP 18
ACTION: avl2.delete(int3) 
int3 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1050fea70> : <type 'instance'>
avl_REF2 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.delete(int2)                                                       # STEP 19
ACTION: avl2.delete(int2) 
int2 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1050fea70> : <type 'instance'>
avl_REF2 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int2 = 18                                                               # STEP 20
ACTION: int2 = 18 
int2 = 7 : <type 'int'>
=> int2 = 18 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 21
ACTION: avl1.insert(int0) 
int0 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1050fed88> : <type 'instance'>
avl_REF1 = set([16, 18, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([16, 18, 13, 15]) : <type 'set'>
==================================================
int0 = 11                                                               # STEP 22
ACTION: int0 = 11 
int0 = 13 : <type 'int'>
=> int0 = 11 : <type 'int'>
==================================================
int3 = 17                                                               # STEP 23
ACTION: int3 = 17 
int3 = 14 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 24
ACTION: avl2.delete(int2) 
int2 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1050fea70> : <type 'instance'>
avl_REF2 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 25
ACTION: avl1.delete(int2) 
int2 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1050fed88> : <type 'instance'>
avl_REF1 = set([16, 18, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([16, 13, 15]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10424e5a8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1050c2248>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
Original test has 71 steps

SAVING TEST AS failure.98968.test.2
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 14                                                                # STEP 0
ACTION: int1 = 14 
int1 = None : <type 'NoneType'>
=> int1 = 14 : <type 'int'>
==================================================
int2 = 9                                                                 # STEP 1
ACTION: int2 = 9 
int2 = None : <type 'NoneType'>
=> int2 = 9 : <type 'int'>
==================================================
int3 = 17                                                                # STEP 2
ACTION: int3 = 17 
int3 = None : <type 'NoneType'>
=> int3 = 17 : <type 'int'>
==================================================
int0 = 20                                                                # STEP 3
ACTION: int0 = 20 
int0 = None : <type 'NoneType'>
=> int0 = 20 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x1050c2170> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
result = avl1.inorder()                                                  # STEP 5
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1050c2170> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int3)                                                        # STEP 6
ACTION: avl1.insert(int3) 
int3 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1050c2170> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([17]) : <type 'set'>
==================================================
avl1.delete(int2)                                                        # STEP 7
ACTION: avl1.delete(int2) 
int2 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1050c2170> : <type 'instance'>
avl_REF1 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int3 = 13                                                                # STEP 8
ACTION: int3 = 13 
int3 = 17 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
result = avl1.inorder()                                                  # STEP 9
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1050c2170> : <type 'instance'>
avl_REF1 = set([17]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.delete(int1)                                                       # STEP 10
ACTION: avl1.delete(int1) 
int1 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1050c2170> : <type 'instance'>
avl_REF1 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int1 = 19                                                               # STEP 11
ACTION: int1 = 19 
int1 = 14 : <type 'int'>
=> int1 = 19 : <type 'int'>
==================================================
int2 = 15                                                               # STEP 12
ACTION: int2 = 15 
int2 = 9 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 13
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x1050d9cb0> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 14
ACTION: avl1.insert(int2) 
int2 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1050c2170> : <type 'instance'>
avl_REF1 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([17, 15]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 15
ACTION: avl1.delete(int1) 
int1 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1050c2170> : <type 'instance'>
avl_REF1 = set([17, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int1 = 9                                                                # STEP 16
ACTION: int1 = 9 
int1 = 19 : <type 'int'>
=> int1 = 9 : <type 'int'>
==================================================
int2 = 14                                                               # STEP 17
ACTION: int2 = 14 
int2 = 15 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 18
ACTION: avl0.delete(int3) 
int3 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1050d9cb0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.insert(int0)                                                       # STEP 19
ACTION: avl0.insert(int0) 
int0 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1050d9cb0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([20]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 20
ACTION: avl1.insert(int1) 
int1 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1050c2170> : <type 'instance'>
avl_REF1 = set([17, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([17, 9, 15]) : <type 'set'>
==================================================
int0 = 6                                                                # STEP 21
ACTION: int0 = 6 
int0 = 20 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
int3 = 2                                                                # STEP 22
ACTION: int3 = 2 
int3 = 13 : <type 'int'>
=> int3 = 2 : <type 'int'>
==================================================
int1 = 13                                                               # STEP 23
ACTION: int1 = 13 
int1 = 9 : <type 'int'>
=> int1 = 13 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 24
ACTION: avl0.delete(int3) 
int3 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1050d9cb0> : <type 'instance'>
avl_REF0 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl1.insert(int3)                                                       # STEP 25
ACTION: avl1.insert(int3) 
int3 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1050c2170> : <type 'instance'>
avl_REF1 = set([17, 9, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([17, 2, 9, 15]) : <type 'set'>
==================================================
int3 = 17                                                               # STEP 26
ACTION: int3 = 17 
int3 = 2 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 27
ACTION: avl1.insert(int2) 
int2 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1050c2170> : <type 'instance'>
avl_REF1 = set([17, 2, 9, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([17, 2, 9, 14, 15]) : <type 'set'>
==================================================
int2 = 9                                                                # STEP 28
ACTION: int2 = 9 
int2 = 14 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 29
ACTION: avl1 = avl.AVLTree() 
avl1 = <avl.AVLTree instance at 0x1050c2170> : <type 'instance'>
avl_REF1 = set([17, 2, 9, 14, 15]) : <type 'set'>
=> avl1 = <avl.AVLTree instance at 0x1050ffab8> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 30
ACTION: avl1.insert(int2) 
int2 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1050ffab8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([9]) : <type 'set'>
==================================================
int2 = 15                                                               # STEP 31
ACTION: int2 = 15 
int2 = 9 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 32
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x1050ffab8> : <type 'instance'>
avl_REF1 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.insert(int0)                                                       # STEP 33
ACTION: avl1.insert(int0) 
int0 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1050ffab8> : <type 'instance'>
avl_REF1 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([9, 6]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 34
ACTION: avl1.insert(int1) 
int1 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1050ffab8> : <type 'instance'>
avl_REF1 = set([9, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([9, 13, 6]) : <type 'set'>
==================================================
int1 = 6                                                                # STEP 35
ACTION: int1 = 6 
int1 = 13 : <type 'int'>
=> int1 = 6 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 36
ACTION: avl0.insert(int2) 
int2 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1050d9cb0> : <type 'instance'>
avl_REF0 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([20, 15]) : <type 'set'>
==================================================
int2 = 20                                                               # STEP 37
ACTION: int2 = 20 
int2 = 15 : <type 'int'>
=> int2 = 20 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 38
ACTION: avl0.insert(int3) 
int3 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1050d9cb0> : <type 'instance'>
avl_REF0 = set([20, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([17, 20, 15]) : <type 'set'>
==================================================
int0 = 6                                                                # STEP 39
ACTION: int0 = 6 
int0 = 6 : <type 'int'>
==================================================
int3 = 6                                                                # STEP 40
ACTION: int3 = 6 
int3 = 17 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 41
ACTION: avl1.delete(int1) 
int1 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1050ffab8> : <type 'instance'>
avl_REF1 = set([9, 13, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([9, 13]) : <type 'set'>
==================================================
int1 = 15                                                               # STEP 42
ACTION: int1 = 15 
int1 = 6 : <type 'int'>
=> int1 = 15 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 43
ACTION: avl1.delete(int2) 
int2 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1050ffab8> : <type 'instance'>
avl_REF1 = set([9, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.insert(int2)                                                       # STEP 44
ACTION: avl1.insert(int2) 
int2 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1050ffab8> : <type 'instance'>
avl_REF1 = set([9, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([9, 20, 13]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 45
ACTION: avl0.insert(int2) 
int2 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1050d9cb0> : <type 'instance'>
avl_REF0 = set([17, 20, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl1.delete(int3)                                                       # STEP 46
ACTION: avl1.delete(int3) 
int3 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1050ffab8> : <type 'instance'>
avl_REF1 = set([9, 20, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int3 = 5                                                                # STEP 47
ACTION: int3 = 5 
int3 = 6 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 48
ACTION: avl0.insert(int1) 
int1 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1050d9cb0> : <type 'instance'>
avl_REF0 = set([17, 20, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
int2 = 2                                                                # STEP 49
ACTION: int2 = 2 
int2 = 20 : <type 'int'>
=> int2 = 2 : <type 'int'>
==================================================
int1 = 16                                                               # STEP 50
ACTION: int1 = 16 
int1 = 15 : <type 'int'>
=> int1 = 16 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 51
ACTION: avl1.insert(int3) 
int3 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1050ffab8> : <type 'instance'>
avl_REF1 = set([9, 20, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([9, 20, 13, 5]) : <type 'set'>
==================================================
int3 = 16                                                               # STEP 52
ACTION: int3 = 16 
int3 = 5 : <type 'int'>
=> int3 = 16 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 53
ACTION: avl1.insert(int3) 
int3 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1050ffab8> : <type 'instance'>
avl_REF1 = set([9, 20, 13, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([5, 9, 13, 16, 20]) : <type 'set'>
==================================================
int3 = 15                                                               # STEP 54
ACTION: int3 = 15 
int3 = 16 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 55
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1050ffab8> : <type 'instance'>
avl_REF1 = set([5, 9, 13, 16, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1 == avl1                                                            # STEP 56
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x1050ffab8> : <type 'instance'>
avl_REF1 = set([5, 9, 13, 16, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl0.insert(int2)                                                       # STEP 57
ACTION: avl0.insert(int2) 
int2 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1050d9cb0> : <type 'instance'>
avl_REF0 = set([17, 20, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([17, 2, 20, 15]) : <type 'set'>
==================================================
int2 = 13                                                               # STEP 58
ACTION: int2 = 13 
int2 = 2 : <type 'int'>
=> int2 = 13 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 59
ACTION: avl1.insert(int2) 
int2 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1050ffab8> : <type 'instance'>
avl_REF1 = set([5, 9, 13, 16, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
avl0 == avl1                                                            # STEP 60
ACTION: avl0 == avl1 
avl0 = <avl.AVLTree instance at 0x1050d9cb0> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x1050ffab8> : <type 'instance'>
avl_REF0 = set([17, 2, 20, 15]) : <type 'set'>
avl_REF1 = set([5, 9, 13, 16, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF1 
==================================================
avl1.insert(int3)                                                       # STEP 61
ACTION: avl1.insert(int3) 
int3 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1050ffab8> : <type 'instance'>
avl_REF1 = set([5, 9, 13, 16, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([5, 9, 13, 15, 16, 20]) : <type 'set'>
==================================================
int3 = 12                                                               # STEP 62
ACTION: int3 = 12 
int3 = 15 : <type 'int'>
=> int3 = 12 : <type 'int'>
==================================================
int2 = 17                                                               # STEP 63
ACTION: int2 = 17 
int2 = 13 : <type 'int'>
=> int2 = 17 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 64
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x1050ffab8> : <type 'instance'>
avl_REF1 = set([5, 9, 13, 15, 16, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl0 == avl0                                                            # STEP 65
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x1050d9cb0> : <type 'instance'>
avl_REF0 = set([17, 2, 20, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl1.delete(int2)                                                       # STEP 66
ACTION: avl1.delete(int2) 
int2 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1050ffab8> : <type 'instance'>
avl_REF1 = set([5, 9, 13, 15, 16, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl0 == avl0                                                            # STEP 67
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x1050d9cb0> : <type 'instance'>
avl_REF0 = set([17, 2, 20, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl1.delete(int2)                                                       # STEP 68
ACTION: avl1.delete(int2) 
int2 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1050ffab8> : <type 'instance'>
avl_REF1 = set([5, 9, 13, 15, 16, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int2 = 20                                                               # STEP 69
ACTION: int2 = 20 
int2 = 17 : <type 'int'>
=> int2 = 20 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 70
ACTION: avl0.delete(int2) 
int2 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1050d9cb0> : <type 'instance'>
avl_REF0 = set([17, 2, 20, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([17, 2, 15]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1050e7830>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 3 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 0
STOPPING TESTING DUE TO TIMEOUT
8.04480651731 PERCENT COVERED
61.6235980988 TOTAL RUNTIME
9 EXECUTED
659 TOTAL TEST OPERATIONS
24.3877646923 TIME SPENT EXECUTING TEST OPERATIONS
0.0239315032959 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
24.4488525391 TIME SPENT CHECKING PROPERTIES
48.8366172314 TOTAL TIME SPENT RUNNING SUT
0.00512290000916 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
3 FAILED
0 REPEATS OF FAILURES
3 ACTUAL DISTINCT FAILURES

FAILURE 0
int3 = 2                                                                 # STEP 0
int0 = 4                                                                 # STEP 1
int2 = 12                                                                # STEP 2
int1 = 13                                                                # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
avl1.insert(int2)                                                        # STEP 5
avl1.delete(int1)                                                        # STEP 6
int2 = 6                                                                 # STEP 7
int1 = 3                                                                 # STEP 8
avl1.delete(int3)                                                        # STEP 9
int3 = 8                                                                # STEP 10
avl1.insert(int1)                                                       # STEP 11
int1 = 19                                                               # STEP 12
avl1.delete(int2)                                                       # STEP 13
int2 = 12                                                               # STEP 14
avl0 = avl.AVLTree()                                                    # STEP 15
avl2 = avl.AVLTree()                                                    # STEP 16
avl1.delete(int0)                                                       # STEP 17
avl0.insert(int0)                                                       # STEP 18
avl2.insert(int2)                                                       # STEP 19
int0 = 18                                                               # STEP 20
int2 = 16                                                               # STEP 21
avl2.insert(int1)                                                       # STEP 22
avl1.insert(int2)                                                       # STEP 23
int1 = 14                                                               # STEP 24
avl2.insert(int1)                                                       # STEP 25
int2 = 15                                                               # STEP 26
avl0.insert(int3)                                                       # STEP 27
int3 = 7                                                                # STEP 28
avl0.insert(int2)                                                       # STEP 29
int2 = 4                                                                # STEP 30
avl0.delete(int3)                                                       # STEP 31
avl2.insert(int0)                                                       # STEP 32
avl2.delete(int2)                                                       # STEP 33
int1 = 5                                                                # STEP 34
int3 = 19                                                               # STEP 35
int2 = 14                                                               # STEP 36
avl2.insert(int1)                                                       # STEP 37
int0 = 15                                                               # STEP 38
avl2.delete(int3)                                                       # STEP 39
avl2.delete(int1)                                                       # STEP 40
avl2.insert(int0)                                                       # STEP 41
avl2.insert(int2)                                                       # STEP 42
int3 = 2                                                                # STEP 43
int0 = 14                                                               # STEP 44
avl0.insert(int1)                                                       # STEP 45
int1 = 12                                                               # STEP 46
avl1.insert(int2)                                                       # STEP 47
avl1.insert(int1)                                                       # STEP 48
int1 = 6                                                                # STEP 49
avl2.delete(int2)                                                       # STEP 50
int2 = 20                                                               # STEP 51
avl2.delete(int1)                                                       # STEP 52
avl0.delete(int3)                                                       # STEP 53
int1 = 20                                                               # STEP 54
avl1.delete(int1)                                                       # STEP 55
avl0.delete(int2)                                                       # STEP 56
int1 = 12                                                               # STEP 57
int3 = 18                                                               # STEP 58
avl2.delete(int2)                                                       # STEP 59
int2 = 15                                                               # STEP 60
avl0.delete(int2)                                                       # STEP 61
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1042e6710>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE 1
int3 = 14                                                                # STEP 0
int1 = 18                                                                # STEP 1
int2 = 18                                                                # STEP 2
int0 = 15                                                                # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
avl1 = avl.AVLTree()                                                     # STEP 5
avl2.delete(int2)                                                        # STEP 6
avl1.insert(int0)                                                        # STEP 7
int0 = 19                                                                # STEP 8
avl1.insert(int2)                                                        # STEP 9
int2 = 16                                                               # STEP 10
avl1.insert(int2)                                                       # STEP 11
avl1.delete(int0)                                                       # STEP 12
int0 = 13                                                               # STEP 13
int2 = 7                                                                # STEP 14
avl2.insert(int1)                                                       # STEP 15
int1 = 17                                                               # STEP 16
avl2.delete(int3)                                                       # STEP 17
avl2.delete(int3)                                                       # STEP 18
avl2.delete(int2)                                                       # STEP 19
int2 = 18                                                               # STEP 20
avl1.insert(int0)                                                       # STEP 21
int0 = 11                                                               # STEP 22
int3 = 17                                                               # STEP 23
avl2.delete(int2)                                                       # STEP 24
avl1.delete(int2)                                                       # STEP 25
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10424e5a8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE 2
int1 = 14                                                                # STEP 0
int2 = 9                                                                 # STEP 1
int3 = 17                                                                # STEP 2
int0 = 20                                                                # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
result = avl1.inorder()                                                  # STEP 5
avl1.insert(int3)                                                        # STEP 6
avl1.delete(int2)                                                        # STEP 7
int3 = 13                                                                # STEP 8
result = avl1.inorder()                                                  # STEP 9
avl1.delete(int1)                                                       # STEP 10
int1 = 19                                                               # STEP 11
int2 = 15                                                               # STEP 12
avl0 = avl.AVLTree()                                                    # STEP 13
avl1.insert(int2)                                                       # STEP 14
avl1.delete(int1)                                                       # STEP 15
int1 = 9                                                                # STEP 16
int2 = 14                                                               # STEP 17
avl0.delete(int3)                                                       # STEP 18
avl0.insert(int0)                                                       # STEP 19
avl1.insert(int1)                                                       # STEP 20
int0 = 6                                                                # STEP 21
int3 = 2                                                                # STEP 22
int1 = 13                                                               # STEP 23
avl0.delete(int3)                                                       # STEP 24
avl1.insert(int3)                                                       # STEP 25
int3 = 17                                                               # STEP 26
avl1.insert(int2)                                                       # STEP 27
int2 = 9                                                                # STEP 28
avl1 = avl.AVLTree()                                                    # STEP 29
avl1.insert(int2)                                                       # STEP 30
int2 = 15                                                               # STEP 31
avl1 == avl1                                                            # STEP 32
avl1.insert(int0)                                                       # STEP 33
avl1.insert(int1)                                                       # STEP 34
int1 = 6                                                                # STEP 35
avl0.insert(int2)                                                       # STEP 36
int2 = 20                                                               # STEP 37
avl0.insert(int3)                                                       # STEP 38
int0 = 6                                                                # STEP 39
int3 = 6                                                                # STEP 40
avl1.delete(int1)                                                       # STEP 41
int1 = 15                                                               # STEP 42
avl1.delete(int2)                                                       # STEP 43
avl1.insert(int2)                                                       # STEP 44
avl0.insert(int2)                                                       # STEP 45
avl1.delete(int3)                                                       # STEP 46
int3 = 5                                                                # STEP 47
avl0.insert(int1)                                                       # STEP 48
int2 = 2                                                                # STEP 49
int1 = 16                                                               # STEP 50
avl1.insert(int3)                                                       # STEP 51
int3 = 16                                                               # STEP 52
avl1.insert(int3)                                                       # STEP 53
int3 = 15                                                               # STEP 54
result = avl1.inorder()                                                 # STEP 55
avl1 == avl1                                                            # STEP 56
avl0.insert(int2)                                                       # STEP 57
int2 = 13                                                               # STEP 58
avl1.insert(int2)                                                       # STEP 59
avl0 == avl1                                                            # STEP 60
avl1.insert(int3)                                                       # STEP 61
int3 = 12                                                               # STEP 62
int2 = 17                                                               # STEP 63
avl1 == avl1                                                            # STEP 64
avl0 == avl0                                                            # STEP 65
avl1.delete(int2)                                                       # STEP 66
avl0 == avl0                                                            # STEP 67
avl1.delete(int2)                                                       # STEP 68
int2 = 20                                                               # STEP 69
avl0.delete(int2)                                                       # STEP 70
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1050e7830>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
202 BRANCHES COVERED
151 STATEMENTS COVERED

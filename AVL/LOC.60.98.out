Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.1095.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1042d45f0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 85 steps

SAVING TEST AS failure.1095.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 10                                                                # STEP 0
ACTION: int0 = 10 
int0 = None : <type 'NoneType'>
=> int0 = 10 : <type 'int'>
==================================================
int1 = 1                                                                 # STEP 1
ACTION: int1 = 1 
int1 = None : <type 'NoneType'>
=> int1 = 1 : <type 'int'>
==================================================
int3 = 16                                                                # STEP 2
ACTION: int3 = 16 
int3 = None : <type 'NoneType'>
=> int3 = 16 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 3
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x1046f3dd0> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int2 = 7                                                                 # STEP 4
ACTION: int2 = 7 
int2 = None : <type 'NoneType'>
=> int2 = 7 : <type 'int'>
==================================================
avl2.insert(int1)                                                        # STEP 5
ACTION: avl2.insert(int1) 
int1 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046f3dd0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([1]) : <type 'set'>
==================================================
avl2.insert(int1)                                                        # STEP 6
ACTION: avl2.insert(int1) 
int1 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046f3dd0> : <type 'instance'>
avl_REF2 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl2.delete(int2)                                                        # STEP 7
ACTION: avl2.delete(int2) 
int2 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046f3dd0> : <type 'instance'>
avl_REF2 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int2 = 1                                                                 # STEP 8
ACTION: int2 = 1 
int2 = 7 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
avl2.insert(int3)                                                        # STEP 9
ACTION: avl2.insert(int3) 
int3 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046f3dd0> : <type 'instance'>
avl_REF2 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([16, 1]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 10
ACTION: avl2.delete(int2) 
int2 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046f3dd0> : <type 'instance'>
avl_REF2 = set([16, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([16]) : <type 'set'>
==================================================
result = avl2.find(int3)                                                # STEP 11
ACTION: result = avl2.find(int3) 
int3 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046f3dd0> : <type 'instance'>
avl_REF2 = set([16]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl2.insert(int3)                                                       # STEP 12
ACTION: avl2.insert(int3) 
int3 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046f3dd0> : <type 'instance'>
avl_REF2 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
avl2.insert(int0)                                                       # STEP 13
ACTION: avl2.insert(int0) 
int0 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046f3dd0> : <type 'instance'>
avl_REF2 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([16, 10]) : <type 'set'>
==================================================
result = avl2.find(int3)                                                # STEP 14
ACTION: result = avl2.find(int3) 
int3 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046f3dd0> : <type 'instance'>
avl_REF2 = set([16, 10]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl2.insert(int1)                                                       # STEP 15
ACTION: avl2.insert(int1) 
int1 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046f3dd0> : <type 'instance'>
avl_REF2 = set([16, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([16, 1, 10]) : <type 'set'>
==================================================
int2 = 8                                                                # STEP 16
ACTION: int2 = 8 
int2 = 1 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
avl2 == avl2                                                            # STEP 17
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x1046f3dd0> : <type 'instance'>
avl_REF2 = set([16, 1, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl2.insert(int3)                                                       # STEP 18
ACTION: avl2.insert(int3) 
int3 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046f3dd0> : <type 'instance'>
avl_REF2 = set([16, 1, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
int3 = 5                                                                # STEP 19
ACTION: int3 = 5 
int3 = 16 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 20
ACTION: avl2.insert(int3) 
int3 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046f3dd0> : <type 'instance'>
avl_REF2 = set([16, 1, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([16, 1, 10, 5]) : <type 'set'>
==================================================
int3 = 14                                                               # STEP 21
ACTION: int3 = 14 
int3 = 5 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 22
ACTION: avl2.delete(int1) 
int1 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046f3dd0> : <type 'instance'>
avl_REF2 = set([16, 1, 10, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([16, 10, 5]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 23
ACTION: avl2.insert(int3) 
int3 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046f3dd0> : <type 'instance'>
avl_REF2 = set([16, 10, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([16, 10, 5, 14]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 24
ACTION: avl2.delete(int1) 
int1 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046f3dd0> : <type 'instance'>
avl_REF2 = set([16, 10, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.delete(int3)                                                       # STEP 25
ACTION: avl2.delete(int3) 
int3 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046f3dd0> : <type 'instance'>
avl_REF2 = set([16, 10, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([16, 10, 5]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 26
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x1046f3dd0> : <type 'instance'>
avl_REF2 = set([16, 10, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2 == avl2                                                            # STEP 27
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x1046f3dd0> : <type 'instance'>
avl_REF2 = set([16, 10, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
int0 = 10                                                               # STEP 28
ACTION: int0 = 10 
int0 = 10 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 29
ACTION: avl2.delete(int3) 
int3 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046f3dd0> : <type 'instance'>
avl_REF2 = set([16, 10, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.delete(int1)                                                       # STEP 30
ACTION: avl2.delete(int1) 
int1 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046f3dd0> : <type 'instance'>
avl_REF2 = set([16, 10, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
result = avl2.inorder()                                                 # STEP 31
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x1046f3dd0> : <type 'instance'>
avl_REF2 = set([16, 10, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int0)                                                       # STEP 32
ACTION: avl2.delete(int0) 
int0 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046f3dd0> : <type 'instance'>
avl_REF2 = set([16, 10, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([16, 5]) : <type 'set'>
==================================================
avl2 == avl2                                                            # STEP 33
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x1046f3dd0> : <type 'instance'>
avl_REF2 = set([16, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl2.insert(int1)                                                       # STEP 34
ACTION: avl2.insert(int1) 
int1 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046f3dd0> : <type 'instance'>
avl_REF2 = set([16, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([16, 1, 5]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 35
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x1046f3dd0> : <type 'instance'>
avl_REF2 = set([16, 1, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int3 = 16                                                               # STEP 36
ACTION: int3 = 16 
int3 = 14 : <type 'int'>
=> int3 = 16 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 37
ACTION: avl2.insert(int3) 
int3 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046f3dd0> : <type 'instance'>
avl_REF2 = set([16, 1, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
avl2.insert(int3)                                                       # STEP 38
ACTION: avl2.insert(int3) 
int3 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046f3dd0> : <type 'instance'>
avl_REF2 = set([16, 1, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
avl2.delete(int3)                                                       # STEP 39
ACTION: avl2.delete(int3) 
int3 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046f3dd0> : <type 'instance'>
avl_REF2 = set([16, 1, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([1, 5]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 40
ACTION: avl2.delete(int1) 
int1 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046f3dd0> : <type 'instance'>
avl_REF2 = set([1, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([5]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 41
ACTION: avl2.delete(int2) 
int2 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046f3dd0> : <type 'instance'>
avl_REF2 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.delete(int1)                                                       # STEP 42
ACTION: avl2.delete(int1) 
int1 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046f3dd0> : <type 'instance'>
avl_REF2 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int1 = 4                                                                # STEP 43
ACTION: int1 = 4 
int1 = 1 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
int2 = 20                                                               # STEP 44
ACTION: int2 = 20 
int2 = 8 : <type 'int'>
=> int2 = 20 : <type 'int'>
==================================================
int0 = 17                                                               # STEP 45
ACTION: int0 = 17 
int0 = 10 : <type 'int'>
=> int0 = 17 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 46
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x1044db248> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 47
ACTION: avl1.insert(int1) 
int1 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1044db248> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([4]) : <type 'set'>
==================================================
int1 = 4                                                                # STEP 48
ACTION: int1 = 4 
int1 = 4 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 49
ACTION: avl1.insert(int2) 
int2 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1044db248> : <type 'instance'>
avl_REF1 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([20, 4]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 50
ACTION: avl1.insert(int2) 
int2 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1044db248> : <type 'instance'>
avl_REF1 = set([20, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
avl2.delete(int0)                                                       # STEP 51
ACTION: avl2.delete(int0) 
int0 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046f3dd0> : <type 'instance'>
avl_REF2 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl1.delete(int2)                                                       # STEP 52
ACTION: avl1.delete(int2) 
int2 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1044db248> : <type 'instance'>
avl_REF1 = set([20, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([4]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 53
ACTION: avl2.delete(int2) 
int2 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046f3dd0> : <type 'instance'>
avl_REF2 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
result = avl2.find(int1)                                                # STEP 54
ACTION: result = avl2.find(int1) 
int1 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046f3dd0> : <type 'instance'>
avl_REF2 = set([5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl2.delete(int1)                                                       # STEP 55
ACTION: avl2.delete(int1) 
int1 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046f3dd0> : <type 'instance'>
avl_REF2 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
result = avl2.inorder()                                                 # STEP 56
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x1046f3dd0> : <type 'instance'>
avl_REF2 = set([5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int2)                                                       # STEP 57
ACTION: avl2.delete(int2) 
int2 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046f3dd0> : <type 'instance'>
avl_REF2 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.delete(int3)                                                       # STEP 58
ACTION: avl2.delete(int3) 
int3 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046f3dd0> : <type 'instance'>
avl_REF2 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.delete(int0)                                                       # STEP 59
ACTION: avl2.delete(int0) 
int0 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046f3dd0> : <type 'instance'>
avl_REF2 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.delete(int2)                                                       # STEP 60
ACTION: avl2.delete(int2) 
int2 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046f3dd0> : <type 'instance'>
avl_REF2 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int1 = 4                                                                # STEP 61
ACTION: int1 = 4 
int1 = 4 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 62
ACTION: avl2.insert(int1) 
int1 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046f3dd0> : <type 'instance'>
avl_REF2 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([4, 5]) : <type 'set'>
==================================================
avl1 == avl1                                                            # STEP 63
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x1044db248> : <type 'instance'>
avl_REF1 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl2.delete(int0)                                                       # STEP 64
ACTION: avl2.delete(int0) 
int0 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046f3dd0> : <type 'instance'>
avl_REF2 = set([4, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl1.delete(int2)                                                       # STEP 65
ACTION: avl1.delete(int2) 
int2 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1044db248> : <type 'instance'>
avl_REF1 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
result = avl1.inorder()                                                 # STEP 66
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1044db248> : <type 'instance'>
avl_REF1 = set([4]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int1)                                                       # STEP 67
ACTION: avl1.insert(int1) 
int1 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1044db248> : <type 'instance'>
avl_REF1 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl1.delete(int2)                                                       # STEP 68
ACTION: avl1.delete(int2) 
int2 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1044db248> : <type 'instance'>
avl_REF1 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
result = avl2.inorder()                                                 # STEP 69
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x1046f3dd0> : <type 'instance'>
avl_REF2 = set([4, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int1)                                                       # STEP 70
ACTION: avl2.insert(int1) 
int1 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046f3dd0> : <type 'instance'>
avl_REF2 = set([4, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
int2 = 9                                                                # STEP 71
ACTION: int2 = 9 
int2 = 20 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 72
ACTION: avl2.insert(int0) 
int0 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046f3dd0> : <type 'instance'>
avl_REF2 = set([4, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([17, 4, 5]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 73
ACTION: avl1.insert(int1) 
int1 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1044db248> : <type 'instance'>
avl_REF1 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
int1 = 12                                                               # STEP 74
ACTION: int1 = 12 
int1 = 4 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 75
ACTION: avl2.insert(int3) 
int3 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046f3dd0> : <type 'instance'>
avl_REF2 = set([17, 4, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([16, 17, 4, 5]) : <type 'set'>
==================================================
result = avl2.find(int2)                                                # STEP 76
ACTION: result = avl2.find(int2) 
int2 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046f3dd0> : <type 'instance'>
avl_REF2 = set([16, 17, 4, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
result = avl1.inorder()                                                 # STEP 77
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1044db248> : <type 'instance'>
avl_REF1 = set([4]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl2.insert(int3)                                                       # STEP 78
ACTION: avl2.insert(int3) 
int3 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046f3dd0> : <type 'instance'>
avl_REF2 = set([16, 17, 4, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
avl1.insert(int0)                                                       # STEP 79
ACTION: avl1.insert(int0) 
int0 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1044db248> : <type 'instance'>
avl_REF1 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([17, 4]) : <type 'set'>
==================================================
int0 = 6                                                                # STEP 80
ACTION: int0 = 6 
int0 = 17 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
int3 = 4                                                                # STEP 81
ACTION: int3 = 4 
int3 = 16 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
int2 = 20                                                               # STEP 82
ACTION: int2 = 20 
int2 = 9 : <type 'int'>
=> int2 = 20 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 83
ACTION: avl1.delete(int1) 
int1 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1044db248> : <type 'instance'>
avl_REF1 = set([17, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl2.delete(int3)                                                       # STEP 84
ACTION: avl2.delete(int3) 
int3 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046f3dd0> : <type 'instance'>
avl_REF2 = set([16, 17, 4, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([16, 17, 5]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10458a5f0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
  6 [2:0]
-- < 4 [1:0]
---- < 1 [0:0] L
---- > 5 [0:0] L
-- > 16 [1:0]
---- < 9 [0:0] L
---- > 20 [0:0] L
set([1, 4, 5, 6, 9, 16, 20])
  6 [3:-1]
-- < 4 [1:0]
---- < 1 [0:0] L
---- > 5 [0:0] L
-- > 16 [2:-1]
---- < 9 [0:0] L
---- > 20 [1:1]
------ < 18 [0:0] L
set([1, 4, 5, 6, 9, 16, 18, 20])
  6 [3:-1]
-- < 4 [1:0]
---- < 1 [0:0] L
---- > 5 [0:0] L
-- > 16 [2:-1]
---- < 9 [0:0] L
---- > 20 [1:1]
------ < 18 [0:0] L
set([1, 4, 5, 6, 9, 16, 18, 20])
TEST #3 STEP #63 (0:00:30.000647) Fri Apr 28 08:10:37 2017 [ 160 stmts 212 branches ]
  16 [3:1]
-- < 14 [2:1]
---- < 6 [1:-1]
------ > 9 [0:0] L
---- > 15 [0:0] L
-- > 18 [1:-1]
---- > 19 [0:0] L
set([6, 9, 14, 15, 16, 18, 19])
  16 [2:0]
-- < 14 [1:0]
---- < 6 [0:0] L
---- > 15 [0:0] L
-- > 18 [1:-1]
---- > 19 [0:0] L
set([6, 14, 15, 16, 18, 19])
  10 [2:0]
-- < 7 [1:0]
---- < 5 [0:0] L
---- > 9 [0:0] L
-- > 15 [1:1]
---- < 13 [0:0] L
set([5, 7, 9, 10, 13, 15])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10471b2d8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
Original test has 98 steps

SAVING TEST AS failure.1095.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 9                                                                 # STEP 0
ACTION: int0 = 9 
int0 = None : <type 'NoneType'>
=> int0 = 9 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 1
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x1041ab170> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.delete(int0)                                                        # STEP 2
ACTION: avl1.delete(int0) 
int0 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1041ab170> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int3 = 13                                                                # STEP 3
ACTION: int3 = 13 
int3 = None : <type 'NoneType'>
=> int3 = 13 : <type 'int'>
==================================================
result = avl1.inorder()                                                  # STEP 4
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1041ab170> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int0)                                                        # STEP 5
ACTION: avl1.insert(int0) 
int0 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1041ab170> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([9]) : <type 'set'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 6
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x10471bea8> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl1.delete(int0)                                                        # STEP 7
ACTION: avl1.delete(int0) 
int0 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1041ab170> : <type 'instance'>
avl_REF1 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl0.delete(int0)                                                        # STEP 8
ACTION: avl0.delete(int0) 
int0 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10471bea8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int1 = 18                                                                # STEP 9
ACTION: int1 = 18 
int1 = None : <type 'NoneType'>
=> int1 = 18 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 10
ACTION: avl1.insert(int3) 
int3 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1041ab170> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([13]) : <type 'set'>
==================================================
int3 = 9                                                                # STEP 11
ACTION: int3 = 9 
int3 = 13 : <type 'int'>
=> int3 = 9 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 12
ACTION: avl0.delete(int0) 
int0 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10471bea8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.insert(int3)                                                       # STEP 13
ACTION: avl0.insert(int3) 
int3 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10471bea8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([9]) : <type 'set'>
==================================================
int2 = 10                                                               # STEP 14
ACTION: int2 = 10 
int2 = None : <type 'NoneType'>
=> int2 = 10 : <type 'int'>
==================================================
int3 = 11                                                               # STEP 15
ACTION: int3 = 11 
int3 = 9 : <type 'int'>
=> int3 = 11 : <type 'int'>
==================================================
int0 = 15                                                               # STEP 16
ACTION: int0 = 15 
int0 = 9 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 17
ACTION: avl0.delete(int0) 
int0 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10471bea8> : <type 'instance'>
avl_REF0 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int0 = 3                                                                # STEP 18
ACTION: int0 = 3 
int0 = 15 : <type 'int'>
=> int0 = 3 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 19
ACTION: avl1.delete(int2) 
int2 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1041ab170> : <type 'instance'>
avl_REF1 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
result = avl0.inorder()                                                 # STEP 20
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x10471bea8> : <type 'instance'>
avl_REF0 = set([9]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl1.delete(int0)                                                       # STEP 21
ACTION: avl1.delete(int0) 
int0 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1041ab170> : <type 'instance'>
avl_REF1 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.delete(int2)                                                       # STEP 22
ACTION: avl1.delete(int2) 
int2 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1041ab170> : <type 'instance'>
avl_REF1 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int0 = 9                                                                # STEP 23
ACTION: int0 = 9 
int0 = 3 : <type 'int'>
=> int0 = 9 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 24
ACTION: avl1.delete(int1) 
int1 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1041ab170> : <type 'instance'>
avl_REF1 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.delete(int3)                                                       # STEP 25
ACTION: avl1.delete(int3) 
int3 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1041ab170> : <type 'instance'>
avl_REF1 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl0.insert(int2)                                                       # STEP 26
ACTION: avl0.insert(int2) 
int2 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10471bea8> : <type 'instance'>
avl_REF0 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([9, 10]) : <type 'set'>
==================================================
int2 = 15                                                               # STEP 27
ACTION: int2 = 15 
int2 = 10 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
int3 = 14                                                               # STEP 28
ACTION: int3 = 14 
int3 = 11 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 29
ACTION: avl1.insert(int1) 
int1 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1041ab170> : <type 'instance'>
avl_REF1 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([18, 13]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 30
ACTION: avl0.delete(int1) 
int1 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10471bea8> : <type 'instance'>
avl_REF0 = set([9, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl1.delete(int2)                                                       # STEP 31
ACTION: avl1.delete(int2) 
int2 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1041ab170> : <type 'instance'>
avl_REF1 = set([18, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int1 = 13                                                               # STEP 32
ACTION: int1 = 13 
int1 = 18 : <type 'int'>
=> int1 = 13 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 33
ACTION: avl0.delete(int1) 
int1 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10471bea8> : <type 'instance'>
avl_REF0 = set([9, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
result = avl1.inorder()                                                 # STEP 34
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1041ab170> : <type 'instance'>
avl_REF1 = set([18, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl0.insert(int1)                                                       # STEP 35
ACTION: avl0.insert(int1) 
int1 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10471bea8> : <type 'instance'>
avl_REF0 = set([9, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([9, 10, 13]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 36
ACTION: avl1.delete(int1) 
int1 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1041ab170> : <type 'instance'>
avl_REF1 = set([18, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([18]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 37
ACTION: avl0.insert(int2) 
int2 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10471bea8> : <type 'instance'>
avl_REF0 = set([9, 10, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([9, 10, 13, 15]) : <type 'set'>
==================================================
result = avl0.find(int2)                                                # STEP 38
ACTION: result = avl0.find(int2) 
int2 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10471bea8> : <type 'instance'>
avl_REF0 = set([9, 10, 13, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
result = avl1.find(int3)                                                # STEP 39
ACTION: result = avl1.find(int3) 
int3 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1041ab170> : <type 'instance'>
avl_REF1 = set([18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
int2 = 2                                                                # STEP 40
ACTION: int2 = 2 
int2 = 15 : <type 'int'>
=> int2 = 2 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 41
ACTION: avl0.insert(int2) 
int2 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10471bea8> : <type 'instance'>
avl_REF0 = set([9, 10, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([9, 10, 2, 13, 15]) : <type 'set'>
==================================================
int3 = 5                                                                # STEP 42
ACTION: int3 = 5 
int3 = 14 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 43
ACTION: avl0.delete(int1) 
int1 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10471bea8> : <type 'instance'>
avl_REF0 = set([9, 10, 2, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([9, 10, 2, 15]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 44
ACTION: avl0.delete(int2) 
int2 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10471bea8> : <type 'instance'>
avl_REF0 = set([9, 10, 2, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([9, 10, 15]) : <type 'set'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 45
ACTION: avl1 = avl.AVLTree() 
avl1 = <avl.AVLTree instance at 0x1041ab170> : <type 'instance'>
avl_REF1 = set([18]) : <type 'set'>
=> avl1 = <avl.AVLTree instance at 0x10472d638> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 46
ACTION: avl1.delete(int1) 
int1 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10472d638> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl0.insert(int1)                                                       # STEP 47
ACTION: avl0.insert(int1) 
int1 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10471bea8> : <type 'instance'>
avl_REF0 = set([9, 10, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([9, 10, 13, 15]) : <type 'set'>
==================================================
int2 = 7                                                                # STEP 48
ACTION: int2 = 7 
int2 = 2 : <type 'int'>
=> int2 = 7 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 49
ACTION: avl1.delete(int3) 
int3 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10472d638> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl0.insert(int2)                                                       # STEP 50
ACTION: avl0.insert(int2) 
int2 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10471bea8> : <type 'instance'>
avl_REF0 = set([9, 10, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([9, 10, 7, 13, 15]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 51
ACTION: avl1.delete(int0) 
int0 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10472d638> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.insert(int3)                                                       # STEP 52
ACTION: avl1.insert(int3) 
int3 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10472d638> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([5]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 53
ACTION: avl1.delete(int0) 
int0 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10472d638> : <type 'instance'>
avl_REF1 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
result = avl1.inorder()                                                 # STEP 54
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x10472d638> : <type 'instance'>
avl_REF1 = set([5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl0.delete(int1)                                                       # STEP 55
ACTION: avl0.delete(int1) 
int1 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10471bea8> : <type 'instance'>
avl_REF0 = set([9, 10, 7, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([9, 10, 7, 15]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 56
ACTION: avl0.delete(int1) 
int1 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10471bea8> : <type 'instance'>
avl_REF0 = set([9, 10, 7, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl1 = avl.AVLTree()                                                    # STEP 57
ACTION: avl1 = avl.AVLTree() 
avl1 = <avl.AVLTree instance at 0x10472d638> : <type 'instance'>
avl_REF1 = set([5]) : <type 'set'>
=> avl1 = <avl.AVLTree instance at 0x10432d638> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 58
ACTION: avl0.insert(int3) 
int3 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10471bea8> : <type 'instance'>
avl_REF0 = set([9, 10, 7, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([9, 10, 7, 5, 15]) : <type 'set'>
==================================================
avl0 == avl1                                                            # STEP 59
ACTION: avl0 == avl1 
avl0 = <avl.AVLTree instance at 0x10471bea8> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x10432d638> : <type 'instance'>
avl_REF0 = set([9, 10, 7, 5, 15]) : <type 'set'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF1 
==================================================
result = avl0.find(int3)                                                # STEP 60
ACTION: result = avl0.find(int3) 
int3 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10471bea8> : <type 'instance'>
avl_REF0 = set([9, 10, 7, 5, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
result = avl1.find(int1)                                                # STEP 61
ACTION: result = avl1.find(int1) 
int1 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10432d638> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl0.insert(int1)                                                       # STEP 62
ACTION: avl0.insert(int1) 
int1 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10471bea8> : <type 'instance'>
avl_REF0 = set([9, 10, 7, 5, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([5, 7, 9, 10, 13, 15]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 63
ACTION: avl1.delete(int2) 
int2 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10432d638> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.insert(int2)                                                       # STEP 64
ACTION: avl1.insert(int2) 
int2 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10432d638> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([7]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 65
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x10471bea8> : <type 'instance'>
avl_REF0 = set([5, 7, 9, 10, 13, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int0)                                                       # STEP 66
ACTION: avl0.insert(int0) 
int0 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10471bea8> : <type 'instance'>
avl_REF0 = set([5, 7, 9, 10, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
int2 = 6                                                                # STEP 67
ACTION: int2 = 6 
int2 = 7 : <type 'int'>
=> int2 = 6 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 68
ACTION: avl1.delete(int3) 
int3 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10432d638> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl0.display()                                                          # STEP 69
ACTION: avl0.display() 
avl0 = <avl.AVLTree instance at 0x10471bea8> : <type 'instance'>
avl_REF0 = set([5, 7, 9, 10, 13, 15]) : <type 'set'>
  10 [2:0]
-- < 7 [1:0]
---- < 5 [0:0] L
---- > 9 [0:0] L
-- > 15 [1:1]
---- < 13 [0:0] L
REFERENCE ACTION: print(avl_REF0) 
set([5, 7, 9, 10, 13, 15])
==================================================
avl0.delete(int0)                                                       # STEP 70
ACTION: avl0.delete(int0) 
int0 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10471bea8> : <type 'instance'>
avl_REF0 = set([5, 7, 9, 10, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([5, 7, 10, 13, 15]) : <type 'set'>
==================================================
int1 = 12                                                               # STEP 71
ACTION: int1 = 12 
int1 = 13 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
int0 = 10                                                               # STEP 72
ACTION: int0 = 10 
int0 = 9 : <type 'int'>
=> int0 = 10 : <type 'int'>
==================================================
int3 = 7                                                                # STEP 73
ACTION: int3 = 7 
int3 = 5 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 74
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x10432d638> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
result = avl0.find(int1)                                                # STEP 75
ACTION: result = avl0.find(int1) 
int1 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10471bea8> : <type 'instance'>
avl_REF0 = set([5, 7, 10, 13, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
int1 = 20                                                               # STEP 76
ACTION: int1 = 20 
int1 = 12 : <type 'int'>
=> int1 = 20 : <type 'int'>
==================================================
result = avl1.find(int3)                                                # STEP 77
ACTION: result = avl1.find(int3) 
int3 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10432d638> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl0.delete(int3)                                                       # STEP 78
ACTION: avl0.delete(int3) 
int3 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10471bea8> : <type 'instance'>
avl_REF0 = set([5, 7, 10, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([5, 10, 13, 15]) : <type 'set'>
==================================================
int3 = 12                                                               # STEP 79
ACTION: int3 = 12 
int3 = 7 : <type 'int'>
=> int3 = 12 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 80
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x10471bea8> : <type 'instance'>
avl_REF0 = set([5, 10, 13, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
result = avl1.find(int3)                                                # STEP 81
ACTION: result = avl1.find(int3) 
int3 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10432d638> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl0.insert(int3)                                                       # STEP 82
ACTION: avl0.insert(int3) 
int3 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10471bea8> : <type 'instance'>
avl_REF0 = set([5, 10, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([5, 10, 12, 13, 15]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 83
ACTION: avl1.insert(int1) 
int1 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10432d638> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([20, 7]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 84
ACTION: avl1.insert(int0) 
int0 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10432d638> : <type 'instance'>
avl_REF1 = set([20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([10, 20, 7]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 85
ACTION: avl0.delete(int0) 
int0 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10471bea8> : <type 'instance'>
avl_REF0 = set([5, 10, 12, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([5, 12, 13, 15]) : <type 'set'>
==================================================
int0 = 17                                                               # STEP 86
ACTION: int0 = 17 
int0 = 10 : <type 'int'>
=> int0 = 17 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 87
ACTION: avl0.delete(int2) 
int2 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10471bea8> : <type 'instance'>
avl_REF0 = set([5, 12, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl1.delete(int2)                                                       # STEP 88
ACTION: avl1.delete(int2) 
int2 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10432d638> : <type 'instance'>
avl_REF1 = set([10, 20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
result = avl0.inorder()                                                 # STEP 89
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x10471bea8> : <type 'instance'>
avl_REF0 = set([5, 12, 13, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl1.delete(int3)                                                       # STEP 90
ACTION: avl1.delete(int3) 
int3 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10432d638> : <type 'instance'>
avl_REF1 = set([10, 20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int2 = 19                                                               # STEP 91
ACTION: int2 = 19 
int2 = 6 : <type 'int'>
=> int2 = 19 : <type 'int'>
==================================================
result = avl1.find(int2)                                                # STEP 92
ACTION: result = avl1.find(int2) 
int2 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10432d638> : <type 'instance'>
avl_REF1 = set([10, 20, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl1.insert(int0)                                                       # STEP 93
ACTION: avl1.insert(int0) 
int0 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10432d638> : <type 'instance'>
avl_REF1 = set([10, 20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([17, 10, 20, 7]) : <type 'set'>
==================================================
int3 = 4                                                                # STEP 94
ACTION: int3 = 4 
int3 = 12 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
int0 = 5                                                                # STEP 95
ACTION: int0 = 5 
int0 = 17 : <type 'int'>
=> int0 = 5 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 96
ACTION: avl0.insert(int0) 
int0 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10471bea8> : <type 'instance'>
avl_REF0 = set([5, 12, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
avl0.delete(int0)                                                       # STEP 97
ACTION: avl0.delete(int0) 
int0 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10471bea8> : <type 'instance'>
avl_REF0 = set([5, 12, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([12, 13, 15]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10476c098>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 24
STOPPING TESTING DUE TO TIMEOUT
8.51713607058 PERCENT COVERED
60.1599440575 TOTAL RUNTIME
6 EXECUTED
507 TOTAL TEST OPERATIONS
22.0794363022 TIME SPENT EXECUTING TEST OPERATIONS
0.0532376766205 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
22.1736829281 TIME SPENT CHECKING PROPERTIES
44.2531192303 TOTAL TIME SPENT RUNNING SUT
0.00376486778259 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
2 FAILED
0 REPEATS OF FAILURES
2 ACTUAL DISTINCT FAILURES

FAILURE 0
int0 = 10                                                                # STEP 0
int1 = 1                                                                 # STEP 1
int3 = 16                                                                # STEP 2
avl2 = avl.AVLTree()                                                     # STEP 3
int2 = 7                                                                 # STEP 4
avl2.insert(int1)                                                        # STEP 5
avl2.insert(int1)                                                        # STEP 6
avl2.delete(int2)                                                        # STEP 7
int2 = 1                                                                 # STEP 8
avl2.insert(int3)                                                        # STEP 9
avl2.delete(int2)                                                       # STEP 10
result = avl2.find(int3)                                                # STEP 11
avl2.insert(int3)                                                       # STEP 12
avl2.insert(int0)                                                       # STEP 13
result = avl2.find(int3)                                                # STEP 14
avl2.insert(int1)                                                       # STEP 15
int2 = 8                                                                # STEP 16
avl2 == avl2                                                            # STEP 17
avl2.insert(int3)                                                       # STEP 18
int3 = 5                                                                # STEP 19
avl2.insert(int3)                                                       # STEP 20
int3 = 14                                                               # STEP 21
avl2.delete(int1)                                                       # STEP 22
avl2.insert(int3)                                                       # STEP 23
avl2.delete(int1)                                                       # STEP 24
avl2.delete(int3)                                                       # STEP 25
result = avl2.inorder()                                                 # STEP 26
avl2 == avl2                                                            # STEP 27
int0 = 10                                                               # STEP 28
avl2.delete(int3)                                                       # STEP 29
avl2.delete(int1)                                                       # STEP 30
result = avl2.inorder()                                                 # STEP 31
avl2.delete(int0)                                                       # STEP 32
avl2 == avl2                                                            # STEP 33
avl2.insert(int1)                                                       # STEP 34
result = avl2.inorder()                                                 # STEP 35
int3 = 16                                                               # STEP 36
avl2.insert(int3)                                                       # STEP 37
avl2.insert(int3)                                                       # STEP 38
avl2.delete(int3)                                                       # STEP 39
avl2.delete(int1)                                                       # STEP 40
avl2.delete(int2)                                                       # STEP 41
avl2.delete(int1)                                                       # STEP 42
int1 = 4                                                                # STEP 43
int2 = 20                                                               # STEP 44
int0 = 17                                                               # STEP 45
avl1 = avl.AVLTree()                                                    # STEP 46
avl1.insert(int1)                                                       # STEP 47
int1 = 4                                                                # STEP 48
avl1.insert(int2)                                                       # STEP 49
avl1.insert(int2)                                                       # STEP 50
avl2.delete(int0)                                                       # STEP 51
avl1.delete(int2)                                                       # STEP 52
avl2.delete(int2)                                                       # STEP 53
result = avl2.find(int1)                                                # STEP 54
avl2.delete(int1)                                                       # STEP 55
result = avl2.inorder()                                                 # STEP 56
avl2.delete(int2)                                                       # STEP 57
avl2.delete(int3)                                                       # STEP 58
avl2.delete(int0)                                                       # STEP 59
avl2.delete(int2)                                                       # STEP 60
int1 = 4                                                                # STEP 61
avl2.insert(int1)                                                       # STEP 62
avl1 == avl1                                                            # STEP 63
avl2.delete(int0)                                                       # STEP 64
avl1.delete(int2)                                                       # STEP 65
result = avl1.inorder()                                                 # STEP 66
avl1.insert(int1)                                                       # STEP 67
avl1.delete(int2)                                                       # STEP 68
result = avl2.inorder()                                                 # STEP 69
avl2.insert(int1)                                                       # STEP 70
int2 = 9                                                                # STEP 71
avl2.insert(int0)                                                       # STEP 72
avl1.insert(int1)                                                       # STEP 73
int1 = 12                                                               # STEP 74
avl2.insert(int3)                                                       # STEP 75
result = avl2.find(int2)                                                # STEP 76
result = avl1.inorder()                                                 # STEP 77
avl2.insert(int3)                                                       # STEP 78
avl1.insert(int0)                                                       # STEP 79
int0 = 6                                                                # STEP 80
int3 = 4                                                                # STEP 81
int2 = 20                                                               # STEP 82
avl1.delete(int1)                                                       # STEP 83
avl2.delete(int3)                                                       # STEP 84
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10458a5f0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE 1
int0 = 9                                                                 # STEP 0
avl1 = avl.AVLTree()                                                     # STEP 1
avl1.delete(int0)                                                        # STEP 2
int3 = 13                                                                # STEP 3
result = avl1.inorder()                                                  # STEP 4
avl1.insert(int0)                                                        # STEP 5
avl0 = avl.AVLTree()                                                     # STEP 6
avl1.delete(int0)                                                        # STEP 7
avl0.delete(int0)                                                        # STEP 8
int1 = 18                                                                # STEP 9
avl1.insert(int3)                                                       # STEP 10
int3 = 9                                                                # STEP 11
avl0.delete(int0)                                                       # STEP 12
avl0.insert(int3)                                                       # STEP 13
int2 = 10                                                               # STEP 14
int3 = 11                                                               # STEP 15
int0 = 15                                                               # STEP 16
avl0.delete(int0)                                                       # STEP 17
int0 = 3                                                                # STEP 18
avl1.delete(int2)                                                       # STEP 19
result = avl0.inorder()                                                 # STEP 20
avl1.delete(int0)                                                       # STEP 21
avl1.delete(int2)                                                       # STEP 22
int0 = 9                                                                # STEP 23
avl1.delete(int1)                                                       # STEP 24
avl1.delete(int3)                                                       # STEP 25
avl0.insert(int2)                                                       # STEP 26
int2 = 15                                                               # STEP 27
int3 = 14                                                               # STEP 28
avl1.insert(int1)                                                       # STEP 29
avl0.delete(int1)                                                       # STEP 30
avl1.delete(int2)                                                       # STEP 31
int1 = 13                                                               # STEP 32
avl0.delete(int1)                                                       # STEP 33
result = avl1.inorder()                                                 # STEP 34
avl0.insert(int1)                                                       # STEP 35
avl1.delete(int1)                                                       # STEP 36
avl0.insert(int2)                                                       # STEP 37
result = avl0.find(int2)                                                # STEP 38
result = avl1.find(int3)                                                # STEP 39
int2 = 2                                                                # STEP 40
avl0.insert(int2)                                                       # STEP 41
int3 = 5                                                                # STEP 42
avl0.delete(int1)                                                       # STEP 43
avl0.delete(int2)                                                       # STEP 44
avl1 = avl.AVLTree()                                                    # STEP 45
avl1.delete(int1)                                                       # STEP 46
avl0.insert(int1)                                                       # STEP 47
int2 = 7                                                                # STEP 48
avl1.delete(int3)                                                       # STEP 49
avl0.insert(int2)                                                       # STEP 50
avl1.delete(int0)                                                       # STEP 51
avl1.insert(int3)                                                       # STEP 52
avl1.delete(int0)                                                       # STEP 53
result = avl1.inorder()                                                 # STEP 54
avl0.delete(int1)                                                       # STEP 55
avl0.delete(int1)                                                       # STEP 56
avl1 = avl.AVLTree()                                                    # STEP 57
avl0.insert(int3)                                                       # STEP 58
avl0 == avl1                                                            # STEP 59
result = avl0.find(int3)                                                # STEP 60
result = avl1.find(int1)                                                # STEP 61
avl0.insert(int1)                                                       # STEP 62
avl1.delete(int2)                                                       # STEP 63
avl1.insert(int2)                                                       # STEP 64
result = avl0.inorder()                                                 # STEP 65
avl0.insert(int0)                                                       # STEP 66
int2 = 6                                                                # STEP 67
avl1.delete(int3)                                                       # STEP 68
avl0.display()                                                          # STEP 69
avl0.delete(int0)                                                       # STEP 70
int1 = 12                                                               # STEP 71
int0 = 10                                                               # STEP 72
int3 = 7                                                                # STEP 73
result = avl1.inorder()                                                 # STEP 74
result = avl0.find(int1)                                                # STEP 75
int1 = 20                                                               # STEP 76
result = avl1.find(int3)                                                # STEP 77
avl0.delete(int3)                                                       # STEP 78
int3 = 12                                                               # STEP 79
result = avl0.inorder()                                                 # STEP 80
result = avl1.find(int3)                                                # STEP 81
avl0.insert(int3)                                                       # STEP 82
avl1.insert(int1)                                                       # STEP 83
avl1.insert(int0)                                                       # STEP 84
avl0.delete(int0)                                                       # STEP 85
int0 = 17                                                               # STEP 86
avl0.delete(int2)                                                       # STEP 87
avl1.delete(int2)                                                       # STEP 88
result = avl0.inorder()                                                 # STEP 89
avl1.delete(int3)                                                       # STEP 90
int2 = 19                                                               # STEP 91
result = avl1.find(int2)                                                # STEP 92
avl1.insert(int0)                                                       # STEP 93
int3 = 4                                                                # STEP 94
int0 = 5                                                                # STEP 95
avl0.insert(int0)                                                       # STEP 96
avl0.delete(int0)                                                       # STEP 97
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10476c098>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
214 BRANCHES COVERED
161 STATEMENTS COVERED

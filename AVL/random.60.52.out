Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.236.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103b30b90>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 74 steps

SAVING TEST AS failure.236.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 3                                                                 # STEP 0
ACTION: int0 = 3 
int0 = None : <type 'NoneType'>
=> int0 = 3 : <type 'int'>
==================================================
int2 = 15                                                                # STEP 1
ACTION: int2 = 15 
int2 = None : <type 'NoneType'>
=> int2 = 15 : <type 'int'>
==================================================
int3 = 20                                                                # STEP 2
ACTION: int3 = 20 
int3 = None : <type 'NoneType'>
=> int3 = 20 : <type 'int'>
==================================================
int1 = 11                                                                # STEP 3
ACTION: int1 = 11 
int1 = None : <type 'NoneType'>
=> int1 = 11 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x103aa1518> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl2.find(int0)                                                 # STEP 5
ACTION: result = avl2.find(int0) 
int0 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103aa1518> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
int0 = 8                                                                 # STEP 6
ACTION: int0 = 8 
int0 = 3 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
avl2.insert(int3)                                                        # STEP 7
ACTION: avl2.insert(int3) 
int3 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103aa1518> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([20]) : <type 'set'>
==================================================
result = avl2.find(int1)                                                 # STEP 8
ACTION: result = avl2.find(int1) 
int1 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103aa1518> : <type 'instance'>
avl_REF2 = set([20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int3 = 15                                                                # STEP 9
ACTION: int3 = 15 
int3 = 20 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 10
ACTION: avl2.delete(int0) 
int0 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103aa1518> : <type 'instance'>
avl_REF2 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int1 = 19                                                               # STEP 11
ACTION: int1 = 19 
int1 = 11 : <type 'int'>
=> int1 = 19 : <type 'int'>
==================================================
int0 = 7                                                                # STEP 12
ACTION: int0 = 7 
int0 = 8 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 13
ACTION: avl2.insert(int1) 
int1 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103aa1518> : <type 'instance'>
avl_REF2 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([19, 20]) : <type 'set'>
==================================================
int1 = 5                                                                # STEP 14
ACTION: int1 = 5 
int1 = 19 : <type 'int'>
=> int1 = 5 : <type 'int'>
==================================================
result = avl2.find(int2)                                                # STEP 15
ACTION: result = avl2.find(int2) 
int2 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103aa1518> : <type 'instance'>
avl_REF2 = set([19, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int2 = 14                                                               # STEP 16
ACTION: int2 = 14 
int2 = 15 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 17
ACTION: avl2.delete(int0) 
int0 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103aa1518> : <type 'instance'>
avl_REF2 = set([19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.insert(int0)                                                       # STEP 18
ACTION: avl2.insert(int0) 
int0 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103aa1518> : <type 'instance'>
avl_REF2 = set([19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([19, 20, 7]) : <type 'set'>
==================================================
int0 = 14                                                               # STEP 19
ACTION: int0 = 14 
int0 = 7 : <type 'int'>
=> int0 = 14 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 20
ACTION: avl2.delete(int0) 
int0 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103aa1518> : <type 'instance'>
avl_REF2 = set([19, 20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.delete(int1)                                                       # STEP 21
ACTION: avl2.delete(int1) 
int1 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103aa1518> : <type 'instance'>
avl_REF2 = set([19, 20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl1 = avl.AVLTree()                                                    # STEP 22
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x105851680> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 23
ACTION: avl2.delete(int1) 
int1 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103aa1518> : <type 'instance'>
avl_REF2 = set([19, 20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int1 = 4                                                                # STEP 24
ACTION: int1 = 4 
int1 = 5 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
avl2 == avl2                                                            # STEP 25
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x103aa1518> : <type 'instance'>
avl_REF2 = set([19, 20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
int0 = 14                                                               # STEP 26
ACTION: int0 = 14 
int0 = 14 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 27
ACTION: avl2.delete(int2) 
int2 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103aa1518> : <type 'instance'>
avl_REF2 = set([19, 20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.delete(int2)                                                       # STEP 28
ACTION: avl2.delete(int2) 
int2 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103aa1518> : <type 'instance'>
avl_REF2 = set([19, 20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.delete(int2)                                                       # STEP 29
ACTION: avl2.delete(int2) 
int2 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103aa1518> : <type 'instance'>
avl_REF2 = set([19, 20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
result = avl1.find(int3)                                                # STEP 30
ACTION: result = avl1.find(int3) 
int3 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105851680> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
int2 = 4                                                                # STEP 31
ACTION: int2 = 4 
int2 = 14 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
int3 = 2                                                                # STEP 32
ACTION: int3 = 2 
int3 = 15 : <type 'int'>
=> int3 = 2 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 33
ACTION: avl2.delete(int0) 
int0 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103aa1518> : <type 'instance'>
avl_REF2 = set([19, 20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
result = avl2.find(int2)                                                # STEP 34
ACTION: result = avl2.find(int2) 
int2 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103aa1518> : <type 'instance'>
avl_REF2 = set([19, 20, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int0 = 6                                                                # STEP 35
ACTION: int0 = 6 
int0 = 14 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
result = avl2.find(int1)                                                # STEP 36
ACTION: result = avl2.find(int1) 
int1 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103aa1518> : <type 'instance'>
avl_REF2 = set([19, 20, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int2 = 7                                                                # STEP 37
ACTION: int2 = 7 
int2 = 4 : <type 'int'>
=> int2 = 7 : <type 'int'>
==================================================
result = avl2.find(int3)                                                # STEP 38
ACTION: result = avl2.find(int3) 
int3 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103aa1518> : <type 'instance'>
avl_REF2 = set([19, 20, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl2.insert(int1)                                                       # STEP 39
ACTION: avl2.insert(int1) 
int1 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103aa1518> : <type 'instance'>
avl_REF2 = set([19, 20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([4, 19, 20, 7]) : <type 'set'>
==================================================
int1 = 7                                                                # STEP 40
ACTION: int1 = 7 
int1 = 4 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
result = avl1.find(int3)                                                # STEP 41
ACTION: result = avl1.find(int3) 
int3 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105851680> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl2.insert(int0)                                                       # STEP 42
ACTION: avl2.insert(int0) 
int0 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103aa1518> : <type 'instance'>
avl_REF2 = set([4, 19, 20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([4, 19, 20, 6, 7]) : <type 'set'>
==================================================
int0 = 1                                                                # STEP 43
ACTION: int0 = 1 
int0 = 6 : <type 'int'>
=> int0 = 1 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 44
ACTION: avl1.delete(int2) 
int2 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105851680> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1 == avl2                                                            # STEP 45
ACTION: avl1 == avl2 
avl1 = <avl.AVLTree instance at 0x105851680> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x103aa1518> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
avl_REF2 = set([4, 19, 20, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
int3 = 18                                                               # STEP 46
ACTION: int3 = 18 
int3 = 2 : <type 'int'>
=> int3 = 18 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 47
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x105851680> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int2 = 10                                                               # STEP 48
ACTION: int2 = 10 
int2 = 7 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
result = avl2.find(int1)                                                # STEP 49
ACTION: result = avl2.find(int1) 
int1 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103aa1518> : <type 'instance'>
avl_REF2 = set([4, 19, 20, 6, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int1 = 12                                                               # STEP 50
ACTION: int1 = 12 
int1 = 7 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
avl2 == avl2                                                            # STEP 51
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x103aa1518> : <type 'instance'>
avl_REF2 = set([4, 19, 20, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl2.delete(int2)                                                       # STEP 52
ACTION: avl2.delete(int2) 
int2 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103aa1518> : <type 'instance'>
avl_REF2 = set([4, 19, 20, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int2 = 10                                                               # STEP 53
ACTION: int2 = 10 
int2 = 10 : <type 'int'>
==================================================
result = avl1.find(int3)                                                # STEP 54
ACTION: result = avl1.find(int3) 
int3 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105851680> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl1.insert(int0)                                                       # STEP 55
ACTION: avl1.insert(int0) 
int0 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105851680> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([1]) : <type 'set'>
==================================================
int0 = 20                                                               # STEP 56
ACTION: int0 = 20 
int0 = 1 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
avl2 == avl1                                                            # STEP 57
ACTION: avl2 == avl1 
avl2 = <avl.AVLTree instance at 0x103aa1518> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x105851680> : <type 'instance'>
avl_REF2 = set([4, 19, 20, 6, 7]) : <type 'set'>
avl_REF1 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
int3 = 2                                                                # STEP 58
ACTION: int3 = 2 
int3 = 18 : <type 'int'>
=> int3 = 2 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 59
ACTION: avl1 = avl.AVLTree() 
avl1 = <avl.AVLTree instance at 0x105851680> : <type 'instance'>
avl_REF1 = set([1]) : <type 'set'>
=> avl1 = <avl.AVLTree instance at 0x103a66830> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
result = avl2.find(int3)                                                # STEP 60
ACTION: result = avl2.find(int3) 
int3 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103aa1518> : <type 'instance'>
avl_REF2 = set([4, 19, 20, 6, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
result = avl2.find(int1)                                                # STEP 61
ACTION: result = avl2.find(int1) 
int1 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103aa1518> : <type 'instance'>
avl_REF2 = set([4, 19, 20, 6, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
result = avl1.find(int2)                                                # STEP 62
ACTION: result = avl1.find(int2) 
int2 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103a66830> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int2 = 3                                                                # STEP 63
ACTION: int2 = 3 
int2 = 10 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 64
ACTION: avl1.insert(int0) 
int0 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103a66830> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([20]) : <type 'set'>
==================================================
avl1 == avl1                                                            # STEP 65
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x103a66830> : <type 'instance'>
avl_REF1 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.insert(int0)                                                       # STEP 66
ACTION: avl1.insert(int0) 
int0 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103a66830> : <type 'instance'>
avl_REF1 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
int0 = 8                                                                # STEP 67
ACTION: int0 = 8 
int0 = 20 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
int1 = 19                                                               # STEP 68
ACTION: int1 = 19 
int1 = 12 : <type 'int'>
=> int1 = 19 : <type 'int'>
==================================================
int3 = 2                                                                # STEP 69
ACTION: int3 = 2 
int3 = 2 : <type 'int'>
==================================================
avl2 == avl2                                                            # STEP 70
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x103aa1518> : <type 'instance'>
avl_REF2 = set([4, 19, 20, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
result = avl2.find(int0)                                                # STEP 71
ACTION: result = avl2.find(int0) 
int0 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103aa1518> : <type 'instance'>
avl_REF2 = set([4, 19, 20, 6, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
int0 = 1                                                                # STEP 72
ACTION: int0 = 1 
int0 = 8 : <type 'int'>
=> int0 = 1 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 73
ACTION: avl2.delete(int1) 
int1 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103aa1518> : <type 'instance'>
avl_REF2 = set([4, 19, 20, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([4, 20, 6, 7]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103aa9d40>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #4 STEP #25 (0:00:30.046362) Fri Apr 28 05:50:58 2017 [ 148 stmts 195 branches ]
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 8
STOPPING TESTING DUE TO TIMEOUT
7.90634543604 PERCENT COVERED
60.2147409916 TOTAL RUNTIME
8 EXECUTED
682 TOTAL TEST OPERATIONS
27.0390169621 TIME SPENT EXECUTING TEST OPERATIONS
0.0228681564331 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
27.16816926 TIME SPENT CHECKING PROPERTIES
54.2071862221 TOTAL TIME SPENT RUNNING SUT
0.00458431243896 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int0 = 3                                                                 # STEP 0
int2 = 15                                                                # STEP 1
int3 = 20                                                                # STEP 2
int1 = 11                                                                # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
result = avl2.find(int0)                                                 # STEP 5
int0 = 8                                                                 # STEP 6
avl2.insert(int3)                                                        # STEP 7
result = avl2.find(int1)                                                 # STEP 8
int3 = 15                                                                # STEP 9
avl2.delete(int0)                                                       # STEP 10
int1 = 19                                                               # STEP 11
int0 = 7                                                                # STEP 12
avl2.insert(int1)                                                       # STEP 13
int1 = 5                                                                # STEP 14
result = avl2.find(int2)                                                # STEP 15
int2 = 14                                                               # STEP 16
avl2.delete(int0)                                                       # STEP 17
avl2.insert(int0)                                                       # STEP 18
int0 = 14                                                               # STEP 19
avl2.delete(int0)                                                       # STEP 20
avl2.delete(int1)                                                       # STEP 21
avl1 = avl.AVLTree()                                                    # STEP 22
avl2.delete(int1)                                                       # STEP 23
int1 = 4                                                                # STEP 24
avl2 == avl2                                                            # STEP 25
int0 = 14                                                               # STEP 26
avl2.delete(int2)                                                       # STEP 27
avl2.delete(int2)                                                       # STEP 28
avl2.delete(int2)                                                       # STEP 29
result = avl1.find(int3)                                                # STEP 30
int2 = 4                                                                # STEP 31
int3 = 2                                                                # STEP 32
avl2.delete(int0)                                                       # STEP 33
result = avl2.find(int2)                                                # STEP 34
int0 = 6                                                                # STEP 35
result = avl2.find(int1)                                                # STEP 36
int2 = 7                                                                # STEP 37
result = avl2.find(int3)                                                # STEP 38
avl2.insert(int1)                                                       # STEP 39
int1 = 7                                                                # STEP 40
result = avl1.find(int3)                                                # STEP 41
avl2.insert(int0)                                                       # STEP 42
int0 = 1                                                                # STEP 43
avl1.delete(int2)                                                       # STEP 44
avl1 == avl2                                                            # STEP 45
int3 = 18                                                               # STEP 46
result = avl1.inorder()                                                 # STEP 47
int2 = 10                                                               # STEP 48
result = avl2.find(int1)                                                # STEP 49
int1 = 12                                                               # STEP 50
avl2 == avl2                                                            # STEP 51
avl2.delete(int2)                                                       # STEP 52
int2 = 10                                                               # STEP 53
result = avl1.find(int3)                                                # STEP 54
avl1.insert(int0)                                                       # STEP 55
int0 = 20                                                               # STEP 56
avl2 == avl1                                                            # STEP 57
int3 = 2                                                                # STEP 58
avl1 = avl.AVLTree()                                                    # STEP 59
result = avl2.find(int3)                                                # STEP 60
result = avl2.find(int1)                                                # STEP 61
result = avl1.find(int2)                                                # STEP 62
int2 = 3                                                                # STEP 63
avl1.insert(int0)                                                       # STEP 64
avl1 == avl1                                                            # STEP 65
avl1.insert(int0)                                                       # STEP 66
int0 = 8                                                                # STEP 67
int1 = 19                                                               # STEP 68
int3 = 2                                                                # STEP 69
avl2 == avl2                                                            # STEP 70
result = avl2.find(int0)                                                # STEP 71
int0 = 1                                                                # STEP 72
avl2.delete(int1)                                                       # STEP 73
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103aa9d40>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
198 BRANCHES COVERED
149 STATEMENTS COVERED

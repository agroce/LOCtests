Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.609.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104c91710>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 67 steps

SAVING TEST AS failure.609.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 3                                                                 # STEP 0
ACTION: int2 = 3 
int2 = None : <type 'NoneType'>
=> int2 = 3 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 1
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x104c69560> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.insert(int2)                                                        # STEP 2
ACTION: avl1.insert(int2) 
int2 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c69560> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([3]) : <type 'set'>
==================================================
avl1.insert(int2)                                                        # STEP 3
ACTION: avl1.insert(int2) 
int2 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c69560> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
int2 = 1                                                                 # STEP 4
ACTION: int2 = 1 
int2 = 3 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
avl1.insert(int2)                                                        # STEP 5
ACTION: avl1.insert(int2) 
int2 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c69560> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([1, 3]) : <type 'set'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 6
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x104d1b4d0> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl2.inorder()                                                  # STEP 7
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104d1b4d0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl1.inorder()                                                  # STEP 8
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104c69560> : <type 'instance'>
avl_REF1 = set([1, 3]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl2.delete(int2)                                                        # STEP 9
ACTION: avl2.delete(int2) 
int2 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104d1b4d0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.delete(int2)                                                       # STEP 10
ACTION: avl2.delete(int2) 
int2 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104d1b4d0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.insert(int2)                                                       # STEP 11
ACTION: avl2.insert(int2) 
int2 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104d1b4d0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([1]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 12
ACTION: avl2.insert(int2) 
int2 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104d1b4d0> : <type 'instance'>
avl_REF2 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
result = avl1.find(int2)                                                # STEP 13
ACTION: result = avl1.find(int2) 
int2 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c69560> : <type 'instance'>
avl_REF1 = set([1, 3]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl1.insert(int2)                                                       # STEP 14
ACTION: avl1.insert(int2) 
int2 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c69560> : <type 'instance'>
avl_REF1 = set([1, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
avl2.insert(int2)                                                       # STEP 15
ACTION: avl2.insert(int2) 
int2 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104d1b4d0> : <type 'instance'>
avl_REF2 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
int3 = 16                                                               # STEP 16
ACTION: int3 = 16 
int3 = None : <type 'NoneType'>
=> int3 = 16 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 17
ACTION: avl1.insert(int2) 
int2 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c69560> : <type 'instance'>
avl_REF1 = set([1, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
avl1.delete(int2)                                                       # STEP 18
ACTION: avl1.delete(int2) 
int2 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c69560> : <type 'instance'>
avl_REF1 = set([1, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([3]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 19
ACTION: avl1.delete(int2) 
int2 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c69560> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl2.delete(int2)                                                       # STEP 20
ACTION: avl2.delete(int2) 
int2 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104d1b4d0> : <type 'instance'>
avl_REF2 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 21
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104d1b4d0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int2)                                                       # STEP 22
ACTION: avl2.delete(int2) 
int2 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104d1b4d0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
result = avl2.inorder()                                                 # STEP 23
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104d1b4d0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int3)                                                       # STEP 24
ACTION: avl2.delete(int3) 
int3 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104d1b4d0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int3 = 13                                                               # STEP 25
ACTION: int3 = 13 
int3 = 16 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 26
ACTION: avl2.insert(int2) 
int2 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104d1b4d0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([1]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 27
ACTION: avl2.insert(int2) 
int2 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104d1b4d0> : <type 'instance'>
avl_REF2 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl2.delete(int2)                                                       # STEP 28
ACTION: avl2.delete(int2) 
int2 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104d1b4d0> : <type 'instance'>
avl_REF2 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 29
ACTION: avl2.delete(int2) 
int2 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104d1b4d0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int0 = 13                                                               # STEP 30
ACTION: int0 = 13 
int0 = None : <type 'NoneType'>
=> int0 = 13 : <type 'int'>
==================================================
result = avl2.find(int0)                                                # STEP 31
ACTION: result = avl2.find(int0) 
int0 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104d1b4d0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
int1 = 4                                                                # STEP 32
ACTION: int1 = 4 
int1 = None : <type 'NoneType'>
=> int1 = 4 : <type 'int'>
==================================================
int2 = 9                                                                # STEP 33
ACTION: int2 = 9 
int2 = 1 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 34
ACTION: avl1.insert(int0) 
int0 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c69560> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([3, 13]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 35
ACTION: avl1.insert(int0) 
int0 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c69560> : <type 'instance'>
avl_REF1 = set([3, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl2.delete(int2)                                                       # STEP 36
ACTION: avl2.delete(int2) 
int2 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104d1b4d0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.insert(int0)                                                       # STEP 37
ACTION: avl2.insert(int0) 
int0 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104d1b4d0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([13]) : <type 'set'>
==================================================
result = avl2.find(int0)                                                # STEP 38
ACTION: result = avl2.find(int0) 
int0 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104d1b4d0> : <type 'instance'>
avl_REF2 = set([13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
result = avl1.inorder()                                                 # STEP 39
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104c69560> : <type 'instance'>
avl_REF1 = set([3, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int2)                                                       # STEP 40
ACTION: avl1.insert(int2) 
int2 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c69560> : <type 'instance'>
avl_REF1 = set([3, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([9, 3, 13]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 41
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104d1b4d0> : <type 'instance'>
avl_REF2 = set([13]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl1.insert(int1)                                                       # STEP 42
ACTION: avl1.insert(int1) 
int1 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c69560> : <type 'instance'>
avl_REF1 = set([9, 3, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([9, 3, 4, 13]) : <type 'set'>
==================================================
int1 = 1                                                                # STEP 43
ACTION: int1 = 1 
int1 = 4 : <type 'int'>
=> int1 = 1 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 44
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104d1b4d0> : <type 'instance'>
avl_REF2 = set([13]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int1)                                                       # STEP 45
ACTION: avl2.delete(int1) 
int1 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104d1b4d0> : <type 'instance'>
avl_REF2 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int3)                                                       # STEP 46
ACTION: avl2.insert(int3) 
int3 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104d1b4d0> : <type 'instance'>
avl_REF2 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
int1 = 15                                                               # STEP 47
ACTION: int1 = 15 
int1 = 1 : <type 'int'>
=> int1 = 15 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 48
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x104cb3200> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 49
ACTION: avl1.insert(int0) 
int0 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c69560> : <type 'instance'>
avl_REF1 = set([9, 3, 4, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
int3 = 20                                                               # STEP 50
ACTION: int3 = 20 
int3 = 13 : <type 'int'>
=> int3 = 20 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 51
ACTION: avl2.insert(int3) 
int3 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104d1b4d0> : <type 'instance'>
avl_REF2 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([20, 13]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 52
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104d1b4d0> : <type 'instance'>
avl_REF2 = set([20, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl1.insert(int2)                                                       # STEP 53
ACTION: avl1.insert(int2) 
int2 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c69560> : <type 'instance'>
avl_REF1 = set([9, 3, 4, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
avl2.insert(int0)                                                       # STEP 54
ACTION: avl2.insert(int0) 
int0 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104d1b4d0> : <type 'instance'>
avl_REF2 = set([20, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl2.insert(int2)                                                       # STEP 55
ACTION: avl2.insert(int2) 
int2 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104d1b4d0> : <type 'instance'>
avl_REF2 = set([20, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([9, 20, 13]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 56
ACTION: avl2.delete(int3) 
int3 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104d1b4d0> : <type 'instance'>
avl_REF2 = set([9, 20, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([9, 13]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 57
ACTION: avl2.insert(int3) 
int3 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104d1b4d0> : <type 'instance'>
avl_REF2 = set([9, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([9, 20, 13]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 58
ACTION: avl0.insert(int2) 
int2 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104cb3200> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([9]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 59
ACTION: avl2.delete(int1) 
int1 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104d1b4d0> : <type 'instance'>
avl_REF2 = set([9, 20, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2 == avl1                                                            # STEP 60
ACTION: avl2 == avl1 
avl2 = <avl.AVLTree instance at 0x104d1b4d0> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x104c69560> : <type 'instance'>
avl_REF2 = set([9, 20, 13]) : <type 'set'>
avl_REF1 = set([9, 3, 4, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
avl2.delete(int2)                                                       # STEP 61
ACTION: avl2.delete(int2) 
int2 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104d1b4d0> : <type 'instance'>
avl_REF2 = set([9, 20, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([20, 13]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 62
ACTION: avl2.delete(int0) 
int0 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104d1b4d0> : <type 'instance'>
avl_REF2 = set([20, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([20]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 63
ACTION: avl0.delete(int0) 
int0 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104cb3200> : <type 'instance'>
avl_REF0 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
result = avl0.inorder()                                                 # STEP 64
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104cb3200> : <type 'instance'>
avl_REF0 = set([9]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int3)                                                       # STEP 65
ACTION: avl0.insert(int3) 
int3 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104cb3200> : <type 'instance'>
avl_REF0 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([9, 20]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 66
ACTION: avl1.delete(int0) 
int0 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c69560> : <type 'instance'>
avl_REF1 = set([9, 3, 4, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([9, 3, 4]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104999950>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104974cb0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 50 steps

SAVING TEST AS failure.609.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
avl2 = avl.AVLTree()                                                     # STEP 0
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x104963998> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int2 = 11                                                                # STEP 1
ACTION: int2 = 11 
int2 = None : <type 'NoneType'>
=> int2 = 11 : <type 'int'>
==================================================
avl2 == avl2                                                             # STEP 2
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x104963998> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl2.insert(int2)                                                        # STEP 3
ACTION: avl2.insert(int2) 
int2 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104963998> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([11]) : <type 'set'>
==================================================
result = avl2.find(int2)                                                 # STEP 4
ACTION: result = avl2.find(int2) 
int2 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104963998> : <type 'instance'>
avl_REF2 = set([11]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl2.insert(int2)                                                        # STEP 5
ACTION: avl2.insert(int2) 
int2 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104963998> : <type 'instance'>
avl_REF2 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl2.delete(int2)                                                        # STEP 6
ACTION: avl2.delete(int2) 
int2 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104963998> : <type 'instance'>
avl_REF2 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl2.inorder()                                                  # STEP 7
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104963998> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl2.find(int2)                                                 # STEP 8
ACTION: result = avl2.find(int2) 
int2 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104963998> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int3 = 17                                                                # STEP 9
ACTION: int3 = 17 
int3 = None : <type 'NoneType'>
=> int3 = 17 : <type 'int'>
==================================================
result = avl2.find(int3)                                                # STEP 10
ACTION: result = avl2.find(int3) 
int3 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104963998> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl2.insert(int3)                                                       # STEP 11
ACTION: avl2.insert(int3) 
int3 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104963998> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([17]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 12
ACTION: avl2.delete(int3) 
int3 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104963998> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 13
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104963998> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int3)                                                       # STEP 14
ACTION: avl2.insert(int3) 
int3 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104963998> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([17]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 15
ACTION: avl2.delete(int2) 
int2 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104963998> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int3 = 17                                                               # STEP 16
ACTION: int3 = 17 
int3 = 17 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 17
ACTION: avl2.delete(int2) 
int2 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104963998> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.insert(int2)                                                       # STEP 18
ACTION: avl2.insert(int2) 
int2 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104963998> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([17, 11]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 19
ACTION: avl2.delete(int2) 
int2 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104963998> : <type 'instance'>
avl_REF2 = set([17, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([17]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 20
ACTION: avl2.delete(int2) 
int2 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104963998> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
result = avl2.inorder()                                                 # STEP 21
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104963998> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int0 = 5                                                                # STEP 22
ACTION: int0 = 5 
int0 = None : <type 'NoneType'>
=> int0 = 5 : <type 'int'>
==================================================
result = avl2.find(int3)                                                # STEP 23
ACTION: result = avl2.find(int3) 
int3 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104963998> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl2.insert(int2)                                                       # STEP 24
ACTION: avl2.insert(int2) 
int2 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104963998> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([17, 11]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 25
ACTION: avl2.delete(int2) 
int2 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104963998> : <type 'instance'>
avl_REF2 = set([17, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([17]) : <type 'set'>
==================================================
int2 = 20                                                               # STEP 26
ACTION: int2 = 20 
int2 = 11 : <type 'int'>
=> int2 = 20 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 27
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104963998> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int3 = 7                                                                # STEP 28
ACTION: int3 = 7 
int3 = 17 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 29
ACTION: avl2.insert(int0) 
int0 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104963998> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([17, 5]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 30
ACTION: avl2.insert(int0) 
int0 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104963998> : <type 'instance'>
avl_REF2 = set([17, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl2.delete(int3)                                                       # STEP 31
ACTION: avl2.delete(int3) 
int3 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104963998> : <type 'instance'>
avl_REF2 = set([17, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.insert(int3)                                                       # STEP 32
ACTION: avl2.insert(int3) 
int3 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104963998> : <type 'instance'>
avl_REF2 = set([17, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([17, 5, 7]) : <type 'set'>
==================================================
int1 = 18                                                               # STEP 33
ACTION: int1 = 18 
int1 = None : <type 'NoneType'>
=> int1 = 18 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 34
ACTION: avl2.delete(int1) 
int1 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104963998> : <type 'instance'>
avl_REF2 = set([17, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int3)                                                       # STEP 35
ACTION: avl2.insert(int3) 
int3 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104963998> : <type 'instance'>
avl_REF2 = set([17, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
avl2.delete(int0)                                                       # STEP 36
ACTION: avl2.delete(int0) 
int0 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104963998> : <type 'instance'>
avl_REF2 = set([17, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([17, 7]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 37
ACTION: avl2.delete(int3) 
int3 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104963998> : <type 'instance'>
avl_REF2 = set([17, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([17]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 38
ACTION: avl2.insert(int2) 
int2 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104963998> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([17, 20]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 39
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104963998> : <type 'instance'>
avl_REF2 = set([17, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int1)                                                       # STEP 40
ACTION: avl2.insert(int1) 
int1 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104963998> : <type 'instance'>
avl_REF2 = set([17, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([17, 18, 20]) : <type 'set'>
==================================================
int2 = 18                                                               # STEP 41
ACTION: int2 = 18 
int2 = 20 : <type 'int'>
=> int2 = 18 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 42
ACTION: avl2.insert(int3) 
int3 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104963998> : <type 'instance'>
avl_REF2 = set([17, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([17, 18, 20, 7]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 43
ACTION: avl2.insert(int1) 
int1 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104963998> : <type 'instance'>
avl_REF2 = set([17, 18, 20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl2.insert(int0)                                                       # STEP 44
ACTION: avl2.insert(int0) 
int0 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104963998> : <type 'instance'>
avl_REF2 = set([17, 18, 20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([17, 18, 20, 5, 7]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 45
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104963998> : <type 'instance'>
avl_REF2 = set([17, 18, 20, 5, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int3)                                                       # STEP 46
ACTION: avl2.delete(int3) 
int3 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104963998> : <type 'instance'>
avl_REF2 = set([17, 18, 20, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([17, 18, 20, 5]) : <type 'set'>
==================================================
result = avl2.find(int1)                                                # STEP 47
ACTION: result = avl2.find(int1) 
int1 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104963998> : <type 'instance'>
avl_REF2 = set([17, 18, 20, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int0 = 18                                                               # STEP 48
ACTION: int0 = 18 
int0 = 5 : <type 'int'>
=> int0 = 18 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 49
ACTION: avl2.delete(int0) 
int0 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104963998> : <type 'instance'>
avl_REF2 = set([17, 18, 20, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([17, 20, 5]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104f515a8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
  11 [2:0]
-- < 10 [1:1]
---- < 8 [0:0] L
-- > 18 [1:0]
---- < 17 [0:0] L
---- > 20 [0:0] L
set([8, 10, 11, 17, 18, 20])
  11 [2:0]
-- < 10 [1:1]
---- < 8 [0:0] L
-- > 18 [1:0]
---- < 17 [0:0] L
---- > 20 [0:0] L
set([8, 10, 11, 17, 18, 20])
TEST #4 STEP #33 (0:00:30.009297) Fri Apr 28 06:47:57 2017 [ 159 stmts 209 branches ]
  6 [2:0]
-- < 3 [1:0]
---- < 1 [0:0] L
---- > 5 [0:0] L
-- > 17 [1:1]
---- < 15 [0:0] L
set([1, 3, 5, 6, 15, 17])
  6 [2:0]
-- < 3 [1:0]
---- < 1 [0:0] L
---- > 5 [0:0] L
-- > 17 [1:0]
---- < 15 [0:0] L
---- > 19 [0:0] L
set([1, 3, 5, 6, 15, 17, 19])
  11 [2:0]
-- < 3 [1:0]
---- < 2 [0:0] L
---- > 7 [0:0] L
-- > 17 [1:1]
---- < 14 [0:0] L
set([2, 3, 7, 11, 14, 17])
  11 [2:0]
-- < 3 [1:0]
---- < 2 [0:0] L
---- > 7 [0:0] L
-- > 17 [1:1]
---- < 14 [0:0] L
set([2, 3, 7, 11, 14, 17])
  11 [2:0]
-- < 3 [1:0]
---- < 2 [0:0] L
---- > 7 [0:0] L
-- > 17 [1:1]
---- < 14 [0:0] L
set([2, 3, 7, 11, 14, 17])
  7 [2:0]
-- < 3 [1:-1]
---- > 5 [0:0] L
-- > 16 [1:0]
---- < 15 [0:0] L
---- > 17 [0:0] L
set([3, 5, 7, 15, 16, 17])
  11 [3:0]
-- < 3 [2:1]
---- < 2 [1:1]
------ < 1 [0:0] L
---- > 7 [0:0] L
-- > 15 [2:-1]
---- < 14 [0:0] L
---- > 17 [1:-1]
------ > 19 [0:0] L
set([1, 2, 3, 7, 11, 14, 15, 17, 19])
  10 [2:0]
-- < 7 [1:0]
---- < 3 [0:0] L
---- > 9 [0:0] L
-- > 16 [1:1]
---- < 12 [0:0] L
set([3, 7, 9, 10, 12, 16])
  9 [2:0]
-- < 7 [1:0]
---- < 3 [0:0] L
---- > 8 [0:0] L
-- > 14 [1:0]
---- < 10 [0:0] L
---- > 16 [0:0] L
set([3, 7, 8, 9, 10, 14, 16])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104f60950>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 78 steps

SAVING TEST AS failure.609.test.2
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
avl0 = avl.AVLTree()                                                     # STEP 0
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x104f6d7a0> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int2 = 14                                                                # STEP 1
ACTION: int2 = 14 
int2 = None : <type 'NoneType'>
=> int2 = 14 : <type 'int'>
==================================================
avl0 == avl0                                                             # STEP 2
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x104f6d7a0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
int0 = 10                                                                # STEP 3
ACTION: int0 = 10 
int0 = None : <type 'NoneType'>
=> int0 = 10 : <type 'int'>
==================================================
avl0.insert(int0)                                                        # STEP 4
ACTION: avl0.insert(int0) 
int0 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f6d7a0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([10]) : <type 'set'>
==================================================
avl0.delete(int2)                                                        # STEP 5
ACTION: avl0.delete(int2) 
int2 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f6d7a0> : <type 'instance'>
avl_REF0 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
result = avl0.find(int2)                                                 # STEP 6
ACTION: result = avl0.find(int2) 
int2 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f6d7a0> : <type 'instance'>
avl_REF0 = set([10]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl0.delete(int0)                                                        # STEP 7
ACTION: avl0.delete(int0) 
int0 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f6d7a0> : <type 'instance'>
avl_REF0 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.insert(int0)                                                        # STEP 8
ACTION: avl0.insert(int0) 
int0 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f6d7a0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([10]) : <type 'set'>
==================================================
avl0.delete(int2)                                                        # STEP 9
ACTION: avl0.delete(int2) 
int2 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f6d7a0> : <type 'instance'>
avl_REF0 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.delete(int0)                                                       # STEP 10
ACTION: avl0.delete(int0) 
int0 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f6d7a0> : <type 'instance'>
avl_REF0 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 11
ACTION: avl0.delete(int2) 
int2 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f6d7a0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.delete(int0)                                                       # STEP 12
ACTION: avl0.delete(int0) 
int0 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f6d7a0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
result = avl0.find(int0)                                                # STEP 13
ACTION: result = avl0.find(int0) 
int0 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f6d7a0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
avl0.insert(int0)                                                       # STEP 14
ACTION: avl0.insert(int0) 
int0 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f6d7a0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([10]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 15
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104f6d7a0> : <type 'instance'>
avl_REF0 = set([10]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int0 = 3                                                                # STEP 16
ACTION: int0 = 3 
int0 = 10 : <type 'int'>
=> int0 = 3 : <type 'int'>
==================================================
int3 = 9                                                                # STEP 17
ACTION: int3 = 9 
int3 = None : <type 'NoneType'>
=> int3 = 9 : <type 'int'>
==================================================
int2 = 16                                                               # STEP 18
ACTION: int2 = 16 
int2 = 14 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 19
ACTION: avl0.insert(int3) 
int3 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f6d7a0> : <type 'instance'>
avl_REF0 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([9, 10]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 20
ACTION: avl0.insert(int2) 
int2 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f6d7a0> : <type 'instance'>
avl_REF0 = set([9, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([16, 9, 10]) : <type 'set'>
==================================================
int1 = 7                                                                # STEP 21
ACTION: int1 = 7 
int1 = None : <type 'NoneType'>
=> int1 = 7 : <type 'int'>
==================================================
int2 = 6                                                                # STEP 22
ACTION: int2 = 6 
int2 = 16 : <type 'int'>
=> int2 = 6 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 23
ACTION: avl0.delete(int2) 
int2 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f6d7a0> : <type 'instance'>
avl_REF0 = set([16, 9, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.insert(int0)                                                       # STEP 24
ACTION: avl0.insert(int0) 
int0 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f6d7a0> : <type 'instance'>
avl_REF0 = set([16, 9, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([16, 9, 10, 3]) : <type 'set'>
==================================================
result = avl0.find(int3)                                                # STEP 25
ACTION: result = avl0.find(int3) 
int3 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f6d7a0> : <type 'instance'>
avl_REF0 = set([16, 9, 10, 3]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
avl0.insert(int0)                                                       # STEP 26
ACTION: avl0.insert(int0) 
int0 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f6d7a0> : <type 'instance'>
avl_REF0 = set([16, 9, 10, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
avl0.insert(int1)                                                       # STEP 27
ACTION: avl0.insert(int1) 
int1 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f6d7a0> : <type 'instance'>
avl_REF0 = set([16, 9, 10, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([16, 9, 10, 3, 7]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 28
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104f6d7a0> : <type 'instance'>
avl_REF0 = set([16, 9, 10, 3, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int2 = 19                                                               # STEP 29
ACTION: int2 = 19 
int2 = 6 : <type 'int'>
=> int2 = 19 : <type 'int'>
==================================================
int1 = 12                                                               # STEP 30
ACTION: int1 = 12 
int1 = 7 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
int3 = 6                                                                # STEP 31
ACTION: int3 = 6 
int3 = 9 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 32
ACTION: avl0.insert(int1) 
int1 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f6d7a0> : <type 'instance'>
avl_REF0 = set([16, 9, 10, 3, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([3, 7, 9, 10, 12, 16]) : <type 'set'>
==================================================
avl0.display()                                                          # STEP 33
ACTION: avl0.display() 
avl0 = <avl.AVLTree instance at 0x104f6d7a0> : <type 'instance'>
avl_REF0 = set([3, 7, 9, 10, 12, 16]) : <type 'set'>
  10 [2:0]
-- < 7 [1:0]
---- < 3 [0:0] L
---- > 9 [0:0] L
-- > 16 [1:1]
---- < 12 [0:0] L
REFERENCE ACTION: print(avl_REF0) 
set([3, 7, 9, 10, 12, 16])
==================================================
avl0.insert(int0)                                                       # STEP 34
ACTION: avl0.insert(int0) 
int0 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f6d7a0> : <type 'instance'>
avl_REF0 = set([3, 7, 9, 10, 12, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
avl0.delete(int2)                                                       # STEP 35
ACTION: avl0.delete(int2) 
int2 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f6d7a0> : <type 'instance'>
avl_REF0 = set([3, 7, 9, 10, 12, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.delete(int1)                                                       # STEP 36
ACTION: avl0.delete(int1) 
int1 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f6d7a0> : <type 'instance'>
avl_REF0 = set([3, 7, 9, 10, 12, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([3, 7, 9, 10, 16]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 37
ACTION: avl0.delete(int1) 
int1 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f6d7a0> : <type 'instance'>
avl_REF0 = set([3, 7, 9, 10, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int1 = 13                                                               # STEP 38
ACTION: int1 = 13 
int1 = 12 : <type 'int'>
=> int1 = 13 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 39
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x104f49b90> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 40
ACTION: avl2.insert(int3) 
int3 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f49b90> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([6]) : <type 'set'>
==================================================
int2 = 2                                                                # STEP 41
ACTION: int2 = 2 
int2 = 19 : <type 'int'>
=> int2 = 2 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 42
ACTION: avl0.delete(int1) 
int1 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f6d7a0> : <type 'instance'>
avl_REF0 = set([3, 7, 9, 10, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl2.delete(int0)                                                       # STEP 43
ACTION: avl2.delete(int0) 
int0 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f49b90> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int1 = 14                                                               # STEP 44
ACTION: int1 = 14 
int1 = 13 : <type 'int'>
=> int1 = 14 : <type 'int'>
==================================================
int3 = 17                                                               # STEP 45
ACTION: int3 = 17 
int3 = 6 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
int0 = 14                                                               # STEP 46
ACTION: int0 = 14 
int0 = 3 : <type 'int'>
=> int0 = 14 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 47
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104f6d7a0> : <type 'instance'>
avl_REF0 = set([3, 7, 9, 10, 16]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl2.insert(int3)                                                       # STEP 48
ACTION: avl2.insert(int3) 
int3 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f49b90> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([17, 6]) : <type 'set'>
==================================================
int3 = 9                                                                # STEP 49
ACTION: int3 = 9 
int3 = 17 : <type 'int'>
=> int3 = 9 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 50
ACTION: avl2.delete(int0) 
int0 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f49b90> : <type 'instance'>
avl_REF2 = set([17, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.delete(int2)                                                       # STEP 51
ACTION: avl2.delete(int2) 
int2 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f49b90> : <type 'instance'>
avl_REF2 = set([17, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.delete(int0)                                                       # STEP 52
ACTION: avl2.delete(int0) 
int0 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f49b90> : <type 'instance'>
avl_REF2 = set([17, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.delete(int3)                                                       # STEP 53
ACTION: avl2.delete(int3) 
int3 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f49b90> : <type 'instance'>
avl_REF2 = set([17, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl0 == avl2                                                            # STEP 54
ACTION: avl0 == avl2 
avl0 = <avl.AVLTree instance at 0x104f6d7a0> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x104f49b90> : <type 'instance'>
avl_REF0 = set([3, 7, 9, 10, 16]) : <type 'set'>
avl_REF2 = set([17, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
avl2.insert(int0)                                                       # STEP 55
ACTION: avl2.insert(int0) 
int0 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f49b90> : <type 'instance'>
avl_REF2 = set([17, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([17, 14, 6]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 56
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104f6d7a0> : <type 'instance'>
avl_REF0 = set([3, 7, 9, 10, 16]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl2.insert(int3)                                                       # STEP 57
ACTION: avl2.insert(int3) 
int3 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f49b90> : <type 'instance'>
avl_REF2 = set([17, 14, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([17, 14, 6, 9]) : <type 'set'>
==================================================
avl0 == avl0                                                            # STEP 58
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x104f6d7a0> : <type 'instance'>
avl_REF0 = set([3, 7, 9, 10, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
int0 = 16                                                               # STEP 59
ACTION: int0 = 16 
int0 = 14 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 60
ACTION: avl2.insert(int3) 
int3 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f49b90> : <type 'instance'>
avl_REF2 = set([17, 14, 6, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
result = avl2.find(int0)                                                # STEP 61
ACTION: result = avl2.find(int0) 
int0 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f49b90> : <type 'instance'>
avl_REF2 = set([17, 14, 6, 9]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl2.delete(int3)                                                       # STEP 62
ACTION: avl2.delete(int3) 
int3 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f49b90> : <type 'instance'>
avl_REF2 = set([17, 14, 6, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([17, 14, 6]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 63
ACTION: avl0.delete(int2) 
int2 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f6d7a0> : <type 'instance'>
avl_REF0 = set([3, 7, 9, 10, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
result = avl2.inorder()                                                 # STEP 64
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104f49b90> : <type 'instance'>
avl_REF2 = set([17, 14, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int1)                                                       # STEP 65
ACTION: avl2.insert(int1) 
int1 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f49b90> : <type 'instance'>
avl_REF2 = set([17, 14, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
int2 = 3                                                                # STEP 66
ACTION: int2 = 3 
int2 = 2 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
int3 = 8                                                                # STEP 67
ACTION: int3 = 8 
int3 = 9 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 68
ACTION: avl0.insert(int3) 
int3 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f6d7a0> : <type 'instance'>
avl_REF0 = set([3, 7, 9, 10, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([3, 7, 8, 9, 10, 16]) : <type 'set'>
==================================================
int0 = 8                                                                # STEP 69
ACTION: int0 = 8 
int0 = 16 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
result = avl2.find(int1)                                                # STEP 70
ACTION: result = avl2.find(int1) 
int1 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f49b90> : <type 'instance'>
avl_REF2 = set([17, 14, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl0.insert(int3)                                                       # STEP 71
ACTION: avl0.insert(int3) 
int3 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f6d7a0> : <type 'instance'>
avl_REF0 = set([3, 7, 8, 9, 10, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
avl0.insert(int1)                                                       # STEP 72
ACTION: avl0.insert(int1) 
int1 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f6d7a0> : <type 'instance'>
avl_REF0 = set([3, 7, 8, 9, 10, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([3, 7, 8, 9, 10, 14, 16]) : <type 'set'>
==================================================
result = avl0.find(int3)                                                # STEP 73
ACTION: result = avl0.find(int3) 
int3 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f6d7a0> : <type 'instance'>
avl_REF0 = set([3, 7, 8, 9, 10, 14, 16]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
avl2.insert(int2)                                                       # STEP 74
ACTION: avl2.insert(int2) 
int2 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f49b90> : <type 'instance'>
avl_REF2 = set([17, 14, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([17, 3, 14, 6]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 75
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104f6d7a0> : <type 'instance'>
avl_REF0 = set([3, 7, 8, 9, 10, 14, 16]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.display()                                                          # STEP 76
ACTION: avl0.display() 
avl0 = <avl.AVLTree instance at 0x104f6d7a0> : <type 'instance'>
avl_REF0 = set([3, 7, 8, 9, 10, 14, 16]) : <type 'set'>
  9 [2:0]
-- < 7 [1:0]
---- < 3 [0:0] L
---- > 8 [0:0] L
-- > 14 [1:0]
---- < 10 [0:0] L
---- > 16 [0:0] L
REFERENCE ACTION: print(avl_REF0) 
set([3, 7, 8, 9, 10, 14, 16])
==================================================
avl2.delete(int1)                                                       # STEP 77
ACTION: avl2.delete(int1) 
int1 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f49b90> : <type 'instance'>
avl_REF2 = set([17, 3, 14, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([17, 3, 6]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104f5c3b0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 3 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 70
STOPPING TESTING DUE TO TIMEOUT
8.58500169664 PERCENT COVERED
60.2164180279 TOTAL RUNTIME
7 EXECUTED
565 TOTAL TEST OPERATIONS
22.1039512157 TIME SPENT EXECUTING TEST OPERATIONS
0.056711435318 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
22.2900319099 TIME SPENT CHECKING PROPERTIES
44.3939831257 TOTAL TIME SPENT RUNNING SUT
0.0040397644043 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
3 FAILED
0 REPEATS OF FAILURES
3 ACTUAL DISTINCT FAILURES

FAILURE 0
int2 = 3                                                                 # STEP 0
avl1 = avl.AVLTree()                                                     # STEP 1
avl1.insert(int2)                                                        # STEP 2
avl1.insert(int2)                                                        # STEP 3
int2 = 1                                                                 # STEP 4
avl1.insert(int2)                                                        # STEP 5
avl2 = avl.AVLTree()                                                     # STEP 6
result = avl2.inorder()                                                  # STEP 7
result = avl1.inorder()                                                  # STEP 8
avl2.delete(int2)                                                        # STEP 9
avl2.delete(int2)                                                       # STEP 10
avl2.insert(int2)                                                       # STEP 11
avl2.insert(int2)                                                       # STEP 12
result = avl1.find(int2)                                                # STEP 13
avl1.insert(int2)                                                       # STEP 14
avl2.insert(int2)                                                       # STEP 15
int3 = 16                                                               # STEP 16
avl1.insert(int2)                                                       # STEP 17
avl1.delete(int2)                                                       # STEP 18
avl1.delete(int2)                                                       # STEP 19
avl2.delete(int2)                                                       # STEP 20
result = avl2.inorder()                                                 # STEP 21
avl2.delete(int2)                                                       # STEP 22
result = avl2.inorder()                                                 # STEP 23
avl2.delete(int3)                                                       # STEP 24
int3 = 13                                                               # STEP 25
avl2.insert(int2)                                                       # STEP 26
avl2.insert(int2)                                                       # STEP 27
avl2.delete(int2)                                                       # STEP 28
avl2.delete(int2)                                                       # STEP 29
int0 = 13                                                               # STEP 30
result = avl2.find(int0)                                                # STEP 31
int1 = 4                                                                # STEP 32
int2 = 9                                                                # STEP 33
avl1.insert(int0)                                                       # STEP 34
avl1.insert(int0)                                                       # STEP 35
avl2.delete(int2)                                                       # STEP 36
avl2.insert(int0)                                                       # STEP 37
result = avl2.find(int0)                                                # STEP 38
result = avl1.inorder()                                                 # STEP 39
avl1.insert(int2)                                                       # STEP 40
result = avl2.inorder()                                                 # STEP 41
avl1.insert(int1)                                                       # STEP 42
int1 = 1                                                                # STEP 43
result = avl2.inorder()                                                 # STEP 44
avl2.delete(int1)                                                       # STEP 45
avl2.insert(int3)                                                       # STEP 46
int1 = 15                                                               # STEP 47
avl0 = avl.AVLTree()                                                    # STEP 48
avl1.insert(int0)                                                       # STEP 49
int3 = 20                                                               # STEP 50
avl2.insert(int3)                                                       # STEP 51
result = avl2.inorder()                                                 # STEP 52
avl1.insert(int2)                                                       # STEP 53
avl2.insert(int0)                                                       # STEP 54
avl2.insert(int2)                                                       # STEP 55
avl2.delete(int3)                                                       # STEP 56
avl2.insert(int3)                                                       # STEP 57
avl0.insert(int2)                                                       # STEP 58
avl2.delete(int1)                                                       # STEP 59
avl2 == avl1                                                            # STEP 60
avl2.delete(int2)                                                       # STEP 61
avl2.delete(int0)                                                       # STEP 62
avl0.delete(int0)                                                       # STEP 63
result = avl0.inorder()                                                 # STEP 64
avl0.insert(int3)                                                       # STEP 65
avl1.delete(int0)                                                       # STEP 66
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104999950>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE 1
avl2 = avl.AVLTree()                                                     # STEP 0
int2 = 11                                                                # STEP 1
avl2 == avl2                                                             # STEP 2
avl2.insert(int2)                                                        # STEP 3
result = avl2.find(int2)                                                 # STEP 4
avl2.insert(int2)                                                        # STEP 5
avl2.delete(int2)                                                        # STEP 6
result = avl2.inorder()                                                  # STEP 7
result = avl2.find(int2)                                                 # STEP 8
int3 = 17                                                                # STEP 9
result = avl2.find(int3)                                                # STEP 10
avl2.insert(int3)                                                       # STEP 11
avl2.delete(int3)                                                       # STEP 12
result = avl2.inorder()                                                 # STEP 13
avl2.insert(int3)                                                       # STEP 14
avl2.delete(int2)                                                       # STEP 15
int3 = 17                                                               # STEP 16
avl2.delete(int2)                                                       # STEP 17
avl2.insert(int2)                                                       # STEP 18
avl2.delete(int2)                                                       # STEP 19
avl2.delete(int2)                                                       # STEP 20
result = avl2.inorder()                                                 # STEP 21
int0 = 5                                                                # STEP 22
result = avl2.find(int3)                                                # STEP 23
avl2.insert(int2)                                                       # STEP 24
avl2.delete(int2)                                                       # STEP 25
int2 = 20                                                               # STEP 26
result = avl2.inorder()                                                 # STEP 27
int3 = 7                                                                # STEP 28
avl2.insert(int0)                                                       # STEP 29
avl2.insert(int0)                                                       # STEP 30
avl2.delete(int3)                                                       # STEP 31
avl2.insert(int3)                                                       # STEP 32
int1 = 18                                                               # STEP 33
avl2.delete(int1)                                                       # STEP 34
avl2.insert(int3)                                                       # STEP 35
avl2.delete(int0)                                                       # STEP 36
avl2.delete(int3)                                                       # STEP 37
avl2.insert(int2)                                                       # STEP 38
result = avl2.inorder()                                                 # STEP 39
avl2.insert(int1)                                                       # STEP 40
int2 = 18                                                               # STEP 41
avl2.insert(int3)                                                       # STEP 42
avl2.insert(int1)                                                       # STEP 43
avl2.insert(int0)                                                       # STEP 44
result = avl2.inorder()                                                 # STEP 45
avl2.delete(int3)                                                       # STEP 46
result = avl2.find(int1)                                                # STEP 47
int0 = 18                                                               # STEP 48
avl2.delete(int0)                                                       # STEP 49
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104f515a8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE 2
avl0 = avl.AVLTree()                                                     # STEP 0
int2 = 14                                                                # STEP 1
avl0 == avl0                                                             # STEP 2
int0 = 10                                                                # STEP 3
avl0.insert(int0)                                                        # STEP 4
avl0.delete(int2)                                                        # STEP 5
result = avl0.find(int2)                                                 # STEP 6
avl0.delete(int0)                                                        # STEP 7
avl0.insert(int0)                                                        # STEP 8
avl0.delete(int2)                                                        # STEP 9
avl0.delete(int0)                                                       # STEP 10
avl0.delete(int2)                                                       # STEP 11
avl0.delete(int0)                                                       # STEP 12
result = avl0.find(int0)                                                # STEP 13
avl0.insert(int0)                                                       # STEP 14
result = avl0.inorder()                                                 # STEP 15
int0 = 3                                                                # STEP 16
int3 = 9                                                                # STEP 17
int2 = 16                                                               # STEP 18
avl0.insert(int3)                                                       # STEP 19
avl0.insert(int2)                                                       # STEP 20
int1 = 7                                                                # STEP 21
int2 = 6                                                                # STEP 22
avl0.delete(int2)                                                       # STEP 23
avl0.insert(int0)                                                       # STEP 24
result = avl0.find(int3)                                                # STEP 25
avl0.insert(int0)                                                       # STEP 26
avl0.insert(int1)                                                       # STEP 27
result = avl0.inorder()                                                 # STEP 28
int2 = 19                                                               # STEP 29
int1 = 12                                                               # STEP 30
int3 = 6                                                                # STEP 31
avl0.insert(int1)                                                       # STEP 32
avl0.display()                                                          # STEP 33
avl0.insert(int0)                                                       # STEP 34
avl0.delete(int2)                                                       # STEP 35
avl0.delete(int1)                                                       # STEP 36
avl0.delete(int1)                                                       # STEP 37
int1 = 13                                                               # STEP 38
avl2 = avl.AVLTree()                                                    # STEP 39
avl2.insert(int3)                                                       # STEP 40
int2 = 2                                                                # STEP 41
avl0.delete(int1)                                                       # STEP 42
avl2.delete(int0)                                                       # STEP 43
int1 = 14                                                               # STEP 44
int3 = 17                                                               # STEP 45
int0 = 14                                                               # STEP 46
result = avl0.inorder()                                                 # STEP 47
avl2.insert(int3)                                                       # STEP 48
int3 = 9                                                                # STEP 49
avl2.delete(int0)                                                       # STEP 50
avl2.delete(int2)                                                       # STEP 51
avl2.delete(int0)                                                       # STEP 52
avl2.delete(int3)                                                       # STEP 53
avl0 == avl2                                                            # STEP 54
avl2.insert(int0)                                                       # STEP 55
result = avl0.inorder()                                                 # STEP 56
avl2.insert(int3)                                                       # STEP 57
avl0 == avl0                                                            # STEP 58
int0 = 16                                                               # STEP 59
avl2.insert(int3)                                                       # STEP 60
result = avl2.find(int0)                                                # STEP 61
avl2.delete(int3)                                                       # STEP 62
avl0.delete(int2)                                                       # STEP 63
result = avl2.inorder()                                                 # STEP 64
avl2.insert(int1)                                                       # STEP 65
int2 = 3                                                                # STEP 66
int3 = 8                                                                # STEP 67
avl0.insert(int3)                                                       # STEP 68
int0 = 8                                                                # STEP 69
result = avl2.find(int1)                                                # STEP 70
avl0.insert(int3)                                                       # STEP 71
avl0.insert(int1)                                                       # STEP 72
result = avl0.find(int3)                                                # STEP 73
avl2.insert(int2)                                                       # STEP 74
result = avl0.inorder()                                                 # STEP 75
avl0.display()                                                          # STEP 76
avl2.delete(int1)                                                       # STEP 77
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104f5c3b0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
216 BRANCHES COVERED
162 STATEMENTS COVERED

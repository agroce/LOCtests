Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.62243.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1050ecd88>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
Original test has 38 steps

SAVING TEST AS failure.62243.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 3                                                                 # STEP 0
ACTION: int0 = 3 
int0 = None : <type 'NoneType'>
=> int0 = 3 : <type 'int'>
==================================================
int2 = 11                                                                # STEP 1
ACTION: int2 = 11 
int2 = None : <type 'NoneType'>
=> int2 = 11 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 2
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x1050e0488> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.insert(int0)                                                        # STEP 3
ACTION: avl0.insert(int0) 
int0 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1050e0488> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([3]) : <type 'set'>
==================================================
avl0.delete(int0)                                                        # STEP 4
ACTION: avl0.delete(int0) 
int0 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1050e0488> : <type 'instance'>
avl_REF0 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int3 = 16                                                                # STEP 5
ACTION: int3 = 16 
int3 = None : <type 'NoneType'>
=> int3 = 16 : <type 'int'>
==================================================
avl0.insert(int2)                                                        # STEP 6
ACTION: avl0.insert(int2) 
int2 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1050e0488> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([11]) : <type 'set'>
==================================================
int2 = 15                                                                # STEP 7
ACTION: int2 = 15 
int2 = 11 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
avl0.delete(int2)                                                        # STEP 8
ACTION: avl0.delete(int2) 
int2 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1050e0488> : <type 'instance'>
avl_REF0 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.delete(int0)                                                        # STEP 9
ACTION: avl0.delete(int0) 
int0 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1050e0488> : <type 'instance'>
avl_REF0 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int0 = 8                                                                # STEP 10
ACTION: int0 = 8 
int0 = 3 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
int2 = 9                                                                # STEP 11
ACTION: int2 = 9 
int2 = 15 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 12
ACTION: avl0.delete(int2) 
int2 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1050e0488> : <type 'instance'>
avl_REF0 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.insert(int2)                                                       # STEP 13
ACTION: avl0.insert(int2) 
int2 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1050e0488> : <type 'instance'>
avl_REF0 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([9, 11]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 14
ACTION: avl0.insert(int2) 
int2 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1050e0488> : <type 'instance'>
avl_REF0 = set([9, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl0.delete(int2)                                                       # STEP 15
ACTION: avl0.delete(int2) 
int2 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1050e0488> : <type 'instance'>
avl_REF0 = set([9, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([11]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 16
ACTION: avl0.insert(int2) 
int2 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1050e0488> : <type 'instance'>
avl_REF0 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([9, 11]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 17
ACTION: avl0.delete(int2) 
int2 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1050e0488> : <type 'instance'>
avl_REF0 = set([9, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([11]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 18
ACTION: avl0.delete(int0) 
int0 = 8 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1050e0488> : <type 'instance'>
avl_REF0 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.delete(int2)                                                       # STEP 19
ACTION: avl0.delete(int2) 
int2 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1050e0488> : <type 'instance'>
avl_REF0 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.insert(int2)                                                       # STEP 20
ACTION: avl0.insert(int2) 
int2 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1050e0488> : <type 'instance'>
avl_REF0 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([9, 11]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 21
ACTION: avl0.delete(int3) 
int3 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1050e0488> : <type 'instance'>
avl_REF0 = set([9, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.insert(int3)                                                       # STEP 22
ACTION: avl0.insert(int3) 
int3 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1050e0488> : <type 'instance'>
avl_REF0 = set([9, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([16, 9, 11]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 23
ACTION: avl0.insert(int0) 
int0 = 8 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1050e0488> : <type 'instance'>
avl_REF0 = set([16, 9, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([16, 9, 11, 8]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 24
ACTION: avl0.insert(int0) 
int0 = 8 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1050e0488> : <type 'instance'>
avl_REF0 = set([16, 9, 11, 8]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
avl0.insert(int3)                                                       # STEP 25
ACTION: avl0.insert(int3) 
int3 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1050e0488> : <type 'instance'>
avl_REF0 = set([16, 9, 11, 8]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
avl0.insert(int3)                                                       # STEP 26
ACTION: avl0.insert(int3) 
int3 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1050e0488> : <type 'instance'>
avl_REF0 = set([16, 9, 11, 8]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
avl0.insert(int3)                                                       # STEP 27
ACTION: avl0.insert(int3) 
int3 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1050e0488> : <type 'instance'>
avl_REF0 = set([16, 9, 11, 8]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
result = avl0.find(int2)                                                # STEP 28
ACTION: result = avl0.find(int2) 
int2 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1050e0488> : <type 'instance'>
avl_REF0 = set([16, 9, 11, 8]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl0.insert(int3)                                                       # STEP 29
ACTION: avl0.insert(int3) 
int3 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1050e0488> : <type 'instance'>
avl_REF0 = set([16, 9, 11, 8]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
avl2 = avl.AVLTree()                                                    # STEP 30
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x10433f6c8> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 31
ACTION: avl2.insert(int2) 
int2 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10433f6c8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([9]) : <type 'set'>
==================================================
int0 = 13                                                               # STEP 32
ACTION: int0 = 13 
int0 = 8 : <type 'int'>
=> int0 = 13 : <type 'int'>
==================================================
int1 = 14                                                               # STEP 33
ACTION: int1 = 14 
int1 = None : <type 'NoneType'>
=> int1 = 14 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 34
ACTION: avl0.delete(int1) 
int1 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1050e0488> : <type 'instance'>
avl_REF0 = set([16, 9, 11, 8]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.insert(int3)                                                       # STEP 35
ACTION: avl0.insert(int3) 
int3 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1050e0488> : <type 'instance'>
avl_REF0 = set([16, 9, 11, 8]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
avl0.delete(int0)                                                       # STEP 36
ACTION: avl0.delete(int0) 
int0 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1050e0488> : <type 'instance'>
avl_REF0 = set([16, 9, 11, 8]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.delete(int3)                                                       # STEP 37
ACTION: avl0.delete(int3) 
int3 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1050e0488> : <type 'instance'>
avl_REF0 = set([16, 9, 11, 8]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([9, 11, 8]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104758ab8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1046cb4d0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
Original test has 34 steps

SAVING TEST AS failure.62243.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 20                                                                # STEP 0
ACTION: int3 = 20 
int3 = None : <type 'NoneType'>
=> int3 = 20 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 1
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x1050d6a28> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int2 = 16                                                                # STEP 2
ACTION: int2 = 16 
int2 = None : <type 'NoneType'>
=> int2 = 16 : <type 'int'>
==================================================
avl0.insert(int2)                                                        # STEP 3
ACTION: avl0.insert(int2) 
int2 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1050d6a28> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([16]) : <type 'set'>
==================================================
avl0.insert(int2)                                                        # STEP 4
ACTION: avl0.insert(int2) 
int2 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1050d6a28> : <type 'instance'>
avl_REF0 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl0.delete(int2)                                                        # STEP 5
ACTION: avl0.delete(int2) 
int2 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1050d6a28> : <type 'instance'>
avl_REF0 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.insert(int3)                                                        # STEP 6
ACTION: avl0.insert(int3) 
int3 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1050d6a28> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([20]) : <type 'set'>
==================================================
avl0.insert(int3)                                                        # STEP 7
ACTION: avl0.insert(int3) 
int3 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1050d6a28> : <type 'instance'>
avl_REF0 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
avl2 = avl.AVLTree()                                                     # STEP 8
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x10429d518> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int3)                                                        # STEP 9
ACTION: avl2.insert(int3) 
int3 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10429d518> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([20]) : <type 'set'>
==================================================
int2 = 15                                                               # STEP 10
ACTION: int2 = 15 
int2 = 16 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
int3 = 9                                                                # STEP 11
ACTION: int3 = 9 
int3 = 20 : <type 'int'>
=> int3 = 9 : <type 'int'>
==================================================
int1 = 2                                                                # STEP 12
ACTION: int1 = 2 
int1 = None : <type 'NoneType'>
=> int1 = 2 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 13
ACTION: avl2.insert(int2) 
int2 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10429d518> : <type 'instance'>
avl_REF2 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([20, 15]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 14
ACTION: avl2.delete(int1) 
int1 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10429d518> : <type 'instance'>
avl_REF2 = set([20, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl0.delete(int3)                                                       # STEP 15
ACTION: avl0.delete(int3) 
int3 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1050d6a28> : <type 'instance'>
avl_REF0 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
result = avl0.inorder()                                                 # STEP 16
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x1050d6a28> : <type 'instance'>
avl_REF0 = set([20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int2 = 6                                                                # STEP 17
ACTION: int2 = 6 
int2 = 15 : <type 'int'>
=> int2 = 6 : <type 'int'>
==================================================
int3 = 14                                                               # STEP 18
ACTION: int3 = 14 
int3 = 9 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
result = avl2.find(int3)                                                # STEP 19
ACTION: result = avl2.find(int3) 
int3 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10429d518> : <type 'instance'>
avl_REF2 = set([20, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl0.insert(int2)                                                       # STEP 20
ACTION: avl0.insert(int2) 
int2 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1050d6a28> : <type 'instance'>
avl_REF0 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([20, 6]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 21
ACTION: avl0.delete(int2) 
int2 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1050d6a28> : <type 'instance'>
avl_REF0 = set([20, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([20]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 22
ACTION: avl0.insert(int2) 
int2 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1050d6a28> : <type 'instance'>
avl_REF0 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([20, 6]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 23
ACTION: avl0.delete(int3) 
int3 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1050d6a28> : <type 'instance'>
avl_REF0 = set([20, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl2.insert(int2)                                                       # STEP 24
ACTION: avl2.insert(int2) 
int2 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10429d518> : <type 'instance'>
avl_REF2 = set([20, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([20, 6, 15]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 25
ACTION: avl2.insert(int2) 
int2 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10429d518> : <type 'instance'>
avl_REF2 = set([20, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl0.insert(int2)                                                       # STEP 26
ACTION: avl0.insert(int2) 
int2 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1050d6a28> : <type 'instance'>
avl_REF0 = set([20, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl0 = avl.AVLTree()                                                    # STEP 27
ACTION: avl0 = avl.AVLTree() 
avl0 = <avlbug2.AVLTree instance at 0x1050d6a28> : <type 'instance'>
avl_REF0 = set([20, 6]) : <type 'set'>
=> avl0 = <avlbug2.AVLTree instance at 0x1044e0440> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 28
ACTION: avl2.insert(int3) 
int3 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10429d518> : <type 'instance'>
avl_REF2 = set([20, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([20, 14, 6, 15]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 29
ACTION: avl0.delete(int2) 
int2 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1044e0440> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl1 = avl.AVLTree()                                                    # STEP 30
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x1044f00e0> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 31
ACTION: avl2.insert(int1) 
int1 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10429d518> : <type 'instance'>
avl_REF2 = set([20, 14, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([2, 20, 14, 6, 15]) : <type 'set'>
==================================================
int3 = 15                                                               # STEP 32
ACTION: int3 = 15 
int3 = 14 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 33
ACTION: avl2.delete(int3) 
int3 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10429d518> : <type 'instance'>
avl_REF2 = set([2, 20, 14, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([2, 20, 14, 6]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10463c1b8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
  15 [2:0]
-- < 5 [1:0]
---- < 1 [0:0] L
---- > 11 [0:0] L
-- > 17 [1:-1]
---- > 18 [0:0] L
set([1, 5, 11, 15, 17, 18])
  15 [3:1]
-- < 5 [2:1]
---- < 1 [1:-1]
------ > 2 [0:0] L
---- > 11 [0:0] L
-- > 17 [1:-1]
---- > 18 [0:0] L
set([1, 2, 5, 11, 15, 17, 18])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10474a3f8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
Original test has 42 steps

SAVING TEST AS failure.62243.test.2
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 7                                                                 # STEP 0
ACTION: int0 = 7 
int0 = None : <type 'NoneType'>
=> int0 = 7 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 1
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x1044e0a28> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 2
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x104745b90> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl0.insert(int0)                                                        # STEP 3
ACTION: avl0.insert(int0) 
int0 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1044e0a28> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([7]) : <type 'set'>
==================================================
avl2.delete(int0)                                                        # STEP 4
ACTION: avl2.delete(int0) 
int0 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104745b90> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.insert(int0)                                                        # STEP 5
ACTION: avl2.insert(int0) 
int0 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104745b90> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([7]) : <type 'set'>
==================================================
avl2 == avl2                                                             # STEP 6
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x104745b90> : <type 'instance'>
avl_REF2 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
int0 = 11                                                                # STEP 7
ACTION: int0 = 11 
int0 = 7 : <type 'int'>
=> int0 = 11 : <type 'int'>
==================================================
avl0.delete(int0)                                                        # STEP 8
ACTION: avl0.delete(int0) 
int0 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1044e0a28> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl2.delete(int0)                                                        # STEP 9
ACTION: avl2.delete(int0) 
int0 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104745b90> : <type 'instance'>
avl_REF2 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl0.insert(int0)                                                       # STEP 10
ACTION: avl0.insert(int0) 
int0 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1044e0a28> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([11, 7]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 11
ACTION: avl0.insert(int0) 
int0 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1044e0a28> : <type 'instance'>
avl_REF0 = set([11, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
avl0 == avl2                                                            # STEP 12
ACTION: avl0 == avl2 
avl0 = <avlbug2.AVLTree instance at 0x1044e0a28> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x104745b90> : <type 'instance'>
avl_REF0 = set([11, 7]) : <type 'set'>
avl_REF2 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
int1 = 1                                                                # STEP 13
ACTION: int1 = 1 
int1 = None : <type 'NoneType'>
=> int1 = 1 : <type 'int'>
==================================================
avl2 == avl0                                                            # STEP 14
ACTION: avl2 == avl0 
avl2 = <avlbug2.AVLTree instance at 0x104745b90> : <type 'instance'>
avl0 = <avlbug2.AVLTree instance at 0x1044e0a28> : <type 'instance'>
avl_REF2 = set([7]) : <type 'set'>
avl_REF0 = set([11, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF0 
==================================================
avl0.delete(int1)                                                       # STEP 15
ACTION: avl0.delete(int1) 
int1 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1044e0a28> : <type 'instance'>
avl_REF0 = set([11, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl2.delete(int0)                                                       # STEP 16
ACTION: avl2.delete(int0) 
int0 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104745b90> : <type 'instance'>
avl_REF2 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
result = avl2.inorder()                                                 # STEP 17
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x104745b90> : <type 'instance'>
avl_REF2 = set([7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int2 = 18                                                               # STEP 18
ACTION: int2 = 18 
int2 = None : <type 'NoneType'>
=> int2 = 18 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 19
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x104745b90> : <type 'instance'>
avl_REF2 = set([7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int2)                                                       # STEP 20
ACTION: avl2.insert(int2) 
int2 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104745b90> : <type 'instance'>
avl_REF2 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([18, 7]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 21
ACTION: avl0.insert(int0) 
int0 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1044e0a28> : <type 'instance'>
avl_REF0 = set([11, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
avl0.insert(int2)                                                       # STEP 22
ACTION: avl0.insert(int2) 
int2 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1044e0a28> : <type 'instance'>
avl_REF0 = set([11, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([18, 11, 7]) : <type 'set'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 23
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x10465a0e0> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 24
ACTION: avl1.insert(int2) 
int2 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10465a0e0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([18]) : <type 'set'>
==================================================
int0 = 11                                                               # STEP 25
ACTION: int0 = 11 
int0 = 11 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 26
ACTION: avl0.delete(int0) 
int0 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1044e0a28> : <type 'instance'>
avl_REF0 = set([18, 11, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([18, 7]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 27
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x10465a0e0> : <type 'instance'>
avl_REF1 = set([18]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int2 = 10                                                               # STEP 28
ACTION: int2 = 10 
int2 = 18 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
int3 = 5                                                                # STEP 29
ACTION: int3 = 5 
int3 = None : <type 'NoneType'>
=> int3 = 5 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 30
ACTION: avl2.insert(int3) 
int3 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104745b90> : <type 'instance'>
avl_REF2 = set([18, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([18, 5, 7]) : <type 'set'>
==================================================
avl1 == avl0                                                            # STEP 31
ACTION: avl1 == avl0 
avl1 = <avlbug2.AVLTree instance at 0x10465a0e0> : <type 'instance'>
avl0 = <avlbug2.AVLTree instance at 0x1044e0a28> : <type 'instance'>
avl_REF1 = set([18]) : <type 'set'>
avl_REF0 = set([18, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
int1 = 8                                                                # STEP 32
ACTION: int1 = 8 
int1 = 1 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 33
ACTION: avl0.insert(int3) 
int3 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1044e0a28> : <type 'instance'>
avl_REF0 = set([18, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([18, 5, 7]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 34
ACTION: avl0.delete(int2) 
int2 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1044e0a28> : <type 'instance'>
avl_REF0 = set([18, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.insert(int1)                                                       # STEP 35
ACTION: avl0.insert(int1) 
int1 = 8 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1044e0a28> : <type 'instance'>
avl_REF0 = set([18, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([8, 18, 5, 7]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 36
ACTION: avl2.insert(int2) 
int2 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104745b90> : <type 'instance'>
avl_REF2 = set([18, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([18, 10, 5, 7]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 37
ACTION: avl2.insert(int2) 
int2 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104745b90> : <type 'instance'>
avl_REF2 = set([18, 10, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
result = avl1.find(int2)                                                # STEP 38
ACTION: result = avl1.find(int2) 
int2 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10465a0e0> : <type 'instance'>
avl_REF1 = set([18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int0 = 2                                                                # STEP 39
ACTION: int0 = 2 
int0 = 11 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 40
ACTION: avl2.insert(int3) 
int3 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104745b90> : <type 'instance'>
avl_REF2 = set([18, 10, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
avl2.delete(int3)                                                       # STEP 41
ACTION: avl2.delete(int3) 
int3 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104745b90> : <type 'instance'>
avl_REF2 = set([18, 10, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([18, 10, 7]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10467e3f8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 3 DISTINCT FAILURES
TEST #5 STEP #0 (0:00:34.131397) Mon May  1 18:02:06 2017 [ 159 stmts 210 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104768518>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
Original test has 24 steps

SAVING TEST AS failure.62243.test.3
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 10                                                                # STEP 0
ACTION: int3 = 10 
int3 = None : <type 'NoneType'>
=> int3 = 10 : <type 'int'>
==================================================
int2 = 12                                                                # STEP 1
ACTION: int2 = 12 
int2 = None : <type 'NoneType'>
=> int2 = 12 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 2
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x104768878> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.delete(int2)                                                        # STEP 3
ACTION: avl0.delete(int2) 
int2 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x104768878> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.insert(int3)                                                        # STEP 4
ACTION: avl0.insert(int3) 
int3 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x104768878> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([10]) : <type 'set'>
==================================================
int1 = 10                                                                # STEP 5
ACTION: int1 = 10 
int1 = None : <type 'NoneType'>
=> int1 = 10 : <type 'int'>
==================================================
int3 = 16                                                                # STEP 6
ACTION: int3 = 16 
int3 = 10 : <type 'int'>
=> int3 = 16 : <type 'int'>
==================================================
result = avl0.inorder()                                                  # STEP 7
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x104768878> : <type 'instance'>
avl_REF0 = set([10]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int2 = 14                                                                # STEP 8
ACTION: int2 = 14 
int2 = 12 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
result = avl0.find(int3)                                                 # STEP 9
ACTION: result = avl0.find(int3) 
int3 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x104768878> : <type 'instance'>
avl_REF0 = set([10]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
avl0.insert(int3)                                                       # STEP 10
ACTION: avl0.insert(int3) 
int3 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x104768878> : <type 'instance'>
avl_REF0 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([16, 10]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 11
ACTION: avl0.delete(int1) 
int1 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x104768878> : <type 'instance'>
avl_REF0 = set([16, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([16]) : <type 'set'>
==================================================
int1 = 19                                                               # STEP 12
ACTION: int1 = 19 
int1 = 10 : <type 'int'>
=> int1 = 19 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 13
ACTION: avl0.delete(int2) 
int2 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x104768878> : <type 'instance'>
avl_REF0 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.insert(int2)                                                       # STEP 14
ACTION: avl0.insert(int2) 
int2 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x104768878> : <type 'instance'>
avl_REF0 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([16, 14]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 15
ACTION: avl0.insert(int3) 
int3 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x104768878> : <type 'instance'>
avl_REF0 = set([16, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
avl0.insert(int3)                                                       # STEP 16
ACTION: avl0.insert(int3) 
int3 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x104768878> : <type 'instance'>
avl_REF0 = set([16, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
avl0.insert(int1)                                                       # STEP 17
ACTION: avl0.insert(int1) 
int1 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x104768878> : <type 'instance'>
avl_REF0 = set([16, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([16, 19, 14]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 18
ACTION: avl0.insert(int2) 
int2 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x104768878> : <type 'instance'>
avl_REF0 = set([16, 19, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
int2 = 16                                                               # STEP 19
ACTION: int2 = 16 
int2 = 14 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
int3 = 11                                                               # STEP 20
ACTION: int3 = 11 
int3 = 16 : <type 'int'>
=> int3 = 11 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 21
ACTION: avl0.insert(int1) 
int1 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x104768878> : <type 'instance'>
avl_REF0 = set([16, 19, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl0.insert(int3)                                                       # STEP 22
ACTION: avl0.insert(int3) 
int3 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x104768878> : <type 'instance'>
avl_REF0 = set([16, 19, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([16, 11, 19, 14]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 23
ACTION: avl0.delete(int1) 
int1 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x104768878> : <type 'instance'>
avl_REF0 = set([16, 11, 19, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([16, 11, 14]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104782680>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 4 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1047623f8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
Original test has 42 steps

SAVING TEST AS failure.62243.test.4
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
avl0 = avl.AVLTree()                                                     # STEP 0
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x10477eef0> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int2 = 17                                                                # STEP 1
ACTION: int2 = 17 
int2 = None : <type 'NoneType'>
=> int2 = 17 : <type 'int'>
==================================================
result = avl0.inorder()                                                  # STEP 2
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x10477eef0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.delete(int2)                                                        # STEP 3
ACTION: avl0.delete(int2) 
int2 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10477eef0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.delete(int2)                                                        # STEP 4
ACTION: avl0.delete(int2) 
int2 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10477eef0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int1 = 18                                                                # STEP 5
ACTION: int1 = 18 
int1 = None : <type 'NoneType'>
=> int1 = 18 : <type 'int'>
==================================================
avl0.insert(int1)                                                        # STEP 6
ACTION: avl0.insert(int1) 
int1 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10477eef0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([18]) : <type 'set'>
==================================================
avl0.insert(int1)                                                        # STEP 7
ACTION: avl0.insert(int1) 
int1 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10477eef0> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl0.insert(int1)                                                        # STEP 8
ACTION: avl0.insert(int1) 
int1 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10477eef0> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
int2 = 1                                                                 # STEP 9
ACTION: int2 = 1 
int2 = 17 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
int1 = 14                                                               # STEP 10
ACTION: int1 = 14 
int1 = 18 : <type 'int'>
=> int1 = 14 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 11
ACTION: avl0.insert(int1) 
int1 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10477eef0> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([18, 14]) : <type 'set'>
==================================================
int0 = 1                                                                # STEP 12
ACTION: int0 = 1 
int0 = None : <type 'NoneType'>
=> int0 = 1 : <type 'int'>
==================================================
result = avl0.find(int2)                                                # STEP 13
ACTION: result = avl0.find(int2) 
int2 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10477eef0> : <type 'instance'>
avl_REF0 = set([18, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl0.delete(int2)                                                       # STEP 14
ACTION: avl0.delete(int2) 
int2 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10477eef0> : <type 'instance'>
avl_REF0 = set([18, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0 == avl0                                                            # STEP 15
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x10477eef0> : <type 'instance'>
avl_REF0 = set([18, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl0.delete(int0)                                                       # STEP 16
ACTION: avl0.delete(int0) 
int0 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10477eef0> : <type 'instance'>
avl_REF0 = set([18, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.insert(int2)                                                       # STEP 17
ACTION: avl0.insert(int2) 
int2 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10477eef0> : <type 'instance'>
avl_REF0 = set([18, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([1, 18, 14]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 18
ACTION: avl0.insert(int1) 
int1 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10477eef0> : <type 'instance'>
avl_REF0 = set([1, 18, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
int1 = 18                                                               # STEP 19
ACTION: int1 = 18 
int1 = 14 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 20
ACTION: avl0.insert(int2) 
int2 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10477eef0> : <type 'instance'>
avl_REF0 = set([1, 18, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl0.delete(int2)                                                       # STEP 21
ACTION: avl0.delete(int2) 
int2 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10477eef0> : <type 'instance'>
avl_REF0 = set([1, 18, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([18, 14]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 22
ACTION: avl0.delete(int2) 
int2 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10477eef0> : <type 'instance'>
avl_REF0 = set([18, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int3 = 2                                                                # STEP 23
ACTION: int3 = 2 
int3 = None : <type 'NoneType'>
=> int3 = 2 : <type 'int'>
==================================================
int2 = 16                                                               # STEP 24
ACTION: int2 = 16 
int2 = 1 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 25
ACTION: avl0.delete(int0) 
int0 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10477eef0> : <type 'instance'>
avl_REF0 = set([18, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.insert(int3)                                                       # STEP 26
ACTION: avl0.insert(int3) 
int3 = 2 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10477eef0> : <type 'instance'>
avl_REF0 = set([18, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([18, 2, 14]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 27
ACTION: avl0.insert(int1) 
int1 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10477eef0> : <type 'instance'>
avl_REF0 = set([18, 2, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl0.delete(int0)                                                       # STEP 28
ACTION: avl0.delete(int0) 
int0 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10477eef0> : <type 'instance'>
avl_REF0 = set([18, 2, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.delete(int3)                                                       # STEP 29
ACTION: avl0.delete(int3) 
int3 = 2 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10477eef0> : <type 'instance'>
avl_REF0 = set([18, 2, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([18, 14]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 30
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x10477eef0> : <type 'instance'>
avl_REF0 = set([18, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int3 = 19                                                               # STEP 31
ACTION: int3 = 19 
int3 = 2 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 32
ACTION: avl0.insert(int3) 
int3 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10477eef0> : <type 'instance'>
avl_REF0 = set([18, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([18, 19, 14]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 33
ACTION: avl0.insert(int3) 
int3 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10477eef0> : <type 'instance'>
avl_REF0 = set([18, 19, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
avl0.insert(int0)                                                       # STEP 34
ACTION: avl0.insert(int0) 
int0 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10477eef0> : <type 'instance'>
avl_REF0 = set([18, 19, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([1, 18, 19, 14]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 35
ACTION: avl0.delete(int0) 
int0 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10477eef0> : <type 'instance'>
avl_REF0 = set([1, 18, 19, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([18, 19, 14]) : <type 'set'>
==================================================
result = avl0.find(int3)                                                # STEP 36
ACTION: result = avl0.find(int3) 
int3 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10477eef0> : <type 'instance'>
avl_REF0 = set([18, 19, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
result = avl0.inorder()                                                 # STEP 37
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x10477eef0> : <type 'instance'>
avl_REF0 = set([18, 19, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int0 = 17                                                               # STEP 38
ACTION: int0 = 17 
int0 = 1 : <type 'int'>
=> int0 = 17 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 39
ACTION: avl0.insert(int1) 
int1 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10477eef0> : <type 'instance'>
avl_REF0 = set([18, 19, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl0.insert(int2)                                                       # STEP 40
ACTION: avl0.insert(int2) 
int2 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10477eef0> : <type 'instance'>
avl_REF0 = set([18, 19, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([14, 16, 18, 19]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 41
ACTION: avl0.delete(int3) 
int3 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10477eef0> : <type 'instance'>
avl_REF0 = set([14, 16, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([14, 16, 18]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104756170>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 5 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 17
STOPPING TESTING DUE TO TIMEOUT
8.15438189205 PERCENT COVERED
60.221394062 TOTAL RUNTIME
8 EXECUTED
397 TOTAL TEST OPERATIONS
20.5842831135 TIME SPENT EXECUTING TEST OPERATIONS
0.0434994697571 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
20.6355762482 TIME SPENT CHECKING PROPERTIES
41.2198593616 TOTAL TIME SPENT RUNNING SUT
0.00496792793274 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
5 FAILED
0 REPEATS OF FAILURES
5 ACTUAL DISTINCT FAILURES

FAILURE 0
int0 = 3                                                                 # STEP 0
int2 = 11                                                                # STEP 1
avl0 = avl.AVLTree()                                                     # STEP 2
avl0.insert(int0)                                                        # STEP 3
avl0.delete(int0)                                                        # STEP 4
int3 = 16                                                                # STEP 5
avl0.insert(int2)                                                        # STEP 6
int2 = 15                                                                # STEP 7
avl0.delete(int2)                                                        # STEP 8
avl0.delete(int0)                                                        # STEP 9
int0 = 8                                                                # STEP 10
int2 = 9                                                                # STEP 11
avl0.delete(int2)                                                       # STEP 12
avl0.insert(int2)                                                       # STEP 13
avl0.insert(int2)                                                       # STEP 14
avl0.delete(int2)                                                       # STEP 15
avl0.insert(int2)                                                       # STEP 16
avl0.delete(int2)                                                       # STEP 17
avl0.delete(int0)                                                       # STEP 18
avl0.delete(int2)                                                       # STEP 19
avl0.insert(int2)                                                       # STEP 20
avl0.delete(int3)                                                       # STEP 21
avl0.insert(int3)                                                       # STEP 22
avl0.insert(int0)                                                       # STEP 23
avl0.insert(int0)                                                       # STEP 24
avl0.insert(int3)                                                       # STEP 25
avl0.insert(int3)                                                       # STEP 26
avl0.insert(int3)                                                       # STEP 27
result = avl0.find(int2)                                                # STEP 28
avl0.insert(int3)                                                       # STEP 29
avl2 = avl.AVLTree()                                                    # STEP 30
avl2.insert(int2)                                                       # STEP 31
int0 = 13                                                               # STEP 32
int1 = 14                                                               # STEP 33
avl0.delete(int1)                                                       # STEP 34
avl0.insert(int3)                                                       # STEP 35
avl0.delete(int0)                                                       # STEP 36
avl0.delete(int3)                                                       # STEP 37
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104758ab8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE 1
int3 = 20                                                                # STEP 0
avl0 = avl.AVLTree()                                                     # STEP 1
int2 = 16                                                                # STEP 2
avl0.insert(int2)                                                        # STEP 3
avl0.insert(int2)                                                        # STEP 4
avl0.delete(int2)                                                        # STEP 5
avl0.insert(int3)                                                        # STEP 6
avl0.insert(int3)                                                        # STEP 7
avl2 = avl.AVLTree()                                                     # STEP 8
avl2.insert(int3)                                                        # STEP 9
int2 = 15                                                               # STEP 10
int3 = 9                                                                # STEP 11
int1 = 2                                                                # STEP 12
avl2.insert(int2)                                                       # STEP 13
avl2.delete(int1)                                                       # STEP 14
avl0.delete(int3)                                                       # STEP 15
result = avl0.inorder()                                                 # STEP 16
int2 = 6                                                                # STEP 17
int3 = 14                                                               # STEP 18
result = avl2.find(int3)                                                # STEP 19
avl0.insert(int2)                                                       # STEP 20
avl0.delete(int2)                                                       # STEP 21
avl0.insert(int2)                                                       # STEP 22
avl0.delete(int3)                                                       # STEP 23
avl2.insert(int2)                                                       # STEP 24
avl2.insert(int2)                                                       # STEP 25
avl0.insert(int2)                                                       # STEP 26
avl0 = avl.AVLTree()                                                    # STEP 27
avl2.insert(int3)                                                       # STEP 28
avl0.delete(int2)                                                       # STEP 29
avl1 = avl.AVLTree()                                                    # STEP 30
avl2.insert(int1)                                                       # STEP 31
int3 = 15                                                               # STEP 32
avl2.delete(int3)                                                       # STEP 33
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10463c1b8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE 2
int0 = 7                                                                 # STEP 0
avl0 = avl.AVLTree()                                                     # STEP 1
avl2 = avl.AVLTree()                                                     # STEP 2
avl0.insert(int0)                                                        # STEP 3
avl2.delete(int0)                                                        # STEP 4
avl2.insert(int0)                                                        # STEP 5
avl2 == avl2                                                             # STEP 6
int0 = 11                                                                # STEP 7
avl0.delete(int0)                                                        # STEP 8
avl2.delete(int0)                                                        # STEP 9
avl0.insert(int0)                                                       # STEP 10
avl0.insert(int0)                                                       # STEP 11
avl0 == avl2                                                            # STEP 12
int1 = 1                                                                # STEP 13
avl2 == avl0                                                            # STEP 14
avl0.delete(int1)                                                       # STEP 15
avl2.delete(int0)                                                       # STEP 16
result = avl2.inorder()                                                 # STEP 17
int2 = 18                                                               # STEP 18
result = avl2.inorder()                                                 # STEP 19
avl2.insert(int2)                                                       # STEP 20
avl0.insert(int0)                                                       # STEP 21
avl0.insert(int2)                                                       # STEP 22
avl1 = avl.AVLTree()                                                    # STEP 23
avl1.insert(int2)                                                       # STEP 24
int0 = 11                                                               # STEP 25
avl0.delete(int0)                                                       # STEP 26
result = avl1.inorder()                                                 # STEP 27
int2 = 10                                                               # STEP 28
int3 = 5                                                                # STEP 29
avl2.insert(int3)                                                       # STEP 30
avl1 == avl0                                                            # STEP 31
int1 = 8                                                                # STEP 32
avl0.insert(int3)                                                       # STEP 33
avl0.delete(int2)                                                       # STEP 34
avl0.insert(int1)                                                       # STEP 35
avl2.insert(int2)                                                       # STEP 36
avl2.insert(int2)                                                       # STEP 37
result = avl1.find(int2)                                                # STEP 38
int0 = 2                                                                # STEP 39
avl2.insert(int3)                                                       # STEP 40
avl2.delete(int3)                                                       # STEP 41
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10467e3f8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE 3
int3 = 10                                                                # STEP 0
int2 = 12                                                                # STEP 1
avl0 = avl.AVLTree()                                                     # STEP 2
avl0.delete(int2)                                                        # STEP 3
avl0.insert(int3)                                                        # STEP 4
int1 = 10                                                                # STEP 5
int3 = 16                                                                # STEP 6
result = avl0.inorder()                                                  # STEP 7
int2 = 14                                                                # STEP 8
result = avl0.find(int3)                                                 # STEP 9
avl0.insert(int3)                                                       # STEP 10
avl0.delete(int1)                                                       # STEP 11
int1 = 19                                                               # STEP 12
avl0.delete(int2)                                                       # STEP 13
avl0.insert(int2)                                                       # STEP 14
avl0.insert(int3)                                                       # STEP 15
avl0.insert(int3)                                                       # STEP 16
avl0.insert(int1)                                                       # STEP 17
avl0.insert(int2)                                                       # STEP 18
int2 = 16                                                               # STEP 19
int3 = 11                                                               # STEP 20
avl0.insert(int1)                                                       # STEP 21
avl0.insert(int3)                                                       # STEP 22
avl0.delete(int1)                                                       # STEP 23
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104782680>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE 4
avl0 = avl.AVLTree()                                                     # STEP 0
int2 = 17                                                                # STEP 1
result = avl0.inorder()                                                  # STEP 2
avl0.delete(int2)                                                        # STEP 3
avl0.delete(int2)                                                        # STEP 4
int1 = 18                                                                # STEP 5
avl0.insert(int1)                                                        # STEP 6
avl0.insert(int1)                                                        # STEP 7
avl0.insert(int1)                                                        # STEP 8
int2 = 1                                                                 # STEP 9
int1 = 14                                                               # STEP 10
avl0.insert(int1)                                                       # STEP 11
int0 = 1                                                                # STEP 12
result = avl0.find(int2)                                                # STEP 13
avl0.delete(int2)                                                       # STEP 14
avl0 == avl0                                                            # STEP 15
avl0.delete(int0)                                                       # STEP 16
avl0.insert(int2)                                                       # STEP 17
avl0.insert(int1)                                                       # STEP 18
int1 = 18                                                               # STEP 19
avl0.insert(int2)                                                       # STEP 20
avl0.delete(int2)                                                       # STEP 21
avl0.delete(int2)                                                       # STEP 22
int3 = 2                                                                # STEP 23
int2 = 16                                                               # STEP 24
avl0.delete(int0)                                                       # STEP 25
avl0.insert(int3)                                                       # STEP 26
avl0.insert(int1)                                                       # STEP 27
avl0.delete(int0)                                                       # STEP 28
avl0.delete(int3)                                                       # STEP 29
result = avl0.inorder()                                                 # STEP 30
int3 = 19                                                               # STEP 31
avl0.insert(int3)                                                       # STEP 32
avl0.insert(int3)                                                       # STEP 33
avl0.insert(int0)                                                       # STEP 34
avl0.delete(int0)                                                       # STEP 35
result = avl0.find(int3)                                                # STEP 36
result = avl0.inorder()                                                 # STEP 37
int0 = 17                                                               # STEP 38
avl0.insert(int1)                                                       # STEP 39
avl0.insert(int2)                                                       # STEP 40
avl0.delete(int3)                                                       # STEP 41
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104756170>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
212 BRANCHES COVERED
160 STATEMENTS COVERED

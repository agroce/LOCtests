Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.1049.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10479d320>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 75 steps

SAVING TEST AS failure.1049.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 13                                                                # STEP 0
ACTION: int1 = 13 
int1 = None : <type 'NoneType'>
=> int1 = 13 : <type 'int'>
==================================================
int3 = 8                                                                 # STEP 1
ACTION: int3 = 8 
int3 = None : <type 'NoneType'>
=> int3 = 8 : <type 'int'>
==================================================
int2 = 20                                                                # STEP 2
ACTION: int2 = 20 
int2 = None : <type 'NoneType'>
=> int2 = 20 : <type 'int'>
==================================================
int0 = 14                                                                # STEP 3
ACTION: int0 = 14 
int0 = None : <type 'NoneType'>
=> int0 = 14 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x1046d8950> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 5
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x1046d8638> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
result = avl2.find(int3)                                                 # STEP 6
ACTION: result = avl2.find(int3) 
int3 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046d8950> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
result = avl2.inorder()                                                  # STEP 7
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x1046d8950> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int3 = 3                                                                 # STEP 8
ACTION: int3 = 3 
int3 = 8 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
avl2 == avl1                                                             # STEP 9
ACTION: avl2 == avl1 
avl2 = <avl.AVLTree instance at 0x1046d8950> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x1046d8638> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
result = avl2.find(int2)                                                # STEP 10
ACTION: result = avl2.find(int2) 
int2 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046d8950> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl2.insert(int0)                                                       # STEP 11
ACTION: avl2.insert(int0) 
int0 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046d8950> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([14]) : <type 'set'>
==================================================
int0 = 17                                                               # STEP 12
ACTION: int0 = 17 
int0 = 14 : <type 'int'>
=> int0 = 17 : <type 'int'>
==================================================
result = avl1.find(int3)                                                # STEP 13
ACTION: result = avl1.find(int3) 
int3 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1046d8638> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
int2 = 4                                                                # STEP 14
ACTION: int2 = 4 
int2 = 20 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
int3 = 11                                                               # STEP 15
ACTION: int3 = 11 
int3 = 3 : <type 'int'>
=> int3 = 11 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 16
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x10447c170> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 17
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1046d8638> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
result = avl1.find(int2)                                                # STEP 18
ACTION: result = avl1.find(int2) 
int2 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1046d8638> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl2 == avl1                                                            # STEP 19
ACTION: avl2 == avl1 
avl2 = <avl.AVLTree instance at 0x1046d8950> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x1046d8638> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
avl1 == avl2                                                            # STEP 20
ACTION: avl1 == avl2 
avl1 = <avl.AVLTree instance at 0x1046d8638> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x1046d8950> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
avl0 == avl0                                                            # STEP 21
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x10447c170> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
result = avl2.find(int0)                                                # STEP 22
ACTION: result = avl2.find(int0) 
int0 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046d8950> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
result = avl0.inorder()                                                 # STEP 23
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x10447c170> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int2 = 13                                                               # STEP 24
ACTION: int2 = 13 
int2 = 4 : <type 'int'>
=> int2 = 13 : <type 'int'>
==================================================
int0 = 15                                                               # STEP 25
ACTION: int0 = 15 
int0 = 17 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
result = avl1.find(int3)                                                # STEP 26
ACTION: result = avl1.find(int3) 
int3 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1046d8638> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
int3 = 7                                                                # STEP 27
ACTION: int3 = 7 
int3 = 11 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
result = avl2.find(int1)                                                # STEP 28
ACTION: result = avl2.find(int1) 
int1 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046d8950> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
result = avl1.find(int0)                                                # STEP 29
ACTION: result = avl1.find(int0) 
int0 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1046d8638> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
result = avl0.find(int3)                                                # STEP 30
ACTION: result = avl0.find(int3) 
int3 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10447c170> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
avl2.insert(int1)                                                       # STEP 31
ACTION: avl2.insert(int1) 
int1 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046d8950> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([13, 14]) : <type 'set'>
==================================================
int0 = 7                                                                # STEP 32
ACTION: int0 = 7 
int0 = 15 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 33
ACTION: avl0.delete(int2) 
int2 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10447c170> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int3 = 20                                                               # STEP 34
ACTION: int3 = 20 
int3 = 7 : <type 'int'>
=> int3 = 20 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 35
ACTION: avl0 = avl.AVLTree() 
avl0 = <avl.AVLTree instance at 0x10447c170> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
=> avl0 = <avl.AVLTree instance at 0x1042b53b0> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
==================================================
avl2.insert(int2)                                                       # STEP 36
ACTION: avl2.insert(int2) 
int2 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046d8950> : <type 'instance'>
avl_REF2 = set([13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
int2 = 18                                                               # STEP 37
ACTION: int2 = 18 
int2 = 13 : <type 'int'>
=> int2 = 18 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 38
ACTION: avl0.insert(int2) 
int2 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1042b53b0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([18]) : <type 'set'>
==================================================
avl2 == avl1                                                            # STEP 39
ACTION: avl2 == avl1 
avl2 = <avl.AVLTree instance at 0x1046d8950> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x1046d8638> : <type 'instance'>
avl_REF2 = set([13, 14]) : <type 'set'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
int1 = 5                                                                # STEP 40
ACTION: int1 = 5 
int1 = 13 : <type 'int'>
=> int1 = 5 : <type 'int'>
==================================================
int2 = 11                                                               # STEP 41
ACTION: int2 = 11 
int2 = 18 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
result = avl1.find(int0)                                                # STEP 42
ACTION: result = avl1.find(int0) 
int0 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1046d8638> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
int0 = 16                                                               # STEP 43
ACTION: int0 = 16 
int0 = 7 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
result = avl0.find(int2)                                                # STEP 44
ACTION: result = avl0.find(int2) 
int2 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1042b53b0> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
result = avl1.find(int0)                                                # STEP 45
ACTION: result = avl1.find(int0) 
int0 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1046d8638> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
int2 = 7                                                                # STEP 46
ACTION: int2 = 7 
int2 = 11 : <type 'int'>
=> int2 = 7 : <type 'int'>
==================================================
int0 = 12                                                               # STEP 47
ACTION: int0 = 12 
int0 = 16 : <type 'int'>
=> int0 = 12 : <type 'int'>
==================================================
result = avl0.find(int3)                                                # STEP 48
ACTION: result = avl0.find(int3) 
int3 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1042b53b0> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
avl0 == avl0                                                            # STEP 49
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x1042b53b0> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl0 == avl0                                                            # STEP 50
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x1042b53b0> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
int3 = 3                                                                # STEP 51
ACTION: int3 = 3 
int3 = 20 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 52
ACTION: avl2.insert(int2) 
int2 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046d8950> : <type 'instance'>
avl_REF2 = set([13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([13, 14, 7]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 53
ACTION: avl0.delete(int0) 
int0 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1042b53b0> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int0 = 15                                                               # STEP 54
ACTION: int0 = 15 
int0 = 12 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 55
ACTION: avl1.delete(int0) 
int0 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1046d8638> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int2 = 16                                                               # STEP 56
ACTION: int2 = 16 
int2 = 7 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
avl2 == avl2                                                            # STEP 57
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x1046d8950> : <type 'instance'>
avl_REF2 = set([13, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
int0 = 19                                                               # STEP 58
ACTION: int0 = 19 
int0 = 15 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 59
ACTION: avl2.insert(int0) 
int0 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046d8950> : <type 'instance'>
avl_REF2 = set([13, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([19, 13, 14, 7]) : <type 'set'>
==================================================
int0 = 16                                                               # STEP 60
ACTION: int0 = 16 
int0 = 19 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 61
ACTION: avl0.insert(int3) 
int3 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1042b53b0> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([18, 3]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 62
ACTION: avl1.delete(int2) 
int2 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1046d8638> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl0.insert(int1)                                                       # STEP 63
ACTION: avl0.insert(int1) 
int1 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1042b53b0> : <type 'instance'>
avl_REF0 = set([18, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([18, 3, 5]) : <type 'set'>
==================================================
avl2 == avl1                                                            # STEP 64
ACTION: avl2 == avl1 
avl2 = <avl.AVLTree instance at 0x1046d8950> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x1046d8638> : <type 'instance'>
avl_REF2 = set([19, 13, 14, 7]) : <type 'set'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
avl0.insert(int1)                                                       # STEP 65
ACTION: avl0.insert(int1) 
int1 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1042b53b0> : <type 'instance'>
avl_REF0 = set([18, 3, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
int3 = 12                                                               # STEP 66
ACTION: int3 = 12 
int3 = 3 : <type 'int'>
=> int3 = 12 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 67
ACTION: avl1 = avl.AVLTree() 
avl1 = <avl.AVLTree instance at 0x1046d8638> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
=> avl1 = <avl.AVLTree instance at 0x10478a638> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
==================================================
int2 = 15                                                               # STEP 68
ACTION: int2 = 15 
int2 = 16 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
result = avl2.find(int3)                                                # STEP 69
ACTION: result = avl2.find(int3) 
int3 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046d8950> : <type 'instance'>
avl_REF2 = set([19, 13, 14, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
int3 = 7                                                                # STEP 70
ACTION: int3 = 7 
int3 = 12 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
int1 = 20                                                               # STEP 71
ACTION: int1 = 20 
int1 = 5 : <type 'int'>
=> int1 = 20 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 72
ACTION: avl0.delete(int2) 
int2 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1042b53b0> : <type 'instance'>
avl_REF0 = set([18, 3, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int2 = 5                                                                # STEP 73
ACTION: int2 = 5 
int2 = 15 : <type 'int'>
=> int2 = 5 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 74
ACTION: avl2.delete(int3) 
int3 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046d8950> : <type 'instance'>
avl_REF2 = set([19, 13, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([19, 13, 14]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1047aecb0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
  10 [3:1]
-- < 7 [2:1]
---- < 5 [1:1]
------ < 1 [0:0] L
---- > 9 [0:0] L
-- > 11 [1:-1]
---- > 20 [0:0] L
set([1, 5, 7, 9, 10, 11, 20])
TEST #3 STEP #94 (0:00:30.077574) Fri Apr 28 08:02:27 2017 [ 144 stmts 192 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105884050>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 90 steps

SAVING TEST AS failure.1049.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 20                                                                # STEP 0
ACTION: int1 = 20 
int1 = None : <type 'NoneType'>
=> int1 = 20 : <type 'int'>
==================================================
int3 = 3                                                                 # STEP 1
ACTION: int3 = 3 
int3 = None : <type 'NoneType'>
=> int3 = 3 : <type 'int'>
==================================================
int0 = 10                                                                # STEP 2
ACTION: int0 = 10 
int0 = None : <type 'NoneType'>
=> int0 = 10 : <type 'int'>
==================================================
int2 = 20                                                                # STEP 3
ACTION: int2 = 20 
int2 = None : <type 'NoneType'>
=> int2 = 20 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x1058843b0> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.insert(int0)                                                        # STEP 5
ACTION: avl1.insert(int0) 
int0 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058843b0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([10]) : <type 'set'>
==================================================
int0 = 4                                                                 # STEP 6
ACTION: int0 = 4 
int0 = 10 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
avl1.insert(int1)                                                        # STEP 7
ACTION: avl1.insert(int1) 
int1 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058843b0> : <type 'instance'>
avl_REF1 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([10, 20]) : <type 'set'>
==================================================
result = avl1.find(int3)                                                 # STEP 8
ACTION: result = avl1.find(int3) 
int3 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058843b0> : <type 'instance'>
avl_REF1 = set([10, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl1.delete(int2)                                                        # STEP 9
ACTION: avl1.delete(int2) 
int2 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058843b0> : <type 'instance'>
avl_REF1 = set([10, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([10]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 10
ACTION: avl1.delete(int0) 
int0 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058843b0> : <type 'instance'>
avl_REF1 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int3 = 19                                                               # STEP 11
ACTION: int3 = 19 
int3 = 3 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
int2 = 18                                                               # STEP 12
ACTION: int2 = 18 
int2 = 20 : <type 'int'>
=> int2 = 18 : <type 'int'>
==================================================
int1 = 3                                                                # STEP 13
ACTION: int1 = 3 
int1 = 20 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
result = avl1.find(int1)                                                # STEP 14
ACTION: result = avl1.find(int1) 
int1 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058843b0> : <type 'instance'>
avl_REF1 = set([10]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int0 = 20                                                               # STEP 15
ACTION: int0 = 20 
int0 = 4 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
int1 = 11                                                               # STEP 16
ACTION: int1 = 11 
int1 = 3 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 17
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x10589a680> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 18
ACTION: avl1.delete(int2) 
int2 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058843b0> : <type 'instance'>
avl_REF1 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int2 = 4                                                                # STEP 19
ACTION: int2 = 4 
int2 = 18 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
result = avl2.find(int1)                                                # STEP 20
ACTION: result = avl2.find(int1) 
int1 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10589a680> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl2.delete(int2)                                                       # STEP 21
ACTION: avl2.delete(int2) 
int2 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10589a680> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int2 = 18                                                               # STEP 22
ACTION: int2 = 18 
int2 = 4 : <type 'int'>
=> int2 = 18 : <type 'int'>
==================================================
result = avl1.find(int2)                                                # STEP 23
ACTION: result = avl1.find(int2) 
int2 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058843b0> : <type 'instance'>
avl_REF1 = set([10]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
result = avl1.inorder()                                                 # STEP 24
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1058843b0> : <type 'instance'>
avl_REF1 = set([10]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int1 = 19                                                               # STEP 25
ACTION: int1 = 19 
int1 = 11 : <type 'int'>
=> int1 = 19 : <type 'int'>
==================================================
avl1 == avl2                                                            # STEP 26
ACTION: avl1 == avl2 
avl1 = <avl.AVLTree instance at 0x1058843b0> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x10589a680> : <type 'instance'>
avl_REF1 = set([10]) : <type 'set'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
result = avl1.find(int3)                                                # STEP 27
ACTION: result = avl1.find(int3) 
int3 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058843b0> : <type 'instance'>
avl_REF1 = set([10]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl1.delete(int0)                                                       # STEP 28
ACTION: avl1.delete(int0) 
int0 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058843b0> : <type 'instance'>
avl_REF1 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int3 = 13                                                               # STEP 29
ACTION: int3 = 13 
int3 = 19 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
int0 = 19                                                               # STEP 30
ACTION: int0 = 19 
int0 = 20 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 31
ACTION: avl1.insert(int3) 
int3 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058843b0> : <type 'instance'>
avl_REF1 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([10, 13]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 32
ACTION: avl1.insert(int0) 
int0 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058843b0> : <type 'instance'>
avl_REF1 = set([10, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([10, 19, 13]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 33
ACTION: avl1.insert(int2) 
int2 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058843b0> : <type 'instance'>
avl_REF1 = set([10, 19, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([18, 10, 19, 13]) : <type 'set'>
==================================================
avl1 == avl2                                                            # STEP 34
ACTION: avl1 == avl2 
avl1 = <avl.AVLTree instance at 0x1058843b0> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x10589a680> : <type 'instance'>
avl_REF1 = set([18, 10, 19, 13]) : <type 'set'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
int2 = 20                                                               # STEP 35
ACTION: int2 = 20 
int2 = 18 : <type 'int'>
=> int2 = 20 : <type 'int'>
==================================================
int0 = 14                                                               # STEP 36
ACTION: int0 = 14 
int0 = 19 : <type 'int'>
=> int0 = 14 : <type 'int'>
==================================================
int3 = 15                                                               # STEP 37
ACTION: int3 = 15 
int3 = 13 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 38
ACTION: avl2.insert(int0) 
int0 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10589a680> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([14]) : <type 'set'>
==================================================
avl1 == avl2                                                            # STEP 39
ACTION: avl1 == avl2 
avl1 = <avl.AVLTree instance at 0x1058843b0> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x10589a680> : <type 'instance'>
avl_REF1 = set([18, 10, 19, 13]) : <type 'set'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
avl1 == avl2                                                            # STEP 40
ACTION: avl1 == avl2 
avl1 = <avl.AVLTree instance at 0x1058843b0> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x10589a680> : <type 'instance'>
avl_REF1 = set([18, 10, 19, 13]) : <type 'set'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
avl2 == avl2                                                            # STEP 41
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x10589a680> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
int0 = 5                                                                # STEP 42
ACTION: int0 = 5 
int0 = 14 : <type 'int'>
=> int0 = 5 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 43
ACTION: avl2.insert(int1) 
int1 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10589a680> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([19, 14]) : <type 'set'>
==================================================
int1 = 19                                                               # STEP 44
ACTION: int1 = 19 
int1 = 19 : <type 'int'>
==================================================
result = avl1.find(int1)                                                # STEP 45
ACTION: result = avl1.find(int1) 
int1 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058843b0> : <type 'instance'>
avl_REF1 = set([18, 10, 19, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int1 = 4                                                                # STEP 46
ACTION: int1 = 4 
int1 = 19 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 47
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x10589a680> : <type 'instance'>
avl_REF2 = set([19, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl1.find(int3)                                                # STEP 48
ACTION: result = avl1.find(int3) 
int3 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058843b0> : <type 'instance'>
avl_REF1 = set([18, 10, 19, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
result = avl2.find(int3)                                                # STEP 49
ACTION: result = avl2.find(int3) 
int3 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10589a680> : <type 'instance'>
avl_REF2 = set([19, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
result = avl1.find(int3)                                                # STEP 50
ACTION: result = avl1.find(int3) 
int3 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058843b0> : <type 'instance'>
avl_REF1 = set([18, 10, 19, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
result = avl1.find(int0)                                                # STEP 51
ACTION: result = avl1.find(int0) 
int0 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058843b0> : <type 'instance'>
avl_REF1 = set([18, 10, 19, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl1.delete(int2)                                                       # STEP 52
ACTION: avl1.delete(int2) 
int2 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058843b0> : <type 'instance'>
avl_REF1 = set([18, 10, 19, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int2 = 17                                                               # STEP 53
ACTION: int2 = 17 
int2 = 20 : <type 'int'>
=> int2 = 17 : <type 'int'>
==================================================
int0 = 20                                                               # STEP 54
ACTION: int0 = 20 
int0 = 5 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
int3 = 1                                                                # STEP 55
ACTION: int3 = 1 
int3 = 15 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 56
ACTION: avl2.insert(int0) 
int0 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10589a680> : <type 'instance'>
avl_REF2 = set([19, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([19, 20, 14]) : <type 'set'>
==================================================
int0 = 19                                                               # STEP 57
ACTION: int0 = 19 
int0 = 20 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
result = avl1.find(int1)                                                # STEP 58
ACTION: result = avl1.find(int1) 
int1 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058843b0> : <type 'instance'>
avl_REF1 = set([18, 10, 19, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl1 == avl1                                                            # STEP 59
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x1058843b0> : <type 'instance'>
avl_REF1 = set([18, 10, 19, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
int1 = 11                                                               # STEP 60
ACTION: int1 = 11 
int1 = 4 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 61
ACTION: avl2.delete(int0) 
int0 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10589a680> : <type 'instance'>
avl_REF2 = set([19, 20, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([20, 14]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 62
ACTION: avl2.insert(int2) 
int2 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10589a680> : <type 'instance'>
avl_REF2 = set([20, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([17, 20, 14]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 63
ACTION: avl1.insert(int2) 
int2 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058843b0> : <type 'instance'>
avl_REF1 = set([18, 10, 19, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([10, 13, 17, 18, 19]) : <type 'set'>
==================================================
int2 = 17                                                               # STEP 64
ACTION: int2 = 17 
int2 = 17 : <type 'int'>
==================================================
result = avl2.find(int2)                                                # STEP 65
ACTION: result = avl2.find(int2) 
int2 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10589a680> : <type 'instance'>
avl_REF2 = set([17, 20, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int2 = 2                                                                # STEP 66
ACTION: int2 = 2 
int2 = 17 : <type 'int'>
=> int2 = 2 : <type 'int'>
==================================================
result = avl2.find(int2)                                                # STEP 67
ACTION: result = avl2.find(int2) 
int2 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10589a680> : <type 'instance'>
avl_REF2 = set([17, 20, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl1.insert(int3)                                                       # STEP 68
ACTION: avl1.insert(int3) 
int3 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058843b0> : <type 'instance'>
avl_REF1 = set([10, 13, 17, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([1, 10, 13, 17, 18, 19]) : <type 'set'>
==================================================
int0 = 10                                                               # STEP 69
ACTION: int0 = 10 
int0 = 19 : <type 'int'>
=> int0 = 10 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 70
ACTION: avl1.insert(int2) 
int2 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058843b0> : <type 'instance'>
avl_REF1 = set([1, 10, 13, 17, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([1, 2, 10, 13, 17, 18, 19]) : <type 'set'>
==================================================
result = avl2.find(int2)                                                # STEP 71
ACTION: result = avl2.find(int2) 
int2 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10589a680> : <type 'instance'>
avl_REF2 = set([17, 20, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl1.delete(int3)                                                       # STEP 72
ACTION: avl1.delete(int3) 
int3 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058843b0> : <type 'instance'>
avl_REF1 = set([1, 2, 10, 13, 17, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([2, 10, 13, 17, 18, 19]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 73
ACTION: avl1.insert(int1) 
int1 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058843b0> : <type 'instance'>
avl_REF1 = set([2, 10, 13, 17, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([2, 10, 11, 13, 17, 18, 19]) : <type 'set'>
==================================================
int3 = 15                                                               # STEP 74
ACTION: int3 = 15 
int3 = 1 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
int1 = 9                                                                # STEP 75
ACTION: int1 = 9 
int1 = 11 : <type 'int'>
=> int1 = 9 : <type 'int'>
==================================================
int2 = 19                                                               # STEP 76
ACTION: int2 = 19 
int2 = 2 : <type 'int'>
=> int2 = 19 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 77
ACTION: avl2.insert(int3) 
int3 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10589a680> : <type 'instance'>
avl_REF2 = set([17, 20, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([17, 20, 14, 15]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 78
ACTION: avl1.insert(int2) 
int2 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058843b0> : <type 'instance'>
avl_REF1 = set([2, 10, 11, 13, 17, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
int3 = 3                                                                # STEP 79
ACTION: int3 = 3 
int3 = 15 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 80
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x10587b248> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int2 = 11                                                               # STEP 81
ACTION: int2 = 11 
int2 = 19 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 82
ACTION: avl0.insert(int2) 
int2 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10587b248> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([11]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 83
ACTION: avl1.delete(int0) 
int0 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058843b0> : <type 'instance'>
avl_REF1 = set([2, 10, 11, 13, 17, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([2, 11, 13, 17, 18, 19]) : <type 'set'>
==================================================
int0 = 16                                                               # STEP 84
ACTION: int0 = 16 
int0 = 10 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 85
ACTION: avl2 = avl.AVLTree() 
avl2 = <avl.AVLTree instance at 0x10589a680> : <type 'instance'>
avl_REF2 = set([17, 20, 14, 15]) : <type 'set'>
=> avl2 = <avl.AVLTree instance at 0x10587bf80> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl2.find(int2)                                                # STEP 86
ACTION: result = avl2.find(int2) 
int2 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10587bf80> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl1.insert(int0)                                                       # STEP 87
ACTION: avl1.insert(int0) 
int0 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058843b0> : <type 'instance'>
avl_REF1 = set([2, 11, 13, 17, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([2, 11, 13, 16, 17, 18, 19]) : <type 'set'>
==================================================
int0 = 19                                                               # STEP 88
ACTION: int0 = 19 
int0 = 16 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 89
ACTION: avl1.delete(int2) 
int2 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058843b0> : <type 'instance'>
avl_REF1 = set([2, 11, 13, 16, 17, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([2, 13, 16, 17, 18, 19]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10584f5f0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 83
STOPPING TESTING DUE TO TIMEOUT
8.44927044452 PERCENT COVERED
60.2115619183 TOTAL RUNTIME
6 EXECUTED
548 TOTAL TEST OPERATIONS
22.9950051308 TIME SPENT EXECUTING TEST OPERATIONS
0.0190455913544 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
23.1936275959 TIME SPENT CHECKING PROPERTIES
46.1886327267 TOTAL TIME SPENT RUNNING SUT
0.00380158424377 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
2 FAILED
0 REPEATS OF FAILURES
2 ACTUAL DISTINCT FAILURES

FAILURE 0
int1 = 13                                                                # STEP 0
int3 = 8                                                                 # STEP 1
int2 = 20                                                                # STEP 2
int0 = 14                                                                # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
avl1 = avl.AVLTree()                                                     # STEP 5
result = avl2.find(int3)                                                 # STEP 6
result = avl2.inorder()                                                  # STEP 7
int3 = 3                                                                 # STEP 8
avl2 == avl1                                                             # STEP 9
result = avl2.find(int2)                                                # STEP 10
avl2.insert(int0)                                                       # STEP 11
int0 = 17                                                               # STEP 12
result = avl1.find(int3)                                                # STEP 13
int2 = 4                                                                # STEP 14
int3 = 11                                                               # STEP 15
avl0 = avl.AVLTree()                                                    # STEP 16
result = avl1.inorder()                                                 # STEP 17
result = avl1.find(int2)                                                # STEP 18
avl2 == avl1                                                            # STEP 19
avl1 == avl2                                                            # STEP 20
avl0 == avl0                                                            # STEP 21
result = avl2.find(int0)                                                # STEP 22
result = avl0.inorder()                                                 # STEP 23
int2 = 13                                                               # STEP 24
int0 = 15                                                               # STEP 25
result = avl1.find(int3)                                                # STEP 26
int3 = 7                                                                # STEP 27
result = avl2.find(int1)                                                # STEP 28
result = avl1.find(int0)                                                # STEP 29
result = avl0.find(int3)                                                # STEP 30
avl2.insert(int1)                                                       # STEP 31
int0 = 7                                                                # STEP 32
avl0.delete(int2)                                                       # STEP 33
int3 = 20                                                               # STEP 34
avl0 = avl.AVLTree()                                                    # STEP 35
avl2.insert(int2)                                                       # STEP 36
int2 = 18                                                               # STEP 37
avl0.insert(int2)                                                       # STEP 38
avl2 == avl1                                                            # STEP 39
int1 = 5                                                                # STEP 40
int2 = 11                                                               # STEP 41
result = avl1.find(int0)                                                # STEP 42
int0 = 16                                                               # STEP 43
result = avl0.find(int2)                                                # STEP 44
result = avl1.find(int0)                                                # STEP 45
int2 = 7                                                                # STEP 46
int0 = 12                                                               # STEP 47
result = avl0.find(int3)                                                # STEP 48
avl0 == avl0                                                            # STEP 49
avl0 == avl0                                                            # STEP 50
int3 = 3                                                                # STEP 51
avl2.insert(int2)                                                       # STEP 52
avl0.delete(int0)                                                       # STEP 53
int0 = 15                                                               # STEP 54
avl1.delete(int0)                                                       # STEP 55
int2 = 16                                                               # STEP 56
avl2 == avl2                                                            # STEP 57
int0 = 19                                                               # STEP 58
avl2.insert(int0)                                                       # STEP 59
int0 = 16                                                               # STEP 60
avl0.insert(int3)                                                       # STEP 61
avl1.delete(int2)                                                       # STEP 62
avl0.insert(int1)                                                       # STEP 63
avl2 == avl1                                                            # STEP 64
avl0.insert(int1)                                                       # STEP 65
int3 = 12                                                               # STEP 66
avl1 = avl.AVLTree()                                                    # STEP 67
int2 = 15                                                               # STEP 68
result = avl2.find(int3)                                                # STEP 69
int3 = 7                                                                # STEP 70
int1 = 20                                                               # STEP 71
avl0.delete(int2)                                                       # STEP 72
int2 = 5                                                                # STEP 73
avl2.delete(int3)                                                       # STEP 74
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1047aecb0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE 1
int1 = 20                                                                # STEP 0
int3 = 3                                                                 # STEP 1
int0 = 10                                                                # STEP 2
int2 = 20                                                                # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
avl1.insert(int0)                                                        # STEP 5
int0 = 4                                                                 # STEP 6
avl1.insert(int1)                                                        # STEP 7
result = avl1.find(int3)                                                 # STEP 8
avl1.delete(int2)                                                        # STEP 9
avl1.delete(int0)                                                       # STEP 10
int3 = 19                                                               # STEP 11
int2 = 18                                                               # STEP 12
int1 = 3                                                                # STEP 13
result = avl1.find(int1)                                                # STEP 14
int0 = 20                                                               # STEP 15
int1 = 11                                                               # STEP 16
avl2 = avl.AVLTree()                                                    # STEP 17
avl1.delete(int2)                                                       # STEP 18
int2 = 4                                                                # STEP 19
result = avl2.find(int1)                                                # STEP 20
avl2.delete(int2)                                                       # STEP 21
int2 = 18                                                               # STEP 22
result = avl1.find(int2)                                                # STEP 23
result = avl1.inorder()                                                 # STEP 24
int1 = 19                                                               # STEP 25
avl1 == avl2                                                            # STEP 26
result = avl1.find(int3)                                                # STEP 27
avl1.delete(int0)                                                       # STEP 28
int3 = 13                                                               # STEP 29
int0 = 19                                                               # STEP 30
avl1.insert(int3)                                                       # STEP 31
avl1.insert(int0)                                                       # STEP 32
avl1.insert(int2)                                                       # STEP 33
avl1 == avl2                                                            # STEP 34
int2 = 20                                                               # STEP 35
int0 = 14                                                               # STEP 36
int3 = 15                                                               # STEP 37
avl2.insert(int0)                                                       # STEP 38
avl1 == avl2                                                            # STEP 39
avl1 == avl2                                                            # STEP 40
avl2 == avl2                                                            # STEP 41
int0 = 5                                                                # STEP 42
avl2.insert(int1)                                                       # STEP 43
int1 = 19                                                               # STEP 44
result = avl1.find(int1)                                                # STEP 45
int1 = 4                                                                # STEP 46
result = avl2.inorder()                                                 # STEP 47
result = avl1.find(int3)                                                # STEP 48
result = avl2.find(int3)                                                # STEP 49
result = avl1.find(int3)                                                # STEP 50
result = avl1.find(int0)                                                # STEP 51
avl1.delete(int2)                                                       # STEP 52
int2 = 17                                                               # STEP 53
int0 = 20                                                               # STEP 54
int3 = 1                                                                # STEP 55
avl2.insert(int0)                                                       # STEP 56
int0 = 19                                                               # STEP 57
result = avl1.find(int1)                                                # STEP 58
avl1 == avl1                                                            # STEP 59
int1 = 11                                                               # STEP 60
avl2.delete(int0)                                                       # STEP 61
avl2.insert(int2)                                                       # STEP 62
avl1.insert(int2)                                                       # STEP 63
int2 = 17                                                               # STEP 64
result = avl2.find(int2)                                                # STEP 65
int2 = 2                                                                # STEP 66
result = avl2.find(int2)                                                # STEP 67
avl1.insert(int3)                                                       # STEP 68
int0 = 10                                                               # STEP 69
avl1.insert(int2)                                                       # STEP 70
result = avl2.find(int2)                                                # STEP 71
avl1.delete(int3)                                                       # STEP 72
avl1.insert(int1)                                                       # STEP 73
int3 = 15                                                               # STEP 74
int1 = 9                                                                # STEP 75
int2 = 19                                                               # STEP 76
avl2.insert(int3)                                                       # STEP 77
avl1.insert(int2)                                                       # STEP 78
int3 = 3                                                                # STEP 79
avl0 = avl.AVLTree()                                                    # STEP 80
int2 = 11                                                               # STEP 81
avl0.insert(int2)                                                       # STEP 82
avl1.delete(int0)                                                       # STEP 83
int0 = 16                                                               # STEP 84
avl2 = avl.AVLTree()                                                    # STEP 85
result = avl2.find(int2)                                                # STEP 86
avl1.insert(int0)                                                       # STEP 87
int0 = 19                                                               # STEP 88
avl1.delete(int2)                                                       # STEP 89
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10584f5f0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
212 BRANCHES COVERED
160 STATEMENTS COVERED

Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.99508.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104a41d88>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 62 steps

SAVING TEST AS failure.99508.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 3                                                                 # STEP 0
ACTION: int3 = 3 
int3 = None : <type 'NoneType'>
=> int3 = 3 : <type 'int'>
==================================================
int2 = 15                                                                # STEP 1
ACTION: int2 = 15 
int2 = None : <type 'NoneType'>
=> int2 = 15 : <type 'int'>
==================================================
int1 = 9                                                                 # STEP 2
ACTION: int1 = 9 
int1 = None : <type 'NoneType'>
=> int1 = 9 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 3
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x104c6e518> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int0 = 8                                                                 # STEP 4
ACTION: int0 = 8 
int0 = None : <type 'NoneType'>
=> int0 = 8 : <type 'int'>
==================================================
avl1.delete(int1)                                                        # STEP 5
ACTION: avl1.delete(int1) 
int1 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c6e518> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int1 = 18                                                                # STEP 6
ACTION: int1 = 18 
int1 = 9 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
avl1.delete(int2)                                                        # STEP 7
ACTION: avl1.delete(int2) 
int2 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c6e518> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int2 = 16                                                                # STEP 8
ACTION: int2 = 16 
int2 = 15 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
avl1.delete(int0)                                                        # STEP 9
ACTION: avl1.delete(int0) 
int0 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c6e518> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int0 = 18                                                               # STEP 10
ACTION: int0 = 18 
int0 = 8 : <type 'int'>
=> int0 = 18 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 11
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x10581cef0> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 12
ACTION: avl2.insert(int1) 
int1 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10581cef0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([18]) : <type 'set'>
==================================================
result = avl1.find(int3)                                                # STEP 13
ACTION: result = avl1.find(int3) 
int3 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c6e518> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl2 == avl1                                                            # STEP 14
ACTION: avl2 == avl1 
avl2 = <avl.AVLTree instance at 0x10581cef0> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x104c6e518> : <type 'instance'>
avl_REF2 = set([18]) : <type 'set'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
avl1.delete(int1)                                                       # STEP 15
ACTION: avl1.delete(int1) 
int1 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c6e518> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int1 = 3                                                                # STEP 16
ACTION: int1 = 3 
int1 = 18 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 17
ACTION: avl1.delete(int0) 
int0 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c6e518> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int3 = 19                                                               # STEP 18
ACTION: int3 = 19 
int3 = 3 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 19
ACTION: avl1.insert(int2) 
int2 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c6e518> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([16]) : <type 'set'>
==================================================
result = avl2.find(int0)                                                # STEP 20
ACTION: result = avl2.find(int0) 
int0 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10581cef0> : <type 'instance'>
avl_REF2 = set([18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
int0 = 16                                                               # STEP 21
ACTION: int0 = 16 
int0 = 18 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
int2 = 19                                                               # STEP 22
ACTION: int2 = 19 
int2 = 16 : <type 'int'>
=> int2 = 19 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 23
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104c6e518> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.delete(int2)                                                       # STEP 24
ACTION: avl1.delete(int2) 
int2 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c6e518> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int2 = 20                                                               # STEP 25
ACTION: int2 = 20 
int2 = 19 : <type 'int'>
=> int2 = 20 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 26
ACTION: avl1.insert(int1) 
int1 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c6e518> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([16, 3]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 27
ACTION: avl1.delete(int3) 
int3 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c6e518> : <type 'instance'>
avl_REF1 = set([16, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl2.insert(int1)                                                       # STEP 28
ACTION: avl2.insert(int1) 
int1 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10581cef0> : <type 'instance'>
avl_REF2 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([18, 3]) : <type 'set'>
==================================================
int1 = 9                                                                # STEP 29
ACTION: int1 = 9 
int1 = 3 : <type 'int'>
=> int1 = 9 : <type 'int'>
==================================================
result = avl2.find(int1)                                                # STEP 30
ACTION: result = avl2.find(int1) 
int1 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10581cef0> : <type 'instance'>
avl_REF2 = set([18, 3]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int1 = 6                                                                # STEP 31
ACTION: int1 = 6 
int1 = 9 : <type 'int'>
=> int1 = 6 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 32
ACTION: avl1.delete(int3) 
int3 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c6e518> : <type 'instance'>
avl_REF1 = set([16, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
result = avl2.inorder()                                                 # STEP 33
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x10581cef0> : <type 'instance'>
avl_REF2 = set([18, 3]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int3 = 14                                                               # STEP 34
ACTION: int3 = 14 
int3 = 19 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
avl2 == avl1                                                            # STEP 35
ACTION: avl2 == avl1 
avl2 = <avl.AVLTree instance at 0x10581cef0> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x104c6e518> : <type 'instance'>
avl_REF2 = set([18, 3]) : <type 'set'>
avl_REF1 = set([16, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
result = avl2.find(int0)                                                # STEP 36
ACTION: result = avl2.find(int0) 
int0 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10581cef0> : <type 'instance'>
avl_REF2 = set([18, 3]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl1.delete(int2)                                                       # STEP 37
ACTION: avl1.delete(int2) 
int2 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c6e518> : <type 'instance'>
avl_REF1 = set([16, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl2.insert(int3)                                                       # STEP 38
ACTION: avl2.insert(int3) 
int3 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10581cef0> : <type 'instance'>
avl_REF2 = set([18, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([18, 3, 14]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 39
ACTION: avl2.insert(int3) 
int3 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10581cef0> : <type 'instance'>
avl_REF2 = set([18, 3, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
int0 = 12                                                               # STEP 40
ACTION: int0 = 12 
int0 = 16 : <type 'int'>
=> int0 = 12 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 41
ACTION: avl1.insert(int2) 
int2 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c6e518> : <type 'instance'>
avl_REF1 = set([16, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([16, 3, 20]) : <type 'set'>
==================================================
int2 = 14                                                               # STEP 42
ACTION: int2 = 14 
int2 = 20 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 43
ACTION: avl2.delete(int2) 
int2 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10581cef0> : <type 'instance'>
avl_REF2 = set([18, 3, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([18, 3]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 44
ACTION: avl2.insert(int2) 
int2 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10581cef0> : <type 'instance'>
avl_REF2 = set([18, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([18, 3, 14]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 45
ACTION: avl1.delete(int0) 
int0 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c6e518> : <type 'instance'>
avl_REF1 = set([16, 3, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int3 = 8                                                                # STEP 46
ACTION: int3 = 8 
int3 = 14 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
int0 = 12                                                               # STEP 47
ACTION: int0 = 12 
int0 = 12 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 48
ACTION: avl2.insert(int2) 
int2 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10581cef0> : <type 'instance'>
avl_REF2 = set([18, 3, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl2.insert(int1)                                                       # STEP 49
ACTION: avl2.insert(int1) 
int1 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10581cef0> : <type 'instance'>
avl_REF2 = set([18, 3, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([18, 3, 6, 14]) : <type 'set'>
==================================================
int1 = 10                                                               # STEP 50
ACTION: int1 = 10 
int1 = 6 : <type 'int'>
=> int1 = 10 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 51
ACTION: avl1.insert(int3) 
int3 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c6e518> : <type 'instance'>
avl_REF1 = set([16, 3, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([16, 8, 3, 20]) : <type 'set'>
==================================================
int2 = 9                                                                # STEP 52
ACTION: int2 = 9 
int2 = 14 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
int3 = 16                                                               # STEP 53
ACTION: int3 = 16 
int3 = 8 : <type 'int'>
=> int3 = 16 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 54
ACTION: avl1.delete(int0) 
int0 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c6e518> : <type 'instance'>
avl_REF1 = set([16, 8, 3, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int0 = 11                                                               # STEP 55
ACTION: int0 = 11 
int0 = 12 : <type 'int'>
=> int0 = 11 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 56
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x1058fbc68> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 57
ACTION: avl1.insert(int3) 
int3 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c6e518> : <type 'instance'>
avl_REF1 = set([16, 8, 3, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
avl1.insert(int2)                                                       # STEP 58
ACTION: avl1.insert(int2) 
int2 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c6e518> : <type 'instance'>
avl_REF1 = set([16, 8, 3, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([16, 8, 3, 20, 9]) : <type 'set'>
==================================================
result = avl0.find(int2)                                                # STEP 59
ACTION: result = avl0.find(int2) 
int2 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058fbc68> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
int2 = 17                                                               # STEP 60
ACTION: int2 = 17 
int2 = 9 : <type 'int'>
=> int2 = 17 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 61
ACTION: avl1.delete(int3) 
int3 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c6e518> : <type 'instance'>
avl_REF1 = set([16, 8, 3, 20, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([8, 3, 20, 9]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1058e9b48>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104f3dfc8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 74 steps

SAVING TEST AS failure.99508.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 4                                                                 # STEP 0
ACTION: int1 = 4 
int1 = None : <type 'NoneType'>
=> int1 = 4 : <type 'int'>
==================================================
int0 = 20                                                                # STEP 1
ACTION: int0 = 20 
int0 = None : <type 'NoneType'>
=> int0 = 20 : <type 'int'>
==================================================
int2 = 6                                                                 # STEP 2
ACTION: int2 = 6 
int2 = None : <type 'NoneType'>
=> int2 = 6 : <type 'int'>
==================================================
int3 = 11                                                                # STEP 3
ACTION: int3 = 11 
int3 = None : <type 'NoneType'>
=> int3 = 11 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x104bf0290> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
result = avl1.inorder()                                                  # STEP 5
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104bf0290> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int2)                                                        # STEP 6
ACTION: avl1.insert(int2) 
int2 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104bf0290> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([6]) : <type 'set'>
==================================================
avl1.delete(int3)                                                        # STEP 7
ACTION: avl1.delete(int3) 
int3 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104bf0290> : <type 'instance'>
avl_REF1 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1 = avl.AVLTree()                                                     # STEP 8
ACTION: avl1 = avl.AVLTree() 
avl1 = <avl.AVLTree instance at 0x104bf0290> : <type 'instance'>
avl_REF1 = set([6]) : <type 'set'>
=> avl1 = <avl.AVLTree instance at 0x104bf0e18> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int3 = 17                                                                # STEP 9
ACTION: int3 = 17 
int3 = 11 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
result = avl1.find(int1)                                                # STEP 10
ACTION: result = avl1.find(int1) 
int1 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104bf0e18> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int1 = 1                                                                # STEP 11
ACTION: int1 = 1 
int1 = 4 : <type 'int'>
=> int1 = 1 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 12
ACTION: avl1.insert(int2) 
int2 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104bf0e18> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([6]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 13
ACTION: avl1.insert(int0) 
int0 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104bf0e18> : <type 'instance'>
avl_REF1 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([20, 6]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 14
ACTION: avl1.insert(int2) 
int2 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104bf0e18> : <type 'instance'>
avl_REF1 = set([20, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
int0 = 2                                                                # STEP 15
ACTION: int0 = 2 
int0 = 20 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 16
ACTION: avl1.insert(int1) 
int1 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104bf0e18> : <type 'instance'>
avl_REF1 = set([20, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([1, 20, 6]) : <type 'set'>
==================================================
int1 = 20                                                               # STEP 17
ACTION: int1 = 20 
int1 = 1 : <type 'int'>
=> int1 = 20 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 18
ACTION: avl1.delete(int2) 
int2 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104bf0e18> : <type 'instance'>
avl_REF1 = set([1, 20, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([1, 20]) : <type 'set'>
==================================================
int2 = 16                                                               # STEP 19
ACTION: int2 = 16 
int2 = 6 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 20
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x104be5e18> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 21
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x104f04170> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 22
ACTION: avl1.insert(int3) 
int3 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104bf0e18> : <type 'instance'>
avl_REF1 = set([1, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([1, 20, 17]) : <type 'set'>
==================================================
int3 = 5                                                                # STEP 23
ACTION: int3 = 5 
int3 = 17 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
result = avl0.find(int0)                                                # STEP 24
ACTION: result = avl0.find(int0) 
int0 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f04170> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
result = avl2.find(int2)                                                # STEP 25
ACTION: result = avl2.find(int2) 
int2 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104be5e18> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl1 == avl2                                                            # STEP 26
ACTION: avl1 == avl2 
avl1 = <avl.AVLTree instance at 0x104bf0e18> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x104be5e18> : <type 'instance'>
avl_REF1 = set([1, 20, 17]) : <type 'set'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
avl0.insert(int1)                                                       # STEP 27
ACTION: avl0.insert(int1) 
int1 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f04170> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([20]) : <type 'set'>
==================================================
int1 = 10                                                               # STEP 28
ACTION: int1 = 10 
int1 = 20 : <type 'int'>
=> int1 = 10 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 29
ACTION: avl0.delete(int1) 
int1 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f04170> : <type 'instance'>
avl_REF0 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl1.delete(int0)                                                       # STEP 30
ACTION: avl1.delete(int0) 
int0 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104bf0e18> : <type 'instance'>
avl_REF1 = set([1, 20, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
result = avl2.find(int1)                                                # STEP 31
ACTION: result = avl2.find(int1) 
int1 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104be5e18> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int2 = 20                                                               # STEP 32
ACTION: int2 = 20 
int2 = 16 : <type 'int'>
=> int2 = 20 : <type 'int'>
==================================================
result = avl2.find(int1)                                                # STEP 33
ACTION: result = avl2.find(int1) 
int1 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104be5e18> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
result = avl0.inorder()                                                 # STEP 34
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104f04170> : <type 'instance'>
avl_REF0 = set([20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.delete(int0)                                                       # STEP 35
ACTION: avl0.delete(int0) 
int0 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f04170> : <type 'instance'>
avl_REF0 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl1.insert(int2)                                                       # STEP 36
ACTION: avl1.insert(int2) 
int2 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104bf0e18> : <type 'instance'>
avl_REF1 = set([1, 20, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
result = avl2.find(int0)                                                # STEP 37
ACTION: result = avl2.find(int0) 
int0 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104be5e18> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
int2 = 11                                                               # STEP 38
ACTION: int2 = 11 
int2 = 20 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
int0 = 20                                                               # STEP 39
ACTION: int0 = 20 
int0 = 2 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
result = avl2.find(int1)                                                # STEP 40
ACTION: result = avl2.find(int1) 
int1 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104be5e18> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int1 = 8                                                                # STEP 41
ACTION: int1 = 8 
int1 = 10 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
result = avl2.find(int3)                                                # STEP 42
ACTION: result = avl2.find(int3) 
int3 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104be5e18> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
result = avl1.find(int0)                                                # STEP 43
ACTION: result = avl1.find(int0) 
int0 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104bf0e18> : <type 'instance'>
avl_REF1 = set([1, 20, 17]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
result = avl2.inorder()                                                 # STEP 44
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104be5e18> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int0 = 18                                                               # STEP 45
ACTION: int0 = 18 
int0 = 20 : <type 'int'>
=> int0 = 18 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 46
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104f04170> : <type 'instance'>
avl_REF0 = set([20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
result = avl2.find(int3)                                                # STEP 47
ACTION: result = avl2.find(int3) 
int3 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104be5e18> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
int3 = 16                                                               # STEP 48
ACTION: int3 = 16 
int3 = 5 : <type 'int'>
=> int3 = 16 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 49
ACTION: avl0.insert(int1) 
int1 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f04170> : <type 'instance'>
avl_REF0 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([8, 20]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 50
ACTION: avl2.insert(int2) 
int2 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104be5e18> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([11]) : <type 'set'>
==================================================
avl1 == avl2                                                            # STEP 51
ACTION: avl1 == avl2 
avl1 = <avl.AVLTree instance at 0x104bf0e18> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x104be5e18> : <type 'instance'>
avl_REF1 = set([1, 20, 17]) : <type 'set'>
avl_REF2 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
avl1.insert(int0)                                                       # STEP 52
ACTION: avl1.insert(int0) 
int0 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104bf0e18> : <type 'instance'>
avl_REF1 = set([1, 20, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([1, 18, 20, 17]) : <type 'set'>
==================================================
avl1 == avl0                                                            # STEP 53
ACTION: avl1 == avl0 
avl1 = <avl.AVLTree instance at 0x104bf0e18> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x104f04170> : <type 'instance'>
avl_REF1 = set([1, 18, 20, 17]) : <type 'set'>
avl_REF0 = set([8, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
int2 = 15                                                               # STEP 54
ACTION: int2 = 15 
int2 = 11 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 55
ACTION: avl0.delete(int3) 
int3 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f04170> : <type 'instance'>
avl_REF0 = set([8, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int1 = 19                                                               # STEP 56
ACTION: int1 = 19 
int1 = 8 : <type 'int'>
=> int1 = 19 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 57
ACTION: avl0.insert(int0) 
int0 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f04170> : <type 'instance'>
avl_REF0 = set([8, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([8, 18, 20]) : <type 'set'>
==================================================
int3 = 10                                                               # STEP 58
ACTION: int3 = 10 
int3 = 16 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
result = avl1.find(int3)                                                # STEP 59
ACTION: result = avl1.find(int3) 
int3 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104bf0e18> : <type 'instance'>
avl_REF1 = set([1, 18, 20, 17]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
int0 = 2                                                                # STEP 60
ACTION: int0 = 2 
int0 = 18 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 61
ACTION: avl1.delete(int3) 
int3 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104bf0e18> : <type 'instance'>
avl_REF1 = set([1, 18, 20, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int3 = 18                                                               # STEP 62
ACTION: int3 = 18 
int3 = 10 : <type 'int'>
=> int3 = 18 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 63
ACTION: avl2.delete(int0) 
int0 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104be5e18> : <type 'instance'>
avl_REF2 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int0 = 7                                                                # STEP 64
ACTION: int0 = 7 
int0 = 2 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 65
ACTION: avl2.delete(int1) 
int1 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104be5e18> : <type 'instance'>
avl_REF2 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int0)                                                       # STEP 66
ACTION: avl2.insert(int0) 
int0 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104be5e18> : <type 'instance'>
avl_REF2 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([11, 7]) : <type 'set'>
==================================================
result = avl0.find(int2)                                                # STEP 67
ACTION: result = avl0.find(int2) 
int2 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f04170> : <type 'instance'>
avl_REF0 = set([8, 18, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
int1 = 17                                                               # STEP 68
ACTION: int1 = 17 
int1 = 19 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
int0 = 1                                                                # STEP 69
ACTION: int0 = 1 
int0 = 7 : <type 'int'>
=> int0 = 1 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 70
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104f04170> : <type 'instance'>
avl_REF0 = set([8, 18, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
result = avl0.inorder()                                                 # STEP 71
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104f04170> : <type 'instance'>
avl_REF0 = set([8, 18, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl2 == avl0                                                            # STEP 72
ACTION: avl2 == avl0 
avl2 = <avl.AVLTree instance at 0x104be5e18> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x104f04170> : <type 'instance'>
avl_REF2 = set([11, 7]) : <type 'set'>
avl_REF0 = set([8, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF0 
==================================================
avl1.delete(int0)                                                       # STEP 73
ACTION: avl1.delete(int0) 
int0 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104bf0e18> : <type 'instance'>
avl_REF1 = set([1, 18, 20, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([18, 20, 17]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104c03e18>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
TEST #4 STEP #27 (0:00:30.021766) Fri Apr 28 04:10:13 2017 [ 146 stmts 193 branches ]
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 26
STOPPING TESTING DUE TO TIMEOUT
8.10994231422 PERCENT COVERED
60.2115199566 TOTAL RUNTIME
8 EXECUTED
662 TOTAL TEST OPERATIONS
24.8194215298 TIME SPENT EXECUTING TEST OPERATIONS
0.0215249061584 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
25.0357728004 TIME SPENT CHECKING PROPERTIES
49.8551943302 TOTAL TIME SPENT RUNNING SUT
0.00459241867065 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
2 FAILED
0 REPEATS OF FAILURES
2 ACTUAL DISTINCT FAILURES

FAILURE 0
int3 = 3                                                                 # STEP 0
int2 = 15                                                                # STEP 1
int1 = 9                                                                 # STEP 2
avl1 = avl.AVLTree()                                                     # STEP 3
int0 = 8                                                                 # STEP 4
avl1.delete(int1)                                                        # STEP 5
int1 = 18                                                                # STEP 6
avl1.delete(int2)                                                        # STEP 7
int2 = 16                                                                # STEP 8
avl1.delete(int0)                                                        # STEP 9
int0 = 18                                                               # STEP 10
avl2 = avl.AVLTree()                                                    # STEP 11
avl2.insert(int1)                                                       # STEP 12
result = avl1.find(int3)                                                # STEP 13
avl2 == avl1                                                            # STEP 14
avl1.delete(int1)                                                       # STEP 15
int1 = 3                                                                # STEP 16
avl1.delete(int0)                                                       # STEP 17
int3 = 19                                                               # STEP 18
avl1.insert(int2)                                                       # STEP 19
result = avl2.find(int0)                                                # STEP 20
int0 = 16                                                               # STEP 21
int2 = 19                                                               # STEP 22
result = avl1.inorder()                                                 # STEP 23
avl1.delete(int2)                                                       # STEP 24
int2 = 20                                                               # STEP 25
avl1.insert(int1)                                                       # STEP 26
avl1.delete(int3)                                                       # STEP 27
avl2.insert(int1)                                                       # STEP 28
int1 = 9                                                                # STEP 29
result = avl2.find(int1)                                                # STEP 30
int1 = 6                                                                # STEP 31
avl1.delete(int3)                                                       # STEP 32
result = avl2.inorder()                                                 # STEP 33
int3 = 14                                                               # STEP 34
avl2 == avl1                                                            # STEP 35
result = avl2.find(int0)                                                # STEP 36
avl1.delete(int2)                                                       # STEP 37
avl2.insert(int3)                                                       # STEP 38
avl2.insert(int3)                                                       # STEP 39
int0 = 12                                                               # STEP 40
avl1.insert(int2)                                                       # STEP 41
int2 = 14                                                               # STEP 42
avl2.delete(int2)                                                       # STEP 43
avl2.insert(int2)                                                       # STEP 44
avl1.delete(int0)                                                       # STEP 45
int3 = 8                                                                # STEP 46
int0 = 12                                                               # STEP 47
avl2.insert(int2)                                                       # STEP 48
avl2.insert(int1)                                                       # STEP 49
int1 = 10                                                               # STEP 50
avl1.insert(int3)                                                       # STEP 51
int2 = 9                                                                # STEP 52
int3 = 16                                                               # STEP 53
avl1.delete(int0)                                                       # STEP 54
int0 = 11                                                               # STEP 55
avl0 = avl.AVLTree()                                                    # STEP 56
avl1.insert(int3)                                                       # STEP 57
avl1.insert(int2)                                                       # STEP 58
result = avl0.find(int2)                                                # STEP 59
int2 = 17                                                               # STEP 60
avl1.delete(int3)                                                       # STEP 61
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1058e9b48>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE 1
int1 = 4                                                                 # STEP 0
int0 = 20                                                                # STEP 1
int2 = 6                                                                 # STEP 2
int3 = 11                                                                # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
result = avl1.inorder()                                                  # STEP 5
avl1.insert(int2)                                                        # STEP 6
avl1.delete(int3)                                                        # STEP 7
avl1 = avl.AVLTree()                                                     # STEP 8
int3 = 17                                                                # STEP 9
result = avl1.find(int1)                                                # STEP 10
int1 = 1                                                                # STEP 11
avl1.insert(int2)                                                       # STEP 12
avl1.insert(int0)                                                       # STEP 13
avl1.insert(int2)                                                       # STEP 14
int0 = 2                                                                # STEP 15
avl1.insert(int1)                                                       # STEP 16
int1 = 20                                                               # STEP 17
avl1.delete(int2)                                                       # STEP 18
int2 = 16                                                               # STEP 19
avl2 = avl.AVLTree()                                                    # STEP 20
avl0 = avl.AVLTree()                                                    # STEP 21
avl1.insert(int3)                                                       # STEP 22
int3 = 5                                                                # STEP 23
result = avl0.find(int0)                                                # STEP 24
result = avl2.find(int2)                                                # STEP 25
avl1 == avl2                                                            # STEP 26
avl0.insert(int1)                                                       # STEP 27
int1 = 10                                                               # STEP 28
avl0.delete(int1)                                                       # STEP 29
avl1.delete(int0)                                                       # STEP 30
result = avl2.find(int1)                                                # STEP 31
int2 = 20                                                               # STEP 32
result = avl2.find(int1)                                                # STEP 33
result = avl0.inorder()                                                 # STEP 34
avl0.delete(int0)                                                       # STEP 35
avl1.insert(int2)                                                       # STEP 36
result = avl2.find(int0)                                                # STEP 37
int2 = 11                                                               # STEP 38
int0 = 20                                                               # STEP 39
result = avl2.find(int1)                                                # STEP 40
int1 = 8                                                                # STEP 41
result = avl2.find(int3)                                                # STEP 42
result = avl1.find(int0)                                                # STEP 43
result = avl2.inorder()                                                 # STEP 44
int0 = 18                                                               # STEP 45
result = avl0.inorder()                                                 # STEP 46
result = avl2.find(int3)                                                # STEP 47
int3 = 16                                                               # STEP 48
avl0.insert(int1)                                                       # STEP 49
avl2.insert(int2)                                                       # STEP 50
avl1 == avl2                                                            # STEP 51
avl1.insert(int0)                                                       # STEP 52
avl1 == avl0                                                            # STEP 53
int2 = 15                                                               # STEP 54
avl0.delete(int3)                                                       # STEP 55
int1 = 19                                                               # STEP 56
avl0.insert(int0)                                                       # STEP 57
int3 = 10                                                               # STEP 58
result = avl1.find(int3)                                                # STEP 59
int0 = 2                                                                # STEP 60
avl1.delete(int3)                                                       # STEP 61
int3 = 18                                                               # STEP 62
avl2.delete(int0)                                                       # STEP 63
int0 = 7                                                                # STEP 64
avl2.delete(int1)                                                       # STEP 65
avl2.insert(int0)                                                       # STEP 66
result = avl0.find(int2)                                                # STEP 67
int1 = 17                                                               # STEP 68
int0 = 1                                                                # STEP 69
result = avl0.inorder()                                                 # STEP 70
result = avl0.inorder()                                                 # STEP 71
avl2 == avl0                                                            # STEP 72
avl1.delete(int0)                                                       # STEP 73
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104c03e18>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
204 BRANCHES COVERED
152 STATEMENTS COVERED

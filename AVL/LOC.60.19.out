Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.99502.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  10 [2:0]
-- < 3 [1:0]
---- < 1 [0:0] L
---- > 7 [0:0] L
-- > 11 [1:-1]
---- > 19 [0:0] L
set([1, 3, 7, 10, 11, 19])
  10 [2:0]
-- < 3 [1:0]
---- < 1 [0:0] L
---- > 7 [0:0] L
-- > 11 [1:-1]
---- > 19 [0:0] L
set([1, 3, 7, 10, 11, 19])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104f2cf80>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
Original test has 83 steps

SAVING TEST AS failure.99502.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
avl0 = avl.AVLTree()                                                     # STEP 0
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x104f2c560> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int1 = 12                                                                # STEP 1
ACTION: int1 = 12 
int1 = None : <type 'NoneType'>
=> int1 = 12 : <type 'int'>
==================================================
avl0.insert(int1)                                                        # STEP 2
ACTION: avl0.insert(int1) 
int1 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f2c560> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([12]) : <type 'set'>
==================================================
int1 = 14                                                                # STEP 3
ACTION: int1 = 14 
int1 = 12 : <type 'int'>
=> int1 = 14 : <type 'int'>
==================================================
int0 = 7                                                                 # STEP 4
ACTION: int0 = 7 
int0 = None : <type 'NoneType'>
=> int0 = 7 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 5
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x104e6ff38> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl0.inorder()                                                  # STEP 6
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104f2c560> : <type 'instance'>
avl_REF0 = set([12]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl2 == avl2                                                             # STEP 7
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x104e6ff38> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl2.delete(int0)                                                        # STEP 8
ACTION: avl2.delete(int0) 
int0 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e6ff38> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
result = avl2.find(int1)                                                 # STEP 9
ACTION: result = avl2.find(int1) 
int1 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e6ff38> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl0.insert(int0)                                                       # STEP 10
ACTION: avl0.insert(int0) 
int0 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f2c560> : <type 'instance'>
avl_REF0 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([12, 7]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 11
ACTION: avl2.insert(int1) 
int1 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e6ff38> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([14]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 12
ACTION: avl2.insert(int0) 
int0 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e6ff38> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([14, 7]) : <type 'set'>
==================================================
int2 = 10                                                               # STEP 13
ACTION: int2 = 10 
int2 = None : <type 'NoneType'>
=> int2 = 10 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 14
ACTION: avl0.insert(int0) 
int0 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f2c560> : <type 'instance'>
avl_REF0 = set([12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
result = avl2.inorder()                                                 # STEP 15
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104e6ff38> : <type 'instance'>
avl_REF2 = set([14, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int0 = 11                                                               # STEP 16
ACTION: int0 = 11 
int0 = 7 : <type 'int'>
=> int0 = 11 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 17
ACTION: avl0.insert(int1) 
int1 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f2c560> : <type 'instance'>
avl_REF0 = set([12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([12, 14, 7]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 18
ACTION: avl2.insert(int2) 
int2 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e6ff38> : <type 'instance'>
avl_REF2 = set([14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([10, 14, 7]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 19
ACTION: avl0.delete(int1) 
int1 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f2c560> : <type 'instance'>
avl_REF0 = set([12, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([12, 7]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 20
ACTION: avl2.delete(int0) 
int0 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e6ff38> : <type 'instance'>
avl_REF2 = set([10, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.insert(int0)                                                       # STEP 21
ACTION: avl2.insert(int0) 
int0 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e6ff38> : <type 'instance'>
avl_REF2 = set([10, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([10, 11, 14, 7]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 22
ACTION: avl0.insert(int2) 
int2 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f2c560> : <type 'instance'>
avl_REF0 = set([12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([10, 12, 7]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 23
ACTION: avl0.delete(int2) 
int2 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f2c560> : <type 'instance'>
avl_REF0 = set([10, 12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([12, 7]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 24
ACTION: avl2.insert(int1) 
int1 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e6ff38> : <type 'instance'>
avl_REF2 = set([10, 11, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
result = avl2.find(int2)                                                # STEP 25
ACTION: result = avl2.find(int2) 
int2 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e6ff38> : <type 'instance'>
avl_REF2 = set([10, 11, 14, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl0.insert(int2)                                                       # STEP 26
ACTION: avl0.insert(int2) 
int2 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f2c560> : <type 'instance'>
avl_REF0 = set([12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([10, 12, 7]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 27
ACTION: avl2.insert(int2) 
int2 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e6ff38> : <type 'instance'>
avl_REF2 = set([10, 11, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
int0 = 3                                                                # STEP 28
ACTION: int0 = 3 
int0 = 11 : <type 'int'>
=> int0 = 3 : <type 'int'>
==================================================
int2 = 18                                                               # STEP 29
ACTION: int2 = 18 
int2 = 10 : <type 'int'>
=> int2 = 18 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 30
ACTION: avl2.delete(int1) 
int1 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e6ff38> : <type 'instance'>
avl_REF2 = set([10, 11, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([10, 11, 7]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 31
ACTION: avl2.delete(int0) 
int0 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e6ff38> : <type 'instance'>
avl_REF2 = set([10, 11, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl0.delete(int1)                                                       # STEP 32
ACTION: avl0.delete(int1) 
int1 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f2c560> : <type 'instance'>
avl_REF0 = set([10, 12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int1 = 1                                                                # STEP 33
ACTION: int1 = 1 
int1 = 14 : <type 'int'>
=> int1 = 1 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 34
ACTION: avl2.insert(int1) 
int1 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e6ff38> : <type 'instance'>
avl_REF2 = set([10, 11, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([1, 10, 11, 7]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 35
ACTION: avl2.delete(int1) 
int1 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e6ff38> : <type 'instance'>
avl_REF2 = set([1, 10, 11, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([10, 11, 7]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 36
ACTION: avl0.insert(int2) 
int2 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f2c560> : <type 'instance'>
avl_REF0 = set([10, 12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([10, 12, 18, 7]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 37
ACTION: avl2.delete(int2) 
int2 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e6ff38> : <type 'instance'>
avl_REF2 = set([10, 11, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int1 = 16                                                               # STEP 38
ACTION: int1 = 16 
int1 = 1 : <type 'int'>
=> int1 = 16 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 39
ACTION: avl0.delete(int2) 
int2 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f2c560> : <type 'instance'>
avl_REF0 = set([10, 12, 18, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([10, 12, 7]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 40
ACTION: avl2.delete(int2) 
int2 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e6ff38> : <type 'instance'>
avl_REF2 = set([10, 11, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl0.insert(int0)                                                       # STEP 41
ACTION: avl0.insert(int0) 
int0 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f2c560> : <type 'instance'>
avl_REF0 = set([10, 12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([3, 7, 10, 12]) : <type 'set'>
==================================================
result = avl0.find(int0)                                                # STEP 42
ACTION: result = avl0.find(int0) 
int0 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f2c560> : <type 'instance'>
avl_REF0 = set([3, 7, 10, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
avl0.insert(int1)                                                       # STEP 43
ACTION: avl0.insert(int1) 
int1 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f2c560> : <type 'instance'>
avl_REF0 = set([3, 7, 10, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([3, 7, 10, 12, 16]) : <type 'set'>
==================================================
result = avl2.find(int0)                                                # STEP 44
ACTION: result = avl2.find(int0) 
int0 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e6ff38> : <type 'instance'>
avl_REF2 = set([10, 11, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
result = avl2.inorder()                                                 # STEP 45
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104e6ff38> : <type 'instance'>
avl_REF2 = set([10, 11, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl0.delete(int1)                                                       # STEP 46
ACTION: avl0.delete(int1) 
int1 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f2c560> : <type 'instance'>
avl_REF0 = set([3, 7, 10, 12, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([3, 7, 10, 12]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 47
ACTION: avl2.delete(int2) 
int2 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e6ff38> : <type 'instance'>
avl_REF2 = set([10, 11, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.insert(int0)                                                       # STEP 48
ACTION: avl2.insert(int0) 
int0 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e6ff38> : <type 'instance'>
avl_REF2 = set([10, 11, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([3, 7, 10, 11]) : <type 'set'>
==================================================
int0 = 1                                                                # STEP 49
ACTION: int0 = 1 
int0 = 3 : <type 'int'>
=> int0 = 1 : <type 'int'>
==================================================
int2 = 19                                                               # STEP 50
ACTION: int2 = 19 
int2 = 18 : <type 'int'>
=> int2 = 19 : <type 'int'>
==================================================
result = avl2.find(int0)                                                # STEP 51
ACTION: result = avl2.find(int0) 
int0 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e6ff38> : <type 'instance'>
avl_REF2 = set([3, 7, 10, 11]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl2.insert(int2)                                                       # STEP 52
ACTION: avl2.insert(int2) 
int2 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e6ff38> : <type 'instance'>
avl_REF2 = set([3, 7, 10, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([3, 7, 10, 11, 19]) : <type 'set'>
==================================================
result = avl0.find(int2)                                                # STEP 53
ACTION: result = avl0.find(int2) 
int2 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f2c560> : <type 'instance'>
avl_REF0 = set([3, 7, 10, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl2.delete(int1)                                                       # STEP 54
ACTION: avl2.delete(int1) 
int1 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e6ff38> : <type 'instance'>
avl_REF2 = set([3, 7, 10, 11, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int1 = 12                                                               # STEP 55
ACTION: int1 = 12 
int1 = 16 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
result = avl0.find(int0)                                                # STEP 56
ACTION: result = avl0.find(int0) 
int0 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f2c560> : <type 'instance'>
avl_REF0 = set([3, 7, 10, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
result = avl2.inorder()                                                 # STEP 57
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104e6ff38> : <type 'instance'>
avl_REF2 = set([3, 7, 10, 11, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl0 == avl0                                                            # STEP 58
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x104f2c560> : <type 'instance'>
avl_REF0 = set([3, 7, 10, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl0.insert(int0)                                                       # STEP 59
ACTION: avl0.insert(int0) 
int0 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f2c560> : <type 'instance'>
avl_REF0 = set([3, 7, 10, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([1, 3, 7, 10, 12]) : <type 'set'>
==================================================
result = avl0.find(int1)                                                # STEP 60
ACTION: result = avl0.find(int1) 
int1 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f2c560> : <type 'instance'>
avl_REF0 = set([1, 3, 7, 10, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl2.insert(int0)                                                       # STEP 61
ACTION: avl2.insert(int0) 
int0 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e6ff38> : <type 'instance'>
avl_REF2 = set([3, 7, 10, 11, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([1, 3, 7, 10, 11, 19]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 62
ACTION: avl2.delete(int0) 
int0 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e6ff38> : <type 'instance'>
avl_REF2 = set([1, 3, 7, 10, 11, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([3, 7, 10, 11, 19]) : <type 'set'>
==================================================
int3 = 4                                                                # STEP 63
ACTION: int3 = 4 
int3 = None : <type 'NoneType'>
=> int3 = 4 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 64
ACTION: avl2.insert(int0) 
int0 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e6ff38> : <type 'instance'>
avl_REF2 = set([3, 7, 10, 11, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([1, 3, 7, 10, 11, 19]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 65
ACTION: avl2.delete(int3) 
int3 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e6ff38> : <type 'instance'>
avl_REF2 = set([1, 3, 7, 10, 11, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.display()                                                          # STEP 66
ACTION: avl2.display() 
avl2 = <avl.AVLTree instance at 0x104e6ff38> : <type 'instance'>
avl_REF2 = set([1, 3, 7, 10, 11, 19]) : <type 'set'>
  10 [2:0]
-- < 3 [1:0]
---- < 1 [0:0] L
---- > 7 [0:0] L
-- > 11 [1:-1]
---- > 19 [0:0] L
REFERENCE ACTION: print(avl_REF2) 
set([1, 3, 7, 10, 11, 19])
==================================================
avl2.display()                                                          # STEP 67
ACTION: avl2.display() 
avl2 = <avl.AVLTree instance at 0x104e6ff38> : <type 'instance'>
avl_REF2 = set([1, 3, 7, 10, 11, 19]) : <type 'set'>
  10 [2:0]
-- < 3 [1:0]
---- < 1 [0:0] L
---- > 7 [0:0] L
-- > 11 [1:-1]
---- > 19 [0:0] L
REFERENCE ACTION: print(avl_REF2) 
set([1, 3, 7, 10, 11, 19])
==================================================
int0 = 12                                                               # STEP 68
ACTION: int0 = 12 
int0 = 1 : <type 'int'>
=> int0 = 12 : <type 'int'>
==================================================
int1 = 17                                                               # STEP 69
ACTION: int1 = 17 
int1 = 12 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 70
ACTION: avl2.delete(int0) 
int0 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e6ff38> : <type 'instance'>
avl_REF2 = set([1, 3, 7, 10, 11, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.delete(int0)                                                       # STEP 71
ACTION: avl2.delete(int0) 
int0 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e6ff38> : <type 'instance'>
avl_REF2 = set([1, 3, 7, 10, 11, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
result = avl0.inorder()                                                 # STEP 72
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104f2c560> : <type 'instance'>
avl_REF0 = set([1, 3, 7, 10, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int2 = 5                                                                # STEP 73
ACTION: int2 = 5 
int2 = 19 : <type 'int'>
=> int2 = 5 : <type 'int'>
==================================================
int3 = 9                                                                # STEP 74
ACTION: int3 = 9 
int3 = 4 : <type 'int'>
=> int3 = 9 : <type 'int'>
==================================================
result = avl0.find(int0)                                                # STEP 75
ACTION: result = avl0.find(int0) 
int0 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f2c560> : <type 'instance'>
avl_REF0 = set([1, 3, 7, 10, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
avl2 = avl.AVLTree()                                                    # STEP 76
ACTION: avl2 = avl.AVLTree() 
avl2 = <avl.AVLTree instance at 0x104e6ff38> : <type 'instance'>
avl_REF2 = set([1, 3, 7, 10, 11, 19]) : <type 'set'>
=> avl2 = <avl.AVLTree instance at 0x104ad6680> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2 == avl0                                                            # STEP 77
ACTION: avl2 == avl0 
avl2 = <avl.AVLTree instance at 0x104ad6680> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x104f2c560> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
avl_REF0 = set([1, 3, 7, 10, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF0 
==================================================
int0 = 15                                                               # STEP 78
ACTION: int0 = 15 
int0 = 12 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 79
ACTION: avl2.insert(int3) 
int3 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ad6680> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([9]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 80
ACTION: avl0.delete(int0) 
int0 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f2c560> : <type 'instance'>
avl_REF0 = set([1, 3, 7, 10, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int0 = 10                                                               # STEP 81
ACTION: int0 = 10 
int0 = 15 : <type 'int'>
=> int0 = 10 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 82
ACTION: avl0.delete(int0) 
int0 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f2c560> : <type 'instance'>
avl_REF0 = set([1, 3, 7, 10, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([1, 3, 7, 12]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104adb6c8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104aef248>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
Original test has 70 steps

SAVING TEST AS failure.99502.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 19                                                                # STEP 0
ACTION: int0 = 19 
int0 = None : <type 'NoneType'>
=> int0 = 19 : <type 'int'>
==================================================
int1 = 18                                                                # STEP 1
ACTION: int1 = 18 
int1 = None : <type 'NoneType'>
=> int1 = 18 : <type 'int'>
==================================================
int2 = 2                                                                 # STEP 2
ACTION: int2 = 2 
int2 = None : <type 'NoneType'>
=> int2 = 2 : <type 'int'>
==================================================
int3 = 2                                                                 # STEP 3
ACTION: int3 = 2 
int3 = None : <type 'NoneType'>
=> int3 = 2 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 4
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x104aef878> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.delete(int1)                                                        # STEP 5
ACTION: avl0.delete(int1) 
int1 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104aef878> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.insert(int1)                                                        # STEP 6
ACTION: avl0.insert(int1) 
int1 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104aef878> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([18]) : <type 'set'>
==================================================
avl0 == avl0                                                             # STEP 7
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x104aef878> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
result = avl0.inorder()                                                  # STEP 8
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104aef878> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.delete(int1)                                                        # STEP 9
ACTION: avl0.delete(int1) 
int1 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104aef878> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
result = avl0.find(int0)                                                # STEP 10
ACTION: result = avl0.find(int0) 
int0 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104aef878> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
int1 = 13                                                               # STEP 11
ACTION: int1 = 13 
int1 = 18 : <type 'int'>
=> int1 = 13 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 12
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104aef878> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.delete(int3)                                                       # STEP 13
ACTION: avl0.delete(int3) 
int3 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104aef878> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.insert(int0)                                                       # STEP 14
ACTION: avl0.insert(int0) 
int0 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104aef878> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([19]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 15
ACTION: avl0.delete(int1) 
int1 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104aef878> : <type 'instance'>
avl_REF0 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.delete(int0)                                                       # STEP 16
ACTION: avl0.delete(int0) 
int0 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104aef878> : <type 'instance'>
avl_REF0 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 17
ACTION: avl0.insert(int3) 
int3 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104aef878> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([2]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 18
ACTION: avl0.delete(int3) 
int3 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104aef878> : <type 'instance'>
avl_REF0 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 19
ACTION: avl0.insert(int1) 
int1 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104aef878> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([13]) : <type 'set'>
==================================================
int3 = 16                                                               # STEP 20
ACTION: int3 = 16 
int3 = 2 : <type 'int'>
=> int3 = 16 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 21
ACTION: avl0.insert(int0) 
int0 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104aef878> : <type 'instance'>
avl_REF0 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([19, 13]) : <type 'set'>
==================================================
int0 = 3                                                                # STEP 22
ACTION: int0 = 3 
int0 = 19 : <type 'int'>
=> int0 = 3 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 23
ACTION: avl0.insert(int2) 
int2 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104aef878> : <type 'instance'>
avl_REF0 = set([19, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([2, 19, 13]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 24
ACTION: avl0.delete(int3) 
int3 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104aef878> : <type 'instance'>
avl_REF0 = set([2, 19, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int3 = 8                                                                # STEP 25
ACTION: int3 = 8 
int3 = 16 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
int2 = 17                                                               # STEP 26
ACTION: int2 = 17 
int2 = 2 : <type 'int'>
=> int2 = 17 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 27
ACTION: avl0.insert(int1) 
int1 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104aef878> : <type 'instance'>
avl_REF0 = set([2, 19, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
int1 = 6                                                                # STEP 28
ACTION: int1 = 6 
int1 = 13 : <type 'int'>
=> int1 = 6 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 29
ACTION: avl0.delete(int2) 
int2 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104aef878> : <type 'instance'>
avl_REF0 = set([2, 19, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int2 = 10                                                               # STEP 30
ACTION: int2 = 10 
int2 = 17 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 31
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x104ae0128> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 32
ACTION: avl1.delete(int3) 
int3 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104ae0128> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.insert(int3)                                                       # STEP 33
ACTION: avl1.insert(int3) 
int3 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104ae0128> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([8]) : <type 'set'>
==================================================
int3 = 4                                                                # STEP 34
ACTION: int3 = 4 
int3 = 8 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 35
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104ae0128> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl0.delete(int3)                                                       # STEP 36
ACTION: avl0.delete(int3) 
int3 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104aef878> : <type 'instance'>
avl_REF0 = set([2, 19, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
result = avl1.inorder()                                                 # STEP 37
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104ae0128> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl0.insert(int3)                                                       # STEP 38
ACTION: avl0.insert(int3) 
int3 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104aef878> : <type 'instance'>
avl_REF0 = set([2, 19, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([2, 19, 4, 13]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 39
ACTION: avl1.insert(int3) 
int3 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104ae0128> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([8, 4]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 40
ACTION: avl1.delete(int1) 
int1 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104ae0128> : <type 'instance'>
avl_REF1 = set([8, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl0.delete(int3)                                                       # STEP 41
ACTION: avl0.delete(int3) 
int3 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104aef878> : <type 'instance'>
avl_REF0 = set([2, 19, 4, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([2, 19, 13]) : <type 'set'>
==================================================
int3 = 18                                                               # STEP 42
ACTION: int3 = 18 
int3 = 4 : <type 'int'>
=> int3 = 18 : <type 'int'>
==================================================
int1 = 17                                                               # STEP 43
ACTION: int1 = 17 
int1 = 6 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 44
ACTION: avl1.insert(int1) 
int1 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104ae0128> : <type 'instance'>
avl_REF1 = set([8, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([8, 17, 4]) : <type 'set'>
==================================================
result = avl1.find(int0)                                                # STEP 45
ACTION: result = avl1.find(int0) 
int0 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104ae0128> : <type 'instance'>
avl_REF1 = set([8, 17, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl0.delete(int3)                                                       # STEP 46
ACTION: avl0.delete(int3) 
int3 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104aef878> : <type 'instance'>
avl_REF0 = set([2, 19, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
result = avl0.find(int0)                                                # STEP 47
ACTION: result = avl0.find(int0) 
int0 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104aef878> : <type 'instance'>
avl_REF0 = set([2, 19, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
avl1.delete(int2)                                                       # STEP 48
ACTION: avl1.delete(int2) 
int2 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104ae0128> : <type 'instance'>
avl_REF1 = set([8, 17, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
result = avl1.find(int0)                                                # STEP 49
ACTION: result = avl1.find(int0) 
int0 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104ae0128> : <type 'instance'>
avl_REF1 = set([8, 17, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
result = avl0.inorder()                                                 # STEP 50
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104aef878> : <type 'instance'>
avl_REF0 = set([2, 19, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
result = avl1.inorder()                                                 # STEP 51
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104ae0128> : <type 'instance'>
avl_REF1 = set([8, 17, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int0)                                                       # STEP 52
ACTION: avl1.insert(int0) 
int0 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104ae0128> : <type 'instance'>
avl_REF1 = set([8, 17, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([8, 17, 3, 4]) : <type 'set'>
==================================================
int1 = 13                                                               # STEP 53
ACTION: int1 = 13 
int1 = 17 : <type 'int'>
=> int1 = 13 : <type 'int'>
==================================================
int2 = 3                                                                # STEP 54
ACTION: int2 = 3 
int2 = 10 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 55
ACTION: avl0.delete(int0) 
int0 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104aef878> : <type 'instance'>
avl_REF0 = set([2, 19, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl1 = avl.AVLTree()                                                    # STEP 56
ACTION: avl1 = avl.AVLTree() 
avl1 = <avl.AVLTree instance at 0x104ae0128> : <type 'instance'>
avl_REF1 = set([8, 17, 3, 4]) : <type 'set'>
=> avl1 = <avl.AVLTree instance at 0x104e46560> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 57
ACTION: avl0.delete(int3) 
int3 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104aef878> : <type 'instance'>
avl_REF0 = set([2, 19, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl1.insert(int0)                                                       # STEP 58
ACTION: avl1.insert(int0) 
int0 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e46560> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([3]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 59
ACTION: avl1.delete(int0) 
int0 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e46560> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 60
ACTION: avl0.insert(int2) 
int2 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104aef878> : <type 'instance'>
avl_REF0 = set([2, 19, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([3, 2, 19, 13]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 61
ACTION: avl0.insert(int3) 
int3 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104aef878> : <type 'instance'>
avl_REF0 = set([3, 2, 19, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([2, 3, 13, 18, 19]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 62
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104aef878> : <type 'instance'>
avl_REF0 = set([2, 3, 13, 18, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int0)                                                       # STEP 63
ACTION: avl0.insert(int0) 
int0 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104aef878> : <type 'instance'>
avl_REF0 = set([2, 3, 13, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
avl1.insert(int3)                                                       # STEP 64
ACTION: avl1.insert(int3) 
int3 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e46560> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([18]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 65
ACTION: avl0.delete(int2) 
int2 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104aef878> : <type 'instance'>
avl_REF0 = set([2, 3, 13, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([2, 13, 18, 19]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 66
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104e46560> : <type 'instance'>
avl_REF1 = set([18]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int0 = 2                                                                # STEP 67
ACTION: int0 = 2 
int0 = 3 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
int2 = 11                                                               # STEP 68
ACTION: int2 = 11 
int2 = 3 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 69
ACTION: avl0.delete(int0) 
int0 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104aef878> : <type 'instance'>
avl_REF0 = set([2, 13, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([13, 18, 19]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104e5f5f0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
TEST #4 STEP #0 (0:00:32.375999) Fri Apr 28 04:09:14 2017 [ 157 stmts 208 branches ]
  17 [2:0]
-- < 5 [1:-1]
---- > 6 [0:0] L
-- > 19 [1:0]
---- < 18 [0:0] L
---- > 20 [0:0] L
set([5, 6, 17, 18, 19, 20])
  16 [2:0]
-- < 6 [1:1]
---- < 3 [0:0] L
-- > 19 [1:0]
---- < 17 [0:0] L
---- > 20 [0:0] L
set([3, 6, 16, 17, 19, 20])
  16 [2:0]
-- < 6 [1:1]
---- < 3 [0:0] L
-- > 19 [1:0]
---- < 17 [0:0] L
---- > 20 [0:0] L
set([3, 6, 16, 17, 19, 20])
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 79
STOPPING TESTING DUE TO TIMEOUT
8.51713607058 PERCENT COVERED
60.217400074 TOTAL RUNTIME
7 EXECUTED
632 TOTAL TEST OPERATIONS
23.6291356087 TIME SPENT EXECUTING TEST OPERATIONS
0.0655674934387 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
23.8021297455 TIME SPENT CHECKING PROPERTIES
47.4312653542 TOTAL TIME SPENT RUNNING SUT
0.00425815582275 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
2 FAILED
0 REPEATS OF FAILURES
2 ACTUAL DISTINCT FAILURES

FAILURE 0
avl0 = avl.AVLTree()                                                     # STEP 0
int1 = 12                                                                # STEP 1
avl0.insert(int1)                                                        # STEP 2
int1 = 14                                                                # STEP 3
int0 = 7                                                                 # STEP 4
avl2 = avl.AVLTree()                                                     # STEP 5
result = avl0.inorder()                                                  # STEP 6
avl2 == avl2                                                             # STEP 7
avl2.delete(int0)                                                        # STEP 8
result = avl2.find(int1)                                                 # STEP 9
avl0.insert(int0)                                                       # STEP 10
avl2.insert(int1)                                                       # STEP 11
avl2.insert(int0)                                                       # STEP 12
int2 = 10                                                               # STEP 13
avl0.insert(int0)                                                       # STEP 14
result = avl2.inorder()                                                 # STEP 15
int0 = 11                                                               # STEP 16
avl0.insert(int1)                                                       # STEP 17
avl2.insert(int2)                                                       # STEP 18
avl0.delete(int1)                                                       # STEP 19
avl2.delete(int0)                                                       # STEP 20
avl2.insert(int0)                                                       # STEP 21
avl0.insert(int2)                                                       # STEP 22
avl0.delete(int2)                                                       # STEP 23
avl2.insert(int1)                                                       # STEP 24
result = avl2.find(int2)                                                # STEP 25
avl0.insert(int2)                                                       # STEP 26
avl2.insert(int2)                                                       # STEP 27
int0 = 3                                                                # STEP 28
int2 = 18                                                               # STEP 29
avl2.delete(int1)                                                       # STEP 30
avl2.delete(int0)                                                       # STEP 31
avl0.delete(int1)                                                       # STEP 32
int1 = 1                                                                # STEP 33
avl2.insert(int1)                                                       # STEP 34
avl2.delete(int1)                                                       # STEP 35
avl0.insert(int2)                                                       # STEP 36
avl2.delete(int2)                                                       # STEP 37
int1 = 16                                                               # STEP 38
avl0.delete(int2)                                                       # STEP 39
avl2.delete(int2)                                                       # STEP 40
avl0.insert(int0)                                                       # STEP 41
result = avl0.find(int0)                                                # STEP 42
avl0.insert(int1)                                                       # STEP 43
result = avl2.find(int0)                                                # STEP 44
result = avl2.inorder()                                                 # STEP 45
avl0.delete(int1)                                                       # STEP 46
avl2.delete(int2)                                                       # STEP 47
avl2.insert(int0)                                                       # STEP 48
int0 = 1                                                                # STEP 49
int2 = 19                                                               # STEP 50
result = avl2.find(int0)                                                # STEP 51
avl2.insert(int2)                                                       # STEP 52
result = avl0.find(int2)                                                # STEP 53
avl2.delete(int1)                                                       # STEP 54
int1 = 12                                                               # STEP 55
result = avl0.find(int0)                                                # STEP 56
result = avl2.inorder()                                                 # STEP 57
avl0 == avl0                                                            # STEP 58
avl0.insert(int0)                                                       # STEP 59
result = avl0.find(int1)                                                # STEP 60
avl2.insert(int0)                                                       # STEP 61
avl2.delete(int0)                                                       # STEP 62
int3 = 4                                                                # STEP 63
avl2.insert(int0)                                                       # STEP 64
avl2.delete(int3)                                                       # STEP 65
avl2.display()                                                          # STEP 66
avl2.display()                                                          # STEP 67
int0 = 12                                                               # STEP 68
int1 = 17                                                               # STEP 69
avl2.delete(int0)                                                       # STEP 70
avl2.delete(int0)                                                       # STEP 71
result = avl0.inorder()                                                 # STEP 72
int2 = 5                                                                # STEP 73
int3 = 9                                                                # STEP 74
result = avl0.find(int0)                                                # STEP 75
avl2 = avl.AVLTree()                                                    # STEP 76
avl2 == avl0                                                            # STEP 77
int0 = 15                                                               # STEP 78
avl2.insert(int3)                                                       # STEP 79
avl0.delete(int0)                                                       # STEP 80
int0 = 10                                                               # STEP 81
avl0.delete(int0)                                                       # STEP 82
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104adb6c8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE 1
int0 = 19                                                                # STEP 0
int1 = 18                                                                # STEP 1
int2 = 2                                                                 # STEP 2
int3 = 2                                                                 # STEP 3
avl0 = avl.AVLTree()                                                     # STEP 4
avl0.delete(int1)                                                        # STEP 5
avl0.insert(int1)                                                        # STEP 6
avl0 == avl0                                                             # STEP 7
result = avl0.inorder()                                                  # STEP 8
avl0.delete(int1)                                                        # STEP 9
result = avl0.find(int0)                                                # STEP 10
int1 = 13                                                               # STEP 11
result = avl0.inorder()                                                 # STEP 12
avl0.delete(int3)                                                       # STEP 13
avl0.insert(int0)                                                       # STEP 14
avl0.delete(int1)                                                       # STEP 15
avl0.delete(int0)                                                       # STEP 16
avl0.insert(int3)                                                       # STEP 17
avl0.delete(int3)                                                       # STEP 18
avl0.insert(int1)                                                       # STEP 19
int3 = 16                                                               # STEP 20
avl0.insert(int0)                                                       # STEP 21
int0 = 3                                                                # STEP 22
avl0.insert(int2)                                                       # STEP 23
avl0.delete(int3)                                                       # STEP 24
int3 = 8                                                                # STEP 25
int2 = 17                                                               # STEP 26
avl0.insert(int1)                                                       # STEP 27
int1 = 6                                                                # STEP 28
avl0.delete(int2)                                                       # STEP 29
int2 = 10                                                               # STEP 30
avl1 = avl.AVLTree()                                                    # STEP 31
avl1.delete(int3)                                                       # STEP 32
avl1.insert(int3)                                                       # STEP 33
int3 = 4                                                                # STEP 34
result = avl1.inorder()                                                 # STEP 35
avl0.delete(int3)                                                       # STEP 36
result = avl1.inorder()                                                 # STEP 37
avl0.insert(int3)                                                       # STEP 38
avl1.insert(int3)                                                       # STEP 39
avl1.delete(int1)                                                       # STEP 40
avl0.delete(int3)                                                       # STEP 41
int3 = 18                                                               # STEP 42
int1 = 17                                                               # STEP 43
avl1.insert(int1)                                                       # STEP 44
result = avl1.find(int0)                                                # STEP 45
avl0.delete(int3)                                                       # STEP 46
result = avl0.find(int0)                                                # STEP 47
avl1.delete(int2)                                                       # STEP 48
result = avl1.find(int0)                                                # STEP 49
result = avl0.inorder()                                                 # STEP 50
result = avl1.inorder()                                                 # STEP 51
avl1.insert(int0)                                                       # STEP 52
int1 = 13                                                               # STEP 53
int2 = 3                                                                # STEP 54
avl0.delete(int0)                                                       # STEP 55
avl1 = avl.AVLTree()                                                    # STEP 56
avl0.delete(int3)                                                       # STEP 57
avl1.insert(int0)                                                       # STEP 58
avl1.delete(int0)                                                       # STEP 59
avl0.insert(int2)                                                       # STEP 60
avl0.insert(int3)                                                       # STEP 61
result = avl0.inorder()                                                 # STEP 62
avl0.insert(int0)                                                       # STEP 63
avl1.insert(int3)                                                       # STEP 64
avl0.delete(int2)                                                       # STEP 65
result = avl1.inorder()                                                 # STEP 66
int0 = 2                                                                # STEP 67
int2 = 11                                                               # STEP 68
avl0.delete(int0)                                                       # STEP 69
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104e5f5f0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
214 BRANCHES COVERED
161 STATEMENTS COVERED

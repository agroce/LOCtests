Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=True, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.44296.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  7 [3:1]
-- < 2 [2:-1]
---- < 1 [0:0] L
---- > 5 [1:1]
------ < 3 [0:0] L
-- > 14 [1:-1]
---- > 17 [0:0] L
set([1, 2, 3, 5, 7, 14, 17])
  7 [3:1]
-- < 2 [2:-1]
---- < 1 [0:0] L
---- > 5 [1:1]
------ < 3 [0:0] L
-- > 14 [1:-1]
---- > 17 [0:0] L
set([1, 2, 3, 5, 7, 14, 17])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10580e200>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
Original test has 81 steps

SAVING TEST AS failure.44296.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 10                                                                # STEP 0
ACTION: int2 = 10 
int2 = None : <type 'NoneType'>
=> int2 = 10 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 1
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x1043d6b90> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.delete(int2)                                                        # STEP 2
ACTION: avl0.delete(int2) 
int2 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1043d6b90> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
result = avl0.inorder()                                                  # STEP 3
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x1043d6b90> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x1058d1b48> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl0.delete(int2)                                                        # STEP 5
ACTION: avl0.delete(int2) 
int2 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1043d6b90> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int3 = 5                                                                 # STEP 6
ACTION: int3 = 5 
int3 = None : <type 'NoneType'>
=> int3 = 5 : <type 'int'>
==================================================
avl0.delete(int3)                                                        # STEP 7
ACTION: avl0.delete(int3) 
int3 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1043d6b90> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int1 = 11                                                                # STEP 8
ACTION: int1 = 11 
int1 = None : <type 'NoneType'>
=> int1 = 11 : <type 'int'>
==================================================
avl1.insert(int2)                                                        # STEP 9
ACTION: avl1.insert(int2) 
int2 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1058d1b48> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([10]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 10
ACTION: avl0.insert(int3) 
int3 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1043d6b90> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([5]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 11
ACTION: avl1.delete(int3) 
int3 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1058d1b48> : <type 'instance'>
avl_REF1 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int0 = 1                                                                # STEP 12
ACTION: int0 = 1 
int0 = None : <type 'NoneType'>
=> int0 = 1 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 13
ACTION: avl0.insert(int1) 
int1 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1043d6b90> : <type 'instance'>
avl_REF0 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([11, 5]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 14
ACTION: avl0.insert(int0) 
int0 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1043d6b90> : <type 'instance'>
avl_REF0 = set([11, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([1, 11, 5]) : <type 'set'>
==================================================
int1 = 3                                                                # STEP 15
ACTION: int1 = 3 
int1 = 11 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 16
ACTION: avl1.insert(int3) 
int3 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1058d1b48> : <type 'instance'>
avl_REF1 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([10, 5]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 17
ACTION: avl1.insert(int0) 
int0 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1058d1b48> : <type 'instance'>
avl_REF1 = set([10, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([1, 10, 5]) : <type 'set'>
==================================================
int0 = 2                                                                # STEP 18
ACTION: int0 = 2 
int0 = 1 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
int3 = 15                                                               # STEP 19
ACTION: int3 = 15 
int3 = 5 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 20
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x1043d6b90> : <type 'instance'>
avl_REF0 = set([1, 11, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0 = avl.AVLTree()                                                    # STEP 21
ACTION: avl0 = avl.AVLTree() 
avl0 = <avlbug2.AVLTree instance at 0x1043d6b90> : <type 'instance'>
avl_REF0 = set([1, 11, 5]) : <type 'set'>
=> avl0 = <avlbug2.AVLTree instance at 0x104722098> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 22
ACTION: avl0.delete(int2) 
int2 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x104722098> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl1.delete(int2)                                                       # STEP 23
ACTION: avl1.delete(int2) 
int2 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1058d1b48> : <type 'instance'>
avl_REF1 = set([1, 10, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([1, 5]) : <type 'set'>
==================================================
int2 = 18                                                               # STEP 24
ACTION: int2 = 18 
int2 = 10 : <type 'int'>
=> int2 = 18 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 25
ACTION: avl0.insert(int0) 
int0 = 2 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x104722098> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([2]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 26
ACTION: avl1.insert(int0) 
int0 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1058d1b48> : <type 'instance'>
avl_REF1 = set([1, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([1, 2, 5]) : <type 'set'>
==================================================
int0 = 14                                                               # STEP 27
ACTION: int0 = 14 
int0 = 2 : <type 'int'>
=> int0 = 14 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 28
ACTION: avl0.delete(int2) 
int2 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x104722098> : <type 'instance'>
avl_REF0 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl1.insert(int0)                                                       # STEP 29
ACTION: avl1.insert(int0) 
int0 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1058d1b48> : <type 'instance'>
avl_REF1 = set([1, 2, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([1, 2, 5, 14]) : <type 'set'>
==================================================
int0 = 7                                                                # STEP 30
ACTION: int0 = 7 
int0 = 14 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 31
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x1058d1b48> : <type 'instance'>
avl_REF1 = set([1, 2, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.delete(int2)                                                       # STEP 32
ACTION: avl1.delete(int2) 
int2 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1058d1b48> : <type 'instance'>
avl_REF1 = set([1, 2, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.delete(int2)                                                       # STEP 33
ACTION: avl1.delete(int2) 
int2 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1058d1b48> : <type 'instance'>
avl_REF1 = set([1, 2, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int2 = 19                                                               # STEP 34
ACTION: int2 = 19 
int2 = 18 : <type 'int'>
=> int2 = 19 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 35
ACTION: avl0.insert(int3) 
int3 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x104722098> : <type 'instance'>
avl_REF0 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([2, 15]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 36
ACTION: avl0.insert(int2) 
int2 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x104722098> : <type 'instance'>
avl_REF0 = set([2, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([2, 19, 15]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 37
ACTION: avl1.delete(int2) 
int2 = 19 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1058d1b48> : <type 'instance'>
avl_REF1 = set([1, 2, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
result = avl0.inorder()                                                 # STEP 38
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x104722098> : <type 'instance'>
avl_REF0 = set([2, 19, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int2 = 17                                                               # STEP 39
ACTION: int2 = 17 
int2 = 19 : <type 'int'>
=> int2 = 17 : <type 'int'>
==================================================
int3 = 11                                                               # STEP 40
ACTION: int3 = 11 
int3 = 15 : <type 'int'>
=> int3 = 11 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 41
ACTION: avl1.insert(int0) 
int0 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1058d1b48> : <type 'instance'>
avl_REF1 = set([1, 2, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([1, 2, 5, 14, 7]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 42
ACTION: avl1.insert(int2) 
int2 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1058d1b48> : <type 'instance'>
avl_REF1 = set([1, 2, 5, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([1, 2, 5, 7, 14, 17]) : <type 'set'>
==================================================
int0 = 19                                                               # STEP 43
ACTION: int0 = 19 
int0 = 7 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
int2 = 3                                                                # STEP 44
ACTION: int2 = 3 
int2 = 17 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 45
ACTION: avl1.insert(int2) 
int2 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1058d1b48> : <type 'instance'>
avl_REF1 = set([1, 2, 5, 7, 14, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([1, 2, 3, 5, 7, 14, 17]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 46
ACTION: avl0.delete(int1) 
int1 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x104722098> : <type 'instance'>
avl_REF0 = set([2, 19, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
result = avl0.inorder()                                                 # STEP 47
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x104722098> : <type 'instance'>
avl_REF0 = set([2, 19, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int1 = 7                                                                # STEP 48
ACTION: int1 = 7 
int1 = 3 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
int2 = 5                                                                # STEP 49
ACTION: int2 = 5 
int2 = 3 : <type 'int'>
=> int2 = 5 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 50
ACTION: avl1.insert(int2) 
int2 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1058d1b48> : <type 'instance'>
avl_REF1 = set([1, 2, 3, 5, 7, 14, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
avl1.delete(int3)                                                       # STEP 51
ACTION: avl1.delete(int3) 
int3 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1058d1b48> : <type 'instance'>
avl_REF1 = set([1, 2, 3, 5, 7, 14, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.display()                                                          # STEP 52
ACTION: avl1.display() 
avl1 = <avlbug2.AVLTree instance at 0x1058d1b48> : <type 'instance'>
avl_REF1 = set([1, 2, 3, 5, 7, 14, 17]) : <type 'set'>
  7 [3:1]
-- < 2 [2:-1]
---- < 1 [0:0] L
---- > 5 [1:1]
------ < 3 [0:0] L
-- > 14 [1:-1]
---- > 17 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([1, 2, 3, 5, 7, 14, 17])
==================================================
int2 = 18                                                               # STEP 53
ACTION: int2 = 18 
int2 = 5 : <type 'int'>
=> int2 = 18 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 54
ACTION: avl1.insert(int1) 
int1 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1058d1b48> : <type 'instance'>
avl_REF1 = set([1, 2, 3, 5, 7, 14, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl1.display()                                                          # STEP 55
ACTION: avl1.display() 
avl1 = <avlbug2.AVLTree instance at 0x1058d1b48> : <type 'instance'>
avl_REF1 = set([1, 2, 3, 5, 7, 14, 17]) : <type 'set'>
  7 [3:1]
-- < 2 [2:-1]
---- < 1 [0:0] L
---- > 5 [1:1]
------ < 3 [0:0] L
-- > 14 [1:-1]
---- > 17 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([1, 2, 3, 5, 7, 14, 17])
==================================================
avl1 = avl.AVLTree()                                                    # STEP 56
ACTION: avl1 = avl.AVLTree() 
avl1 = <avlbug2.AVLTree instance at 0x1058d1b48> : <type 'instance'>
avl_REF1 = set([1, 2, 3, 5, 7, 14, 17]) : <type 'set'>
=> avl1 = <avlbug2.AVLTree instance at 0x1043b2d88> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 57
ACTION: avl1.insert(int1) 
int1 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1043b2d88> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([7]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 58
ACTION: avl0.delete(int2) 
int2 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x104722098> : <type 'instance'>
avl_REF0 = set([2, 19, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl1.delete(int0)                                                       # STEP 59
ACTION: avl1.delete(int0) 
int0 = 19 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1043b2d88> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl0.delete(int2)                                                       # STEP 60
ACTION: avl0.delete(int2) 
int2 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x104722098> : <type 'instance'>
avl_REF0 = set([2, 19, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.insert(int3)                                                       # STEP 61
ACTION: avl0.insert(int3) 
int3 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x104722098> : <type 'instance'>
avl_REF0 = set([2, 19, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([11, 2, 19, 15]) : <type 'set'>
==================================================
int1 = 6                                                                # STEP 62
ACTION: int1 = 6 
int1 = 7 : <type 'int'>
=> int1 = 6 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 63
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x1043b2d88> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.delete(int1)                                                       # STEP 64
ACTION: avl1.delete(int1) 
int1 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1043b2d88> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl0.insert(int1)                                                       # STEP 65
ACTION: avl0.insert(int1) 
int1 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x104722098> : <type 'instance'>
avl_REF0 = set([11, 2, 19, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([11, 2, 19, 6, 15]) : <type 'set'>
==================================================
int2 = 17                                                               # STEP 66
ACTION: int2 = 17 
int2 = 18 : <type 'int'>
=> int2 = 17 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 67
ACTION: avl0.delete(int1) 
int1 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x104722098> : <type 'instance'>
avl_REF0 = set([11, 2, 19, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([11, 2, 19, 15]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 68
ACTION: avl1.insert(int2) 
int2 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1043b2d88> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([17, 7]) : <type 'set'>
==================================================
avl0 == avl1                                                            # STEP 69
ACTION: avl0 == avl1 
avl0 = <avlbug2.AVLTree instance at 0x104722098> : <type 'instance'>
avl1 = <avlbug2.AVLTree instance at 0x1043b2d88> : <type 'instance'>
avl_REF0 = set([11, 2, 19, 15]) : <type 'set'>
avl_REF1 = set([17, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF1 
==================================================
avl1.insert(int3)                                                       # STEP 70
ACTION: avl1.insert(int3) 
int3 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1043b2d88> : <type 'instance'>
avl_REF1 = set([17, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([17, 11, 7]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 71
ACTION: avl1.insert(int0) 
int0 = 19 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1043b2d88> : <type 'instance'>
avl_REF1 = set([17, 11, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([19, 17, 11, 7]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 72
ACTION: avl1.delete(int3) 
int3 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1043b2d88> : <type 'instance'>
avl_REF1 = set([19, 17, 11, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([19, 17, 7]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 73
ACTION: avl0.delete(int3) 
int3 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x104722098> : <type 'instance'>
avl_REF0 = set([11, 2, 19, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([2, 19, 15]) : <type 'set'>
==================================================
int3 = 11                                                               # STEP 74
ACTION: int3 = 11 
int3 = 11 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 75
ACTION: avl0.insert(int0) 
int0 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x104722098> : <type 'instance'>
avl_REF0 = set([2, 19, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
int1 = 12                                                               # STEP 76
ACTION: int1 = 12 
int1 = 6 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 77
ACTION: avl1.insert(int3) 
int3 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1043b2d88> : <type 'instance'>
avl_REF1 = set([19, 17, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([19, 17, 11, 7]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 78
ACTION: avl0.insert(int1) 
int1 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x104722098> : <type 'instance'>
avl_REF0 = set([2, 19, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([2, 12, 15, 19]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 79
ACTION: avl0.delete(int3) 
int3 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x104722098> : <type 'instance'>
avl_REF0 = set([2, 12, 15, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl1.delete(int2)                                                       # STEP 80
ACTION: avl1.delete(int2) 
int2 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1043b2d88> : <type 'instance'>
avl_REF1 = set([19, 17, 11, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([19, 11, 7]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10475d9e0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
  13 [3:1]
-- < 7 [2:1]
---- < 6 [1:1]
------ < 3 [0:0] L
---- > 9 [0:0] L
-- > 19 [1:1]
---- < 14 [0:0] L
set([3, 6, 7, 9, 13, 14, 19])
  8 [2:0]
-- < 7 [1:1]
---- < 5 [0:0] L
-- > 19 [1:0]
---- < 12 [0:0] L
---- > 20 [0:0] L
set([5, 7, 8, 12, 19, 20])
  8 [2:0]
-- < 7 [1:1]
---- < 5 [0:0] L
-- > 19 [1:0]
---- < 12 [0:0] L
---- > 20 [0:0] L
set([5, 7, 8, 12, 19, 20])
  10 [2:0]
-- < 7 [1:0]
---- < 1 [0:0] L
---- > 9 [0:0] L
-- > 12 [1:-1]
---- > 20 [0:0] L
set([1, 7, 9, 10, 12, 20])
  13 [3:1]
-- < 7 [2:1]
---- < 6 [1:1]
------ < 3 [0:0] L
---- > 9 [0:0] L
-- > 19 [1:1]
---- < 14 [0:0] L
set([3, 6, 7, 9, 13, 14, 19])
  13 [3:1]
-- < 7 [2:1]
---- < 6 [1:1]
------ < 3 [0:0] L
---- > 9 [0:0] L
-- > 19 [1:1]
---- < 14 [0:0] L
set([3, 6, 7, 9, 13, 14, 19])
  10 [2:0]
-- < 7 [1:0]
---- < 1 [0:0] L
---- > 9 [0:0] L
-- > 12 [1:-1]
---- > 20 [0:0] L
set([1, 7, 9, 10, 12, 20])
  10 [2:0]
-- < 7 [1:0]
---- < 1 [0:0] L
---- > 9 [0:0] L
-- > 12 [1:-1]
---- > 20 [0:0] L
set([1, 7, 9, 10, 12, 20])
  10 [2:0]
-- < 7 [1:0]
---- < 1 [0:0] L
---- > 9 [0:0] L
-- > 12 [1:-1]
---- > 20 [0:0] L
set([1, 7, 9, 10, 12, 20])
TEST #3 STEP #76 (0:00:30.007053) Mon May  1 03:01:46 2017 [ 160 stmts 212 branches ]
  8 [3:-1]
-- < 7 [1:1]
---- < 5 [0:0] L
-- > 17 [2:0]
---- < 12 [1:0]
------ < 9 [0:0] L
------ > 13 [0:0] L
---- > 19 [1:-1]
------ > 20 [0:0] L
set([5, 7, 8, 9, 12, 13, 17, 19, 20])
  10 [2:0]
-- < 7 [1:0]
---- < 1 [0:0] L
---- > 9 [0:0] L
-- > 12 [1:-1]
---- > 20 [0:0] L
set([1, 7, 9, 10, 12, 20])
  10 [3:1]
-- < 7 [2:1]
---- < 1 [1:-1]
------ > 4 [0:0] L
---- > 9 [0:0] L
-- > 18 [1:0]
---- < 12 [0:0] L
---- > 20 [0:0] L
set([1, 4, 7, 9, 10, 12, 18, 20])
  10 [3:1]
-- < 7 [2:1]
---- < 1 [1:-1]
------ > 4 [0:0] L
---- > 9 [0:0] L
-- > 18 [1:0]
---- < 12 [0:0] L
---- > 20 [0:0] L
set([1, 4, 7, 9, 10, 12, 18, 20])
  10 [3:1]
-- < 7 [2:1]
---- < 1 [1:-1]
------ > 4 [0:0] L
---- > 9 [0:0] L
-- > 18 [1:0]
---- < 12 [0:0] L
---- > 20 [0:0] L
set([1, 4, 7, 9, 10, 12, 18, 20])
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 15
STOPPING TESTING DUE TO TIMEOUT
8.73660279311 PERCENT COVERED
60.1736531258 TOTAL RUNTIME
7 EXECUTED
596 TOTAL TEST OPERATIONS
26.2650465965 TIME SPENT EXECUTING TEST OPERATIONS
0.0846998691559 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
26.5246331692 TIME SPENT CHECKING PROPERTIES
52.7896797657 TOTAL TIME SPENT RUNNING SUT
0.00376105308533 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int2 = 10                                                                # STEP 0
avl0 = avl.AVLTree()                                                     # STEP 1
avl0.delete(int2)                                                        # STEP 2
result = avl0.inorder()                                                  # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
avl0.delete(int2)                                                        # STEP 5
int3 = 5                                                                 # STEP 6
avl0.delete(int3)                                                        # STEP 7
int1 = 11                                                                # STEP 8
avl1.insert(int2)                                                        # STEP 9
avl0.insert(int3)                                                       # STEP 10
avl1.delete(int3)                                                       # STEP 11
int0 = 1                                                                # STEP 12
avl0.insert(int1)                                                       # STEP 13
avl0.insert(int0)                                                       # STEP 14
int1 = 3                                                                # STEP 15
avl1.insert(int3)                                                       # STEP 16
avl1.insert(int0)                                                       # STEP 17
int0 = 2                                                                # STEP 18
int3 = 15                                                               # STEP 19
result = avl0.inorder()                                                 # STEP 20
avl0 = avl.AVLTree()                                                    # STEP 21
avl0.delete(int2)                                                       # STEP 22
avl1.delete(int2)                                                       # STEP 23
int2 = 18                                                               # STEP 24
avl0.insert(int0)                                                       # STEP 25
avl1.insert(int0)                                                       # STEP 26
int0 = 14                                                               # STEP 27
avl0.delete(int2)                                                       # STEP 28
avl1.insert(int0)                                                       # STEP 29
int0 = 7                                                                # STEP 30
avl1 == avl1                                                            # STEP 31
avl1.delete(int2)                                                       # STEP 32
avl1.delete(int2)                                                       # STEP 33
int2 = 19                                                               # STEP 34
avl0.insert(int3)                                                       # STEP 35
avl0.insert(int2)                                                       # STEP 36
avl1.delete(int2)                                                       # STEP 37
result = avl0.inorder()                                                 # STEP 38
int2 = 17                                                               # STEP 39
int3 = 11                                                               # STEP 40
avl1.insert(int0)                                                       # STEP 41
avl1.insert(int2)                                                       # STEP 42
int0 = 19                                                               # STEP 43
int2 = 3                                                                # STEP 44
avl1.insert(int2)                                                       # STEP 45
avl0.delete(int1)                                                       # STEP 46
result = avl0.inorder()                                                 # STEP 47
int1 = 7                                                                # STEP 48
int2 = 5                                                                # STEP 49
avl1.insert(int2)                                                       # STEP 50
avl1.delete(int3)                                                       # STEP 51
avl1.display()                                                          # STEP 52
int2 = 18                                                               # STEP 53
avl1.insert(int1)                                                       # STEP 54
avl1.display()                                                          # STEP 55
avl1 = avl.AVLTree()                                                    # STEP 56
avl1.insert(int1)                                                       # STEP 57
avl0.delete(int2)                                                       # STEP 58
avl1.delete(int0)                                                       # STEP 59
avl0.delete(int2)                                                       # STEP 60
avl0.insert(int3)                                                       # STEP 61
int1 = 6                                                                # STEP 62
result = avl1.inorder()                                                 # STEP 63
avl1.delete(int1)                                                       # STEP 64
avl0.insert(int1)                                                       # STEP 65
int2 = 17                                                               # STEP 66
avl0.delete(int1)                                                       # STEP 67
avl1.insert(int2)                                                       # STEP 68
avl0 == avl1                                                            # STEP 69
avl1.insert(int3)                                                       # STEP 70
avl1.insert(int0)                                                       # STEP 71
avl1.delete(int3)                                                       # STEP 72
avl0.delete(int3)                                                       # STEP 73
int3 = 11                                                               # STEP 74
avl0.insert(int0)                                                       # STEP 75
int1 = 12                                                               # STEP 76
avl1.insert(int3)                                                       # STEP 77
avl0.insert(int1)                                                       # STEP 78
avl0.delete(int3)                                                       # STEP 79
avl1.delete(int2)                                                       # STEP 80
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10475d9e0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
212 BRANCHES COVERED
160 STATEMENTS COVERED

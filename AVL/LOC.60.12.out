Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.99374.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104bcacb0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 80 steps

SAVING TEST AS failure.99374.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 17                                                                # STEP 0
ACTION: int2 = 17 
int2 = None : <type 'NoneType'>
=> int2 = 17 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 1
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x104c4f8c0> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.delete(int2)                                                        # STEP 2
ACTION: avl1.delete(int2) 
int2 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c4f8c0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.insert(int2)                                                        # STEP 3
ACTION: avl1.insert(int2) 
int2 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c4f8c0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([17]) : <type 'set'>
==================================================
avl1.insert(int2)                                                        # STEP 4
ACTION: avl1.insert(int2) 
int2 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c4f8c0> : <type 'instance'>
avl_REF1 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
avl1.delete(int2)                                                        # STEP 5
ACTION: avl1.delete(int2) 
int2 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c4f8c0> : <type 'instance'>
avl_REF1 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
result = avl1.inorder()                                                  # STEP 6
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104c4f8c0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int2 = 15                                                                # STEP 7
ACTION: int2 = 15 
int2 = 17 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
int3 = 16                                                                # STEP 8
ACTION: int3 = 16 
int3 = None : <type 'NoneType'>
=> int3 = 16 : <type 'int'>
==================================================
int1 = 7                                                                 # STEP 9
ACTION: int1 = 7 
int1 = None : <type 'NoneType'>
=> int1 = 7 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 10
ACTION: avl1.insert(int1) 
int1 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c4f8c0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([7]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 11
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104c4f8c0> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int1)                                                       # STEP 12
ACTION: avl1.insert(int1) 
int1 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c4f8c0> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl1.delete(int2)                                                       # STEP 13
ACTION: avl1.delete(int2) 
int2 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c4f8c0> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int2 = 12                                                               # STEP 14
ACTION: int2 = 12 
int2 = 15 : <type 'int'>
=> int2 = 12 : <type 'int'>
==================================================
result = avl1.find(int3)                                                # STEP 15
ACTION: result = avl1.find(int3) 
int3 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c4f8c0> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl1.delete(int3)                                                       # STEP 16
ACTION: avl1.delete(int3) 
int3 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c4f8c0> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int0 = 19                                                               # STEP 17
ACTION: int0 = 19 
int0 = None : <type 'NoneType'>
=> int0 = 19 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 18
ACTION: avl1.delete(int0) 
int0 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c4f8c0> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.insert(int3)                                                       # STEP 19
ACTION: avl1.insert(int3) 
int3 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c4f8c0> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([16, 7]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 20
ACTION: avl1.insert(int0) 
int0 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c4f8c0> : <type 'instance'>
avl_REF1 = set([16, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([16, 19, 7]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 21
ACTION: avl1.delete(int1) 
int1 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c4f8c0> : <type 'instance'>
avl_REF1 = set([16, 19, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([16, 19]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 22
ACTION: avl1.delete(int3) 
int3 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c4f8c0> : <type 'instance'>
avl_REF1 = set([16, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([19]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 23
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104c4f8c0> : <type 'instance'>
avl_REF1 = set([19]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int0)                                                       # STEP 24
ACTION: avl1.insert(int0) 
int0 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c4f8c0> : <type 'instance'>
avl_REF1 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.delete(int3)                                                       # STEP 25
ACTION: avl1.delete(int3) 
int3 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c4f8c0> : <type 'instance'>
avl_REF1 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.delete(int0)                                                       # STEP 26
ACTION: avl1.delete(int0) 
int0 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c4f8c0> : <type 'instance'>
avl_REF1 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 27
ACTION: avl1.insert(int1) 
int1 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c4f8c0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([7]) : <type 'set'>
==================================================
int3 = 12                                                               # STEP 28
ACTION: int3 = 12 
int3 = 16 : <type 'int'>
=> int3 = 12 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 29
ACTION: avl1.insert(int3) 
int3 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c4f8c0> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([12, 7]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 30
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104c4f8c0> : <type 'instance'>
avl_REF1 = set([12, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.delete(int0)                                                       # STEP 31
ACTION: avl1.delete(int0) 
int0 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c4f8c0> : <type 'instance'>
avl_REF1 = set([12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.delete(int1)                                                       # STEP 32
ACTION: avl1.delete(int1) 
int1 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c4f8c0> : <type 'instance'>
avl_REF1 = set([12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([12]) : <type 'set'>
==================================================
int1 = 8                                                                # STEP 33
ACTION: int1 = 8 
int1 = 7 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 34
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x104c4f8c0> : <type 'instance'>
avl_REF1 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
int0 = 16                                                               # STEP 35
ACTION: int0 = 16 
int0 = 19 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 36
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x104c4f8c0> : <type 'instance'>
avl_REF1 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.delete(int3)                                                       # STEP 37
ACTION: avl1.delete(int3) 
int3 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c4f8c0> : <type 'instance'>
avl_REF1 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 38
ACTION: avl1.insert(int1) 
int1 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c4f8c0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([8]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 39
ACTION: avl1.delete(int0) 
int0 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c4f8c0> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.insert(int1)                                                       # STEP 40
ACTION: avl1.insert(int1) 
int1 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c4f8c0> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
result = avl1.inorder()                                                 # STEP 41
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104c4f8c0> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int3)                                                       # STEP 42
ACTION: avl1.insert(int3) 
int3 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c4f8c0> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([8, 12]) : <type 'set'>
==================================================
int0 = 13                                                               # STEP 43
ACTION: int0 = 13 
int0 = 16 : <type 'int'>
=> int0 = 13 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 44
ACTION: avl1.insert(int2) 
int2 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c4f8c0> : <type 'instance'>
avl_REF1 = set([8, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
int3 = 1                                                                # STEP 45
ACTION: int3 = 1 
int3 = 12 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 46
ACTION: avl1.delete(int1) 
int1 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c4f8c0> : <type 'instance'>
avl_REF1 = set([8, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([12]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 47
ACTION: avl1.insert(int1) 
int1 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c4f8c0> : <type 'instance'>
avl_REF1 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([8, 12]) : <type 'set'>
==================================================
int2 = 5                                                                # STEP 48
ACTION: int2 = 5 
int2 = 12 : <type 'int'>
=> int2 = 5 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 49
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104c4f8c0> : <type 'instance'>
avl_REF1 = set([8, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int1)                                                       # STEP 50
ACTION: avl1.insert(int1) 
int1 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c4f8c0> : <type 'instance'>
avl_REF1 = set([8, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl1.insert(int1)                                                       # STEP 51
ACTION: avl1.insert(int1) 
int1 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c4f8c0> : <type 'instance'>
avl_REF1 = set([8, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl1.delete(int0)                                                       # STEP 52
ACTION: avl1.delete(int0) 
int0 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c4f8c0> : <type 'instance'>
avl_REF1 = set([8, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int0 = 4                                                                # STEP 53
ACTION: int0 = 4 
int0 = 13 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 54
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104c4f8c0> : <type 'instance'>
avl_REF1 = set([8, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int2)                                                       # STEP 55
ACTION: avl1.insert(int2) 
int2 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c4f8c0> : <type 'instance'>
avl_REF1 = set([8, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([5, 8, 12]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 56
ACTION: avl1.delete(int3) 
int3 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c4f8c0> : <type 'instance'>
avl_REF1 = set([5, 8, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.delete(int2)                                                       # STEP 57
ACTION: avl1.delete(int2) 
int2 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c4f8c0> : <type 'instance'>
avl_REF1 = set([5, 8, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([8, 12]) : <type 'set'>
==================================================
int2 = 10                                                               # STEP 58
ACTION: int2 = 10 
int2 = 5 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
result = avl1.find(int3)                                                # STEP 59
ACTION: result = avl1.find(int3) 
int3 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c4f8c0> : <type 'instance'>
avl_REF1 = set([8, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
int1 = 8                                                                # STEP 60
ACTION: int1 = 8 
int1 = 8 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 61
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x104c4f8c0> : <type 'instance'>
avl_REF1 = set([8, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.insert(int1)                                                       # STEP 62
ACTION: avl1.insert(int1) 
int1 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c4f8c0> : <type 'instance'>
avl_REF1 = set([8, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl1.delete(int2)                                                       # STEP 63
ACTION: avl1.delete(int2) 
int2 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c4f8c0> : <type 'instance'>
avl_REF1 = set([8, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.delete(int3)                                                       # STEP 64
ACTION: avl1.delete(int3) 
int3 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c4f8c0> : <type 'instance'>
avl_REF1 = set([8, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int1 = 15                                                               # STEP 65
ACTION: int1 = 15 
int1 = 8 : <type 'int'>
=> int1 = 15 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 66
ACTION: avl1.insert(int2) 
int2 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c4f8c0> : <type 'instance'>
avl_REF1 = set([8, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([8, 10, 12]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 67
ACTION: avl1.insert(int1) 
int1 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c4f8c0> : <type 'instance'>
avl_REF1 = set([8, 10, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([8, 10, 12, 15]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 68
ACTION: avl1.delete(int1) 
int1 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c4f8c0> : <type 'instance'>
avl_REF1 = set([8, 10, 12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([8, 10, 12]) : <type 'set'>
==================================================
int1 = 17                                                               # STEP 69
ACTION: int1 = 17 
int1 = 15 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 70
ACTION: avl1.insert(int2) 
int2 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c4f8c0> : <type 'instance'>
avl_REF1 = set([8, 10, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
result = avl1.inorder()                                                 # STEP 71
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104c4f8c0> : <type 'instance'>
avl_REF1 = set([8, 10, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int3 = 19                                                               # STEP 72
ACTION: int3 = 19 
int3 = 1 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 73
ACTION: avl1.delete(int0) 
int0 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c4f8c0> : <type 'instance'>
avl_REF1 = set([8, 10, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.delete(int2)                                                       # STEP 74
ACTION: avl1.delete(int2) 
int2 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c4f8c0> : <type 'instance'>
avl_REF1 = set([8, 10, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([8, 12]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 75
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104c4f8c0> : <type 'instance'>
avl_REF1 = set([8, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int0 = 14                                                               # STEP 76
ACTION: int0 = 14 
int0 = 4 : <type 'int'>
=> int0 = 14 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 77
ACTION: avl1.insert(int3) 
int3 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c4f8c0> : <type 'instance'>
avl_REF1 = set([8, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([19, 8, 12]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 78
ACTION: avl1.insert(int2) 
int2 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c4f8c0> : <type 'instance'>
avl_REF1 = set([19, 8, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([19, 8, 10, 12]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 79
ACTION: avl1.delete(int3) 
int3 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c4f8c0> : <type 'instance'>
avl_REF1 = set([19, 8, 10, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([8, 10, 12]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104b63d40>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104eb5440>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 31 steps

SAVING TEST AS failure.99374.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
avl0 = avl.AVLTree()                                                     # STEP 0
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x104b81fc8> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int0 = 7                                                                 # STEP 1
ACTION: int0 = 7 
int0 = None : <type 'NoneType'>
=> int0 = 7 : <type 'int'>
==================================================
avl0.delete(int0)                                                        # STEP 2
ACTION: avl0.delete(int0) 
int0 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104b81fc8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0 == avl0                                                             # STEP 3
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x104b81fc8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x104eb5c68> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int1 = 4                                                                 # STEP 5
ACTION: int1 = 4 
int1 = None : <type 'NoneType'>
=> int1 = 4 : <type 'int'>
==================================================
int3 = 11                                                                # STEP 6
ACTION: int3 = 11 
int3 = None : <type 'NoneType'>
=> int3 = 11 : <type 'int'>
==================================================
int2 = 15                                                                # STEP 7
ACTION: int2 = 15 
int2 = None : <type 'NoneType'>
=> int2 = 15 : <type 'int'>
==================================================
avl0.delete(int0)                                                        # STEP 8
ACTION: avl0.delete(int0) 
int0 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104b81fc8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
result = avl0.inorder()                                                  # STEP 9
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104b81fc8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.delete(int0)                                                       # STEP 10
ACTION: avl0.delete(int0) 
int0 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104b81fc8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int0 = 10                                                               # STEP 11
ACTION: int0 = 10 
int0 = 7 : <type 'int'>
=> int0 = 10 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 12
ACTION: avl1.delete(int0) 
int0 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104eb5c68> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int0 = 18                                                               # STEP 13
ACTION: int0 = 18 
int0 = 10 : <type 'int'>
=> int0 = 18 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 14
ACTION: avl1.insert(int3) 
int3 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104eb5c68> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([11]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 15
ACTION: avl1.insert(int0) 
int0 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104eb5c68> : <type 'instance'>
avl_REF1 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([18, 11]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 16
ACTION: avl1.insert(int0) 
int0 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104eb5c68> : <type 'instance'>
avl_REF1 = set([18, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
int0 = 12                                                               # STEP 17
ACTION: int0 = 12 
int0 = 18 : <type 'int'>
=> int0 = 12 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 18
ACTION: avl0.delete(int1) 
int1 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104b81fc8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int1 = 1                                                                # STEP 19
ACTION: int1 = 1 
int1 = 4 : <type 'int'>
=> int1 = 1 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 20
ACTION: avl1.insert(int0) 
int0 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104eb5c68> : <type 'instance'>
avl_REF1 = set([18, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([18, 11, 12]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 21
ACTION: avl0.insert(int1) 
int1 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104b81fc8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([1]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 22
ACTION: avl0.insert(int0) 
int0 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104b81fc8> : <type 'instance'>
avl_REF0 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([1, 12]) : <type 'set'>
==================================================
result = avl1.find(int2)                                                # STEP 23
ACTION: result = avl1.find(int2) 
int2 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104eb5c68> : <type 'instance'>
avl_REF1 = set([18, 11, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl0.delete(int2)                                                       # STEP 24
ACTION: avl0.delete(int2) 
int2 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104b81fc8> : <type 'instance'>
avl_REF0 = set([1, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int1 = 8                                                                # STEP 25
ACTION: int1 = 8 
int1 = 1 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 26
ACTION: avl1.insert(int1) 
int1 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104eb5c68> : <type 'instance'>
avl_REF1 = set([18, 11, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([8, 18, 11, 12]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 27
ACTION: avl1.insert(int1) 
int1 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104eb5c68> : <type 'instance'>
avl_REF1 = set([8, 18, 11, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
result = avl1.inorder()                                                 # STEP 28
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104eb5c68> : <type 'instance'>
avl_REF1 = set([8, 18, 11, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int3 = 5                                                                # STEP 29
ACTION: int3 = 5 
int3 = 11 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 30
ACTION: avl1.delete(int0) 
int0 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104eb5c68> : <type 'instance'>
avl_REF1 = set([8, 18, 11, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([8, 18, 11]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104e735a8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
TEST #4 STEP #69 (0:00:30.075078) Fri Apr 28 03:47:35 2017 [ 147 stmts 194 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1058bad40>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
Original test has 30 steps

SAVING TEST AS failure.99374.test.2
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 16                                                                # STEP 0
ACTION: int1 = 16 
int1 = None : <type 'NoneType'>
=> int1 = 16 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 1
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x1058baea8> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.insert(int1)                                                        # STEP 2
ACTION: avl0.insert(int1) 
int1 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058baea8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([16]) : <type 'set'>
==================================================
avl0 == avl0                                                             # STEP 3
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x1058baea8> : <type 'instance'>
avl_REF0 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
result = avl0.inorder()                                                  # STEP 4
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x1058baea8> : <type 'instance'>
avl_REF0 = set([16]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int1)                                                        # STEP 5
ACTION: avl0.insert(int1) 
int1 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058baea8> : <type 'instance'>
avl_REF0 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl0.insert(int1)                                                        # STEP 6
ACTION: avl0.insert(int1) 
int1 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058baea8> : <type 'instance'>
avl_REF0 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl0.delete(int1)                                                        # STEP 7
ACTION: avl0.delete(int1) 
int1 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058baea8> : <type 'instance'>
avl_REF0 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.delete(int1)                                                        # STEP 8
ACTION: avl0.delete(int1) 
int1 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058baea8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.delete(int1)                                                        # STEP 9
ACTION: avl0.delete(int1) 
int1 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058baea8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.insert(int1)                                                       # STEP 10
ACTION: avl0.insert(int1) 
int1 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058baea8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([16]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 11
ACTION: avl0.insert(int1) 
int1 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058baea8> : <type 'instance'>
avl_REF0 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl0.delete(int1)                                                       # STEP 12
ACTION: avl0.delete(int1) 
int1 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058baea8> : <type 'instance'>
avl_REF0 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 13
ACTION: avl0.delete(int1) 
int1 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058baea8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int0 = 18                                                               # STEP 14
ACTION: int0 = 18 
int0 = None : <type 'NoneType'>
=> int0 = 18 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 15
ACTION: avl0.insert(int0) 
int0 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058baea8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([18]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 16
ACTION: avl0.insert(int1) 
int1 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058baea8> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([16, 18]) : <type 'set'>
==================================================
int3 = 5                                                                # STEP 17
ACTION: int3 = 5 
int3 = None : <type 'NoneType'>
=> int3 = 5 : <type 'int'>
==================================================
int1 = 18                                                               # STEP 18
ACTION: int1 = 18 
int1 = 16 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
int0 = 9                                                                # STEP 19
ACTION: int0 = 9 
int0 = 18 : <type 'int'>
=> int0 = 9 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 20
ACTION: avl0.delete(int0) 
int0 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058baea8> : <type 'instance'>
avl_REF0 = set([16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.insert(int3)                                                       # STEP 21
ACTION: avl0.insert(int3) 
int3 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058baea8> : <type 'instance'>
avl_REF0 = set([16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([16, 18, 5]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 22
ACTION: avl0.insert(int0) 
int0 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058baea8> : <type 'instance'>
avl_REF0 = set([16, 18, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([16, 9, 18, 5]) : <type 'set'>
==================================================
int2 = 3                                                                # STEP 23
ACTION: int2 = 3 
int2 = None : <type 'NoneType'>
=> int2 = 3 : <type 'int'>
==================================================
int0 = 6                                                                # STEP 24
ACTION: int0 = 6 
int0 = 9 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 25
ACTION: avl0.delete(int0) 
int0 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058baea8> : <type 'instance'>
avl_REF0 = set([16, 9, 18, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.delete(int0)                                                       # STEP 26
ACTION: avl0.delete(int0) 
int0 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058baea8> : <type 'instance'>
avl_REF0 = set([16, 9, 18, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.delete(int0)                                                       # STEP 27
ACTION: avl0.delete(int0) 
int0 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058baea8> : <type 'instance'>
avl_REF0 = set([16, 9, 18, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0 == avl0                                                            # STEP 28
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x1058baea8> : <type 'instance'>
avl_REF0 = set([16, 9, 18, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl0.delete(int1)                                                       # STEP 29
ACTION: avl0.delete(int1) 
int1 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058baea8> : <type 'instance'>
avl_REF0 = set([16, 9, 18, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([16, 9, 5]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1058aab48>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 3 DISTINCT FAILURES
  6 [3:-1]
-- < 5 [1:1]
---- < 1 [0:0] L
-- > 18 [2:1]
---- < 12 [1:0]
------ < 8 [0:0] L
------ > 14 [0:0] L
---- > 20 [0:0] L
set([1, 5, 6, 8, 12, 14, 18, 20])
  6 [2:0]
-- < 5 [1:1]
---- < 1 [0:0] L
-- > 18 [1:0]
---- < 8 [0:0] L
---- > 20 [0:0] L
set([1, 5, 6, 8, 18, 20])
  6 [3:-1]
-- < 5 [1:1]
---- < 1 [0:0] L
-- > 18 [2:1]
---- < 8 [1:-1]
------ > 12 [0:0] L
---- > 20 [0:0] L
set([1, 5, 6, 8, 12, 18, 20])
  6 [3:-1]
-- < 5 [1:1]
---- < 1 [0:0] L
-- > 18 [2:1]
---- < 8 [1:-1]
------ > 12 [0:0] L
---- > 20 [0:0] L
set([1, 5, 6, 8, 12, 18, 20])
  6 [2:0]
-- < 5 [1:1]
---- < 1 [0:0] L
-- > 18 [1:0]
---- < 8 [0:0] L
---- > 20 [0:0] L
set([1, 5, 6, 8, 18, 20])
  6 [3:-1]
-- < 5 [1:1]
---- < 1 [0:0] L
-- > 18 [2:-1]
---- < 14 [0:0] L
---- > 20 [1:1]
------ < 19 [0:0] L
set([1, 5, 6, 14, 18, 19, 20])
  6 [3:-1]
-- < 5 [1:1]
---- < 1 [0:0] L
-- > 18 [2:1]
---- < 14 [1:-1]
------ > 17 [0:0] L
---- > 20 [0:0] L
set([1, 5, 6, 14, 17, 18, 20])
  6 [3:-1]
-- < 5 [1:1]
---- < 1 [0:0] L
-- > 18 [2:1]
---- < 14 [1:-1]
------ > 17 [0:0] L
---- > 20 [0:0] L
set([1, 5, 6, 14, 17, 18, 20])
  6 [3:-1]
-- < 3 [1:0]
---- < 1 [0:0] L
---- > 5 [0:0] L
-- > 18 [2:1]
---- < 14 [1:-1]
------ > 17 [0:0] L
---- > 20 [0:0] L
set([1, 3, 5, 6, 14, 17, 18, 20])
  6 [3:0]
-- < 3 [2:1]
---- < 1 [1:-1]
------ > 2 [0:0] L
---- > 5 [0:0] L
-- > 18 [2:1]
---- < 14 [1:-1]
------ > 17 [0:0] L
---- > 20 [0:0] L
set([1, 2, 3, 5, 6, 14, 17, 18, 20])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104e6a878>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 92 steps

SAVING TEST AS failure.99374.test.3
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 5                                                                 # STEP 0
ACTION: int0 = 5 
int0 = None : <type 'NoneType'>
=> int0 = 5 : <type 'int'>
==================================================
int2 = 16                                                                # STEP 1
ACTION: int2 = 16 
int2 = None : <type 'NoneType'>
=> int2 = 16 : <type 'int'>
==================================================
int3 = 13                                                                # STEP 2
ACTION: int3 = 13 
int3 = None : <type 'NoneType'>
=> int3 = 13 : <type 'int'>
==================================================
int1 = 18                                                                # STEP 3
ACTION: int1 = 18 
int1 = None : <type 'NoneType'>
=> int1 = 18 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x104e6ab90> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
result = avl1.find(int3)                                                 # STEP 5
ACTION: result = avl1.find(int3) 
int3 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e6ab90> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl1.insert(int2)                                                        # STEP 6
ACTION: avl1.insert(int2) 
int2 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e6ab90> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([16]) : <type 'set'>
==================================================
int3 = 6                                                                 # STEP 7
ACTION: int3 = 6 
int3 = 13 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
result = avl1.inorder()                                                  # STEP 8
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104e6ab90> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int1)                                                        # STEP 9
ACTION: avl1.insert(int1) 
int1 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e6ab90> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([16, 18]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 10
ACTION: avl1.delete(int2) 
int2 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e6ab90> : <type 'instance'>
avl_REF1 = set([16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([18]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 11
ACTION: avl1.delete(int1) 
int1 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e6ab90> : <type 'instance'>
avl_REF1 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int2 = 20                                                               # STEP 12
ACTION: int2 = 20 
int2 = 16 : <type 'int'>
=> int2 = 20 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 13
ACTION: avl1.delete(int1) 
int1 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e6ab90> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.delete(int0)                                                       # STEP 14
ACTION: avl1.delete(int0) 
int0 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e6ab90> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.insert(int1)                                                       # STEP 15
ACTION: avl1.insert(int1) 
int1 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e6ab90> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([18]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 16
ACTION: avl1.delete(int2) 
int2 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e6ab90> : <type 'instance'>
avl_REF1 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.insert(int3)                                                       # STEP 17
ACTION: avl1.insert(int3) 
int3 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e6ab90> : <type 'instance'>
avl_REF1 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([18, 6]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 18
ACTION: avl1.delete(int0) 
int0 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e6ab90> : <type 'instance'>
avl_REF1 = set([18, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.insert(int2)                                                       # STEP 19
ACTION: avl1.insert(int2) 
int2 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e6ab90> : <type 'instance'>
avl_REF1 = set([18, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([18, 20, 6]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 20
ACTION: avl1.insert(int3) 
int3 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e6ab90> : <type 'instance'>
avl_REF1 = set([18, 20, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
int3 = 19                                                               # STEP 21
ACTION: int3 = 19 
int3 = 6 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 22
ACTION: avl1.insert(int2) 
int2 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e6ab90> : <type 'instance'>
avl_REF1 = set([18, 20, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
avl1.insert(int1)                                                       # STEP 23
ACTION: avl1.insert(int1) 
int1 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e6ab90> : <type 'instance'>
avl_REF1 = set([18, 20, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl1.insert(int3)                                                       # STEP 24
ACTION: avl1.insert(int3) 
int3 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e6ab90> : <type 'instance'>
avl_REF1 = set([18, 20, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([18, 19, 20, 6]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 25
ACTION: avl1.insert(int2) 
int2 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e6ab90> : <type 'instance'>
avl_REF1 = set([18, 19, 20, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
avl1.delete(int3)                                                       # STEP 26
ACTION: avl1.delete(int3) 
int3 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e6ab90> : <type 'instance'>
avl_REF1 = set([18, 19, 20, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([18, 20, 6]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 27
ACTION: avl1.delete(int0) 
int0 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e6ab90> : <type 'instance'>
avl_REF1 = set([18, 20, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
result = avl1.inorder()                                                 # STEP 28
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104e6ab90> : <type 'instance'>
avl_REF1 = set([18, 20, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.delete(int1)                                                       # STEP 29
ACTION: avl1.delete(int1) 
int1 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e6ab90> : <type 'instance'>
avl_REF1 = set([18, 20, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([20, 6]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 30
ACTION: avl1.insert(int1) 
int1 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e6ab90> : <type 'instance'>
avl_REF1 = set([20, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([18, 20, 6]) : <type 'set'>
==================================================
int3 = 1                                                                # STEP 31
ACTION: int3 = 1 
int3 = 19 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 32
ACTION: avl1.insert(int0) 
int0 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e6ab90> : <type 'instance'>
avl_REF1 = set([18, 20, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([5, 6, 18, 20]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 33
ACTION: avl1.delete(int3) 
int3 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e6ab90> : <type 'instance'>
avl_REF1 = set([5, 6, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int1 = 8                                                                # STEP 34
ACTION: int1 = 8 
int1 = 18 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 35
ACTION: avl1.insert(int3) 
int3 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e6ab90> : <type 'instance'>
avl_REF1 = set([5, 6, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([1, 5, 6, 18, 20]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 36
ACTION: avl1.insert(int0) 
int0 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e6ab90> : <type 'instance'>
avl_REF1 = set([1, 5, 6, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
int3 = 12                                                               # STEP 37
ACTION: int3 = 12 
int3 = 1 : <type 'int'>
=> int3 = 12 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 38
ACTION: avl1.insert(int2) 
int2 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e6ab90> : <type 'instance'>
avl_REF1 = set([1, 5, 6, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
result = avl1.find(int2)                                                # STEP 39
ACTION: result = avl1.find(int2) 
int2 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e6ab90> : <type 'instance'>
avl_REF1 = set([1, 5, 6, 18, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl1.insert(int3)                                                       # STEP 40
ACTION: avl1.insert(int3) 
int3 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e6ab90> : <type 'instance'>
avl_REF1 = set([1, 5, 6, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([1, 5, 6, 12, 18, 20]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 41
ACTION: avl1.insert(int3) 
int3 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e6ab90> : <type 'instance'>
avl_REF1 = set([1, 5, 6, 12, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
int2 = 14                                                               # STEP 42
ACTION: int2 = 14 
int2 = 20 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 43
ACTION: avl1.insert(int1) 
int1 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e6ab90> : <type 'instance'>
avl_REF1 = set([1, 5, 6, 12, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([1, 5, 6, 8, 12, 18, 20]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 44
ACTION: avl1.insert(int0) 
int0 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e6ab90> : <type 'instance'>
avl_REF1 = set([1, 5, 6, 8, 12, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1 == avl1                                                            # STEP 45
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x104e6ab90> : <type 'instance'>
avl_REF1 = set([1, 5, 6, 8, 12, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.insert(int2)                                                       # STEP 46
ACTION: avl1.insert(int2) 
int2 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e6ab90> : <type 'instance'>
avl_REF1 = set([1, 5, 6, 8, 12, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([1, 5, 6, 8, 12, 14, 18, 20]) : <type 'set'>
==================================================
int0 = 8                                                                # STEP 47
ACTION: int0 = 8 
int0 = 5 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
avl1.display()                                                          # STEP 48
ACTION: avl1.display() 
avl1 = <avl.AVLTree instance at 0x104e6ab90> : <type 'instance'>
avl_REF1 = set([1, 5, 6, 8, 12, 14, 18, 20]) : <type 'set'>
  6 [3:-1]
-- < 5 [1:1]
---- < 1 [0:0] L
-- > 18 [2:1]
---- < 12 [1:0]
------ < 8 [0:0] L
------ > 14 [0:0] L
---- > 20 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([1, 5, 6, 8, 12, 14, 18, 20])
==================================================
avl1.delete(int1)                                                       # STEP 49
ACTION: avl1.delete(int1) 
int1 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e6ab90> : <type 'instance'>
avl_REF1 = set([1, 5, 6, 8, 12, 14, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([1, 5, 6, 12, 14, 18, 20]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 50
ACTION: avl1.insert(int0) 
int0 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e6ab90> : <type 'instance'>
avl_REF1 = set([1, 5, 6, 12, 14, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([1, 5, 6, 8, 12, 14, 18, 20]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 51
ACTION: avl1.delete(int3) 
int3 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e6ab90> : <type 'instance'>
avl_REF1 = set([1, 5, 6, 8, 12, 14, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([1, 5, 6, 8, 14, 18, 20]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 52
ACTION: avl1.delete(int2) 
int2 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e6ab90> : <type 'instance'>
avl_REF1 = set([1, 5, 6, 8, 14, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([1, 5, 6, 8, 18, 20]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 53
ACTION: avl1.insert(int0) 
int0 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e6ab90> : <type 'instance'>
avl_REF1 = set([1, 5, 6, 8, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.insert(int1)                                                       # STEP 54
ACTION: avl1.insert(int1) 
int1 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e6ab90> : <type 'instance'>
avl_REF1 = set([1, 5, 6, 8, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl1.display()                                                          # STEP 55
ACTION: avl1.display() 
avl1 = <avl.AVLTree instance at 0x104e6ab90> : <type 'instance'>
avl_REF1 = set([1, 5, 6, 8, 18, 20]) : <type 'set'>
  6 [2:0]
-- < 5 [1:1]
---- < 1 [0:0] L
-- > 18 [1:0]
---- < 8 [0:0] L
---- > 20 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([1, 5, 6, 8, 18, 20])
==================================================
avl1.insert(int3)                                                       # STEP 56
ACTION: avl1.insert(int3) 
int3 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e6ab90> : <type 'instance'>
avl_REF1 = set([1, 5, 6, 8, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([1, 5, 6, 8, 12, 18, 20]) : <type 'set'>
==================================================
avl1.display()                                                          # STEP 57
ACTION: avl1.display() 
avl1 = <avl.AVLTree instance at 0x104e6ab90> : <type 'instance'>
avl_REF1 = set([1, 5, 6, 8, 12, 18, 20]) : <type 'set'>
  6 [3:-1]
-- < 5 [1:1]
---- < 1 [0:0] L
-- > 18 [2:1]
---- < 8 [1:-1]
------ > 12 [0:0] L
---- > 20 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([1, 5, 6, 8, 12, 18, 20])
==================================================
avl1.display()                                                          # STEP 58
ACTION: avl1.display() 
avl1 = <avl.AVLTree instance at 0x104e6ab90> : <type 'instance'>
avl_REF1 = set([1, 5, 6, 8, 12, 18, 20]) : <type 'set'>
  6 [3:-1]
-- < 5 [1:1]
---- < 1 [0:0] L
-- > 18 [2:1]
---- < 8 [1:-1]
------ > 12 [0:0] L
---- > 20 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([1, 5, 6, 8, 12, 18, 20])
==================================================
avl1.delete(int3)                                                       # STEP 59
ACTION: avl1.delete(int3) 
int3 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e6ab90> : <type 'instance'>
avl_REF1 = set([1, 5, 6, 8, 12, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([1, 5, 6, 8, 18, 20]) : <type 'set'>
==================================================
avl1.display()                                                          # STEP 60
ACTION: avl1.display() 
avl1 = <avl.AVLTree instance at 0x104e6ab90> : <type 'instance'>
avl_REF1 = set([1, 5, 6, 8, 18, 20]) : <type 'set'>
  6 [2:0]
-- < 5 [1:1]
---- < 1 [0:0] L
-- > 18 [1:0]
---- < 8 [0:0] L
---- > 20 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([1, 5, 6, 8, 18, 20])
==================================================
avl1.insert(int2)                                                       # STEP 61
ACTION: avl1.insert(int2) 
int2 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e6ab90> : <type 'instance'>
avl_REF1 = set([1, 5, 6, 8, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([1, 5, 6, 8, 14, 18, 20]) : <type 'set'>
==================================================
int0 = 19                                                               # STEP 62
ACTION: int0 = 19 
int0 = 8 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
int3 = 15                                                               # STEP 63
ACTION: int3 = 15 
int3 = 12 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
result = avl1.find(int1)                                                # STEP 64
ACTION: result = avl1.find(int1) 
int1 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e6ab90> : <type 'instance'>
avl_REF1 = set([1, 5, 6, 8, 14, 18, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl1.delete(int1)                                                       # STEP 65
ACTION: avl1.delete(int1) 
int1 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e6ab90> : <type 'instance'>
avl_REF1 = set([1, 5, 6, 8, 14, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([1, 5, 6, 14, 18, 20]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 66
ACTION: avl1.insert(int0) 
int0 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e6ab90> : <type 'instance'>
avl_REF1 = set([1, 5, 6, 14, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([1, 5, 6, 14, 18, 19, 20]) : <type 'set'>
==================================================
avl1.display()                                                          # STEP 67
ACTION: avl1.display() 
avl1 = <avl.AVLTree instance at 0x104e6ab90> : <type 'instance'>
avl_REF1 = set([1, 5, 6, 14, 18, 19, 20]) : <type 'set'>
  6 [3:-1]
-- < 5 [1:1]
---- < 1 [0:0] L
-- > 18 [2:-1]
---- < 14 [0:0] L
---- > 20 [1:1]
------ < 19 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([1, 5, 6, 14, 18, 19, 20])
==================================================
avl1.insert(int0)                                                       # STEP 68
ACTION: avl1.insert(int0) 
int0 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e6ab90> : <type 'instance'>
avl_REF1 = set([1, 5, 6, 14, 18, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
int1 = 3                                                                # STEP 69
ACTION: int1 = 3 
int1 = 8 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
int2 = 17                                                               # STEP 70
ACTION: int2 = 17 
int2 = 14 : <type 'int'>
=> int2 = 17 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 71
ACTION: avl1.insert(int2) 
int2 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e6ab90> : <type 'instance'>
avl_REF1 = set([1, 5, 6, 14, 18, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([1, 5, 6, 14, 17, 18, 19, 20]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 72
ACTION: avl1.delete(int0) 
int0 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e6ab90> : <type 'instance'>
avl_REF1 = set([1, 5, 6, 14, 17, 18, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([1, 5, 6, 14, 17, 18, 20]) : <type 'set'>
==================================================
avl1.display()                                                          # STEP 73
ACTION: avl1.display() 
avl1 = <avl.AVLTree instance at 0x104e6ab90> : <type 'instance'>
avl_REF1 = set([1, 5, 6, 14, 17, 18, 20]) : <type 'set'>
  6 [3:-1]
-- < 5 [1:1]
---- < 1 [0:0] L
-- > 18 [2:1]
---- < 14 [1:-1]
------ > 17 [0:0] L
---- > 20 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([1, 5, 6, 14, 17, 18, 20])
==================================================
avl1.delete(int0)                                                       # STEP 74
ACTION: avl1.delete(int0) 
int0 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e6ab90> : <type 'instance'>
avl_REF1 = set([1, 5, 6, 14, 17, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int0 = 19                                                               # STEP 75
ACTION: int0 = 19 
int0 = 19 : <type 'int'>
==================================================
avl1.display()                                                          # STEP 76
ACTION: avl1.display() 
avl1 = <avl.AVLTree instance at 0x104e6ab90> : <type 'instance'>
avl_REF1 = set([1, 5, 6, 14, 17, 18, 20]) : <type 'set'>
  6 [3:-1]
-- < 5 [1:1]
---- < 1 [0:0] L
-- > 18 [2:1]
---- < 14 [1:-1]
------ > 17 [0:0] L
---- > 20 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([1, 5, 6, 14, 17, 18, 20])
==================================================
int2 = 18                                                               # STEP 77
ACTION: int2 = 18 
int2 = 17 : <type 'int'>
=> int2 = 18 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 78
ACTION: avl1.insert(int2) 
int2 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e6ab90> : <type 'instance'>
avl_REF1 = set([1, 5, 6, 14, 17, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
int2 = 14                                                               # STEP 79
ACTION: int2 = 14 
int2 = 18 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 80
ACTION: avl1.insert(int1) 
int1 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e6ab90> : <type 'instance'>
avl_REF1 = set([1, 5, 6, 14, 17, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([1, 3, 5, 6, 14, 17, 18, 20]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 81
ACTION: avl1.delete(int3) 
int3 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e6ab90> : <type 'instance'>
avl_REF1 = set([1, 3, 5, 6, 14, 17, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.display()                                                          # STEP 82
ACTION: avl1.display() 
avl1 = <avl.AVLTree instance at 0x104e6ab90> : <type 'instance'>
avl_REF1 = set([1, 3, 5, 6, 14, 17, 18, 20]) : <type 'set'>
  6 [3:-1]
-- < 3 [1:0]
---- < 1 [0:0] L
---- > 5 [0:0] L
-- > 18 [2:1]
---- < 14 [1:-1]
------ > 17 [0:0] L
---- > 20 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([1, 3, 5, 6, 14, 17, 18, 20])
==================================================
avl1.delete(int0)                                                       # STEP 83
ACTION: avl1.delete(int0) 
int0 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e6ab90> : <type 'instance'>
avl_REF1 = set([1, 3, 5, 6, 14, 17, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int1 = 2                                                                # STEP 84
ACTION: int1 = 2 
int1 = 3 : <type 'int'>
=> int1 = 2 : <type 'int'>
==================================================
int3 = 5                                                                # STEP 85
ACTION: int3 = 5 
int3 = 15 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 86
ACTION: avl1.insert(int1) 
int1 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e6ab90> : <type 'instance'>
avl_REF1 = set([1, 3, 5, 6, 14, 17, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([1, 2, 3, 5, 6, 14, 17, 18, 20]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 87
ACTION: avl1.insert(int2) 
int2 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e6ab90> : <type 'instance'>
avl_REF1 = set([1, 2, 3, 5, 6, 14, 17, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
avl1.insert(int1)                                                       # STEP 88
ACTION: avl1.insert(int1) 
int1 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e6ab90> : <type 'instance'>
avl_REF1 = set([1, 2, 3, 5, 6, 14, 17, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl1.insert(int1)                                                       # STEP 89
ACTION: avl1.insert(int1) 
int1 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e6ab90> : <type 'instance'>
avl_REF1 = set([1, 2, 3, 5, 6, 14, 17, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl1.display()                                                          # STEP 90
ACTION: avl1.display() 
avl1 = <avl.AVLTree instance at 0x104e6ab90> : <type 'instance'>
avl_REF1 = set([1, 2, 3, 5, 6, 14, 17, 18, 20]) : <type 'set'>
  6 [3:0]
-- < 3 [2:1]
---- < 1 [1:-1]
------ > 2 [0:0] L
---- > 5 [0:0] L
-- > 18 [2:1]
---- < 14 [1:-1]
------ > 17 [0:0] L
---- > 20 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([1, 2, 3, 5, 6, 14, 17, 18, 20])
==================================================
avl1.delete(int3)                                                       # STEP 91
ACTION: avl1.delete(int3) 
int3 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e6ab90> : <type 'instance'>
avl_REF1 = set([1, 2, 3, 5, 6, 14, 17, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([1, 2, 3, 6, 14, 17, 18, 20]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104e5b098>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 4 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 0
STOPPING TESTING DUE TO TIMEOUT
8.44927044452 PERCENT COVERED
62.8473098278 TOTAL RUNTIME
9 EXECUTED
633 TOTAL TEST OPERATIONS
22.60678339 TIME SPENT EXECUTING TEST OPERATIONS
0.0654220581055 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
22.7412838936 TIME SPENT CHECKING PROPERTIES
45.3480672836 TOTAL TIME SPENT RUNNING SUT
0.00453662872314 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
4 FAILED
0 REPEATS OF FAILURES
4 ACTUAL DISTINCT FAILURES

FAILURE 0
int2 = 17                                                                # STEP 0
avl1 = avl.AVLTree()                                                     # STEP 1
avl1.delete(int2)                                                        # STEP 2
avl1.insert(int2)                                                        # STEP 3
avl1.insert(int2)                                                        # STEP 4
avl1.delete(int2)                                                        # STEP 5
result = avl1.inorder()                                                  # STEP 6
int2 = 15                                                                # STEP 7
int3 = 16                                                                # STEP 8
int1 = 7                                                                 # STEP 9
avl1.insert(int1)                                                       # STEP 10
result = avl1.inorder()                                                 # STEP 11
avl1.insert(int1)                                                       # STEP 12
avl1.delete(int2)                                                       # STEP 13
int2 = 12                                                               # STEP 14
result = avl1.find(int3)                                                # STEP 15
avl1.delete(int3)                                                       # STEP 16
int0 = 19                                                               # STEP 17
avl1.delete(int0)                                                       # STEP 18
avl1.insert(int3)                                                       # STEP 19
avl1.insert(int0)                                                       # STEP 20
avl1.delete(int1)                                                       # STEP 21
avl1.delete(int3)                                                       # STEP 22
result = avl1.inorder()                                                 # STEP 23
avl1.insert(int0)                                                       # STEP 24
avl1.delete(int3)                                                       # STEP 25
avl1.delete(int0)                                                       # STEP 26
avl1.insert(int1)                                                       # STEP 27
int3 = 12                                                               # STEP 28
avl1.insert(int3)                                                       # STEP 29
result = avl1.inorder()                                                 # STEP 30
avl1.delete(int0)                                                       # STEP 31
avl1.delete(int1)                                                       # STEP 32
int1 = 8                                                                # STEP 33
avl1 == avl1                                                            # STEP 34
int0 = 16                                                               # STEP 35
avl1 == avl1                                                            # STEP 36
avl1.delete(int3)                                                       # STEP 37
avl1.insert(int1)                                                       # STEP 38
avl1.delete(int0)                                                       # STEP 39
avl1.insert(int1)                                                       # STEP 40
result = avl1.inorder()                                                 # STEP 41
avl1.insert(int3)                                                       # STEP 42
int0 = 13                                                               # STEP 43
avl1.insert(int2)                                                       # STEP 44
int3 = 1                                                                # STEP 45
avl1.delete(int1)                                                       # STEP 46
avl1.insert(int1)                                                       # STEP 47
int2 = 5                                                                # STEP 48
result = avl1.inorder()                                                 # STEP 49
avl1.insert(int1)                                                       # STEP 50
avl1.insert(int1)                                                       # STEP 51
avl1.delete(int0)                                                       # STEP 52
int0 = 4                                                                # STEP 53
result = avl1.inorder()                                                 # STEP 54
avl1.insert(int2)                                                       # STEP 55
avl1.delete(int3)                                                       # STEP 56
avl1.delete(int2)                                                       # STEP 57
int2 = 10                                                               # STEP 58
result = avl1.find(int3)                                                # STEP 59
int1 = 8                                                                # STEP 60
avl1 == avl1                                                            # STEP 61
avl1.insert(int1)                                                       # STEP 62
avl1.delete(int2)                                                       # STEP 63
avl1.delete(int3)                                                       # STEP 64
int1 = 15                                                               # STEP 65
avl1.insert(int2)                                                       # STEP 66
avl1.insert(int1)                                                       # STEP 67
avl1.delete(int1)                                                       # STEP 68
int1 = 17                                                               # STEP 69
avl1.insert(int2)                                                       # STEP 70
result = avl1.inorder()                                                 # STEP 71
int3 = 19                                                               # STEP 72
avl1.delete(int0)                                                       # STEP 73
avl1.delete(int2)                                                       # STEP 74
result = avl1.inorder()                                                 # STEP 75
int0 = 14                                                               # STEP 76
avl1.insert(int3)                                                       # STEP 77
avl1.insert(int2)                                                       # STEP 78
avl1.delete(int3)                                                       # STEP 79
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104b63d40>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE 1
avl0 = avl.AVLTree()                                                     # STEP 0
int0 = 7                                                                 # STEP 1
avl0.delete(int0)                                                        # STEP 2
avl0 == avl0                                                             # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
int1 = 4                                                                 # STEP 5
int3 = 11                                                                # STEP 6
int2 = 15                                                                # STEP 7
avl0.delete(int0)                                                        # STEP 8
result = avl0.inorder()                                                  # STEP 9
avl0.delete(int0)                                                       # STEP 10
int0 = 10                                                               # STEP 11
avl1.delete(int0)                                                       # STEP 12
int0 = 18                                                               # STEP 13
avl1.insert(int3)                                                       # STEP 14
avl1.insert(int0)                                                       # STEP 15
avl1.insert(int0)                                                       # STEP 16
int0 = 12                                                               # STEP 17
avl0.delete(int1)                                                       # STEP 18
int1 = 1                                                                # STEP 19
avl1.insert(int0)                                                       # STEP 20
avl0.insert(int1)                                                       # STEP 21
avl0.insert(int0)                                                       # STEP 22
result = avl1.find(int2)                                                # STEP 23
avl0.delete(int2)                                                       # STEP 24
int1 = 8                                                                # STEP 25
avl1.insert(int1)                                                       # STEP 26
avl1.insert(int1)                                                       # STEP 27
result = avl1.inorder()                                                 # STEP 28
int3 = 5                                                                # STEP 29
avl1.delete(int0)                                                       # STEP 30
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104e735a8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE 2
int1 = 16                                                                # STEP 0
avl0 = avl.AVLTree()                                                     # STEP 1
avl0.insert(int1)                                                        # STEP 2
avl0 == avl0                                                             # STEP 3
result = avl0.inorder()                                                  # STEP 4
avl0.insert(int1)                                                        # STEP 5
avl0.insert(int1)                                                        # STEP 6
avl0.delete(int1)                                                        # STEP 7
avl0.delete(int1)                                                        # STEP 8
avl0.delete(int1)                                                        # STEP 9
avl0.insert(int1)                                                       # STEP 10
avl0.insert(int1)                                                       # STEP 11
avl0.delete(int1)                                                       # STEP 12
avl0.delete(int1)                                                       # STEP 13
int0 = 18                                                               # STEP 14
avl0.insert(int0)                                                       # STEP 15
avl0.insert(int1)                                                       # STEP 16
int3 = 5                                                                # STEP 17
int1 = 18                                                               # STEP 18
int0 = 9                                                                # STEP 19
avl0.delete(int0)                                                       # STEP 20
avl0.insert(int3)                                                       # STEP 21
avl0.insert(int0)                                                       # STEP 22
int2 = 3                                                                # STEP 23
int0 = 6                                                                # STEP 24
avl0.delete(int0)                                                       # STEP 25
avl0.delete(int0)                                                       # STEP 26
avl0.delete(int0)                                                       # STEP 27
avl0 == avl0                                                            # STEP 28
avl0.delete(int1)                                                       # STEP 29
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1058aab48>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE 3
int0 = 5                                                                 # STEP 0
int2 = 16                                                                # STEP 1
int3 = 13                                                                # STEP 2
int1 = 18                                                                # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
result = avl1.find(int3)                                                 # STEP 5
avl1.insert(int2)                                                        # STEP 6
int3 = 6                                                                 # STEP 7
result = avl1.inorder()                                                  # STEP 8
avl1.insert(int1)                                                        # STEP 9
avl1.delete(int2)                                                       # STEP 10
avl1.delete(int1)                                                       # STEP 11
int2 = 20                                                               # STEP 12
avl1.delete(int1)                                                       # STEP 13
avl1.delete(int0)                                                       # STEP 14
avl1.insert(int1)                                                       # STEP 15
avl1.delete(int2)                                                       # STEP 16
avl1.insert(int3)                                                       # STEP 17
avl1.delete(int0)                                                       # STEP 18
avl1.insert(int2)                                                       # STEP 19
avl1.insert(int3)                                                       # STEP 20
int3 = 19                                                               # STEP 21
avl1.insert(int2)                                                       # STEP 22
avl1.insert(int1)                                                       # STEP 23
avl1.insert(int3)                                                       # STEP 24
avl1.insert(int2)                                                       # STEP 25
avl1.delete(int3)                                                       # STEP 26
avl1.delete(int0)                                                       # STEP 27
result = avl1.inorder()                                                 # STEP 28
avl1.delete(int1)                                                       # STEP 29
avl1.insert(int1)                                                       # STEP 30
int3 = 1                                                                # STEP 31
avl1.insert(int0)                                                       # STEP 32
avl1.delete(int3)                                                       # STEP 33
int1 = 8                                                                # STEP 34
avl1.insert(int3)                                                       # STEP 35
avl1.insert(int0)                                                       # STEP 36
int3 = 12                                                               # STEP 37
avl1.insert(int2)                                                       # STEP 38
result = avl1.find(int2)                                                # STEP 39
avl1.insert(int3)                                                       # STEP 40
avl1.insert(int3)                                                       # STEP 41
int2 = 14                                                               # STEP 42
avl1.insert(int1)                                                       # STEP 43
avl1.insert(int0)                                                       # STEP 44
avl1 == avl1                                                            # STEP 45
avl1.insert(int2)                                                       # STEP 46
int0 = 8                                                                # STEP 47
avl1.display()                                                          # STEP 48
avl1.delete(int1)                                                       # STEP 49
avl1.insert(int0)                                                       # STEP 50
avl1.delete(int3)                                                       # STEP 51
avl1.delete(int2)                                                       # STEP 52
avl1.insert(int0)                                                       # STEP 53
avl1.insert(int1)                                                       # STEP 54
avl1.display()                                                          # STEP 55
avl1.insert(int3)                                                       # STEP 56
avl1.display()                                                          # STEP 57
avl1.display()                                                          # STEP 58
avl1.delete(int3)                                                       # STEP 59
avl1.display()                                                          # STEP 60
avl1.insert(int2)                                                       # STEP 61
int0 = 19                                                               # STEP 62
int3 = 15                                                               # STEP 63
result = avl1.find(int1)                                                # STEP 64
avl1.delete(int1)                                                       # STEP 65
avl1.insert(int0)                                                       # STEP 66
avl1.display()                                                          # STEP 67
avl1.insert(int0)                                                       # STEP 68
int1 = 3                                                                # STEP 69
int2 = 17                                                               # STEP 70
avl1.insert(int2)                                                       # STEP 71
avl1.delete(int0)                                                       # STEP 72
avl1.display()                                                          # STEP 73
avl1.delete(int0)                                                       # STEP 74
int0 = 19                                                               # STEP 75
avl1.display()                                                          # STEP 76
int2 = 18                                                               # STEP 77
avl1.insert(int2)                                                       # STEP 78
int2 = 14                                                               # STEP 79
avl1.insert(int1)                                                       # STEP 80
avl1.delete(int3)                                                       # STEP 81
avl1.display()                                                          # STEP 82
avl1.delete(int0)                                                       # STEP 83
int1 = 2                                                                # STEP 84
int3 = 5                                                                # STEP 85
avl1.insert(int1)                                                       # STEP 86
avl1.insert(int2)                                                       # STEP 87
avl1.insert(int1)                                                       # STEP 88
avl1.insert(int1)                                                       # STEP 89
avl1.display()                                                          # STEP 90
avl1.delete(int3)                                                       # STEP 91
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104e5b098>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
212 BRANCHES COVERED
160 STATEMENTS COVERED

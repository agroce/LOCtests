Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=True, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.45601.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  8 [2:0]
-- < 6 [1:1]
---- < 4 [0:0] L
-- > 16 [1:0]
---- < 15 [0:0] L
---- > 20 [0:0] L
set([4, 6, 8, 15, 16, 20])
  8 [3:-1]
-- < 6 [1:1]
---- < 4 [0:0] L
-- > 16 [2:-1]
---- < 15 [0:0] L
---- > 20 [1:1]
------ < 19 [0:0] L
set([4, 6, 8, 15, 16, 19, 20])
  8 [2:0]
-- < 6 [1:1]
---- < 4 [0:0] L
-- > 16 [1:0]
---- < 15 [0:0] L
---- > 20 [0:0] L
set([4, 6, 8, 15, 16, 20])
  8 [2:0]
-- < 6 [1:1]
---- < 4 [0:0] L
-- > 16 [1:0]
---- < 15 [0:0] L
---- > 20 [0:0] L
set([4, 6, 8, 15, 16, 20])
  9 [2:0]
-- < 2 [1:0]
---- < 1 [0:0] L
---- > 8 [0:0] L
-- > 20 [1:1]
---- < 16 [0:0] L
set([1, 2, 8, 9, 16, 20])
  9 [2:0]
-- < 2 [1:0]
---- < 1 [0:0] L
---- > 8 [0:0] L
-- > 20 [1:1]
---- < 16 [0:0] L
set([1, 2, 8, 9, 16, 20])
  8 [3:-1]
-- < 5 [1:1]
---- < 1 [0:0] L
-- > 13 [2:1]
---- < 9 [1:-1]
------ > 10 [0:0] L
---- > 17 [0:0] L
set([1, 5, 8, 9, 10, 13, 17])
  9 [2:0]
-- < 2 [1:0]
---- < 1 [0:0] L
---- > 8 [0:0] L
-- > 16 [1:0]
---- < 13 [0:0] L
---- > 20 [0:0] L
set([1, 2, 8, 9, 13, 16, 20])
  9 [2:0]
-- < 2 [1:0]
---- < 1 [0:0] L
---- > 8 [0:0] L
-- > 16 [1:0]
---- < 13 [0:0] L
---- > 20 [0:0] L
set([1, 2, 8, 9, 13, 16, 20])
  9 [2:0]
-- < 2 [1:0]
---- < 1 [0:0] L
---- > 8 [0:0] L
-- > 16 [1:0]
---- < 13 [0:0] L
---- > 20 [0:0] L
set([1, 2, 8, 9, 13, 16, 20])
  9 [2:0]
-- < 2 [1:0]
---- < 1 [0:0] L
---- > 8 [0:0] L
-- > 16 [1:0]
---- < 13 [0:0] L
---- > 20 [0:0] L
set([1, 2, 8, 9, 13, 16, 20])
  9 [2:0]
-- < 2 [1:0]
---- < 1 [0:0] L
---- > 8 [0:0] L
-- > 16 [1:0]
---- < 13 [0:0] L
---- > 20 [0:0] L
set([1, 2, 8, 9, 13, 16, 20])
  9 [2:0]
-- < 2 [1:0]
---- < 1 [0:0] L
---- > 8 [0:0] L
-- > 16 [1:0]
---- < 13 [0:0] L
---- > 20 [0:0] L
set([1, 2, 8, 9, 13, 16, 20])
  9 [2:0]
-- < 2 [1:0]
---- < 1 [0:0] L
---- > 8 [0:0] L
-- > 16 [1:0]
---- < 13 [0:0] L
---- > 20 [0:0] L
set([1, 2, 8, 9, 13, 16, 20])
  9 [2:0]
-- < 2 [1:0]
---- < 1 [0:0] L
---- > 8 [0:0] L
-- > 16 [1:0]
---- < 13 [0:0] L
---- > 20 [0:0] L
set([1, 2, 8, 9, 13, 16, 20])
TEST #4 STEP #46 (0:00:30.007684) Mon May  1 03:09:56 2017 [ 162 stmts 216 branches ]
  11 [2:0]
-- < 7 [1:0]
---- < 2 [0:0] L
---- > 8 [0:0] L
-- > 14 [1:0]
---- < 13 [0:0] L
---- > 17 [0:0] L
set([2, 7, 8, 11, 13, 14, 17])
  13 [2:0]
-- < 7 [1:0]
---- < 2 [0:0] L
---- > 8 [0:0] L
-- > 15 [1:0]
---- < 14 [0:0] L
---- > 17 [0:0] L
set([2, 7, 8, 13, 14, 15, 17])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10254fd88>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
Original test has 64 steps

SAVING TEST AS failure.45601.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 13                                                                # STEP 0
ACTION: int1 = 13 
int1 = None : <type 'NoneType'>
=> int1 = 13 : <type 'int'>
==================================================
int3 = 17                                                                # STEP 1
ACTION: int3 = 17 
int3 = None : <type 'NoneType'>
=> int3 = 17 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 2
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x1024785f0> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int1)                                                        # STEP 3
ACTION: avl2.insert(int1) 
int1 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1024785f0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([13]) : <type 'set'>
==================================================
avl2.insert(int1)                                                        # STEP 4
ACTION: avl2.insert(int1) 
int1 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1024785f0> : <type 'instance'>
avl_REF2 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl2.insert(int3)                                                        # STEP 5
ACTION: avl2.insert(int3) 
int3 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1024785f0> : <type 'instance'>
avl_REF2 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([17, 13]) : <type 'set'>
==================================================
int0 = 14                                                                # STEP 6
ACTION: int0 = 14 
int0 = None : <type 'NoneType'>
=> int0 = 14 : <type 'int'>
==================================================
avl2.insert(int3)                                                        # STEP 7
ACTION: avl2.insert(int3) 
int3 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1024785f0> : <type 'instance'>
avl_REF2 = set([17, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
avl2.insert(int1)                                                        # STEP 8
ACTION: avl2.insert(int1) 
int1 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1024785f0> : <type 'instance'>
avl_REF2 = set([17, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl2.insert(int0)                                                        # STEP 9
ACTION: avl2.insert(int0) 
int0 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1024785f0> : <type 'instance'>
avl_REF2 = set([17, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([17, 13, 14]) : <type 'set'>
==================================================
int0 = 16                                                               # STEP 10
ACTION: int0 = 16 
int0 = 14 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
int2 = 3                                                                # STEP 11
ACTION: int2 = 3 
int2 = None : <type 'NoneType'>
=> int2 = 3 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 12
ACTION: avl2.insert(int2) 
int2 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1024785f0> : <type 'instance'>
avl_REF2 = set([17, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([17, 3, 13, 14]) : <type 'set'>
==================================================
avl2 == avl2                                                            # STEP 13
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x1024785f0> : <type 'instance'>
avl_REF2 = set([17, 3, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
int3 = 8                                                                # STEP 14
ACTION: int3 = 8 
int3 = 17 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
int2 = 2                                                                # STEP 15
ACTION: int2 = 2 
int2 = 3 : <type 'int'>
=> int2 = 2 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 16
ACTION: avl2.delete(int1) 
int1 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1024785f0> : <type 'instance'>
avl_REF2 = set([17, 3, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([17, 3, 14]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 17
ACTION: avl2.delete(int0) 
int0 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1024785f0> : <type 'instance'>
avl_REF2 = set([17, 3, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.delete(int1)                                                       # STEP 18
ACTION: avl2.delete(int1) 
int1 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1024785f0> : <type 'instance'>
avl_REF2 = set([17, 3, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.delete(int1)                                                       # STEP 19
ACTION: avl2.delete(int1) 
int1 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1024785f0> : <type 'instance'>
avl_REF2 = set([17, 3, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int1)                                                       # STEP 20
ACTION: avl2.insert(int1) 
int1 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1024785f0> : <type 'instance'>
avl_REF2 = set([17, 3, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([17, 3, 13, 14]) : <type 'set'>
==================================================
int1 = 5                                                                # STEP 21
ACTION: int1 = 5 
int1 = 13 : <type 'int'>
=> int1 = 5 : <type 'int'>
==================================================
int0 = 3                                                                # STEP 22
ACTION: int0 = 3 
int0 = 16 : <type 'int'>
=> int0 = 3 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 23
ACTION: avl2.delete(int2) 
int2 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1024785f0> : <type 'instance'>
avl_REF2 = set([17, 3, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int2 = 2                                                                # STEP 24
ACTION: int2 = 2 
int2 = 2 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 25
ACTION: avl2.delete(int0) 
int0 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1024785f0> : <type 'instance'>
avl_REF2 = set([17, 3, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([17, 13, 14]) : <type 'set'>
==================================================
int0 = 11                                                               # STEP 26
ACTION: int0 = 11 
int0 = 3 : <type 'int'>
=> int0 = 11 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 27
ACTION: avl2.delete(int1) 
int1 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1024785f0> : <type 'instance'>
avl_REF2 = set([17, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int0)                                                       # STEP 28
ACTION: avl2.insert(int0) 
int0 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1024785f0> : <type 'instance'>
avl_REF2 = set([17, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([17, 11, 13, 14]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 29
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x1024785f0> : <type 'instance'>
avl_REF2 = set([17, 11, 13, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int1 = 8                                                                # STEP 30
ACTION: int1 = 8 
int1 = 5 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 31
ACTION: avl2.delete(int0) 
int0 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1024785f0> : <type 'instance'>
avl_REF2 = set([17, 11, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([17, 13, 14]) : <type 'set'>
==================================================
int0 = 11                                                               # STEP 32
ACTION: int0 = 11 
int0 = 11 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 33
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x1024785f0> : <type 'instance'>
avl_REF2 = set([17, 13, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int3)                                                       # STEP 34
ACTION: avl2.insert(int3) 
int3 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1024785f0> : <type 'instance'>
avl_REF2 = set([17, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([8, 17, 13, 14]) : <type 'set'>
==================================================
int3 = 7                                                                # STEP 35
ACTION: int3 = 7 
int3 = 8 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 36
ACTION: avl2.insert(int0) 
int0 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1024785f0> : <type 'instance'>
avl_REF2 = set([8, 17, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([8, 17, 11, 13, 14]) : <type 'set'>
==================================================
int0 = 11                                                               # STEP 37
ACTION: int0 = 11 
int0 = 11 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 38
ACTION: avl2.insert(int2) 
int2 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1024785f0> : <type 'instance'>
avl_REF2 = set([8, 17, 11, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([2, 8, 11, 13, 14, 17]) : <type 'set'>
==================================================
int2 = 2                                                                # STEP 39
ACTION: int2 = 2 
int2 = 2 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 40
ACTION: avl2.insert(int3) 
int3 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1024785f0> : <type 'instance'>
avl_REF2 = set([2, 8, 11, 13, 14, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([2, 7, 8, 11, 13, 14, 17]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 41
ACTION: avl2.delete(int3) 
int3 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1024785f0> : <type 'instance'>
avl_REF2 = set([2, 7, 8, 11, 13, 14, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([2, 8, 11, 13, 14, 17]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 42
ACTION: avl2.insert(int3) 
int3 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1024785f0> : <type 'instance'>
avl_REF2 = set([2, 8, 11, 13, 14, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([2, 7, 8, 11, 13, 14, 17]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 43
ACTION: avl2.insert(int1) 
int1 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1024785f0> : <type 'instance'>
avl_REF2 = set([2, 7, 8, 11, 13, 14, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
result = avl2.inorder()                                                 # STEP 44
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x1024785f0> : <type 'instance'>
avl_REF2 = set([2, 7, 8, 11, 13, 14, 17]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int1)                                                       # STEP 45
ACTION: avl2.insert(int1) 
int1 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1024785f0> : <type 'instance'>
avl_REF2 = set([2, 7, 8, 11, 13, 14, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
int1 = 11                                                               # STEP 46
ACTION: int1 = 11 
int1 = 8 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
avl2.display()                                                          # STEP 47
ACTION: avl2.display() 
avl2 = <avlbug2.AVLTree instance at 0x1024785f0> : <type 'instance'>
avl_REF2 = set([2, 7, 8, 11, 13, 14, 17]) : <type 'set'>
  11 [2:0]
-- < 7 [1:0]
---- < 2 [0:0] L
---- > 8 [0:0] L
-- > 14 [1:0]
---- < 13 [0:0] L
---- > 17 [0:0] L
REFERENCE ACTION: print(avl_REF2) 
set([2, 7, 8, 11, 13, 14, 17])
==================================================
avl2.insert(int0)                                                       # STEP 48
ACTION: avl2.insert(int0) 
int0 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1024785f0> : <type 'instance'>
avl_REF2 = set([2, 7, 8, 11, 13, 14, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl2.insert(int2)                                                       # STEP 49
ACTION: avl2.insert(int2) 
int2 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1024785f0> : <type 'instance'>
avl_REF2 = set([2, 7, 8, 11, 13, 14, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl2.delete(int0)                                                       # STEP 50
ACTION: avl2.delete(int0) 
int0 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1024785f0> : <type 'instance'>
avl_REF2 = set([2, 7, 8, 11, 13, 14, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([2, 7, 8, 13, 14, 17]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 51
ACTION: avl2.insert(int0) 
int0 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1024785f0> : <type 'instance'>
avl_REF2 = set([2, 7, 8, 13, 14, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([2, 7, 8, 11, 13, 14, 17]) : <type 'set'>
==================================================
int3 = 1                                                                # STEP 52
ACTION: int3 = 1 
int3 = 7 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
int2 = 19                                                               # STEP 53
ACTION: int2 = 19 
int2 = 2 : <type 'int'>
=> int2 = 19 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 54
ACTION: avl2.delete(int2) 
int2 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1024785f0> : <type 'instance'>
avl_REF2 = set([2, 7, 8, 11, 13, 14, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int0 = 15                                                               # STEP 55
ACTION: int0 = 15 
int0 = 11 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 56
ACTION: avl2.delete(int2) 
int2 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1024785f0> : <type 'instance'>
avl_REF2 = set([2, 7, 8, 11, 13, 14, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
result = avl2.inorder()                                                 # STEP 57
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x1024785f0> : <type 'instance'>
avl_REF2 = set([2, 7, 8, 11, 13, 14, 17]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int1)                                                       # STEP 58
ACTION: avl2.delete(int1) 
int1 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1024785f0> : <type 'instance'>
avl_REF2 = set([2, 7, 8, 11, 13, 14, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([2, 7, 8, 13, 14, 17]) : <type 'set'>
==================================================
int2 = 8                                                                # STEP 59
ACTION: int2 = 8 
int2 = 19 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 60
ACTION: avl2.insert(int0) 
int0 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1024785f0> : <type 'instance'>
avl_REF2 = set([2, 7, 8, 13, 14, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([2, 7, 8, 13, 14, 15, 17]) : <type 'set'>
==================================================
avl2.display()                                                          # STEP 61
ACTION: avl2.display() 
avl2 = <avlbug2.AVLTree instance at 0x1024785f0> : <type 'instance'>
avl_REF2 = set([2, 7, 8, 13, 14, 15, 17]) : <type 'set'>
  13 [2:0]
-- < 7 [1:0]
---- < 2 [0:0] L
---- > 8 [0:0] L
-- > 15 [1:0]
---- < 14 [0:0] L
---- > 17 [0:0] L
REFERENCE ACTION: print(avl_REF2) 
set([2, 7, 8, 13, 14, 15, 17])
==================================================
avl2.insert(int3)                                                       # STEP 62
ACTION: avl2.insert(int3) 
int3 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1024785f0> : <type 'instance'>
avl_REF2 = set([2, 7, 8, 13, 14, 15, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([1, 2, 7, 8, 13, 14, 15, 17]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 63
ACTION: avl2.delete(int2) 
int2 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1024785f0> : <type 'instance'>
avl_REF2 = set([1, 2, 7, 8, 13, 14, 15, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([1, 2, 7, 13, 14, 15, 17]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10200e830>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 54
STOPPING TESTING DUE TO TIMEOUT
8.9314712569 PERCENT COVERED
60.2284469604 TOTAL RUNTIME
7 EXECUTED
618 TOTAL TEST OPERATIONS
26.8813199997 TIME SPENT EXECUTING TEST OPERATIONS
0.0869536399841 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
27.1158730984 TIME SPENT CHECKING PROPERTIES
53.9971930981 TOTAL TIME SPENT RUNNING SUT
0.00377321243286 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int1 = 13                                                                # STEP 0
int3 = 17                                                                # STEP 1
avl2 = avl.AVLTree()                                                     # STEP 2
avl2.insert(int1)                                                        # STEP 3
avl2.insert(int1)                                                        # STEP 4
avl2.insert(int3)                                                        # STEP 5
int0 = 14                                                                # STEP 6
avl2.insert(int3)                                                        # STEP 7
avl2.insert(int1)                                                        # STEP 8
avl2.insert(int0)                                                        # STEP 9
int0 = 16                                                               # STEP 10
int2 = 3                                                                # STEP 11
avl2.insert(int2)                                                       # STEP 12
avl2 == avl2                                                            # STEP 13
int3 = 8                                                                # STEP 14
int2 = 2                                                                # STEP 15
avl2.delete(int1)                                                       # STEP 16
avl2.delete(int0)                                                       # STEP 17
avl2.delete(int1)                                                       # STEP 18
avl2.delete(int1)                                                       # STEP 19
avl2.insert(int1)                                                       # STEP 20
int1 = 5                                                                # STEP 21
int0 = 3                                                                # STEP 22
avl2.delete(int2)                                                       # STEP 23
int2 = 2                                                                # STEP 24
avl2.delete(int0)                                                       # STEP 25
int0 = 11                                                               # STEP 26
avl2.delete(int1)                                                       # STEP 27
avl2.insert(int0)                                                       # STEP 28
result = avl2.inorder()                                                 # STEP 29
int1 = 8                                                                # STEP 30
avl2.delete(int0)                                                       # STEP 31
int0 = 11                                                               # STEP 32
result = avl2.inorder()                                                 # STEP 33
avl2.insert(int3)                                                       # STEP 34
int3 = 7                                                                # STEP 35
avl2.insert(int0)                                                       # STEP 36
int0 = 11                                                               # STEP 37
avl2.insert(int2)                                                       # STEP 38
int2 = 2                                                                # STEP 39
avl2.insert(int3)                                                       # STEP 40
avl2.delete(int3)                                                       # STEP 41
avl2.insert(int3)                                                       # STEP 42
avl2.insert(int1)                                                       # STEP 43
result = avl2.inorder()                                                 # STEP 44
avl2.insert(int1)                                                       # STEP 45
int1 = 11                                                               # STEP 46
avl2.display()                                                          # STEP 47
avl2.insert(int0)                                                       # STEP 48
avl2.insert(int2)                                                       # STEP 49
avl2.delete(int0)                                                       # STEP 50
avl2.insert(int0)                                                       # STEP 51
int3 = 1                                                                # STEP 52
int2 = 19                                                               # STEP 53
avl2.delete(int2)                                                       # STEP 54
int0 = 15                                                               # STEP 55
avl2.delete(int2)                                                       # STEP 56
result = avl2.inorder()                                                 # STEP 57
avl2.delete(int1)                                                       # STEP 58
int2 = 8                                                                # STEP 59
avl2.insert(int0)                                                       # STEP 60
avl2.display()                                                          # STEP 61
avl2.insert(int3)                                                       # STEP 62
avl2.delete(int2)                                                       # STEP 63
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10200e830>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
218 BRANCHES COVERED
163 STATEMENTS COVERED

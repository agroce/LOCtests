Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.14572.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
TEST #3 STEP #83 (0:00:30.041964) Sun Apr 30 04:27:58 2017 [ 136 stmts 183 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105136a70>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
Original test has 89 steps

SAVING TEST AS failure.14572.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 9                                                                 # STEP 0
ACTION: int0 = 9 
int0 = None : <type 'NoneType'>
=> int0 = 9 : <type 'int'>
==================================================
int2 = 5                                                                 # STEP 1
ACTION: int2 = 5 
int2 = None : <type 'NoneType'>
=> int2 = 5 : <type 'int'>
==================================================
int1 = 14                                                                # STEP 2
ACTION: int1 = 14 
int1 = None : <type 'NoneType'>
=> int1 = 14 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 3
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x1050b05a8> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.delete(int2)                                                        # STEP 4
ACTION: avl0.delete(int2) 
int2 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1050b05a8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int2 = 11                                                                # STEP 5
ACTION: int2 = 11 
int2 = 5 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
avl0.delete(int0)                                                        # STEP 6
ACTION: avl0.delete(int0) 
int0 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1050b05a8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int0 = 9                                                                 # STEP 7
ACTION: int0 = 9 
int0 = 9 : <type 'int'>
==================================================
int3 = 20                                                                # STEP 8
ACTION: int3 = 20 
int3 = None : <type 'NoneType'>
=> int3 = 20 : <type 'int'>
==================================================
avl0 == avl0                                                             # STEP 9
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x1050b05a8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl0 == avl0                                                            # STEP 10
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x1050b05a8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl0.insert(int3)                                                       # STEP 11
ACTION: avl0.insert(int3) 
int3 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1050b05a8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([20]) : <type 'set'>
==================================================
int3 = 18                                                               # STEP 12
ACTION: int3 = 18 
int3 = 20 : <type 'int'>
=> int3 = 18 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 13
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x1050b05a8> : <type 'instance'>
avl_REF0 = set([20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int2)                                                       # STEP 14
ACTION: avl0.insert(int2) 
int2 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1050b05a8> : <type 'instance'>
avl_REF0 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([11, 20]) : <type 'set'>
==================================================
int2 = 5                                                                # STEP 15
ACTION: int2 = 5 
int2 = 11 : <type 'int'>
=> int2 = 5 : <type 'int'>
==================================================
result = avl0.find(int0)                                                # STEP 16
ACTION: result = avl0.find(int0) 
int0 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1050b05a8> : <type 'instance'>
avl_REF0 = set([11, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
int0 = 12                                                               # STEP 17
ACTION: int0 = 12 
int0 = 9 : <type 'int'>
=> int0 = 12 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 18
ACTION: avl0 = avl.AVLTree() 
avl0 = <avlbug2.AVLTree instance at 0x1050b05a8> : <type 'instance'>
avl_REF0 = set([11, 20]) : <type 'set'>
=> avl0 = <avlbug2.AVLTree instance at 0x10523c710> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
result = avl0.find(int0)                                                # STEP 19
ACTION: result = avl0.find(int0) 
int0 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10523c710> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
int0 = 11                                                               # STEP 20
ACTION: int0 = 11 
int0 = 12 : <type 'int'>
=> int0 = 11 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 21
ACTION: avl0.delete(int2) 
int2 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10523c710> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl2 = avl.AVLTree()                                                    # STEP 22
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x10523cfc8> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 23
ACTION: avl0.delete(int2) 
int2 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10523c710> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int2 = 20                                                               # STEP 24
ACTION: int2 = 20 
int2 = 5 : <type 'int'>
=> int2 = 20 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 25
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x10522c830> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl0 == avl1                                                            # STEP 26
ACTION: avl0 == avl1 
avl0 = <avlbug2.AVLTree instance at 0x10523c710> : <type 'instance'>
avl1 = <avlbug2.AVLTree instance at 0x10522c830> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF1 
==================================================
avl2.delete(int0)                                                       # STEP 27
ACTION: avl2.delete(int0) 
int0 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10523cfc8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl0.insert(int3)                                                       # STEP 28
ACTION: avl0.insert(int3) 
int3 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10523c710> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([18]) : <type 'set'>
==================================================
result = avl0.find(int0)                                                # STEP 29
ACTION: result = avl0.find(int0) 
int0 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10523c710> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
avl1.insert(int2)                                                       # STEP 30
ACTION: avl1.insert(int2) 
int2 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10522c830> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([20]) : <type 'set'>
==================================================
int3 = 17                                                               # STEP 31
ACTION: int3 = 17 
int3 = 18 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 32
ACTION: avl0.delete(int2) 
int2 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10523c710> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
result = avl1.inorder()                                                 # STEP 33
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x10522c830> : <type 'instance'>
avl_REF1 = set([20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int0 = 8                                                                # STEP 34
ACTION: int0 = 8 
int0 = 11 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 35
ACTION: avl2.delete(int2) 
int2 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10523cfc8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl0 == avl2                                                            # STEP 36
ACTION: avl0 == avl2 
avl0 = <avlbug2.AVLTree instance at 0x10523c710> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x10523cfc8> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
avl1 == avl1                                                            # STEP 37
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x10522c830> : <type 'instance'>
avl_REF1 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
int2 = 6                                                                # STEP 38
ACTION: int2 = 6 
int2 = 20 : <type 'int'>
=> int2 = 6 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 39
ACTION: avl0.insert(int2) 
int2 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10523c710> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([18, 6]) : <type 'set'>
==================================================
int2 = 2                                                                # STEP 40
ACTION: int2 = 2 
int2 = 6 : <type 'int'>
=> int2 = 2 : <type 'int'>
==================================================
avl0 == avl1                                                            # STEP 41
ACTION: avl0 == avl1 
avl0 = <avlbug2.AVLTree instance at 0x10523c710> : <type 'instance'>
avl1 = <avlbug2.AVLTree instance at 0x10522c830> : <type 'instance'>
avl_REF0 = set([18, 6]) : <type 'set'>
avl_REF1 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF1 
==================================================
avl0.delete(int2)                                                       # STEP 42
ACTION: avl0.delete(int2) 
int2 = 2 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10523c710> : <type 'instance'>
avl_REF0 = set([18, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
result = avl0.find(int1)                                                # STEP 43
ACTION: result = avl0.find(int1) 
int1 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10523c710> : <type 'instance'>
avl_REF0 = set([18, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
int1 = 11                                                               # STEP 44
ACTION: int1 = 11 
int1 = 14 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
avl2 == avl0                                                            # STEP 45
ACTION: avl2 == avl0 
avl2 = <avlbug2.AVLTree instance at 0x10523cfc8> : <type 'instance'>
avl0 = <avlbug2.AVLTree instance at 0x10523c710> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
avl_REF0 = set([18, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF0 
==================================================
avl0.insert(int3)                                                       # STEP 46
ACTION: avl0.insert(int3) 
int3 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10523c710> : <type 'instance'>
avl_REF0 = set([18, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([17, 18, 6]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 47
ACTION: avl2.insert(int1) 
int1 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10523cfc8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([11]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 48
ACTION: avl1.delete(int1) 
int1 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10522c830> : <type 'instance'>
avl_REF1 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int3 = 13                                                               # STEP 49
ACTION: int3 = 13 
int3 = 17 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
int1 = 1                                                                # STEP 50
ACTION: int1 = 1 
int1 = 11 : <type 'int'>
=> int1 = 1 : <type 'int'>
==================================================
result = avl1.find(int0)                                                # STEP 51
ACTION: result = avl1.find(int0) 
int0 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10522c830> : <type 'instance'>
avl_REF1 = set([20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
int2 = 14                                                               # STEP 52
ACTION: int2 = 14 
int2 = 2 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 53
ACTION: avl2.insert(int2) 
int2 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10523cfc8> : <type 'instance'>
avl_REF2 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([11, 14]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 54
ACTION: avl1.insert(int1) 
int1 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10522c830> : <type 'instance'>
avl_REF1 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([1, 20]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 55
ACTION: avl1.delete(int0) 
int0 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10522c830> : <type 'instance'>
avl_REF1 = set([1, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.insert(int1)                                                       # STEP 56
ACTION: avl1.insert(int1) 
int1 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10522c830> : <type 'instance'>
avl_REF1 = set([1, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl1 == avl1                                                            # STEP 57
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x10522c830> : <type 'instance'>
avl_REF1 = set([1, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl0.insert(int3)                                                       # STEP 58
ACTION: avl0.insert(int3) 
int3 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10523c710> : <type 'instance'>
avl_REF0 = set([17, 18, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([17, 18, 13, 6]) : <type 'set'>
==================================================
result = avl0.find(int3)                                                # STEP 59
ACTION: result = avl0.find(int3) 
int3 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10523c710> : <type 'instance'>
avl_REF0 = set([17, 18, 13, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
int0 = 1                                                                # STEP 60
ACTION: int0 = 1 
int0 = 8 : <type 'int'>
=> int0 = 1 : <type 'int'>
==================================================
int3 = 6                                                                # STEP 61
ACTION: int3 = 6 
int3 = 13 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
avl0 == avl0                                                            # STEP 62
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x10523c710> : <type 'instance'>
avl_REF0 = set([17, 18, 13, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl2.insert(int1)                                                       # STEP 63
ACTION: avl2.insert(int1) 
int1 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10523cfc8> : <type 'instance'>
avl_REF2 = set([11, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([1, 11, 14]) : <type 'set'>
==================================================
int2 = 10                                                               # STEP 64
ACTION: int2 = 10 
int2 = 14 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
avl0 == avl0                                                            # STEP 65
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x10523c710> : <type 'instance'>
avl_REF0 = set([17, 18, 13, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl1 == avl0                                                            # STEP 66
ACTION: avl1 == avl0 
avl1 = <avlbug2.AVLTree instance at 0x10522c830> : <type 'instance'>
avl0 = <avlbug2.AVLTree instance at 0x10523c710> : <type 'instance'>
avl_REF1 = set([1, 20]) : <type 'set'>
avl_REF0 = set([17, 18, 13, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
avl1.insert(int2)                                                       # STEP 67
ACTION: avl1.insert(int2) 
int2 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10522c830> : <type 'instance'>
avl_REF1 = set([1, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([1, 10, 20]) : <type 'set'>
==================================================
int2 = 10                                                               # STEP 68
ACTION: int2 = 10 
int2 = 10 : <type 'int'>
==================================================
result = avl0.find(int2)                                                # STEP 69
ACTION: result = avl0.find(int2) 
int2 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10523c710> : <type 'instance'>
avl_REF0 = set([17, 18, 13, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl1 == avl1                                                            # STEP 70
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x10522c830> : <type 'instance'>
avl_REF1 = set([1, 10, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
int1 = 4                                                                # STEP 71
ACTION: int1 = 4 
int1 = 1 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 72
ACTION: avl2.insert(int3) 
int3 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10523cfc8> : <type 'instance'>
avl_REF2 = set([1, 11, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([1, 11, 6, 14]) : <type 'set'>
==================================================
int2 = 15                                                               # STEP 73
ACTION: int2 = 15 
int2 = 10 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
avl2 == avl0                                                            # STEP 74
ACTION: avl2 == avl0 
avl2 = <avlbug2.AVLTree instance at 0x10523cfc8> : <type 'instance'>
avl0 = <avlbug2.AVLTree instance at 0x10523c710> : <type 'instance'>
avl_REF2 = set([1, 11, 6, 14]) : <type 'set'>
avl_REF0 = set([17, 18, 13, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF0 
==================================================
result = avl2.find(int2)                                                # STEP 75
ACTION: result = avl2.find(int2) 
int2 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10523cfc8> : <type 'instance'>
avl_REF2 = set([1, 11, 6, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int3 = 5                                                                # STEP 76
ACTION: int3 = 5 
int3 = 6 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
int2 = 9                                                                # STEP 77
ACTION: int2 = 9 
int2 = 15 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
result = avl1.find(int0)                                                # STEP 78
ACTION: result = avl1.find(int0) 
int0 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10522c830> : <type 'instance'>
avl_REF1 = set([1, 10, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl1.insert(int0)                                                       # STEP 79
ACTION: avl1.insert(int0) 
int0 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10522c830> : <type 'instance'>
avl_REF1 = set([1, 10, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
result = avl1.find(int0)                                                # STEP 80
ACTION: result = avl1.find(int0) 
int0 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10522c830> : <type 'instance'>
avl_REF1 = set([1, 10, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl0 == avl2                                                            # STEP 81
ACTION: avl0 == avl2 
avl0 = <avlbug2.AVLTree instance at 0x10523c710> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x10523cfc8> : <type 'instance'>
avl_REF0 = set([17, 18, 13, 6]) : <type 'set'>
avl_REF2 = set([1, 11, 6, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
avl0.delete(int3)                                                       # STEP 82
ACTION: avl0.delete(int3) 
int3 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10523c710> : <type 'instance'>
avl_REF0 = set([17, 18, 13, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int0 = 4                                                                # STEP 83
ACTION: int0 = 4 
int0 = 1 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
int3 = 11                                                               # STEP 84
ACTION: int3 = 11 
int3 = 5 : <type 'int'>
=> int3 = 11 : <type 'int'>
==================================================
result = avl0.find(int2)                                                # STEP 85
ACTION: result = avl0.find(int2) 
int2 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10523c710> : <type 'instance'>
avl_REF0 = set([17, 18, 13, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
int2 = 17                                                               # STEP 86
ACTION: int2 = 17 
int2 = 9 : <type 'int'>
=> int2 = 17 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 87
ACTION: avl1 = avl.AVLTree() 
avl1 = <avlbug2.AVLTree instance at 0x10522c830> : <type 'instance'>
avl_REF1 = set([1, 10, 20]) : <type 'set'>
=> avl1 = <avlbug2.AVLTree instance at 0x103d6f0e0> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 88
ACTION: avl2.delete(int3) 
int3 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10523cfc8> : <type 'instance'>
avl_REF2 = set([1, 11, 6, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([1, 6, 14]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103d6f680>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 85
STOPPING TESTING DUE TO TIMEOUT
8.07679576299 PERCENT COVERED
60.224465847 TOTAL RUNTIME
5 EXECUTED
474 TOTAL TEST OPERATIONS
25.1498150826 TIME SPENT EXECUTING TEST OPERATIONS
0.0183460712433 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
25.3055348396 TIME SPENT CHECKING PROPERTIES
50.4553499222 TOTAL TIME SPENT RUNNING SUT
0.00412082672119 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int0 = 9                                                                 # STEP 0
int2 = 5                                                                 # STEP 1
int1 = 14                                                                # STEP 2
avl0 = avl.AVLTree()                                                     # STEP 3
avl0.delete(int2)                                                        # STEP 4
int2 = 11                                                                # STEP 5
avl0.delete(int0)                                                        # STEP 6
int0 = 9                                                                 # STEP 7
int3 = 20                                                                # STEP 8
avl0 == avl0                                                             # STEP 9
avl0 == avl0                                                            # STEP 10
avl0.insert(int3)                                                       # STEP 11
int3 = 18                                                               # STEP 12
result = avl0.inorder()                                                 # STEP 13
avl0.insert(int2)                                                       # STEP 14
int2 = 5                                                                # STEP 15
result = avl0.find(int0)                                                # STEP 16
int0 = 12                                                               # STEP 17
avl0 = avl.AVLTree()                                                    # STEP 18
result = avl0.find(int0)                                                # STEP 19
int0 = 11                                                               # STEP 20
avl0.delete(int2)                                                       # STEP 21
avl2 = avl.AVLTree()                                                    # STEP 22
avl0.delete(int2)                                                       # STEP 23
int2 = 20                                                               # STEP 24
avl1 = avl.AVLTree()                                                    # STEP 25
avl0 == avl1                                                            # STEP 26
avl2.delete(int0)                                                       # STEP 27
avl0.insert(int3)                                                       # STEP 28
result = avl0.find(int0)                                                # STEP 29
avl1.insert(int2)                                                       # STEP 30
int3 = 17                                                               # STEP 31
avl0.delete(int2)                                                       # STEP 32
result = avl1.inorder()                                                 # STEP 33
int0 = 8                                                                # STEP 34
avl2.delete(int2)                                                       # STEP 35
avl0 == avl2                                                            # STEP 36
avl1 == avl1                                                            # STEP 37
int2 = 6                                                                # STEP 38
avl0.insert(int2)                                                       # STEP 39
int2 = 2                                                                # STEP 40
avl0 == avl1                                                            # STEP 41
avl0.delete(int2)                                                       # STEP 42
result = avl0.find(int1)                                                # STEP 43
int1 = 11                                                               # STEP 44
avl2 == avl0                                                            # STEP 45
avl0.insert(int3)                                                       # STEP 46
avl2.insert(int1)                                                       # STEP 47
avl1.delete(int1)                                                       # STEP 48
int3 = 13                                                               # STEP 49
int1 = 1                                                                # STEP 50
result = avl1.find(int0)                                                # STEP 51
int2 = 14                                                               # STEP 52
avl2.insert(int2)                                                       # STEP 53
avl1.insert(int1)                                                       # STEP 54
avl1.delete(int0)                                                       # STEP 55
avl1.insert(int1)                                                       # STEP 56
avl1 == avl1                                                            # STEP 57
avl0.insert(int3)                                                       # STEP 58
result = avl0.find(int3)                                                # STEP 59
int0 = 1                                                                # STEP 60
int3 = 6                                                                # STEP 61
avl0 == avl0                                                            # STEP 62
avl2.insert(int1)                                                       # STEP 63
int2 = 10                                                               # STEP 64
avl0 == avl0                                                            # STEP 65
avl1 == avl0                                                            # STEP 66
avl1.insert(int2)                                                       # STEP 67
int2 = 10                                                               # STEP 68
result = avl0.find(int2)                                                # STEP 69
avl1 == avl1                                                            # STEP 70
int1 = 4                                                                # STEP 71
avl2.insert(int3)                                                       # STEP 72
int2 = 15                                                               # STEP 73
avl2 == avl0                                                            # STEP 74
result = avl2.find(int2)                                                # STEP 75
int3 = 5                                                                # STEP 76
int2 = 9                                                                # STEP 77
result = avl1.find(int0)                                                # STEP 78
avl1.insert(int0)                                                       # STEP 79
result = avl1.find(int0)                                                # STEP 80
avl0 == avl2                                                            # STEP 81
avl0.delete(int3)                                                       # STEP 82
int0 = 4                                                                # STEP 83
int3 = 11                                                               # STEP 84
result = avl0.find(int2)                                                # STEP 85
int2 = 17                                                               # STEP 86
avl1 = avl.AVLTree()                                                    # STEP 87
avl2.delete(int3)                                                       # STEP 88
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103d6f680>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
201 BRANCHES COVERED
151 STATEMENTS COVERED

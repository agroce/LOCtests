Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.62067.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  11 [3:1]
-- < 4 [2:1]
---- < 2 [1:-1]
------ > 3 [0:0] L
---- > 9 [0:0] L
-- > 12 [1:-1]
---- > 20 [0:0] L
set([2, 3, 4, 9, 11, 12, 20])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1026c7b48>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
Original test has 36 steps

SAVING TEST AS failure.62067.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 13                                                                # STEP 0
ACTION: int3 = 13 
int3 = None : <type 'NoneType'>
=> int3 = 13 : <type 'int'>
==================================================
int0 = 1                                                                 # STEP 1
ACTION: int0 = 1 
int0 = None : <type 'NoneType'>
=> int0 = 1 : <type 'int'>
==================================================
int1 = 14                                                                # STEP 2
ACTION: int1 = 14 
int1 = None : <type 'NoneType'>
=> int1 = 14 : <type 'int'>
==================================================
int2 = 5                                                                 # STEP 3
ACTION: int2 = 5 
int2 = None : <type 'NoneType'>
=> int2 = 5 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x103329fc8> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.insert(int2)                                                        # STEP 5
ACTION: avl1.insert(int2) 
int2 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103329fc8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([5]) : <type 'set'>
==================================================
avl1.insert(int3)                                                        # STEP 6
ACTION: avl1.insert(int3) 
int3 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103329fc8> : <type 'instance'>
avl_REF1 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([5, 13]) : <type 'set'>
==================================================
avl1.delete(int2)                                                        # STEP 7
ACTION: avl1.delete(int2) 
int2 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103329fc8> : <type 'instance'>
avl_REF1 = set([5, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([13]) : <type 'set'>
==================================================
avl1.insert(int0)                                                        # STEP 8
ACTION: avl1.insert(int0) 
int0 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103329fc8> : <type 'instance'>
avl_REF1 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([1, 13]) : <type 'set'>
==================================================
result = avl1.inorder()                                                  # STEP 9
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x103329fc8> : <type 'instance'>
avl_REF1 = set([1, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.delete(int2)                                                       # STEP 10
ACTION: avl1.delete(int2) 
int2 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103329fc8> : <type 'instance'>
avl_REF1 = set([1, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
result = avl1.inorder()                                                 # STEP 11
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x103329fc8> : <type 'instance'>
avl_REF1 = set([1, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int0)                                                       # STEP 12
ACTION: avl1.insert(int0) 
int0 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103329fc8> : <type 'instance'>
avl_REF1 = set([1, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.delete(int2)                                                       # STEP 13
ACTION: avl1.delete(int2) 
int2 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103329fc8> : <type 'instance'>
avl_REF1 = set([1, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int3 = 9                                                                # STEP 14
ACTION: int3 = 9 
int3 = 13 : <type 'int'>
=> int3 = 9 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 15
ACTION: avl1.insert(int0) 
int0 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103329fc8> : <type 'instance'>
avl_REF1 = set([1, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.insert(int2)                                                       # STEP 16
ACTION: avl1.insert(int2) 
int2 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103329fc8> : <type 'instance'>
avl_REF1 = set([1, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([1, 5, 13]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 17
ACTION: avl1.insert(int2) 
int2 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103329fc8> : <type 'instance'>
avl_REF1 = set([1, 5, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
result = avl1.inorder()                                                 # STEP 18
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x103329fc8> : <type 'instance'>
avl_REF1 = set([1, 5, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int0)                                                       # STEP 19
ACTION: avl1.insert(int0) 
int0 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103329fc8> : <type 'instance'>
avl_REF1 = set([1, 5, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.insert(int1)                                                       # STEP 20
ACTION: avl1.insert(int1) 
int1 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103329fc8> : <type 'instance'>
avl_REF1 = set([1, 5, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([1, 5, 14, 13]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 21
ACTION: avl1.insert(int3) 
int3 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103329fc8> : <type 'instance'>
avl_REF1 = set([1, 5, 14, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([1, 9, 5, 14, 13]) : <type 'set'>
==================================================
int0 = 9                                                                # STEP 22
ACTION: int0 = 9 
int0 = 1 : <type 'int'>
=> int0 = 9 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 23
ACTION: avl1.insert(int1) 
int1 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103329fc8> : <type 'instance'>
avl_REF1 = set([1, 9, 5, 14, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl1.insert(int0)                                                       # STEP 24
ACTION: avl1.insert(int0) 
int0 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103329fc8> : <type 'instance'>
avl_REF1 = set([1, 9, 5, 14, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.delete(int0)                                                       # STEP 25
ACTION: avl1.delete(int0) 
int0 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103329fc8> : <type 'instance'>
avl_REF1 = set([1, 9, 5, 14, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([1, 5, 14, 13]) : <type 'set'>
==================================================
int3 = 20                                                               # STEP 26
ACTION: int3 = 20 
int3 = 9 : <type 'int'>
=> int3 = 20 : <type 'int'>
==================================================
int2 = 4                                                                # STEP 27
ACTION: int2 = 4 
int2 = 5 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 28
ACTION: avl1.insert(int2) 
int2 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103329fc8> : <type 'instance'>
avl_REF1 = set([1, 5, 14, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([1, 4, 5, 14, 13]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 29
ACTION: avl1.insert(int1) 
int1 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103329fc8> : <type 'instance'>
avl_REF1 = set([1, 4, 5, 14, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl1.insert(int3)                                                       # STEP 30
ACTION: avl1.insert(int3) 
int3 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103329fc8> : <type 'instance'>
avl_REF1 = set([1, 4, 5, 14, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([1, 4, 5, 13, 14, 20]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 31
ACTION: avl1.insert(int0) 
int0 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103329fc8> : <type 'instance'>
avl_REF1 = set([1, 4, 5, 13, 14, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([1, 4, 5, 9, 13, 14, 20]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 32
ACTION: avl1.insert(int1) 
int1 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103329fc8> : <type 'instance'>
avl_REF1 = set([1, 4, 5, 9, 13, 14, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
int2 = 12                                                               # STEP 33
ACTION: int2 = 12 
int2 = 4 : <type 'int'>
=> int2 = 12 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 34
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x103329fc8> : <type 'instance'>
avl_REF1 = set([1, 4, 5, 9, 13, 14, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.delete(int3)                                                       # STEP 35
ACTION: avl1.delete(int3) 
int3 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103329fc8> : <type 'instance'>
avl_REF1 = set([1, 4, 5, 9, 13, 14, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([1, 4, 5, 9, 13, 14]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10327f9e0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10344dd88>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
Original test has 41 steps

SAVING TEST AS failure.62067.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 18                                                                # STEP 0
ACTION: int2 = 18 
int2 = None : <type 'NoneType'>
=> int2 = 18 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 1
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x10344dcf8> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.insert(int2)                                                        # STEP 2
ACTION: avl1.insert(int2) 
int2 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10344dcf8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([18]) : <type 'set'>
==================================================
int0 = 14                                                                # STEP 3
ACTION: int0 = 14 
int0 = None : <type 'NoneType'>
=> int0 = 14 : <type 'int'>
==================================================
avl1.delete(int2)                                                        # STEP 4
ACTION: avl1.delete(int2) 
int2 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10344dcf8> : <type 'instance'>
avl_REF1 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int3 = 16                                                                # STEP 5
ACTION: int3 = 16 
int3 = None : <type 'NoneType'>
=> int3 = 16 : <type 'int'>
==================================================
avl1.delete(int3)                                                        # STEP 6
ACTION: avl1.delete(int3) 
int3 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10344dcf8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
result = avl1.inorder()                                                  # STEP 7
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x10344dcf8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int3 = 20                                                                # STEP 8
ACTION: int3 = 20 
int3 = 16 : <type 'int'>
=> int3 = 20 : <type 'int'>
==================================================
avl1.delete(int3)                                                        # STEP 9
ACTION: avl1.delete(int3) 
int3 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10344dcf8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
result = avl1.inorder()                                                 # STEP 10
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x10344dcf8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int0)                                                       # STEP 11
ACTION: avl1.insert(int0) 
int0 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10344dcf8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([14]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 12
ACTION: avl1.insert(int0) 
int0 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10344dcf8> : <type 'instance'>
avl_REF1 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
int3 = 7                                                                # STEP 13
ACTION: int3 = 7 
int3 = 20 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 14
ACTION: avl1.delete(int0) 
int0 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10344dcf8> : <type 'instance'>
avl_REF1 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 15
ACTION: avl1.delete(int2) 
int2 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10344dcf8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.insert(int3)                                                       # STEP 16
ACTION: avl1.insert(int3) 
int3 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10344dcf8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([7]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 17
ACTION: avl1.delete(int0) 
int0 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10344dcf8> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.insert(int3)                                                       # STEP 18
ACTION: avl1.insert(int3) 
int3 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10344dcf8> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
avl1.insert(int0)                                                       # STEP 19
ACTION: avl1.insert(int0) 
int0 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10344dcf8> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([14, 7]) : <type 'set'>
==================================================
int3 = 19                                                               # STEP 20
ACTION: int3 = 19 
int3 = 7 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
result = avl1.find(int2)                                                # STEP 21
ACTION: result = avl1.find(int2) 
int2 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10344dcf8> : <type 'instance'>
avl_REF1 = set([14, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int2 = 14                                                               # STEP 22
ACTION: int2 = 14 
int2 = 18 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 23
ACTION: avl1.delete(int3) 
int3 = 19 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10344dcf8> : <type 'instance'>
avl_REF1 = set([14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int3 = 8                                                                # STEP 24
ACTION: int3 = 8 
int3 = 19 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
int1 = 16                                                               # STEP 25
ACTION: int1 = 16 
int1 = None : <type 'NoneType'>
=> int1 = 16 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 26
ACTION: avl1.insert(int0) 
int0 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10344dcf8> : <type 'instance'>
avl_REF1 = set([14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.delete(int3)                                                       # STEP 27
ACTION: avl1.delete(int3) 
int3 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10344dcf8> : <type 'instance'>
avl_REF1 = set([14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int3 = 19                                                               # STEP 28
ACTION: int3 = 19 
int3 = 8 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 29
ACTION: avl1.insert(int3) 
int3 = 19 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10344dcf8> : <type 'instance'>
avl_REF1 = set([14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([19, 14, 7]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 30
ACTION: avl1.insert(int1) 
int1 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10344dcf8> : <type 'instance'>
avl_REF1 = set([19, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([16, 19, 14, 7]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 31
ACTION: avl1.insert(int3) 
int3 = 19 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10344dcf8> : <type 'instance'>
avl_REF1 = set([16, 19, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
avl1.insert(int0)                                                       # STEP 32
ACTION: avl1.insert(int0) 
int0 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10344dcf8> : <type 'instance'>
avl_REF1 = set([16, 19, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.delete(int0)                                                       # STEP 33
ACTION: avl1.delete(int0) 
int0 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10344dcf8> : <type 'instance'>
avl_REF1 = set([16, 19, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([16, 19, 7]) : <type 'set'>
==================================================
int1 = 6                                                                # STEP 34
ACTION: int1 = 6 
int1 = 16 : <type 'int'>
=> int1 = 6 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 35
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x10344dcf8> : <type 'instance'>
avl_REF1 = set([16, 19, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.insert(int2)                                                       # STEP 36
ACTION: avl1.insert(int2) 
int2 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10344dcf8> : <type 'instance'>
avl_REF1 = set([16, 19, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([16, 19, 14, 7]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 37
ACTION: avl1.insert(int2) 
int2 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10344dcf8> : <type 'instance'>
avl_REF1 = set([16, 19, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
result = avl1.inorder()                                                 # STEP 38
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x10344dcf8> : <type 'instance'>
avl_REF1 = set([16, 19, 14, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int3 = 19                                                               # STEP 39
ACTION: int3 = 19 
int3 = 19 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 40
ACTION: avl1.delete(int3) 
int3 = 19 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10344dcf8> : <type 'instance'>
avl_REF1 = set([16, 19, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([16, 14, 7]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105108950>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105138c68>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
Original test has 20 steps

SAVING TEST AS failure.62067.test.2
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 1                                                                 # STEP 0
ACTION: int2 = 1 
int2 = None : <type 'NoneType'>
=> int2 = 1 : <type 'int'>
==================================================
int1 = 13                                                                # STEP 1
ACTION: int1 = 13 
int1 = None : <type 'NoneType'>
=> int1 = 13 : <type 'int'>
==================================================
int0 = 17                                                                # STEP 2
ACTION: int0 = 17 
int0 = None : <type 'NoneType'>
=> int0 = 17 : <type 'int'>
==================================================
int3 = 12                                                                # STEP 3
ACTION: int3 = 12 
int3 = None : <type 'NoneType'>
=> int3 = 12 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 4
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x105122368> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
result = avl0.inorder()                                                  # STEP 5
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x105122368> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0 = avl.AVLTree()                                                     # STEP 6
ACTION: avl0 = avl.AVLTree() 
avl0 = <avlbug2.AVLTree instance at 0x105122368> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
=> avl0 = <avlbug2.AVLTree instance at 0x105122908> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
==================================================
avl0.insert(int0)                                                        # STEP 7
ACTION: avl0.insert(int0) 
int0 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x105122908> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([17]) : <type 'set'>
==================================================
avl0.insert(int2)                                                        # STEP 8
ACTION: avl0.insert(int2) 
int2 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x105122908> : <type 'instance'>
avl_REF0 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([17, 1]) : <type 'set'>
==================================================
int0 = 20                                                                # STEP 9
ACTION: int0 = 20 
int0 = 17 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 10
ACTION: avl0.insert(int0) 
int0 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x105122908> : <type 'instance'>
avl_REF0 = set([17, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([17, 20, 1]) : <type 'set'>
==================================================
int2 = 19                                                               # STEP 11
ACTION: int2 = 19 
int2 = 1 : <type 'int'>
=> int2 = 19 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 12
ACTION: avl0.insert(int3) 
int3 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x105122908> : <type 'instance'>
avl_REF0 = set([17, 20, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([17, 20, 12, 1]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 13
ACTION: avl0.insert(int0) 
int0 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x105122908> : <type 'instance'>
avl_REF0 = set([17, 20, 12, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
avl0 == avl0                                                            # STEP 14
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x105122908> : <type 'instance'>
avl_REF0 = set([17, 20, 12, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
result = avl0.inorder()                                                 # STEP 15
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x105122908> : <type 'instance'>
avl_REF0 = set([17, 20, 12, 1]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
result = avl0.find(int1)                                                # STEP 16
ACTION: result = avl0.find(int1) 
int1 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x105122908> : <type 'instance'>
avl_REF0 = set([17, 20, 12, 1]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl0.insert(int3)                                                       # STEP 17
ACTION: avl0.insert(int3) 
int3 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x105122908> : <type 'instance'>
avl_REF0 = set([17, 20, 12, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
avl0.insert(int1)                                                       # STEP 18
ACTION: avl0.insert(int1) 
int1 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x105122908> : <type 'instance'>
avl_REF0 = set([17, 20, 12, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([17, 20, 13, 12, 1]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 19
ACTION: avl0.delete(int0) 
int0 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x105122908> : <type 'instance'>
avl_REF0 = set([17, 20, 13, 12, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([17, 13, 12, 1]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10512df80>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 3 DISTINCT FAILURES
TEST #5 STEP #3 (0:00:30.092184) Mon May  1 17:39:23 2017 [ 160 stmts 212 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10360dd40>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
Original test has 48 steps

SAVING TEST AS failure.62067.test.3
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 5                                                                 # STEP 0
ACTION: int2 = 5 
int2 = None : <type 'NoneType'>
=> int2 = 5 : <type 'int'>
==================================================
int0 = 5                                                                 # STEP 1
ACTION: int0 = 5 
int0 = None : <type 'NoneType'>
=> int0 = 5 : <type 'int'>
==================================================
int3 = 13                                                                # STEP 2
ACTION: int3 = 13 
int3 = None : <type 'NoneType'>
=> int3 = 13 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 3
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x1051192d8> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.insert(int3)                                                        # STEP 4
ACTION: avl1.insert(int3) 
int3 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1051192d8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([13]) : <type 'set'>
==================================================
avl1.insert(int3)                                                        # STEP 5
ACTION: avl1.insert(int3) 
int3 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1051192d8> : <type 'instance'>
avl_REF1 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
avl1.insert(int2)                                                        # STEP 6
ACTION: avl1.insert(int2) 
int2 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1051192d8> : <type 'instance'>
avl_REF1 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([13, 5]) : <type 'set'>
==================================================
avl1.delete(int0)                                                        # STEP 7
ACTION: avl1.delete(int0) 
int0 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1051192d8> : <type 'instance'>
avl_REF1 = set([13, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([13]) : <type 'set'>
==================================================
avl1.delete(int0)                                                        # STEP 8
ACTION: avl1.delete(int0) 
int0 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1051192d8> : <type 'instance'>
avl_REF1 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
result = avl1.inorder()                                                  # STEP 9
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x1051192d8> : <type 'instance'>
avl_REF1 = set([13]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int2 = 12                                                               # STEP 10
ACTION: int2 = 12 
int2 = 5 : <type 'int'>
=> int2 = 12 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 11
ACTION: avl1.delete(int0) 
int0 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1051192d8> : <type 'instance'>
avl_REF1 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
result = avl1.find(int2)                                                # STEP 12
ACTION: result = avl1.find(int2) 
int2 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1051192d8> : <type 'instance'>
avl_REF1 = set([13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl1.delete(int2)                                                       # STEP 13
ACTION: avl1.delete(int2) 
int2 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1051192d8> : <type 'instance'>
avl_REF1 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int0 = 6                                                                # STEP 14
ACTION: int0 = 6 
int0 = 5 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 15
ACTION: avl1.insert(int2) 
int2 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1051192d8> : <type 'instance'>
avl_REF1 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([12, 13]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 16
ACTION: avl1.delete(int2) 
int2 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1051192d8> : <type 'instance'>
avl_REF1 = set([12, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([13]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 17
ACTION: avl1.delete(int0) 
int0 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1051192d8> : <type 'instance'>
avl_REF1 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.delete(int0)                                                       # STEP 18
ACTION: avl1.delete(int0) 
int0 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1051192d8> : <type 'instance'>
avl_REF1 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.delete(int2)                                                       # STEP 19
ACTION: avl1.delete(int2) 
int2 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1051192d8> : <type 'instance'>
avl_REF1 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.insert(int0)                                                       # STEP 20
ACTION: avl1.insert(int0) 
int0 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1051192d8> : <type 'instance'>
avl_REF1 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([13, 6]) : <type 'set'>
==================================================
result = avl1.find(int2)                                                # STEP 21
ACTION: result = avl1.find(int2) 
int2 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1051192d8> : <type 'instance'>
avl_REF1 = set([13, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int3 = 10                                                               # STEP 22
ACTION: int3 = 10 
int3 = 13 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 23
ACTION: avl1.insert(int2) 
int2 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1051192d8> : <type 'instance'>
avl_REF1 = set([13, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([12, 13, 6]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 24
ACTION: avl1.insert(int2) 
int2 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1051192d8> : <type 'instance'>
avl_REF1 = set([12, 13, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
int1 = 16                                                               # STEP 25
ACTION: int1 = 16 
int1 = None : <type 'NoneType'>
=> int1 = 16 : <type 'int'>
==================================================
int0 = 10                                                               # STEP 26
ACTION: int0 = 10 
int0 = 6 : <type 'int'>
=> int0 = 10 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 27
ACTION: avl1.insert(int0) 
int0 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1051192d8> : <type 'instance'>
avl_REF1 = set([12, 13, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([10, 12, 13, 6]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 28
ACTION: avl1.insert(int2) 
int2 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1051192d8> : <type 'instance'>
avl_REF1 = set([10, 12, 13, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
avl1.delete(int3)                                                       # STEP 29
ACTION: avl1.delete(int3) 
int3 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1051192d8> : <type 'instance'>
avl_REF1 = set([10, 12, 13, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([12, 13, 6]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 30
ACTION: avl1.delete(int2) 
int2 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1051192d8> : <type 'instance'>
avl_REF1 = set([12, 13, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([13, 6]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 31
ACTION: avl1.delete(int2) 
int2 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1051192d8> : <type 'instance'>
avl_REF1 = set([13, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
result = avl1.find(int2)                                                # STEP 32
ACTION: result = avl1.find(int2) 
int2 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1051192d8> : <type 'instance'>
avl_REF1 = set([13, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl1 == avl1                                                            # STEP 33
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x1051192d8> : <type 'instance'>
avl_REF1 = set([13, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.delete(int0)                                                       # STEP 34
ACTION: avl1.delete(int0) 
int0 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1051192d8> : <type 'instance'>
avl_REF1 = set([13, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.delete(int1)                                                       # STEP 35
ACTION: avl1.delete(int1) 
int1 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1051192d8> : <type 'instance'>
avl_REF1 = set([13, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int0 = 3                                                                # STEP 36
ACTION: int0 = 3 
int0 = 10 : <type 'int'>
=> int0 = 3 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 37
ACTION: avl1.delete(int1) 
int1 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1051192d8> : <type 'instance'>
avl_REF1 = set([13, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
result = avl1.inorder()                                                 # STEP 38
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x1051192d8> : <type 'instance'>
avl_REF1 = set([13, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
result = avl1.find(int0)                                                # STEP 39
ACTION: result = avl1.find(int0) 
int0 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1051192d8> : <type 'instance'>
avl_REF1 = set([13, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
result = avl1.inorder()                                                 # STEP 40
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x1051192d8> : <type 'instance'>
avl_REF1 = set([13, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1 == avl1                                                            # STEP 41
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x1051192d8> : <type 'instance'>
avl_REF1 = set([13, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.delete(int3)                                                       # STEP 42
ACTION: avl1.delete(int3) 
int3 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1051192d8> : <type 'instance'>
avl_REF1 = set([13, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.insert(int0)                                                       # STEP 43
ACTION: avl1.insert(int0) 
int0 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1051192d8> : <type 'instance'>
avl_REF1 = set([13, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([3, 6, 13]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 44
ACTION: avl1.insert(int2) 
int2 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1051192d8> : <type 'instance'>
avl_REF1 = set([3, 6, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([3, 6, 12, 13]) : <type 'set'>
==================================================
result = avl1.find(int3)                                                # STEP 45
ACTION: result = avl1.find(int3) 
int3 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1051192d8> : <type 'instance'>
avl_REF1 = set([3, 6, 12, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
int2 = 5                                                                # STEP 46
ACTION: int2 = 5 
int2 = 12 : <type 'int'>
=> int2 = 5 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 47
ACTION: avl1.delete(int0) 
int0 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1051192d8> : <type 'instance'>
avl_REF1 = set([3, 6, 12, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([6, 12, 13]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1032a0878>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 4 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1033b9560>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
Original test has 57 steps

SAVING TEST AS failure.62067.test.4
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 1                                                                 # STEP 0
ACTION: int3 = 1 
int3 = None : <type 'NoneType'>
=> int3 = 1 : <type 'int'>
==================================================
int1 = 4                                                                 # STEP 1
ACTION: int1 = 4 
int1 = None : <type 'NoneType'>
=> int1 = 4 : <type 'int'>
==================================================
int0 = 16                                                                # STEP 2
ACTION: int0 = 16 
int0 = None : <type 'NoneType'>
=> int0 = 16 : <type 'int'>
==================================================
int2 = 11                                                                # STEP 3
ACTION: int2 = 11 
int2 = None : <type 'NoneType'>
=> int2 = 11 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x1033b9a28> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.insert(int3)                                                        # STEP 5
ACTION: avl1.insert(int3) 
int3 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1033b9a28> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([1]) : <type 'set'>
==================================================
avl1.delete(int3)                                                        # STEP 6
ACTION: avl1.delete(int3) 
int3 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1033b9a28> : <type 'instance'>
avl_REF1 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.insert(int3)                                                        # STEP 7
ACTION: avl1.insert(int3) 
int3 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1033b9a28> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([1]) : <type 'set'>
==================================================
avl1.delete(int1)                                                        # STEP 8
ACTION: avl1.delete(int1) 
int1 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1033b9a28> : <type 'instance'>
avl_REF1 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int3 = 3                                                                 # STEP 9
ACTION: int3 = 3 
int3 = 1 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
result = avl1.find(int0)                                                # STEP 10
ACTION: result = avl1.find(int0) 
int0 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1033b9a28> : <type 'instance'>
avl_REF1 = set([1]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl1.delete(int3)                                                       # STEP 11
ACTION: avl1.delete(int3) 
int3 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1033b9a28> : <type 'instance'>
avl_REF1 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
result = avl1.inorder()                                                 # STEP 12
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x1033b9a28> : <type 'instance'>
avl_REF1 = set([1]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int0)                                                       # STEP 13
ACTION: avl1.insert(int0) 
int0 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1033b9a28> : <type 'instance'>
avl_REF1 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([16, 1]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 14
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x1033b9a28> : <type 'instance'>
avl_REF1 = set([16, 1]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1 == avl1                                                            # STEP 15
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x1033b9a28> : <type 'instance'>
avl_REF1 = set([16, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.delete(int0)                                                       # STEP 16
ACTION: avl1.delete(int0) 
int0 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1033b9a28> : <type 'instance'>
avl_REF1 = set([16, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([1]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 17
ACTION: avl1.delete(int1) 
int1 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1033b9a28> : <type 'instance'>
avl_REF1 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
result = avl1.find(int2)                                                # STEP 18
ACTION: result = avl1.find(int2) 
int2 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1033b9a28> : <type 'instance'>
avl_REF1 = set([1]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
result = avl1.inorder()                                                 # STEP 19
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x1033b9a28> : <type 'instance'>
avl_REF1 = set([1]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int1)                                                       # STEP 20
ACTION: avl1.insert(int1) 
int1 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1033b9a28> : <type 'instance'>
avl_REF1 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([1, 4]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 21
ACTION: avl1.delete(int0) 
int0 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1033b9a28> : <type 'instance'>
avl_REF1 = set([1, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
result = avl1.inorder()                                                 # STEP 22
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x1033b9a28> : <type 'instance'>
avl_REF1 = set([1, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int0)                                                       # STEP 23
ACTION: avl1.insert(int0) 
int0 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1033b9a28> : <type 'instance'>
avl_REF1 = set([1, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([16, 1, 4]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 24
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x1033b9a28> : <type 'instance'>
avl_REF1 = set([16, 1, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int0 = 11                                                               # STEP 25
ACTION: int0 = 11 
int0 = 16 : <type 'int'>
=> int0 = 11 : <type 'int'>
==================================================
int3 = 18                                                               # STEP 26
ACTION: int3 = 18 
int3 = 3 : <type 'int'>
=> int3 = 18 : <type 'int'>
==================================================
int1 = 16                                                               # STEP 27
ACTION: int1 = 16 
int1 = 4 : <type 'int'>
=> int1 = 16 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 28
ACTION: avl1.insert(int0) 
int0 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1033b9a28> : <type 'instance'>
avl_REF1 = set([16, 1, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([16, 1, 11, 4]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 29
ACTION: avl1.insert(int0) 
int0 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1033b9a28> : <type 'instance'>
avl_REF1 = set([16, 1, 11, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.insert(int2)                                                       # STEP 30
ACTION: avl1.insert(int2) 
int2 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1033b9a28> : <type 'instance'>
avl_REF1 = set([16, 1, 11, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
result = avl1.find(int0)                                                # STEP 31
ACTION: result = avl1.find(int0) 
int0 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1033b9a28> : <type 'instance'>
avl_REF1 = set([16, 1, 11, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
int0 = 14                                                               # STEP 32
ACTION: int0 = 14 
int0 = 11 : <type 'int'>
=> int0 = 14 : <type 'int'>
==================================================
int2 = 2                                                                # STEP 33
ACTION: int2 = 2 
int2 = 11 : <type 'int'>
=> int2 = 2 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 34
ACTION: avl1.insert(int0) 
int0 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1033b9a28> : <type 'instance'>
avl_REF1 = set([16, 1, 11, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([16, 1, 11, 4, 14]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 35
ACTION: avl1.insert(int2) 
int2 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1033b9a28> : <type 'instance'>
avl_REF1 = set([16, 1, 11, 4, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([1, 2, 4, 11, 14, 16]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 36
ACTION: avl1.insert(int2) 
int2 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1033b9a28> : <type 'instance'>
avl_REF1 = set([1, 2, 4, 11, 14, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
avl1.insert(int2)                                                       # STEP 37
ACTION: avl1.insert(int2) 
int2 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1033b9a28> : <type 'instance'>
avl_REF1 = set([1, 2, 4, 11, 14, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
avl1.insert(int3)                                                       # STEP 38
ACTION: avl1.insert(int3) 
int3 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1033b9a28> : <type 'instance'>
avl_REF1 = set([1, 2, 4, 11, 14, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([1, 2, 4, 11, 14, 16, 18]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 39
ACTION: avl1.delete(int1) 
int1 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1033b9a28> : <type 'instance'>
avl_REF1 = set([1, 2, 4, 11, 14, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([1, 2, 4, 11, 14, 18]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 40
ACTION: avl1.insert(int1) 
int1 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1033b9a28> : <type 'instance'>
avl_REF1 = set([1, 2, 4, 11, 14, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([1, 2, 4, 11, 14, 16, 18]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 41
ACTION: avl1.delete(int0) 
int0 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1033b9a28> : <type 'instance'>
avl_REF1 = set([1, 2, 4, 11, 14, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([1, 2, 4, 11, 16, 18]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 42
ACTION: avl1.delete(int2) 
int2 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1033b9a28> : <type 'instance'>
avl_REF1 = set([1, 2, 4, 11, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([1, 4, 11, 16, 18]) : <type 'set'>
==================================================
result = avl1.find(int3)                                                # STEP 43
ACTION: result = avl1.find(int3) 
int3 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1033b9a28> : <type 'instance'>
avl_REF1 = set([1, 4, 11, 16, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl1.insert(int3)                                                       # STEP 44
ACTION: avl1.insert(int3) 
int3 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1033b9a28> : <type 'instance'>
avl_REF1 = set([1, 4, 11, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
result = avl1.inorder()                                                 # STEP 45
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x1033b9a28> : <type 'instance'>
avl_REF1 = set([1, 4, 11, 16, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.delete(int1)                                                       # STEP 46
ACTION: avl1.delete(int1) 
int1 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1033b9a28> : <type 'instance'>
avl_REF1 = set([1, 4, 11, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([1, 4, 11, 18]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 47
ACTION: avl1.insert(int1) 
int1 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1033b9a28> : <type 'instance'>
avl_REF1 = set([1, 4, 11, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([1, 4, 11, 16, 18]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 48
ACTION: avl1.insert(int3) 
int3 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1033b9a28> : <type 'instance'>
avl_REF1 = set([1, 4, 11, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
avl1.insert(int2)                                                       # STEP 49
ACTION: avl1.insert(int2) 
int2 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1033b9a28> : <type 'instance'>
avl_REF1 = set([1, 4, 11, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([1, 2, 4, 11, 16, 18]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 50
ACTION: avl1.delete(int0) 
int0 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1033b9a28> : <type 'instance'>
avl_REF1 = set([1, 2, 4, 11, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.delete(int3)                                                       # STEP 51
ACTION: avl1.delete(int3) 
int3 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1033b9a28> : <type 'instance'>
avl_REF1 = set([1, 2, 4, 11, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([1, 2, 4, 11, 16]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 52
ACTION: avl1.insert(int1) 
int1 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1033b9a28> : <type 'instance'>
avl_REF1 = set([1, 2, 4, 11, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl1.insert(int3)                                                       # STEP 53
ACTION: avl1.insert(int3) 
int3 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1033b9a28> : <type 'instance'>
avl_REF1 = set([1, 2, 4, 11, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([1, 2, 4, 11, 16, 18]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 54
ACTION: avl1.insert(int0) 
int0 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1033b9a28> : <type 'instance'>
avl_REF1 = set([1, 2, 4, 11, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([1, 2, 4, 11, 14, 16, 18]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 55
ACTION: avl1.insert(int0) 
int0 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1033b9a28> : <type 'instance'>
avl_REF1 = set([1, 2, 4, 11, 14, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.delete(int2)                                                       # STEP 56
ACTION: avl1.delete(int2) 
int2 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1033b9a28> : <type 'instance'>
avl_REF1 = set([1, 2, 4, 11, 14, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([1, 4, 11, 14, 16, 18]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1036087e8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 5 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 0
STOPPING TESTING DUE TO TIMEOUT
8.21242019733 PERCENT COVERED
61.5592701435 TOTAL RUNTIME
8 EXECUTED
402 TOTAL TEST OPERATIONS
20.3309729099 TIME SPENT EXECUTING TEST OPERATIONS
0.0463056564331 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
20.368768692 TIME SPENT CHECKING PROPERTIES
40.6997416019 TOTAL TIME SPENT RUNNING SUT
0.00452041625977 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
5 FAILED
0 REPEATS OF FAILURES
5 ACTUAL DISTINCT FAILURES

FAILURE 0
int3 = 13                                                                # STEP 0
int0 = 1                                                                 # STEP 1
int1 = 14                                                                # STEP 2
int2 = 5                                                                 # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
avl1.insert(int2)                                                        # STEP 5
avl1.insert(int3)                                                        # STEP 6
avl1.delete(int2)                                                        # STEP 7
avl1.insert(int0)                                                        # STEP 8
result = avl1.inorder()                                                  # STEP 9
avl1.delete(int2)                                                       # STEP 10
result = avl1.inorder()                                                 # STEP 11
avl1.insert(int0)                                                       # STEP 12
avl1.delete(int2)                                                       # STEP 13
int3 = 9                                                                # STEP 14
avl1.insert(int0)                                                       # STEP 15
avl1.insert(int2)                                                       # STEP 16
avl1.insert(int2)                                                       # STEP 17
result = avl1.inorder()                                                 # STEP 18
avl1.insert(int0)                                                       # STEP 19
avl1.insert(int1)                                                       # STEP 20
avl1.insert(int3)                                                       # STEP 21
int0 = 9                                                                # STEP 22
avl1.insert(int1)                                                       # STEP 23
avl1.insert(int0)                                                       # STEP 24
avl1.delete(int0)                                                       # STEP 25
int3 = 20                                                               # STEP 26
int2 = 4                                                                # STEP 27
avl1.insert(int2)                                                       # STEP 28
avl1.insert(int1)                                                       # STEP 29
avl1.insert(int3)                                                       # STEP 30
avl1.insert(int0)                                                       # STEP 31
avl1.insert(int1)                                                       # STEP 32
int2 = 12                                                               # STEP 33
result = avl1.inorder()                                                 # STEP 34
avl1.delete(int3)                                                       # STEP 35
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10327f9e0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE 1
int2 = 18                                                                # STEP 0
avl1 = avl.AVLTree()                                                     # STEP 1
avl1.insert(int2)                                                        # STEP 2
int0 = 14                                                                # STEP 3
avl1.delete(int2)                                                        # STEP 4
int3 = 16                                                                # STEP 5
avl1.delete(int3)                                                        # STEP 6
result = avl1.inorder()                                                  # STEP 7
int3 = 20                                                                # STEP 8
avl1.delete(int3)                                                        # STEP 9
result = avl1.inorder()                                                 # STEP 10
avl1.insert(int0)                                                       # STEP 11
avl1.insert(int0)                                                       # STEP 12
int3 = 7                                                                # STEP 13
avl1.delete(int0)                                                       # STEP 14
avl1.delete(int2)                                                       # STEP 15
avl1.insert(int3)                                                       # STEP 16
avl1.delete(int0)                                                       # STEP 17
avl1.insert(int3)                                                       # STEP 18
avl1.insert(int0)                                                       # STEP 19
int3 = 19                                                               # STEP 20
result = avl1.find(int2)                                                # STEP 21
int2 = 14                                                               # STEP 22
avl1.delete(int3)                                                       # STEP 23
int3 = 8                                                                # STEP 24
int1 = 16                                                               # STEP 25
avl1.insert(int0)                                                       # STEP 26
avl1.delete(int3)                                                       # STEP 27
int3 = 19                                                               # STEP 28
avl1.insert(int3)                                                       # STEP 29
avl1.insert(int1)                                                       # STEP 30
avl1.insert(int3)                                                       # STEP 31
avl1.insert(int0)                                                       # STEP 32
avl1.delete(int0)                                                       # STEP 33
int1 = 6                                                                # STEP 34
avl1 == avl1                                                            # STEP 35
avl1.insert(int2)                                                       # STEP 36
avl1.insert(int2)                                                       # STEP 37
result = avl1.inorder()                                                 # STEP 38
int3 = 19                                                               # STEP 39
avl1.delete(int3)                                                       # STEP 40
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105108950>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE 2
int2 = 1                                                                 # STEP 0
int1 = 13                                                                # STEP 1
int0 = 17                                                                # STEP 2
int3 = 12                                                                # STEP 3
avl0 = avl.AVLTree()                                                     # STEP 4
result = avl0.inorder()                                                  # STEP 5
avl0 = avl.AVLTree()                                                     # STEP 6
avl0.insert(int0)                                                        # STEP 7
avl0.insert(int2)                                                        # STEP 8
int0 = 20                                                                # STEP 9
avl0.insert(int0)                                                       # STEP 10
int2 = 19                                                               # STEP 11
avl0.insert(int3)                                                       # STEP 12
avl0.insert(int0)                                                       # STEP 13
avl0 == avl0                                                            # STEP 14
result = avl0.inorder()                                                 # STEP 15
result = avl0.find(int1)                                                # STEP 16
avl0.insert(int3)                                                       # STEP 17
avl0.insert(int1)                                                       # STEP 18
avl0.delete(int0)                                                       # STEP 19
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10512df80>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE 3
int2 = 5                                                                 # STEP 0
int0 = 5                                                                 # STEP 1
int3 = 13                                                                # STEP 2
avl1 = avl.AVLTree()                                                     # STEP 3
avl1.insert(int3)                                                        # STEP 4
avl1.insert(int3)                                                        # STEP 5
avl1.insert(int2)                                                        # STEP 6
avl1.delete(int0)                                                        # STEP 7
avl1.delete(int0)                                                        # STEP 8
result = avl1.inorder()                                                  # STEP 9
int2 = 12                                                               # STEP 10
avl1.delete(int0)                                                       # STEP 11
result = avl1.find(int2)                                                # STEP 12
avl1.delete(int2)                                                       # STEP 13
int0 = 6                                                                # STEP 14
avl1.insert(int2)                                                       # STEP 15
avl1.delete(int2)                                                       # STEP 16
avl1.delete(int0)                                                       # STEP 17
avl1.delete(int0)                                                       # STEP 18
avl1.delete(int2)                                                       # STEP 19
avl1.insert(int0)                                                       # STEP 20
result = avl1.find(int2)                                                # STEP 21
int3 = 10                                                               # STEP 22
avl1.insert(int2)                                                       # STEP 23
avl1.insert(int2)                                                       # STEP 24
int1 = 16                                                               # STEP 25
int0 = 10                                                               # STEP 26
avl1.insert(int0)                                                       # STEP 27
avl1.insert(int2)                                                       # STEP 28
avl1.delete(int3)                                                       # STEP 29
avl1.delete(int2)                                                       # STEP 30
avl1.delete(int2)                                                       # STEP 31
result = avl1.find(int2)                                                # STEP 32
avl1 == avl1                                                            # STEP 33
avl1.delete(int0)                                                       # STEP 34
avl1.delete(int1)                                                       # STEP 35
int0 = 3                                                                # STEP 36
avl1.delete(int1)                                                       # STEP 37
result = avl1.inorder()                                                 # STEP 38
result = avl1.find(int0)                                                # STEP 39
result = avl1.inorder()                                                 # STEP 40
avl1 == avl1                                                            # STEP 41
avl1.delete(int3)                                                       # STEP 42
avl1.insert(int0)                                                       # STEP 43
avl1.insert(int2)                                                       # STEP 44
result = avl1.find(int3)                                                # STEP 45
int2 = 5                                                                # STEP 46
avl1.delete(int0)                                                       # STEP 47
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1032a0878>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE 4
int3 = 1                                                                 # STEP 0
int1 = 4                                                                 # STEP 1
int0 = 16                                                                # STEP 2
int2 = 11                                                                # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
avl1.insert(int3)                                                        # STEP 5
avl1.delete(int3)                                                        # STEP 6
avl1.insert(int3)                                                        # STEP 7
avl1.delete(int1)                                                        # STEP 8
int3 = 3                                                                 # STEP 9
result = avl1.find(int0)                                                # STEP 10
avl1.delete(int3)                                                       # STEP 11
result = avl1.inorder()                                                 # STEP 12
avl1.insert(int0)                                                       # STEP 13
result = avl1.inorder()                                                 # STEP 14
avl1 == avl1                                                            # STEP 15
avl1.delete(int0)                                                       # STEP 16
avl1.delete(int1)                                                       # STEP 17
result = avl1.find(int2)                                                # STEP 18
result = avl1.inorder()                                                 # STEP 19
avl1.insert(int1)                                                       # STEP 20
avl1.delete(int0)                                                       # STEP 21
result = avl1.inorder()                                                 # STEP 22
avl1.insert(int0)                                                       # STEP 23
result = avl1.inorder()                                                 # STEP 24
int0 = 11                                                               # STEP 25
int3 = 18                                                               # STEP 26
int1 = 16                                                               # STEP 27
avl1.insert(int0)                                                       # STEP 28
avl1.insert(int0)                                                       # STEP 29
avl1.insert(int2)                                                       # STEP 30
result = avl1.find(int0)                                                # STEP 31
int0 = 14                                                               # STEP 32
int2 = 2                                                                # STEP 33
avl1.insert(int0)                                                       # STEP 34
avl1.insert(int2)                                                       # STEP 35
avl1.insert(int2)                                                       # STEP 36
avl1.insert(int2)                                                       # STEP 37
avl1.insert(int3)                                                       # STEP 38
avl1.delete(int1)                                                       # STEP 39
avl1.insert(int1)                                                       # STEP 40
avl1.delete(int0)                                                       # STEP 41
avl1.delete(int2)                                                       # STEP 42
result = avl1.find(int3)                                                # STEP 43
avl1.insert(int3)                                                       # STEP 44
result = avl1.inorder()                                                 # STEP 45
avl1.delete(int1)                                                       # STEP 46
avl1.insert(int1)                                                       # STEP 47
avl1.insert(int3)                                                       # STEP 48
avl1.insert(int2)                                                       # STEP 49
avl1.delete(int0)                                                       # STEP 50
avl1.delete(int3)                                                       # STEP 51
avl1.insert(int1)                                                       # STEP 52
avl1.insert(int3)                                                       # STEP 53
avl1.insert(int0)                                                       # STEP 54
avl1.insert(int0)                                                       # STEP 55
avl1.delete(int2)                                                       # STEP 56
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1036087e8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
214 BRANCHES COVERED
161 STATEMENTS COVERED

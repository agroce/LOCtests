Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.13789.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
TEST #3 STEP #94 (0:00:30.063021) Sun Apr 30 02:33:25 2017 [ 133 stmts 178 branches ]
  12 [2:0]
-- < 8 [1:0]
---- < 4 [0:0] L
---- > 9 [0:0] L
-- > 13 [1:-1]
---- > 17 [0:0] L
set([4, 8, 9, 12, 13, 17])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102c1e320>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
Original test has 99 steps

SAVING TEST AS failure.13789.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 6                                                                 # STEP 0
ACTION: int0 = 6 
int0 = None : <type 'NoneType'>
=> int0 = 6 : <type 'int'>
==================================================
int3 = 3                                                                 # STEP 1
ACTION: int3 = 3 
int3 = None : <type 'NoneType'>
=> int3 = 3 : <type 'int'>
==================================================
int2 = 5                                                                 # STEP 2
ACTION: int2 = 5 
int2 = None : <type 'NoneType'>
=> int2 = 5 : <type 'int'>
==================================================
int1 = 5                                                                 # STEP 3
ACTION: int1 = 5 
int1 = None : <type 'NoneType'>
=> int1 = 5 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x102beed40> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
result = avl1.find(int1)                                                 # STEP 5
ACTION: result = avl1.find(int1) 
int1 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102beed40> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int1 = 4                                                                 # STEP 6
ACTION: int1 = 4 
int1 = 5 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
avl1 == avl1                                                             # STEP 7
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x102beed40> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
result = avl1.find(int1)                                                 # STEP 8
ACTION: result = avl1.find(int1) 
int1 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102beed40> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int1 = 18                                                                # STEP 9
ACTION: int1 = 18 
int1 = 4 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 10
ACTION: avl1.delete(int2) 
int2 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102beed40> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
result = avl1.find(int2)                                                # STEP 11
ACTION: result = avl1.find(int2) 
int2 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102beed40> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
result = avl1.find(int3)                                                # STEP 12
ACTION: result = avl1.find(int3) 
int3 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102beed40> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
int3 = 4                                                                # STEP 13
ACTION: int3 = 4 
int3 = 3 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 14
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x102beed40> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
int2 = 6                                                                # STEP 15
ACTION: int2 = 6 
int2 = 5 : <type 'int'>
=> int2 = 6 : <type 'int'>
==================================================
result = avl1.find(int3)                                                # STEP 16
ACTION: result = avl1.find(int3) 
int3 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102beed40> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
result = avl1.find(int1)                                                # STEP 17
ACTION: result = avl1.find(int1) 
int1 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102beed40> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int1 = 16                                                               # STEP 18
ACTION: int1 = 16 
int1 = 18 : <type 'int'>
=> int1 = 16 : <type 'int'>
==================================================
int3 = 13                                                               # STEP 19
ACTION: int3 = 13 
int3 = 4 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 20
ACTION: avl1.delete(int2) 
int2 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102beed40> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.insert(int2)                                                       # STEP 21
ACTION: avl1.insert(int2) 
int2 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102beed40> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([6]) : <type 'set'>
==================================================
int2 = 12                                                               # STEP 22
ACTION: int2 = 12 
int2 = 6 : <type 'int'>
=> int2 = 12 : <type 'int'>
==================================================
result = avl1.find(int2)                                                # STEP 23
ACTION: result = avl1.find(int2) 
int2 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102beed40> : <type 'instance'>
avl_REF1 = set([6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int2 = 19                                                               # STEP 24
ACTION: int2 = 19 
int2 = 12 : <type 'int'>
=> int2 = 19 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 25
ACTION: avl1.delete(int3) 
int3 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102beed40> : <type 'instance'>
avl_REF1 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int3 = 2                                                                # STEP 26
ACTION: int3 = 2 
int3 = 13 : <type 'int'>
=> int3 = 2 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 27
ACTION: avl1.insert(int2) 
int2 = 19 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102beed40> : <type 'instance'>
avl_REF1 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([19, 6]) : <type 'set'>
==================================================
int2 = 12                                                               # STEP 28
ACTION: int2 = 12 
int2 = 19 : <type 'int'>
=> int2 = 12 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 29
ACTION: avl1.delete(int1) 
int1 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102beed40> : <type 'instance'>
avl_REF1 = set([19, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.delete(int1)                                                       # STEP 30
ACTION: avl1.delete(int1) 
int1 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102beed40> : <type 'instance'>
avl_REF1 = set([19, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int1 = 13                                                               # STEP 31
ACTION: int1 = 13 
int1 = 16 : <type 'int'>
=> int1 = 13 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 32
ACTION: avl1.insert(int3) 
int3 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102beed40> : <type 'instance'>
avl_REF1 = set([19, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([2, 19, 6]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 33
ACTION: avl1.delete(int0) 
int0 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102beed40> : <type 'instance'>
avl_REF1 = set([2, 19, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([2, 19]) : <type 'set'>
==================================================
int0 = 2                                                                # STEP 34
ACTION: int0 = 2 
int0 = 6 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 35
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x102beed40> : <type 'instance'>
avl_REF1 = set([2, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
int3 = 20                                                               # STEP 36
ACTION: int3 = 20 
int3 = 2 : <type 'int'>
=> int3 = 20 : <type 'int'>
==================================================
result = avl1.find(int2)                                                # STEP 37
ACTION: result = avl1.find(int2) 
int2 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102beed40> : <type 'instance'>
avl_REF1 = set([2, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int2 = 10                                                               # STEP 38
ACTION: int2 = 10 
int2 = 12 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 39
ACTION: avl1.insert(int0) 
int0 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102beed40> : <type 'instance'>
avl_REF1 = set([2, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
result = avl1.find(int1)                                                # STEP 40
ACTION: result = avl1.find(int1) 
int1 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102beed40> : <type 'instance'>
avl_REF1 = set([2, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int0 = 2                                                                # STEP 41
ACTION: int0 = 2 
int0 = 2 : <type 'int'>
==================================================
int1 = 12                                                               # STEP 42
ACTION: int1 = 12 
int1 = 13 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 43
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x102bfd3b0> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 44
ACTION: avl0.insert(int1) 
int1 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102bfd3b0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([12]) : <type 'set'>
==================================================
result = avl0.find(int3)                                                # STEP 45
ACTION: result = avl0.find(int3) 
int3 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102bfd3b0> : <type 'instance'>
avl_REF0 = set([12]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
avl1.delete(int0)                                                       # STEP 46
ACTION: avl1.delete(int0) 
int0 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102beed40> : <type 'instance'>
avl_REF1 = set([2, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([19]) : <type 'set'>
==================================================
avl1 == avl1                                                            # STEP 47
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x102beed40> : <type 'instance'>
avl_REF1 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
result = avl0.find(int3)                                                # STEP 48
ACTION: result = avl0.find(int3) 
int3 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102bfd3b0> : <type 'instance'>
avl_REF0 = set([12]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
int0 = 5                                                                # STEP 49
ACTION: int0 = 5 
int0 = 2 : <type 'int'>
=> int0 = 5 : <type 'int'>
==================================================
int1 = 13                                                               # STEP 50
ACTION: int1 = 13 
int1 = 12 : <type 'int'>
=> int1 = 13 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 51
ACTION: avl0.delete(int1) 
int1 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102bfd3b0> : <type 'instance'>
avl_REF0 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int1 = 13                                                               # STEP 52
ACTION: int1 = 13 
int1 = 13 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 53
ACTION: avl0.delete(int3) 
int3 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102bfd3b0> : <type 'instance'>
avl_REF0 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int3 = 1                                                                # STEP 54
ACTION: int3 = 1 
int3 = 20 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
result = avl0.find(int2)                                                # STEP 55
ACTION: result = avl0.find(int2) 
int2 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102bfd3b0> : <type 'instance'>
avl_REF0 = set([12]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl1.insert(int3)                                                       # STEP 56
ACTION: avl1.insert(int3) 
int3 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102beed40> : <type 'instance'>
avl_REF1 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([1, 19]) : <type 'set'>
==================================================
int2 = 9                                                                # STEP 57
ACTION: int2 = 9 
int2 = 10 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 58
ACTION: avl1.insert(int1) 
int1 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102beed40> : <type 'instance'>
avl_REF1 = set([1, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([1, 19, 13]) : <type 'set'>
==================================================
int1 = 8                                                                # STEP 59
ACTION: int1 = 8 
int1 = 13 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
result = avl1.find(int3)                                                # STEP 60
ACTION: result = avl1.find(int3) 
int3 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102beed40> : <type 'instance'>
avl_REF1 = set([1, 19, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
int3 = 3                                                                # STEP 61
ACTION: int3 = 3 
int3 = 1 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
result = avl1.find(int2)                                                # STEP 62
ACTION: result = avl1.find(int2) 
int2 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102beed40> : <type 'instance'>
avl_REF1 = set([1, 19, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl0 == avl0                                                            # STEP 63
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x102bfd3b0> : <type 'instance'>
avl_REF0 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl1.delete(int2)                                                       # STEP 64
ACTION: avl1.delete(int2) 
int2 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102beed40> : <type 'instance'>
avl_REF1 = set([1, 19, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
result = avl0.inorder()                                                 # STEP 65
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x102bfd3b0> : <type 'instance'>
avl_REF0 = set([12]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl1.delete(int1)                                                       # STEP 66
ACTION: avl1.delete(int1) 
int1 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102beed40> : <type 'instance'>
avl_REF1 = set([1, 19, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl0.insert(int1)                                                       # STEP 67
ACTION: avl0.insert(int1) 
int1 = 8 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102bfd3b0> : <type 'instance'>
avl_REF0 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([8, 12]) : <type 'set'>
==================================================
avl0 == avl0                                                            # STEP 68
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x102bfd3b0> : <type 'instance'>
avl_REF0 = set([8, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
int2 = 19                                                               # STEP 69
ACTION: int2 = 19 
int2 = 9 : <type 'int'>
=> int2 = 19 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 70
ACTION: avl0.insert(int1) 
int1 = 8 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102bfd3b0> : <type 'instance'>
avl_REF0 = set([8, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
int1 = 4                                                                # STEP 71
ACTION: int1 = 4 
int1 = 8 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 72
ACTION: avl1.insert(int2) 
int2 = 19 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102beed40> : <type 'instance'>
avl_REF1 = set([1, 19, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
int2 = 9                                                                # STEP 73
ACTION: int2 = 9 
int2 = 19 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
result = avl1.find(int2)                                                # STEP 74
ACTION: result = avl1.find(int2) 
int2 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102beed40> : <type 'instance'>
avl_REF1 = set([1, 19, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int2 = 9                                                                # STEP 75
ACTION: int2 = 9 
int2 = 9 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 76
ACTION: avl0 = avl.AVLTree() 
avl0 = <avlbug2.AVLTree instance at 0x102bfd3b0> : <type 'instance'>
avl_REF0 = set([8, 12]) : <type 'set'>
=> avl0 = <avlbug2.AVLTree instance at 0x102bc2b00> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 77
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x102beed40> : <type 'instance'>
avl_REF1 = set([1, 19, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.delete(int1)                                                       # STEP 78
ACTION: avl1.delete(int1) 
int1 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102beed40> : <type 'instance'>
avl_REF1 = set([1, 19, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.delete(int3)                                                       # STEP 79
ACTION: avl1.delete(int3) 
int3 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102beed40> : <type 'instance'>
avl_REF1 = set([1, 19, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int3 = 18                                                               # STEP 80
ACTION: int3 = 18 
int3 = 3 : <type 'int'>
=> int3 = 18 : <type 'int'>
==================================================
int1 = 3                                                                # STEP 81
ACTION: int1 = 3 
int1 = 4 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 82
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x102beed40> : <type 'instance'>
avl_REF1 = set([1, 19, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl0.insert(int1)                                                       # STEP 83
ACTION: avl0.insert(int1) 
int1 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102bc2b00> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([3]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 84
ACTION: avl0.delete(int0) 
int0 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102bc2b00> : <type 'instance'>
avl_REF0 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int0 = 14                                                               # STEP 85
ACTION: int0 = 14 
int0 = 5 : <type 'int'>
=> int0 = 14 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 86
ACTION: avl1.delete(int0) 
int0 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102beed40> : <type 'instance'>
avl_REF1 = set([1, 19, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int1 = 11                                                               # STEP 87
ACTION: int1 = 11 
int1 = 3 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 88
ACTION: avl1.insert(int3) 
int3 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102beed40> : <type 'instance'>
avl_REF1 = set([1, 19, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([1, 18, 19, 13]) : <type 'set'>
==================================================
int0 = 2                                                                # STEP 89
ACTION: int0 = 2 
int0 = 14 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
int3 = 19                                                               # STEP 90
ACTION: int3 = 19 
int3 = 18 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 91
ACTION: avl1.insert(int3) 
int3 = 19 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102beed40> : <type 'instance'>
avl_REF1 = set([1, 18, 19, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
result = avl1.find(int2)                                                # STEP 92
ACTION: result = avl1.find(int2) 
int2 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102beed40> : <type 'instance'>
avl_REF1 = set([1, 18, 19, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int3 = 4                                                                # STEP 93
ACTION: int3 = 4 
int3 = 19 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 94
ACTION: avl1.delete(int3) 
int3 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102beed40> : <type 'instance'>
avl_REF1 = set([1, 18, 19, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int3 = 1                                                                # STEP 95
ACTION: int3 = 1 
int3 = 4 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
int2 = 4                                                                # STEP 96
ACTION: int2 = 4 
int2 = 9 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
avl0 == avl1                                                            # STEP 97
ACTION: avl0 == avl1 
avl0 = <avlbug2.AVLTree instance at 0x102bc2b00> : <type 'instance'>
avl1 = <avlbug2.AVLTree instance at 0x102beed40> : <type 'instance'>
avl_REF0 = set([3]) : <type 'set'>
avl_REF1 = set([1, 18, 19, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF1 
==================================================
avl1.delete(int3)                                                       # STEP 98
ACTION: avl1.delete(int3) 
int3 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102beed40> : <type 'instance'>
avl_REF1 = set([1, 18, 19, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([18, 19, 13]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102ce3488>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 0
STOPPING TESTING DUE TO TIMEOUT
8.50711684873 PERCENT COVERED
61.5517787933 TOTAL RUNTIME
6 EXECUTED
499 TOTAL TEST OPERATIONS
25.4708356857 TIME SPENT EXECUTING TEST OPERATIONS
0.0202560424805 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
25.6292262077 TIME SPENT CHECKING PROPERTIES
51.1000618935 TOTAL TIME SPENT RUNNING SUT
0.00474214553833 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int0 = 6                                                                 # STEP 0
int3 = 3                                                                 # STEP 1
int2 = 5                                                                 # STEP 2
int1 = 5                                                                 # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
result = avl1.find(int1)                                                 # STEP 5
int1 = 4                                                                 # STEP 6
avl1 == avl1                                                             # STEP 7
result = avl1.find(int1)                                                 # STEP 8
int1 = 18                                                                # STEP 9
avl1.delete(int2)                                                       # STEP 10
result = avl1.find(int2)                                                # STEP 11
result = avl1.find(int3)                                                # STEP 12
int3 = 4                                                                # STEP 13
avl1 == avl1                                                            # STEP 14
int2 = 6                                                                # STEP 15
result = avl1.find(int3)                                                # STEP 16
result = avl1.find(int1)                                                # STEP 17
int1 = 16                                                               # STEP 18
int3 = 13                                                               # STEP 19
avl1.delete(int2)                                                       # STEP 20
avl1.insert(int2)                                                       # STEP 21
int2 = 12                                                               # STEP 22
result = avl1.find(int2)                                                # STEP 23
int2 = 19                                                               # STEP 24
avl1.delete(int3)                                                       # STEP 25
int3 = 2                                                                # STEP 26
avl1.insert(int2)                                                       # STEP 27
int2 = 12                                                               # STEP 28
avl1.delete(int1)                                                       # STEP 29
avl1.delete(int1)                                                       # STEP 30
int1 = 13                                                               # STEP 31
avl1.insert(int3)                                                       # STEP 32
avl1.delete(int0)                                                       # STEP 33
int0 = 2                                                                # STEP 34
avl1 == avl1                                                            # STEP 35
int3 = 20                                                               # STEP 36
result = avl1.find(int2)                                                # STEP 37
int2 = 10                                                               # STEP 38
avl1.insert(int0)                                                       # STEP 39
result = avl1.find(int1)                                                # STEP 40
int0 = 2                                                                # STEP 41
int1 = 12                                                               # STEP 42
avl0 = avl.AVLTree()                                                    # STEP 43
avl0.insert(int1)                                                       # STEP 44
result = avl0.find(int3)                                                # STEP 45
avl1.delete(int0)                                                       # STEP 46
avl1 == avl1                                                            # STEP 47
result = avl0.find(int3)                                                # STEP 48
int0 = 5                                                                # STEP 49
int1 = 13                                                               # STEP 50
avl0.delete(int1)                                                       # STEP 51
int1 = 13                                                               # STEP 52
avl0.delete(int3)                                                       # STEP 53
int3 = 1                                                                # STEP 54
result = avl0.find(int2)                                                # STEP 55
avl1.insert(int3)                                                       # STEP 56
int2 = 9                                                                # STEP 57
avl1.insert(int1)                                                       # STEP 58
int1 = 8                                                                # STEP 59
result = avl1.find(int3)                                                # STEP 60
int3 = 3                                                                # STEP 61
result = avl1.find(int2)                                                # STEP 62
avl0 == avl0                                                            # STEP 63
avl1.delete(int2)                                                       # STEP 64
result = avl0.inorder()                                                 # STEP 65
avl1.delete(int1)                                                       # STEP 66
avl0.insert(int1)                                                       # STEP 67
avl0 == avl0                                                            # STEP 68
int2 = 19                                                               # STEP 69
avl0.insert(int1)                                                       # STEP 70
int1 = 4                                                                # STEP 71
avl1.insert(int2)                                                       # STEP 72
int2 = 9                                                                # STEP 73
result = avl1.find(int2)                                                # STEP 74
int2 = 9                                                                # STEP 75
avl0 = avl.AVLTree()                                                    # STEP 76
result = avl1.inorder()                                                 # STEP 77
avl1.delete(int1)                                                       # STEP 78
avl1.delete(int3)                                                       # STEP 79
int3 = 18                                                               # STEP 80
int1 = 3                                                                # STEP 81
result = avl1.inorder()                                                 # STEP 82
avl0.insert(int1)                                                       # STEP 83
avl0.delete(int0)                                                       # STEP 84
int0 = 14                                                               # STEP 85
avl1.delete(int0)                                                       # STEP 86
int1 = 11                                                               # STEP 87
avl1.insert(int3)                                                       # STEP 88
int0 = 2                                                                # STEP 89
int3 = 19                                                               # STEP 90
avl1.insert(int3)                                                       # STEP 91
result = avl1.find(int2)                                                # STEP 92
int3 = 4                                                                # STEP 93
avl1.delete(int3)                                                       # STEP 94
int3 = 1                                                                # STEP 95
int2 = 4                                                                # STEP 96
avl0 == avl1                                                            # STEP 97
avl1.delete(int3)                                                       # STEP 98
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102ce3488>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
212 BRANCHES COVERED
160 STATEMENTS COVERED

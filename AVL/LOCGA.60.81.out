Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.62492.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1041428c0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
Original test has 47 steps

SAVING TEST AS failure.62492.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 12                                                                # STEP 0
ACTION: int2 = 12 
int2 = None : <type 'NoneType'>
=> int2 = 12 : <type 'int'>
==================================================
int0 = 12                                                                # STEP 1
ACTION: int0 = 12 
int0 = None : <type 'NoneType'>
=> int0 = 12 : <type 'int'>
==================================================
int3 = 2                                                                 # STEP 2
ACTION: int3 = 2 
int3 = None : <type 'NoneType'>
=> int3 = 2 : <type 'int'>
==================================================
int1 = 20                                                                # STEP 3
ACTION: int1 = 20 
int1 = None : <type 'NoneType'>
=> int1 = 20 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x1040f27a0> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.delete(int1)                                                        # STEP 5
ACTION: avl1.delete(int1) 
int1 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1040f27a0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int1 = 13                                                                # STEP 6
ACTION: int1 = 13 
int1 = 20 : <type 'int'>
=> int1 = 13 : <type 'int'>
==================================================
avl1.delete(int3)                                                        # STEP 7
ACTION: avl1.delete(int3) 
int3 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1040f27a0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.insert(int0)                                                        # STEP 8
ACTION: avl1.insert(int0) 
int0 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1040f27a0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([12]) : <type 'set'>
==================================================
avl1 == avl1                                                             # STEP 9
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x1040f27a0> : <type 'instance'>
avl_REF1 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
int0 = 2                                                                # STEP 10
ACTION: int0 = 2 
int0 = 12 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
int3 = 16                                                               # STEP 11
ACTION: int3 = 16 
int3 = 2 : <type 'int'>
=> int3 = 16 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 12
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x1040f27a0> : <type 'instance'>
avl_REF1 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
result = avl1.find(int3)                                                # STEP 13
ACTION: result = avl1.find(int3) 
int3 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1040f27a0> : <type 'instance'>
avl_REF1 = set([12]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl1.insert(int0)                                                       # STEP 14
ACTION: avl1.insert(int0) 
int0 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1040f27a0> : <type 'instance'>
avl_REF1 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([2, 12]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 15
ACTION: avl1.delete(int2) 
int2 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1040f27a0> : <type 'instance'>
avl_REF1 = set([2, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([2]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 16
ACTION: avl1.delete(int2) 
int2 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1040f27a0> : <type 'instance'>
avl_REF1 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int2 = 16                                                               # STEP 17
ACTION: int2 = 16 
int2 = 12 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
int3 = 15                                                               # STEP 18
ACTION: int3 = 15 
int3 = 16 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 19
ACTION: avl1.delete(int3) 
int3 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1040f27a0> : <type 'instance'>
avl_REF1 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.delete(int0)                                                       # STEP 20
ACTION: avl1.delete(int0) 
int0 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1040f27a0> : <type 'instance'>
avl_REF1 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 21
ACTION: avl1.insert(int0) 
int0 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1040f27a0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([2]) : <type 'set'>
==================================================
avl1 == avl1                                                            # STEP 22
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x1040f27a0> : <type 'instance'>
avl_REF1 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.insert(int0)                                                       # STEP 23
ACTION: avl1.insert(int0) 
int0 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1040f27a0> : <type 'instance'>
avl_REF1 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.delete(int2)                                                       # STEP 24
ACTION: avl1.delete(int2) 
int2 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1040f27a0> : <type 'instance'>
avl_REF1 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
result = avl1.inorder()                                                 # STEP 25
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x1040f27a0> : <type 'instance'>
avl_REF1 = set([2]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.delete(int2)                                                       # STEP 26
ACTION: avl1.delete(int2) 
int2 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1040f27a0> : <type 'instance'>
avl_REF1 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int2 = 1                                                                # STEP 27
ACTION: int2 = 1 
int2 = 16 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 28
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x1040f27a0> : <type 'instance'>
avl_REF1 = set([2]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int3 = 14                                                               # STEP 29
ACTION: int3 = 14 
int3 = 15 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 30
ACTION: avl1.insert(int1) 
int1 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1040f27a0> : <type 'instance'>
avl_REF1 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([2, 13]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 31
ACTION: avl1.delete(int0) 
int0 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1040f27a0> : <type 'instance'>
avl_REF1 = set([2, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([13]) : <type 'set'>
==================================================
int0 = 2                                                                # STEP 32
ACTION: int0 = 2 
int0 = 2 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 33
ACTION: avl1.insert(int0) 
int0 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1040f27a0> : <type 'instance'>
avl_REF1 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([2, 13]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 34
ACTION: avl1.insert(int1) 
int1 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1040f27a0> : <type 'instance'>
avl_REF1 = set([2, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
int0 = 16                                                               # STEP 35
ACTION: int0 = 16 
int0 = 2 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
result = avl1.find(int1)                                                # STEP 36
ACTION: result = avl1.find(int1) 
int1 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1040f27a0> : <type 'instance'>
avl_REF1 = set([2, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl1.insert(int0)                                                       # STEP 37
ACTION: avl1.insert(int0) 
int0 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1040f27a0> : <type 'instance'>
avl_REF1 = set([2, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([16, 2, 13]) : <type 'set'>
==================================================
int0 = 16                                                               # STEP 38
ACTION: int0 = 16 
int0 = 16 : <type 'int'>
==================================================
int1 = 4                                                                # STEP 39
ACTION: int1 = 4 
int1 = 13 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 40
ACTION: avl1.delete(int1) 
int1 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1040f27a0> : <type 'instance'>
avl_REF1 = set([16, 2, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int1 = 9                                                                # STEP 41
ACTION: int1 = 9 
int1 = 4 : <type 'int'>
=> int1 = 9 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 42
ACTION: avl1.insert(int0) 
int0 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1040f27a0> : <type 'instance'>
avl_REF1 = set([16, 2, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.insert(int3)                                                       # STEP 43
ACTION: avl1.insert(int3) 
int3 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1040f27a0> : <type 'instance'>
avl_REF1 = set([16, 2, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([16, 2, 13, 14]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 44
ACTION: avl1.delete(int3) 
int3 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1040f27a0> : <type 'instance'>
avl_REF1 = set([16, 2, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([16, 2, 13]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 45
ACTION: avl1.insert(int2) 
int2 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1040f27a0> : <type 'instance'>
avl_REF1 = set([16, 2, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([1, 2, 13, 16]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 46
ACTION: avl1.delete(int0) 
int0 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1040f27a0> : <type 'instance'>
avl_REF1 = set([1, 2, 13, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([1, 2, 13]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10379aa28>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102e974d0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
Original test has 45 steps

SAVING TEST AS failure.62492.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 6                                                                 # STEP 0
ACTION: int0 = 6 
int0 = None : <type 'NoneType'>
=> int0 = 6 : <type 'int'>
==================================================
int3 = 14                                                                # STEP 1
ACTION: int3 = 14 
int3 = None : <type 'NoneType'>
=> int3 = 14 : <type 'int'>
==================================================
int1 = 12                                                                # STEP 2
ACTION: int1 = 12 
int1 = None : <type 'NoneType'>
=> int1 = 12 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 3
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x102ea3878> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
result = avl1.find(int3)                                                 # STEP 4
ACTION: result = avl1.find(int3) 
int3 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102ea3878> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl1.delete(int0)                                                        # STEP 5
ACTION: avl1.delete(int0) 
int0 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102ea3878> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.insert(int3)                                                        # STEP 6
ACTION: avl1.insert(int3) 
int3 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102ea3878> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([14]) : <type 'set'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 7
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x10327dbd8> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int0 = 15                                                                # STEP 8
ACTION: int0 = 15 
int0 = 6 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
result = avl0.inorder()                                                  # STEP 9
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x10327dbd8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
result = avl0.find(int1)                                                # STEP 10
ACTION: result = avl0.find(int1) 
int1 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10327dbd8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
int3 = 14                                                               # STEP 11
ACTION: int3 = 14 
int3 = 14 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 12
ACTION: avl0.insert(int3) 
int3 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10327dbd8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([14]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 13
ACTION: avl1.delete(int3) 
int3 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102ea3878> : <type 'instance'>
avl_REF1 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int3 = 2                                                                # STEP 14
ACTION: int3 = 2 
int3 = 14 : <type 'int'>
=> int3 = 2 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 15
ACTION: avl0.delete(int1) 
int1 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10327dbd8> : <type 'instance'>
avl_REF0 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.insert(int3)                                                       # STEP 16
ACTION: avl0.insert(int3) 
int3 = 2 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10327dbd8> : <type 'instance'>
avl_REF0 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([2, 14]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 17
ACTION: avl0.insert(int1) 
int1 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10327dbd8> : <type 'instance'>
avl_REF0 = set([2, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([2, 12, 14]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 18
ACTION: avl0.delete(int0) 
int0 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10327dbd8> : <type 'instance'>
avl_REF0 = set([2, 12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl1.insert(int1)                                                       # STEP 19
ACTION: avl1.insert(int1) 
int1 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102ea3878> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([12]) : <type 'set'>
==================================================
int1 = 7                                                                # STEP 20
ACTION: int1 = 7 
int1 = 12 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 21
ACTION: avl0.delete(int1) 
int1 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10327dbd8> : <type 'instance'>
avl_REF0 = set([2, 12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl1.insert(int1)                                                       # STEP 22
ACTION: avl1.insert(int1) 
int1 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102ea3878> : <type 'instance'>
avl_REF1 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([12, 7]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 23
ACTION: avl1.insert(int0) 
int0 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102ea3878> : <type 'instance'>
avl_REF1 = set([12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([15, 12, 7]) : <type 'set'>
==================================================
result = avl1.find(int1)                                                # STEP 24
ACTION: result = avl1.find(int1) 
int1 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102ea3878> : <type 'instance'>
avl_REF1 = set([15, 12, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
result = avl0.inorder()                                                 # STEP 25
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x10327dbd8> : <type 'instance'>
avl_REF0 = set([2, 12, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.delete(int3)                                                       # STEP 26
ACTION: avl0.delete(int3) 
int3 = 2 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10327dbd8> : <type 'instance'>
avl_REF0 = set([2, 12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([12, 14]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 27
ACTION: avl1.insert(int0) 
int0 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102ea3878> : <type 'instance'>
avl_REF1 = set([15, 12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl0.insert(int0)                                                       # STEP 28
ACTION: avl0.insert(int0) 
int0 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10327dbd8> : <type 'instance'>
avl_REF0 = set([12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([12, 14, 15]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 29
ACTION: avl0.insert(int0) 
int0 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10327dbd8> : <type 'instance'>
avl_REF0 = set([12, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
int1 = 12                                                               # STEP 30
ACTION: int1 = 12 
int1 = 7 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
int2 = 7                                                                # STEP 31
ACTION: int2 = 7 
int2 = None : <type 'NoneType'>
=> int2 = 7 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 32
ACTION: avl0.delete(int0) 
int0 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10327dbd8> : <type 'instance'>
avl_REF0 = set([12, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([12, 14]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 33
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x10327dbd8> : <type 'instance'>
avl_REF0 = set([12, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl1.insert(int3)                                                       # STEP 34
ACTION: avl1.insert(int3) 
int3 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102ea3878> : <type 'instance'>
avl_REF1 = set([15, 12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([2, 15, 12, 7]) : <type 'set'>
==================================================
result = avl0.find(int1)                                                # STEP 35
ACTION: result = avl0.find(int1) 
int1 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10327dbd8> : <type 'instance'>
avl_REF0 = set([12, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
int1 = 5                                                                # STEP 36
ACTION: int1 = 5 
int1 = 12 : <type 'int'>
=> int1 = 5 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 37
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x10327dbd8> : <type 'instance'>
avl_REF0 = set([12, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int3 = 18                                                               # STEP 38
ACTION: int3 = 18 
int3 = 2 : <type 'int'>
=> int3 = 18 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 39
ACTION: avl0.delete(int1) 
int1 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10327dbd8> : <type 'instance'>
avl_REF0 = set([12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.insert(int0)                                                       # STEP 40
ACTION: avl0.insert(int0) 
int0 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10327dbd8> : <type 'instance'>
avl_REF0 = set([12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([12, 14, 15]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 41
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x10327dbd8> : <type 'instance'>
avl_REF0 = set([12, 14, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
result = avl0.find(int3)                                                # STEP 42
ACTION: result = avl0.find(int3) 
int3 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10327dbd8> : <type 'instance'>
avl_REF0 = set([12, 14, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
result = avl0.inorder()                                                 # STEP 43
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x10327dbd8> : <type 'instance'>
avl_REF0 = set([12, 14, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl1.delete(int0)                                                       # STEP 44
ACTION: avl1.delete(int0) 
int0 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102ea3878> : <type 'instance'>
avl_REF1 = set([2, 15, 12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([2, 12, 7]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103799e60>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10402c3b0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
Original test has 27 steps

SAVING TEST AS failure.62492.test.2
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 11                                                                # STEP 0
ACTION: int0 = 11 
int0 = None : <type 'NoneType'>
=> int0 = 11 : <type 'int'>
==================================================
int3 = 7                                                                 # STEP 1
ACTION: int3 = 7 
int3 = None : <type 'NoneType'>
=> int3 = 7 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 2
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x10405d170> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.insert(int3)                                                        # STEP 3
ACTION: avl1.insert(int3) 
int3 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10405d170> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([7]) : <type 'set'>
==================================================
avl1.insert(int3)                                                        # STEP 4
ACTION: avl1.insert(int3) 
int3 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10405d170> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
avl1.delete(int3)                                                        # STEP 5
ACTION: avl1.delete(int3) 
int3 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10405d170> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int2 = 9                                                                 # STEP 6
ACTION: int2 = 9 
int2 = None : <type 'NoneType'>
=> int2 = 9 : <type 'int'>
==================================================
avl1.insert(int0)                                                        # STEP 7
ACTION: avl1.insert(int0) 
int0 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10405d170> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([11]) : <type 'set'>
==================================================
result = avl1.inorder()                                                  # STEP 8
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x10405d170> : <type 'instance'>
avl_REF1 = set([11]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1 == avl1                                                             # STEP 9
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x10405d170> : <type 'instance'>
avl_REF1 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
result = avl1.find(int3)                                                # STEP 10
ACTION: result = avl1.find(int3) 
int3 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10405d170> : <type 'instance'>
avl_REF1 = set([11]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
int3 = 18                                                               # STEP 11
ACTION: int3 = 18 
int3 = 7 : <type 'int'>
=> int3 = 18 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 12
ACTION: avl1.delete(int3) 
int3 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10405d170> : <type 'instance'>
avl_REF1 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.delete(int2)                                                       # STEP 13
ACTION: avl1.delete(int2) 
int2 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10405d170> : <type 'instance'>
avl_REF1 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
result = avl1.inorder()                                                 # STEP 14
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x10405d170> : <type 'instance'>
avl_REF1 = set([11]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int2 = 14                                                               # STEP 15
ACTION: int2 = 14 
int2 = 9 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
int0 = 8                                                                # STEP 16
ACTION: int0 = 8 
int0 = 11 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
int1 = 9                                                                # STEP 17
ACTION: int1 = 9 
int1 = None : <type 'NoneType'>
=> int1 = 9 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 18
ACTION: avl1.insert(int2) 
int2 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10405d170> : <type 'instance'>
avl_REF1 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([11, 14]) : <type 'set'>
==================================================
int3 = 18                                                               # STEP 19
ACTION: int3 = 18 
int3 = 18 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 20
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x10405d170> : <type 'instance'>
avl_REF1 = set([11, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int3)                                                       # STEP 21
ACTION: avl1.insert(int3) 
int3 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10405d170> : <type 'instance'>
avl_REF1 = set([11, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([18, 11, 14]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 22
ACTION: avl1.insert(int1) 
int1 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10405d170> : <type 'instance'>
avl_REF1 = set([18, 11, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([9, 18, 11, 14]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 23
ACTION: avl1.insert(int0) 
int0 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10405d170> : <type 'instance'>
avl_REF1 = set([9, 18, 11, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([8, 9, 11, 14, 18]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 24
ACTION: avl1.insert(int2) 
int2 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10405d170> : <type 'instance'>
avl_REF1 = set([8, 9, 11, 14, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
avl1.insert(int2)                                                       # STEP 25
ACTION: avl1.insert(int2) 
int2 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10405d170> : <type 'instance'>
avl_REF1 = set([8, 9, 11, 14, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
avl1.delete(int3)                                                       # STEP 26
ACTION: avl1.delete(int3) 
int3 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10405d170> : <type 'instance'>
avl_REF1 = set([8, 9, 11, 14, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([8, 9, 11, 14]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10414f170>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 3 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104157878>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
Original test has 35 steps

SAVING TEST AS failure.62492.test.3
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
avl1 = avl.AVLTree()                                                     # STEP 0
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x103702128> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
result = avl1.inorder()                                                  # STEP 1
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x103702128> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
result = avl1.inorder()                                                  # STEP 2
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x103702128> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int2 = 16                                                                # STEP 3
ACTION: int2 = 16 
int2 = None : <type 'NoneType'>
=> int2 = 16 : <type 'int'>
==================================================
int1 = 14                                                                # STEP 4
ACTION: int1 = 14 
int1 = None : <type 'NoneType'>
=> int1 = 14 : <type 'int'>
==================================================
avl1.delete(int2)                                                        # STEP 5
ACTION: avl1.delete(int2) 
int2 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103702128> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
result = avl1.find(int2)                                                 # STEP 6
ACTION: result = avl1.find(int2) 
int2 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103702128> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl1.insert(int2)                                                        # STEP 7
ACTION: avl1.insert(int2) 
int2 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103702128> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([16]) : <type 'set'>
==================================================
avl1.insert(int1)                                                        # STEP 8
ACTION: avl1.insert(int1) 
int1 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103702128> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([16, 14]) : <type 'set'>
==================================================
avl1.delete(int1)                                                        # STEP 9
ACTION: avl1.delete(int1) 
int1 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103702128> : <type 'instance'>
avl_REF1 = set([16, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([16]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 10
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x103702128> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int2)                                                       # STEP 11
ACTION: avl1.insert(int2) 
int2 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103702128> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
avl1.insert(int2)                                                       # STEP 12
ACTION: avl1.insert(int2) 
int2 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103702128> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
avl1.delete(int1)                                                       # STEP 13
ACTION: avl1.delete(int1) 
int1 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103702128> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.insert(int1)                                                       # STEP 14
ACTION: avl1.insert(int1) 
int1 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103702128> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([16, 14]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 15
ACTION: avl1.insert(int1) 
int1 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103702128> : <type 'instance'>
avl_REF1 = set([16, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl1.insert(int1)                                                       # STEP 16
ACTION: avl1.insert(int1) 
int1 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103702128> : <type 'instance'>
avl_REF1 = set([16, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl1.delete(int1)                                                       # STEP 17
ACTION: avl1.delete(int1) 
int1 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103702128> : <type 'instance'>
avl_REF1 = set([16, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([16]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 18
ACTION: avl1.insert(int1) 
int1 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103702128> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([16, 14]) : <type 'set'>
==================================================
int2 = 12                                                               # STEP 19
ACTION: int2 = 12 
int2 = 16 : <type 'int'>
=> int2 = 12 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 20
ACTION: avl1.delete(int1) 
int1 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103702128> : <type 'instance'>
avl_REF1 = set([16, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([16]) : <type 'set'>
==================================================
int3 = 20                                                               # STEP 21
ACTION: int3 = 20 
int3 = None : <type 'NoneType'>
=> int3 = 20 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 22
ACTION: avl1.insert(int1) 
int1 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103702128> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([16, 14]) : <type 'set'>
==================================================
int0 = 17                                                               # STEP 23
ACTION: int0 = 17 
int0 = None : <type 'NoneType'>
=> int0 = 17 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 24
ACTION: avl1.insert(int2) 
int2 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103702128> : <type 'instance'>
avl_REF1 = set([16, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([16, 12, 14]) : <type 'set'>
==================================================
result = avl1.find(int3)                                                # STEP 25
ACTION: result = avl1.find(int3) 
int3 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103702128> : <type 'instance'>
avl_REF1 = set([16, 12, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl1.delete(int0)                                                       # STEP 26
ACTION: avl1.delete(int0) 
int0 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103702128> : <type 'instance'>
avl_REF1 = set([16, 12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.delete(int3)                                                       # STEP 27
ACTION: avl1.delete(int3) 
int3 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103702128> : <type 'instance'>
avl_REF1 = set([16, 12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int2 = 12                                                               # STEP 28
ACTION: int2 = 12 
int2 = 12 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 29
ACTION: avl1.delete(int3) 
int3 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103702128> : <type 'instance'>
avl_REF1 = set([16, 12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.insert(int2)                                                       # STEP 30
ACTION: avl1.insert(int2) 
int2 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103702128> : <type 'instance'>
avl_REF1 = set([16, 12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
result = avl1.inorder()                                                 # STEP 31
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x103702128> : <type 'instance'>
avl_REF1 = set([16, 12, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int3)                                                       # STEP 32
ACTION: avl1.insert(int3) 
int3 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103702128> : <type 'instance'>
avl_REF1 = set([16, 12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([16, 20, 12, 14]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 33
ACTION: avl1.insert(int1) 
int1 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103702128> : <type 'instance'>
avl_REF1 = set([16, 20, 12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl1.delete(int2)                                                       # STEP 34
ACTION: avl1.delete(int2) 
int2 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103702128> : <type 'instance'>
avl_REF1 = set([16, 20, 12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([16, 20, 14]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10414c3b0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 4 DISTINCT FAILURES
TEST #5 STEP #0 (0:00:32.320228) Mon May  1 18:39:12 2017 [ 132 stmts 176 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10415dfc8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
Original test has 49 steps

SAVING TEST AS failure.62492.test.4
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 20                                                                # STEP 0
ACTION: int3 = 20 
int3 = None : <type 'NoneType'>
=> int3 = 20 : <type 'int'>
==================================================
int0 = 15                                                                # STEP 1
ACTION: int0 = 15 
int0 = None : <type 'NoneType'>
=> int0 = 15 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 2
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x10416a3b0> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int1 = 17                                                                # STEP 3
ACTION: int1 = 17 
int1 = None : <type 'NoneType'>
=> int1 = 17 : <type 'int'>
==================================================
avl1.insert(int1)                                                        # STEP 4
ACTION: avl1.insert(int1) 
int1 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10416a3b0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([17]) : <type 'set'>
==================================================
int2 = 14                                                                # STEP 5
ACTION: int2 = 14 
int2 = None : <type 'NoneType'>
=> int2 = 14 : <type 'int'>
==================================================
result = avl1.find(int3)                                                 # STEP 6
ACTION: result = avl1.find(int3) 
int3 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10416a3b0> : <type 'instance'>
avl_REF1 = set([17]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl1.insert(int2)                                                        # STEP 7
ACTION: avl1.insert(int2) 
int2 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10416a3b0> : <type 'instance'>
avl_REF1 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([17, 14]) : <type 'set'>
==================================================
result = avl1.find(int0)                                                 # STEP 8
ACTION: result = avl1.find(int0) 
int0 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10416a3b0> : <type 'instance'>
avl_REF1 = set([17, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
int3 = 14                                                                # STEP 9
ACTION: int3 = 14 
int3 = 20 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 10
ACTION: avl1.delete(int1) 
int1 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10416a3b0> : <type 'instance'>
avl_REF1 = set([17, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([14]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 11
ACTION: avl1.delete(int0) 
int0 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10416a3b0> : <type 'instance'>
avl_REF1 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.insert(int0)                                                       # STEP 12
ACTION: avl1.insert(int0) 
int0 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10416a3b0> : <type 'instance'>
avl_REF1 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([14, 15]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 13
ACTION: avl1.insert(int2) 
int2 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10416a3b0> : <type 'instance'>
avl_REF1 = set([14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
avl1.delete(int1)                                                       # STEP 14
ACTION: avl1.delete(int1) 
int1 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10416a3b0> : <type 'instance'>
avl_REF1 = set([14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.insert(int1)                                                       # STEP 15
ACTION: avl1.insert(int1) 
int1 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10416a3b0> : <type 'instance'>
avl_REF1 = set([14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([17, 14, 15]) : <type 'set'>
==================================================
int0 = 7                                                                # STEP 16
ACTION: int0 = 7 
int0 = 15 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 17
ACTION: avl1.insert(int2) 
int2 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10416a3b0> : <type 'instance'>
avl_REF1 = set([17, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
result = avl1.inorder()                                                 # STEP 18
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x10416a3b0> : <type 'instance'>
avl_REF1 = set([17, 14, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.delete(int0)                                                       # STEP 19
ACTION: avl1.delete(int0) 
int0 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10416a3b0> : <type 'instance'>
avl_REF1 = set([17, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
result = avl1.find(int2)                                                # STEP 20
ACTION: result = avl1.find(int2) 
int2 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10416a3b0> : <type 'instance'>
avl_REF1 = set([17, 14, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int1 = 14                                                               # STEP 21
ACTION: int1 = 14 
int1 = 17 : <type 'int'>
=> int1 = 14 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 22
ACTION: avl1.insert(int3) 
int3 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10416a3b0> : <type 'instance'>
avl_REF1 = set([17, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
avl1.delete(int2)                                                       # STEP 23
ACTION: avl1.delete(int2) 
int2 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10416a3b0> : <type 'instance'>
avl_REF1 = set([17, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([17, 15]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 24
ACTION: avl1.delete(int3) 
int3 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10416a3b0> : <type 'instance'>
avl_REF1 = set([17, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
result = avl1.inorder()                                                 # STEP 25
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x10416a3b0> : <type 'instance'>
avl_REF1 = set([17, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int2)                                                       # STEP 26
ACTION: avl1.insert(int2) 
int2 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10416a3b0> : <type 'instance'>
avl_REF1 = set([17, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([17, 14, 15]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 27
ACTION: avl1.delete(int2) 
int2 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10416a3b0> : <type 'instance'>
avl_REF1 = set([17, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([17, 15]) : <type 'set'>
==================================================
result = avl1.find(int2)                                                # STEP 28
ACTION: result = avl1.find(int2) 
int2 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10416a3b0> : <type 'instance'>
avl_REF1 = set([17, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int3 = 4                                                                # STEP 29
ACTION: int3 = 4 
int3 = 14 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 30
ACTION: avl1.insert(int0) 
int0 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10416a3b0> : <type 'instance'>
avl_REF1 = set([17, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([17, 7, 15]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 31
ACTION: avl1.insert(int3) 
int3 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10416a3b0> : <type 'instance'>
avl_REF1 = set([17, 7, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([17, 7, 4, 15]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 32
ACTION: avl1.delete(int2) 
int2 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10416a3b0> : <type 'instance'>
avl_REF1 = set([17, 7, 4, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.insert(int3)                                                       # STEP 33
ACTION: avl1.insert(int3) 
int3 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10416a3b0> : <type 'instance'>
avl_REF1 = set([17, 7, 4, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
avl1.delete(int1)                                                       # STEP 34
ACTION: avl1.delete(int1) 
int1 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10416a3b0> : <type 'instance'>
avl_REF1 = set([17, 7, 4, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.delete(int2)                                                       # STEP 35
ACTION: avl1.delete(int2) 
int2 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10416a3b0> : <type 'instance'>
avl_REF1 = set([17, 7, 4, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
result = avl1.find(int1)                                                # STEP 36
ACTION: result = avl1.find(int1) 
int1 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10416a3b0> : <type 'instance'>
avl_REF1 = set([17, 7, 4, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl1.delete(int1)                                                       # STEP 37
ACTION: avl1.delete(int1) 
int1 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10416a3b0> : <type 'instance'>
avl_REF1 = set([17, 7, 4, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int3 = 1                                                                # STEP 38
ACTION: int3 = 1 
int3 = 4 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
int2 = 1                                                                # STEP 39
ACTION: int2 = 1 
int2 = 14 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 40
ACTION: avl1.insert(int2) 
int2 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10416a3b0> : <type 'instance'>
avl_REF1 = set([17, 7, 4, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([1, 4, 7, 15, 17]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 41
ACTION: avl1.delete(int1) 
int1 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10416a3b0> : <type 'instance'>
avl_REF1 = set([1, 4, 7, 15, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int2 = 15                                                               # STEP 42
ACTION: int2 = 15 
int2 = 1 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 43
ACTION: avl1.insert(int0) 
int0 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10416a3b0> : <type 'instance'>
avl_REF1 = set([1, 4, 7, 15, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.delete(int3)                                                       # STEP 44
ACTION: avl1.delete(int3) 
int3 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10416a3b0> : <type 'instance'>
avl_REF1 = set([1, 4, 7, 15, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([4, 7, 15, 17]) : <type 'set'>
==================================================
int3 = 6                                                                # STEP 45
ACTION: int3 = 6 
int3 = 1 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 46
ACTION: avl1.delete(int3) 
int3 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10416a3b0> : <type 'instance'>
avl_REF1 = set([4, 7, 15, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
result = avl1.find(int3)                                                # STEP 47
ACTION: result = avl1.find(int3) 
int3 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10416a3b0> : <type 'instance'>
avl_REF1 = set([4, 7, 15, 17]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl1.delete(int2)                                                       # STEP 48
ACTION: avl1.delete(int2) 
int2 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10416a3b0> : <type 'instance'>
avl_REF1 = set([4, 7, 15, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([4, 7, 17]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1034e7998>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 5 DISTINCT FAILURES
  17 [2:0]
-- < 12 [1:0]
---- < 10 [0:0] L
---- > 15 [0:0] L
-- > 18 [1:-1]
---- > 19 [0:0] L
set([10, 12, 15, 17, 18, 19])
  17 [3:1]
-- < 12 [2:0]
---- < 10 [1:1]
------ < 8 [0:0] L
---- > 15 [1:1]
------ < 13 [0:0] L
-- > 18 [1:-1]
---- > 19 [0:0] L
set([8, 10, 12, 13, 15, 17, 18, 19])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1034fe248>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
Original test has 76 steps

SAVING TEST AS failure.62492.test.5
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
avl1 = avl.AVLTree()                                                     # STEP 0
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x1037a98c0> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int0 = 20                                                                # STEP 1
ACTION: int0 = 20 
int0 = None : <type 'NoneType'>
=> int0 = 20 : <type 'int'>
==================================================
avl1.delete(int0)                                                        # STEP 2
ACTION: avl1.delete(int0) 
int0 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1037a98c0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.insert(int0)                                                        # STEP 3
ACTION: avl1.insert(int0) 
int0 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1037a98c0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([20]) : <type 'set'>
==================================================
avl1.delete(int0)                                                        # STEP 4
ACTION: avl1.delete(int0) 
int0 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1037a98c0> : <type 'instance'>
avl_REF1 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.insert(int0)                                                        # STEP 5
ACTION: avl1.insert(int0) 
int0 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1037a98c0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([20]) : <type 'set'>
==================================================
avl1.delete(int0)                                                        # STEP 6
ACTION: avl1.delete(int0) 
int0 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1037a98c0> : <type 'instance'>
avl_REF1 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.delete(int0)                                                        # STEP 7
ACTION: avl1.delete(int0) 
int0 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1037a98c0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
result = avl1.inorder()                                                  # STEP 8
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x1037a98c0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.delete(int0)                                                        # STEP 9
ACTION: avl1.delete(int0) 
int0 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1037a98c0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.delete(int0)                                                       # STEP 10
ACTION: avl1.delete(int0) 
int0 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1037a98c0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int2 = 12                                                               # STEP 11
ACTION: int2 = 12 
int2 = None : <type 'NoneType'>
=> int2 = 12 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 12
ACTION: avl1.insert(int0) 
int0 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1037a98c0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([20]) : <type 'set'>
==================================================
int1 = 18                                                               # STEP 13
ACTION: int1 = 18 
int1 = None : <type 'NoneType'>
=> int1 = 18 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 14
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x1037a98c0> : <type 'instance'>
avl_REF1 = set([20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int0 = 3                                                                # STEP 15
ACTION: int0 = 3 
int0 = 20 : <type 'int'>
=> int0 = 3 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 16
ACTION: avl1 = avl.AVLTree() 
avl1 = <avlbug2.AVLTree instance at 0x1037a98c0> : <type 'instance'>
avl_REF1 = set([20]) : <type 'set'>
=> avl1 = <avlbug2.AVLTree instance at 0x1034d6c20> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 17
ACTION: avl1.delete(int0) 
int0 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1034d6c20> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.delete(int0)                                                       # STEP 18
ACTION: avl1.delete(int0) 
int0 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1034d6c20> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
result = avl1.find(int2)                                                # STEP 19
ACTION: result = avl1.find(int2) 
int2 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1034d6c20> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
result = avl1.find(int2)                                                # STEP 20
ACTION: result = avl1.find(int2) 
int2 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1034d6c20> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
result = avl1.inorder()                                                 # STEP 21
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x1034d6c20> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1 == avl1                                                            # STEP 22
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x1034d6c20> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.delete(int1)                                                       # STEP 23
ACTION: avl1.delete(int1) 
int1 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1034d6c20> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
result = avl1.inorder()                                                 # STEP 24
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x1034d6c20> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.delete(int1)                                                       # STEP 25
ACTION: avl1.delete(int1) 
int1 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1034d6c20> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int0 = 10                                                               # STEP 26
ACTION: int0 = 10 
int0 = 3 : <type 'int'>
=> int0 = 10 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 27
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x1034d6c20> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int2 = 17                                                               # STEP 28
ACTION: int2 = 17 
int2 = 12 : <type 'int'>
=> int2 = 17 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 29
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x1034d6c20> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.insert(int2)                                                       # STEP 30
ACTION: avl1.insert(int2) 
int2 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1034d6c20> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([17]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 31
ACTION: avl1.insert(int0) 
int0 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1034d6c20> : <type 'instance'>
avl_REF1 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([17, 10]) : <type 'set'>
==================================================
result = avl1.find(int2)                                                # STEP 32
ACTION: result = avl1.find(int2) 
int2 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1034d6c20> : <type 'instance'>
avl_REF1 = set([17, 10]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl1.insert(int0)                                                       # STEP 33
ACTION: avl1.insert(int0) 
int0 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1034d6c20> : <type 'instance'>
avl_REF1 = set([17, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.insert(int1)                                                       # STEP 34
ACTION: avl1.insert(int1) 
int1 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1034d6c20> : <type 'instance'>
avl_REF1 = set([17, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([17, 10, 18]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 35
ACTION: avl1.insert(int0) 
int0 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1034d6c20> : <type 'instance'>
avl_REF1 = set([17, 10, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
int1 = 15                                                               # STEP 36
ACTION: int1 = 15 
int1 = 18 : <type 'int'>
=> int1 = 15 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 37
ACTION: avl1.insert(int2) 
int2 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1034d6c20> : <type 'instance'>
avl_REF1 = set([17, 10, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
int2 = 16                                                               # STEP 38
ACTION: int2 = 16 
int2 = 17 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 39
ACTION: avl1.insert(int1) 
int1 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1034d6c20> : <type 'instance'>
avl_REF1 = set([17, 10, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([17, 10, 18, 15]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 40
ACTION: avl1.delete(int0) 
int0 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1034d6c20> : <type 'instance'>
avl_REF1 = set([17, 10, 18, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([17, 18, 15]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 41
ACTION: avl1.insert(int0) 
int0 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1034d6c20> : <type 'instance'>
avl_REF1 = set([17, 18, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([17, 10, 18, 15]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 42
ACTION: avl1.insert(int1) 
int1 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1034d6c20> : <type 'instance'>
avl_REF1 = set([17, 10, 18, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl1.insert(int0)                                                       # STEP 43
ACTION: avl1.insert(int0) 
int0 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1034d6c20> : <type 'instance'>
avl_REF1 = set([17, 10, 18, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
result = avl1.find(int2)                                                # STEP 44
ACTION: result = avl1.find(int2) 
int2 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1034d6c20> : <type 'instance'>
avl_REF1 = set([17, 10, 18, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int3 = 7                                                                # STEP 45
ACTION: int3 = 7 
int3 = None : <type 'NoneType'>
=> int3 = 7 : <type 'int'>
==================================================
int2 = 19                                                               # STEP 46
ACTION: int2 = 19 
int2 = 16 : <type 'int'>
=> int2 = 19 : <type 'int'>
==================================================
int0 = 5                                                                # STEP 47
ACTION: int0 = 5 
int0 = 10 : <type 'int'>
=> int0 = 5 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 48
ACTION: avl1.delete(int2) 
int2 = 19 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1034d6c20> : <type 'instance'>
avl_REF1 = set([17, 10, 18, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
result = avl1.inorder()                                                 # STEP 49
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x1034d6c20> : <type 'instance'>
avl_REF1 = set([17, 10, 18, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int1 = 12                                                               # STEP 50
ACTION: int1 = 12 
int1 = 15 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 51
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x1034d6c20> : <type 'instance'>
avl_REF1 = set([17, 10, 18, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int2 = 19                                                               # STEP 52
ACTION: int2 = 19 
int2 = 19 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 53
ACTION: avl1.delete(int2) 
int2 = 19 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1034d6c20> : <type 'instance'>
avl_REF1 = set([17, 10, 18, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.insert(int1)                                                       # STEP 54
ACTION: avl1.insert(int1) 
int1 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1034d6c20> : <type 'instance'>
avl_REF1 = set([17, 10, 18, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([17, 10, 12, 18, 15]) : <type 'set'>
==================================================
result = avl1.find(int1)                                                # STEP 55
ACTION: result = avl1.find(int1) 
int1 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1034d6c20> : <type 'instance'>
avl_REF1 = set([17, 10, 12, 18, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
result = avl1.find(int3)                                                # STEP 56
ACTION: result = avl1.find(int3) 
int3 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1034d6c20> : <type 'instance'>
avl_REF1 = set([17, 10, 12, 18, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
int1 = 19                                                               # STEP 57
ACTION: int1 = 19 
int1 = 12 : <type 'int'>
=> int1 = 19 : <type 'int'>
==================================================
int2 = 14                                                               # STEP 58
ACTION: int2 = 14 
int2 = 19 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 59
ACTION: avl1.insert(int1) 
int1 = 19 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1034d6c20> : <type 'instance'>
avl_REF1 = set([17, 10, 12, 18, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([10, 12, 15, 17, 18, 19]) : <type 'set'>
==================================================
int1 = 13                                                               # STEP 60
ACTION: int1 = 13 
int1 = 19 : <type 'int'>
=> int1 = 13 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 61
ACTION: avl1.delete(int1) 
int1 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1034d6c20> : <type 'instance'>
avl_REF1 = set([10, 12, 15, 17, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.display()                                                          # STEP 62
ACTION: avl1.display() 
avl1 = <avlbug2.AVLTree instance at 0x1034d6c20> : <type 'instance'>
avl_REF1 = set([10, 12, 15, 17, 18, 19]) : <type 'set'>
  17 [2:0]
-- < 12 [1:0]
---- < 10 [0:0] L
---- > 15 [0:0] L
-- > 18 [1:-1]
---- > 19 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([10, 12, 15, 17, 18, 19])
==================================================
int3 = 8                                                                # STEP 63
ACTION: int3 = 8 
int3 = 7 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 64
ACTION: avl1.insert(int1) 
int1 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1034d6c20> : <type 'instance'>
avl_REF1 = set([10, 12, 15, 17, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([10, 12, 13, 15, 17, 18, 19]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 65
ACTION: avl1.delete(int2) 
int2 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1034d6c20> : <type 'instance'>
avl_REF1 = set([10, 12, 13, 15, 17, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.insert(int2)                                                       # STEP 66
ACTION: avl1.insert(int2) 
int2 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1034d6c20> : <type 'instance'>
avl_REF1 = set([10, 12, 13, 15, 17, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([10, 12, 13, 14, 15, 17, 18, 19]) : <type 'set'>
==================================================
int1 = 19                                                               # STEP 67
ACTION: int1 = 19 
int1 = 13 : <type 'int'>
=> int1 = 19 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 68
ACTION: avl1.delete(int2) 
int2 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1034d6c20> : <type 'instance'>
avl_REF1 = set([10, 12, 13, 14, 15, 17, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([10, 12, 13, 15, 17, 18, 19]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 69
ACTION: avl1.insert(int3) 
int3 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1034d6c20> : <type 'instance'>
avl_REF1 = set([10, 12, 13, 15, 17, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([8, 10, 12, 13, 15, 17, 18, 19]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 70
ACTION: avl1.delete(int2) 
int2 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1034d6c20> : <type 'instance'>
avl_REF1 = set([8, 10, 12, 13, 15, 17, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.delete(int2)                                                       # STEP 71
ACTION: avl1.delete(int2) 
int2 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1034d6c20> : <type 'instance'>
avl_REF1 = set([8, 10, 12, 13, 15, 17, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.display()                                                          # STEP 72
ACTION: avl1.display() 
avl1 = <avlbug2.AVLTree instance at 0x1034d6c20> : <type 'instance'>
avl_REF1 = set([8, 10, 12, 13, 15, 17, 18, 19]) : <type 'set'>
  17 [3:1]
-- < 12 [2:0]
---- < 10 [1:1]
------ < 8 [0:0] L
---- > 15 [1:1]
------ < 13 [0:0] L
-- > 18 [1:-1]
---- > 19 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([8, 10, 12, 13, 15, 17, 18, 19])
==================================================
int2 = 9                                                                # STEP 73
ACTION: int2 = 9 
int2 = 14 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 74
ACTION: avl1.insert(int0) 
int0 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1034d6c20> : <type 'instance'>
avl_REF1 = set([8, 10, 12, 13, 15, 17, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([5, 8, 10, 12, 13, 15, 17, 18, 19]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 75
ACTION: avl1.delete(int1) 
int1 = 19 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1034d6c20> : <type 'instance'>
avl_REF1 = set([5, 8, 10, 12, 13, 15, 17, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([5, 8, 10, 12, 13, 15, 17, 18]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1036f0ef0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 6 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 13
STOPPING TESTING DUE TO TIMEOUT
7.9802669762 PERCENT COVERED
60.1969890594 TOTAL RUNTIME
7 EXECUTED
292 TOTAL TEST OPERATIONS
15.3752579689 TIME SPENT EXECUTING TEST OPERATIONS
0.0345187187195 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
15.3310887814 TIME SPENT CHECKING PROPERTIES
30.7063467503 TOTAL TIME SPENT RUNNING SUT
0.00457549095154 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
6 FAILED
0 REPEATS OF FAILURES
6 ACTUAL DISTINCT FAILURES

FAILURE 0
int2 = 12                                                                # STEP 0
int0 = 12                                                                # STEP 1
int3 = 2                                                                 # STEP 2
int1 = 20                                                                # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
avl1.delete(int1)                                                        # STEP 5
int1 = 13                                                                # STEP 6
avl1.delete(int3)                                                        # STEP 7
avl1.insert(int0)                                                        # STEP 8
avl1 == avl1                                                             # STEP 9
int0 = 2                                                                # STEP 10
int3 = 16                                                               # STEP 11
avl1 == avl1                                                            # STEP 12
result = avl1.find(int3)                                                # STEP 13
avl1.insert(int0)                                                       # STEP 14
avl1.delete(int2)                                                       # STEP 15
avl1.delete(int2)                                                       # STEP 16
int2 = 16                                                               # STEP 17
int3 = 15                                                               # STEP 18
avl1.delete(int3)                                                       # STEP 19
avl1.delete(int0)                                                       # STEP 20
avl1.insert(int0)                                                       # STEP 21
avl1 == avl1                                                            # STEP 22
avl1.insert(int0)                                                       # STEP 23
avl1.delete(int2)                                                       # STEP 24
result = avl1.inorder()                                                 # STEP 25
avl1.delete(int2)                                                       # STEP 26
int2 = 1                                                                # STEP 27
result = avl1.inorder()                                                 # STEP 28
int3 = 14                                                               # STEP 29
avl1.insert(int1)                                                       # STEP 30
avl1.delete(int0)                                                       # STEP 31
int0 = 2                                                                # STEP 32
avl1.insert(int0)                                                       # STEP 33
avl1.insert(int1)                                                       # STEP 34
int0 = 16                                                               # STEP 35
result = avl1.find(int1)                                                # STEP 36
avl1.insert(int0)                                                       # STEP 37
int0 = 16                                                               # STEP 38
int1 = 4                                                                # STEP 39
avl1.delete(int1)                                                       # STEP 40
int1 = 9                                                                # STEP 41
avl1.insert(int0)                                                       # STEP 42
avl1.insert(int3)                                                       # STEP 43
avl1.delete(int3)                                                       # STEP 44
avl1.insert(int2)                                                       # STEP 45
avl1.delete(int0)                                                       # STEP 46
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10379aa28>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE 1
int0 = 6                                                                 # STEP 0
int3 = 14                                                                # STEP 1
int1 = 12                                                                # STEP 2
avl1 = avl.AVLTree()                                                     # STEP 3
result = avl1.find(int3)                                                 # STEP 4
avl1.delete(int0)                                                        # STEP 5
avl1.insert(int3)                                                        # STEP 6
avl0 = avl.AVLTree()                                                     # STEP 7
int0 = 15                                                                # STEP 8
result = avl0.inorder()                                                  # STEP 9
result = avl0.find(int1)                                                # STEP 10
int3 = 14                                                               # STEP 11
avl0.insert(int3)                                                       # STEP 12
avl1.delete(int3)                                                       # STEP 13
int3 = 2                                                                # STEP 14
avl0.delete(int1)                                                       # STEP 15
avl0.insert(int3)                                                       # STEP 16
avl0.insert(int1)                                                       # STEP 17
avl0.delete(int0)                                                       # STEP 18
avl1.insert(int1)                                                       # STEP 19
int1 = 7                                                                # STEP 20
avl0.delete(int1)                                                       # STEP 21
avl1.insert(int1)                                                       # STEP 22
avl1.insert(int0)                                                       # STEP 23
result = avl1.find(int1)                                                # STEP 24
result = avl0.inorder()                                                 # STEP 25
avl0.delete(int3)                                                       # STEP 26
avl1.insert(int0)                                                       # STEP 27
avl0.insert(int0)                                                       # STEP 28
avl0.insert(int0)                                                       # STEP 29
int1 = 12                                                               # STEP 30
int2 = 7                                                                # STEP 31
avl0.delete(int0)                                                       # STEP 32
result = avl0.inorder()                                                 # STEP 33
avl1.insert(int3)                                                       # STEP 34
result = avl0.find(int1)                                                # STEP 35
int1 = 5                                                                # STEP 36
result = avl0.inorder()                                                 # STEP 37
int3 = 18                                                               # STEP 38
avl0.delete(int1)                                                       # STEP 39
avl0.insert(int0)                                                       # STEP 40
result = avl0.inorder()                                                 # STEP 41
result = avl0.find(int3)                                                # STEP 42
result = avl0.inorder()                                                 # STEP 43
avl1.delete(int0)                                                       # STEP 44
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103799e60>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE 2
int0 = 11                                                                # STEP 0
int3 = 7                                                                 # STEP 1
avl1 = avl.AVLTree()                                                     # STEP 2
avl1.insert(int3)                                                        # STEP 3
avl1.insert(int3)                                                        # STEP 4
avl1.delete(int3)                                                        # STEP 5
int2 = 9                                                                 # STEP 6
avl1.insert(int0)                                                        # STEP 7
result = avl1.inorder()                                                  # STEP 8
avl1 == avl1                                                             # STEP 9
result = avl1.find(int3)                                                # STEP 10
int3 = 18                                                               # STEP 11
avl1.delete(int3)                                                       # STEP 12
avl1.delete(int2)                                                       # STEP 13
result = avl1.inorder()                                                 # STEP 14
int2 = 14                                                               # STEP 15
int0 = 8                                                                # STEP 16
int1 = 9                                                                # STEP 17
avl1.insert(int2)                                                       # STEP 18
int3 = 18                                                               # STEP 19
result = avl1.inorder()                                                 # STEP 20
avl1.insert(int3)                                                       # STEP 21
avl1.insert(int1)                                                       # STEP 22
avl1.insert(int0)                                                       # STEP 23
avl1.insert(int2)                                                       # STEP 24
avl1.insert(int2)                                                       # STEP 25
avl1.delete(int3)                                                       # STEP 26
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10414f170>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE 3
avl1 = avl.AVLTree()                                                     # STEP 0
result = avl1.inorder()                                                  # STEP 1
result = avl1.inorder()                                                  # STEP 2
int2 = 16                                                                # STEP 3
int1 = 14                                                                # STEP 4
avl1.delete(int2)                                                        # STEP 5
result = avl1.find(int2)                                                 # STEP 6
avl1.insert(int2)                                                        # STEP 7
avl1.insert(int1)                                                        # STEP 8
avl1.delete(int1)                                                        # STEP 9
result = avl1.inorder()                                                 # STEP 10
avl1.insert(int2)                                                       # STEP 11
avl1.insert(int2)                                                       # STEP 12
avl1.delete(int1)                                                       # STEP 13
avl1.insert(int1)                                                       # STEP 14
avl1.insert(int1)                                                       # STEP 15
avl1.insert(int1)                                                       # STEP 16
avl1.delete(int1)                                                       # STEP 17
avl1.insert(int1)                                                       # STEP 18
int2 = 12                                                               # STEP 19
avl1.delete(int1)                                                       # STEP 20
int3 = 20                                                               # STEP 21
avl1.insert(int1)                                                       # STEP 22
int0 = 17                                                               # STEP 23
avl1.insert(int2)                                                       # STEP 24
result = avl1.find(int3)                                                # STEP 25
avl1.delete(int0)                                                       # STEP 26
avl1.delete(int3)                                                       # STEP 27
int2 = 12                                                               # STEP 28
avl1.delete(int3)                                                       # STEP 29
avl1.insert(int2)                                                       # STEP 30
result = avl1.inorder()                                                 # STEP 31
avl1.insert(int3)                                                       # STEP 32
avl1.insert(int1)                                                       # STEP 33
avl1.delete(int2)                                                       # STEP 34
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10414c3b0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE 4
int3 = 20                                                                # STEP 0
int0 = 15                                                                # STEP 1
avl1 = avl.AVLTree()                                                     # STEP 2
int1 = 17                                                                # STEP 3
avl1.insert(int1)                                                        # STEP 4
int2 = 14                                                                # STEP 5
result = avl1.find(int3)                                                 # STEP 6
avl1.insert(int2)                                                        # STEP 7
result = avl1.find(int0)                                                 # STEP 8
int3 = 14                                                                # STEP 9
avl1.delete(int1)                                                       # STEP 10
avl1.delete(int0)                                                       # STEP 11
avl1.insert(int0)                                                       # STEP 12
avl1.insert(int2)                                                       # STEP 13
avl1.delete(int1)                                                       # STEP 14
avl1.insert(int1)                                                       # STEP 15
int0 = 7                                                                # STEP 16
avl1.insert(int2)                                                       # STEP 17
result = avl1.inorder()                                                 # STEP 18
avl1.delete(int0)                                                       # STEP 19
result = avl1.find(int2)                                                # STEP 20
int1 = 14                                                               # STEP 21
avl1.insert(int3)                                                       # STEP 22
avl1.delete(int2)                                                       # STEP 23
avl1.delete(int3)                                                       # STEP 24
result = avl1.inorder()                                                 # STEP 25
avl1.insert(int2)                                                       # STEP 26
avl1.delete(int2)                                                       # STEP 27
result = avl1.find(int2)                                                # STEP 28
int3 = 4                                                                # STEP 29
avl1.insert(int0)                                                       # STEP 30
avl1.insert(int3)                                                       # STEP 31
avl1.delete(int2)                                                       # STEP 32
avl1.insert(int3)                                                       # STEP 33
avl1.delete(int1)                                                       # STEP 34
avl1.delete(int2)                                                       # STEP 35
result = avl1.find(int1)                                                # STEP 36
avl1.delete(int1)                                                       # STEP 37
int3 = 1                                                                # STEP 38
int2 = 1                                                                # STEP 39
avl1.insert(int2)                                                       # STEP 40
avl1.delete(int1)                                                       # STEP 41
int2 = 15                                                               # STEP 42
avl1.insert(int0)                                                       # STEP 43
avl1.delete(int3)                                                       # STEP 44
int3 = 6                                                                # STEP 45
avl1.delete(int3)                                                       # STEP 46
result = avl1.find(int3)                                                # STEP 47
avl1.delete(int2)                                                       # STEP 48
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1034e7998>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE 5
avl1 = avl.AVLTree()                                                     # STEP 0
int0 = 20                                                                # STEP 1
avl1.delete(int0)                                                        # STEP 2
avl1.insert(int0)                                                        # STEP 3
avl1.delete(int0)                                                        # STEP 4
avl1.insert(int0)                                                        # STEP 5
avl1.delete(int0)                                                        # STEP 6
avl1.delete(int0)                                                        # STEP 7
result = avl1.inorder()                                                  # STEP 8
avl1.delete(int0)                                                        # STEP 9
avl1.delete(int0)                                                       # STEP 10
int2 = 12                                                               # STEP 11
avl1.insert(int0)                                                       # STEP 12
int1 = 18                                                               # STEP 13
result = avl1.inorder()                                                 # STEP 14
int0 = 3                                                                # STEP 15
avl1 = avl.AVLTree()                                                    # STEP 16
avl1.delete(int0)                                                       # STEP 17
avl1.delete(int0)                                                       # STEP 18
result = avl1.find(int2)                                                # STEP 19
result = avl1.find(int2)                                                # STEP 20
result = avl1.inorder()                                                 # STEP 21
avl1 == avl1                                                            # STEP 22
avl1.delete(int1)                                                       # STEP 23
result = avl1.inorder()                                                 # STEP 24
avl1.delete(int1)                                                       # STEP 25
int0 = 10                                                               # STEP 26
result = avl1.inorder()                                                 # STEP 27
int2 = 17                                                               # STEP 28
avl1 == avl1                                                            # STEP 29
avl1.insert(int2)                                                       # STEP 30
avl1.insert(int0)                                                       # STEP 31
result = avl1.find(int2)                                                # STEP 32
avl1.insert(int0)                                                       # STEP 33
avl1.insert(int1)                                                       # STEP 34
avl1.insert(int0)                                                       # STEP 35
int1 = 15                                                               # STEP 36
avl1.insert(int2)                                                       # STEP 37
int2 = 16                                                               # STEP 38
avl1.insert(int1)                                                       # STEP 39
avl1.delete(int0)                                                       # STEP 40
avl1.insert(int0)                                                       # STEP 41
avl1.insert(int1)                                                       # STEP 42
avl1.insert(int0)                                                       # STEP 43
result = avl1.find(int2)                                                # STEP 44
int3 = 7                                                                # STEP 45
int2 = 19                                                               # STEP 46
int0 = 5                                                                # STEP 47
avl1.delete(int2)                                                       # STEP 48
result = avl1.inorder()                                                 # STEP 49
int1 = 12                                                               # STEP 50
result = avl1.inorder()                                                 # STEP 51
int2 = 19                                                               # STEP 52
avl1.delete(int2)                                                       # STEP 53
avl1.insert(int1)                                                       # STEP 54
result = avl1.find(int1)                                                # STEP 55
result = avl1.find(int3)                                                # STEP 56
int1 = 19                                                               # STEP 57
int2 = 14                                                               # STEP 58
avl1.insert(int1)                                                       # STEP 59
int1 = 13                                                               # STEP 60
avl1.delete(int1)                                                       # STEP 61
avl1.display()                                                          # STEP 62
int3 = 8                                                                # STEP 63
avl1.insert(int1)                                                       # STEP 64
avl1.delete(int2)                                                       # STEP 65
avl1.insert(int2)                                                       # STEP 66
int1 = 19                                                               # STEP 67
avl1.delete(int2)                                                       # STEP 68
avl1.insert(int3)                                                       # STEP 69
avl1.delete(int2)                                                       # STEP 70
avl1.delete(int2)                                                       # STEP 71
avl1.display()                                                          # STEP 72
int2 = 9                                                                # STEP 73
avl1.insert(int0)                                                       # STEP 74
avl1.delete(int1)                                                       # STEP 75
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1036f0ef0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
206 BRANCHES COVERED
156 STATEMENTS COVERED

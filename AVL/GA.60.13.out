Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.13883.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
TEST #4 STEP #11 (0:00:30.035308) Sun Apr 30 02:47:48 2017 [ 129 stmts 173 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103e455f0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
Original test has 53 steps

SAVING TEST AS failure.13883.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 11                                                                # STEP 0
ACTION: int2 = 11 
int2 = None : <type 'NoneType'>
=> int2 = 11 : <type 'int'>
==================================================
int0 = 19                                                                # STEP 1
ACTION: int0 = 19 
int0 = None : <type 'NoneType'>
=> int0 = 19 : <type 'int'>
==================================================
int3 = 6                                                                 # STEP 2
ACTION: int3 = 6 
int3 = None : <type 'NoneType'>
=> int3 = 6 : <type 'int'>
==================================================
int1 = 11                                                                # STEP 3
ACTION: int1 = 11 
int1 = None : <type 'NoneType'>
=> int1 = 11 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 4
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x103ccc0e0> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
result = avl0.find(int3)                                                 # STEP 5
ACTION: result = avl0.find(int3) 
int3 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103ccc0e0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
avl0.delete(int0)                                                        # STEP 6
ACTION: avl0.delete(int0) 
int0 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103ccc0e0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int3 = 11                                                                # STEP 7
ACTION: int3 = 11 
int3 = 6 : <type 'int'>
=> int3 = 11 : <type 'int'>
==================================================
int0 = 5                                                                 # STEP 8
ACTION: int0 = 5 
int0 = 19 : <type 'int'>
=> int0 = 5 : <type 'int'>
==================================================
result = avl0.inorder()                                                  # STEP 9
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x103ccc0e0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int0)                                                       # STEP 10
ACTION: avl0.insert(int0) 
int0 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103ccc0e0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([5]) : <type 'set'>
==================================================
result = avl0.find(int0)                                                # STEP 11
ACTION: result = avl0.find(int0) 
int0 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103ccc0e0> : <type 'instance'>
avl_REF0 = set([5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
int0 = 1                                                                # STEP 12
ACTION: int0 = 1 
int0 = 5 : <type 'int'>
=> int0 = 1 : <type 'int'>
==================================================
result = avl0.find(int2)                                                # STEP 13
ACTION: result = avl0.find(int2) 
int2 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103ccc0e0> : <type 'instance'>
avl_REF0 = set([5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
int2 = 18                                                               # STEP 14
ACTION: int2 = 18 
int2 = 11 : <type 'int'>
=> int2 = 18 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 15
ACTION: avl0.insert(int0) 
int0 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103ccc0e0> : <type 'instance'>
avl_REF0 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([1, 5]) : <type 'set'>
==================================================
int0 = 14                                                               # STEP 16
ACTION: int0 = 14 
int0 = 1 : <type 'int'>
=> int0 = 14 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 17
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x103cdc290> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 18
ACTION: avl0.delete(int2) 
int2 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103ccc0e0> : <type 'instance'>
avl_REF0 = set([1, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int2 = 3                                                                # STEP 19
ACTION: int2 = 3 
int2 = 18 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 20
ACTION: avl1.insert(int2) 
int2 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103cdc290> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([3]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 21
ACTION: avl0.insert(int2) 
int2 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103ccc0e0> : <type 'instance'>
avl_REF0 = set([1, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([1, 3, 5]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 22
ACTION: avl0.delete(int2) 
int2 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103ccc0e0> : <type 'instance'>
avl_REF0 = set([1, 3, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([1, 5]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 23
ACTION: avl1.delete(int3) 
int3 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103cdc290> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int2 = 13                                                               # STEP 24
ACTION: int2 = 13 
int2 = 3 : <type 'int'>
=> int2 = 13 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 25
ACTION: avl1.delete(int3) 
int3 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103cdc290> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
result = avl1.find(int3)                                                # STEP 26
ACTION: result = avl1.find(int3) 
int3 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103cdc290> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl0 == avl1                                                            # STEP 27
ACTION: avl0 == avl1 
avl0 = <avlbug2.AVLTree instance at 0x103ccc0e0> : <type 'instance'>
avl1 = <avlbug2.AVLTree instance at 0x103cdc290> : <type 'instance'>
avl_REF0 = set([1, 5]) : <type 'set'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF1 
==================================================
int3 = 11                                                               # STEP 28
ACTION: int3 = 11 
int3 = 11 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 29
ACTION: avl0.delete(int2) 
int2 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103ccc0e0> : <type 'instance'>
avl_REF0 = set([1, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int2 = 5                                                                # STEP 30
ACTION: int2 = 5 
int2 = 13 : <type 'int'>
=> int2 = 5 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 31
ACTION: avl1.delete(int3) 
int3 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103cdc290> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
result = avl1.find(int0)                                                # STEP 32
ACTION: result = avl1.find(int0) 
int0 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103cdc290> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl1.insert(int3)                                                       # STEP 33
ACTION: avl1.insert(int3) 
int3 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103cdc290> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([11, 3]) : <type 'set'>
==================================================
avl1 == avl0                                                            # STEP 34
ACTION: avl1 == avl0 
avl1 = <avlbug2.AVLTree instance at 0x103cdc290> : <type 'instance'>
avl0 = <avlbug2.AVLTree instance at 0x103ccc0e0> : <type 'instance'>
avl_REF1 = set([11, 3]) : <type 'set'>
avl_REF0 = set([1, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
avl0.delete(int1)                                                       # STEP 35
ACTION: avl0.delete(int1) 
int1 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103ccc0e0> : <type 'instance'>
avl_REF0 = set([1, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int3 = 5                                                                # STEP 36
ACTION: int3 = 5 
int3 = 11 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
int0 = 12                                                               # STEP 37
ACTION: int0 = 12 
int0 = 14 : <type 'int'>
=> int0 = 12 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 38
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x103a61098> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl2.find(int3)                                                # STEP 39
ACTION: result = avl2.find(int3) 
int3 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103a61098> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl1.delete(int1)                                                       # STEP 40
ACTION: avl1.delete(int1) 
int1 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103cdc290> : <type 'instance'>
avl_REF1 = set([11, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([3]) : <type 'set'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 41
ACTION: avl0 = avl.AVLTree() 
avl0 = <avlbug2.AVLTree instance at 0x103ccc0e0> : <type 'instance'>
avl_REF0 = set([1, 5]) : <type 'set'>
=> avl0 = <avlbug2.AVLTree instance at 0x103a61878> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 42
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x103cdc290> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
result = avl1.find(int0)                                                # STEP 43
ACTION: result = avl1.find(int0) 
int0 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103cdc290> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
int1 = 20                                                               # STEP 44
ACTION: int1 = 20 
int1 = 11 : <type 'int'>
=> int1 = 20 : <type 'int'>
==================================================
result = avl0.find(int0)                                                # STEP 45
ACTION: result = avl0.find(int0) 
int0 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103a61878> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
avl1.insert(int3)                                                       # STEP 46
ACTION: avl1.insert(int3) 
int3 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103cdc290> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([3, 5]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 47
ACTION: avl2.delete(int0) 
int0 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103a61098> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int0 = 4                                                                # STEP 48
ACTION: int0 = 4 
int0 = 12 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
int3 = 5                                                                # STEP 49
ACTION: int3 = 5 
int3 = 5 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 50
ACTION: avl1.insert(int1) 
int1 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103cdc290> : <type 'instance'>
avl_REF1 = set([3, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([3, 20, 5]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 51
ACTION: avl1.insert(int0) 
int0 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103cdc290> : <type 'instance'>
avl_REF1 = set([3, 20, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([4, 3, 20, 5]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 52
ACTION: avl1.delete(int1) 
int1 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103cdc290> : <type 'instance'>
avl_REF1 = set([4, 3, 20, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([4, 3, 5]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103a69128>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 15
STOPPING TESTING DUE TO TIMEOUT
8.04369414101 PERCENT COVERED
60.2669420242 TOTAL RUNTIME
7 EXECUTED
568 TOTAL TEST OPERATIONS
27.1005828381 TIME SPENT EXECUTING TEST OPERATIONS
0.021303653717 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
27.3105340004 TIME SPENT CHECKING PROPERTIES
54.4111168385 TOTAL TIME SPENT RUNNING SUT
0.00497817993164 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int2 = 11                                                                # STEP 0
int0 = 19                                                                # STEP 1
int3 = 6                                                                 # STEP 2
int1 = 11                                                                # STEP 3
avl0 = avl.AVLTree()                                                     # STEP 4
result = avl0.find(int3)                                                 # STEP 5
avl0.delete(int0)                                                        # STEP 6
int3 = 11                                                                # STEP 7
int0 = 5                                                                 # STEP 8
result = avl0.inorder()                                                  # STEP 9
avl0.insert(int0)                                                       # STEP 10
result = avl0.find(int0)                                                # STEP 11
int0 = 1                                                                # STEP 12
result = avl0.find(int2)                                                # STEP 13
int2 = 18                                                               # STEP 14
avl0.insert(int0)                                                       # STEP 15
int0 = 14                                                               # STEP 16
avl1 = avl.AVLTree()                                                    # STEP 17
avl0.delete(int2)                                                       # STEP 18
int2 = 3                                                                # STEP 19
avl1.insert(int2)                                                       # STEP 20
avl0.insert(int2)                                                       # STEP 21
avl0.delete(int2)                                                       # STEP 22
avl1.delete(int3)                                                       # STEP 23
int2 = 13                                                               # STEP 24
avl1.delete(int3)                                                       # STEP 25
result = avl1.find(int3)                                                # STEP 26
avl0 == avl1                                                            # STEP 27
int3 = 11                                                               # STEP 28
avl0.delete(int2)                                                       # STEP 29
int2 = 5                                                                # STEP 30
avl1.delete(int3)                                                       # STEP 31
result = avl1.find(int0)                                                # STEP 32
avl1.insert(int3)                                                       # STEP 33
avl1 == avl0                                                            # STEP 34
avl0.delete(int1)                                                       # STEP 35
int3 = 5                                                                # STEP 36
int0 = 12                                                               # STEP 37
avl2 = avl.AVLTree()                                                    # STEP 38
result = avl2.find(int3)                                                # STEP 39
avl1.delete(int1)                                                       # STEP 40
avl0 = avl.AVLTree()                                                    # STEP 41
result = avl1.inorder()                                                 # STEP 42
result = avl1.find(int0)                                                # STEP 43
int1 = 20                                                               # STEP 44
result = avl0.find(int0)                                                # STEP 45
avl1.insert(int3)                                                       # STEP 46
avl2.delete(int0)                                                       # STEP 47
int0 = 4                                                                # STEP 48
int3 = 5                                                                # STEP 49
avl1.insert(int1)                                                       # STEP 50
avl1.insert(int0)                                                       # STEP 51
avl1.delete(int1)                                                       # STEP 52
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103a69128>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
200 BRANCHES COVERED
150 STATEMENTS COVERED

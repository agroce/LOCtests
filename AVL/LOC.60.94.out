Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.1023.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103d9bcb0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 26 steps

SAVING TEST AS failure.1023.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 11                                                                # STEP 0
ACTION: int1 = 11 
int1 = None : <type 'NoneType'>
=> int1 = 11 : <type 'int'>
==================================================
int3 = 2                                                                 # STEP 1
ACTION: int3 = 2 
int3 = None : <type 'NoneType'>
=> int3 = 2 : <type 'int'>
==================================================
int0 = 13                                                                # STEP 2
ACTION: int0 = 13 
int0 = None : <type 'NoneType'>
=> int0 = 13 : <type 'int'>
==================================================
int2 = 6                                                                 # STEP 3
ACTION: int2 = 6 
int2 = None : <type 'NoneType'>
=> int2 = 6 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x103a4b0e0> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int2)                                                        # STEP 5
ACTION: avl2.insert(int2) 
int2 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a4b0e0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([6]) : <type 'set'>
==================================================
int2 = 5                                                                 # STEP 6
ACTION: int2 = 5 
int2 = 6 : <type 'int'>
=> int2 = 5 : <type 'int'>
==================================================
avl2.delete(int1)                                                        # STEP 7
ACTION: avl2.delete(int1) 
int1 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a4b0e0> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int2)                                                        # STEP 8
ACTION: avl2.insert(int2) 
int2 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a4b0e0> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([5, 6]) : <type 'set'>
==================================================
avl2.delete(int2)                                                        # STEP 9
ACTION: avl2.delete(int2) 
int2 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a4b0e0> : <type 'instance'>
avl_REF2 = set([5, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([6]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 10
ACTION: avl2.delete(int1) 
int1 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a4b0e0> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
result = avl2.inorder()                                                 # STEP 11
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x103a4b0e0> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2 == avl2                                                            # STEP 12
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x103a4b0e0> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
result = avl2.inorder()                                                 # STEP 13
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x103a4b0e0> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int0)                                                       # STEP 14
ACTION: avl2.delete(int0) 
int0 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a4b0e0> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.insert(int0)                                                       # STEP 15
ACTION: avl2.insert(int0) 
int0 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a4b0e0> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([13, 6]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 16
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x103a4b0e0> : <type 'instance'>
avl_REF2 = set([13, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl2.find(int1)                                                # STEP 17
ACTION: result = avl2.find(int1) 
int1 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a4b0e0> : <type 'instance'>
avl_REF2 = set([13, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl2.insert(int1)                                                       # STEP 18
ACTION: avl2.insert(int1) 
int1 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a4b0e0> : <type 'instance'>
avl_REF2 = set([13, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([11, 13, 6]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 19
ACTION: avl2.insert(int1) 
int1 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a4b0e0> : <type 'instance'>
avl_REF2 = set([11, 13, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
result = avl2.inorder()                                                 # STEP 20
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x103a4b0e0> : <type 'instance'>
avl_REF2 = set([11, 13, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int3)                                                       # STEP 21
ACTION: avl2.delete(int3) 
int3 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a4b0e0> : <type 'instance'>
avl_REF2 = set([11, 13, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.insert(int3)                                                       # STEP 22
ACTION: avl2.insert(int3) 
int3 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a4b0e0> : <type 'instance'>
avl_REF2 = set([11, 13, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([2, 11, 13, 6]) : <type 'set'>
==================================================
int2 = 15                                                               # STEP 23
ACTION: int2 = 15 
int2 = 5 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
int3 = 5                                                                # STEP 24
ACTION: int3 = 5 
int3 = 2 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 25
ACTION: avl2.delete(int1) 
int1 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a4b0e0> : <type 'instance'>
avl_REF2 = set([2, 11, 13, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([2, 13, 6]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10591eb90>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10598c320>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 21 steps

SAVING TEST AS failure.1023.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 10                                                                # STEP 0
ACTION: int0 = 10 
int0 = None : <type 'NoneType'>
=> int0 = 10 : <type 'int'>
==================================================
int3 = 8                                                                 # STEP 1
ACTION: int3 = 8 
int3 = None : <type 'NoneType'>
=> int3 = 8 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 2
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x10598c680> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.delete(int0)                                                        # STEP 3
ACTION: avl1.delete(int0) 
int0 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10598c680> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.insert(int3)                                                        # STEP 4
ACTION: avl1.insert(int3) 
int3 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10598c680> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([8]) : <type 'set'>
==================================================
avl1.delete(int0)                                                        # STEP 5
ACTION: avl1.delete(int0) 
int0 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10598c680> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int3 = 5                                                                 # STEP 6
ACTION: int3 = 5 
int3 = 8 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
avl1.insert(int3)                                                        # STEP 7
ACTION: avl1.insert(int3) 
int3 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10598c680> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([8, 5]) : <type 'set'>
==================================================
result = avl1.inorder()                                                  # STEP 8
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x10598c680> : <type 'instance'>
avl_REF1 = set([8, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int3)                                                        # STEP 9
ACTION: avl1.insert(int3) 
int3 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10598c680> : <type 'instance'>
avl_REF1 = set([8, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
int2 = 12                                                               # STEP 10
ACTION: int2 = 12 
int2 = None : <type 'NoneType'>
=> int2 = 12 : <type 'int'>
==================================================
result = avl1.find(int3)                                                # STEP 11
ACTION: result = avl1.find(int3) 
int3 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10598c680> : <type 'instance'>
avl_REF1 = set([8, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
result = avl1.inorder()                                                 # STEP 12
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x10598c680> : <type 'instance'>
avl_REF1 = set([8, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int2)                                                       # STEP 13
ACTION: avl1.insert(int2) 
int2 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10598c680> : <type 'instance'>
avl_REF1 = set([8, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([8, 12, 5]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 14
ACTION: avl1.insert(int0) 
int0 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10598c680> : <type 'instance'>
avl_REF1 = set([8, 12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([8, 10, 12, 5]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 15
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x10598c680> : <type 'instance'>
avl_REF1 = set([8, 10, 12, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int3)                                                       # STEP 16
ACTION: avl1.insert(int3) 
int3 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10598c680> : <type 'instance'>
avl_REF1 = set([8, 10, 12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
result = avl1.inorder()                                                 # STEP 17
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x10598c680> : <type 'instance'>
avl_REF1 = set([8, 10, 12, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int0)                                                       # STEP 18
ACTION: avl1.insert(int0) 
int0 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10598c680> : <type 'instance'>
avl_REF1 = set([8, 10, 12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.insert(int0)                                                       # STEP 19
ACTION: avl1.insert(int0) 
int0 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10598c680> : <type 'instance'>
avl_REF1 = set([8, 10, 12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.delete(int3)                                                       # STEP 20
ACTION: avl1.delete(int3) 
int3 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10598c680> : <type 'instance'>
avl_REF1 = set([8, 10, 12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([8, 10, 12]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1059bfef0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103d7c3f8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
Original test has 65 steps

SAVING TEST AS failure.1023.test.2
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
avl0 = avl.AVLTree()                                                     # STEP 0
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x1059a3b90> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int1 = 6                                                                 # STEP 1
ACTION: int1 = 6 
int1 = None : <type 'NoneType'>
=> int1 = 6 : <type 'int'>
==================================================
avl0.insert(int1)                                                        # STEP 2
ACTION: avl0.insert(int1) 
int1 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059a3b90> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([6]) : <type 'set'>
==================================================
result = avl0.inorder()                                                  # STEP 3
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x1059a3b90> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int1 = 10                                                                # STEP 4
ACTION: int1 = 10 
int1 = 6 : <type 'int'>
=> int1 = 10 : <type 'int'>
==================================================
int2 = 16                                                                # STEP 5
ACTION: int2 = 16 
int2 = None : <type 'NoneType'>
=> int2 = 16 : <type 'int'>
==================================================
avl0.insert(int1)                                                        # STEP 6
ACTION: avl0.insert(int1) 
int1 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059a3b90> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([10, 6]) : <type 'set'>
==================================================
avl0.delete(int2)                                                        # STEP 7
ACTION: avl0.delete(int2) 
int2 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059a3b90> : <type 'instance'>
avl_REF0 = set([10, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
result = avl0.inorder()                                                  # STEP 8
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x1059a3b90> : <type 'instance'>
avl_REF0 = set([10, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int1)                                                        # STEP 9
ACTION: avl0.insert(int1) 
int1 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059a3b90> : <type 'instance'>
avl_REF0 = set([10, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl0.delete(int2)                                                       # STEP 10
ACTION: avl0.delete(int2) 
int2 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059a3b90> : <type 'instance'>
avl_REF0 = set([10, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.delete(int2)                                                       # STEP 11
ACTION: avl0.delete(int2) 
int2 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059a3b90> : <type 'instance'>
avl_REF0 = set([10, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.delete(int2)                                                       # STEP 12
ACTION: avl0.delete(int2) 
int2 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059a3b90> : <type 'instance'>
avl_REF0 = set([10, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.delete(int1)                                                       # STEP 13
ACTION: avl0.delete(int1) 
int1 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059a3b90> : <type 'instance'>
avl_REF0 = set([10, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([6]) : <type 'set'>
==================================================
int2 = 7                                                                # STEP 14
ACTION: int2 = 7 
int2 = 16 : <type 'int'>
=> int2 = 7 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 15
ACTION: avl0.delete(int2) 
int2 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059a3b90> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.delete(int2)                                                       # STEP 16
ACTION: avl0.delete(int2) 
int2 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059a3b90> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.delete(int1)                                                       # STEP 17
ACTION: avl0.delete(int1) 
int1 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059a3b90> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.delete(int1)                                                       # STEP 18
ACTION: avl0.delete(int1) 
int1 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059a3b90> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.insert(int2)                                                       # STEP 19
ACTION: avl0.insert(int2) 
int2 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059a3b90> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([6, 7]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 20
ACTION: avl0.insert(int1) 
int1 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059a3b90> : <type 'instance'>
avl_REF0 = set([6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([10, 6, 7]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 21
ACTION: avl0.insert(int1) 
int1 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059a3b90> : <type 'instance'>
avl_REF0 = set([10, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl0.delete(int1)                                                       # STEP 22
ACTION: avl0.delete(int1) 
int1 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059a3b90> : <type 'instance'>
avl_REF0 = set([10, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([6, 7]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 23
ACTION: avl0.delete(int2) 
int2 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059a3b90> : <type 'instance'>
avl_REF0 = set([6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([6]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 24
ACTION: avl0.insert(int1) 
int1 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059a3b90> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([10, 6]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 25
ACTION: avl0.delete(int1) 
int1 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059a3b90> : <type 'instance'>
avl_REF0 = set([10, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([6]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 26
ACTION: avl0.insert(int1) 
int1 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059a3b90> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([10, 6]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 27
ACTION: avl0.insert(int1) 
int1 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059a3b90> : <type 'instance'>
avl_REF0 = set([10, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
int1 = 12                                                               # STEP 28
ACTION: int1 = 12 
int1 = 10 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 29
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x1059a3b90> : <type 'instance'>
avl_REF0 = set([10, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.delete(int2)                                                       # STEP 30
ACTION: avl0.delete(int2) 
int2 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059a3b90> : <type 'instance'>
avl_REF0 = set([10, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.delete(int2)                                                       # STEP 31
ACTION: avl0.delete(int2) 
int2 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059a3b90> : <type 'instance'>
avl_REF0 = set([10, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.insert(int1)                                                       # STEP 32
ACTION: avl0.insert(int1) 
int1 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059a3b90> : <type 'instance'>
avl_REF0 = set([10, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([10, 12, 6]) : <type 'set'>
==================================================
result = avl0.find(int2)                                                # STEP 33
ACTION: result = avl0.find(int2) 
int2 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059a3b90> : <type 'instance'>
avl_REF0 = set([10, 12, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl0.insert(int1)                                                       # STEP 34
ACTION: avl0.insert(int1) 
int1 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059a3b90> : <type 'instance'>
avl_REF0 = set([10, 12, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl0.delete(int1)                                                       # STEP 35
ACTION: avl0.delete(int1) 
int1 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059a3b90> : <type 'instance'>
avl_REF0 = set([10, 12, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([10, 6]) : <type 'set'>
==================================================
result = avl0.find(int1)                                                # STEP 36
ACTION: result = avl0.find(int1) 
int1 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059a3b90> : <type 'instance'>
avl_REF0 = set([10, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl0.delete(int1)                                                       # STEP 37
ACTION: avl0.delete(int1) 
int1 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059a3b90> : <type 'instance'>
avl_REF0 = set([10, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.delete(int2)                                                       # STEP 38
ACTION: avl0.delete(int2) 
int2 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059a3b90> : <type 'instance'>
avl_REF0 = set([10, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int0 = 6                                                                # STEP 39
ACTION: int0 = 6 
int0 = None : <type 'NoneType'>
=> int0 = 6 : <type 'int'>
==================================================
result = avl0.find(int0)                                                # STEP 40
ACTION: result = avl0.find(int0) 
int0 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059a3b90> : <type 'instance'>
avl_REF0 = set([10, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
int3 = 11                                                               # STEP 41
ACTION: int3 = 11 
int3 = None : <type 'NoneType'>
=> int3 = 11 : <type 'int'>
==================================================
int0 = 4                                                                # STEP 42
ACTION: int0 = 4 
int0 = 6 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
int1 = 18                                                               # STEP 43
ACTION: int1 = 18 
int1 = 12 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 44
ACTION: avl0.insert(int2) 
int2 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059a3b90> : <type 'instance'>
avl_REF0 = set([10, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([10, 6, 7]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 45
ACTION: avl0.delete(int1) 
int1 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059a3b90> : <type 'instance'>
avl_REF0 = set([10, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.delete(int0)                                                       # STEP 46
ACTION: avl0.delete(int0) 
int0 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059a3b90> : <type 'instance'>
avl_REF0 = set([10, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0 == avl0                                                            # STEP 47
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x1059a3b90> : <type 'instance'>
avl_REF0 = set([10, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
result = avl0.inorder()                                                 # STEP 48
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x1059a3b90> : <type 'instance'>
avl_REF0 = set([10, 6, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.delete(int3)                                                       # STEP 49
ACTION: avl0.delete(int3) 
int3 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059a3b90> : <type 'instance'>
avl_REF0 = set([10, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.delete(int2)                                                       # STEP 50
ACTION: avl0.delete(int2) 
int2 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059a3b90> : <type 'instance'>
avl_REF0 = set([10, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([10, 6]) : <type 'set'>
==================================================
avl0 == avl0                                                            # STEP 51
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x1059a3b90> : <type 'instance'>
avl_REF0 = set([10, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
int3 = 17                                                               # STEP 52
ACTION: int3 = 17 
int3 = 11 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 53
ACTION: avl0.delete(int1) 
int1 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059a3b90> : <type 'instance'>
avl_REF0 = set([10, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int0 = 10                                                               # STEP 54
ACTION: int0 = 10 
int0 = 4 : <type 'int'>
=> int0 = 10 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 55
ACTION: avl0.insert(int3) 
int3 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059a3b90> : <type 'instance'>
avl_REF0 = set([10, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([17, 10, 6]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 56
ACTION: avl0.delete(int2) 
int2 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059a3b90> : <type 'instance'>
avl_REF0 = set([17, 10, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.insert(int0)                                                       # STEP 57
ACTION: avl0.insert(int0) 
int0 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059a3b90> : <type 'instance'>
avl_REF0 = set([17, 10, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
avl0.insert(int1)                                                       # STEP 58
ACTION: avl0.insert(int1) 
int1 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059a3b90> : <type 'instance'>
avl_REF0 = set([17, 10, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([6, 10, 17, 18]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 59
ACTION: avl0.insert(int2) 
int2 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059a3b90> : <type 'instance'>
avl_REF0 = set([6, 10, 17, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([6, 7, 10, 17, 18]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 60
ACTION: avl0.delete(int0) 
int0 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059a3b90> : <type 'instance'>
avl_REF0 = set([6, 7, 10, 17, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([6, 7, 17, 18]) : <type 'set'>
==================================================
int0 = 18                                                               # STEP 61
ACTION: int0 = 18 
int0 = 10 : <type 'int'>
=> int0 = 18 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 62
ACTION: avl0.insert(int3) 
int3 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059a3b90> : <type 'instance'>
avl_REF0 = set([6, 7, 17, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
avl0 == avl0                                                            # STEP 63
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x1059a3b90> : <type 'instance'>
avl_REF0 = set([6, 7, 17, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl0.delete(int3)                                                       # STEP 64
ACTION: avl0.delete(int3) 
int3 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059a3b90> : <type 'instance'>
avl_REF0 = set([6, 7, 17, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([6, 7, 18]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105a135f0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 3 DISTINCT FAILURES
  9 [2:0]
-- < 1 [1:-1]
---- > 7 [0:0] L
-- > 19 [1:0]
---- < 10 [0:0] L
---- > 20 [0:0] L
set([1, 7, 9, 10, 19, 20])
  9 [2:0]
-- < 1 [1:-1]
---- > 7 [0:0] L
-- > 19 [1:0]
---- < 10 [0:0] L
---- > 20 [0:0] L
set([1, 7, 9, 10, 19, 20])
  9 [2:0]
-- < 6 [1:0]
---- < 1 [0:0] L
---- > 7 [0:0] L
-- > 19 [1:0]
---- < 10 [0:0] L
---- > 20 [0:0] L
set([1, 6, 7, 9, 10, 19, 20])
  9 [2:0]
-- < 6 [1:0]
---- < 1 [0:0] L
---- > 7 [0:0] L
-- > 19 [1:0]
---- < 10 [0:0] L
---- > 20 [0:0] L
set([1, 6, 7, 9, 10, 19, 20])
TEST #5 STEP #13 (0:00:30.013697) Fri Apr 28 07:58:17 2017 [ 162 stmts 215 branches ]
  12 [2:0]
-- < 9 [1:0]
---- < 1 [0:0] L
---- > 10 [0:0] L
-- > 15 [1:0]
---- < 13 [0:0] L
---- > 20 [0:0] L
set([1, 9, 10, 12, 13, 15, 20])
  12 [3:-1]
-- < 9 [1:0]
---- < 1 [0:0] L
---- > 10 [0:0] L
-- > 15 [2:-1]
---- < 13 [0:0] L
---- > 20 [1:1]
------ < 17 [0:0] L
set([1, 9, 10, 12, 13, 15, 17, 20])
  12 [3:-1]
-- < 9 [1:0]
---- < 1 [0:0] L
---- > 10 [0:0] L
-- > 15 [2:-1]
---- < 13 [0:0] L
---- > 20 [1:1]
------ < 17 [0:0] L
set([1, 9, 10, 12, 13, 15, 17, 20])
  12 [3:-1]
-- < 9 [1:0]
---- < 1 [0:0] L
---- > 10 [0:0] L
-- > 15 [2:-1]
---- < 13 [0:0] L
---- > 20 [1:1]
------ < 17 [0:0] L
set([1, 9, 10, 12, 13, 15, 17, 20])
  9 [2:0]
-- < 1 [1:-1]
---- > 2 [0:0] L
-- > 13 [1:0]
---- < 10 [0:0] L
---- > 18 [0:0] L
set([1, 2, 9, 10, 13, 18])
  9 [2:0]
-- < 1 [1:-1]
---- > 2 [0:0] L
-- > 13 [1:0]
---- < 10 [0:0] L
---- > 14 [0:0] L
set([1, 2, 9, 10, 13, 14])
  9 [2:0]
-- < 1 [1:-1]
---- > 2 [0:0] L
-- > 13 [1:0]
---- < 10 [0:0] L
---- > 14 [0:0] L
set([1, 2, 9, 10, 13, 14])
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 57
STOPPING TESTING DUE TO TIMEOUT
8.6528673227 PERCENT COVERED
60.2086629868 TOTAL RUNTIME
8 EXECUTED
569 TOTAL TEST OPERATIONS
24.9580945969 TIME SPENT EXECUTING TEST OPERATIONS
0.0634577274323 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
25.1557374001 TIME SPENT CHECKING PROPERTIES
50.1138319969 TOTAL TIME SPENT RUNNING SUT
0.00488376617432 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
3 FAILED
0 REPEATS OF FAILURES
3 ACTUAL DISTINCT FAILURES

FAILURE 0
int1 = 11                                                                # STEP 0
int3 = 2                                                                 # STEP 1
int0 = 13                                                                # STEP 2
int2 = 6                                                                 # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
avl2.insert(int2)                                                        # STEP 5
int2 = 5                                                                 # STEP 6
avl2.delete(int1)                                                        # STEP 7
avl2.insert(int2)                                                        # STEP 8
avl2.delete(int2)                                                        # STEP 9
avl2.delete(int1)                                                       # STEP 10
result = avl2.inorder()                                                 # STEP 11
avl2 == avl2                                                            # STEP 12
result = avl2.inorder()                                                 # STEP 13
avl2.delete(int0)                                                       # STEP 14
avl2.insert(int0)                                                       # STEP 15
result = avl2.inorder()                                                 # STEP 16
result = avl2.find(int1)                                                # STEP 17
avl2.insert(int1)                                                       # STEP 18
avl2.insert(int1)                                                       # STEP 19
result = avl2.inorder()                                                 # STEP 20
avl2.delete(int3)                                                       # STEP 21
avl2.insert(int3)                                                       # STEP 22
int2 = 15                                                               # STEP 23
int3 = 5                                                                # STEP 24
avl2.delete(int1)                                                       # STEP 25
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10591eb90>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE 1
int0 = 10                                                                # STEP 0
int3 = 8                                                                 # STEP 1
avl1 = avl.AVLTree()                                                     # STEP 2
avl1.delete(int0)                                                        # STEP 3
avl1.insert(int3)                                                        # STEP 4
avl1.delete(int0)                                                        # STEP 5
int3 = 5                                                                 # STEP 6
avl1.insert(int3)                                                        # STEP 7
result = avl1.inorder()                                                  # STEP 8
avl1.insert(int3)                                                        # STEP 9
int2 = 12                                                               # STEP 10
result = avl1.find(int3)                                                # STEP 11
result = avl1.inorder()                                                 # STEP 12
avl1.insert(int2)                                                       # STEP 13
avl1.insert(int0)                                                       # STEP 14
result = avl1.inorder()                                                 # STEP 15
avl1.insert(int3)                                                       # STEP 16
result = avl1.inorder()                                                 # STEP 17
avl1.insert(int0)                                                       # STEP 18
avl1.insert(int0)                                                       # STEP 19
avl1.delete(int3)                                                       # STEP 20
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1059bfef0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE 2
avl0 = avl.AVLTree()                                                     # STEP 0
int1 = 6                                                                 # STEP 1
avl0.insert(int1)                                                        # STEP 2
result = avl0.inorder()                                                  # STEP 3
int1 = 10                                                                # STEP 4
int2 = 16                                                                # STEP 5
avl0.insert(int1)                                                        # STEP 6
avl0.delete(int2)                                                        # STEP 7
result = avl0.inorder()                                                  # STEP 8
avl0.insert(int1)                                                        # STEP 9
avl0.delete(int2)                                                       # STEP 10
avl0.delete(int2)                                                       # STEP 11
avl0.delete(int2)                                                       # STEP 12
avl0.delete(int1)                                                       # STEP 13
int2 = 7                                                                # STEP 14
avl0.delete(int2)                                                       # STEP 15
avl0.delete(int2)                                                       # STEP 16
avl0.delete(int1)                                                       # STEP 17
avl0.delete(int1)                                                       # STEP 18
avl0.insert(int2)                                                       # STEP 19
avl0.insert(int1)                                                       # STEP 20
avl0.insert(int1)                                                       # STEP 21
avl0.delete(int1)                                                       # STEP 22
avl0.delete(int2)                                                       # STEP 23
avl0.insert(int1)                                                       # STEP 24
avl0.delete(int1)                                                       # STEP 25
avl0.insert(int1)                                                       # STEP 26
avl0.insert(int1)                                                       # STEP 27
int1 = 12                                                               # STEP 28
result = avl0.inorder()                                                 # STEP 29
avl0.delete(int2)                                                       # STEP 30
avl0.delete(int2)                                                       # STEP 31
avl0.insert(int1)                                                       # STEP 32
result = avl0.find(int2)                                                # STEP 33
avl0.insert(int1)                                                       # STEP 34
avl0.delete(int1)                                                       # STEP 35
result = avl0.find(int1)                                                # STEP 36
avl0.delete(int1)                                                       # STEP 37
avl0.delete(int2)                                                       # STEP 38
int0 = 6                                                                # STEP 39
result = avl0.find(int0)                                                # STEP 40
int3 = 11                                                               # STEP 41
int0 = 4                                                                # STEP 42
int1 = 18                                                               # STEP 43
avl0.insert(int2)                                                       # STEP 44
avl0.delete(int1)                                                       # STEP 45
avl0.delete(int0)                                                       # STEP 46
avl0 == avl0                                                            # STEP 47
result = avl0.inorder()                                                 # STEP 48
avl0.delete(int3)                                                       # STEP 49
avl0.delete(int2)                                                       # STEP 50
avl0 == avl0                                                            # STEP 51
int3 = 17                                                               # STEP 52
avl0.delete(int1)                                                       # STEP 53
int0 = 10                                                               # STEP 54
avl0.insert(int3)                                                       # STEP 55
avl0.delete(int2)                                                       # STEP 56
avl0.insert(int0)                                                       # STEP 57
avl0.insert(int1)                                                       # STEP 58
avl0.insert(int2)                                                       # STEP 59
avl0.delete(int0)                                                       # STEP 60
int0 = 18                                                               # STEP 61
avl0.insert(int3)                                                       # STEP 62
avl0 == avl0                                                            # STEP 63
avl0.delete(int3)                                                       # STEP 64
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105a135f0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
218 BRANCHES COVERED
163 STATEMENTS COVERED

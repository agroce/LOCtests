Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.257.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1052dd3f8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 89 steps

SAVING TEST AS failure.257.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 6                                                                 # STEP 0
ACTION: int2 = 6 
int2 = None : <type 'NoneType'>
=> int2 = 6 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 1
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x1054529e0> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int0 = 20                                                                # STEP 2
ACTION: int0 = 20 
int0 = None : <type 'NoneType'>
=> int0 = 20 : <type 'int'>
==================================================
int3 = 12                                                                # STEP 3
ACTION: int3 = 12 
int3 = None : <type 'NoneType'>
=> int3 = 12 : <type 'int'>
==================================================
result = avl0.find(int3)                                                 # STEP 4
ACTION: result = avl0.find(int3) 
int3 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1054529e0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
result = avl0.inorder()                                                  # STEP 5
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x1054529e0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int1 = 18                                                                # STEP 6
ACTION: int1 = 18 
int1 = None : <type 'NoneType'>
=> int1 = 18 : <type 'int'>
==================================================
int3 = 13                                                                # STEP 7
ACTION: int3 = 13 
int3 = 12 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
result = avl0.find(int2)                                                 # STEP 8
ACTION: result = avl0.find(int2) 
int2 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1054529e0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl0.insert(int2)                                                        # STEP 9
ACTION: avl0.insert(int2) 
int2 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1054529e0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([6]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 10
ACTION: avl0.delete(int1) 
int1 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1054529e0> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int1 = 14                                                               # STEP 11
ACTION: int1 = 14 
int1 = 18 : <type 'int'>
=> int1 = 14 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 12
ACTION: avl0.delete(int1) 
int1 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1054529e0> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int2 = 9                                                                # STEP 13
ACTION: int2 = 9 
int2 = 6 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
int1 = 15                                                               # STEP 14
ACTION: int1 = 15 
int1 = 14 : <type 'int'>
=> int1 = 15 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 15
ACTION: avl0.insert(int0) 
int0 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1054529e0> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([20, 6]) : <type 'set'>
==================================================
int0 = 15                                                               # STEP 16
ACTION: int0 = 15 
int0 = 20 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 17
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x1053052d8> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
result = avl1.find(int3)                                                # STEP 18
ACTION: result = avl1.find(int3) 
int3 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1053052d8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl0.delete(int0)                                                       # STEP 19
ACTION: avl0.delete(int0) 
int0 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1054529e0> : <type 'instance'>
avl_REF0 = set([20, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
result = avl1.find(int2)                                                # STEP 20
ACTION: result = avl1.find(int2) 
int2 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1053052d8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl1.insert(int1)                                                       # STEP 21
ACTION: avl1.insert(int1) 
int1 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1053052d8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([15]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 22
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x1054529e0> : <type 'instance'>
avl_REF0 = set([20, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int3 = 7                                                                # STEP 23
ACTION: int3 = 7 
int3 = 13 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
int0 = 8                                                                # STEP 24
ACTION: int0 = 8 
int0 = 15 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
result = avl0.find(int0)                                                # STEP 25
ACTION: result = avl0.find(int0) 
int0 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1054529e0> : <type 'instance'>
avl_REF0 = set([20, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
int0 = 12                                                               # STEP 26
ACTION: int0 = 12 
int0 = 8 : <type 'int'>
=> int0 = 12 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 27
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x1054529e0> : <type 'instance'>
avl_REF0 = set([20, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int2 = 6                                                                # STEP 28
ACTION: int2 = 6 
int2 = 9 : <type 'int'>
=> int2 = 6 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 29
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1053052d8> : <type 'instance'>
avl_REF1 = set([15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
result = avl0.find(int2)                                                # STEP 30
ACTION: result = avl0.find(int2) 
int2 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1054529e0> : <type 'instance'>
avl_REF0 = set([20, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl1.insert(int0)                                                       # STEP 31
ACTION: avl1.insert(int0) 
int0 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1053052d8> : <type 'instance'>
avl_REF1 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([12, 15]) : <type 'set'>
==================================================
int2 = 10                                                               # STEP 32
ACTION: int2 = 10 
int2 = 6 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
int1 = 12                                                               # STEP 33
ACTION: int1 = 12 
int1 = 15 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 34
ACTION: avl0 = avl.AVLTree() 
avl0 = <avl.AVLTree instance at 0x1054529e0> : <type 'instance'>
avl_REF0 = set([20, 6]) : <type 'set'>
=> avl0 = <avl.AVLTree instance at 0x10526b0e0> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
result = avl0.find(int1)                                                # STEP 35
ACTION: result = avl0.find(int1) 
int1 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10526b0e0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl1 == avl0                                                            # STEP 36
ACTION: avl1 == avl0 
avl1 = <avl.AVLTree instance at 0x1053052d8> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x10526b0e0> : <type 'instance'>
avl_REF1 = set([12, 15]) : <type 'set'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
avl1 == avl1                                                            # STEP 37
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x1053052d8> : <type 'instance'>
avl_REF1 = set([12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
int1 = 11                                                               # STEP 38
ACTION: int1 = 11 
int1 = 12 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 39
ACTION: avl1.delete(int3) 
int3 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1053052d8> : <type 'instance'>
avl_REF1 = set([12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int0 = 2                                                                # STEP 40
ACTION: int0 = 2 
int0 = 12 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
int3 = 12                                                               # STEP 41
ACTION: int3 = 12 
int3 = 7 : <type 'int'>
=> int3 = 12 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 42
ACTION: avl0.delete(int0) 
int0 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10526b0e0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl1.insert(int0)                                                       # STEP 43
ACTION: avl1.insert(int0) 
int0 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1053052d8> : <type 'instance'>
avl_REF1 = set([12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([2, 12, 15]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 44
ACTION: avl0.delete(int0) 
int0 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10526b0e0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0 == avl1                                                            # STEP 45
ACTION: avl0 == avl1 
avl0 = <avl.AVLTree instance at 0x10526b0e0> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x1053052d8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
avl_REF1 = set([2, 12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF1 
==================================================
result = avl0.find(int1)                                                # STEP 46
ACTION: result = avl0.find(int1) 
int1 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10526b0e0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
result = avl1.find(int3)                                                # STEP 47
ACTION: result = avl1.find(int3) 
int3 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1053052d8> : <type 'instance'>
avl_REF1 = set([2, 12, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
int0 = 19                                                               # STEP 48
ACTION: int0 = 19 
int0 = 2 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 49
ACTION: avl1.insert(int2) 
int2 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1053052d8> : <type 'instance'>
avl_REF1 = set([2, 12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([2, 12, 10, 15]) : <type 'set'>
==================================================
int2 = 15                                                               # STEP 50
ACTION: int2 = 15 
int2 = 10 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 51
ACTION: avl0.delete(int3) 
int3 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10526b0e0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
result = avl1.find(int2)                                                # STEP 52
ACTION: result = avl1.find(int2) 
int2 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1053052d8> : <type 'instance'>
avl_REF1 = set([2, 12, 10, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int3 = 9                                                                # STEP 53
ACTION: int3 = 9 
int3 = 12 : <type 'int'>
=> int3 = 9 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 54
ACTION: avl1.delete(int1) 
int1 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1053052d8> : <type 'instance'>
avl_REF1 = set([2, 12, 10, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int2 = 20                                                               # STEP 55
ACTION: int2 = 20 
int2 = 15 : <type 'int'>
=> int2 = 20 : <type 'int'>
==================================================
int1 = 8                                                                # STEP 56
ACTION: int1 = 8 
int1 = 11 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
result = avl1.find(int3)                                                # STEP 57
ACTION: result = avl1.find(int3) 
int3 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1053052d8> : <type 'instance'>
avl_REF1 = set([2, 12, 10, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
int3 = 11                                                               # STEP 58
ACTION: int3 = 11 
int3 = 9 : <type 'int'>
=> int3 = 11 : <type 'int'>
==================================================
result = avl1.find(int2)                                                # STEP 59
ACTION: result = avl1.find(int2) 
int2 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1053052d8> : <type 'instance'>
avl_REF1 = set([2, 12, 10, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int2 = 2                                                                # STEP 60
ACTION: int2 = 2 
int2 = 20 : <type 'int'>
=> int2 = 2 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 61
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1053052d8> : <type 'instance'>
avl_REF1 = set([2, 12, 10, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.delete(int1)                                                       # STEP 62
ACTION: avl1.delete(int1) 
int1 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1053052d8> : <type 'instance'>
avl_REF1 = set([2, 12, 10, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl0 == avl1                                                            # STEP 63
ACTION: avl0 == avl1 
avl0 = <avl.AVLTree instance at 0x10526b0e0> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x1053052d8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
avl_REF1 = set([2, 12, 10, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF1 
==================================================
avl1.insert(int3)                                                       # STEP 64
ACTION: avl1.insert(int3) 
int3 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1053052d8> : <type 'instance'>
avl_REF1 = set([2, 12, 10, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([2, 11, 12, 10, 15]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 65
ACTION: avl0.delete(int2) 
int2 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10526b0e0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int2 = 17                                                               # STEP 66
ACTION: int2 = 17 
int2 = 2 : <type 'int'>
=> int2 = 17 : <type 'int'>
==================================================
result = avl1.find(int1)                                                # STEP 67
ACTION: result = avl1.find(int1) 
int1 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1053052d8> : <type 'instance'>
avl_REF1 = set([2, 11, 12, 10, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int3 = 5                                                                # STEP 68
ACTION: int3 = 5 
int3 = 11 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 69
ACTION: avl1.delete(int2) 
int2 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1053052d8> : <type 'instance'>
avl_REF1 = set([2, 11, 12, 10, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int2 = 17                                                               # STEP 70
ACTION: int2 = 17 
int2 = 17 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 71
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x10526b0e0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0 = avl.AVLTree()                                                    # STEP 72
ACTION: avl0 = avl.AVLTree() 
avl0 = <avl.AVLTree instance at 0x10526b0e0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
=> avl0 = <avl.AVLTree instance at 0x1055ff368> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
==================================================
avl0.delete(int2)                                                       # STEP 73
ACTION: avl0.delete(int2) 
int2 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1055ff368> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int1 = 8                                                                # STEP 74
ACTION: int1 = 8 
int1 = 8 : <type 'int'>
==================================================
result = avl0.find(int0)                                                # STEP 75
ACTION: result = avl0.find(int0) 
int0 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1055ff368> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
int2 = 13                                                               # STEP 76
ACTION: int2 = 13 
int2 = 17 : <type 'int'>
=> int2 = 13 : <type 'int'>
==================================================
result = avl0.find(int0)                                                # STEP 77
ACTION: result = avl0.find(int0) 
int0 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1055ff368> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
int0 = 10                                                               # STEP 78
ACTION: int0 = 10 
int0 = 19 : <type 'int'>
=> int0 = 10 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 79
ACTION: avl0.insert(int0) 
int0 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1055ff368> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([10]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 80
ACTION: avl1.delete(int3) 
int3 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1053052d8> : <type 'instance'>
avl_REF1 = set([2, 11, 12, 10, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
result = avl0.find(int2)                                                # STEP 81
ACTION: result = avl0.find(int2) 
int2 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1055ff368> : <type 'instance'>
avl_REF0 = set([10]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
result = avl1.inorder()                                                 # STEP 82
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1053052d8> : <type 'instance'>
avl_REF1 = set([2, 11, 12, 10, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int0 = 11                                                               # STEP 83
ACTION: int0 = 11 
int0 = 10 : <type 'int'>
=> int0 = 11 : <type 'int'>
==================================================
avl0 == avl0                                                            # STEP 84
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x1055ff368> : <type 'instance'>
avl_REF0 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
int2 = 12                                                               # STEP 85
ACTION: int2 = 12 
int2 = 13 : <type 'int'>
=> int2 = 12 : <type 'int'>
==================================================
result = avl0.find(int3)                                                # STEP 86
ACTION: result = avl0.find(int3) 
int3 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1055ff368> : <type 'instance'>
avl_REF0 = set([10]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
avl0 == avl0                                                            # STEP 87
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x1055ff368> : <type 'instance'>
avl_REF0 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl1.delete(int2)                                                       # STEP 88
ACTION: avl1.delete(int2) 
int2 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1053052d8> : <type 'instance'>
avl_REF1 = set([2, 11, 12, 10, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([2, 11, 10, 15]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105602b90>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #4 STEP #0 (0:00:31.458042) Fri Apr 28 05:54:02 2017 [ 146 stmts 192 branches ]
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 47
STOPPING TESTING DUE TO TIMEOUT
7.9742110621 PERCENT COVERED
60.1873090267 TOTAL RUNTIME
7 EXECUTED
636 TOTAL TEST OPERATIONS
26.1908957958 TIME SPENT EXECUTING TEST OPERATIONS
0.0230400562286 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
26.4458396435 TIME SPENT CHECKING PROPERTIES
52.6367354393 TOTAL TIME SPENT RUNNING SUT
0.00451588630676 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int2 = 6                                                                 # STEP 0
avl0 = avl.AVLTree()                                                     # STEP 1
int0 = 20                                                                # STEP 2
int3 = 12                                                                # STEP 3
result = avl0.find(int3)                                                 # STEP 4
result = avl0.inorder()                                                  # STEP 5
int1 = 18                                                                # STEP 6
int3 = 13                                                                # STEP 7
result = avl0.find(int2)                                                 # STEP 8
avl0.insert(int2)                                                        # STEP 9
avl0.delete(int1)                                                       # STEP 10
int1 = 14                                                               # STEP 11
avl0.delete(int1)                                                       # STEP 12
int2 = 9                                                                # STEP 13
int1 = 15                                                               # STEP 14
avl0.insert(int0)                                                       # STEP 15
int0 = 15                                                               # STEP 16
avl1 = avl.AVLTree()                                                    # STEP 17
result = avl1.find(int3)                                                # STEP 18
avl0.delete(int0)                                                       # STEP 19
result = avl1.find(int2)                                                # STEP 20
avl1.insert(int1)                                                       # STEP 21
result = avl0.inorder()                                                 # STEP 22
int3 = 7                                                                # STEP 23
int0 = 8                                                                # STEP 24
result = avl0.find(int0)                                                # STEP 25
int0 = 12                                                               # STEP 26
result = avl0.inorder()                                                 # STEP 27
int2 = 6                                                                # STEP 28
result = avl1.inorder()                                                 # STEP 29
result = avl0.find(int2)                                                # STEP 30
avl1.insert(int0)                                                       # STEP 31
int2 = 10                                                               # STEP 32
int1 = 12                                                               # STEP 33
avl0 = avl.AVLTree()                                                    # STEP 34
result = avl0.find(int1)                                                # STEP 35
avl1 == avl0                                                            # STEP 36
avl1 == avl1                                                            # STEP 37
int1 = 11                                                               # STEP 38
avl1.delete(int3)                                                       # STEP 39
int0 = 2                                                                # STEP 40
int3 = 12                                                               # STEP 41
avl0.delete(int0)                                                       # STEP 42
avl1.insert(int0)                                                       # STEP 43
avl0.delete(int0)                                                       # STEP 44
avl0 == avl1                                                            # STEP 45
result = avl0.find(int1)                                                # STEP 46
result = avl1.find(int3)                                                # STEP 47
int0 = 19                                                               # STEP 48
avl1.insert(int2)                                                       # STEP 49
int2 = 15                                                               # STEP 50
avl0.delete(int3)                                                       # STEP 51
result = avl1.find(int2)                                                # STEP 52
int3 = 9                                                                # STEP 53
avl1.delete(int1)                                                       # STEP 54
int2 = 20                                                               # STEP 55
int1 = 8                                                                # STEP 56
result = avl1.find(int3)                                                # STEP 57
int3 = 11                                                               # STEP 58
result = avl1.find(int2)                                                # STEP 59
int2 = 2                                                                # STEP 60
result = avl1.inorder()                                                 # STEP 61
avl1.delete(int1)                                                       # STEP 62
avl0 == avl1                                                            # STEP 63
avl1.insert(int3)                                                       # STEP 64
avl0.delete(int2)                                                       # STEP 65
int2 = 17                                                               # STEP 66
result = avl1.find(int1)                                                # STEP 67
int3 = 5                                                                # STEP 68
avl1.delete(int2)                                                       # STEP 69
int2 = 17                                                               # STEP 70
result = avl0.inorder()                                                 # STEP 71
avl0 = avl.AVLTree()                                                    # STEP 72
avl0.delete(int2)                                                       # STEP 73
int1 = 8                                                                # STEP 74
result = avl0.find(int0)                                                # STEP 75
int2 = 13                                                               # STEP 76
result = avl0.find(int0)                                                # STEP 77
int0 = 10                                                               # STEP 78
avl0.insert(int0)                                                       # STEP 79
avl1.delete(int3)                                                       # STEP 80
result = avl0.find(int2)                                                # STEP 81
result = avl1.inorder()                                                 # STEP 82
int0 = 11                                                               # STEP 83
avl0 == avl0                                                            # STEP 84
int2 = 12                                                               # STEP 85
result = avl0.find(int3)                                                # STEP 86
avl0 == avl0                                                            # STEP 87
avl1.delete(int2)                                                       # STEP 88
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105602b90>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
200 BRANCHES COVERED
150 STATEMENTS COVERED

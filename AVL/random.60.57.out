Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.337.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x101f9e8c0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 63 steps

SAVING TEST AS failure.337.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 13                                                                # STEP 0
ACTION: int1 = 13 
int1 = None : <type 'NoneType'>
=> int1 = 13 : <type 'int'>
==================================================
int0 = 10                                                                # STEP 1
ACTION: int0 = 10 
int0 = None : <type 'NoneType'>
=> int0 = 10 : <type 'int'>
==================================================
int3 = 19                                                                # STEP 2
ACTION: int3 = 19 
int3 = None : <type 'NoneType'>
=> int3 = 19 : <type 'int'>
==================================================
int2 = 20                                                                # STEP 3
ACTION: int2 = 20 
int2 = None : <type 'NoneType'>
=> int2 = 20 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 4
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x101fa2bd8> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.delete(int2)                                                        # STEP 5
ACTION: avl0.delete(int2) 
int2 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x101fa2bd8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
result = avl0.find(int2)                                                 # STEP 6
ACTION: result = avl0.find(int2) 
int2 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x101fa2bd8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
int2 = 3                                                                 # STEP 7
ACTION: int2 = 3 
int2 = 20 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
avl0 == avl0                                                             # STEP 8
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x101fa2bd8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl0.delete(int3)                                                        # STEP 9
ACTION: avl0.delete(int3) 
int3 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x101fa2bd8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
result = avl0.find(int1)                                                # STEP 10
ACTION: result = avl0.find(int1) 
int1 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x101fa2bd8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl1 = avl.AVLTree()                                                    # STEP 11
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x101fa5e18> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 12
ACTION: avl0.delete(int1) 
int1 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x101fa2bd8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int3 = 12                                                               # STEP 13
ACTION: int3 = 12 
int3 = 19 : <type 'int'>
=> int3 = 12 : <type 'int'>
==================================================
int1 = 15                                                               # STEP 14
ACTION: int1 = 15 
int1 = 13 : <type 'int'>
=> int1 = 15 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 15
ACTION: avl0.delete(int2) 
int2 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x101fa2bd8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl1.insert(int1)                                                       # STEP 16
ACTION: avl1.insert(int1) 
int1 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x101fa5e18> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([15]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 17
ACTION: avl1.insert(int0) 
int0 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x101fa5e18> : <type 'instance'>
avl_REF1 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([10, 15]) : <type 'set'>
==================================================
avl1 == avl1                                                            # STEP 18
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x101fa5e18> : <type 'instance'>
avl_REF1 = set([10, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.delete(int3)                                                       # STEP 19
ACTION: avl1.delete(int3) 
int3 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x101fa5e18> : <type 'instance'>
avl_REF1 = set([10, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int3 = 7                                                                # STEP 20
ACTION: int3 = 7 
int3 = 12 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
int0 = 8                                                                # STEP 21
ACTION: int0 = 8 
int0 = 10 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 22
ACTION: avl1.insert(int1) 
int1 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x101fa5e18> : <type 'instance'>
avl_REF1 = set([10, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl0.insert(int1)                                                       # STEP 23
ACTION: avl0.insert(int1) 
int1 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x101fa2bd8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([15]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 24
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x101fa5e18> : <type 'instance'>
avl_REF1 = set([10, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int1 = 19                                                               # STEP 25
ACTION: int1 = 19 
int1 = 15 : <type 'int'>
=> int1 = 19 : <type 'int'>
==================================================
int2 = 20                                                               # STEP 26
ACTION: int2 = 20 
int2 = 3 : <type 'int'>
=> int2 = 20 : <type 'int'>
==================================================
result = avl1.find(int0)                                                # STEP 27
ACTION: result = avl1.find(int0) 
int0 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x101fa5e18> : <type 'instance'>
avl_REF1 = set([10, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl0.delete(int0)                                                       # STEP 28
ACTION: avl0.delete(int0) 
int0 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x101fa2bd8> : <type 'instance'>
avl_REF0 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
result = avl1.find(int3)                                                # STEP 29
ACTION: result = avl1.find(int3) 
int3 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x101fa5e18> : <type 'instance'>
avl_REF1 = set([10, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
int0 = 1                                                                # STEP 30
ACTION: int0 = 1 
int0 = 8 : <type 'int'>
=> int0 = 1 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 31
ACTION: avl0.delete(int1) 
int1 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x101fa2bd8> : <type 'instance'>
avl_REF0 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int3 = 19                                                               # STEP 32
ACTION: int3 = 19 
int3 = 7 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
result = avl1.find(int2)                                                # STEP 33
ACTION: result = avl1.find(int2) 
int2 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x101fa5e18> : <type 'instance'>
avl_REF1 = set([10, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl1.insert(int2)                                                       # STEP 34
ACTION: avl1.insert(int2) 
int2 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x101fa5e18> : <type 'instance'>
avl_REF1 = set([10, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([10, 20, 15]) : <type 'set'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 35
ACTION: avl1 = avl.AVLTree() 
avl1 = <avl.AVLTree instance at 0x101fa5e18> : <type 'instance'>
avl_REF1 = set([10, 20, 15]) : <type 'set'>
=> avl1 = <avl.AVLTree instance at 0x103854fc8> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 36
ACTION: avl1.delete(int1) 
int1 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103854fc8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int1 = 7                                                                # STEP 37
ACTION: int1 = 7 
int1 = 19 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 38
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x103854fc8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int2 = 5                                                                # STEP 39
ACTION: int2 = 5 
int2 = 20 : <type 'int'>
=> int2 = 5 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 40
ACTION: avl1.insert(int1) 
int1 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103854fc8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([7]) : <type 'set'>
==================================================
int1 = 1                                                                # STEP 41
ACTION: int1 = 1 
int1 = 7 : <type 'int'>
=> int1 = 1 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 42
ACTION: avl0.delete(int0) 
int0 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x101fa2bd8> : <type 'instance'>
avl_REF0 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int0 = 4                                                                # STEP 43
ACTION: int0 = 4 
int0 = 1 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 44
ACTION: avl1.delete(int3) 
int3 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103854fc8> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.insert(int0)                                                       # STEP 45
ACTION: avl1.insert(int0) 
int0 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103854fc8> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([4, 7]) : <type 'set'>
==================================================
result = avl1.find(int1)                                                # STEP 46
ACTION: result = avl1.find(int1) 
int1 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103854fc8> : <type 'instance'>
avl_REF1 = set([4, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int1 = 13                                                               # STEP 47
ACTION: int1 = 13 
int1 = 1 : <type 'int'>
=> int1 = 13 : <type 'int'>
==================================================
int0 = 20                                                               # STEP 48
ACTION: int0 = 20 
int0 = 4 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
int3 = 10                                                               # STEP 49
ACTION: int3 = 10 
int3 = 19 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 50
ACTION: avl1.insert(int1) 
int1 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103854fc8> : <type 'instance'>
avl_REF1 = set([4, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([4, 13, 7]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 51
ACTION: avl1.insert(int3) 
int3 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103854fc8> : <type 'instance'>
avl_REF1 = set([4, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([10, 4, 13, 7]) : <type 'set'>
==================================================
result = avl1.find(int0)                                                # STEP 52
ACTION: result = avl1.find(int0) 
int0 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103854fc8> : <type 'instance'>
avl_REF1 = set([10, 4, 13, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
result = avl0.find(int1)                                                # STEP 53
ACTION: result = avl0.find(int1) 
int1 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x101fa2bd8> : <type 'instance'>
avl_REF0 = set([15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl1.delete(int2)                                                       # STEP 54
ACTION: avl1.delete(int2) 
int2 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103854fc8> : <type 'instance'>
avl_REF1 = set([10, 4, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int2 = 17                                                               # STEP 55
ACTION: int2 = 17 
int2 = 5 : <type 'int'>
=> int2 = 17 : <type 'int'>
==================================================
int3 = 6                                                                # STEP 56
ACTION: int3 = 6 
int3 = 10 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
result = avl1.find(int2)                                                # STEP 57
ACTION: result = avl1.find(int2) 
int2 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103854fc8> : <type 'instance'>
avl_REF1 = set([10, 4, 13, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int0 = 20                                                               # STEP 58
ACTION: int0 = 20 
int0 = 20 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 59
ACTION: avl0.delete(int0) 
int0 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x101fa2bd8> : <type 'instance'>
avl_REF0 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int1 = 19                                                               # STEP 60
ACTION: int1 = 19 
int1 = 13 : <type 'int'>
=> int1 = 19 : <type 'int'>
==================================================
int0 = 4                                                                # STEP 61
ACTION: int0 = 4 
int0 = 20 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 62
ACTION: avl1.delete(int0) 
int0 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103854fc8> : <type 'instance'>
avl_REF1 = set([10, 4, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([10, 13, 7]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1058a0ab8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103e9ca70>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
Original test has 60 steps

SAVING TEST AS failure.337.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 8                                                                 # STEP 0
ACTION: int3 = 8 
int3 = None : <type 'NoneType'>
=> int3 = 8 : <type 'int'>
==================================================
int1 = 5                                                                 # STEP 1
ACTION: int1 = 5 
int1 = None : <type 'NoneType'>
=> int1 = 5 : <type 'int'>
==================================================
int0 = 9                                                                 # STEP 2
ACTION: int0 = 9 
int0 = None : <type 'NoneType'>
=> int0 = 9 : <type 'int'>
==================================================
int2 = 19                                                                # STEP 3
ACTION: int2 = 19 
int2 = None : <type 'NoneType'>
=> int2 = 19 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 4
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x103e9cef0> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
result = avl0.find(int1)                                                 # STEP 5
ACTION: result = avl0.find(int1) 
int1 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103e9cef0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
int1 = 19                                                                # STEP 6
ACTION: int1 = 19 
int1 = 5 : <type 'int'>
=> int1 = 19 : <type 'int'>
==================================================
avl0.insert(int0)                                                        # STEP 7
ACTION: avl0.insert(int0) 
int0 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103e9cef0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([9]) : <type 'set'>
==================================================
avl0.delete(int0)                                                        # STEP 8
ACTION: avl0.delete(int0) 
int0 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103e9cef0> : <type 'instance'>
avl_REF0 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int0 = 2                                                                 # STEP 9
ACTION: int0 = 2 
int0 = 9 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 10
ACTION: avl0.insert(int3) 
int3 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103e9cef0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([8]) : <type 'set'>
==================================================
int3 = 2                                                                # STEP 11
ACTION: int3 = 2 
int3 = 8 : <type 'int'>
=> int3 = 2 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 12
ACTION: avl0.insert(int2) 
int2 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103e9cef0> : <type 'instance'>
avl_REF0 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([8, 19]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 13
ACTION: avl0.delete(int3) 
int3 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103e9cef0> : <type 'instance'>
avl_REF0 = set([8, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.insert(int1)                                                       # STEP 14
ACTION: avl0.insert(int1) 
int1 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103e9cef0> : <type 'instance'>
avl_REF0 = set([8, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
int2 = 16                                                               # STEP 15
ACTION: int2 = 16 
int2 = 19 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
result = avl0.find(int1)                                                # STEP 16
ACTION: result = avl0.find(int1) 
int1 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103e9cef0> : <type 'instance'>
avl_REF0 = set([8, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl1 = avl.AVLTree()                                                    # STEP 17
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x103e8d2d8> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int3 = 15                                                               # STEP 18
ACTION: int3 = 15 
int3 = 2 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
int1 = 18                                                               # STEP 19
ACTION: int1 = 18 
int1 = 19 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 20
ACTION: avl1.delete(int2) 
int2 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103e8d2d8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int2 = 11                                                               # STEP 21
ACTION: int2 = 11 
int2 = 16 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 22
ACTION: avl0.delete(int2) 
int2 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103e9cef0> : <type 'instance'>
avl_REF0 = set([8, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl1.delete(int0)                                                       # STEP 23
ACTION: avl1.delete(int0) 
int0 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103e8d2d8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int2 = 16                                                               # STEP 24
ACTION: int2 = 16 
int2 = 11 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
int0 = 15                                                               # STEP 25
ACTION: int0 = 15 
int0 = 2 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 26
ACTION: avl0.delete(int0) 
int0 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103e9cef0> : <type 'instance'>
avl_REF0 = set([8, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int0 = 17                                                               # STEP 27
ACTION: int0 = 17 
int0 = 15 : <type 'int'>
=> int0 = 17 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 28
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x103e9cef0> : <type 'instance'>
avl_REF0 = set([8, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
result = avl0.inorder()                                                 # STEP 29
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x103e9cef0> : <type 'instance'>
avl_REF0 = set([8, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0 == avl1                                                            # STEP 30
ACTION: avl0 == avl1 
avl0 = <avl.AVLTree instance at 0x103e9cef0> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x103e8d2d8> : <type 'instance'>
avl_REF0 = set([8, 19]) : <type 'set'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF1 
==================================================
result = avl1.find(int2)                                                # STEP 31
ACTION: result = avl1.find(int2) 
int2 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103e8d2d8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl1.insert(int0)                                                       # STEP 32
ACTION: avl1.insert(int0) 
int0 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103e8d2d8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([17]) : <type 'set'>
==================================================
int2 = 14                                                               # STEP 33
ACTION: int2 = 14 
int2 = 16 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 34
ACTION: avl0.delete(int3) 
int3 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103e9cef0> : <type 'instance'>
avl_REF0 = set([8, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl1.delete(int1)                                                       # STEP 35
ACTION: avl1.delete(int1) 
int1 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103e8d2d8> : <type 'instance'>
avl_REF1 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int1 = 15                                                               # STEP 36
ACTION: int1 = 15 
int1 = 18 : <type 'int'>
=> int1 = 15 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 37
ACTION: avl0.delete(int0) 
int0 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103e9cef0> : <type 'instance'>
avl_REF0 = set([8, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.insert(int2)                                                       # STEP 38
ACTION: avl0.insert(int2) 
int2 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103e9cef0> : <type 'instance'>
avl_REF0 = set([8, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([8, 19, 14]) : <type 'set'>
==================================================
int0 = 10                                                               # STEP 39
ACTION: int0 = 10 
int0 = 17 : <type 'int'>
=> int0 = 10 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 40
ACTION: avl0.delete(int0) 
int0 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103e9cef0> : <type 'instance'>
avl_REF0 = set([8, 19, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int3 = 5                                                                # STEP 41
ACTION: int3 = 5 
int3 = 15 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
int0 = 20                                                               # STEP 42
ACTION: int0 = 20 
int0 = 10 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
int2 = 20                                                               # STEP 43
ACTION: int2 = 20 
int2 = 14 : <type 'int'>
=> int2 = 20 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 44
ACTION: avl0.insert(int3) 
int3 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103e9cef0> : <type 'instance'>
avl_REF0 = set([8, 19, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([8, 19, 5, 14]) : <type 'set'>
==================================================
int3 = 18                                                               # STEP 45
ACTION: int3 = 18 
int3 = 5 : <type 'int'>
=> int3 = 18 : <type 'int'>
==================================================
result = avl0.find(int2)                                                # STEP 46
ACTION: result = avl0.find(int2) 
int2 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103e9cef0> : <type 'instance'>
avl_REF0 = set([8, 19, 5, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl1.insert(int2)                                                       # STEP 47
ACTION: avl1.insert(int2) 
int2 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103e8d2d8> : <type 'instance'>
avl_REF1 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([17, 20]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 48
ACTION: avl0.delete(int3) 
int3 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103e9cef0> : <type 'instance'>
avl_REF0 = set([8, 19, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int2 = 1                                                                # STEP 49
ACTION: int2 = 1 
int2 = 20 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 50
ACTION: avl1.insert(int1) 
int1 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103e8d2d8> : <type 'instance'>
avl_REF1 = set([17, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([17, 20, 15]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 51
ACTION: avl1.insert(int0) 
int0 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103e8d2d8> : <type 'instance'>
avl_REF1 = set([17, 20, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
int0 = 9                                                                # STEP 52
ACTION: int0 = 9 
int0 = 20 : <type 'int'>
=> int0 = 9 : <type 'int'>
==================================================
int1 = 12                                                               # STEP 53
ACTION: int1 = 12 
int1 = 15 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
result = avl0.find(int2)                                                # STEP 54
ACTION: result = avl0.find(int2) 
int2 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103e9cef0> : <type 'instance'>
avl_REF0 = set([8, 19, 5, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl0.delete(int2)                                                       # STEP 55
ACTION: avl0.delete(int2) 
int2 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103e9cef0> : <type 'instance'>
avl_REF0 = set([8, 19, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
result = avl1.find(int2)                                                # STEP 56
ACTION: result = avl1.find(int2) 
int2 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103e8d2d8> : <type 'instance'>
avl_REF1 = set([17, 20, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int2 = 19                                                               # STEP 57
ACTION: int2 = 19 
int2 = 1 : <type 'int'>
=> int2 = 19 : <type 'int'>
==================================================
int3 = 7                                                                # STEP 58
ACTION: int3 = 7 
int3 = 18 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 59
ACTION: avl0.delete(int2) 
int2 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103e9cef0> : <type 'instance'>
avl_REF0 = set([8, 19, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([8, 5, 14]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103f12b00>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
TEST #4 STEP #61 (0:00:30.027381) Fri Apr 28 06:06:14 2017 [ 134 stmts 178 branches ]
  13 [2:0]
-- < 10 [1:1]
---- < 8 [0:0] L
-- > 18 [1:0]
---- < 16 [0:0] L
---- > 20 [0:0] L
set([8, 10, 13, 16, 18, 20])
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 68
STOPPING TESTING DUE TO TIMEOUT
8.51713607058 PERCENT COVERED
60.1739242077 TOTAL RUNTIME
8 EXECUTED
691 TOTAL TEST OPERATIONS
25.3199660778 TIME SPENT EXECUTING TEST OPERATIONS
0.0232856273651 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
25.5423562527 TIME SPENT CHECKING PROPERTIES
50.8623223305 TOTAL TIME SPENT RUNNING SUT
0.00428056716919 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
2 FAILED
0 REPEATS OF FAILURES
2 ACTUAL DISTINCT FAILURES

FAILURE 0
int1 = 13                                                                # STEP 0
int0 = 10                                                                # STEP 1
int3 = 19                                                                # STEP 2
int2 = 20                                                                # STEP 3
avl0 = avl.AVLTree()                                                     # STEP 4
avl0.delete(int2)                                                        # STEP 5
result = avl0.find(int2)                                                 # STEP 6
int2 = 3                                                                 # STEP 7
avl0 == avl0                                                             # STEP 8
avl0.delete(int3)                                                        # STEP 9
result = avl0.find(int1)                                                # STEP 10
avl1 = avl.AVLTree()                                                    # STEP 11
avl0.delete(int1)                                                       # STEP 12
int3 = 12                                                               # STEP 13
int1 = 15                                                               # STEP 14
avl0.delete(int2)                                                       # STEP 15
avl1.insert(int1)                                                       # STEP 16
avl1.insert(int0)                                                       # STEP 17
avl1 == avl1                                                            # STEP 18
avl1.delete(int3)                                                       # STEP 19
int3 = 7                                                                # STEP 20
int0 = 8                                                                # STEP 21
avl1.insert(int1)                                                       # STEP 22
avl0.insert(int1)                                                       # STEP 23
result = avl1.inorder()                                                 # STEP 24
int1 = 19                                                               # STEP 25
int2 = 20                                                               # STEP 26
result = avl1.find(int0)                                                # STEP 27
avl0.delete(int0)                                                       # STEP 28
result = avl1.find(int3)                                                # STEP 29
int0 = 1                                                                # STEP 30
avl0.delete(int1)                                                       # STEP 31
int3 = 19                                                               # STEP 32
result = avl1.find(int2)                                                # STEP 33
avl1.insert(int2)                                                       # STEP 34
avl1 = avl.AVLTree()                                                    # STEP 35
avl1.delete(int1)                                                       # STEP 36
int1 = 7                                                                # STEP 37
result = avl1.inorder()                                                 # STEP 38
int2 = 5                                                                # STEP 39
avl1.insert(int1)                                                       # STEP 40
int1 = 1                                                                # STEP 41
avl0.delete(int0)                                                       # STEP 42
int0 = 4                                                                # STEP 43
avl1.delete(int3)                                                       # STEP 44
avl1.insert(int0)                                                       # STEP 45
result = avl1.find(int1)                                                # STEP 46
int1 = 13                                                               # STEP 47
int0 = 20                                                               # STEP 48
int3 = 10                                                               # STEP 49
avl1.insert(int1)                                                       # STEP 50
avl1.insert(int3)                                                       # STEP 51
result = avl1.find(int0)                                                # STEP 52
result = avl0.find(int1)                                                # STEP 53
avl1.delete(int2)                                                       # STEP 54
int2 = 17                                                               # STEP 55
int3 = 6                                                                # STEP 56
result = avl1.find(int2)                                                # STEP 57
int0 = 20                                                               # STEP 58
avl0.delete(int0)                                                       # STEP 59
int1 = 19                                                               # STEP 60
int0 = 4                                                                # STEP 61
avl1.delete(int0)                                                       # STEP 62
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1058a0ab8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE 1
int3 = 8                                                                 # STEP 0
int1 = 5                                                                 # STEP 1
int0 = 9                                                                 # STEP 2
int2 = 19                                                                # STEP 3
avl0 = avl.AVLTree()                                                     # STEP 4
result = avl0.find(int1)                                                 # STEP 5
int1 = 19                                                                # STEP 6
avl0.insert(int0)                                                        # STEP 7
avl0.delete(int0)                                                        # STEP 8
int0 = 2                                                                 # STEP 9
avl0.insert(int3)                                                       # STEP 10
int3 = 2                                                                # STEP 11
avl0.insert(int2)                                                       # STEP 12
avl0.delete(int3)                                                       # STEP 13
avl0.insert(int1)                                                       # STEP 14
int2 = 16                                                               # STEP 15
result = avl0.find(int1)                                                # STEP 16
avl1 = avl.AVLTree()                                                    # STEP 17
int3 = 15                                                               # STEP 18
int1 = 18                                                               # STEP 19
avl1.delete(int2)                                                       # STEP 20
int2 = 11                                                               # STEP 21
avl0.delete(int2)                                                       # STEP 22
avl1.delete(int0)                                                       # STEP 23
int2 = 16                                                               # STEP 24
int0 = 15                                                               # STEP 25
avl0.delete(int0)                                                       # STEP 26
int0 = 17                                                               # STEP 27
result = avl0.inorder()                                                 # STEP 28
result = avl0.inorder()                                                 # STEP 29
avl0 == avl1                                                            # STEP 30
result = avl1.find(int2)                                                # STEP 31
avl1.insert(int0)                                                       # STEP 32
int2 = 14                                                               # STEP 33
avl0.delete(int3)                                                       # STEP 34
avl1.delete(int1)                                                       # STEP 35
int1 = 15                                                               # STEP 36
avl0.delete(int0)                                                       # STEP 37
avl0.insert(int2)                                                       # STEP 38
int0 = 10                                                               # STEP 39
avl0.delete(int0)                                                       # STEP 40
int3 = 5                                                                # STEP 41
int0 = 20                                                               # STEP 42
int2 = 20                                                               # STEP 43
avl0.insert(int3)                                                       # STEP 44
int3 = 18                                                               # STEP 45
result = avl0.find(int2)                                                # STEP 46
avl1.insert(int2)                                                       # STEP 47
avl0.delete(int3)                                                       # STEP 48
int2 = 1                                                                # STEP 49
avl1.insert(int1)                                                       # STEP 50
avl1.insert(int0)                                                       # STEP 51
int0 = 9                                                                # STEP 52
int1 = 12                                                               # STEP 53
result = avl0.find(int2)                                                # STEP 54
avl0.delete(int2)                                                       # STEP 55
result = avl1.find(int2)                                                # STEP 56
int2 = 19                                                               # STEP 57
int3 = 7                                                                # STEP 58
avl0.delete(int2)                                                       # STEP 59
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103f12b00>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
214 BRANCHES COVERED
161 STATEMENTS COVERED

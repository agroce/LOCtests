Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=True, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.46986.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  13 [2:0]
-- < 4 [1:0]
---- < 3 [0:0] L
---- > 12 [0:0] L
-- > 19 [1:1]
---- < 17 [0:0] L
set([3, 4, 12, 13, 17, 19])
  13 [3:1]
-- < 4 [2:-1]
---- < 3 [0:0] L
---- > 12 [1:1]
------ < 8 [0:0] L
-- > 19 [1:1]
---- < 17 [0:0] L
set([3, 4, 8, 12, 13, 17, 19])
  13 [3:1]
-- < 4 [2:-1]
---- < 3 [0:0] L
---- > 12 [1:1]
------ < 8 [0:0] L
-- > 19 [1:1]
---- < 17 [0:0] L
set([3, 4, 8, 12, 13, 17, 19])
  13 [3:1]
-- < 4 [2:-1]
---- < 3 [0:0] L
---- > 12 [1:1]
------ < 8 [0:0] L
-- > 19 [1:1]
---- < 17 [0:0] L
set([3, 4, 8, 12, 13, 17, 19])
  13 [3:1]
-- < 4 [2:-1]
---- < 3 [0:0] L
---- > 12 [1:1]
------ < 8 [0:0] L
-- > 19 [1:1]
---- < 17 [0:0] L
set([3, 4, 8, 12, 13, 17, 19])
  13 [3:1]
-- < 4 [2:-1]
---- < 3 [0:0] L
---- > 12 [1:1]
------ < 8 [0:0] L
-- > 19 [1:1]
---- < 17 [0:0] L
set([3, 4, 8, 12, 13, 17, 19])
  13 [3:1]
-- < 4 [2:-1]
---- < 3 [0:0] L
---- > 12 [1:1]
------ < 8 [0:0] L
-- > 18 [1:0]
---- < 17 [0:0] L
---- > 19 [0:0] L
set([3, 4, 8, 12, 13, 17, 18, 19])
  13 [3:1]
-- < 4 [2:-1]
---- < 3 [0:0] L
---- > 12 [1:1]
------ < 8 [0:0] L
-- > 18 [1:0]
---- < 17 [0:0] L
---- > 19 [0:0] L
set([3, 4, 8, 12, 13, 17, 18, 19])
TEST #4 STEP #33 (0:00:30.018946) Mon May  1 03:21:08 2017 [ 150 stmts 199 branches ]
  6 [2:0]
-- < 3 [1:0]
---- < 1 [0:0] L
---- > 4 [0:0] L
-- > 8 [1:-1]
---- > 17 [0:0] L
set([1, 3, 4, 6, 8, 17])
  6 [2:0]
-- < 3 [1:0]
---- < 1 [0:0] L
---- > 4 [0:0] L
-- > 8 [1:-1]
---- > 17 [0:0] L
set([1, 3, 4, 6, 8, 17])
  6 [2:0]
-- < 3 [1:0]
---- < 1 [0:0] L
---- > 4 [0:0] L
-- > 8 [1:-1]
---- > 17 [0:0] L
set([1, 3, 4, 6, 8, 17])
  6 [2:0]
-- < 3 [1:0]
---- < 1 [0:0] L
---- > 4 [0:0] L
-- > 8 [1:-1]
---- > 17 [0:0] L
set([1, 3, 4, 6, 8, 17])
  6 [3:1]
-- < 3 [2:-1]
---- < 1 [0:0] L
---- > 4 [1:-1]
------ > 5 [0:0] L
-- > 8 [1:-1]
---- > 17 [0:0] L
set([1, 3, 4, 5, 6, 8, 17])
  8 [2:0]
-- < 5 [1:0]
---- < 2 [0:0] L
---- > 6 [0:0] L
-- > 17 [1:0]
---- < 11 [0:0] L
---- > 19 [0:0] L
set([2, 5, 6, 8, 11, 17, 19])
  8 [3:1]
-- < 2 [2:-1]
---- < 1 [0:0] L
---- > 6 [1:1]
------ < 3 [0:0] L
-- > 17 [1:-1]
---- > 20 [0:0] L
set([1, 2, 3, 6, 8, 17, 20])
  8 [2:0]
-- < 5 [1:0]
---- < 2 [0:0] L
---- > 6 [0:0] L
-- > 17 [1:0]
---- < 11 [0:0] L
---- > 19 [0:0] L
set([2, 5, 6, 8, 11, 17, 19])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1048a0560>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
Original test has 50 steps

SAVING TEST AS failure.46986.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 16                                                                # STEP 0
ACTION: int2 = 16 
int2 = None : <type 'NoneType'>
=> int2 = 16 : <type 'int'>
==================================================
int1 = 17                                                                # STEP 1
ACTION: int1 = 17 
int1 = None : <type 'NoneType'>
=> int1 = 17 : <type 'int'>
==================================================
int3 = 8                                                                 # STEP 2
ACTION: int3 = 8 
int3 = None : <type 'NoneType'>
=> int3 = 8 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 3
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x103c8eea8> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.insert(int1)                                                        # STEP 4
ACTION: avl1.insert(int1) 
int1 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103c8eea8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([17]) : <type 'set'>
==================================================
int1 = 18                                                                # STEP 5
ACTION: int1 = 18 
int1 = 17 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
avl1.insert(int2)                                                        # STEP 6
ACTION: avl1.insert(int2) 
int2 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103c8eea8> : <type 'instance'>
avl_REF1 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([16, 17]) : <type 'set'>
==================================================
avl1.insert(int2)                                                        # STEP 7
ACTION: avl1.insert(int2) 
int2 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103c8eea8> : <type 'instance'>
avl_REF1 = set([16, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
avl1.delete(int2)                                                        # STEP 8
ACTION: avl1.delete(int2) 
int2 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103c8eea8> : <type 'instance'>
avl_REF1 = set([16, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([17]) : <type 'set'>
==================================================
avl1.insert(int1)                                                        # STEP 9
ACTION: avl1.insert(int1) 
int1 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103c8eea8> : <type 'instance'>
avl_REF1 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([17, 18]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 10
ACTION: avl1.delete(int1) 
int1 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103c8eea8> : <type 'instance'>
avl_REF1 = set([17, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([17]) : <type 'set'>
==================================================
int2 = 6                                                                # STEP 11
ACTION: int2 = 6 
int2 = 16 : <type 'int'>
=> int2 = 6 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 12
ACTION: avl1.delete(int2) 
int2 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103c8eea8> : <type 'instance'>
avl_REF1 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.delete(int1)                                                       # STEP 13
ACTION: avl1.delete(int1) 
int1 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103c8eea8> : <type 'instance'>
avl_REF1 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int1 = 15                                                               # STEP 14
ACTION: int1 = 15 
int1 = 18 : <type 'int'>
=> int1 = 15 : <type 'int'>
==================================================
int0 = 4                                                                # STEP 15
ACTION: int0 = 4 
int0 = None : <type 'NoneType'>
=> int0 = 4 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 16
ACTION: avl1.insert(int3) 
int3 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103c8eea8> : <type 'instance'>
avl_REF1 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([8, 17]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 17
ACTION: avl1.insert(int2) 
int2 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103c8eea8> : <type 'instance'>
avl_REF1 = set([8, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([8, 17, 6]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 18
ACTION: avl1.delete(int2) 
int2 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103c8eea8> : <type 'instance'>
avl_REF1 = set([8, 17, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([8, 17]) : <type 'set'>
==================================================
int2 = 11                                                               # STEP 19
ACTION: int2 = 11 
int2 = 6 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
int3 = 5                                                                # STEP 20
ACTION: int3 = 5 
int3 = 8 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 21
ACTION: avl1.insert(int1) 
int1 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103c8eea8> : <type 'instance'>
avl_REF1 = set([8, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([8, 17, 15]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 22
ACTION: avl1.insert(int2) 
int2 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103c8eea8> : <type 'instance'>
avl_REF1 = set([8, 17, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([8, 11, 15, 17]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 23
ACTION: avl1.insert(int0) 
int0 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103c8eea8> : <type 'instance'>
avl_REF1 = set([8, 11, 15, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([4, 8, 11, 15, 17]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 24
ACTION: avl1.insert(int0) 
int0 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103c8eea8> : <type 'instance'>
avl_REF1 = set([4, 8, 11, 15, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.insert(int0)                                                       # STEP 25
ACTION: avl1.insert(int0) 
int0 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103c8eea8> : <type 'instance'>
avl_REF1 = set([4, 8, 11, 15, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.insert(int1)                                                       # STEP 26
ACTION: avl1.insert(int1) 
int1 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103c8eea8> : <type 'instance'>
avl_REF1 = set([4, 8, 11, 15, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl1.delete(int0)                                                       # STEP 27
ACTION: avl1.delete(int0) 
int0 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103c8eea8> : <type 'instance'>
avl_REF1 = set([4, 8, 11, 15, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([8, 11, 15, 17]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 28
ACTION: avl1.insert(int3) 
int3 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103c8eea8> : <type 'instance'>
avl_REF1 = set([8, 11, 15, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([5, 8, 11, 15, 17]) : <type 'set'>
==================================================
int3 = 4                                                                # STEP 29
ACTION: int3 = 4 
int3 = 5 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 30
ACTION: avl1.insert(int3) 
int3 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103c8eea8> : <type 'instance'>
avl_REF1 = set([5, 8, 11, 15, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([4, 5, 8, 11, 15, 17]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 31
ACTION: avl1.insert(int3) 
int3 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103c8eea8> : <type 'instance'>
avl_REF1 = set([4, 5, 8, 11, 15, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
int2 = 5                                                                # STEP 32
ACTION: int2 = 5 
int2 = 11 : <type 'int'>
=> int2 = 5 : <type 'int'>
==================================================
int0 = 16                                                               # STEP 33
ACTION: int0 = 16 
int0 = 4 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
int1 = 7                                                                # STEP 34
ACTION: int1 = 7 
int1 = 15 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
int3 = 10                                                               # STEP 35
ACTION: int3 = 10 
int3 = 4 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 36
ACTION: avl1.delete(int1) 
int1 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103c8eea8> : <type 'instance'>
avl_REF1 = set([4, 5, 8, 11, 15, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.delete(int0)                                                       # STEP 37
ACTION: avl1.delete(int0) 
int0 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103c8eea8> : <type 'instance'>
avl_REF1 = set([4, 5, 8, 11, 15, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.insert(int1)                                                       # STEP 38
ACTION: avl1.insert(int1) 
int1 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103c8eea8> : <type 'instance'>
avl_REF1 = set([4, 5, 8, 11, 15, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([4, 5, 7, 8, 11, 15, 17]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 39
ACTION: avl1.insert(int0) 
int0 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103c8eea8> : <type 'instance'>
avl_REF1 = set([4, 5, 7, 8, 11, 15, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([4, 5, 7, 8, 11, 15, 16, 17]) : <type 'set'>
==================================================
int1 = 2                                                                # STEP 40
ACTION: int1 = 2 
int1 = 7 : <type 'int'>
=> int1 = 2 : <type 'int'>
==================================================
int0 = 12                                                               # STEP 41
ACTION: int0 = 12 
int0 = 16 : <type 'int'>
=> int0 = 12 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 42
ACTION: avl1.insert(int3) 
int3 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103c8eea8> : <type 'instance'>
avl_REF1 = set([4, 5, 7, 8, 11, 15, 16, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([4, 5, 7, 8, 10, 11, 15, 16, 17]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 43
ACTION: avl1.delete(int3) 
int3 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103c8eea8> : <type 'instance'>
avl_REF1 = set([4, 5, 7, 8, 10, 11, 15, 16, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([4, 5, 7, 8, 11, 15, 16, 17]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 44
ACTION: avl1.delete(int3) 
int3 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103c8eea8> : <type 'instance'>
avl_REF1 = set([4, 5, 7, 8, 11, 15, 16, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.insert(int3)                                                       # STEP 45
ACTION: avl1.insert(int3) 
int3 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103c8eea8> : <type 'instance'>
avl_REF1 = set([4, 5, 7, 8, 11, 15, 16, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([4, 5, 7, 8, 10, 11, 15, 16, 17]) : <type 'set'>
==================================================
int3 = 1                                                                # STEP 46
ACTION: int3 = 1 
int3 = 10 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 47
ACTION: avl1.insert(int1) 
int1 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103c8eea8> : <type 'instance'>
avl_REF1 = set([4, 5, 7, 8, 10, 11, 15, 16, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([2, 4, 5, 7, 8, 10, 11, 15, 16, 17]) : <type 'set'>
==================================================
int1 = 4                                                                # STEP 48
ACTION: int1 = 4 
int1 = 2 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 49
ACTION: avl1.delete(int2) 
int2 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103c8eea8> : <type 'instance'>
avl_REF1 = set([2, 4, 5, 7, 8, 10, 11, 15, 16, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([2, 4, 7, 8, 10, 11, 15, 16, 17]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103e53ab8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 0
STOPPING TESTING DUE TO TIMEOUT
8.80155894771 PERCENT COVERED
62.255918026 TOTAL RUNTIME
8 EXECUTED
650 TOTAL TEST OPERATIONS
28.6443612576 TIME SPENT EXECUTING TEST OPERATIONS
0.072083234787 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
28.8909664154 TIME SPENT CHECKING PROPERTIES
57.535327673 TOTAL TIME SPENT RUNNING SUT
0.00413632392883 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int2 = 16                                                                # STEP 0
int1 = 17                                                                # STEP 1
int3 = 8                                                                 # STEP 2
avl1 = avl.AVLTree()                                                     # STEP 3
avl1.insert(int1)                                                        # STEP 4
int1 = 18                                                                # STEP 5
avl1.insert(int2)                                                        # STEP 6
avl1.insert(int2)                                                        # STEP 7
avl1.delete(int2)                                                        # STEP 8
avl1.insert(int1)                                                        # STEP 9
avl1.delete(int1)                                                       # STEP 10
int2 = 6                                                                # STEP 11
avl1.delete(int2)                                                       # STEP 12
avl1.delete(int1)                                                       # STEP 13
int1 = 15                                                               # STEP 14
int0 = 4                                                                # STEP 15
avl1.insert(int3)                                                       # STEP 16
avl1.insert(int2)                                                       # STEP 17
avl1.delete(int2)                                                       # STEP 18
int2 = 11                                                               # STEP 19
int3 = 5                                                                # STEP 20
avl1.insert(int1)                                                       # STEP 21
avl1.insert(int2)                                                       # STEP 22
avl1.insert(int0)                                                       # STEP 23
avl1.insert(int0)                                                       # STEP 24
avl1.insert(int0)                                                       # STEP 25
avl1.insert(int1)                                                       # STEP 26
avl1.delete(int0)                                                       # STEP 27
avl1.insert(int3)                                                       # STEP 28
int3 = 4                                                                # STEP 29
avl1.insert(int3)                                                       # STEP 30
avl1.insert(int3)                                                       # STEP 31
int2 = 5                                                                # STEP 32
int0 = 16                                                               # STEP 33
int1 = 7                                                                # STEP 34
int3 = 10                                                               # STEP 35
avl1.delete(int1)                                                       # STEP 36
avl1.delete(int0)                                                       # STEP 37
avl1.insert(int1)                                                       # STEP 38
avl1.insert(int0)                                                       # STEP 39
int1 = 2                                                                # STEP 40
int0 = 12                                                               # STEP 41
avl1.insert(int3)                                                       # STEP 42
avl1.delete(int3)                                                       # STEP 43
avl1.delete(int3)                                                       # STEP 44
avl1.insert(int3)                                                       # STEP 45
int3 = 1                                                                # STEP 46
avl1.insert(int1)                                                       # STEP 47
int1 = 4                                                                # STEP 48
avl1.delete(int2)                                                       # STEP 49
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103e53ab8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
214 BRANCHES COVERED
161 STATEMENTS COVERED

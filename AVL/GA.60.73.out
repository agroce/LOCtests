Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.14722.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
TEST #3 STEP #81 (0:00:30.068519) Sun Apr 30 04:50:21 2017 [ 149 stmts 198 branches ]
  10 [2:0]
-- < 6 [1:-1]
---- > 8 [0:0] L
-- > 16 [1:0]
---- < 14 [0:0] L
---- > 18 [0:0] L
set([6, 8, 10, 14, 16, 18])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1020dde60>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
Original test has 83 steps

SAVING TEST AS failure.14722.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 16                                                                # STEP 0
ACTION: int3 = 16 
int3 = None : <type 'NoneType'>
=> int3 = 16 : <type 'int'>
==================================================
int0 = 17                                                                # STEP 1
ACTION: int0 = 17 
int0 = None : <type 'NoneType'>
=> int0 = 17 : <type 'int'>
==================================================
int1 = 2                                                                 # STEP 2
ACTION: int1 = 2 
int1 = None : <type 'NoneType'>
=> int1 = 2 : <type 'int'>
==================================================
int2 = 16                                                                # STEP 3
ACTION: int2 = 16 
int2 = None : <type 'NoneType'>
=> int2 = 16 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 4
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x101641638> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.delete(int0)                                                        # STEP 5
ACTION: avl0.delete(int0) 
int0 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101641638> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int0 = 18                                                                # STEP 6
ACTION: int0 = 18 
int0 = 17 : <type 'int'>
=> int0 = 18 : <type 'int'>
==================================================
avl0.insert(int1)                                                        # STEP 7
ACTION: avl0.insert(int1) 
int1 = 2 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101641638> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([2]) : <type 'set'>
==================================================
int1 = 14                                                                # STEP 8
ACTION: int1 = 14 
int1 = 2 : <type 'int'>
=> int1 = 14 : <type 'int'>
==================================================
avl0.delete(int2)                                                        # STEP 9
ACTION: avl0.delete(int2) 
int2 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101641638> : <type 'instance'>
avl_REF0 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int2 = 7                                                                # STEP 10
ACTION: int2 = 7 
int2 = 16 : <type 'int'>
=> int2 = 7 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 11
ACTION: avl0.insert(int1) 
int1 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101641638> : <type 'instance'>
avl_REF0 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([2, 14]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 12
ACTION: avl0.insert(int1) 
int1 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101641638> : <type 'instance'>
avl_REF0 = set([2, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl0 == avl0                                                            # STEP 13
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x101641638> : <type 'instance'>
avl_REF0 = set([2, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
int1 = 7                                                                # STEP 14
ACTION: int1 = 7 
int1 = 14 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
result = avl0.find(int2)                                                # STEP 15
ACTION: result = avl0.find(int2) 
int2 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101641638> : <type 'instance'>
avl_REF0 = set([2, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
result = avl0.find(int3)                                                # STEP 16
ACTION: result = avl0.find(int3) 
int3 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101641638> : <type 'instance'>
avl_REF0 = set([2, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
avl0.delete(int1)                                                       # STEP 17
ACTION: avl0.delete(int1) 
int1 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101641638> : <type 'instance'>
avl_REF0 = set([2, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int2 = 19                                                               # STEP 18
ACTION: int2 = 19 
int2 = 7 : <type 'int'>
=> int2 = 19 : <type 'int'>
==================================================
int1 = 18                                                               # STEP 19
ACTION: int1 = 18 
int1 = 7 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
result = avl0.find(int1)                                                # STEP 20
ACTION: result = avl0.find(int1) 
int1 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101641638> : <type 'instance'>
avl_REF0 = set([2, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl1 = avl.AVLTree()                                                    # STEP 21
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x101616b00> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int1 = 20                                                               # STEP 22
ACTION: int1 = 20 
int1 = 18 : <type 'int'>
=> int1 = 20 : <type 'int'>
==================================================
avl0 == avl1                                                            # STEP 23
ACTION: avl0 == avl1 
avl0 = <avlbug2.AVLTree instance at 0x101641638> : <type 'instance'>
avl1 = <avlbug2.AVLTree instance at 0x101616b00> : <type 'instance'>
avl_REF0 = set([2, 14]) : <type 'set'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF1 
==================================================
int3 = 5                                                                # STEP 24
ACTION: int3 = 5 
int3 = 16 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 25
ACTION: avl1.delete(int1) 
int1 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101616b00> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int1 = 2                                                                # STEP 26
ACTION: int1 = 2 
int1 = 20 : <type 'int'>
=> int1 = 2 : <type 'int'>
==================================================
avl1 == avl0                                                            # STEP 27
ACTION: avl1 == avl0 
avl1 = <avlbug2.AVLTree instance at 0x101616b00> : <type 'instance'>
avl0 = <avlbug2.AVLTree instance at 0x101641638> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
avl_REF0 = set([2, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
avl0.delete(int3)                                                       # STEP 28
ACTION: avl0.delete(int3) 
int3 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101641638> : <type 'instance'>
avl_REF0 = set([2, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int3 = 18                                                               # STEP 29
ACTION: int3 = 18 
int3 = 5 : <type 'int'>
=> int3 = 18 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 30
ACTION: avl1.insert(int2) 
int2 = 19 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101616b00> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([19]) : <type 'set'>
==================================================
result = avl1.find(int1)                                                # STEP 31
ACTION: result = avl1.find(int1) 
int1 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101616b00> : <type 'instance'>
avl_REF1 = set([19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl1 == avl0                                                            # STEP 32
ACTION: avl1 == avl0 
avl1 = <avlbug2.AVLTree instance at 0x101616b00> : <type 'instance'>
avl0 = <avlbug2.AVLTree instance at 0x101641638> : <type 'instance'>
avl_REF1 = set([19]) : <type 'set'>
avl_REF0 = set([2, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
int2 = 16                                                               # STEP 33
ACTION: int2 = 16 
int2 = 19 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
int1 = 10                                                               # STEP 34
ACTION: int1 = 10 
int1 = 2 : <type 'int'>
=> int1 = 10 : <type 'int'>
==================================================
result = avl0.find(int3)                                                # STEP 35
ACTION: result = avl0.find(int3) 
int3 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101641638> : <type 'instance'>
avl_REF0 = set([2, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
avl0.insert(int1)                                                       # STEP 36
ACTION: avl0.insert(int1) 
int1 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101641638> : <type 'instance'>
avl_REF0 = set([2, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([2, 10, 14]) : <type 'set'>
==================================================
int1 = 12                                                               # STEP 37
ACTION: int1 = 12 
int1 = 10 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
result = avl0.find(int2)                                                # STEP 38
ACTION: result = avl0.find(int2) 
int2 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101641638> : <type 'instance'>
avl_REF0 = set([2, 10, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
result = avl0.find(int3)                                                # STEP 39
ACTION: result = avl0.find(int3) 
int3 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101641638> : <type 'instance'>
avl_REF0 = set([2, 10, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
avl1.insert(int2)                                                       # STEP 40
ACTION: avl1.insert(int2) 
int2 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101616b00> : <type 'instance'>
avl_REF1 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([16, 19]) : <type 'set'>
==================================================
int2 = 7                                                                # STEP 41
ACTION: int2 = 7 
int2 = 16 : <type 'int'>
=> int2 = 7 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 42
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x101616b00> : <type 'instance'>
avl_REF1 = set([16, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl0.delete(int1)                                                       # STEP 43
ACTION: avl0.delete(int1) 
int1 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101641638> : <type 'instance'>
avl_REF0 = set([2, 10, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int1 = 18                                                               # STEP 44
ACTION: int1 = 18 
int1 = 12 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
result = avl0.find(int0)                                                # STEP 45
ACTION: result = avl0.find(int0) 
int0 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101641638> : <type 'instance'>
avl_REF0 = set([2, 10, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
result = avl0.find(int1)                                                # STEP 46
ACTION: result = avl0.find(int1) 
int1 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101641638> : <type 'instance'>
avl_REF0 = set([2, 10, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
int1 = 16                                                               # STEP 47
ACTION: int1 = 16 
int1 = 18 : <type 'int'>
=> int1 = 16 : <type 'int'>
==================================================
int0 = 6                                                                # STEP 48
ACTION: int0 = 6 
int0 = 18 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 49
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x101616b00> : <type 'instance'>
avl_REF1 = set([16, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
int3 = 20                                                               # STEP 50
ACTION: int3 = 20 
int3 = 18 : <type 'int'>
=> int3 = 20 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 51
ACTION: avl0.delete(int3) 
int3 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101641638> : <type 'instance'>
avl_REF0 = set([2, 10, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int3 = 15                                                               # STEP 52
ACTION: int3 = 15 
int3 = 20 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 53
ACTION: avl0.insert(int1) 
int1 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101641638> : <type 'instance'>
avl_REF0 = set([2, 10, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([16, 2, 10, 14]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 54
ACTION: avl0.insert(int0) 
int0 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101641638> : <type 'instance'>
avl_REF0 = set([16, 2, 10, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([16, 2, 6, 10, 14]) : <type 'set'>
==================================================
avl1 == avl1                                                            # STEP 55
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x101616b00> : <type 'instance'>
avl_REF1 = set([16, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.delete(int1)                                                       # STEP 56
ACTION: avl1.delete(int1) 
int1 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101616b00> : <type 'instance'>
avl_REF1 = set([16, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([19]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 57
ACTION: avl0.insert(int0) 
int0 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101641638> : <type 'instance'>
avl_REF0 = set([16, 2, 6, 10, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
result = avl1.find(int2)                                                # STEP 58
ACTION: result = avl1.find(int2) 
int2 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101616b00> : <type 'instance'>
avl_REF1 = set([19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int2 = 11                                                               # STEP 59
ACTION: int2 = 11 
int2 = 7 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
int0 = 1                                                                # STEP 60
ACTION: int0 = 1 
int0 = 6 : <type 'int'>
=> int0 = 1 : <type 'int'>
==================================================
int1 = 10                                                               # STEP 61
ACTION: int1 = 10 
int1 = 16 : <type 'int'>
=> int1 = 10 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 62
ACTION: avl1.insert(int0) 
int0 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101616b00> : <type 'instance'>
avl_REF1 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([1, 19]) : <type 'set'>
==================================================
int0 = 11                                                               # STEP 63
ACTION: int0 = 11 
int0 = 1 : <type 'int'>
=> int0 = 11 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 64
ACTION: avl0.delete(int2) 
int2 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101641638> : <type 'instance'>
avl_REF0 = set([16, 2, 6, 10, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int2 = 19                                                               # STEP 65
ACTION: int2 = 19 
int2 = 11 : <type 'int'>
=> int2 = 19 : <type 'int'>
==================================================
avl1 == avl0                                                            # STEP 66
ACTION: avl1 == avl0 
avl1 = <avlbug2.AVLTree instance at 0x101616b00> : <type 'instance'>
avl0 = <avlbug2.AVLTree instance at 0x101641638> : <type 'instance'>
avl_REF1 = set([1, 19]) : <type 'set'>
avl_REF0 = set([16, 2, 6, 10, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
avl1.delete(int0)                                                       # STEP 67
ACTION: avl1.delete(int0) 
int0 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101616b00> : <type 'instance'>
avl_REF1 = set([1, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int0 = 8                                                                # STEP 68
ACTION: int0 = 8 
int0 = 11 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
result = avl0.find(int1)                                                # STEP 69
ACTION: result = avl0.find(int1) 
int1 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101641638> : <type 'instance'>
avl_REF0 = set([16, 2, 6, 10, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
int1 = 6                                                                # STEP 70
ACTION: int1 = 6 
int1 = 10 : <type 'int'>
=> int1 = 6 : <type 'int'>
==================================================
result = avl0.find(int3)                                                # STEP 71
ACTION: result = avl0.find(int3) 
int3 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101641638> : <type 'instance'>
avl_REF0 = set([16, 2, 6, 10, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
avl0.insert(int3)                                                       # STEP 72
ACTION: avl0.insert(int3) 
int3 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101641638> : <type 'instance'>
avl_REF0 = set([16, 2, 6, 10, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([2, 6, 10, 14, 15, 16]) : <type 'set'>
==================================================
result = avl1.find(int0)                                                # STEP 73
ACTION: result = avl1.find(int0) 
int0 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101616b00> : <type 'instance'>
avl_REF1 = set([1, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
result = avl1.inorder()                                                 # STEP 74
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x101616b00> : <type 'instance'>
avl_REF1 = set([1, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int0 = 6                                                                # STEP 75
ACTION: int0 = 6 
int0 = 8 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
int3 = 19                                                               # STEP 76
ACTION: int3 = 19 
int3 = 15 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
avl0 == avl0                                                            # STEP 77
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x101641638> : <type 'instance'>
avl_REF0 = set([2, 6, 10, 14, 15, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl1.insert(int3)                                                       # STEP 78
ACTION: avl1.insert(int3) 
int3 = 19 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101616b00> : <type 'instance'>
avl_REF1 = set([1, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
avl1.delete(int3)                                                       # STEP 79
ACTION: avl1.delete(int3) 
int3 = 19 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101616b00> : <type 'instance'>
avl_REF1 = set([1, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([1]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 80
ACTION: avl0.insert(int3) 
int3 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101641638> : <type 'instance'>
avl_REF0 = set([2, 6, 10, 14, 15, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([2, 6, 10, 14, 15, 16, 19]) : <type 'set'>
==================================================
int3 = 16                                                               # STEP 81
ACTION: int3 = 16 
int3 = 19 : <type 'int'>
=> int3 = 16 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 82
ACTION: avl0.delete(int1) 
int1 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101641638> : <type 'instance'>
avl_REF0 = set([2, 6, 10, 14, 15, 16, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([2, 10, 14, 15, 16, 19]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10156e368>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 0
STOPPING TESTING DUE TO TIMEOUT
8.63952333664 PERCENT COVERED
60.6086719036 TOTAL RUNTIME
6 EXECUTED
483 TOTAL TEST OPERATIONS
25.5906481743 TIME SPENT EXECUTING TEST OPERATIONS
0.0189981460571 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
25.7553784847 TIME SPENT CHECKING PROPERTIES
51.346026659 TOTAL TIME SPENT RUNNING SUT
0.00469994544983 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int3 = 16                                                                # STEP 0
int0 = 17                                                                # STEP 1
int1 = 2                                                                 # STEP 2
int2 = 16                                                                # STEP 3
avl0 = avl.AVLTree()                                                     # STEP 4
avl0.delete(int0)                                                        # STEP 5
int0 = 18                                                                # STEP 6
avl0.insert(int1)                                                        # STEP 7
int1 = 14                                                                # STEP 8
avl0.delete(int2)                                                        # STEP 9
int2 = 7                                                                # STEP 10
avl0.insert(int1)                                                       # STEP 11
avl0.insert(int1)                                                       # STEP 12
avl0 == avl0                                                            # STEP 13
int1 = 7                                                                # STEP 14
result = avl0.find(int2)                                                # STEP 15
result = avl0.find(int3)                                                # STEP 16
avl0.delete(int1)                                                       # STEP 17
int2 = 19                                                               # STEP 18
int1 = 18                                                               # STEP 19
result = avl0.find(int1)                                                # STEP 20
avl1 = avl.AVLTree()                                                    # STEP 21
int1 = 20                                                               # STEP 22
avl0 == avl1                                                            # STEP 23
int3 = 5                                                                # STEP 24
avl1.delete(int1)                                                       # STEP 25
int1 = 2                                                                # STEP 26
avl1 == avl0                                                            # STEP 27
avl0.delete(int3)                                                       # STEP 28
int3 = 18                                                               # STEP 29
avl1.insert(int2)                                                       # STEP 30
result = avl1.find(int1)                                                # STEP 31
avl1 == avl0                                                            # STEP 32
int2 = 16                                                               # STEP 33
int1 = 10                                                               # STEP 34
result = avl0.find(int3)                                                # STEP 35
avl0.insert(int1)                                                       # STEP 36
int1 = 12                                                               # STEP 37
result = avl0.find(int2)                                                # STEP 38
result = avl0.find(int3)                                                # STEP 39
avl1.insert(int2)                                                       # STEP 40
int2 = 7                                                                # STEP 41
avl1 == avl1                                                            # STEP 42
avl0.delete(int1)                                                       # STEP 43
int1 = 18                                                               # STEP 44
result = avl0.find(int0)                                                # STEP 45
result = avl0.find(int1)                                                # STEP 46
int1 = 16                                                               # STEP 47
int0 = 6                                                                # STEP 48
avl1 == avl1                                                            # STEP 49
int3 = 20                                                               # STEP 50
avl0.delete(int3)                                                       # STEP 51
int3 = 15                                                               # STEP 52
avl0.insert(int1)                                                       # STEP 53
avl0.insert(int0)                                                       # STEP 54
avl1 == avl1                                                            # STEP 55
avl1.delete(int1)                                                       # STEP 56
avl0.insert(int0)                                                       # STEP 57
result = avl1.find(int2)                                                # STEP 58
int2 = 11                                                               # STEP 59
int0 = 1                                                                # STEP 60
int1 = 10                                                               # STEP 61
avl1.insert(int0)                                                       # STEP 62
int0 = 11                                                               # STEP 63
avl0.delete(int2)                                                       # STEP 64
int2 = 19                                                               # STEP 65
avl1 == avl0                                                            # STEP 66
avl1.delete(int0)                                                       # STEP 67
int0 = 8                                                                # STEP 68
result = avl0.find(int1)                                                # STEP 69
int1 = 6                                                                # STEP 70
result = avl0.find(int3)                                                # STEP 71
avl0.insert(int3)                                                       # STEP 72
result = avl1.find(int0)                                                # STEP 73
result = avl1.inorder()                                                 # STEP 74
int0 = 6                                                                # STEP 75
int3 = 19                                                               # STEP 76
avl0 == avl0                                                            # STEP 77
avl1.insert(int3)                                                       # STEP 78
avl1.delete(int3)                                                       # STEP 79
avl0.insert(int3)                                                       # STEP 80
int3 = 16                                                               # STEP 81
avl0.delete(int1)                                                       # STEP 82
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10156e368>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
216 BRANCHES COVERED
162 STATEMENTS COVERED

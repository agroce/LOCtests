Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.62291.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  17 [2:0]
-- < 9 [1:0]
---- < 5 [0:0] L
---- > 10 [0:0] L
-- > 18 [1:-1]
---- > 19 [0:0] L
set([5, 9, 10, 17, 18, 19])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x101f91050>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
Original test has 72 steps

SAVING TEST AS failure.62291.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 18                                                                # STEP 0
ACTION: int1 = 18 
int1 = None : <type 'NoneType'>
=> int1 = 18 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 1
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x101e1b9e0> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int2 = 9                                                                 # STEP 2
ACTION: int2 = 9 
int2 = None : <type 'NoneType'>
=> int2 = 9 : <type 'int'>
==================================================
int0 = 17                                                                # STEP 3
ACTION: int0 = 17 
int0 = None : <type 'NoneType'>
=> int0 = 17 : <type 'int'>
==================================================
avl2.insert(int0)                                                        # STEP 4
ACTION: avl2.insert(int0) 
int0 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101e1b9e0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([17]) : <type 'set'>
==================================================
int0 = 3                                                                 # STEP 5
ACTION: int0 = 3 
int0 = 17 : <type 'int'>
=> int0 = 3 : <type 'int'>
==================================================
avl2.delete(int0)                                                        # STEP 6
ACTION: avl2.delete(int0) 
int0 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101e1b9e0> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.insert(int1)                                                        # STEP 7
ACTION: avl2.insert(int1) 
int1 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101e1b9e0> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([17, 18]) : <type 'set'>
==================================================
int0 = 14                                                                # STEP 8
ACTION: int0 = 14 
int0 = 3 : <type 'int'>
=> int0 = 14 : <type 'int'>
==================================================
int1 = 1                                                                 # STEP 9
ACTION: int1 = 1 
int1 = 18 : <type 'int'>
=> int1 = 1 : <type 'int'>
==================================================
int3 = 1                                                                # STEP 10
ACTION: int3 = 1 
int3 = None : <type 'NoneType'>
=> int3 = 1 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 11
ACTION: avl2.insert(int2) 
int2 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101e1b9e0> : <type 'instance'>
avl_REF2 = set([17, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([17, 18, 9]) : <type 'set'>
==================================================
int2 = 20                                                               # STEP 12
ACTION: int2 = 20 
int2 = 9 : <type 'int'>
=> int2 = 20 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 13
ACTION: avl2.insert(int3) 
int3 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101e1b9e0> : <type 'instance'>
avl_REF2 = set([17, 18, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([17, 18, 1, 9]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 14
ACTION: avl2.delete(int0) 
int0 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101e1b9e0> : <type 'instance'>
avl_REF2 = set([17, 18, 1, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl1 = avl.AVLTree()                                                    # STEP 15
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x1026ad440> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 16
ACTION: avl1.delete(int0) 
int0 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1026ad440> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl0 = avl.AVLTree()                                                    # STEP 17
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x1026ad098> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 18
ACTION: avl0.insert(int3) 
int3 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1026ad098> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([1]) : <type 'set'>
==================================================
int3 = 8                                                                # STEP 19
ACTION: int3 = 8 
int3 = 1 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 20
ACTION: avl0.insert(int2) 
int2 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1026ad098> : <type 'instance'>
avl_REF0 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([1, 20]) : <type 'set'>
==================================================
int2 = 7                                                                # STEP 21
ACTION: int2 = 7 
int2 = 20 : <type 'int'>
=> int2 = 7 : <type 'int'>
==================================================
result = avl0.find(int3)                                                # STEP 22
ACTION: result = avl0.find(int3) 
int3 = 8 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1026ad098> : <type 'instance'>
avl_REF0 = set([1, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
avl2.delete(int1)                                                       # STEP 23
ACTION: avl2.delete(int1) 
int1 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101e1b9e0> : <type 'instance'>
avl_REF2 = set([17, 18, 1, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([17, 18, 9]) : <type 'set'>
==================================================
int1 = 7                                                                # STEP 24
ACTION: int1 = 7 
int1 = 1 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 25
ACTION: avl1.insert(int1) 
int1 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1026ad440> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([7]) : <type 'set'>
==================================================
int0 = 16                                                               # STEP 26
ACTION: int0 = 16 
int0 = 14 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
int1 = 7                                                                # STEP 27
ACTION: int1 = 7 
int1 = 7 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 28
ACTION: avl0.delete(int0) 
int0 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1026ad098> : <type 'instance'>
avl_REF0 = set([1, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.delete(int0)                                                       # STEP 29
ACTION: avl0.delete(int0) 
int0 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1026ad098> : <type 'instance'>
avl_REF0 = set([1, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int3 = 4                                                                # STEP 30
ACTION: int3 = 4 
int3 = 8 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 31
ACTION: avl1.insert(int2) 
int2 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1026ad440> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
int2 = 6                                                                # STEP 32
ACTION: int2 = 6 
int2 = 7 : <type 'int'>
=> int2 = 6 : <type 'int'>
==================================================
result = avl0.find(int2)                                                # STEP 33
ACTION: result = avl0.find(int2) 
int2 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1026ad098> : <type 'instance'>
avl_REF0 = set([1, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl0.insert(int2)                                                       # STEP 34
ACTION: avl0.insert(int2) 
int2 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1026ad098> : <type 'instance'>
avl_REF0 = set([1, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([1, 20, 6]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 35
ACTION: avl0.insert(int3) 
int3 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1026ad098> : <type 'instance'>
avl_REF0 = set([1, 20, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([1, 20, 6, 4]) : <type 'set'>
==================================================
int3 = 10                                                               # STEP 36
ACTION: int3 = 10 
int3 = 4 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 37
ACTION: avl1.insert(int0) 
int0 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1026ad440> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([16, 7]) : <type 'set'>
==================================================
int0 = 20                                                               # STEP 38
ACTION: int0 = 20 
int0 = 16 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
int2 = 5                                                                # STEP 39
ACTION: int2 = 5 
int2 = 6 : <type 'int'>
=> int2 = 5 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 40
ACTION: avl1.delete(int1) 
int1 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1026ad440> : <type 'instance'>
avl_REF1 = set([16, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([16]) : <type 'set'>
==================================================
int1 = 10                                                               # STEP 41
ACTION: int1 = 10 
int1 = 7 : <type 'int'>
=> int1 = 10 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 42
ACTION: avl1.delete(int3) 
int3 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1026ad440> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl2.insert(int2)                                                       # STEP 43
ACTION: avl2.insert(int2) 
int2 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101e1b9e0> : <type 'instance'>
avl_REF2 = set([17, 18, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([17, 18, 5, 9]) : <type 'set'>
==================================================
int3 = 4                                                                # STEP 44
ACTION: int3 = 4 
int3 = 10 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
int2 = 19                                                               # STEP 45
ACTION: int2 = 19 
int2 = 5 : <type 'int'>
=> int2 = 19 : <type 'int'>
==================================================
result = avl2.find(int0)                                                # STEP 46
ACTION: result = avl2.find(int0) 
int0 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101e1b9e0> : <type 'instance'>
avl_REF2 = set([17, 18, 5, 9]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
int0 = 5                                                                # STEP 47
ACTION: int0 = 5 
int0 = 20 : <type 'int'>
=> int0 = 5 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 48
ACTION: avl2.delete(int2) 
int2 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101e1b9e0> : <type 'instance'>
avl_REF2 = set([17, 18, 5, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.insert(int2)                                                       # STEP 49
ACTION: avl2.insert(int2) 
int2 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101e1b9e0> : <type 'instance'>
avl_REF2 = set([17, 18, 5, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([5, 9, 17, 18, 19]) : <type 'set'>
==================================================
int2 = 14                                                               # STEP 50
ACTION: int2 = 14 
int2 = 19 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 51
ACTION: avl1.delete(int0) 
int0 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1026ad440> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl0.delete(int0)                                                       # STEP 52
ACTION: avl0.delete(int0) 
int0 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1026ad098> : <type 'instance'>
avl_REF0 = set([1, 20, 6, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.delete(int2)                                                       # STEP 53
ACTION: avl0.delete(int2) 
int2 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1026ad098> : <type 'instance'>
avl_REF0 = set([1, 20, 6, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int2 = 1                                                                # STEP 54
ACTION: int2 = 1 
int2 = 14 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 55
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x1026ad440> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl2.delete(int2)                                                       # STEP 56
ACTION: avl2.delete(int2) 
int2 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101e1b9e0> : <type 'instance'>
avl_REF2 = set([5, 9, 17, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.insert(int1)                                                       # STEP 57
ACTION: avl2.insert(int1) 
int1 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101e1b9e0> : <type 'instance'>
avl_REF2 = set([5, 9, 17, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([5, 9, 10, 17, 18, 19]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 58
ACTION: avl0.insert(int2) 
int2 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1026ad098> : <type 'instance'>
avl_REF0 = set([1, 20, 6, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
result = avl0.inorder()                                                 # STEP 59
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x1026ad098> : <type 'instance'>
avl_REF0 = set([1, 20, 6, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int0 = 20                                                               # STEP 60
ACTION: int0 = 20 
int0 = 5 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 61
ACTION: avl1.delete(int1) 
int1 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1026ad440> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int1 = 17                                                               # STEP 62
ACTION: int1 = 17 
int1 = 10 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 63
ACTION: avl2.delete(int2) 
int2 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101e1b9e0> : <type 'instance'>
avl_REF2 = set([5, 9, 10, 17, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int2 = 13                                                               # STEP 64
ACTION: int2 = 13 
int2 = 1 : <type 'int'>
=> int2 = 13 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 65
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x1026ad440> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int1)                                                       # STEP 66
ACTION: avl1.insert(int1) 
int1 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1026ad440> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([16, 17]) : <type 'set'>
==================================================
int1 = 7                                                                # STEP 67
ACTION: int1 = 7 
int1 = 17 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
avl2.display()                                                          # STEP 68
ACTION: avl2.display() 
avl2 = <avlbug2.AVLTree instance at 0x101e1b9e0> : <type 'instance'>
avl_REF2 = set([5, 9, 10, 17, 18, 19]) : <type 'set'>
  17 [2:0]
-- < 9 [1:0]
---- < 5 [0:0] L
---- > 10 [0:0] L
-- > 18 [1:-1]
---- > 19 [0:0] L
REFERENCE ACTION: print(avl_REF2) 
set([5, 9, 10, 17, 18, 19])
==================================================
avl1.insert(int0)                                                       # STEP 69
ACTION: avl1.insert(int0) 
int0 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1026ad440> : <type 'instance'>
avl_REF1 = set([16, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([16, 17, 20]) : <type 'set'>
==================================================
result = avl1.find(int3)                                                # STEP 70
ACTION: result = avl1.find(int3) 
int3 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1026ad440> : <type 'instance'>
avl_REF1 = set([16, 17, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl0.delete(int0)                                                       # STEP 71
ACTION: avl0.delete(int0) 
int0 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1026ad098> : <type 'instance'>
avl_REF0 = set([1, 20, 6, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([1, 6, 4]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x101ce9710>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
  11 [2:0]
-- < 4 [1:-1]
---- > 8 [0:0] L
-- > 13 [1:0]
---- < 12 [0:0] L
---- > 18 [0:0] L
set([4, 8, 11, 12, 13, 18])
  11 [2:0]
-- < 4 [1:-1]
---- > 8 [0:0] L
-- > 13 [1:0]
---- < 12 [0:0] L
---- > 18 [0:0] L
set([4, 8, 11, 12, 13, 18])
  11 [2:0]
-- < 4 [1:-1]
---- > 8 [0:0] L
-- > 13 [1:0]
---- < 12 [0:0] L
---- > 18 [0:0] L
set([4, 8, 11, 12, 13, 18])
  11 [3:-1]
-- < 7 [1:0]
---- < 4 [0:0] L
---- > 8 [0:0] L
-- > 13 [2:-1]
---- < 12 [0:0] L
---- > 18 [1:1]
------ < 17 [0:0] L
set([4, 7, 8, 11, 12, 13, 17, 18])
TEST #3 STEP #46 (0:00:30.073628) Mon May  1 18:09:17 2017 [ 159 stmts 210 branches ]
  10 [2:0]
-- < 4 [1:0]
---- < 1 [0:0] L
---- > 9 [0:0] L
-- > 12 [1:-1]
---- > 13 [0:0] L
set([1, 4, 9, 10, 12, 13])
  10 [2:0]
-- < 5 [1:0]
---- < 1 [0:0] L
---- > 9 [0:0] L
-- > 13 [1:0]
---- < 12 [0:0] L
---- > 15 [0:0] L
set([1, 5, 9, 10, 12, 13, 15])
  13 [2:0]
-- < 11 [1:1]
---- < 4 [0:0] L
-- > 15 [1:0]
---- < 14 [0:0] L
---- > 16 [0:0] L
set([4, 11, 13, 14, 15, 16])
  13 [2:0]
-- < 11 [1:1]
---- < 4 [0:0] L
-- > 15 [1:0]
---- < 14 [0:0] L
---- > 16 [0:0] L
set([4, 11, 13, 14, 15, 16])
  13 [2:0]
-- < 11 [1:1]
---- < 4 [0:0] L
-- > 15 [1:0]
---- < 14 [0:0] L
---- > 16 [0:0] L
set([4, 11, 13, 14, 15, 16])
  13 [3:-1]
-- < 7 [1:0]
---- < 4 [0:0] L
---- > 11 [0:0] L
-- > 15 [2:-1]
---- < 14 [0:0] L
---- > 16 [1:-1]
------ > 19 [0:0] L
set([4, 7, 11, 13, 14, 15, 16, 19])
  13 [3:-1]
-- < 7 [1:0]
---- < 4 [0:0] L
---- > 11 [0:0] L
-- > 15 [2:-1]
---- < 14 [0:0] L
---- > 16 [1:-1]
------ > 19 [0:0] L
set([4, 7, 11, 13, 14, 15, 16, 19])
  13 [3:0]
-- < 7 [2:-1]
---- < 4 [0:0] L
---- > 11 [1:1]
------ < 10 [0:0] L
-- > 15 [2:-1]
---- < 14 [0:0] L
---- > 16 [1:-1]
------ > 19 [0:0] L
set([4, 7, 10, 11, 13, 14, 15, 16, 19])
  13 [3:0]
-- < 7 [2:-1]
---- < 4 [0:0] L
---- > 11 [1:1]
------ < 10 [0:0] L
-- > 15 [2:-1]
---- < 14 [0:0] L
---- > 16 [1:-1]
------ > 19 [0:0] L
set([4, 7, 10, 11, 13, 14, 15, 16, 19])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10227cf80>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
Original test has 92 steps

SAVING TEST AS failure.62291.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 14                                                                # STEP 0
ACTION: int2 = 14 
int2 = None : <type 'NoneType'>
=> int2 = 14 : <type 'int'>
==================================================
int1 = 1                                                                 # STEP 1
ACTION: int1 = 1 
int1 = None : <type 'NoneType'>
=> int1 = 1 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 2
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x102278830> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.delete(int1)                                                        # STEP 3
ACTION: avl0.delete(int1) 
int1 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102278830> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.delete(int2)                                                        # STEP 4
ACTION: avl0.delete(int2) 
int2 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102278830> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.delete(int1)                                                        # STEP 5
ACTION: avl0.delete(int1) 
int1 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102278830> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.insert(int2)                                                        # STEP 6
ACTION: avl0.insert(int2) 
int2 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102278830> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([14]) : <type 'set'>
==================================================
result = avl0.inorder()                                                  # STEP 7
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x102278830> : <type 'instance'>
avl_REF0 = set([14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int2)                                                        # STEP 8
ACTION: avl0.insert(int2) 
int2 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102278830> : <type 'instance'>
avl_REF0 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl0.delete(int2)                                                        # STEP 9
ACTION: avl0.delete(int2) 
int2 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102278830> : <type 'instance'>
avl_REF0 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
result = avl0.find(int2)                                                # STEP 10
ACTION: result = avl0.find(int2) 
int2 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102278830> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
int3 = 17                                                               # STEP 11
ACTION: int3 = 17 
int3 = None : <type 'NoneType'>
=> int3 = 17 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 12
ACTION: avl0.insert(int1) 
int1 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102278830> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([1]) : <type 'set'>
==================================================
int2 = 14                                                               # STEP 13
ACTION: int2 = 14 
int2 = 14 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 14
ACTION: avl0.insert(int2) 
int2 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102278830> : <type 'instance'>
avl_REF0 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([1, 14]) : <type 'set'>
==================================================
result = avl0.find(int2)                                                # STEP 15
ACTION: result = avl0.find(int2) 
int2 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102278830> : <type 'instance'>
avl_REF0 = set([1, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl0.insert(int1)                                                       # STEP 16
ACTION: avl0.insert(int1) 
int1 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102278830> : <type 'instance'>
avl_REF0 = set([1, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
int1 = 14                                                               # STEP 17
ACTION: int1 = 14 
int1 = 1 : <type 'int'>
=> int1 = 14 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 18
ACTION: avl0.delete(int2) 
int2 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102278830> : <type 'instance'>
avl_REF0 = set([1, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([1]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 19
ACTION: avl0.delete(int3) 
int3 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102278830> : <type 'instance'>
avl_REF0 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int2 = 9                                                                # STEP 20
ACTION: int2 = 9 
int2 = 14 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 21
ACTION: avl0.delete(int1) 
int1 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102278830> : <type 'instance'>
avl_REF0 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.delete(int3)                                                       # STEP 22
ACTION: avl0.delete(int3) 
int3 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102278830> : <type 'instance'>
avl_REF0 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.delete(int2)                                                       # STEP 23
ACTION: avl0.delete(int2) 
int2 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102278830> : <type 'instance'>
avl_REF0 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
result = avl0.find(int1)                                                # STEP 24
ACTION: result = avl0.find(int1) 
int1 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102278830> : <type 'instance'>
avl_REF0 = set([1]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
int2 = 1                                                                # STEP 25
ACTION: int2 = 1 
int2 = 9 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
int0 = 16                                                               # STEP 26
ACTION: int0 = 16 
int0 = None : <type 'NoneType'>
=> int0 = 16 : <type 'int'>
==================================================
int3 = 14                                                               # STEP 27
ACTION: int3 = 14 
int3 = 17 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
result = avl0.find(int0)                                                # STEP 28
ACTION: result = avl0.find(int0) 
int0 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102278830> : <type 'instance'>
avl_REF0 = set([1]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
avl0.delete(int0)                                                       # STEP 29
ACTION: avl0.delete(int0) 
int0 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102278830> : <type 'instance'>
avl_REF0 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.delete(int1)                                                       # STEP 30
ACTION: avl0.delete(int1) 
int1 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102278830> : <type 'instance'>
avl_REF0 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int0 = 16                                                               # STEP 31
ACTION: int0 = 16 
int0 = 16 : <type 'int'>
==================================================
int1 = 13                                                               # STEP 32
ACTION: int1 = 13 
int1 = 14 : <type 'int'>
=> int1 = 13 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 33
ACTION: avl0.insert(int1) 
int1 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102278830> : <type 'instance'>
avl_REF0 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([1, 13]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 34
ACTION: avl0.delete(int2) 
int2 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102278830> : <type 'instance'>
avl_REF0 = set([1, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([13]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 35
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x102278830> : <type 'instance'>
avl_REF0 = set([13]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int0)                                                       # STEP 36
ACTION: avl0.insert(int0) 
int0 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102278830> : <type 'instance'>
avl_REF0 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([16, 13]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 37
ACTION: avl0.insert(int0) 
int0 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102278830> : <type 'instance'>
avl_REF0 = set([16, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
int0 = 11                                                               # STEP 38
ACTION: int0 = 11 
int0 = 16 : <type 'int'>
=> int0 = 11 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 39
ACTION: avl0.delete(int0) 
int0 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102278830> : <type 'instance'>
avl_REF0 = set([16, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl1 = avl.AVLTree()                                                    # STEP 40
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x1025d00e0> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 41
ACTION: avl0.insert(int0) 
int0 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102278830> : <type 'instance'>
avl_REF0 = set([16, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([16, 11, 13]) : <type 'set'>
==================================================
result = avl1.find(int0)                                                # STEP 42
ACTION: result = avl1.find(int0) 
int0 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1025d00e0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
result = avl1.find(int3)                                                # STEP 43
ACTION: result = avl1.find(int3) 
int3 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1025d00e0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl1.insert(int2)                                                       # STEP 44
ACTION: avl1.insert(int2) 
int2 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1025d00e0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([1]) : <type 'set'>
==================================================
int0 = 19                                                               # STEP 45
ACTION: int0 = 19 
int0 = 11 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
int1 = 4                                                                # STEP 46
ACTION: int1 = 4 
int1 = 13 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 47
ACTION: avl1.delete(int2) 
int2 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1025d00e0> : <type 'instance'>
avl_REF1 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 48
ACTION: avl1.insert(int3) 
int3 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1025d00e0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([14]) : <type 'set'>
==================================================
int2 = 15                                                               # STEP 49
ACTION: int2 = 15 
int2 = 1 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 50
ACTION: avl0.insert(int1) 
int1 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102278830> : <type 'instance'>
avl_REF0 = set([16, 11, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([4, 11, 13, 16]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 51
ACTION: avl1.insert(int0) 
int0 = 19 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1025d00e0> : <type 'instance'>
avl_REF1 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([19, 14]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 52
ACTION: avl0.insert(int2) 
int2 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102278830> : <type 'instance'>
avl_REF0 = set([4, 11, 13, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([4, 11, 13, 15, 16]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 53
ACTION: avl0.insert(int3) 
int3 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102278830> : <type 'instance'>
avl_REF0 = set([4, 11, 13, 15, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([4, 11, 13, 14, 15, 16]) : <type 'set'>
==================================================
avl0.display()                                                          # STEP 54
ACTION: avl0.display() 
avl0 = <avlbug2.AVLTree instance at 0x102278830> : <type 'instance'>
avl_REF0 = set([4, 11, 13, 14, 15, 16]) : <type 'set'>
  13 [2:0]
-- < 11 [1:1]
---- < 4 [0:0] L
-- > 15 [1:0]
---- < 14 [0:0] L
---- > 16 [0:0] L
REFERENCE ACTION: print(avl_REF0) 
set([4, 11, 13, 14, 15, 16])
==================================================
int3 = 4                                                                # STEP 55
ACTION: int3 = 4 
int3 = 14 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 56
ACTION: avl1.delete(int2) 
int2 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1025d00e0> : <type 'instance'>
avl_REF1 = set([19, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int1 = 7                                                                # STEP 57
ACTION: int1 = 7 
int1 = 4 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 58
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x102278830> : <type 'instance'>
avl_REF0 = set([4, 11, 13, 14, 15, 16]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int3)                                                       # STEP 59
ACTION: avl0.insert(int3) 
int3 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102278830> : <type 'instance'>
avl_REF0 = set([4, 11, 13, 14, 15, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
int3 = 8                                                                # STEP 60
ACTION: int3 = 8 
int3 = 4 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
int2 = 13                                                               # STEP 61
ACTION: int2 = 13 
int2 = 15 : <type 'int'>
=> int2 = 13 : <type 'int'>
==================================================
avl0.display()                                                          # STEP 62
ACTION: avl0.display() 
avl0 = <avlbug2.AVLTree instance at 0x102278830> : <type 'instance'>
avl_REF0 = set([4, 11, 13, 14, 15, 16]) : <type 'set'>
  13 [2:0]
-- < 11 [1:1]
---- < 4 [0:0] L
-- > 15 [1:0]
---- < 14 [0:0] L
---- > 16 [0:0] L
REFERENCE ACTION: print(avl_REF0) 
set([4, 11, 13, 14, 15, 16])
==================================================
avl0.display()                                                          # STEP 63
ACTION: avl0.display() 
avl0 = <avlbug2.AVLTree instance at 0x102278830> : <type 'instance'>
avl_REF0 = set([4, 11, 13, 14, 15, 16]) : <type 'set'>
  13 [2:0]
-- < 11 [1:1]
---- < 4 [0:0] L
-- > 15 [1:0]
---- < 14 [0:0] L
---- > 16 [0:0] L
REFERENCE ACTION: print(avl_REF0) 
set([4, 11, 13, 14, 15, 16])
==================================================
avl0.insert(int0)                                                       # STEP 64
ACTION: avl0.insert(int0) 
int0 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102278830> : <type 'instance'>
avl_REF0 = set([4, 11, 13, 14, 15, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([4, 11, 13, 14, 15, 16, 19]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 65
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x1025d00e0> : <type 'instance'>
avl_REF1 = set([19, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl0.insert(int1)                                                       # STEP 66
ACTION: avl0.insert(int1) 
int1 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102278830> : <type 'instance'>
avl_REF0 = set([4, 11, 13, 14, 15, 16, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([4, 7, 11, 13, 14, 15, 16, 19]) : <type 'set'>
==================================================
int1 = 10                                                               # STEP 67
ACTION: int1 = 10 
int1 = 7 : <type 'int'>
=> int1 = 10 : <type 'int'>
==================================================
int0 = 13                                                               # STEP 68
ACTION: int0 = 13 
int0 = 19 : <type 'int'>
=> int0 = 13 : <type 'int'>
==================================================
avl0.display()                                                          # STEP 69
ACTION: avl0.display() 
avl0 = <avlbug2.AVLTree instance at 0x102278830> : <type 'instance'>
avl_REF0 = set([4, 7, 11, 13, 14, 15, 16, 19]) : <type 'set'>
  13 [3:-1]
-- < 7 [1:0]
---- < 4 [0:0] L
---- > 11 [0:0] L
-- > 15 [2:-1]
---- < 14 [0:0] L
---- > 16 [1:-1]
------ > 19 [0:0] L
REFERENCE ACTION: print(avl_REF0) 
set([4, 7, 11, 13, 14, 15, 16, 19])
==================================================
avl0.display()                                                          # STEP 70
ACTION: avl0.display() 
avl0 = <avlbug2.AVLTree instance at 0x102278830> : <type 'instance'>
avl_REF0 = set([4, 7, 11, 13, 14, 15, 16, 19]) : <type 'set'>
  13 [3:-1]
-- < 7 [1:0]
---- < 4 [0:0] L
---- > 11 [0:0] L
-- > 15 [2:-1]
---- < 14 [0:0] L
---- > 16 [1:-1]
------ > 19 [0:0] L
REFERENCE ACTION: print(avl_REF0) 
set([4, 7, 11, 13, 14, 15, 16, 19])
==================================================
avl1.delete(int2)                                                       # STEP 71
ACTION: avl1.delete(int2) 
int2 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1025d00e0> : <type 'instance'>
avl_REF1 = set([19, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int2 = 10                                                               # STEP 72
ACTION: int2 = 10 
int2 = 13 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 73
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x102278830> : <type 'instance'>
avl_REF0 = set([4, 7, 11, 13, 14, 15, 16, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int1)                                                       # STEP 74
ACTION: avl0.insert(int1) 
int1 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102278830> : <type 'instance'>
avl_REF0 = set([4, 7, 11, 13, 14, 15, 16, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([4, 7, 10, 11, 13, 14, 15, 16, 19]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 75
ACTION: avl1.delete(int3) 
int3 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1025d00e0> : <type 'instance'>
avl_REF1 = set([19, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl0.display()                                                          # STEP 76
ACTION: avl0.display() 
avl0 = <avlbug2.AVLTree instance at 0x102278830> : <type 'instance'>
avl_REF0 = set([4, 7, 10, 11, 13, 14, 15, 16, 19]) : <type 'set'>
  13 [3:0]
-- < 7 [2:-1]
---- < 4 [0:0] L
---- > 11 [1:1]
------ < 10 [0:0] L
-- > 15 [2:-1]
---- < 14 [0:0] L
---- > 16 [1:-1]
------ > 19 [0:0] L
REFERENCE ACTION: print(avl_REF0) 
set([4, 7, 10, 11, 13, 14, 15, 16, 19])
==================================================
int3 = 19                                                               # STEP 77
ACTION: int3 = 19 
int3 = 8 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
avl0 == avl0                                                            # STEP 78
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x102278830> : <type 'instance'>
avl_REF0 = set([4, 7, 10, 11, 13, 14, 15, 16, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl1.insert(int0)                                                       # STEP 79
ACTION: avl1.insert(int0) 
int0 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1025d00e0> : <type 'instance'>
avl_REF1 = set([19, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([19, 13, 14]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 80
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x1025d00e0> : <type 'instance'>
avl_REF1 = set([19, 13, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
result = avl0.inorder()                                                 # STEP 81
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x102278830> : <type 'instance'>
avl_REF0 = set([4, 7, 10, 11, 13, 14, 15, 16, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0 == avl1                                                            # STEP 82
ACTION: avl0 == avl1 
avl0 = <avlbug2.AVLTree instance at 0x102278830> : <type 'instance'>
avl1 = <avlbug2.AVLTree instance at 0x1025d00e0> : <type 'instance'>
avl_REF0 = set([4, 7, 10, 11, 13, 14, 15, 16, 19]) : <type 'set'>
avl_REF1 = set([19, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF1 
==================================================
avl0.delete(int2)                                                       # STEP 83
ACTION: avl0.delete(int2) 
int2 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102278830> : <type 'instance'>
avl_REF0 = set([4, 7, 10, 11, 13, 14, 15, 16, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([4, 7, 11, 13, 14, 15, 16, 19]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 84
ACTION: avl0.insert(int2) 
int2 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102278830> : <type 'instance'>
avl_REF0 = set([4, 7, 11, 13, 14, 15, 16, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([4, 7, 10, 11, 13, 14, 15, 16, 19]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 85
ACTION: avl1.delete(int1) 
int1 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1025d00e0> : <type 'instance'>
avl_REF1 = set([19, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl0.display()                                                          # STEP 86
ACTION: avl0.display() 
avl0 = <avlbug2.AVLTree instance at 0x102278830> : <type 'instance'>
avl_REF0 = set([4, 7, 10, 11, 13, 14, 15, 16, 19]) : <type 'set'>
  13 [3:0]
-- < 7 [2:-1]
---- < 4 [0:0] L
---- > 11 [1:1]
------ < 10 [0:0] L
-- > 15 [2:-1]
---- < 14 [0:0] L
---- > 16 [1:-1]
------ > 19 [0:0] L
REFERENCE ACTION: print(avl_REF0) 
set([4, 7, 10, 11, 13, 14, 15, 16, 19])
==================================================
avl1.insert(int0)                                                       # STEP 87
ACTION: avl1.insert(int0) 
int0 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1025d00e0> : <type 'instance'>
avl_REF1 = set([19, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.delete(int3)                                                       # STEP 88
ACTION: avl1.delete(int3) 
int3 = 19 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1025d00e0> : <type 'instance'>
avl_REF1 = set([19, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([13, 14]) : <type 'set'>
==================================================
int3 = 13                                                               # STEP 89
ACTION: int3 = 13 
int3 = 19 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
int1 = 3                                                                # STEP 90
ACTION: int1 = 3 
int1 = 10 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 91
ACTION: avl0.delete(int0) 
int0 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102278830> : <type 'instance'>
avl_REF0 = set([4, 7, 10, 11, 13, 14, 15, 16, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([4, 7, 10, 11, 14, 15, 16, 19]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1025cad88>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 0
STOPPING TESTING DUE TO TIMEOUT
8.21242019733 PERCENT COVERED
65.4069011211 TOTAL RUNTIME
6 EXECUTED
464 TOTAL TEST OPERATIONS
24.0043756962 TIME SPENT EXECUTING TEST OPERATIONS
0.0509088039398 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
24.0249984264 TIME SPENT CHECKING PROPERTIES
48.0293741226 TOTAL TIME SPENT RUNNING SUT
0.0039176940918 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
2 FAILED
0 REPEATS OF FAILURES
2 ACTUAL DISTINCT FAILURES

FAILURE 0
int1 = 18                                                                # STEP 0
avl2 = avl.AVLTree()                                                     # STEP 1
int2 = 9                                                                 # STEP 2
int0 = 17                                                                # STEP 3
avl2.insert(int0)                                                        # STEP 4
int0 = 3                                                                 # STEP 5
avl2.delete(int0)                                                        # STEP 6
avl2.insert(int1)                                                        # STEP 7
int0 = 14                                                                # STEP 8
int1 = 1                                                                 # STEP 9
int3 = 1                                                                # STEP 10
avl2.insert(int2)                                                       # STEP 11
int2 = 20                                                               # STEP 12
avl2.insert(int3)                                                       # STEP 13
avl2.delete(int0)                                                       # STEP 14
avl1 = avl.AVLTree()                                                    # STEP 15
avl1.delete(int0)                                                       # STEP 16
avl0 = avl.AVLTree()                                                    # STEP 17
avl0.insert(int3)                                                       # STEP 18
int3 = 8                                                                # STEP 19
avl0.insert(int2)                                                       # STEP 20
int2 = 7                                                                # STEP 21
result = avl0.find(int3)                                                # STEP 22
avl2.delete(int1)                                                       # STEP 23
int1 = 7                                                                # STEP 24
avl1.insert(int1)                                                       # STEP 25
int0 = 16                                                               # STEP 26
int1 = 7                                                                # STEP 27
avl0.delete(int0)                                                       # STEP 28
avl0.delete(int0)                                                       # STEP 29
int3 = 4                                                                # STEP 30
avl1.insert(int2)                                                       # STEP 31
int2 = 6                                                                # STEP 32
result = avl0.find(int2)                                                # STEP 33
avl0.insert(int2)                                                       # STEP 34
avl0.insert(int3)                                                       # STEP 35
int3 = 10                                                               # STEP 36
avl1.insert(int0)                                                       # STEP 37
int0 = 20                                                               # STEP 38
int2 = 5                                                                # STEP 39
avl1.delete(int1)                                                       # STEP 40
int1 = 10                                                               # STEP 41
avl1.delete(int3)                                                       # STEP 42
avl2.insert(int2)                                                       # STEP 43
int3 = 4                                                                # STEP 44
int2 = 19                                                               # STEP 45
result = avl2.find(int0)                                                # STEP 46
int0 = 5                                                                # STEP 47
avl2.delete(int2)                                                       # STEP 48
avl2.insert(int2)                                                       # STEP 49
int2 = 14                                                               # STEP 50
avl1.delete(int0)                                                       # STEP 51
avl0.delete(int0)                                                       # STEP 52
avl0.delete(int2)                                                       # STEP 53
int2 = 1                                                                # STEP 54
result = avl1.inorder()                                                 # STEP 55
avl2.delete(int2)                                                       # STEP 56
avl2.insert(int1)                                                       # STEP 57
avl0.insert(int2)                                                       # STEP 58
result = avl0.inorder()                                                 # STEP 59
int0 = 20                                                               # STEP 60
avl1.delete(int1)                                                       # STEP 61
int1 = 17                                                               # STEP 62
avl2.delete(int2)                                                       # STEP 63
int2 = 13                                                               # STEP 64
result = avl1.inorder()                                                 # STEP 65
avl1.insert(int1)                                                       # STEP 66
int1 = 7                                                                # STEP 67
avl2.display()                                                          # STEP 68
avl1.insert(int0)                                                       # STEP 69
result = avl1.find(int3)                                                # STEP 70
avl0.delete(int0)                                                       # STEP 71
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x101ce9710>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE 1
int2 = 14                                                                # STEP 0
int1 = 1                                                                 # STEP 1
avl0 = avl.AVLTree()                                                     # STEP 2
avl0.delete(int1)                                                        # STEP 3
avl0.delete(int2)                                                        # STEP 4
avl0.delete(int1)                                                        # STEP 5
avl0.insert(int2)                                                        # STEP 6
result = avl0.inorder()                                                  # STEP 7
avl0.insert(int2)                                                        # STEP 8
avl0.delete(int2)                                                        # STEP 9
result = avl0.find(int2)                                                # STEP 10
int3 = 17                                                               # STEP 11
avl0.insert(int1)                                                       # STEP 12
int2 = 14                                                               # STEP 13
avl0.insert(int2)                                                       # STEP 14
result = avl0.find(int2)                                                # STEP 15
avl0.insert(int1)                                                       # STEP 16
int1 = 14                                                               # STEP 17
avl0.delete(int2)                                                       # STEP 18
avl0.delete(int3)                                                       # STEP 19
int2 = 9                                                                # STEP 20
avl0.delete(int1)                                                       # STEP 21
avl0.delete(int3)                                                       # STEP 22
avl0.delete(int2)                                                       # STEP 23
result = avl0.find(int1)                                                # STEP 24
int2 = 1                                                                # STEP 25
int0 = 16                                                               # STEP 26
int3 = 14                                                               # STEP 27
result = avl0.find(int0)                                                # STEP 28
avl0.delete(int0)                                                       # STEP 29
avl0.delete(int1)                                                       # STEP 30
int0 = 16                                                               # STEP 31
int1 = 13                                                               # STEP 32
avl0.insert(int1)                                                       # STEP 33
avl0.delete(int2)                                                       # STEP 34
result = avl0.inorder()                                                 # STEP 35
avl0.insert(int0)                                                       # STEP 36
avl0.insert(int0)                                                       # STEP 37
int0 = 11                                                               # STEP 38
avl0.delete(int0)                                                       # STEP 39
avl1 = avl.AVLTree()                                                    # STEP 40
avl0.insert(int0)                                                       # STEP 41
result = avl1.find(int0)                                                # STEP 42
result = avl1.find(int3)                                                # STEP 43
avl1.insert(int2)                                                       # STEP 44
int0 = 19                                                               # STEP 45
int1 = 4                                                                # STEP 46
avl1.delete(int2)                                                       # STEP 47
avl1.insert(int3)                                                       # STEP 48
int2 = 15                                                               # STEP 49
avl0.insert(int1)                                                       # STEP 50
avl1.insert(int0)                                                       # STEP 51
avl0.insert(int2)                                                       # STEP 52
avl0.insert(int3)                                                       # STEP 53
avl0.display()                                                          # STEP 54
int3 = 4                                                                # STEP 55
avl1.delete(int2)                                                       # STEP 56
int1 = 7                                                                # STEP 57
result = avl0.inorder()                                                 # STEP 58
avl0.insert(int3)                                                       # STEP 59
int3 = 8                                                                # STEP 60
int2 = 13                                                               # STEP 61
avl0.display()                                                          # STEP 62
avl0.display()                                                          # STEP 63
avl0.insert(int0)                                                       # STEP 64
result = avl1.inorder()                                                 # STEP 65
avl0.insert(int1)                                                       # STEP 66
int1 = 10                                                               # STEP 67
int0 = 13                                                               # STEP 68
avl0.display()                                                          # STEP 69
avl0.display()                                                          # STEP 70
avl1.delete(int2)                                                       # STEP 71
int2 = 10                                                               # STEP 72
result = avl0.inorder()                                                 # STEP 73
avl0.insert(int1)                                                       # STEP 74
avl1.delete(int3)                                                       # STEP 75
avl0.display()                                                          # STEP 76
int3 = 19                                                               # STEP 77
avl0 == avl0                                                            # STEP 78
avl1.insert(int0)                                                       # STEP 79
result = avl1.inorder()                                                 # STEP 80
result = avl0.inorder()                                                 # STEP 81
avl0 == avl1                                                            # STEP 82
avl0.delete(int2)                                                       # STEP 83
avl0.insert(int2)                                                       # STEP 84
avl1.delete(int1)                                                       # STEP 85
avl0.display()                                                          # STEP 86
avl1.insert(int0)                                                       # STEP 87
avl1.delete(int3)                                                       # STEP 88
int3 = 13                                                               # STEP 89
int1 = 3                                                                # STEP 90
avl0.delete(int0)                                                       # STEP 91
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1025cad88>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
214 BRANCHES COVERED
161 STATEMENTS COVERED

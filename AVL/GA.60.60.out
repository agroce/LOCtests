Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.14547.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1022a9170>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
Original test has 90 steps

SAVING TEST AS failure.14547.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 7                                                                 # STEP 0
ACTION: int1 = 7 
int1 = None : <type 'NoneType'>
=> int1 = 7 : <type 'int'>
==================================================
int2 = 3                                                                 # STEP 1
ACTION: int2 = 3 
int2 = None : <type 'NoneType'>
=> int2 = 3 : <type 'int'>
==================================================
int3 = 6                                                                 # STEP 2
ACTION: int3 = 6 
int3 = None : <type 'NoneType'>
=> int3 = 6 : <type 'int'>
==================================================
int0 = 7                                                                 # STEP 3
ACTION: int0 = 7 
int0 = None : <type 'NoneType'>
=> int0 = 7 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 4
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x101d48d88> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.insert(int0)                                                        # STEP 5
ACTION: avl0.insert(int0) 
int0 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101d48d88> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([7]) : <type 'set'>
==================================================
avl0.insert(int2)                                                        # STEP 6
ACTION: avl0.insert(int2) 
int2 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101d48d88> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([3, 7]) : <type 'set'>
==================================================
int0 = 16                                                                # STEP 7
ACTION: int0 = 16 
int0 = 7 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
avl0.insert(int0)                                                        # STEP 8
ACTION: avl0.insert(int0) 
int0 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101d48d88> : <type 'instance'>
avl_REF0 = set([3, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([16, 3, 7]) : <type 'set'>
==================================================
int0 = 12                                                                # STEP 9
ACTION: int0 = 12 
int0 = 16 : <type 'int'>
=> int0 = 12 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 10
ACTION: avl0.insert(int3) 
int3 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101d48d88> : <type 'instance'>
avl_REF0 = set([16, 3, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([16, 3, 6, 7]) : <type 'set'>
==================================================
int2 = 8                                                                # STEP 11
ACTION: int2 = 8 
int2 = 3 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 12
ACTION: avl0.insert(int1) 
int1 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101d48d88> : <type 'instance'>
avl_REF0 = set([16, 3, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
int3 = 12                                                               # STEP 13
ACTION: int3 = 12 
int3 = 6 : <type 'int'>
=> int3 = 12 : <type 'int'>
==================================================
int1 = 14                                                               # STEP 14
ACTION: int1 = 14 
int1 = 7 : <type 'int'>
=> int1 = 14 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 15
ACTION: avl0.delete(int3) 
int3 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101d48d88> : <type 'instance'>
avl_REF0 = set([16, 3, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int3 = 19                                                               # STEP 16
ACTION: int3 = 19 
int3 = 12 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 17
ACTION: avl0.delete(int1) 
int1 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101d48d88> : <type 'instance'>
avl_REF0 = set([16, 3, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int1 = 20                                                               # STEP 18
ACTION: int1 = 20 
int1 = 14 : <type 'int'>
=> int1 = 20 : <type 'int'>
==================================================
result = avl0.find(int2)                                                # STEP 19
ACTION: result = avl0.find(int2) 
int2 = 8 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101d48d88> : <type 'instance'>
avl_REF0 = set([16, 3, 6, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl0.delete(int2)                                                       # STEP 20
ACTION: avl0.delete(int2) 
int2 = 8 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101d48d88> : <type 'instance'>
avl_REF0 = set([16, 3, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
result = avl0.find(int2)                                                # STEP 21
ACTION: result = avl0.find(int2) 
int2 = 8 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101d48d88> : <type 'instance'>
avl_REF0 = set([16, 3, 6, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl0.delete(int1)                                                       # STEP 22
ACTION: avl0.delete(int1) 
int1 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101d48d88> : <type 'instance'>
avl_REF0 = set([16, 3, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int1 = 13                                                               # STEP 23
ACTION: int1 = 13 
int1 = 20 : <type 'int'>
=> int1 = 13 : <type 'int'>
==================================================
int2 = 6                                                                # STEP 24
ACTION: int2 = 6 
int2 = 8 : <type 'int'>
=> int2 = 6 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 25
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x101d48d88> : <type 'instance'>
avl_REF0 = set([16, 3, 6, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0 == avl0                                                            # STEP 26
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x101d48d88> : <type 'instance'>
avl_REF0 = set([16, 3, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl0 == avl0                                                            # STEP 27
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x101d48d88> : <type 'instance'>
avl_REF0 = set([16, 3, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
result = avl0.find(int3)                                                # STEP 28
ACTION: result = avl0.find(int3) 
int3 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101d48d88> : <type 'instance'>
avl_REF0 = set([16, 3, 6, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
int3 = 12                                                               # STEP 29
ACTION: int3 = 12 
int3 = 19 : <type 'int'>
=> int3 = 12 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 30
ACTION: avl0.delete(int0) 
int0 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101d48d88> : <type 'instance'>
avl_REF0 = set([16, 3, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int0 = 19                                                               # STEP 31
ACTION: int0 = 19 
int0 = 12 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 32
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x102062c20> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl0.find(int1)                                                # STEP 33
ACTION: result = avl0.find(int1) 
int1 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101d48d88> : <type 'instance'>
avl_REF0 = set([16, 3, 6, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
int1 = 12                                                               # STEP 34
ACTION: int1 = 12 
int1 = 13 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 35
ACTION: avl0.delete(int1) 
int1 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101d48d88> : <type 'instance'>
avl_REF0 = set([16, 3, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int1 = 19                                                               # STEP 36
ACTION: int1 = 19 
int1 = 12 : <type 'int'>
=> int1 = 19 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 37
ACTION: avl2.insert(int3) 
int3 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102062c20> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([12]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 38
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x102062c20> : <type 'instance'>
avl_REF2 = set([12]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl0.delete(int3)                                                       # STEP 39
ACTION: avl0.delete(int3) 
int3 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101d48d88> : <type 'instance'>
avl_REF0 = set([16, 3, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl2.insert(int2)                                                       # STEP 40
ACTION: avl2.insert(int2) 
int2 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102062c20> : <type 'instance'>
avl_REF2 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([12, 6]) : <type 'set'>
==================================================
int3 = 17                                                               # STEP 41
ACTION: int3 = 17 
int3 = 12 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
result = avl2.find(int2)                                                # STEP 42
ACTION: result = avl2.find(int2) 
int2 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102062c20> : <type 'instance'>
avl_REF2 = set([12, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
result = avl0.find(int0)                                                # STEP 43
ACTION: result = avl0.find(int0) 
int0 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101d48d88> : <type 'instance'>
avl_REF0 = set([16, 3, 6, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
int2 = 11                                                               # STEP 44
ACTION: int2 = 11 
int2 = 6 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
int0 = 5                                                                # STEP 45
ACTION: int0 = 5 
int0 = 19 : <type 'int'>
=> int0 = 5 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 46
ACTION: avl2.delete(int0) 
int0 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102062c20> : <type 'instance'>
avl_REF2 = set([12, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl0 == avl2                                                            # STEP 47
ACTION: avl0 == avl2 
avl0 = <avlbug2.AVLTree instance at 0x101d48d88> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x102062c20> : <type 'instance'>
avl_REF0 = set([16, 3, 6, 7]) : <type 'set'>
avl_REF2 = set([12, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
avl0.insert(int2)                                                       # STEP 48
ACTION: avl0.insert(int2) 
int2 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101d48d88> : <type 'instance'>
avl_REF0 = set([16, 3, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([16, 11, 3, 6, 7]) : <type 'set'>
==================================================
int0 = 8                                                                # STEP 49
ACTION: int0 = 8 
int0 = 5 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
int2 = 16                                                               # STEP 50
ACTION: int2 = 16 
int2 = 11 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 51
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x101d48d88> : <type 'instance'>
avl_REF0 = set([16, 11, 3, 6, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl2.insert(int2)                                                       # STEP 52
ACTION: avl2.insert(int2) 
int2 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102062c20> : <type 'instance'>
avl_REF2 = set([12, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([16, 12, 6]) : <type 'set'>
==================================================
int2 = 11                                                               # STEP 53
ACTION: int2 = 11 
int2 = 16 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
avl0 == avl2                                                            # STEP 54
ACTION: avl0 == avl2 
avl0 = <avlbug2.AVLTree instance at 0x101d48d88> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x102062c20> : <type 'instance'>
avl_REF0 = set([16, 11, 3, 6, 7]) : <type 'set'>
avl_REF2 = set([16, 12, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
avl0 == avl0                                                            # STEP 55
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x101d48d88> : <type 'instance'>
avl_REF0 = set([16, 11, 3, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
result = avl2.find(int1)                                                # STEP 56
ACTION: result = avl2.find(int1) 
int1 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102062c20> : <type 'instance'>
avl_REF2 = set([16, 12, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl2.delete(int0)                                                       # STEP 57
ACTION: avl2.delete(int0) 
int0 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102062c20> : <type 'instance'>
avl_REF2 = set([16, 12, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
result = avl2.find(int1)                                                # STEP 58
ACTION: result = avl2.find(int1) 
int1 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102062c20> : <type 'instance'>
avl_REF2 = set([16, 12, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
result = avl2.find(int0)                                                # STEP 59
ACTION: result = avl2.find(int0) 
int0 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102062c20> : <type 'instance'>
avl_REF2 = set([16, 12, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
int0 = 17                                                               # STEP 60
ACTION: int0 = 17 
int0 = 8 : <type 'int'>
=> int0 = 17 : <type 'int'>
==================================================
int1 = 16                                                               # STEP 61
ACTION: int1 = 16 
int1 = 19 : <type 'int'>
=> int1 = 16 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 62
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x1025be1b8> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 63
ACTION: avl0.delete(int0) 
int0 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101d48d88> : <type 'instance'>
avl_REF0 = set([16, 11, 3, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl2.insert(int1)                                                       # STEP 64
ACTION: avl2.insert(int1) 
int1 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102062c20> : <type 'instance'>
avl_REF2 = set([16, 12, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
int0 = 19                                                               # STEP 65
ACTION: int0 = 19 
int0 = 17 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 66
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x1025be1b8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
int1 = 9                                                                # STEP 67
ACTION: int1 = 9 
int1 = 16 : <type 'int'>
=> int1 = 9 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 68
ACTION: avl0.insert(int1) 
int1 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101d48d88> : <type 'instance'>
avl_REF0 = set([16, 11, 3, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([3, 6, 7, 9, 11, 16]) : <type 'set'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 69
ACTION: avl0 = avl.AVLTree() 
avl0 = <avlbug2.AVLTree instance at 0x101d48d88> : <type 'instance'>
avl_REF0 = set([3, 6, 7, 9, 11, 16]) : <type 'set'>
=> avl0 = <avlbug2.AVLTree instance at 0x101ba4ea8> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int1 = 4                                                                # STEP 70
ACTION: int1 = 4 
int1 = 9 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
result = avl1.find(int3)                                                # STEP 71
ACTION: result = avl1.find(int3) 
int3 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1025be1b8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
result = avl0.inorder()                                                 # STEP 72
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x101ba4ea8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0 == avl1                                                            # STEP 73
ACTION: avl0 == avl1 
avl0 = <avlbug2.AVLTree instance at 0x101ba4ea8> : <type 'instance'>
avl1 = <avlbug2.AVLTree instance at 0x1025be1b8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF1 
==================================================
avl2.delete(int3)                                                       # STEP 74
ACTION: avl2.delete(int3) 
int3 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102062c20> : <type 'instance'>
avl_REF2 = set([16, 12, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2 == avl0                                                            # STEP 75
ACTION: avl2 == avl0 
avl2 = <avlbug2.AVLTree instance at 0x102062c20> : <type 'instance'>
avl0 = <avlbug2.AVLTree instance at 0x101ba4ea8> : <type 'instance'>
avl_REF2 = set([16, 12, 6]) : <type 'set'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF0 
==================================================
avl0 == avl2                                                            # STEP 76
ACTION: avl0 == avl2 
avl0 = <avlbug2.AVLTree instance at 0x101ba4ea8> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x102062c20> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
avl_REF2 = set([16, 12, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
avl0 == avl0                                                            # STEP 77
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x101ba4ea8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
result = avl0.find(int2)                                                # STEP 78
ACTION: result = avl0.find(int2) 
int2 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101ba4ea8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
result = avl1.inorder()                                                 # STEP 79
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x1025be1b8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int3 = 11                                                               # STEP 80
ACTION: int3 = 11 
int3 = 17 : <type 'int'>
=> int3 = 11 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 81
ACTION: avl1.insert(int1) 
int1 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1025be1b8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([4]) : <type 'set'>
==================================================
int2 = 15                                                               # STEP 82
ACTION: int2 = 15 
int2 = 11 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 83
ACTION: avl2.insert(int1) 
int1 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102062c20> : <type 'instance'>
avl_REF2 = set([16, 12, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([16, 4, 12, 6]) : <type 'set'>
==================================================
int1 = 16                                                               # STEP 84
ACTION: int1 = 16 
int1 = 4 : <type 'int'>
=> int1 = 16 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 85
ACTION: avl0.delete(int0) 
int0 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101ba4ea8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
result = avl0.find(int0)                                                # STEP 86
ACTION: result = avl0.find(int0) 
int0 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101ba4ea8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
result = avl2.find(int0)                                                # STEP 87
ACTION: result = avl2.find(int0) 
int0 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102062c20> : <type 'instance'>
avl_REF2 = set([16, 4, 12, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl2.insert(int3)                                                       # STEP 88
ACTION: avl2.insert(int3) 
int3 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102062c20> : <type 'instance'>
avl_REF2 = set([16, 4, 12, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([16, 4, 11, 12, 6]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 89
ACTION: avl2.delete(int1) 
int1 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102062c20> : <type 'instance'>
avl_REF2 = set([16, 4, 11, 12, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([4, 11, 12, 6]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x101e8d950>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #3 STEP #4 (0:00:30.083012) Sun Apr 30 04:23:54 2017 [ 129 stmts 174 branches ]
  14 [2:0]
-- < 6 [1:-1]
---- > 13 [0:0] L
-- > 17 [1:0]
---- < 16 [0:0] L
---- > 20 [0:0] L
set([6, 13, 14, 16, 17, 20])
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 85
STOPPING TESTING DUE TO TIMEOUT
7.87818603112 PERCENT COVERED
60.2577850819 TOTAL RUNTIME
5 EXECUTED
475 TOTAL TEST OPERATIONS
25.1257088184 TIME SPENT EXECUTING TEST OPERATIONS
0.0186560153961 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
25.2332890034 TIME SPENT CHECKING PROPERTIES
50.3589978218 TOTAL TIME SPENT RUNNING SUT
0.00416398048401 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int1 = 7                                                                 # STEP 0
int2 = 3                                                                 # STEP 1
int3 = 6                                                                 # STEP 2
int0 = 7                                                                 # STEP 3
avl0 = avl.AVLTree()                                                     # STEP 4
avl0.insert(int0)                                                        # STEP 5
avl0.insert(int2)                                                        # STEP 6
int0 = 16                                                                # STEP 7
avl0.insert(int0)                                                        # STEP 8
int0 = 12                                                                # STEP 9
avl0.insert(int3)                                                       # STEP 10
int2 = 8                                                                # STEP 11
avl0.insert(int1)                                                       # STEP 12
int3 = 12                                                               # STEP 13
int1 = 14                                                               # STEP 14
avl0.delete(int3)                                                       # STEP 15
int3 = 19                                                               # STEP 16
avl0.delete(int1)                                                       # STEP 17
int1 = 20                                                               # STEP 18
result = avl0.find(int2)                                                # STEP 19
avl0.delete(int2)                                                       # STEP 20
result = avl0.find(int2)                                                # STEP 21
avl0.delete(int1)                                                       # STEP 22
int1 = 13                                                               # STEP 23
int2 = 6                                                                # STEP 24
result = avl0.inorder()                                                 # STEP 25
avl0 == avl0                                                            # STEP 26
avl0 == avl0                                                            # STEP 27
result = avl0.find(int3)                                                # STEP 28
int3 = 12                                                               # STEP 29
avl0.delete(int0)                                                       # STEP 30
int0 = 19                                                               # STEP 31
avl2 = avl.AVLTree()                                                    # STEP 32
result = avl0.find(int1)                                                # STEP 33
int1 = 12                                                               # STEP 34
avl0.delete(int1)                                                       # STEP 35
int1 = 19                                                               # STEP 36
avl2.insert(int3)                                                       # STEP 37
result = avl2.inorder()                                                 # STEP 38
avl0.delete(int3)                                                       # STEP 39
avl2.insert(int2)                                                       # STEP 40
int3 = 17                                                               # STEP 41
result = avl2.find(int2)                                                # STEP 42
result = avl0.find(int0)                                                # STEP 43
int2 = 11                                                               # STEP 44
int0 = 5                                                                # STEP 45
avl2.delete(int0)                                                       # STEP 46
avl0 == avl2                                                            # STEP 47
avl0.insert(int2)                                                       # STEP 48
int0 = 8                                                                # STEP 49
int2 = 16                                                               # STEP 50
result = avl0.inorder()                                                 # STEP 51
avl2.insert(int2)                                                       # STEP 52
int2 = 11                                                               # STEP 53
avl0 == avl2                                                            # STEP 54
avl0 == avl0                                                            # STEP 55
result = avl2.find(int1)                                                # STEP 56
avl2.delete(int0)                                                       # STEP 57
result = avl2.find(int1)                                                # STEP 58
result = avl2.find(int0)                                                # STEP 59
int0 = 17                                                               # STEP 60
int1 = 16                                                               # STEP 61
avl1 = avl.AVLTree()                                                    # STEP 62
avl0.delete(int0)                                                       # STEP 63
avl2.insert(int1)                                                       # STEP 64
int0 = 19                                                               # STEP 65
avl1 == avl1                                                            # STEP 66
int1 = 9                                                                # STEP 67
avl0.insert(int1)                                                       # STEP 68
avl0 = avl.AVLTree()                                                    # STEP 69
int1 = 4                                                                # STEP 70
result = avl1.find(int3)                                                # STEP 71
result = avl0.inorder()                                                 # STEP 72
avl0 == avl1                                                            # STEP 73
avl2.delete(int3)                                                       # STEP 74
avl2 == avl0                                                            # STEP 75
avl0 == avl2                                                            # STEP 76
avl0 == avl0                                                            # STEP 77
result = avl0.find(int2)                                                # STEP 78
result = avl1.inorder()                                                 # STEP 79
int3 = 11                                                               # STEP 80
avl1.insert(int1)                                                       # STEP 81
int2 = 15                                                               # STEP 82
avl2.insert(int1)                                                       # STEP 83
int1 = 16                                                               # STEP 84
avl0.delete(int0)                                                       # STEP 85
result = avl0.find(int0)                                                # STEP 86
result = avl2.find(int0)                                                # STEP 87
avl2.insert(int3)                                                       # STEP 88
avl2.delete(int1)                                                       # STEP 89
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x101e8d950>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
198 BRANCHES COVERED
147 STATEMENTS COVERED

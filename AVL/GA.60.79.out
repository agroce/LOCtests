Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.14802.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  16 [2:0]
-- < 10 [1:0]
---- < 2 [0:0] L
---- > 13 [0:0] L
-- > 17 [1:-1]
---- > 20 [0:0] L
set([2, 10, 13, 16, 17, 20])
TEST #3 STEP #75 (0:00:30.077374) Sun Apr 30 05:02:41 2017 [ 146 stmts 195 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102636950>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
Original test has 95 steps

SAVING TEST AS failure.14802.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 3                                                                 # STEP 0
ACTION: int3 = 3 
int3 = None : <type 'NoneType'>
=> int3 = 3 : <type 'int'>
==================================================
int1 = 10                                                                # STEP 1
ACTION: int1 = 10 
int1 = None : <type 'NoneType'>
=> int1 = 10 : <type 'int'>
==================================================
int0 = 18                                                                # STEP 2
ACTION: int0 = 18 
int0 = None : <type 'NoneType'>
=> int0 = 18 : <type 'int'>
==================================================
int2 = 19                                                                # STEP 3
ACTION: int2 = 19 
int2 = None : <type 'NoneType'>
=> int2 = 19 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x1039f0200> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.delete(int2)                                                        # STEP 5
ACTION: avl2.delete(int2) 
int2 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1039f0200> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int2 = 15                                                                # STEP 6
ACTION: int2 = 15 
int2 = 19 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
result = avl2.find(int3)                                                 # STEP 7
ACTION: result = avl2.find(int3) 
int3 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1039f0200> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
int3 = 17                                                                # STEP 8
ACTION: int3 = 17 
int3 = 3 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
result = avl2.find(int1)                                                 # STEP 9
ACTION: result = avl2.find(int1) 
int1 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1039f0200> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl2.delete(int3)                                                       # STEP 10
ACTION: avl2.delete(int3) 
int3 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1039f0200> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int1 = 14                                                               # STEP 11
ACTION: int1 = 14 
int1 = 10 : <type 'int'>
=> int1 = 14 : <type 'int'>
==================================================
result = avl2.find(int0)                                                # STEP 12
ACTION: result = avl2.find(int0) 
int0 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1039f0200> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
int3 = 6                                                                # STEP 13
ACTION: int3 = 6 
int3 = 17 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 14
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x1039f0200> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int0 = 10                                                               # STEP 15
ACTION: int0 = 10 
int0 = 18 : <type 'int'>
=> int0 = 10 : <type 'int'>
==================================================
avl2 == avl2                                                            # STEP 16
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x1039f0200> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl2.insert(int2)                                                       # STEP 17
ACTION: avl2.insert(int2) 
int2 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1039f0200> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([15]) : <type 'set'>
==================================================
avl2 == avl2                                                            # STEP 18
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x1039f0200> : <type 'instance'>
avl_REF2 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
int2 = 1                                                                # STEP 19
ACTION: int2 = 1 
int2 = 15 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 20
ACTION: avl2 = avl.AVLTree() 
avl2 = <avlbug2.AVLTree instance at 0x1039f0200> : <type 'instance'>
avl_REF2 = set([15]) : <type 'set'>
=> avl2 = <avlbug2.AVLTree instance at 0x1039f17e8> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 21
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x1039f17e8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2 == avl2                                                            # STEP 22
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x1039f17e8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl0 = avl.AVLTree()                                                    # STEP 23
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x1039f1ef0> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
result = avl0.find(int0)                                                # STEP 24
ACTION: result = avl0.find(int0) 
int0 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1039f1ef0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
result = avl0.inorder()                                                 # STEP 25
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x1039f1ef0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int0 = 13                                                               # STEP 26
ACTION: int0 = 13 
int0 = 10 : <type 'int'>
=> int0 = 13 : <type 'int'>
==================================================
result = avl0.find(int2)                                                # STEP 27
ACTION: result = avl0.find(int2) 
int2 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1039f1ef0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
result = avl2.find(int1)                                                # STEP 28
ACTION: result = avl2.find(int1) 
int1 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1039f17e8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl2.insert(int1)                                                       # STEP 29
ACTION: avl2.insert(int1) 
int1 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1039f17e8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([14]) : <type 'set'>
==================================================
avl2 == avl2                                                            # STEP 30
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x1039f17e8> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl0.insert(int0)                                                       # STEP 31
ACTION: avl0.insert(int0) 
int0 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1039f1ef0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([13]) : <type 'set'>
==================================================
int0 = 16                                                               # STEP 32
ACTION: int0 = 16 
int0 = 13 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
int1 = 17                                                               # STEP 33
ACTION: int1 = 17 
int1 = 14 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
avl0 == avl0                                                            # STEP 34
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x1039f1ef0> : <type 'instance'>
avl_REF0 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
int2 = 5                                                                # STEP 35
ACTION: int2 = 5 
int2 = 1 : <type 'int'>
=> int2 = 5 : <type 'int'>
==================================================
result = avl2.find(int2)                                                # STEP 36
ACTION: result = avl2.find(int2) 
int2 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1039f17e8> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int2 = 1                                                                # STEP 37
ACTION: int2 = 1 
int2 = 5 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
result = avl2.find(int3)                                                # STEP 38
ACTION: result = avl2.find(int3) 
int3 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1039f17e8> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
int3 = 13                                                               # STEP 39
ACTION: int3 = 13 
int3 = 6 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
result = avl2.find(int2)                                                # STEP 40
ACTION: result = avl2.find(int2) 
int2 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1039f17e8> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl2 == avl0                                                            # STEP 41
ACTION: avl2 == avl0 
avl2 = <avlbug2.AVLTree instance at 0x1039f17e8> : <type 'instance'>
avl0 = <avlbug2.AVLTree instance at 0x1039f1ef0> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
avl_REF0 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF0 
==================================================
int2 = 10                                                               # STEP 42
ACTION: int2 = 10 
int2 = 1 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
result = avl2.find(int0)                                                # STEP 43
ACTION: result = avl2.find(int0) 
int0 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1039f17e8> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
int0 = 19                                                               # STEP 44
ACTION: int0 = 19 
int0 = 16 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 45
ACTION: avl2.delete(int1) 
int1 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1039f17e8> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int1 = 18                                                               # STEP 46
ACTION: int1 = 18 
int1 = 17 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 47
ACTION: avl2.insert(int3) 
int3 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1039f17e8> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([13, 14]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 48
ACTION: avl0.delete(int0) 
int0 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1039f1ef0> : <type 'instance'>
avl_REF0 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.insert(int1)                                                       # STEP 49
ACTION: avl0.insert(int1) 
int1 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1039f1ef0> : <type 'instance'>
avl_REF0 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([18, 13]) : <type 'set'>
==================================================
int1 = 12                                                               # STEP 50
ACTION: int1 = 12 
int1 = 18 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
result = avl2.find(int2)                                                # STEP 51
ACTION: result = avl2.find(int2) 
int2 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1039f17e8> : <type 'instance'>
avl_REF2 = set([13, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int3 = 7                                                                # STEP 52
ACTION: int3 = 7 
int3 = 13 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
int2 = 16                                                               # STEP 53
ACTION: int2 = 16 
int2 = 10 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
int0 = 7                                                                # STEP 54
ACTION: int0 = 7 
int0 = 19 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 55
ACTION: avl2.insert(int0) 
int0 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1039f17e8> : <type 'instance'>
avl_REF2 = set([13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([13, 14, 7]) : <type 'set'>
==================================================
int0 = 13                                                               # STEP 56
ACTION: int0 = 13 
int0 = 7 : <type 'int'>
=> int0 = 13 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 57
ACTION: avl0.delete(int1) 
int1 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1039f1ef0> : <type 'instance'>
avl_REF0 = set([18, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl2.delete(int2)                                                       # STEP 58
ACTION: avl2.delete(int2) 
int2 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1039f17e8> : <type 'instance'>
avl_REF2 = set([13, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
result = avl0.find(int2)                                                # STEP 59
ACTION: result = avl0.find(int2) 
int2 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1039f1ef0> : <type 'instance'>
avl_REF0 = set([18, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
int2 = 20                                                               # STEP 60
ACTION: int2 = 20 
int2 = 16 : <type 'int'>
=> int2 = 20 : <type 'int'>
==================================================
int1 = 7                                                                # STEP 61
ACTION: int1 = 7 
int1 = 12 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 62
ACTION: avl0.insert(int1) 
int1 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1039f1ef0> : <type 'instance'>
avl_REF0 = set([18, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([18, 13, 7]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 63
ACTION: avl2.insert(int1) 
int1 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1039f17e8> : <type 'instance'>
avl_REF2 = set([13, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
int1 = 14                                                               # STEP 64
ACTION: int1 = 14 
int1 = 7 : <type 'int'>
=> int1 = 14 : <type 'int'>
==================================================
result = avl0.find(int3)                                                # STEP 65
ACTION: result = avl0.find(int3) 
int3 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1039f1ef0> : <type 'instance'>
avl_REF0 = set([18, 13, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
result = avl2.find(int1)                                                # STEP 66
ACTION: result = avl2.find(int1) 
int1 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1039f17e8> : <type 'instance'>
avl_REF2 = set([13, 14, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl2.insert(int0)                                                       # STEP 67
ACTION: avl2.insert(int0) 
int0 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1039f17e8> : <type 'instance'>
avl_REF2 = set([13, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
int3 = 4                                                                # STEP 68
ACTION: int3 = 4 
int3 = 7 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 69
ACTION: avl0.insert(int2) 
int2 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1039f1ef0> : <type 'instance'>
avl_REF0 = set([18, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([18, 20, 13, 7]) : <type 'set'>
==================================================
int1 = 3                                                                # STEP 70
ACTION: int1 = 3 
int1 = 14 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
int0 = 5                                                                # STEP 71
ACTION: int0 = 5 
int0 = 13 : <type 'int'>
=> int0 = 5 : <type 'int'>
==================================================
avl0 == avl2                                                            # STEP 72
ACTION: avl0 == avl2 
avl0 = <avlbug2.AVLTree instance at 0x1039f1ef0> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x1039f17e8> : <type 'instance'>
avl_REF0 = set([18, 20, 13, 7]) : <type 'set'>
avl_REF2 = set([13, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
avl0.insert(int1)                                                       # STEP 73
ACTION: avl0.insert(int1) 
int1 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1039f1ef0> : <type 'instance'>
avl_REF0 = set([18, 20, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([18, 3, 20, 13, 7]) : <type 'set'>
==================================================
int1 = 11                                                               # STEP 74
ACTION: int1 = 11 
int1 = 3 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
int2 = 7                                                                # STEP 75
ACTION: int2 = 7 
int2 = 20 : <type 'int'>
=> int2 = 7 : <type 'int'>
==================================================
result = avl0.find(int1)                                                # STEP 76
ACTION: result = avl0.find(int1) 
int1 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1039f1ef0> : <type 'instance'>
avl_REF0 = set([18, 3, 20, 13, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl2 == avl2                                                            # STEP 77
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x1039f17e8> : <type 'instance'>
avl_REF2 = set([13, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
int1 = 6                                                                # STEP 78
ACTION: int1 = 6 
int1 = 11 : <type 'int'>
=> int1 = 6 : <type 'int'>
==================================================
avl0 == avl0                                                            # STEP 79
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x1039f1ef0> : <type 'instance'>
avl_REF0 = set([18, 3, 20, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
result = avl2.find(int2)                                                # STEP 80
ACTION: result = avl2.find(int2) 
int2 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1039f17e8> : <type 'instance'>
avl_REF2 = set([13, 14, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int2 = 4                                                                # STEP 81
ACTION: int2 = 4 
int2 = 7 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
result = avl2.find(int0)                                                # STEP 82
ACTION: result = avl2.find(int0) 
int0 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1039f17e8> : <type 'instance'>
avl_REF2 = set([13, 14, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
result = avl2.find(int0)                                                # STEP 83
ACTION: result = avl2.find(int0) 
int0 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1039f17e8> : <type 'instance'>
avl_REF2 = set([13, 14, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
int0 = 13                                                               # STEP 84
ACTION: int0 = 13 
int0 = 5 : <type 'int'>
=> int0 = 13 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 85
ACTION: avl2.delete(int1) 
int1 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1039f17e8> : <type 'instance'>
avl_REF2 = set([13, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int1 = 10                                                               # STEP 86
ACTION: int1 = 10 
int1 = 6 : <type 'int'>
=> int1 = 10 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 87
ACTION: avl2.delete(int1) 
int1 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1039f17e8> : <type 'instance'>
avl_REF2 = set([13, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl0.delete(int3)                                                       # STEP 88
ACTION: avl0.delete(int3) 
int3 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1039f1ef0> : <type 'instance'>
avl_REF0 = set([18, 3, 20, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.delete(int0)                                                       # STEP 89
ACTION: avl0.delete(int0) 
int0 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1039f1ef0> : <type 'instance'>
avl_REF0 = set([18, 3, 20, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([18, 3, 20, 7]) : <type 'set'>
==================================================
avl2 == avl0                                                            # STEP 90
ACTION: avl2 == avl0 
avl2 = <avlbug2.AVLTree instance at 0x1039f17e8> : <type 'instance'>
avl0 = <avlbug2.AVLTree instance at 0x1039f1ef0> : <type 'instance'>
avl_REF2 = set([13, 14, 7]) : <type 'set'>
avl_REF0 = set([18, 3, 20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF0 
==================================================
int1 = 14                                                               # STEP 91
ACTION: int1 = 14 
int1 = 10 : <type 'int'>
=> int1 = 14 : <type 'int'>
==================================================
int0 = 20                                                               # STEP 92
ACTION: int0 = 20 
int0 = 13 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
int3 = 18                                                               # STEP 93
ACTION: int3 = 18 
int3 = 4 : <type 'int'>
=> int3 = 18 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 94
ACTION: avl0.delete(int3) 
int3 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1039f1ef0> : <type 'instance'>
avl_REF0 = set([18, 3, 20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([3, 20, 7]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103acea28>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 62
STOPPING TESTING DUE TO TIMEOUT
8.57332009268 PERCENT COVERED
60.282130003 TOTAL RUNTIME
5 EXECUTED
457 TOTAL TEST OPERATIONS
24.7348146439 TIME SPENT EXECUTING TEST OPERATIONS
0.0181448459625 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
24.9180393219 TIME SPENT CHECKING PROPERTIES
49.6528539658 TOTAL TIME SPENT RUNNING SUT
0.00413298606873 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int3 = 3                                                                 # STEP 0
int1 = 10                                                                # STEP 1
int0 = 18                                                                # STEP 2
int2 = 19                                                                # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
avl2.delete(int2)                                                        # STEP 5
int2 = 15                                                                # STEP 6
result = avl2.find(int3)                                                 # STEP 7
int3 = 17                                                                # STEP 8
result = avl2.find(int1)                                                 # STEP 9
avl2.delete(int3)                                                       # STEP 10
int1 = 14                                                               # STEP 11
result = avl2.find(int0)                                                # STEP 12
int3 = 6                                                                # STEP 13
result = avl2.inorder()                                                 # STEP 14
int0 = 10                                                               # STEP 15
avl2 == avl2                                                            # STEP 16
avl2.insert(int2)                                                       # STEP 17
avl2 == avl2                                                            # STEP 18
int2 = 1                                                                # STEP 19
avl2 = avl.AVLTree()                                                    # STEP 20
result = avl2.inorder()                                                 # STEP 21
avl2 == avl2                                                            # STEP 22
avl0 = avl.AVLTree()                                                    # STEP 23
result = avl0.find(int0)                                                # STEP 24
result = avl0.inorder()                                                 # STEP 25
int0 = 13                                                               # STEP 26
result = avl0.find(int2)                                                # STEP 27
result = avl2.find(int1)                                                # STEP 28
avl2.insert(int1)                                                       # STEP 29
avl2 == avl2                                                            # STEP 30
avl0.insert(int0)                                                       # STEP 31
int0 = 16                                                               # STEP 32
int1 = 17                                                               # STEP 33
avl0 == avl0                                                            # STEP 34
int2 = 5                                                                # STEP 35
result = avl2.find(int2)                                                # STEP 36
int2 = 1                                                                # STEP 37
result = avl2.find(int3)                                                # STEP 38
int3 = 13                                                               # STEP 39
result = avl2.find(int2)                                                # STEP 40
avl2 == avl0                                                            # STEP 41
int2 = 10                                                               # STEP 42
result = avl2.find(int0)                                                # STEP 43
int0 = 19                                                               # STEP 44
avl2.delete(int1)                                                       # STEP 45
int1 = 18                                                               # STEP 46
avl2.insert(int3)                                                       # STEP 47
avl0.delete(int0)                                                       # STEP 48
avl0.insert(int1)                                                       # STEP 49
int1 = 12                                                               # STEP 50
result = avl2.find(int2)                                                # STEP 51
int3 = 7                                                                # STEP 52
int2 = 16                                                               # STEP 53
int0 = 7                                                                # STEP 54
avl2.insert(int0)                                                       # STEP 55
int0 = 13                                                               # STEP 56
avl0.delete(int1)                                                       # STEP 57
avl2.delete(int2)                                                       # STEP 58
result = avl0.find(int2)                                                # STEP 59
int2 = 20                                                               # STEP 60
int1 = 7                                                                # STEP 61
avl0.insert(int1)                                                       # STEP 62
avl2.insert(int1)                                                       # STEP 63
int1 = 14                                                               # STEP 64
result = avl0.find(int3)                                                # STEP 65
result = avl2.find(int1)                                                # STEP 66
avl2.insert(int0)                                                       # STEP 67
int3 = 4                                                                # STEP 68
avl0.insert(int2)                                                       # STEP 69
int1 = 3                                                                # STEP 70
int0 = 5                                                                # STEP 71
avl0 == avl2                                                            # STEP 72
avl0.insert(int1)                                                       # STEP 73
int1 = 11                                                               # STEP 74
int2 = 7                                                                # STEP 75
result = avl0.find(int1)                                                # STEP 76
avl2 == avl2                                                            # STEP 77
int1 = 6                                                                # STEP 78
avl0 == avl0                                                            # STEP 79
result = avl2.find(int2)                                                # STEP 80
int2 = 4                                                                # STEP 81
result = avl2.find(int0)                                                # STEP 82
result = avl2.find(int0)                                                # STEP 83
int0 = 13                                                               # STEP 84
avl2.delete(int1)                                                       # STEP 85
int1 = 10                                                               # STEP 86
avl2.delete(int1)                                                       # STEP 87
avl0.delete(int3)                                                       # STEP 88
avl0.delete(int0)                                                       # STEP 89
avl2 == avl0                                                            # STEP 90
int1 = 14                                                               # STEP 91
int0 = 20                                                               # STEP 92
int3 = 18                                                               # STEP 93
avl0.delete(int3)                                                       # STEP 94
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103acea28>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
214 BRANCHES COVERED
160 STATEMENTS COVERED

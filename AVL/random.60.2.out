Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.98979.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103c36f80>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 33 steps

SAVING TEST AS failure.98979.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 7                                                                 # STEP 0
ACTION: int3 = 7 
int3 = None : <type 'NoneType'>
=> int3 = 7 : <type 'int'>
==================================================
int1 = 8                                                                 # STEP 1
ACTION: int1 = 8 
int1 = None : <type 'NoneType'>
=> int1 = 8 : <type 'int'>
==================================================
int2 = 18                                                                # STEP 2
ACTION: int2 = 18 
int2 = None : <type 'NoneType'>
=> int2 = 18 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 3
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x105806200> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int2)                                                        # STEP 4
ACTION: avl2.insert(int2) 
int2 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105806200> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([18]) : <type 'set'>
==================================================
avl2.insert(int3)                                                        # STEP 5
ACTION: avl2.insert(int3) 
int3 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105806200> : <type 'instance'>
avl_REF2 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([18, 7]) : <type 'set'>
==================================================
int0 = 11                                                                # STEP 6
ACTION: int0 = 11 
int0 = None : <type 'NoneType'>
=> int0 = 11 : <type 'int'>
==================================================
avl2.delete(int1)                                                        # STEP 7
ACTION: avl2.delete(int1) 
int1 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105806200> : <type 'instance'>
avl_REF2 = set([18, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.delete(int0)                                                        # STEP 8
ACTION: avl2.delete(int0) 
int0 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105806200> : <type 'instance'>
avl_REF2 = set([18, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int2 = 7                                                                 # STEP 9
ACTION: int2 = 7 
int2 = 18 : <type 'int'>
=> int2 = 7 : <type 'int'>
==================================================
int3 = 4                                                                # STEP 10
ACTION: int3 = 4 
int3 = 7 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
result = avl2.find(int0)                                                # STEP 11
ACTION: result = avl2.find(int0) 
int0 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105806200> : <type 'instance'>
avl_REF2 = set([18, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
int1 = 5                                                                # STEP 12
ACTION: int1 = 5 
int1 = 8 : <type 'int'>
=> int1 = 5 : <type 'int'>
==================================================
int0 = 9                                                                # STEP 13
ACTION: int0 = 9 
int0 = 11 : <type 'int'>
=> int0 = 9 : <type 'int'>
==================================================
result = avl2.find(int1)                                                # STEP 14
ACTION: result = avl2.find(int1) 
int1 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105806200> : <type 'instance'>
avl_REF2 = set([18, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int1 = 10                                                               # STEP 15
ACTION: int1 = 10 
int1 = 5 : <type 'int'>
=> int1 = 10 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 16
ACTION: avl2.insert(int1) 
int1 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105806200> : <type 'instance'>
avl_REF2 = set([18, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([18, 10, 7]) : <type 'set'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 17
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x103c59488> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 18
ACTION: avl2.delete(int1) 
int1 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105806200> : <type 'instance'>
avl_REF2 = set([18, 10, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([18, 7]) : <type 'set'>
==================================================
int1 = 5                                                                # STEP 19
ACTION: int1 = 5 
int1 = 10 : <type 'int'>
=> int1 = 5 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 20
ACTION: avl0.delete(int3) 
int3 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103c59488> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int3 = 5                                                                # STEP 21
ACTION: int3 = 5 
int3 = 4 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 22
ACTION: avl2.delete(int0) 
int0 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105806200> : <type 'instance'>
avl_REF2 = set([18, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int0 = 20                                                               # STEP 23
ACTION: int0 = 20 
int0 = 9 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 24
ACTION: avl2.delete(int0) 
int0 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105806200> : <type 'instance'>
avl_REF2 = set([18, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int0 = 6                                                                # STEP 25
ACTION: int0 = 6 
int0 = 20 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 26
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x103c59488> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl2.insert(int3)                                                       # STEP 27
ACTION: avl2.insert(int3) 
int3 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105806200> : <type 'instance'>
avl_REF2 = set([18, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([18, 5, 7]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 28
ACTION: avl0.insert(int2) 
int2 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103c59488> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([7]) : <type 'set'>
==================================================
int3 = 8                                                                # STEP 29
ACTION: int3 = 8 
int3 = 5 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 30
ACTION: avl2.insert(int0) 
int0 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105806200> : <type 'instance'>
avl_REF2 = set([18, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([18, 5, 6, 7]) : <type 'set'>
==================================================
int0 = 9                                                                # STEP 31
ACTION: int0 = 9 
int0 = 6 : <type 'int'>
=> int0 = 9 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 32
ACTION: avl2.delete(int2) 
int2 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105806200> : <type 'instance'>
avl_REF2 = set([18, 5, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([18, 5, 6]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103c49b48>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103fd8b90>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 34 steps

SAVING TEST AS failure.98979.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 19                                                                # STEP 0
ACTION: int0 = 19 
int0 = None : <type 'NoneType'>
=> int0 = 19 : <type 'int'>
==================================================
int3 = 11                                                                # STEP 1
ACTION: int3 = 11 
int3 = None : <type 'NoneType'>
=> int3 = 11 : <type 'int'>
==================================================
int2 = 14                                                                # STEP 2
ACTION: int2 = 14 
int2 = None : <type 'NoneType'>
=> int2 = 14 : <type 'int'>
==================================================
int1 = 4                                                                 # STEP 3
ACTION: int1 = 4 
int1 = None : <type 'NoneType'>
=> int1 = 4 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 4
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x103f04200> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.delete(int2)                                                        # STEP 5
ACTION: avl0.delete(int2) 
int2 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103f04200> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int2 = 9                                                                 # STEP 6
ACTION: int2 = 9 
int2 = 14 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
result = avl0.find(int3)                                                 # STEP 7
ACTION: result = avl0.find(int3) 
int3 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103f04200> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
int3 = 16                                                                # STEP 8
ACTION: int3 = 16 
int3 = 11 : <type 'int'>
=> int3 = 16 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 9
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x103f04f38> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 10
ACTION: avl1.insert(int0) 
int0 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103f04f38> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([19]) : <type 'set'>
==================================================
int0 = 16                                                               # STEP 11
ACTION: int0 = 16 
int0 = 19 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 12
ACTION: avl1.insert(int0) 
int0 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103f04f38> : <type 'instance'>
avl_REF1 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([16, 19]) : <type 'set'>
==================================================
int0 = 6                                                                # STEP 13
ACTION: int0 = 6 
int0 = 16 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
result = avl0.find(int3)                                                # STEP 14
ACTION: result = avl0.find(int3) 
int3 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103f04200> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
int3 = 15                                                               # STEP 15
ACTION: int3 = 15 
int3 = 16 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
result = avl1.find(int0)                                                # STEP 16
ACTION: result = avl1.find(int0) 
int0 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103f04f38> : <type 'instance'>
avl_REF1 = set([16, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl0.delete(int0)                                                       # STEP 17
ACTION: avl0.delete(int0) 
int0 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103f04200> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
result = avl1.find(int2)                                                # STEP 18
ACTION: result = avl1.find(int2) 
int2 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103f04f38> : <type 'instance'>
avl_REF1 = set([16, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int2 = 18                                                               # STEP 19
ACTION: int2 = 18 
int2 = 9 : <type 'int'>
=> int2 = 18 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 20
ACTION: avl1.delete(int2) 
int2 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103f04f38> : <type 'instance'>
avl_REF1 = set([16, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
result = avl0.find(int1)                                                # STEP 21
ACTION: result = avl0.find(int1) 
int1 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103f04200> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
int2 = 11                                                               # STEP 22
ACTION: int2 = 11 
int2 = 18 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
int1 = 5                                                                # STEP 23
ACTION: int1 = 5 
int1 = 4 : <type 'int'>
=> int1 = 5 : <type 'int'>
==================================================
int0 = 6                                                                # STEP 24
ACTION: int0 = 6 
int0 = 6 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 25
ACTION: avl1.insert(int2) 
int2 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103f04f38> : <type 'instance'>
avl_REF1 = set([16, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([16, 11, 19]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 26
ACTION: avl0.insert(int0) 
int0 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103f04200> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([6]) : <type 'set'>
==================================================
int2 = 8                                                                # STEP 27
ACTION: int2 = 8 
int2 = 11 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
int0 = 16                                                               # STEP 28
ACTION: int0 = 16 
int0 = 6 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
result = avl0.find(int1)                                                # STEP 29
ACTION: result = avl0.find(int1) 
int1 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103f04200> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl1.insert(int1)                                                       # STEP 30
ACTION: avl1.insert(int1) 
int1 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103f04f38> : <type 'instance'>
avl_REF1 = set([16, 11, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([16, 11, 19, 5]) : <type 'set'>
==================================================
int1 = 16                                                               # STEP 31
ACTION: int1 = 16 
int1 = 5 : <type 'int'>
=> int1 = 16 : <type 'int'>
==================================================
result = avl0.find(int1)                                                # STEP 32
ACTION: result = avl0.find(int1) 
int1 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103f04200> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl1.delete(int1)                                                       # STEP 33
ACTION: avl1.delete(int1) 
int1 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103f04f38> : <type 'instance'>
avl_REF1 = set([16, 11, 19, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([11, 19, 5]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103fde248>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
  15 [3:1]
-- < 8 [2:1]
---- < 2 [1:0]
------ < 1 [0:0] L
------ > 5 [0:0] L
---- > 9 [0:0] L
-- > 17 [1:0]
---- < 16 [0:0] L
---- > 18 [0:0] L
set([1, 2, 5, 8, 9, 15, 16, 17, 18])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103aba518>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 81 steps

SAVING TEST AS failure.98979.test.2
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 2                                                                 # STEP 0
ACTION: int0 = 2 
int0 = None : <type 'NoneType'>
=> int0 = 2 : <type 'int'>
==================================================
int1 = 19                                                                # STEP 1
ACTION: int1 = 19 
int1 = None : <type 'NoneType'>
=> int1 = 19 : <type 'int'>
==================================================
int2 = 10                                                                # STEP 2
ACTION: int2 = 10 
int2 = None : <type 'NoneType'>
=> int2 = 10 : <type 'int'>
==================================================
int3 = 18                                                                # STEP 3
ACTION: int3 = 18 
int3 = None : <type 'NoneType'>
=> int3 = 18 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x103eaf680> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl2.find(int2)                                                 # STEP 5
ACTION: result = avl2.find(int2) 
int2 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103eaf680> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl2.insert(int3)                                                        # STEP 6
ACTION: avl2.insert(int3) 
int3 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103eaf680> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([18]) : <type 'set'>
==================================================
int3 = 8                                                                 # STEP 7
ACTION: int3 = 8 
int3 = 18 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
int2 = 13                                                                # STEP 8
ACTION: int2 = 13 
int2 = 10 : <type 'int'>
=> int2 = 13 : <type 'int'>
==================================================
avl2.insert(int0)                                                        # STEP 9
ACTION: avl2.insert(int0) 
int0 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103eaf680> : <type 'instance'>
avl_REF2 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([18, 2]) : <type 'set'>
==================================================
int0 = 8                                                                # STEP 10
ACTION: int0 = 8 
int0 = 2 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 11
ACTION: avl2.delete(int1) 
int1 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103eaf680> : <type 'instance'>
avl_REF2 = set([18, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.delete(int3)                                                       # STEP 12
ACTION: avl2.delete(int3) 
int3 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103eaf680> : <type 'instance'>
avl_REF2 = set([18, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int1 = 15                                                               # STEP 13
ACTION: int1 = 15 
int1 = 19 : <type 'int'>
=> int1 = 15 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 14
ACTION: avl2.insert(int1) 
int1 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103eaf680> : <type 'instance'>
avl_REF2 = set([18, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([18, 2, 15]) : <type 'set'>
==================================================
int3 = 13                                                               # STEP 15
ACTION: int3 = 13 
int3 = 8 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
result = avl2.find(int1)                                                # STEP 16
ACTION: result = avl2.find(int1) 
int1 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103eaf680> : <type 'instance'>
avl_REF2 = set([18, 2, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int1 = 9                                                                # STEP 17
ACTION: int1 = 9 
int1 = 15 : <type 'int'>
=> int1 = 9 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 18
ACTION: avl2.delete(int2) 
int2 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103eaf680> : <type 'instance'>
avl_REF2 = set([18, 2, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.insert(int1)                                                       # STEP 19
ACTION: avl2.insert(int1) 
int1 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103eaf680> : <type 'instance'>
avl_REF2 = set([18, 2, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([9, 18, 2, 15]) : <type 'set'>
==================================================
int2 = 18                                                               # STEP 20
ACTION: int2 = 18 
int2 = 13 : <type 'int'>
=> int2 = 18 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 21
ACTION: avl2.delete(int3) 
int3 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103eaf680> : <type 'instance'>
avl_REF2 = set([9, 18, 2, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int1 = 7                                                                # STEP 22
ACTION: int1 = 7 
int1 = 9 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
int3 = 1                                                                # STEP 23
ACTION: int3 = 1 
int3 = 13 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
result = avl2.find(int1)                                                # STEP 24
ACTION: result = avl2.find(int1) 
int1 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103eaf680> : <type 'instance'>
avl_REF2 = set([9, 18, 2, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int1 = 16                                                               # STEP 25
ACTION: int1 = 16 
int1 = 7 : <type 'int'>
=> int1 = 16 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 26
ACTION: avl2.insert(int0) 
int0 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103eaf680> : <type 'instance'>
avl_REF2 = set([9, 18, 2, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([8, 9, 18, 2, 15]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 27
ACTION: avl2.insert(int1) 
int1 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103eaf680> : <type 'instance'>
avl_REF2 = set([8, 9, 18, 2, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([2, 8, 9, 15, 16, 18]) : <type 'set'>
==================================================
int0 = 2                                                                # STEP 28
ACTION: int0 = 2 
int0 = 8 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
int1 = 5                                                                # STEP 29
ACTION: int1 = 5 
int1 = 16 : <type 'int'>
=> int1 = 5 : <type 'int'>
==================================================
avl2 == avl2                                                            # STEP 30
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x103eaf680> : <type 'instance'>
avl_REF2 = set([2, 8, 9, 15, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl2 == avl2                                                            # STEP 31
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x103eaf680> : <type 'instance'>
avl_REF2 = set([2, 8, 9, 15, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
result = avl2.inorder()                                                 # STEP 32
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x103eaf680> : <type 'instance'>
avl_REF2 = set([2, 8, 9, 15, 16, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl2.find(int2)                                                # STEP 33
ACTION: result = avl2.find(int2) 
int2 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103eaf680> : <type 'instance'>
avl_REF2 = set([2, 8, 9, 15, 16, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int2 = 17                                                               # STEP 34
ACTION: int2 = 17 
int2 = 18 : <type 'int'>
=> int2 = 17 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 35
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x103eaf680> : <type 'instance'>
avl_REF2 = set([2, 8, 9, 15, 16, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int1)                                                       # STEP 36
ACTION: avl2.insert(int1) 
int1 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103eaf680> : <type 'instance'>
avl_REF2 = set([2, 8, 9, 15, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([2, 5, 8, 9, 15, 16, 18]) : <type 'set'>
==================================================
int1 = 7                                                                # STEP 37
ACTION: int1 = 7 
int1 = 5 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 38
ACTION: avl2.insert(int2) 
int2 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103eaf680> : <type 'instance'>
avl_REF2 = set([2, 5, 8, 9, 15, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([2, 5, 8, 9, 15, 16, 17, 18]) : <type 'set'>
==================================================
int2 = 11                                                               # STEP 39
ACTION: int2 = 11 
int2 = 17 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 40
ACTION: avl2.insert(int3) 
int3 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103eaf680> : <type 'instance'>
avl_REF2 = set([2, 5, 8, 9, 15, 16, 17, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([1, 2, 5, 8, 9, 15, 16, 17, 18]) : <type 'set'>
==================================================
int3 = 20                                                               # STEP 41
ACTION: int3 = 20 
int3 = 1 : <type 'int'>
=> int3 = 20 : <type 'int'>
==================================================
result = avl2.find(int2)                                                # STEP 42
ACTION: result = avl2.find(int2) 
int2 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103eaf680> : <type 'instance'>
avl_REF2 = set([1, 2, 5, 8, 9, 15, 16, 17, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl2.display()                                                          # STEP 43
ACTION: avl2.display() 
avl2 = <avl.AVLTree instance at 0x103eaf680> : <type 'instance'>
avl_REF2 = set([1, 2, 5, 8, 9, 15, 16, 17, 18]) : <type 'set'>
  15 [3:1]
-- < 8 [2:1]
---- < 2 [1:0]
------ < 1 [0:0] L
------ > 5 [0:0] L
---- > 9 [0:0] L
-- > 17 [1:0]
---- < 16 [0:0] L
---- > 18 [0:0] L
REFERENCE ACTION: print(avl_REF2) 
set([1, 2, 5, 8, 9, 15, 16, 17, 18])
==================================================
int2 = 13                                                               # STEP 44
ACTION: int2 = 13 
int2 = 11 : <type 'int'>
=> int2 = 13 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 45
ACTION: avl2.insert(int3) 
int3 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103eaf680> : <type 'instance'>
avl_REF2 = set([1, 2, 5, 8, 9, 15, 16, 17, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([1, 2, 5, 8, 9, 15, 16, 17, 18, 20]) : <type 'set'>
==================================================
int3 = 17                                                               # STEP 46
ACTION: int3 = 17 
int3 = 20 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 47
ACTION: avl2.insert(int0) 
int0 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103eaf680> : <type 'instance'>
avl_REF2 = set([1, 2, 5, 8, 9, 15, 16, 17, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl2.insert(int1)                                                       # STEP 48
ACTION: avl2.insert(int1) 
int1 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103eaf680> : <type 'instance'>
avl_REF2 = set([1, 2, 5, 8, 9, 15, 16, 17, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([1, 2, 5, 7, 8, 9, 15, 16, 17, 18, 20]) : <type 'set'>
==================================================
int0 = 4                                                                # STEP 49
ACTION: int0 = 4 
int0 = 2 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
int1 = 20                                                               # STEP 50
ACTION: int1 = 20 
int1 = 7 : <type 'int'>
=> int1 = 20 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 51
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x103aab5f0> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 52
ACTION: avl1.delete(int1) 
int1 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103aab5f0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.delete(int2)                                                       # STEP 53
ACTION: avl1.delete(int2) 
int2 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103aab5f0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int1 = 17                                                               # STEP 54
ACTION: int1 = 17 
int1 = 20 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 55
ACTION: avl1.delete(int3) 
int3 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103aab5f0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int2 = 8                                                                # STEP 56
ACTION: int2 = 8 
int2 = 13 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 57
ACTION: avl1.insert(int3) 
int3 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103aab5f0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([17]) : <type 'set'>
==================================================
int3 = 1                                                                # STEP 58
ACTION: int3 = 1 
int3 = 17 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 59
ACTION: avl2.delete(int3) 
int3 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103eaf680> : <type 'instance'>
avl_REF2 = set([1, 2, 5, 7, 8, 9, 15, 16, 17, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([2, 5, 7, 8, 9, 15, 16, 17, 18, 20]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 60
ACTION: avl2.delete(int0) 
int0 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103eaf680> : <type 'instance'>
avl_REF2 = set([2, 5, 7, 8, 9, 15, 16, 17, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int0 = 11                                                               # STEP 61
ACTION: int0 = 11 
int0 = 4 : <type 'int'>
=> int0 = 11 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 62
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x103eb22d8> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 63
ACTION: avl1.insert(int2) 
int2 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103aab5f0> : <type 'instance'>
avl_REF1 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([8, 17]) : <type 'set'>
==================================================
int3 = 6                                                                # STEP 64
ACTION: int3 = 6 
int3 = 1 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
result = avl0.find(int1)                                                # STEP 65
ACTION: result = avl0.find(int1) 
int1 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103eb22d8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
int1 = 16                                                               # STEP 66
ACTION: int1 = 16 
int1 = 17 : <type 'int'>
=> int1 = 16 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 67
ACTION: avl2.insert(int3) 
int3 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103eaf680> : <type 'instance'>
avl_REF2 = set([2, 5, 7, 8, 9, 15, 16, 17, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([2, 5, 6, 7, 8, 9, 15, 16, 17, 18, 20]) : <type 'set'>
==================================================
avl1 == avl2                                                            # STEP 68
ACTION: avl1 == avl2 
avl1 = <avl.AVLTree instance at 0x103aab5f0> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x103eaf680> : <type 'instance'>
avl_REF1 = set([8, 17]) : <type 'set'>
avl_REF2 = set([2, 5, 6, 7, 8, 9, 15, 16, 17, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
avl0.delete(int3)                                                       # STEP 69
ACTION: avl0.delete(int3) 
int3 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103eb22d8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.delete(int2)                                                       # STEP 70
ACTION: avl0.delete(int2) 
int2 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103eb22d8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int2 = 9                                                                # STEP 71
ACTION: int2 = 9 
int2 = 8 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
result = avl0.find(int0)                                                # STEP 72
ACTION: result = avl0.find(int0) 
int0 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103eb22d8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
avl1.delete(int3)                                                       # STEP 73
ACTION: avl1.delete(int3) 
int3 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103aab5f0> : <type 'instance'>
avl_REF1 = set([8, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int3 = 16                                                               # STEP 74
ACTION: int3 = 16 
int3 = 6 : <type 'int'>
=> int3 = 16 : <type 'int'>
==================================================
int0 = 11                                                               # STEP 75
ACTION: int0 = 11 
int0 = 11 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 76
ACTION: avl0.delete(int3) 
int3 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103eb22d8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int3 = 13                                                               # STEP 77
ACTION: int3 = 13 
int3 = 16 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 78
ACTION: avl2.delete(int2) 
int2 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103eaf680> : <type 'instance'>
avl_REF2 = set([2, 5, 6, 7, 8, 9, 15, 16, 17, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([2, 5, 6, 7, 8, 15, 16, 17, 18, 20]) : <type 'set'>
==================================================
int2 = 10                                                               # STEP 79
ACTION: int2 = 10 
int2 = 9 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 80
ACTION: avl2.delete(int1) 
int1 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103eaf680> : <type 'instance'>
avl_REF2 = set([2, 5, 6, 7, 8, 15, 16, 17, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([2, 5, 6, 7, 8, 15, 17, 18, 20]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1058886c8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 3 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103eb1050>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 59 steps

SAVING TEST AS failure.98979.test.3
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 19                                                                # STEP 0
ACTION: int2 = 19 
int2 = None : <type 'NoneType'>
=> int2 = 19 : <type 'int'>
==================================================
int1 = 20                                                                # STEP 1
ACTION: int1 = 20 
int1 = None : <type 'NoneType'>
=> int1 = 20 : <type 'int'>
==================================================
int3 = 19                                                                # STEP 2
ACTION: int3 = 19 
int3 = None : <type 'NoneType'>
=> int3 = 19 : <type 'int'>
==================================================
int0 = 7                                                                 # STEP 3
ACTION: int0 = 7 
int0 = None : <type 'NoneType'>
=> int0 = 7 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x103eb1560> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
result = avl1.find(int0)                                                 # STEP 5
ACTION: result = avl1.find(int0) 
int0 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103eb1560> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
int0 = 4                                                                 # STEP 6
ACTION: int0 = 4 
int0 = 7 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 7
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x103eb1d88> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
result = avl0.find(int0)                                                 # STEP 8
ACTION: result = avl0.find(int0) 
int0 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103eb1d88> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
avl1.insert(int3)                                                        # STEP 9
ACTION: avl1.insert(int3) 
int3 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103eb1560> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([19]) : <type 'set'>
==================================================
avl0 == avl0                                                            # STEP 10
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x103eb1d88> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
int0 = 8                                                                # STEP 11
ACTION: int0 = 8 
int0 = 4 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
avl0 == avl0                                                            # STEP 12
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x103eb1d88> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
result = avl1.find(int2)                                                # STEP 13
ACTION: result = avl1.find(int2) 
int2 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103eb1560> : <type 'instance'>
avl_REF1 = set([19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
result = avl1.find(int2)                                                # STEP 14
ACTION: result = avl1.find(int2) 
int2 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103eb1560> : <type 'instance'>
avl_REF1 = set([19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int3 = 7                                                                # STEP 15
ACTION: int3 = 7 
int3 = 19 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 16
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x10588d638> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int2 = 12                                                               # STEP 17
ACTION: int2 = 12 
int2 = 19 : <type 'int'>
=> int2 = 12 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 18
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x103eb1560> : <type 'instance'>
avl_REF1 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
result = avl0.find(int1)                                                # STEP 19
ACTION: result = avl0.find(int1) 
int1 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103eb1d88> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
int1 = 17                                                               # STEP 20
ACTION: int1 = 17 
int1 = 20 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 21
ACTION: avl1.insert(int2) 
int2 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103eb1560> : <type 'instance'>
avl_REF1 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([19, 12]) : <type 'set'>
==================================================
int2 = 18                                                               # STEP 22
ACTION: int2 = 18 
int2 = 12 : <type 'int'>
=> int2 = 18 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 23
ACTION: avl0.delete(int1) 
int1 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103eb1d88> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.delete(int0)                                                       # STEP 24
ACTION: avl0.delete(int0) 
int0 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103eb1d88> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl2 == avl0                                                            # STEP 25
ACTION: avl2 == avl0 
avl2 = <avl.AVLTree instance at 0x10588d638> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x103eb1d88> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF0 
==================================================
avl2.insert(int0)                                                       # STEP 26
ACTION: avl2.insert(int0) 
int0 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10588d638> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([8]) : <type 'set'>
==================================================
int1 = 7                                                                # STEP 27
ACTION: int1 = 7 
int1 = 17 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
int0 = 4                                                                # STEP 28
ACTION: int0 = 4 
int0 = 8 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
avl0 == avl0                                                            # STEP 29
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x103eb1d88> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl0 == avl2                                                            # STEP 30
ACTION: avl0 == avl2 
avl0 = <avl.AVLTree instance at 0x103eb1d88> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x10588d638> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
avl_REF2 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
avl2.insert(int0)                                                       # STEP 31
ACTION: avl2.insert(int0) 
int0 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10588d638> : <type 'instance'>
avl_REF2 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([8, 4]) : <type 'set'>
==================================================
int0 = 3                                                                # STEP 32
ACTION: int0 = 3 
int0 = 4 : <type 'int'>
=> int0 = 3 : <type 'int'>
==================================================
avl1 == avl0                                                            # STEP 33
ACTION: avl1 == avl0 
avl1 = <avl.AVLTree instance at 0x103eb1560> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x103eb1d88> : <type 'instance'>
avl_REF1 = set([19, 12]) : <type 'set'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
avl2.delete(int3)                                                       # STEP 34
ACTION: avl2.delete(int3) 
int3 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10588d638> : <type 'instance'>
avl_REF2 = set([8, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl1.insert(int2)                                                       # STEP 35
ACTION: avl1.insert(int2) 
int2 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103eb1560> : <type 'instance'>
avl_REF1 = set([19, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([18, 19, 12]) : <type 'set'>
==================================================
int3 = 19                                                               # STEP 36
ACTION: int3 = 19 
int3 = 7 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 37
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x103eb1560> : <type 'instance'>
avl_REF1 = set([18, 19, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl2.delete(int0)                                                       # STEP 38
ACTION: avl2.delete(int0) 
int0 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10588d638> : <type 'instance'>
avl_REF2 = set([8, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int0 = 15                                                               # STEP 39
ACTION: int0 = 15 
int0 = 3 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
int2 = 8                                                                # STEP 40
ACTION: int2 = 8 
int2 = 18 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 41
ACTION: avl1.delete(int3) 
int3 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103eb1560> : <type 'instance'>
avl_REF1 = set([18, 19, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([18, 12]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 42
ACTION: avl1.insert(int2) 
int2 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103eb1560> : <type 'instance'>
avl_REF1 = set([18, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([8, 18, 12]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 43
ACTION: avl1.delete(int3) 
int3 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103eb1560> : <type 'instance'>
avl_REF1 = set([8, 18, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
result = avl1.inorder()                                                 # STEP 44
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x103eb1560> : <type 'instance'>
avl_REF1 = set([8, 18, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int0)                                                       # STEP 45
ACTION: avl1.insert(int0) 
int0 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103eb1560> : <type 'instance'>
avl_REF1 = set([8, 18, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([8, 18, 12, 15]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 46
ACTION: avl2.delete(int1) 
int1 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10588d638> : <type 'instance'>
avl_REF2 = set([8, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int1 = 10                                                               # STEP 47
ACTION: int1 = 10 
int1 = 7 : <type 'int'>
=> int1 = 10 : <type 'int'>
==================================================
int3 = 12                                                               # STEP 48
ACTION: int3 = 12 
int3 = 19 : <type 'int'>
=> int3 = 12 : <type 'int'>
==================================================
result = avl0.find(int1)                                                # STEP 49
ACTION: result = avl0.find(int1) 
int1 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103eb1d88> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
int0 = 3                                                                # STEP 50
ACTION: int0 = 3 
int0 = 15 : <type 'int'>
=> int0 = 3 : <type 'int'>
==================================================
result = avl2.find(int3)                                                # STEP 51
ACTION: result = avl2.find(int3) 
int3 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10588d638> : <type 'instance'>
avl_REF2 = set([8, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
int3 = 12                                                               # STEP 52
ACTION: int3 = 12 
int3 = 12 : <type 'int'>
==================================================
int1 = 19                                                               # STEP 53
ACTION: int1 = 19 
int1 = 10 : <type 'int'>
=> int1 = 19 : <type 'int'>
==================================================
result = avl2.find(int1)                                                # STEP 54
ACTION: result = avl2.find(int1) 
int1 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10588d638> : <type 'instance'>
avl_REF2 = set([8, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int1 = 9                                                                # STEP 55
ACTION: int1 = 9 
int1 = 19 : <type 'int'>
=> int1 = 9 : <type 'int'>
==================================================
result = avl2.find(int0)                                                # STEP 56
ACTION: result = avl2.find(int0) 
int0 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10588d638> : <type 'instance'>
avl_REF2 = set([8, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
int0 = 9                                                                # STEP 57
ACTION: int0 = 9 
int0 = 3 : <type 'int'>
=> int0 = 9 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 58
ACTION: avl1.delete(int2) 
int2 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103eb1560> : <type 'instance'>
avl_REF1 = set([8, 18, 12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([18, 12, 15]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103a95758>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 4 DISTINCT FAILURES
TEST #5 STEP #0 (0:00:33.875778) Fri Apr 28 03:18:18 2017 [ 158 stmts 207 branches ]
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 23
STOPPING TESTING DUE TO TIMEOUT
8.45213849287 PERCENT COVERED
60.2054920197 TOTAL RUNTIME
8 EXECUTED
530 TOTAL TEST OPERATIONS
21.3145029545 TIME SPENT EXECUTING TEST OPERATIONS
0.0210070610046 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
21.4623856544 TIME SPENT CHECKING PROPERTIES
42.7768886089 TOTAL TIME SPENT RUNNING SUT
0.0050196647644 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
4 FAILED
0 REPEATS OF FAILURES
4 ACTUAL DISTINCT FAILURES

FAILURE 0
int3 = 7                                                                 # STEP 0
int1 = 8                                                                 # STEP 1
int2 = 18                                                                # STEP 2
avl2 = avl.AVLTree()                                                     # STEP 3
avl2.insert(int2)                                                        # STEP 4
avl2.insert(int3)                                                        # STEP 5
int0 = 11                                                                # STEP 6
avl2.delete(int1)                                                        # STEP 7
avl2.delete(int0)                                                        # STEP 8
int2 = 7                                                                 # STEP 9
int3 = 4                                                                # STEP 10
result = avl2.find(int0)                                                # STEP 11
int1 = 5                                                                # STEP 12
int0 = 9                                                                # STEP 13
result = avl2.find(int1)                                                # STEP 14
int1 = 10                                                               # STEP 15
avl2.insert(int1)                                                       # STEP 16
avl0 = avl.AVLTree()                                                    # STEP 17
avl2.delete(int1)                                                       # STEP 18
int1 = 5                                                                # STEP 19
avl0.delete(int3)                                                       # STEP 20
int3 = 5                                                                # STEP 21
avl2.delete(int0)                                                       # STEP 22
int0 = 20                                                               # STEP 23
avl2.delete(int0)                                                       # STEP 24
int0 = 6                                                                # STEP 25
result = avl0.inorder()                                                 # STEP 26
avl2.insert(int3)                                                       # STEP 27
avl0.insert(int2)                                                       # STEP 28
int3 = 8                                                                # STEP 29
avl2.insert(int0)                                                       # STEP 30
int0 = 9                                                                # STEP 31
avl2.delete(int2)                                                       # STEP 32
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103c49b48>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE 1
int0 = 19                                                                # STEP 0
int3 = 11                                                                # STEP 1
int2 = 14                                                                # STEP 2
int1 = 4                                                                 # STEP 3
avl0 = avl.AVLTree()                                                     # STEP 4
avl0.delete(int2)                                                        # STEP 5
int2 = 9                                                                 # STEP 6
result = avl0.find(int3)                                                 # STEP 7
int3 = 16                                                                # STEP 8
avl1 = avl.AVLTree()                                                     # STEP 9
avl1.insert(int0)                                                       # STEP 10
int0 = 16                                                               # STEP 11
avl1.insert(int0)                                                       # STEP 12
int0 = 6                                                                # STEP 13
result = avl0.find(int3)                                                # STEP 14
int3 = 15                                                               # STEP 15
result = avl1.find(int0)                                                # STEP 16
avl0.delete(int0)                                                       # STEP 17
result = avl1.find(int2)                                                # STEP 18
int2 = 18                                                               # STEP 19
avl1.delete(int2)                                                       # STEP 20
result = avl0.find(int1)                                                # STEP 21
int2 = 11                                                               # STEP 22
int1 = 5                                                                # STEP 23
int0 = 6                                                                # STEP 24
avl1.insert(int2)                                                       # STEP 25
avl0.insert(int0)                                                       # STEP 26
int2 = 8                                                                # STEP 27
int0 = 16                                                               # STEP 28
result = avl0.find(int1)                                                # STEP 29
avl1.insert(int1)                                                       # STEP 30
int1 = 16                                                               # STEP 31
result = avl0.find(int1)                                                # STEP 32
avl1.delete(int1)                                                       # STEP 33
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103fde248>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE 2
int0 = 2                                                                 # STEP 0
int1 = 19                                                                # STEP 1
int2 = 10                                                                # STEP 2
int3 = 18                                                                # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
result = avl2.find(int2)                                                 # STEP 5
avl2.insert(int3)                                                        # STEP 6
int3 = 8                                                                 # STEP 7
int2 = 13                                                                # STEP 8
avl2.insert(int0)                                                        # STEP 9
int0 = 8                                                                # STEP 10
avl2.delete(int1)                                                       # STEP 11
avl2.delete(int3)                                                       # STEP 12
int1 = 15                                                               # STEP 13
avl2.insert(int1)                                                       # STEP 14
int3 = 13                                                               # STEP 15
result = avl2.find(int1)                                                # STEP 16
int1 = 9                                                                # STEP 17
avl2.delete(int2)                                                       # STEP 18
avl2.insert(int1)                                                       # STEP 19
int2 = 18                                                               # STEP 20
avl2.delete(int3)                                                       # STEP 21
int1 = 7                                                                # STEP 22
int3 = 1                                                                # STEP 23
result = avl2.find(int1)                                                # STEP 24
int1 = 16                                                               # STEP 25
avl2.insert(int0)                                                       # STEP 26
avl2.insert(int1)                                                       # STEP 27
int0 = 2                                                                # STEP 28
int1 = 5                                                                # STEP 29
avl2 == avl2                                                            # STEP 30
avl2 == avl2                                                            # STEP 31
result = avl2.inorder()                                                 # STEP 32
result = avl2.find(int2)                                                # STEP 33
int2 = 17                                                               # STEP 34
result = avl2.inorder()                                                 # STEP 35
avl2.insert(int1)                                                       # STEP 36
int1 = 7                                                                # STEP 37
avl2.insert(int2)                                                       # STEP 38
int2 = 11                                                               # STEP 39
avl2.insert(int3)                                                       # STEP 40
int3 = 20                                                               # STEP 41
result = avl2.find(int2)                                                # STEP 42
avl2.display()                                                          # STEP 43
int2 = 13                                                               # STEP 44
avl2.insert(int3)                                                       # STEP 45
int3 = 17                                                               # STEP 46
avl2.insert(int0)                                                       # STEP 47
avl2.insert(int1)                                                       # STEP 48
int0 = 4                                                                # STEP 49
int1 = 20                                                               # STEP 50
avl1 = avl.AVLTree()                                                    # STEP 51
avl1.delete(int1)                                                       # STEP 52
avl1.delete(int2)                                                       # STEP 53
int1 = 17                                                               # STEP 54
avl1.delete(int3)                                                       # STEP 55
int2 = 8                                                                # STEP 56
avl1.insert(int3)                                                       # STEP 57
int3 = 1                                                                # STEP 58
avl2.delete(int3)                                                       # STEP 59
avl2.delete(int0)                                                       # STEP 60
int0 = 11                                                               # STEP 61
avl0 = avl.AVLTree()                                                    # STEP 62
avl1.insert(int2)                                                       # STEP 63
int3 = 6                                                                # STEP 64
result = avl0.find(int1)                                                # STEP 65
int1 = 16                                                               # STEP 66
avl2.insert(int3)                                                       # STEP 67
avl1 == avl2                                                            # STEP 68
avl0.delete(int3)                                                       # STEP 69
avl0.delete(int2)                                                       # STEP 70
int2 = 9                                                                # STEP 71
result = avl0.find(int0)                                                # STEP 72
avl1.delete(int3)                                                       # STEP 73
int3 = 16                                                               # STEP 74
int0 = 11                                                               # STEP 75
avl0.delete(int3)                                                       # STEP 76
int3 = 13                                                               # STEP 77
avl2.delete(int2)                                                       # STEP 78
int2 = 10                                                               # STEP 79
avl2.delete(int1)                                                       # STEP 80
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1058886c8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE 3
int2 = 19                                                                # STEP 0
int1 = 20                                                                # STEP 1
int3 = 19                                                                # STEP 2
int0 = 7                                                                 # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
result = avl1.find(int0)                                                 # STEP 5
int0 = 4                                                                 # STEP 6
avl0 = avl.AVLTree()                                                     # STEP 7
result = avl0.find(int0)                                                 # STEP 8
avl1.insert(int3)                                                        # STEP 9
avl0 == avl0                                                            # STEP 10
int0 = 8                                                                # STEP 11
avl0 == avl0                                                            # STEP 12
result = avl1.find(int2)                                                # STEP 13
result = avl1.find(int2)                                                # STEP 14
int3 = 7                                                                # STEP 15
avl2 = avl.AVLTree()                                                    # STEP 16
int2 = 12                                                               # STEP 17
avl1 == avl1                                                            # STEP 18
result = avl0.find(int1)                                                # STEP 19
int1 = 17                                                               # STEP 20
avl1.insert(int2)                                                       # STEP 21
int2 = 18                                                               # STEP 22
avl0.delete(int1)                                                       # STEP 23
avl0.delete(int0)                                                       # STEP 24
avl2 == avl0                                                            # STEP 25
avl2.insert(int0)                                                       # STEP 26
int1 = 7                                                                # STEP 27
int0 = 4                                                                # STEP 28
avl0 == avl0                                                            # STEP 29
avl0 == avl2                                                            # STEP 30
avl2.insert(int0)                                                       # STEP 31
int0 = 3                                                                # STEP 32
avl1 == avl0                                                            # STEP 33
avl2.delete(int3)                                                       # STEP 34
avl1.insert(int2)                                                       # STEP 35
int3 = 19                                                               # STEP 36
avl1 == avl1                                                            # STEP 37
avl2.delete(int0)                                                       # STEP 38
int0 = 15                                                               # STEP 39
int2 = 8                                                                # STEP 40
avl1.delete(int3)                                                       # STEP 41
avl1.insert(int2)                                                       # STEP 42
avl1.delete(int3)                                                       # STEP 43
result = avl1.inorder()                                                 # STEP 44
avl1.insert(int0)                                                       # STEP 45
avl2.delete(int1)                                                       # STEP 46
int1 = 10                                                               # STEP 47
int3 = 12                                                               # STEP 48
result = avl0.find(int1)                                                # STEP 49
int0 = 3                                                                # STEP 50
result = avl2.find(int3)                                                # STEP 51
int3 = 12                                                               # STEP 52
int1 = 19                                                               # STEP 53
result = avl2.find(int1)                                                # STEP 54
int1 = 9                                                                # STEP 55
result = avl2.find(int0)                                                # STEP 56
int0 = 9                                                                # STEP 57
avl1.delete(int2)                                                       # STEP 58
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103a95758>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
212 BRANCHES COVERED
160 STATEMENTS COVERED

Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.99214.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105512cb0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 79 steps

SAVING TEST AS failure.99214.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 4                                                                 # STEP 0
ACTION: int1 = 4 
int1 = None : <type 'NoneType'>
=> int1 = 4 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 1
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x1053c9830> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int3 = 1                                                                 # STEP 2
ACTION: int3 = 1 
int3 = None : <type 'NoneType'>
=> int3 = 1 : <type 'int'>
==================================================
result = avl1.find(int3)                                                 # STEP 3
ACTION: result = avl1.find(int3) 
int3 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1053c9830> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl1.insert(int3)                                                        # STEP 4
ACTION: avl1.insert(int3) 
int3 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1053c9830> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([1]) : <type 'set'>
==================================================
avl1.delete(int3)                                                        # STEP 5
ACTION: avl1.delete(int3) 
int3 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1053c9830> : <type 'instance'>
avl_REF1 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int0 = 8                                                                 # STEP 6
ACTION: int0 = 8 
int0 = None : <type 'NoneType'>
=> int0 = 8 : <type 'int'>
==================================================
avl1.insert(int0)                                                        # STEP 7
ACTION: avl1.insert(int0) 
int0 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1053c9830> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([8]) : <type 'set'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 8
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x105483b48> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.delete(int0)                                                        # STEP 9
ACTION: avl0.delete(int0) 
int0 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105483b48> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl1.delete(int3)                                                       # STEP 10
ACTION: avl1.delete(int3) 
int3 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1053c9830> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
result = avl1.find(int3)                                                # STEP 11
ACTION: result = avl1.find(int3) 
int3 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1053c9830> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl1.delete(int0)                                                       # STEP 12
ACTION: avl1.delete(int0) 
int0 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1053c9830> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int2 = 1                                                                # STEP 13
ACTION: int2 = 1 
int2 = None : <type 'NoneType'>
=> int2 = 1 : <type 'int'>
==================================================
int0 = 7                                                                # STEP 14
ACTION: int0 = 7 
int0 = 8 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 15
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x105483b48> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int0)                                                       # STEP 16
ACTION: avl0.insert(int0) 
int0 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105483b48> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([7]) : <type 'set'>
==================================================
int0 = 6                                                                # STEP 17
ACTION: int0 = 6 
int0 = 7 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 18
ACTION: avl1.delete(int1) 
int1 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1053c9830> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int3 = 18                                                               # STEP 19
ACTION: int3 = 18 
int3 = 1 : <type 'int'>
=> int3 = 18 : <type 'int'>
==================================================
int1 = 18                                                               # STEP 20
ACTION: int1 = 18 
int1 = 4 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 21
ACTION: avl0.delete(int1) 
int1 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105483b48> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.delete(int3)                                                       # STEP 22
ACTION: avl0.delete(int3) 
int3 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105483b48> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.insert(int2)                                                       # STEP 23
ACTION: avl0.insert(int2) 
int2 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105483b48> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([1, 7]) : <type 'set'>
==================================================
avl1 == avl0                                                            # STEP 24
ACTION: avl1 == avl0 
avl1 = <avl.AVLTree instance at 0x1053c9830> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x105483b48> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
avl_REF0 = set([1, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
int2 = 16                                                               # STEP 25
ACTION: int2 = 16 
int2 = 1 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 26
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x10547bdd0> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 27
ACTION: avl1.delete(int3) 
int3 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1053c9830> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl2 == avl0                                                            # STEP 28
ACTION: avl2 == avl0 
avl2 = <avl.AVLTree instance at 0x10547bdd0> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x105483b48> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
avl_REF0 = set([1, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF0 
==================================================
avl1.delete(int2)                                                       # STEP 29
ACTION: avl1.delete(int2) 
int2 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1053c9830> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.delete(int2)                                                       # STEP 30
ACTION: avl1.delete(int2) 
int2 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1053c9830> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int2 = 13                                                               # STEP 31
ACTION: int2 = 13 
int2 = 16 : <type 'int'>
=> int2 = 13 : <type 'int'>
==================================================
int1 = 9                                                                # STEP 32
ACTION: int1 = 9 
int1 = 18 : <type 'int'>
=> int1 = 9 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 33
ACTION: avl1.delete(int3) 
int3 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1053c9830> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl0.insert(int0)                                                       # STEP 34
ACTION: avl0.insert(int0) 
int0 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105483b48> : <type 'instance'>
avl_REF0 = set([1, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([1, 6, 7]) : <type 'set'>
==================================================
result = avl2.find(int2)                                                # STEP 35
ACTION: result = avl2.find(int2) 
int2 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10547bdd0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl1.delete(int1)                                                       # STEP 36
ACTION: avl1.delete(int1) 
int1 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1053c9830> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.insert(int3)                                                       # STEP 37
ACTION: avl1.insert(int3) 
int3 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1053c9830> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([18]) : <type 'set'>
==================================================
int0 = 7                                                                # STEP 38
ACTION: int0 = 7 
int0 = 6 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
avl1 == avl0                                                            # STEP 39
ACTION: avl1 == avl0 
avl1 = <avl.AVLTree instance at 0x1053c9830> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x105483b48> : <type 'instance'>
avl_REF1 = set([18]) : <type 'set'>
avl_REF0 = set([1, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
avl0.delete(int3)                                                       # STEP 40
ACTION: avl0.delete(int3) 
int3 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105483b48> : <type 'instance'>
avl_REF0 = set([1, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int3 = 10                                                               # STEP 41
ACTION: int3 = 10 
int3 = 18 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
int2 = 6                                                                # STEP 42
ACTION: int2 = 6 
int2 = 13 : <type 'int'>
=> int2 = 6 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 43
ACTION: avl0.delete(int0) 
int0 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105483b48> : <type 'instance'>
avl_REF0 = set([1, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([1, 6]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 44
ACTION: avl2.delete(int0) 
int0 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10547bdd0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl0.insert(int0)                                                       # STEP 45
ACTION: avl0.insert(int0) 
int0 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105483b48> : <type 'instance'>
avl_REF0 = set([1, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([1, 6, 7]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 46
ACTION: avl2.insert(int2) 
int2 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10547bdd0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([6]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 47
ACTION: avl2.delete(int0) 
int0 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10547bdd0> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.delete(int2)                                                       # STEP 48
ACTION: avl2.delete(int2) 
int2 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10547bdd0> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 49
ACTION: avl1.delete(int1) 
int1 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1053c9830> : <type 'instance'>
avl_REF1 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.insert(int2)                                                       # STEP 50
ACTION: avl1.insert(int2) 
int2 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1053c9830> : <type 'instance'>
avl_REF1 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([18, 6]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 51
ACTION: avl0.delete(int3) 
int3 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105483b48> : <type 'instance'>
avl_REF0 = set([1, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.delete(int3)                                                       # STEP 52
ACTION: avl0.delete(int3) 
int3 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105483b48> : <type 'instance'>
avl_REF0 = set([1, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int3 = 8                                                                # STEP 53
ACTION: int3 = 8 
int3 = 10 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 54
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x10547bdd0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl0.delete(int3)                                                       # STEP 55
ACTION: avl0.delete(int3) 
int3 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105483b48> : <type 'instance'>
avl_REF0 = set([1, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl1.insert(int0)                                                       # STEP 56
ACTION: avl1.insert(int0) 
int0 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1053c9830> : <type 'instance'>
avl_REF1 = set([18, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([18, 6, 7]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 57
ACTION: avl1.insert(int0) 
int0 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1053c9830> : <type 'instance'>
avl_REF1 = set([18, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
int2 = 5                                                                # STEP 58
ACTION: int2 = 5 
int2 = 6 : <type 'int'>
=> int2 = 5 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 59
ACTION: avl0.delete(int1) 
int1 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105483b48> : <type 'instance'>
avl_REF0 = set([1, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.insert(int3)                                                       # STEP 60
ACTION: avl0.insert(int3) 
int3 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105483b48> : <type 'instance'>
avl_REF0 = set([1, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([8, 1, 6, 7]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 61
ACTION: avl1.insert(int2) 
int2 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1053c9830> : <type 'instance'>
avl_REF1 = set([18, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([5, 6, 7, 18]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 62
ACTION: avl0.insert(int2) 
int2 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105483b48> : <type 'instance'>
avl_REF0 = set([8, 1, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([8, 1, 5, 6, 7]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 63
ACTION: avl0.delete(int2) 
int2 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105483b48> : <type 'instance'>
avl_REF0 = set([8, 1, 5, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([8, 1, 6, 7]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 64
ACTION: avl0.delete(int1) 
int1 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105483b48> : <type 'instance'>
avl_REF0 = set([8, 1, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.delete(int0)                                                       # STEP 65
ACTION: avl0.delete(int0) 
int0 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105483b48> : <type 'instance'>
avl_REF0 = set([8, 1, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([8, 1, 6]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 66
ACTION: avl1.insert(int3) 
int3 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1053c9830> : <type 'instance'>
avl_REF1 = set([5, 6, 7, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([5, 6, 7, 8, 18]) : <type 'set'>
==================================================
int3 = 18                                                               # STEP 67
ACTION: int3 = 18 
int3 = 8 : <type 'int'>
=> int3 = 18 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 68
ACTION: avl1.insert(int2) 
int2 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1053c9830> : <type 'instance'>
avl_REF1 = set([5, 6, 7, 8, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
int0 = 2                                                                # STEP 69
ACTION: int0 = 2 
int0 = 7 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 70
ACTION: avl1.delete(int3) 
int3 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1053c9830> : <type 'instance'>
avl_REF1 = set([5, 6, 7, 8, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([5, 6, 7, 8]) : <type 'set'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 71
ACTION: avl2 = avl.AVLTree() 
avl2 = <avl.AVLTree instance at 0x10547bdd0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
=> avl2 = <avl.AVLTree instance at 0x10565df38> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
==================================================
avl0 = avl.AVLTree()                                                    # STEP 72
ACTION: avl0 = avl.AVLTree() 
avl0 = <avl.AVLTree instance at 0x105483b48> : <type 'instance'>
avl_REF0 = set([8, 1, 6]) : <type 'set'>
=> avl0 = <avl.AVLTree instance at 0x10567c248> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 73
ACTION: avl2.delete(int1) 
int1 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10565df38> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int2 = 16                                                               # STEP 74
ACTION: int2 = 16 
int2 = 5 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
int1 = 8                                                                # STEP 75
ACTION: int1 = 8 
int1 = 9 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
int3 = 20                                                               # STEP 76
ACTION: int3 = 20 
int3 = 18 : <type 'int'>
=> int3 = 20 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 77
ACTION: avl2.delete(int3) 
int3 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10565df38> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl1.delete(int1)                                                       # STEP 78
ACTION: avl1.delete(int1) 
int1 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1053c9830> : <type 'instance'>
avl_REF1 = set([5, 6, 7, 8]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([5, 6, 7]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10567cfc8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1052aa518>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 72 steps

SAVING TEST AS failure.99214.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 15                                                                # STEP 0
ACTION: int2 = 15 
int2 = None : <type 'NoneType'>
=> int2 = 15 : <type 'int'>
==================================================
int0 = 2                                                                 # STEP 1
ACTION: int0 = 2 
int0 = None : <type 'NoneType'>
=> int0 = 2 : <type 'int'>
==================================================
int1 = 15                                                                # STEP 2
ACTION: int1 = 15 
int1 = None : <type 'NoneType'>
=> int1 = 15 : <type 'int'>
==================================================
int3 = 15                                                                # STEP 3
ACTION: int3 = 15 
int3 = None : <type 'NoneType'>
=> int3 = 15 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x1052aa878> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.delete(int0)                                                        # STEP 5
ACTION: avl1.delete(int0) 
int0 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1052aa878> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
result = avl1.find(int0)                                                 # STEP 6
ACTION: result = avl1.find(int0) 
int0 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1052aa878> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
int0 = 18                                                                # STEP 7
ACTION: int0 = 18 
int0 = 2 : <type 'int'>
=> int0 = 18 : <type 'int'>
==================================================
result = avl1.find(int2)                                                 # STEP 8
ACTION: result = avl1.find(int2) 
int2 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1052aa878> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl1.insert(int0)                                                        # STEP 9
ACTION: avl1.insert(int0) 
int0 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1052aa878> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([18]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 10
ACTION: avl1.delete(int3) 
int3 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1052aa878> : <type 'instance'>
avl_REF1 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1 == avl1                                                            # STEP 11
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x1052aa878> : <type 'instance'>
avl_REF1 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.delete(int1)                                                       # STEP 12
ACTION: avl1.delete(int1) 
int1 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1052aa878> : <type 'instance'>
avl_REF1 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
result = avl1.find(int2)                                                # STEP 13
ACTION: result = avl1.find(int2) 
int2 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1052aa878> : <type 'instance'>
avl_REF1 = set([18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int2 = 12                                                               # STEP 14
ACTION: int2 = 12 
int2 = 15 : <type 'int'>
=> int2 = 12 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 15
ACTION: avl1.insert(int1) 
int1 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1052aa878> : <type 'instance'>
avl_REF1 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([18, 15]) : <type 'set'>
==================================================
int3 = 11                                                               # STEP 16
ACTION: int3 = 11 
int3 = 15 : <type 'int'>
=> int3 = 11 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 17
ACTION: avl1.insert(int3) 
int3 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1052aa878> : <type 'instance'>
avl_REF1 = set([18, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([18, 11, 15]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 18
ACTION: avl1.insert(int0) 
int0 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1052aa878> : <type 'instance'>
avl_REF1 = set([18, 11, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.delete(int0)                                                       # STEP 19
ACTION: avl1.delete(int0) 
int0 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1052aa878> : <type 'instance'>
avl_REF1 = set([18, 11, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([11, 15]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 20
ACTION: avl1.delete(int2) 
int2 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1052aa878> : <type 'instance'>
avl_REF1 = set([11, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
result = avl1.find(int2)                                                # STEP 21
ACTION: result = avl1.find(int2) 
int2 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1052aa878> : <type 'instance'>
avl_REF1 = set([11, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl1.delete(int3)                                                       # STEP 22
ACTION: avl1.delete(int3) 
int3 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1052aa878> : <type 'instance'>
avl_REF1 = set([11, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([15]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 23
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1052aa878> : <type 'instance'>
avl_REF1 = set([15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int2)                                                       # STEP 24
ACTION: avl1.insert(int2) 
int2 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1052aa878> : <type 'instance'>
avl_REF1 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([12, 15]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 25
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1052aa878> : <type 'instance'>
avl_REF1 = set([12, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl2 = avl.AVLTree()                                                    # STEP 26
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x10569d368> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int0 = 18                                                               # STEP 27
ACTION: int0 = 18 
int0 = 18 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 28
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x10569d368> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int2 = 1                                                                # STEP 29
ACTION: int2 = 1 
int2 = 12 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 30
ACTION: avl1.delete(int1) 
int1 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1052aa878> : <type 'instance'>
avl_REF1 = set([12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([12]) : <type 'set'>
==================================================
result = avl2.find(int2)                                                # STEP 31
ACTION: result = avl2.find(int2) 
int2 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10569d368> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl2.delete(int1)                                                       # STEP 32
ACTION: avl2.delete(int1) 
int1 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10569d368> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl1.insert(int2)                                                       # STEP 33
ACTION: avl1.insert(int2) 
int2 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1052aa878> : <type 'instance'>
avl_REF1 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([1, 12]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 34
ACTION: avl1.delete(int3) 
int3 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1052aa878> : <type 'instance'>
avl_REF1 = set([1, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.insert(int0)                                                       # STEP 35
ACTION: avl1.insert(int0) 
int0 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1052aa878> : <type 'instance'>
avl_REF1 = set([1, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([1, 18, 12]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 36
ACTION: avl1.delete(int3) 
int3 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1052aa878> : <type 'instance'>
avl_REF1 = set([1, 18, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
result = avl2.inorder()                                                 # STEP 37
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x10569d368> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl1.delete(int0)                                                       # STEP 38
ACTION: avl1.delete(int0) 
int0 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1052aa878> : <type 'instance'>
avl_REF1 = set([1, 18, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([1, 12]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 39
ACTION: avl2.delete(int0) 
int0 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10569d368> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl1.delete(int0)                                                       # STEP 40
ACTION: avl1.delete(int0) 
int0 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1052aa878> : <type 'instance'>
avl_REF1 = set([1, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
result = avl2.find(int3)                                                # STEP 41
ACTION: result = avl2.find(int3) 
int3 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10569d368> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl1.delete(int3)                                                       # STEP 42
ACTION: avl1.delete(int3) 
int3 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1052aa878> : <type 'instance'>
avl_REF1 = set([1, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
result = avl1.inorder()                                                 # STEP 43
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1052aa878> : <type 'instance'>
avl_REF1 = set([1, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int0)                                                       # STEP 44
ACTION: avl1.insert(int0) 
int0 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1052aa878> : <type 'instance'>
avl_REF1 = set([1, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([1, 18, 12]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 45
ACTION: avl1.insert(int0) 
int0 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1052aa878> : <type 'instance'>
avl_REF1 = set([1, 18, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.insert(int0)                                                       # STEP 46
ACTION: avl1.insert(int0) 
int0 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1052aa878> : <type 'instance'>
avl_REF1 = set([1, 18, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl2.insert(int3)                                                       # STEP 47
ACTION: avl2.insert(int3) 
int3 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10569d368> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([11]) : <type 'set'>
==================================================
int3 = 4                                                                # STEP 48
ACTION: int3 = 4 
int3 = 11 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 49
ACTION: avl1.insert(int2) 
int2 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1052aa878> : <type 'instance'>
avl_REF1 = set([1, 18, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
result = avl2.inorder()                                                 # STEP 50
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x10569d368> : <type 'instance'>
avl_REF2 = set([11]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl1.delete(int2)                                                       # STEP 51
ACTION: avl1.delete(int2) 
int2 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1052aa878> : <type 'instance'>
avl_REF1 = set([1, 18, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([18, 12]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 52
ACTION: avl1.insert(int2) 
int2 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1052aa878> : <type 'instance'>
avl_REF1 = set([18, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([1, 18, 12]) : <type 'set'>
==================================================
int2 = 9                                                                # STEP 53
ACTION: int2 = 9 
int2 = 1 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
result = avl1.find(int2)                                                # STEP 54
ACTION: result = avl1.find(int2) 
int2 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1052aa878> : <type 'instance'>
avl_REF1 = set([1, 18, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int1 = 13                                                               # STEP 55
ACTION: int1 = 13 
int1 = 15 : <type 'int'>
=> int1 = 13 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 56
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x1052a8488> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 57
ACTION: avl1.insert(int3) 
int3 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1052aa878> : <type 'instance'>
avl_REF1 = set([1, 18, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([1, 4, 12, 18]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 58
ACTION: avl0.delete(int0) 
int0 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1052a8488> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.insert(int0)                                                       # STEP 59
ACTION: avl0.insert(int0) 
int0 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1052a8488> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([18]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 60
ACTION: avl0.insert(int1) 
int1 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1052a8488> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([18, 13]) : <type 'set'>
==================================================
result = avl0.find(int2)                                                # STEP 61
ACTION: result = avl0.find(int2) 
int2 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1052a8488> : <type 'instance'>
avl_REF0 = set([18, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
int1 = 5                                                                # STEP 62
ACTION: int1 = 5 
int1 = 13 : <type 'int'>
=> int1 = 5 : <type 'int'>
==================================================
int2 = 18                                                               # STEP 63
ACTION: int2 = 18 
int2 = 9 : <type 'int'>
=> int2 = 18 : <type 'int'>
==================================================
int3 = 10                                                               # STEP 64
ACTION: int3 = 10 
int3 = 4 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 65
ACTION: avl1.insert(int2) 
int2 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1052aa878> : <type 'instance'>
avl_REF1 = set([1, 4, 12, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
int2 = 10                                                               # STEP 66
ACTION: int2 = 10 
int2 = 18 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 67
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x10569d368> : <type 'instance'>
avl_REF2 = set([11]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl0.inorder()                                                 # STEP 68
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x1052a8488> : <type 'instance'>
avl_REF0 = set([18, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int2)                                                       # STEP 69
ACTION: avl0.insert(int2) 
int2 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1052a8488> : <type 'instance'>
avl_REF0 = set([18, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([18, 10, 13]) : <type 'set'>
==================================================
int2 = 11                                                               # STEP 70
ACTION: int2 = 11 
int2 = 10 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 71
ACTION: avl1.delete(int0) 
int0 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1052aa878> : <type 'instance'>
avl_REF1 = set([1, 4, 12, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([1, 4, 12]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1052ab8c0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10568c098>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
Original test has 23 steps

SAVING TEST AS failure.99214.test.2
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 11                                                                # STEP 0
ACTION: int3 = 11 
int3 = None : <type 'NoneType'>
=> int3 = 11 : <type 'int'>
==================================================
int2 = 2                                                                 # STEP 1
ACTION: int2 = 2 
int2 = None : <type 'NoneType'>
=> int2 = 2 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 2
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x10568c3f8> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int1 = 1                                                                 # STEP 3
ACTION: int1 = 1 
int1 = None : <type 'NoneType'>
=> int1 = 1 : <type 'int'>
==================================================
avl0.insert(int3)                                                        # STEP 4
ACTION: avl0.insert(int3) 
int3 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10568c3f8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([11]) : <type 'set'>
==================================================
result = avl0.inorder()                                                  # STEP 5
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x10568c3f8> : <type 'instance'>
avl_REF0 = set([11]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int1)                                                        # STEP 6
ACTION: avl0.insert(int1) 
int1 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10568c3f8> : <type 'instance'>
avl_REF0 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([1, 11]) : <type 'set'>
==================================================
result = avl0.find(int1)                                                 # STEP 7
ACTION: result = avl0.find(int1) 
int1 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10568c3f8> : <type 'instance'>
avl_REF0 = set([1, 11]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl0.delete(int3)                                                        # STEP 8
ACTION: avl0.delete(int3) 
int3 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10568c3f8> : <type 'instance'>
avl_REF0 = set([1, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([1]) : <type 'set'>
==================================================
result = avl0.find(int3)                                                 # STEP 9
ACTION: result = avl0.find(int3) 
int3 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10568c3f8> : <type 'instance'>
avl_REF0 = set([1]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
result = avl0.inorder()                                                 # STEP 10
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x10568c3f8> : <type 'instance'>
avl_REF0 = set([1]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int2)                                                       # STEP 11
ACTION: avl0.insert(int2) 
int2 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10568c3f8> : <type 'instance'>
avl_REF0 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([1, 2]) : <type 'set'>
==================================================
int0 = 14                                                               # STEP 12
ACTION: int0 = 14 
int0 = None : <type 'NoneType'>
=> int0 = 14 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 13
ACTION: avl0.insert(int0) 
int0 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10568c3f8> : <type 'instance'>
avl_REF0 = set([1, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([1, 2, 14]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 14
ACTION: avl0.delete(int2) 
int2 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10568c3f8> : <type 'instance'>
avl_REF0 = set([1, 2, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([1, 14]) : <type 'set'>
==================================================
int0 = 17                                                               # STEP 15
ACTION: int0 = 17 
int0 = 14 : <type 'int'>
=> int0 = 17 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 16
ACTION: avl0.insert(int3) 
int3 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10568c3f8> : <type 'instance'>
avl_REF0 = set([1, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([1, 11, 14]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 17
ACTION: avl0.insert(int1) 
int1 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10568c3f8> : <type 'instance'>
avl_REF0 = set([1, 11, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
result = avl0.inorder()                                                 # STEP 18
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x10568c3f8> : <type 'instance'>
avl_REF0 = set([1, 11, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.delete(int0)                                                       # STEP 19
ACTION: avl0.delete(int0) 
int0 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10568c3f8> : <type 'instance'>
avl_REF0 = set([1, 11, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.insert(int3)                                                       # STEP 20
ACTION: avl0.insert(int3) 
int3 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10568c3f8> : <type 'instance'>
avl_REF0 = set([1, 11, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
avl0.insert(int0)                                                       # STEP 21
ACTION: avl0.insert(int0) 
int0 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10568c3f8> : <type 'instance'>
avl_REF0 = set([1, 11, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([1, 11, 14, 17]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 22
ACTION: avl0.delete(int1) 
int1 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10568c3f8> : <type 'instance'>
avl_REF0 = set([1, 11, 14, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([11, 14, 17]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10570dbd8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 3 DISTINCT FAILURES
TEST #4 STEP #37 (0:00:30.043252) Fri Apr 28 03:23:17 2017 [ 145 stmts 192 branches ]
  10 [2:0]
-- < 5 [1:0]
---- < 3 [0:0] L
---- > 9 [0:0] L
-- > 20 [1:1]
---- < 12 [0:0] L
set([3, 5, 9, 10, 12, 20])
  10 [3:1]
-- < 5 [2:-1]
---- < 3 [0:0] L
---- > 9 [1:1]
------ < 8 [0:0] L
-- > 17 [1:0]
---- < 12 [0:0] L
---- > 20 [0:0] L
set([3, 5, 8, 9, 10, 12, 17, 20])
  10 [3:1]
-- < 5 [2:-1]
---- < 3 [0:0] L
---- > 9 [1:1]
------ < 8 [0:0] L
-- > 20 [1:1]
---- < 12 [0:0] L
set([3, 5, 8, 9, 10, 12, 20])
  10 [3:1]
-- < 5 [2:-1]
---- < 3 [0:0] L
---- > 9 [1:1]
------ < 8 [0:0] L
-- > 20 [1:1]
---- < 12 [0:0] L
set([3, 5, 8, 9, 10, 12, 20])
  10 [3:1]
-- < 5 [2:-1]
---- < 3 [0:0] L
---- > 9 [1:1]
------ < 8 [0:0] L
-- > 20 [1:1]
---- < 12 [0:0] L
set([3, 5, 8, 9, 10, 12, 20])
  10 [3:1]
-- < 5 [2:-1]
---- < 3 [0:0] L
---- > 9 [1:1]
------ < 8 [0:0] L
-- > 17 [1:0]
---- < 12 [0:0] L
---- > 20 [0:0] L
set([3, 5, 8, 9, 10, 12, 17, 20])
  10 [3:1]
-- < 5 [2:-1]
---- < 3 [0:0] L
---- > 9 [1:1]
------ < 8 [0:0] L
-- > 12 [1:0]
---- < 11 [0:0] L
---- > 20 [0:0] L
set([3, 5, 8, 9, 10, 11, 12, 20])
  10 [3:1]
-- < 5 [2:-1]
---- < 3 [0:0] L
---- > 9 [1:1]
------ < 8 [0:0] L
-- > 12 [1:0]
---- < 11 [0:0] L
---- > 20 [0:0] L
set([3, 5, 8, 9, 10, 11, 12, 20])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1057179e0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 97 steps

SAVING TEST AS failure.99214.test.3
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 20                                                                # STEP 0
ACTION: int2 = 20 
int2 = None : <type 'NoneType'>
=> int2 = 20 : <type 'int'>
==================================================
int3 = 10                                                                # STEP 1
ACTION: int3 = 10 
int3 = None : <type 'NoneType'>
=> int3 = 10 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 2
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x1052b9128> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int1 = 13                                                                # STEP 3
ACTION: int1 = 13 
int1 = None : <type 'NoneType'>
=> int1 = 13 : <type 'int'>
==================================================
avl1.delete(int2)                                                        # STEP 4
ACTION: avl1.delete(int2) 
int2 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1052b9128> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1 == avl1                                                             # STEP 5
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x1052b9128> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.insert(int3)                                                        # STEP 6
ACTION: avl1.insert(int3) 
int3 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1052b9128> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([10]) : <type 'set'>
==================================================
int3 = 5                                                                 # STEP 7
ACTION: int3 = 5 
int3 = 10 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
avl1.insert(int1)                                                        # STEP 8
ACTION: avl1.insert(int1) 
int1 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1052b9128> : <type 'instance'>
avl_REF1 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([10, 13]) : <type 'set'>
==================================================
avl1.delete(int3)                                                        # STEP 9
ACTION: avl1.delete(int3) 
int3 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1052b9128> : <type 'instance'>
avl_REF1 = set([10, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.delete(int1)                                                       # STEP 10
ACTION: avl1.delete(int1) 
int1 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1052b9128> : <type 'instance'>
avl_REF1 = set([10, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([10]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 11
ACTION: avl1.delete(int3) 
int3 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1052b9128> : <type 'instance'>
avl_REF1 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.delete(int1)                                                       # STEP 12
ACTION: avl1.delete(int1) 
int1 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1052b9128> : <type 'instance'>
avl_REF1 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.insert(int2)                                                       # STEP 13
ACTION: avl1.insert(int2) 
int2 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1052b9128> : <type 'instance'>
avl_REF1 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([10, 20]) : <type 'set'>
==================================================
int2 = 12                                                               # STEP 14
ACTION: int2 = 12 
int2 = 20 : <type 'int'>
=> int2 = 12 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 15
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x105725680> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 16
ACTION: avl1.insert(int1) 
int1 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1052b9128> : <type 'instance'>
avl_REF1 = set([10, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([10, 20, 13]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 17
ACTION: avl1.delete(int1) 
int1 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1052b9128> : <type 'instance'>
avl_REF1 = set([10, 20, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([10, 20]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 18
ACTION: avl1.delete(int2) 
int2 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1052b9128> : <type 'instance'>
avl_REF1 = set([10, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
result = avl0.inorder()                                                 # STEP 19
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x105725680> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl1.delete(int3)                                                       # STEP 20
ACTION: avl1.delete(int3) 
int3 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1052b9128> : <type 'instance'>
avl_REF1 = set([10, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
result = avl0.find(int3)                                                # STEP 21
ACTION: result = avl0.find(int3) 
int3 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105725680> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
avl1.delete(int3)                                                       # STEP 22
ACTION: avl1.delete(int3) 
int3 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1052b9128> : <type 'instance'>
avl_REF1 = set([10, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int1 = 17                                                               # STEP 23
ACTION: int1 = 17 
int1 = 13 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
int0 = 3                                                                # STEP 24
ACTION: int0 = 3 
int0 = None : <type 'NoneType'>
=> int0 = 3 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 25
ACTION: avl1.insert(int0) 
int0 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1052b9128> : <type 'instance'>
avl_REF1 = set([10, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([10, 3, 20]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 26
ACTION: avl0.delete(int1) 
int1 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105725680> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
result = avl1.inorder()                                                 # STEP 27
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1052b9128> : <type 'instance'>
avl_REF1 = set([10, 3, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl0.insert(int0)                                                       # STEP 28
ACTION: avl0.insert(int0) 
int0 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105725680> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([3]) : <type 'set'>
==================================================
result = avl0.find(int3)                                                # STEP 29
ACTION: result = avl0.find(int3) 
int3 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105725680> : <type 'instance'>
avl_REF0 = set([3]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
avl0.insert(int3)                                                       # STEP 30
ACTION: avl0.insert(int3) 
int3 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105725680> : <type 'instance'>
avl_REF0 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([3, 5]) : <type 'set'>
==================================================
int1 = 12                                                               # STEP 31
ACTION: int1 = 12 
int1 = 17 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 32
ACTION: avl1.insert(int3) 
int3 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1052b9128> : <type 'instance'>
avl_REF1 = set([10, 3, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([10, 3, 20, 5]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 33
ACTION: avl0.insert(int1) 
int1 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105725680> : <type 'instance'>
avl_REF0 = set([3, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([3, 12, 5]) : <type 'set'>
==================================================
int3 = 10                                                               # STEP 34
ACTION: int3 = 10 
int3 = 5 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 35
ACTION: avl1.insert(int2) 
int2 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1052b9128> : <type 'instance'>
avl_REF1 = set([10, 3, 20, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([12, 10, 3, 20, 5]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 36
ACTION: avl1.insert(int2) 
int2 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1052b9128> : <type 'instance'>
avl_REF1 = set([12, 10, 3, 20, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
int1 = 13                                                               # STEP 37
ACTION: int1 = 13 
int1 = 12 : <type 'int'>
=> int1 = 13 : <type 'int'>
==================================================
int0 = 8                                                                # STEP 38
ACTION: int0 = 8 
int0 = 3 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
int2 = 9                                                                # STEP 39
ACTION: int2 = 9 
int2 = 12 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 40
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1052b9128> : <type 'instance'>
avl_REF1 = set([12, 10, 3, 20, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
result = avl1.inorder()                                                 # STEP 41
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1052b9128> : <type 'instance'>
avl_REF1 = set([12, 10, 3, 20, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int3)                                                       # STEP 42
ACTION: avl1.insert(int3) 
int3 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1052b9128> : <type 'instance'>
avl_REF1 = set([12, 10, 3, 20, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
int3 = 11                                                               # STEP 43
ACTION: int3 = 11 
int3 = 10 : <type 'int'>
=> int3 = 11 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 44
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x105725680> : <type 'instance'>
avl_REF0 = set([3, 12, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl1.insert(int2)                                                       # STEP 45
ACTION: avl1.insert(int2) 
int2 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1052b9128> : <type 'instance'>
avl_REF1 = set([12, 10, 3, 20, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([3, 5, 9, 10, 12, 20]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 46
ACTION: avl1.delete(int3) 
int3 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1052b9128> : <type 'instance'>
avl_REF1 = set([3, 5, 9, 10, 12, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl0.delete(int3)                                                       # STEP 47
ACTION: avl0.delete(int3) 
int3 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105725680> : <type 'instance'>
avl_REF0 = set([3, 12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl1.delete(int0)                                                       # STEP 48
ACTION: avl1.delete(int0) 
int0 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1052b9128> : <type 'instance'>
avl_REF1 = set([3, 5, 9, 10, 12, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl0.insert(int1)                                                       # STEP 49
ACTION: avl0.insert(int1) 
int1 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105725680> : <type 'instance'>
avl_REF0 = set([3, 12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([3, 12, 5, 13]) : <type 'set'>
==================================================
avl1.display()                                                          # STEP 50
ACTION: avl1.display() 
avl1 = <avl.AVLTree instance at 0x1052b9128> : <type 'instance'>
avl_REF1 = set([3, 5, 9, 10, 12, 20]) : <type 'set'>
  10 [2:0]
-- < 5 [1:0]
---- < 3 [0:0] L
---- > 9 [0:0] L
-- > 20 [1:1]
---- < 12 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([3, 5, 9, 10, 12, 20])
==================================================
avl1.delete(int3)                                                       # STEP 51
ACTION: avl1.delete(int3) 
int3 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1052b9128> : <type 'instance'>
avl_REF1 = set([3, 5, 9, 10, 12, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl0.insert(int3)                                                       # STEP 52
ACTION: avl0.insert(int3) 
int3 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105725680> : <type 'instance'>
avl_REF0 = set([3, 12, 5, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([11, 3, 12, 5, 13]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 53
ACTION: avl1.delete(int0) 
int0 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1052b9128> : <type 'instance'>
avl_REF1 = set([3, 5, 9, 10, 12, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.delete(int3)                                                       # STEP 54
ACTION: avl1.delete(int3) 
int3 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1052b9128> : <type 'instance'>
avl_REF1 = set([3, 5, 9, 10, 12, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int1 = 11                                                               # STEP 55
ACTION: int1 = 11 
int1 = 13 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
int3 = 14                                                               # STEP 56
ACTION: int3 = 14 
int3 = 11 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
int2 = 17                                                               # STEP 57
ACTION: int2 = 17 
int2 = 9 : <type 'int'>
=> int2 = 17 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 58
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1052b9128> : <type 'instance'>
avl_REF1 = set([3, 5, 9, 10, 12, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int2)                                                       # STEP 59
ACTION: avl1.insert(int2) 
int2 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1052b9128> : <type 'instance'>
avl_REF1 = set([3, 5, 9, 10, 12, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([3, 5, 9, 10, 12, 17, 20]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 60
ACTION: avl1.insert(int0) 
int0 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1052b9128> : <type 'instance'>
avl_REF1 = set([3, 5, 9, 10, 12, 17, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([3, 5, 8, 9, 10, 12, 17, 20]) : <type 'set'>
==================================================
avl1.display()                                                          # STEP 61
ACTION: avl1.display() 
avl1 = <avl.AVLTree instance at 0x1052b9128> : <type 'instance'>
avl_REF1 = set([3, 5, 8, 9, 10, 12, 17, 20]) : <type 'set'>
  10 [3:1]
-- < 5 [2:-1]
---- < 3 [0:0] L
---- > 9 [1:1]
------ < 8 [0:0] L
-- > 17 [1:0]
---- < 12 [0:0] L
---- > 20 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([3, 5, 8, 9, 10, 12, 17, 20])
==================================================
result = avl1.find(int0)                                                # STEP 62
ACTION: result = avl1.find(int0) 
int0 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1052b9128> : <type 'instance'>
avl_REF1 = set([3, 5, 8, 9, 10, 12, 17, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl1.delete(int2)                                                       # STEP 63
ACTION: avl1.delete(int2) 
int2 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1052b9128> : <type 'instance'>
avl_REF1 = set([3, 5, 8, 9, 10, 12, 17, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([3, 5, 8, 9, 10, 12, 20]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 64
ACTION: avl1.delete(int2) 
int2 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1052b9128> : <type 'instance'>
avl_REF1 = set([3, 5, 8, 9, 10, 12, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int0 = 17                                                               # STEP 65
ACTION: int0 = 17 
int0 = 8 : <type 'int'>
=> int0 = 17 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 66
ACTION: avl1.delete(int3) 
int3 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1052b9128> : <type 'instance'>
avl_REF1 = set([3, 5, 8, 9, 10, 12, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.display()                                                          # STEP 67
ACTION: avl1.display() 
avl1 = <avl.AVLTree instance at 0x1052b9128> : <type 'instance'>
avl_REF1 = set([3, 5, 8, 9, 10, 12, 20]) : <type 'set'>
  10 [3:1]
-- < 5 [2:-1]
---- < 3 [0:0] L
---- > 9 [1:1]
------ < 8 [0:0] L
-- > 20 [1:1]
---- < 12 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([3, 5, 8, 9, 10, 12, 20])
==================================================
avl1.display()                                                          # STEP 68
ACTION: avl1.display() 
avl1 = <avl.AVLTree instance at 0x1052b9128> : <type 'instance'>
avl_REF1 = set([3, 5, 8, 9, 10, 12, 20]) : <type 'set'>
  10 [3:1]
-- < 5 [2:-1]
---- < 3 [0:0] L
---- > 9 [1:1]
------ < 8 [0:0] L
-- > 20 [1:1]
---- < 12 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([3, 5, 8, 9, 10, 12, 20])
==================================================
avl1.display()                                                          # STEP 69
ACTION: avl1.display() 
avl1 = <avl.AVLTree instance at 0x1052b9128> : <type 'instance'>
avl_REF1 = set([3, 5, 8, 9, 10, 12, 20]) : <type 'set'>
  10 [3:1]
-- < 5 [2:-1]
---- < 3 [0:0] L
---- > 9 [1:1]
------ < 8 [0:0] L
-- > 20 [1:1]
---- < 12 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([3, 5, 8, 9, 10, 12, 20])
==================================================
avl0.insert(int3)                                                       # STEP 70
ACTION: avl0.insert(int3) 
int3 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105725680> : <type 'instance'>
avl_REF0 = set([11, 3, 12, 5, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([3, 5, 11, 12, 13, 14]) : <type 'set'>
==================================================
int2 = 13                                                               # STEP 71
ACTION: int2 = 13 
int2 = 17 : <type 'int'>
=> int2 = 13 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 72
ACTION: avl0.delete(int1) 
int1 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105725680> : <type 'instance'>
avl_REF0 = set([3, 5, 11, 12, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([3, 5, 12, 13, 14]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 73
ACTION: avl1.delete(int1) 
int1 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1052b9128> : <type 'instance'>
avl_REF1 = set([3, 5, 8, 9, 10, 12, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.insert(int0)                                                       # STEP 74
ACTION: avl1.insert(int0) 
int0 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1052b9128> : <type 'instance'>
avl_REF1 = set([3, 5, 8, 9, 10, 12, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([3, 5, 8, 9, 10, 12, 17, 20]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 75
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x105725680> : <type 'instance'>
avl_REF0 = set([3, 5, 12, 13, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl1.delete(int3)                                                       # STEP 76
ACTION: avl1.delete(int3) 
int3 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1052b9128> : <type 'instance'>
avl_REF1 = set([3, 5, 8, 9, 10, 12, 17, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.display()                                                          # STEP 77
ACTION: avl1.display() 
avl1 = <avl.AVLTree instance at 0x1052b9128> : <type 'instance'>
avl_REF1 = set([3, 5, 8, 9, 10, 12, 17, 20]) : <type 'set'>
  10 [3:1]
-- < 5 [2:-1]
---- < 3 [0:0] L
---- > 9 [1:1]
------ < 8 [0:0] L
-- > 17 [1:0]
---- < 12 [0:0] L
---- > 20 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([3, 5, 8, 9, 10, 12, 17, 20])
==================================================
avl0.insert(int1)                                                       # STEP 78
ACTION: avl0.insert(int1) 
int1 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105725680> : <type 'instance'>
avl_REF0 = set([3, 5, 12, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([3, 5, 11, 12, 13, 14]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 79
ACTION: avl1.delete(int0) 
int0 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1052b9128> : <type 'instance'>
avl_REF1 = set([3, 5, 8, 9, 10, 12, 17, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([3, 5, 8, 9, 10, 12, 20]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 80
ACTION: avl1.insert(int1) 
int1 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1052b9128> : <type 'instance'>
avl_REF1 = set([3, 5, 8, 9, 10, 12, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([3, 5, 8, 9, 10, 11, 12, 20]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 81
ACTION: avl0.delete(int2) 
int2 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105725680> : <type 'instance'>
avl_REF0 = set([3, 5, 11, 12, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([3, 5, 11, 12, 14]) : <type 'set'>
==================================================
int3 = 16                                                               # STEP 82
ACTION: int3 = 16 
int3 = 14 : <type 'int'>
=> int3 = 16 : <type 'int'>
==================================================
avl1.display()                                                          # STEP 83
ACTION: avl1.display() 
avl1 = <avl.AVLTree instance at 0x1052b9128> : <type 'instance'>
avl_REF1 = set([3, 5, 8, 9, 10, 11, 12, 20]) : <type 'set'>
  10 [3:1]
-- < 5 [2:-1]
---- < 3 [0:0] L
---- > 9 [1:1]
------ < 8 [0:0] L
-- > 12 [1:0]
---- < 11 [0:0] L
---- > 20 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([3, 5, 8, 9, 10, 11, 12, 20])
==================================================
avl0.insert(int2)                                                       # STEP 84
ACTION: avl0.insert(int2) 
int2 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105725680> : <type 'instance'>
avl_REF0 = set([3, 5, 11, 12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([3, 5, 11, 12, 13, 14]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 85
ACTION: avl1.delete(int0) 
int0 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1052b9128> : <type 'instance'>
avl_REF1 = set([3, 5, 8, 9, 10, 11, 12, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.display()                                                          # STEP 86
ACTION: avl1.display() 
avl1 = <avl.AVLTree instance at 0x1052b9128> : <type 'instance'>
avl_REF1 = set([3, 5, 8, 9, 10, 11, 12, 20]) : <type 'set'>
  10 [3:1]
-- < 5 [2:-1]
---- < 3 [0:0] L
---- > 9 [1:1]
------ < 8 [0:0] L
-- > 12 [1:0]
---- < 11 [0:0] L
---- > 20 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([3, 5, 8, 9, 10, 11, 12, 20])
==================================================
result = avl1.inorder()                                                 # STEP 87
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1052b9128> : <type 'instance'>
avl_REF1 = set([3, 5, 8, 9, 10, 11, 12, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int2 = 10                                                               # STEP 88
ACTION: int2 = 10 
int2 = 13 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 89
ACTION: avl1.insert(int3) 
int3 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1052b9128> : <type 'instance'>
avl_REF1 = set([3, 5, 8, 9, 10, 11, 12, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([3, 5, 8, 9, 10, 11, 12, 16, 20]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 90
ACTION: avl1.insert(int0) 
int0 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1052b9128> : <type 'instance'>
avl_REF1 = set([3, 5, 8, 9, 10, 11, 12, 16, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([3, 5, 8, 9, 10, 11, 12, 16, 17, 20]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 91
ACTION: avl1.insert(int1) 
int1 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1052b9128> : <type 'instance'>
avl_REF1 = set([3, 5, 8, 9, 10, 11, 12, 16, 17, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
result = avl1.inorder()                                                 # STEP 92
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1052b9128> : <type 'instance'>
avl_REF1 = set([3, 5, 8, 9, 10, 11, 12, 16, 17, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int3 = 20                                                               # STEP 93
ACTION: int3 = 20 
int3 = 16 : <type 'int'>
=> int3 = 20 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 94
ACTION: avl1.insert(int1) 
int1 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1052b9128> : <type 'instance'>
avl_REF1 = set([3, 5, 8, 9, 10, 11, 12, 16, 17, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl1.insert(int2)                                                       # STEP 95
ACTION: avl1.insert(int2) 
int2 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1052b9128> : <type 'instance'>
avl_REF1 = set([3, 5, 8, 9, 10, 11, 12, 16, 17, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
avl1.delete(int2)                                                       # STEP 96
ACTION: avl1.delete(int2) 
int2 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1052b9128> : <type 'instance'>
avl_REF1 = set([3, 5, 8, 9, 10, 11, 12, 16, 17, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([3, 5, 8, 9, 11, 12, 16, 17, 20]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10572f200>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 4 DISTINCT FAILURES
  13 [2:0]
-- < 9 [1:0]
---- < 2 [0:0] L
---- > 10 [0:0] L
-- > 15 [1:-1]
---- > 17 [0:0] L
set([2, 9, 10, 13, 15, 17])
  13 [2:0]
-- < 5 [1:0]
---- < 2 [0:0] L
---- > 10 [0:0] L
-- > 15 [1:-1]
---- > 17 [0:0] L
set([2, 5, 10, 13, 15, 17])
  13 [2:0]
-- < 5 [1:0]
---- < 2 [0:0] L
---- > 10 [0:0] L
-- > 15 [1:-1]
---- > 17 [0:0] L
set([2, 5, 10, 13, 15, 17])
  13 [2:0]
-- < 5 [1:0]
---- < 2 [0:0] L
---- > 10 [0:0] L
-- > 15 [1:-1]
---- > 17 [0:0] L
set([2, 5, 10, 13, 15, 17])
  13 [2:0]
-- < 5 [1:0]
---- < 2 [0:0] L
---- > 10 [0:0] L
-- > 15 [1:-1]
---- > 17 [0:0] L
set([2, 5, 10, 13, 15, 17])
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 27
STOPPING TESTING DUE TO TIMEOUT
8.51713607058 PERCENT COVERED
60.2333891392 TOTAL RUNTIME
7 EXECUTED
498 TOTAL TEST OPERATIONS
19.3094274998 TIME SPENT EXECUTING TEST OPERATIONS
0.0542612075806 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
19.4338860512 TIME SPENT CHECKING PROPERTIES
38.7433135509 TOTAL TIME SPENT RUNNING SUT
0.00456190109253 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
4 FAILED
0 REPEATS OF FAILURES
4 ACTUAL DISTINCT FAILURES

FAILURE 0
int1 = 4                                                                 # STEP 0
avl1 = avl.AVLTree()                                                     # STEP 1
int3 = 1                                                                 # STEP 2
result = avl1.find(int3)                                                 # STEP 3
avl1.insert(int3)                                                        # STEP 4
avl1.delete(int3)                                                        # STEP 5
int0 = 8                                                                 # STEP 6
avl1.insert(int0)                                                        # STEP 7
avl0 = avl.AVLTree()                                                     # STEP 8
avl0.delete(int0)                                                        # STEP 9
avl1.delete(int3)                                                       # STEP 10
result = avl1.find(int3)                                                # STEP 11
avl1.delete(int0)                                                       # STEP 12
int2 = 1                                                                # STEP 13
int0 = 7                                                                # STEP 14
result = avl0.inorder()                                                 # STEP 15
avl0.insert(int0)                                                       # STEP 16
int0 = 6                                                                # STEP 17
avl1.delete(int1)                                                       # STEP 18
int3 = 18                                                               # STEP 19
int1 = 18                                                               # STEP 20
avl0.delete(int1)                                                       # STEP 21
avl0.delete(int3)                                                       # STEP 22
avl0.insert(int2)                                                       # STEP 23
avl1 == avl0                                                            # STEP 24
int2 = 16                                                               # STEP 25
avl2 = avl.AVLTree()                                                    # STEP 26
avl1.delete(int3)                                                       # STEP 27
avl2 == avl0                                                            # STEP 28
avl1.delete(int2)                                                       # STEP 29
avl1.delete(int2)                                                       # STEP 30
int2 = 13                                                               # STEP 31
int1 = 9                                                                # STEP 32
avl1.delete(int3)                                                       # STEP 33
avl0.insert(int0)                                                       # STEP 34
result = avl2.find(int2)                                                # STEP 35
avl1.delete(int1)                                                       # STEP 36
avl1.insert(int3)                                                       # STEP 37
int0 = 7                                                                # STEP 38
avl1 == avl0                                                            # STEP 39
avl0.delete(int3)                                                       # STEP 40
int3 = 10                                                               # STEP 41
int2 = 6                                                                # STEP 42
avl0.delete(int0)                                                       # STEP 43
avl2.delete(int0)                                                       # STEP 44
avl0.insert(int0)                                                       # STEP 45
avl2.insert(int2)                                                       # STEP 46
avl2.delete(int0)                                                       # STEP 47
avl2.delete(int2)                                                       # STEP 48
avl1.delete(int1)                                                       # STEP 49
avl1.insert(int2)                                                       # STEP 50
avl0.delete(int3)                                                       # STEP 51
avl0.delete(int3)                                                       # STEP 52
int3 = 8                                                                # STEP 53
result = avl2.inorder()                                                 # STEP 54
avl0.delete(int3)                                                       # STEP 55
avl1.insert(int0)                                                       # STEP 56
avl1.insert(int0)                                                       # STEP 57
int2 = 5                                                                # STEP 58
avl0.delete(int1)                                                       # STEP 59
avl0.insert(int3)                                                       # STEP 60
avl1.insert(int2)                                                       # STEP 61
avl0.insert(int2)                                                       # STEP 62
avl0.delete(int2)                                                       # STEP 63
avl0.delete(int1)                                                       # STEP 64
avl0.delete(int0)                                                       # STEP 65
avl1.insert(int3)                                                       # STEP 66
int3 = 18                                                               # STEP 67
avl1.insert(int2)                                                       # STEP 68
int0 = 2                                                                # STEP 69
avl1.delete(int3)                                                       # STEP 70
avl2 = avl.AVLTree()                                                    # STEP 71
avl0 = avl.AVLTree()                                                    # STEP 72
avl2.delete(int1)                                                       # STEP 73
int2 = 16                                                               # STEP 74
int1 = 8                                                                # STEP 75
int3 = 20                                                               # STEP 76
avl2.delete(int3)                                                       # STEP 77
avl1.delete(int1)                                                       # STEP 78
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10567cfc8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE 1
int2 = 15                                                                # STEP 0
int0 = 2                                                                 # STEP 1
int1 = 15                                                                # STEP 2
int3 = 15                                                                # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
avl1.delete(int0)                                                        # STEP 5
result = avl1.find(int0)                                                 # STEP 6
int0 = 18                                                                # STEP 7
result = avl1.find(int2)                                                 # STEP 8
avl1.insert(int0)                                                        # STEP 9
avl1.delete(int3)                                                       # STEP 10
avl1 == avl1                                                            # STEP 11
avl1.delete(int1)                                                       # STEP 12
result = avl1.find(int2)                                                # STEP 13
int2 = 12                                                               # STEP 14
avl1.insert(int1)                                                       # STEP 15
int3 = 11                                                               # STEP 16
avl1.insert(int3)                                                       # STEP 17
avl1.insert(int0)                                                       # STEP 18
avl1.delete(int0)                                                       # STEP 19
avl1.delete(int2)                                                       # STEP 20
result = avl1.find(int2)                                                # STEP 21
avl1.delete(int3)                                                       # STEP 22
result = avl1.inorder()                                                 # STEP 23
avl1.insert(int2)                                                       # STEP 24
result = avl1.inorder()                                                 # STEP 25
avl2 = avl.AVLTree()                                                    # STEP 26
int0 = 18                                                               # STEP 27
result = avl2.inorder()                                                 # STEP 28
int2 = 1                                                                # STEP 29
avl1.delete(int1)                                                       # STEP 30
result = avl2.find(int2)                                                # STEP 31
avl2.delete(int1)                                                       # STEP 32
avl1.insert(int2)                                                       # STEP 33
avl1.delete(int3)                                                       # STEP 34
avl1.insert(int0)                                                       # STEP 35
avl1.delete(int3)                                                       # STEP 36
result = avl2.inorder()                                                 # STEP 37
avl1.delete(int0)                                                       # STEP 38
avl2.delete(int0)                                                       # STEP 39
avl1.delete(int0)                                                       # STEP 40
result = avl2.find(int3)                                                # STEP 41
avl1.delete(int3)                                                       # STEP 42
result = avl1.inorder()                                                 # STEP 43
avl1.insert(int0)                                                       # STEP 44
avl1.insert(int0)                                                       # STEP 45
avl1.insert(int0)                                                       # STEP 46
avl2.insert(int3)                                                       # STEP 47
int3 = 4                                                                # STEP 48
avl1.insert(int2)                                                       # STEP 49
result = avl2.inorder()                                                 # STEP 50
avl1.delete(int2)                                                       # STEP 51
avl1.insert(int2)                                                       # STEP 52
int2 = 9                                                                # STEP 53
result = avl1.find(int2)                                                # STEP 54
int1 = 13                                                               # STEP 55
avl0 = avl.AVLTree()                                                    # STEP 56
avl1.insert(int3)                                                       # STEP 57
avl0.delete(int0)                                                       # STEP 58
avl0.insert(int0)                                                       # STEP 59
avl0.insert(int1)                                                       # STEP 60
result = avl0.find(int2)                                                # STEP 61
int1 = 5                                                                # STEP 62
int2 = 18                                                               # STEP 63
int3 = 10                                                               # STEP 64
avl1.insert(int2)                                                       # STEP 65
int2 = 10                                                               # STEP 66
result = avl2.inorder()                                                 # STEP 67
result = avl0.inorder()                                                 # STEP 68
avl0.insert(int2)                                                       # STEP 69
int2 = 11                                                               # STEP 70
avl1.delete(int0)                                                       # STEP 71
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1052ab8c0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE 2
int3 = 11                                                                # STEP 0
int2 = 2                                                                 # STEP 1
avl0 = avl.AVLTree()                                                     # STEP 2
int1 = 1                                                                 # STEP 3
avl0.insert(int3)                                                        # STEP 4
result = avl0.inorder()                                                  # STEP 5
avl0.insert(int1)                                                        # STEP 6
result = avl0.find(int1)                                                 # STEP 7
avl0.delete(int3)                                                        # STEP 8
result = avl0.find(int3)                                                 # STEP 9
result = avl0.inorder()                                                 # STEP 10
avl0.insert(int2)                                                       # STEP 11
int0 = 14                                                               # STEP 12
avl0.insert(int0)                                                       # STEP 13
avl0.delete(int2)                                                       # STEP 14
int0 = 17                                                               # STEP 15
avl0.insert(int3)                                                       # STEP 16
avl0.insert(int1)                                                       # STEP 17
result = avl0.inorder()                                                 # STEP 18
avl0.delete(int0)                                                       # STEP 19
avl0.insert(int3)                                                       # STEP 20
avl0.insert(int0)                                                       # STEP 21
avl0.delete(int1)                                                       # STEP 22
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10570dbd8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE 3
int2 = 20                                                                # STEP 0
int3 = 10                                                                # STEP 1
avl1 = avl.AVLTree()                                                     # STEP 2
int1 = 13                                                                # STEP 3
avl1.delete(int2)                                                        # STEP 4
avl1 == avl1                                                             # STEP 5
avl1.insert(int3)                                                        # STEP 6
int3 = 5                                                                 # STEP 7
avl1.insert(int1)                                                        # STEP 8
avl1.delete(int3)                                                        # STEP 9
avl1.delete(int1)                                                       # STEP 10
avl1.delete(int3)                                                       # STEP 11
avl1.delete(int1)                                                       # STEP 12
avl1.insert(int2)                                                       # STEP 13
int2 = 12                                                               # STEP 14
avl0 = avl.AVLTree()                                                    # STEP 15
avl1.insert(int1)                                                       # STEP 16
avl1.delete(int1)                                                       # STEP 17
avl1.delete(int2)                                                       # STEP 18
result = avl0.inorder()                                                 # STEP 19
avl1.delete(int3)                                                       # STEP 20
result = avl0.find(int3)                                                # STEP 21
avl1.delete(int3)                                                       # STEP 22
int1 = 17                                                               # STEP 23
int0 = 3                                                                # STEP 24
avl1.insert(int0)                                                       # STEP 25
avl0.delete(int1)                                                       # STEP 26
result = avl1.inorder()                                                 # STEP 27
avl0.insert(int0)                                                       # STEP 28
result = avl0.find(int3)                                                # STEP 29
avl0.insert(int3)                                                       # STEP 30
int1 = 12                                                               # STEP 31
avl1.insert(int3)                                                       # STEP 32
avl0.insert(int1)                                                       # STEP 33
int3 = 10                                                               # STEP 34
avl1.insert(int2)                                                       # STEP 35
avl1.insert(int2)                                                       # STEP 36
int1 = 13                                                               # STEP 37
int0 = 8                                                                # STEP 38
int2 = 9                                                                # STEP 39
result = avl1.inorder()                                                 # STEP 40
result = avl1.inorder()                                                 # STEP 41
avl1.insert(int3)                                                       # STEP 42
int3 = 11                                                               # STEP 43
result = avl0.inorder()                                                 # STEP 44
avl1.insert(int2)                                                       # STEP 45
avl1.delete(int3)                                                       # STEP 46
avl0.delete(int3)                                                       # STEP 47
avl1.delete(int0)                                                       # STEP 48
avl0.insert(int1)                                                       # STEP 49
avl1.display()                                                          # STEP 50
avl1.delete(int3)                                                       # STEP 51
avl0.insert(int3)                                                       # STEP 52
avl1.delete(int0)                                                       # STEP 53
avl1.delete(int3)                                                       # STEP 54
int1 = 11                                                               # STEP 55
int3 = 14                                                               # STEP 56
int2 = 17                                                               # STEP 57
result = avl1.inorder()                                                 # STEP 58
avl1.insert(int2)                                                       # STEP 59
avl1.insert(int0)                                                       # STEP 60
avl1.display()                                                          # STEP 61
result = avl1.find(int0)                                                # STEP 62
avl1.delete(int2)                                                       # STEP 63
avl1.delete(int2)                                                       # STEP 64
int0 = 17                                                               # STEP 65
avl1.delete(int3)                                                       # STEP 66
avl1.display()                                                          # STEP 67
avl1.display()                                                          # STEP 68
avl1.display()                                                          # STEP 69
avl0.insert(int3)                                                       # STEP 70
int2 = 13                                                               # STEP 71
avl0.delete(int1)                                                       # STEP 72
avl1.delete(int1)                                                       # STEP 73
avl1.insert(int0)                                                       # STEP 74
result = avl0.inorder()                                                 # STEP 75
avl1.delete(int3)                                                       # STEP 76
avl1.display()                                                          # STEP 77
avl0.insert(int1)                                                       # STEP 78
avl1.delete(int0)                                                       # STEP 79
avl1.insert(int1)                                                       # STEP 80
avl0.delete(int2)                                                       # STEP 81
int3 = 16                                                               # STEP 82
avl1.display()                                                          # STEP 83
avl0.insert(int2)                                                       # STEP 84
avl1.delete(int0)                                                       # STEP 85
avl1.display()                                                          # STEP 86
result = avl1.inorder()                                                 # STEP 87
int2 = 10                                                               # STEP 88
avl1.insert(int3)                                                       # STEP 89
avl1.insert(int0)                                                       # STEP 90
avl1.insert(int1)                                                       # STEP 91
result = avl1.inorder()                                                 # STEP 92
int3 = 20                                                               # STEP 93
avl1.insert(int1)                                                       # STEP 94
avl1.insert(int2)                                                       # STEP 95
avl1.delete(int2)                                                       # STEP 96
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10572f200>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
214 BRANCHES COVERED
161 STATEMENTS COVERED

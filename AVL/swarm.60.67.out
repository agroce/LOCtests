Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=True, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.548.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
TEST #4 STEP #59 (0:00:30.028053) Fri Apr 28 06:37:47 2017 [ 126 stmts 168 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103973f80>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
Original test has 42 steps

SAVING TEST AS failure.548.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 20                                                                # STEP 0
ACTION: int2 = 20 
int2 = None : <type 'NoneType'>
=> int2 = 20 : <type 'int'>
==================================================
int0 = 15                                                                # STEP 1
ACTION: int0 = 15 
int0 = None : <type 'NoneType'>
=> int0 = 15 : <type 'int'>
==================================================
int3 = 3                                                                 # STEP 2
ACTION: int3 = 3 
int3 = None : <type 'NoneType'>
=> int3 = 3 : <type 'int'>
==================================================
int1 = 17                                                                # STEP 3
ACTION: int1 = 17 
int1 = None : <type 'NoneType'>
=> int1 = 17 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x103e9e680> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int2)                                                        # STEP 5
ACTION: avl2.insert(int2) 
int2 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e9e680> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([20]) : <type 'set'>
==================================================
int2 = 6                                                                 # STEP 6
ACTION: int2 = 6 
int2 = 20 : <type 'int'>
=> int2 = 6 : <type 'int'>
==================================================
avl2.insert(int0)                                                        # STEP 7
ACTION: avl2.insert(int0) 
int0 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e9e680> : <type 'instance'>
avl_REF2 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([20, 15]) : <type 'set'>
==================================================
int0 = 8                                                                 # STEP 8
ACTION: int0 = 8 
int0 = 15 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
result = avl2.find(int1)                                                 # STEP 9
ACTION: result = avl2.find(int1) 
int1 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e9e680> : <type 'instance'>
avl_REF2 = set([20, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int1 = 12                                                               # STEP 10
ACTION: int1 = 12 
int1 = 17 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
result = avl2.find(int2)                                                # STEP 11
ACTION: result = avl2.find(int2) 
int2 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e9e680> : <type 'instance'>
avl_REF2 = set([20, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int2 = 3                                                                # STEP 12
ACTION: int2 = 3 
int2 = 6 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 13
ACTION: avl2.insert(int0) 
int0 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e9e680> : <type 'instance'>
avl_REF2 = set([20, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([8, 20, 15]) : <type 'set'>
==================================================
int0 = 5                                                                # STEP 14
ACTION: int0 = 5 
int0 = 8 : <type 'int'>
=> int0 = 5 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 15
ACTION: avl2.delete(int3) 
int3 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e9e680> : <type 'instance'>
avl_REF2 = set([8, 20, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int3 = 1                                                                # STEP 16
ACTION: int3 = 1 
int3 = 3 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 17
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x1058e2b00> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 18
ACTION: avl2.insert(int1) 
int1 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e9e680> : <type 'instance'>
avl_REF2 = set([8, 20, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([8, 12, 20, 15]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 19
ACTION: avl2.delete(int0) 
int0 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e9e680> : <type 'instance'>
avl_REF2 = set([8, 12, 20, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
result = avl2.find(int3)                                                # STEP 20
ACTION: result = avl2.find(int3) 
int3 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e9e680> : <type 'instance'>
avl_REF2 = set([8, 12, 20, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
int3 = 1                                                                # STEP 21
ACTION: int3 = 1 
int3 = 1 : <type 'int'>
==================================================
result = avl0.find(int0)                                                # STEP 22
ACTION: result = avl0.find(int0) 
int0 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058e2b00> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
int0 = 2                                                                # STEP 23
ACTION: int0 = 2 
int0 = 5 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
int1 = 8                                                                # STEP 24
ACTION: int1 = 8 
int1 = 12 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 25
ACTION: avl2.delete(int2) 
int2 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e9e680> : <type 'instance'>
avl_REF2 = set([8, 12, 20, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl0.insert(int0)                                                       # STEP 26
ACTION: avl0.insert(int0) 
int0 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058e2b00> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([2]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 27
ACTION: avl0.insert(int3) 
int3 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058e2b00> : <type 'instance'>
avl_REF0 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([1, 2]) : <type 'set'>
==================================================
int3 = 6                                                                # STEP 28
ACTION: int3 = 6 
int3 = 1 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
int2 = 1                                                                # STEP 29
ACTION: int2 = 1 
int2 = 3 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
int0 = 17                                                               # STEP 30
ACTION: int0 = 17 
int0 = 2 : <type 'int'>
=> int0 = 17 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 31
ACTION: avl0.insert(int1) 
int1 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058e2b00> : <type 'instance'>
avl_REF0 = set([1, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([8, 1, 2]) : <type 'set'>
==================================================
result = avl0.find(int1)                                                # STEP 32
ACTION: result = avl0.find(int1) 
int1 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058e2b00> : <type 'instance'>
avl_REF0 = set([8, 1, 2]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl2.insert(int0)                                                       # STEP 33
ACTION: avl2.insert(int0) 
int0 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e9e680> : <type 'instance'>
avl_REF2 = set([8, 12, 20, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([8, 12, 20, 17, 15]) : <type 'set'>
==================================================
int0 = 4                                                                # STEP 34
ACTION: int0 = 4 
int0 = 17 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 35
ACTION: avl0.insert(int0) 
int0 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058e2b00> : <type 'instance'>
avl_REF0 = set([8, 1, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([8, 1, 2, 4]) : <type 'set'>
==================================================
result = avl0.find(int3)                                                # STEP 36
ACTION: result = avl0.find(int3) 
int3 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058e2b00> : <type 'instance'>
avl_REF0 = set([8, 1, 2, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
int0 = 12                                                               # STEP 37
ACTION: int0 = 12 
int0 = 4 : <type 'int'>
=> int0 = 12 : <type 'int'>
==================================================
int1 = 3                                                                # STEP 38
ACTION: int1 = 3 
int1 = 8 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
int3 = 4                                                                # STEP 39
ACTION: int3 = 4 
int3 = 6 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
result = avl0.find(int1)                                                # STEP 40
ACTION: result = avl0.find(int1) 
int1 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058e2b00> : <type 'instance'>
avl_REF0 = set([8, 1, 2, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl0.delete(int2)                                                       # STEP 41
ACTION: avl0.delete(int2) 
int2 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058e2b00> : <type 'instance'>
avl_REF0 = set([8, 1, 2, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([8, 2, 4]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1058e0ea8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 32
STOPPING TESTING DUE TO TIMEOUT
6.68476416695 PERCENT COVERED
60.2163300514 TOTAL RUNTIME
8 EXECUTED
674 TOTAL TEST OPERATIONS
28.1910665035 TIME SPENT EXECUTING TEST OPERATIONS
0.0237312316895 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
28.2088708878 TIME SPENT CHECKING PROPERTIES
56.3999373913 TOTAL TIME SPENT RUNNING SUT
0.00472283363342 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int2 = 20                                                                # STEP 0
int0 = 15                                                                # STEP 1
int3 = 3                                                                 # STEP 2
int1 = 17                                                                # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
avl2.insert(int2)                                                        # STEP 5
int2 = 6                                                                 # STEP 6
avl2.insert(int0)                                                        # STEP 7
int0 = 8                                                                 # STEP 8
result = avl2.find(int1)                                                 # STEP 9
int1 = 12                                                               # STEP 10
result = avl2.find(int2)                                                # STEP 11
int2 = 3                                                                # STEP 12
avl2.insert(int0)                                                       # STEP 13
int0 = 5                                                                # STEP 14
avl2.delete(int3)                                                       # STEP 15
int3 = 1                                                                # STEP 16
avl0 = avl.AVLTree()                                                    # STEP 17
avl2.insert(int1)                                                       # STEP 18
avl2.delete(int0)                                                       # STEP 19
result = avl2.find(int3)                                                # STEP 20
int3 = 1                                                                # STEP 21
result = avl0.find(int0)                                                # STEP 22
int0 = 2                                                                # STEP 23
int1 = 8                                                                # STEP 24
avl2.delete(int2)                                                       # STEP 25
avl0.insert(int0)                                                       # STEP 26
avl0.insert(int3)                                                       # STEP 27
int3 = 6                                                                # STEP 28
int2 = 1                                                                # STEP 29
int0 = 17                                                               # STEP 30
avl0.insert(int1)                                                       # STEP 31
result = avl0.find(int1)                                                # STEP 32
avl2.insert(int0)                                                       # STEP 33
int0 = 4                                                                # STEP 34
avl0.insert(int0)                                                       # STEP 35
result = avl0.find(int3)                                                # STEP 36
int0 = 12                                                               # STEP 37
int1 = 3                                                                # STEP 38
int3 = 4                                                                # STEP 39
result = avl0.find(int1)                                                # STEP 40
avl0.delete(int2)                                                       # STEP 41
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1058e0ea8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
168 BRANCHES COVERED
126 STATEMENTS COVERED

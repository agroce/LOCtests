Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.14436.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1025e74d0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
Original test has 87 steps

SAVING TEST AS failure.14436.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 13                                                                # STEP 0
ACTION: int2 = 13 
int2 = None : <type 'NoneType'>
=> int2 = 13 : <type 'int'>
==================================================
int3 = 2                                                                 # STEP 1
ACTION: int3 = 2 
int3 = None : <type 'NoneType'>
=> int3 = 2 : <type 'int'>
==================================================
int0 = 18                                                                # STEP 2
ACTION: int0 = 18 
int0 = None : <type 'NoneType'>
=> int0 = 18 : <type 'int'>
==================================================
int1 = 16                                                                # STEP 3
ACTION: int1 = 16 
int1 = None : <type 'NoneType'>
=> int1 = 16 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x103b8dcf8> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int1)                                                        # STEP 5
ACTION: avl2.insert(int1) 
int1 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103b8dcf8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([16]) : <type 'set'>
==================================================
result = avl2.find(int2)                                                 # STEP 6
ACTION: result = avl2.find(int2) 
int2 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103b8dcf8> : <type 'instance'>
avl_REF2 = set([16]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int1 = 12                                                                # STEP 7
ACTION: int1 = 12 
int1 = 16 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
avl2 == avl2                                                             # STEP 8
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x103b8dcf8> : <type 'instance'>
avl_REF2 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl2.insert(int3)                                                        # STEP 9
ACTION: avl2.insert(int3) 
int3 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103b8dcf8> : <type 'instance'>
avl_REF2 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([16, 2]) : <type 'set'>
==================================================
result = avl2.find(int2)                                                # STEP 10
ACTION: result = avl2.find(int2) 
int2 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103b8dcf8> : <type 'instance'>
avl_REF2 = set([16, 2]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int2 = 9                                                                # STEP 11
ACTION: int2 = 9 
int2 = 13 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 12
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x103d80440> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int3 = 13                                                               # STEP 13
ACTION: int3 = 13 
int3 = 2 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
avl0 == avl0                                                            # STEP 14
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x103d80440> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl0.delete(int3)                                                       # STEP 15
ACTION: avl0.delete(int3) 
int3 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103d80440> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
result = avl0.find(int2)                                                # STEP 16
ACTION: result = avl0.find(int2) 
int2 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103d80440> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
int2 = 5                                                                # STEP 17
ACTION: int2 = 5 
int2 = 9 : <type 'int'>
=> int2 = 5 : <type 'int'>
==================================================
int3 = 1                                                                # STEP 18
ACTION: int3 = 1 
int3 = 13 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 19
ACTION: avl2.insert(int1) 
int1 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103b8dcf8> : <type 'instance'>
avl_REF2 = set([16, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([16, 2, 12]) : <type 'set'>
==================================================
int1 = 4                                                                # STEP 20
ACTION: int1 = 4 
int1 = 12 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
result = avl2.find(int0)                                                # STEP 21
ACTION: result = avl2.find(int0) 
int0 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103b8dcf8> : <type 'instance'>
avl_REF2 = set([16, 2, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl2.insert(int1)                                                       # STEP 22
ACTION: avl2.insert(int1) 
int1 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103b8dcf8> : <type 'instance'>
avl_REF2 = set([16, 2, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([16, 4, 2, 12]) : <type 'set'>
==================================================
int1 = 8                                                                # STEP 23
ACTION: int1 = 8 
int1 = 4 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
int0 = 6                                                                # STEP 24
ACTION: int0 = 6 
int0 = 18 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 25
ACTION: avl2.delete(int3) 
int3 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103b8dcf8> : <type 'instance'>
avl_REF2 = set([16, 4, 2, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int3 = 16                                                               # STEP 26
ACTION: int3 = 16 
int3 = 1 : <type 'int'>
=> int3 = 16 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 27
ACTION: avl0.insert(int0) 
int0 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103d80440> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([6]) : <type 'set'>
==================================================
int0 = 1                                                                # STEP 28
ACTION: int0 = 1 
int0 = 6 : <type 'int'>
=> int0 = 1 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 29
ACTION: avl0.insert(int3) 
int3 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103d80440> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([16, 6]) : <type 'set'>
==================================================
result = avl2.find(int3)                                                # STEP 30
ACTION: result = avl2.find(int3) 
int3 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103b8dcf8> : <type 'instance'>
avl_REF2 = set([16, 4, 2, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
int3 = 19                                                               # STEP 31
ACTION: int3 = 19 
int3 = 16 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 32
ACTION: avl0.insert(int0) 
int0 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103d80440> : <type 'instance'>
avl_REF0 = set([16, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([16, 1, 6]) : <type 'set'>
==================================================
avl2 == avl0                                                            # STEP 33
ACTION: avl2 == avl0 
avl2 = <avlbug2.AVLTree instance at 0x103b8dcf8> : <type 'instance'>
avl0 = <avlbug2.AVLTree instance at 0x103d80440> : <type 'instance'>
avl_REF2 = set([16, 4, 2, 12]) : <type 'set'>
avl_REF0 = set([16, 1, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF0 
==================================================
result = avl2.find(int0)                                                # STEP 34
ACTION: result = avl2.find(int0) 
int0 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103b8dcf8> : <type 'instance'>
avl_REF2 = set([16, 4, 2, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
int0 = 10                                                               # STEP 35
ACTION: int0 = 10 
int0 = 1 : <type 'int'>
=> int0 = 10 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 36
ACTION: avl2.insert(int2) 
int2 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103b8dcf8> : <type 'instance'>
avl_REF2 = set([16, 4, 2, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([16, 4, 2, 12, 5]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 37
ACTION: avl0.delete(int3) 
int3 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103d80440> : <type 'instance'>
avl_REF0 = set([16, 1, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int2 = 14                                                               # STEP 38
ACTION: int2 = 14 
int2 = 5 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 39
ACTION: avl0.insert(int0) 
int0 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103d80440> : <type 'instance'>
avl_REF0 = set([16, 1, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([16, 1, 10, 6]) : <type 'set'>
==================================================
int3 = 16                                                               # STEP 40
ACTION: int3 = 16 
int3 = 19 : <type 'int'>
=> int3 = 16 : <type 'int'>
==================================================
int0 = 18                                                               # STEP 41
ACTION: int0 = 18 
int0 = 10 : <type 'int'>
=> int0 = 18 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 42
ACTION: avl2.insert(int0) 
int0 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103b8dcf8> : <type 'instance'>
avl_REF2 = set([16, 4, 2, 12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([2, 4, 5, 12, 16, 18]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 43
ACTION: avl2.delete(int0) 
int0 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103b8dcf8> : <type 'instance'>
avl_REF2 = set([2, 4, 5, 12, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([2, 4, 5, 12, 16]) : <type 'set'>
==================================================
result = avl2.find(int3)                                                # STEP 44
ACTION: result = avl2.find(int3) 
int3 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103b8dcf8> : <type 'instance'>
avl_REF2 = set([2, 4, 5, 12, 16]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl2.delete(int0)                                                       # STEP 45
ACTION: avl2.delete(int0) 
int0 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103b8dcf8> : <type 'instance'>
avl_REF2 = set([2, 4, 5, 12, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.delete(int1)                                                       # STEP 46
ACTION: avl2.delete(int1) 
int1 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103b8dcf8> : <type 'instance'>
avl_REF2 = set([2, 4, 5, 12, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl0.insert(int1)                                                       # STEP 47
ACTION: avl0.insert(int1) 
int1 = 8 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103d80440> : <type 'instance'>
avl_REF0 = set([16, 1, 10, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([16, 1, 10, 6, 8]) : <type 'set'>
==================================================
int1 = 4                                                                # STEP 48
ACTION: int1 = 4 
int1 = 8 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
result = avl0.find(int1)                                                # STEP 49
ACTION: result = avl0.find(int1) 
int1 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103d80440> : <type 'instance'>
avl_REF0 = set([16, 1, 10, 6, 8]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl2.delete(int2)                                                       # STEP 50
ACTION: avl2.delete(int2) 
int2 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103b8dcf8> : <type 'instance'>
avl_REF2 = set([2, 4, 5, 12, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl0.insert(int2)                                                       # STEP 51
ACTION: avl0.insert(int2) 
int2 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103d80440> : <type 'instance'>
avl_REF0 = set([16, 1, 10, 6, 8]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([1, 6, 8, 10, 14, 16]) : <type 'set'>
==================================================
int3 = 17                                                               # STEP 52
ACTION: int3 = 17 
int3 = 16 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
int2 = 6                                                                # STEP 53
ACTION: int2 = 6 
int2 = 14 : <type 'int'>
=> int2 = 6 : <type 'int'>
==================================================
int0 = 4                                                                # STEP 54
ACTION: int0 = 4 
int0 = 18 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
int1 = 13                                                               # STEP 55
ACTION: int1 = 13 
int1 = 4 : <type 'int'>
=> int1 = 13 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 56
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x103d80440> : <type 'instance'>
avl_REF0 = set([1, 6, 8, 10, 14, 16]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
result = avl0.inorder()                                                 # STEP 57
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x103d80440> : <type 'instance'>
avl_REF0 = set([1, 6, 8, 10, 14, 16]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
result = avl2.inorder()                                                 # STEP 58
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x103b8dcf8> : <type 'instance'>
avl_REF2 = set([2, 4, 5, 12, 16]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl0.delete(int2)                                                       # STEP 59
ACTION: avl0.delete(int2) 
int2 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103d80440> : <type 'instance'>
avl_REF0 = set([1, 6, 8, 10, 14, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([1, 8, 10, 14, 16]) : <type 'set'>
==================================================
int2 = 1                                                                # STEP 60
ACTION: int2 = 1 
int2 = 6 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 61
ACTION: avl0.delete(int3) 
int3 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103d80440> : <type 'instance'>
avl_REF0 = set([1, 8, 10, 14, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0 == avl2                                                            # STEP 62
ACTION: avl0 == avl2 
avl0 = <avlbug2.AVLTree instance at 0x103d80440> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x103b8dcf8> : <type 'instance'>
avl_REF0 = set([1, 8, 10, 14, 16]) : <type 'set'>
avl_REF2 = set([2, 4, 5, 12, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
int3 = 4                                                                # STEP 63
ACTION: int3 = 4 
int3 = 17 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 64
ACTION: avl0.delete(int1) 
int1 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103d80440> : <type 'instance'>
avl_REF0 = set([1, 8, 10, 14, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int1 = 8                                                                # STEP 65
ACTION: int1 = 8 
int1 = 13 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
avl2 == avl0                                                            # STEP 66
ACTION: avl2 == avl0 
avl2 = <avlbug2.AVLTree instance at 0x103b8dcf8> : <type 'instance'>
avl0 = <avlbug2.AVLTree instance at 0x103d80440> : <type 'instance'>
avl_REF2 = set([2, 4, 5, 12, 16]) : <type 'set'>
avl_REF0 = set([1, 8, 10, 14, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF0 
==================================================
avl0.insert(int0)                                                       # STEP 67
ACTION: avl0.insert(int0) 
int0 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103d80440> : <type 'instance'>
avl_REF0 = set([1, 8, 10, 14, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([1, 4, 8, 10, 14, 16]) : <type 'set'>
==================================================
int0 = 8                                                                # STEP 68
ACTION: int0 = 8 
int0 = 4 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 69
ACTION: avl0.insert(int2) 
int2 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103d80440> : <type 'instance'>
avl_REF0 = set([1, 4, 8, 10, 14, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl2.insert(int3)                                                       # STEP 70
ACTION: avl2.insert(int3) 
int3 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103b8dcf8> : <type 'instance'>
avl_REF2 = set([2, 4, 5, 12, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
int2 = 6                                                                # STEP 71
ACTION: int2 = 6 
int2 = 1 : <type 'int'>
=> int2 = 6 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 72
ACTION: avl2.delete(int2) 
int2 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103b8dcf8> : <type 'instance'>
avl_REF2 = set([2, 4, 5, 12, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int2 = 14                                                               # STEP 73
ACTION: int2 = 14 
int2 = 6 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 74
ACTION: avl2 = avl.AVLTree() 
avl2 = <avlbug2.AVLTree instance at 0x103b8dcf8> : <type 'instance'>
avl_REF2 = set([2, 4, 5, 12, 16]) : <type 'set'>
=> avl2 = <avlbug2.AVLTree instance at 0x103e18560> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int3 = 7                                                                # STEP 75
ACTION: int3 = 7 
int3 = 4 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 76
ACTION: avl0.insert(int3) 
int3 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103d80440> : <type 'instance'>
avl_REF0 = set([1, 4, 8, 10, 14, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([1, 4, 7, 8, 10, 14, 16]) : <type 'set'>
==================================================
int3 = 20                                                               # STEP 77
ACTION: int3 = 20 
int3 = 7 : <type 'int'>
=> int3 = 20 : <type 'int'>
==================================================
result = avl0.find(int0)                                                # STEP 78
ACTION: result = avl0.find(int0) 
int0 = 8 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103d80440> : <type 'instance'>
avl_REF0 = set([1, 4, 7, 8, 10, 14, 16]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
result = avl2.inorder()                                                 # STEP 79
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x103e18560> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int0 = 16                                                               # STEP 80
ACTION: int0 = 16 
int0 = 8 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
avl2 == avl0                                                            # STEP 81
ACTION: avl2 == avl0 
avl2 = <avlbug2.AVLTree instance at 0x103e18560> : <type 'instance'>
avl0 = <avlbug2.AVLTree instance at 0x103d80440> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
avl_REF0 = set([1, 4, 7, 8, 10, 14, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF0 
==================================================
result = avl0.find(int0)                                                # STEP 82
ACTION: result = avl0.find(int0) 
int0 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103d80440> : <type 'instance'>
avl_REF0 = set([1, 4, 7, 8, 10, 14, 16]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
int0 = 17                                                               # STEP 83
ACTION: int0 = 17 
int0 = 16 : <type 'int'>
=> int0 = 17 : <type 'int'>
==================================================
result = avl0.find(int1)                                                # STEP 84
ACTION: result = avl0.find(int1) 
int1 = 8 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103d80440> : <type 'instance'>
avl_REF0 = set([1, 4, 7, 8, 10, 14, 16]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
int1 = 9                                                                # STEP 85
ACTION: int1 = 9 
int1 = 8 : <type 'int'>
=> int1 = 9 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 86
ACTION: avl0.delete(int2) 
int2 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103d80440> : <type 'instance'>
avl_REF0 = set([1, 4, 7, 8, 10, 14, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([1, 4, 7, 8, 10, 16]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103f0ecb0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #3 STEP #12 (0:00:30.078555) Sun Apr 30 04:07:37 2017 [ 144 stmts 190 branches ]
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 94
STOPPING TESTING DUE TO TIMEOUT
7.97749089705 PERCENT COVERED
60.2188961506 TOTAL RUNTIME
5 EXECUTED
481 TOTAL TEST OPERATIONS
25.3158357143 TIME SPENT EXECUTING TEST OPERATIONS
0.0194594860077 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
25.5632658005 TIME SPENT CHECKING PROPERTIES
50.8791015148 TOTAL TIME SPENT RUNNING SUT
0.00402975082397 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int2 = 13                                                                # STEP 0
int3 = 2                                                                 # STEP 1
int0 = 18                                                                # STEP 2
int1 = 16                                                                # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
avl2.insert(int1)                                                        # STEP 5
result = avl2.find(int2)                                                 # STEP 6
int1 = 12                                                                # STEP 7
avl2 == avl2                                                             # STEP 8
avl2.insert(int3)                                                        # STEP 9
result = avl2.find(int2)                                                # STEP 10
int2 = 9                                                                # STEP 11
avl0 = avl.AVLTree()                                                    # STEP 12
int3 = 13                                                               # STEP 13
avl0 == avl0                                                            # STEP 14
avl0.delete(int3)                                                       # STEP 15
result = avl0.find(int2)                                                # STEP 16
int2 = 5                                                                # STEP 17
int3 = 1                                                                # STEP 18
avl2.insert(int1)                                                       # STEP 19
int1 = 4                                                                # STEP 20
result = avl2.find(int0)                                                # STEP 21
avl2.insert(int1)                                                       # STEP 22
int1 = 8                                                                # STEP 23
int0 = 6                                                                # STEP 24
avl2.delete(int3)                                                       # STEP 25
int3 = 16                                                               # STEP 26
avl0.insert(int0)                                                       # STEP 27
int0 = 1                                                                # STEP 28
avl0.insert(int3)                                                       # STEP 29
result = avl2.find(int3)                                                # STEP 30
int3 = 19                                                               # STEP 31
avl0.insert(int0)                                                       # STEP 32
avl2 == avl0                                                            # STEP 33
result = avl2.find(int0)                                                # STEP 34
int0 = 10                                                               # STEP 35
avl2.insert(int2)                                                       # STEP 36
avl0.delete(int3)                                                       # STEP 37
int2 = 14                                                               # STEP 38
avl0.insert(int0)                                                       # STEP 39
int3 = 16                                                               # STEP 40
int0 = 18                                                               # STEP 41
avl2.insert(int0)                                                       # STEP 42
avl2.delete(int0)                                                       # STEP 43
result = avl2.find(int3)                                                # STEP 44
avl2.delete(int0)                                                       # STEP 45
avl2.delete(int1)                                                       # STEP 46
avl0.insert(int1)                                                       # STEP 47
int1 = 4                                                                # STEP 48
result = avl0.find(int1)                                                # STEP 49
avl2.delete(int2)                                                       # STEP 50
avl0.insert(int2)                                                       # STEP 51
int3 = 17                                                               # STEP 52
int2 = 6                                                                # STEP 53
int0 = 4                                                                # STEP 54
int1 = 13                                                               # STEP 55
result = avl0.inorder()                                                 # STEP 56
result = avl0.inorder()                                                 # STEP 57
result = avl2.inorder()                                                 # STEP 58
avl0.delete(int2)                                                       # STEP 59
int2 = 1                                                                # STEP 60
avl0.delete(int3)                                                       # STEP 61
avl0 == avl2                                                            # STEP 62
int3 = 4                                                                # STEP 63
avl0.delete(int1)                                                       # STEP 64
int1 = 8                                                                # STEP 65
avl2 == avl0                                                            # STEP 66
avl0.insert(int0)                                                       # STEP 67
int0 = 8                                                                # STEP 68
avl0.insert(int2)                                                       # STEP 69
avl2.insert(int3)                                                       # STEP 70
int2 = 6                                                                # STEP 71
avl2.delete(int2)                                                       # STEP 72
int2 = 14                                                               # STEP 73
avl2 = avl.AVLTree()                                                    # STEP 74
int3 = 7                                                                # STEP 75
avl0.insert(int3)                                                       # STEP 76
int3 = 20                                                               # STEP 77
result = avl0.find(int0)                                                # STEP 78
result = avl2.inorder()                                                 # STEP 79
int0 = 16                                                               # STEP 80
avl2 == avl0                                                            # STEP 81
result = avl0.find(int0)                                                # STEP 82
int0 = 17                                                               # STEP 83
result = avl0.find(int1)                                                # STEP 84
int1 = 9                                                                # STEP 85
avl0.delete(int2)                                                       # STEP 86
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103f0ecb0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
198 BRANCHES COVERED
149 STATEMENTS COVERED

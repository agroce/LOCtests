Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.99975.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  12 [2:0]
-- < 9 [1:0]
---- < 1 [0:0] L
---- > 10 [0:0] L
-- > 17 [1:1]
---- < 15 [0:0] L
set([1, 9, 10, 12, 15, 17])
  12 [2:0]
-- < 9 [1:0]
---- < 1 [0:0] L
---- > 10 [0:0] L
-- > 17 [1:1]
---- < 15 [0:0] L
set([1, 9, 10, 12, 15, 17])
  12 [2:0]
-- < 9 [1:0]
---- < 1 [0:0] L
---- > 10 [0:0] L
-- > 17 [1:1]
---- < 15 [0:0] L
set([1, 9, 10, 12, 15, 17])
  12 [2:0]
-- < 9 [1:0]
---- < 1 [0:0] L
---- > 10 [0:0] L
-- > 17 [1:1]
---- < 15 [0:0] L
set([1, 9, 10, 12, 15, 17])
  16 [2:0]
-- < 12 [1:0]
---- < 11 [0:0] L
---- > 15 [0:0] L
-- > 17 [1:-1]
---- > 19 [0:0] L
set([11, 12, 15, 16, 17, 19])
  16 [2:0]
-- < 12 [1:0]
---- < 11 [0:0] L
---- > 15 [0:0] L
-- > 17 [1:-1]
---- > 19 [0:0] L
set([11, 12, 15, 16, 17, 19])
  16 [2:0]
-- < 12 [1:0]
---- < 11 [0:0] L
---- > 15 [0:0] L
-- > 17 [1:-1]
---- > 19 [0:0] L
set([11, 12, 15, 16, 17, 19])
  16 [2:0]
-- < 12 [1:0]
---- < 11 [0:0] L
---- > 15 [0:0] L
-- > 19 [1:1]
---- < 18 [0:0] L
set([11, 12, 15, 16, 18, 19])
  16 [2:0]
-- < 12 [1:0]
---- < 11 [0:0] L
---- > 15 [0:0] L
-- > 19 [1:1]
---- < 18 [0:0] L
set([11, 12, 15, 16, 18, 19])
  16 [2:0]
-- < 12 [1:0]
---- < 11 [0:0] L
---- > 15 [0:0] L
-- > 19 [1:1]
---- < 18 [0:0] L
set([11, 12, 15, 16, 18, 19])
  16 [3:1]
-- < 12 [2:1]
---- < 11 [1:1]
------ < 5 [0:0] L
---- > 15 [0:0] L
-- > 19 [1:1]
---- < 18 [0:0] L
set([5, 11, 12, 15, 16, 18, 19])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103a613b0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 82 steps

SAVING TEST AS failure.99975.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
avl2 = avl.AVLTree()                                                     # STEP 0
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x103a7d5a8> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl2.inorder()                                                  # STEP 1
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x103a7d5a8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int0 = 6                                                                 # STEP 2
ACTION: int0 = 6 
int0 = None : <type 'NoneType'>
=> int0 = 6 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 3
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x103e65c20> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
result = avl2.inorder()                                                  # STEP 4
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x103a7d5a8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int3 = 13                                                                # STEP 5
ACTION: int3 = 13 
int3 = None : <type 'NoneType'>
=> int3 = 13 : <type 'int'>
==================================================
int1 = 13                                                                # STEP 6
ACTION: int1 = 13 
int1 = None : <type 'NoneType'>
=> int1 = 13 : <type 'int'>
==================================================
avl2.delete(int3)                                                        # STEP 7
ACTION: avl2.delete(int3) 
int3 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a7d5a8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.insert(int1)                                                        # STEP 8
ACTION: avl2.insert(int1) 
int1 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a7d5a8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([13]) : <type 'set'>
==================================================
avl2.delete(int3)                                                        # STEP 9
ACTION: avl2.delete(int3) 
int3 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a7d5a8> : <type 'instance'>
avl_REF2 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int1 = 12                                                               # STEP 10
ACTION: int1 = 12 
int1 = 13 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 11
ACTION: avl2.delete(int0) 
int0 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a7d5a8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.delete(int3)                                                       # STEP 12
ACTION: avl2.delete(int3) 
int3 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a7d5a8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int3 = 5                                                                # STEP 13
ACTION: int3 = 5 
int3 = 13 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
result = avl0.find(int1)                                                # STEP 14
ACTION: result = avl0.find(int1) 
int1 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103e65c20> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
int0 = 3                                                                # STEP 15
ACTION: int0 = 3 
int0 = 6 : <type 'int'>
=> int0 = 3 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 16
ACTION: avl0.delete(int1) 
int1 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103e65c20> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int2 = 20                                                               # STEP 17
ACTION: int2 = 20 
int2 = None : <type 'NoneType'>
=> int2 = 20 : <type 'int'>
==================================================
int1 = 13                                                               # STEP 18
ACTION: int1 = 13 
int1 = 12 : <type 'int'>
=> int1 = 13 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 19
ACTION: avl2.delete(int1) 
int1 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a7d5a8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int0)                                                       # STEP 20
ACTION: avl2.insert(int0) 
int0 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a7d5a8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([3]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 21
ACTION: avl2.delete(int2) 
int2 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a7d5a8> : <type 'instance'>
avl_REF2 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int0 = 16                                                               # STEP 22
ACTION: int0 = 16 
int0 = 3 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 23
ACTION: avl2.insert(int1) 
int1 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a7d5a8> : <type 'instance'>
avl_REF2 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([3, 13]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 24
ACTION: avl0.insert(int3) 
int3 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103e65c20> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([5]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 25
ACTION: avl0.insert(int2) 
int2 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103e65c20> : <type 'instance'>
avl_REF0 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([20, 5]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 26
ACTION: avl2.delete(int3) 
int3 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a7d5a8> : <type 'instance'>
avl_REF2 = set([3, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl0.insert(int1)                                                       # STEP 27
ACTION: avl0.insert(int1) 
int1 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103e65c20> : <type 'instance'>
avl_REF0 = set([20, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([20, 5, 13]) : <type 'set'>
==================================================
int3 = 20                                                               # STEP 28
ACTION: int3 = 20 
int3 = 5 : <type 'int'>
=> int3 = 20 : <type 'int'>
==================================================
result = avl2.find(int0)                                                # STEP 29
ACTION: result = avl2.find(int0) 
int0 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a7d5a8> : <type 'instance'>
avl_REF2 = set([3, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
int2 = 16                                                               # STEP 30
ACTION: int2 = 16 
int2 = 20 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 31
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x103a7d5a8> : <type 'instance'>
avl_REF2 = set([3, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl2.inorder()                                                 # STEP 32
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x103a7d5a8> : <type 'instance'>
avl_REF2 = set([3, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int2)                                                       # STEP 33
ACTION: avl2.insert(int2) 
int2 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a7d5a8> : <type 'instance'>
avl_REF2 = set([3, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([16, 3, 13]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 34
ACTION: avl2.insert(int0) 
int0 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a7d5a8> : <type 'instance'>
avl_REF2 = set([16, 3, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl0.insert(int1)                                                       # STEP 35
ACTION: avl0.insert(int1) 
int1 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103e65c20> : <type 'instance'>
avl_REF0 = set([20, 5, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl0.insert(int0)                                                       # STEP 36
ACTION: avl0.insert(int0) 
int0 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103e65c20> : <type 'instance'>
avl_REF0 = set([20, 5, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([16, 20, 5, 13]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 37
ACTION: avl2.delete(int2) 
int2 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a7d5a8> : <type 'instance'>
avl_REF2 = set([16, 3, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([3, 13]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 38
ACTION: avl2.insert(int1) 
int1 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a7d5a8> : <type 'instance'>
avl_REF2 = set([3, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl0.delete(int3)                                                       # STEP 39
ACTION: avl0.delete(int3) 
int3 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103e65c20> : <type 'instance'>
avl_REF0 = set([16, 20, 5, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([16, 5, 13]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 40
ACTION: avl2.insert(int2) 
int2 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a7d5a8> : <type 'instance'>
avl_REF2 = set([3, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([16, 3, 13]) : <type 'set'>
==================================================
int0 = 16                                                               # STEP 41
ACTION: int0 = 16 
int0 = 16 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 42
ACTION: avl0.delete(int2) 
int2 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103e65c20> : <type 'instance'>
avl_REF0 = set([16, 5, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([5, 13]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 43
ACTION: avl0.insert(int2) 
int2 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103e65c20> : <type 'instance'>
avl_REF0 = set([5, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([16, 5, 13]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 44
ACTION: avl2.delete(int3) 
int3 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a7d5a8> : <type 'instance'>
avl_REF2 = set([16, 3, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int3 = 3                                                                # STEP 45
ACTION: int3 = 3 
int3 = 20 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
int1 = 10                                                               # STEP 46
ACTION: int1 = 10 
int1 = 13 : <type 'int'>
=> int1 = 10 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 47
ACTION: avl0.delete(int2) 
int2 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103e65c20> : <type 'instance'>
avl_REF0 = set([16, 5, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([5, 13]) : <type 'set'>
==================================================
int2 = 3                                                                # STEP 48
ACTION: int2 = 3 
int2 = 16 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
result = avl2.find(int0)                                                # STEP 49
ACTION: result = avl2.find(int0) 
int0 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a7d5a8> : <type 'instance'>
avl_REF2 = set([16, 3, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
int0 = 11                                                               # STEP 50
ACTION: int0 = 11 
int0 = 16 : <type 'int'>
=> int0 = 11 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 51
ACTION: avl2.insert(int3) 
int3 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a7d5a8> : <type 'instance'>
avl_REF2 = set([16, 3, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
int3 = 13                                                               # STEP 52
ACTION: int3 = 13 
int3 = 3 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 53
ACTION: avl0.insert(int0) 
int0 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103e65c20> : <type 'instance'>
avl_REF0 = set([5, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([11, 5, 13]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 54
ACTION: avl2.delete(int0) 
int0 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a7d5a8> : <type 'instance'>
avl_REF2 = set([16, 3, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
result = avl0.inorder()                                                 # STEP 55
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x103e65c20> : <type 'instance'>
avl_REF0 = set([11, 5, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int0 = 7                                                                # STEP 56
ACTION: int0 = 7 
int0 = 11 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 57
ACTION: avl0.insert(int2) 
int2 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103e65c20> : <type 'instance'>
avl_REF0 = set([11, 5, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([3, 11, 5, 13]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 58
ACTION: avl2.insert(int1) 
int1 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a7d5a8> : <type 'instance'>
avl_REF2 = set([16, 3, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([16, 10, 3, 13]) : <type 'set'>
==================================================
avl2 == avl2                                                            # STEP 59
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x103a7d5a8> : <type 'instance'>
avl_REF2 = set([16, 10, 3, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl2.delete(int2)                                                       # STEP 60
ACTION: avl2.delete(int2) 
int2 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a7d5a8> : <type 'instance'>
avl_REF2 = set([16, 10, 3, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([16, 10, 13]) : <type 'set'>
==================================================
int1 = 12                                                               # STEP 61
ACTION: int1 = 12 
int1 = 10 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 62
ACTION: avl2.delete(int3) 
int3 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a7d5a8> : <type 'instance'>
avl_REF2 = set([16, 10, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([16, 10]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 63
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x103e65c20> : <type 'instance'>
avl_REF0 = set([3, 11, 5, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int2 = 2                                                                # STEP 64
ACTION: int2 = 2 
int2 = 3 : <type 'int'>
=> int2 = 2 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 65
ACTION: avl0 = avl.AVLTree() 
avl0 = <avl.AVLTree instance at 0x103e65c20> : <type 'instance'>
avl_REF0 = set([3, 11, 5, 13]) : <type 'set'>
=> avl0 = <avl.AVLTree instance at 0x10587a128> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 66
ACTION: avl2.delete(int0) 
int0 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a7d5a8> : <type 'instance'>
avl_REF2 = set([16, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.insert(int3)                                                       # STEP 67
ACTION: avl2.insert(int3) 
int3 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a7d5a8> : <type 'instance'>
avl_REF2 = set([16, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([16, 10, 13]) : <type 'set'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 68
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x10587a680> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 69
ACTION: avl0.insert(int3) 
int3 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10587a128> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([13]) : <type 'set'>
==================================================
int0 = 8                                                                # STEP 70
ACTION: int0 = 8 
int0 = 7 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 71
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x10587a128> : <type 'instance'>
avl_REF0 = set([13]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl2.insert(int1)                                                       # STEP 72
ACTION: avl2.insert(int1) 
int1 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a7d5a8> : <type 'instance'>
avl_REF2 = set([16, 10, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([16, 10, 12, 13]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 73
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x103a7d5a8> : <type 'instance'>
avl_REF2 = set([16, 10, 12, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl2.find(int1)                                                # STEP 74
ACTION: result = avl2.find(int1) 
int1 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a7d5a8> : <type 'instance'>
avl_REF2 = set([16, 10, 12, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl0.insert(int2)                                                       # STEP 75
ACTION: avl0.insert(int2) 
int2 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10587a128> : <type 'instance'>
avl_REF0 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([2, 13]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 76
ACTION: avl1.insert(int1) 
int1 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10587a680> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([12]) : <type 'set'>
==================================================
int3 = 13                                                               # STEP 77
ACTION: int3 = 13 
int3 = 13 : <type 'int'>
==================================================
avl1 == avl2                                                            # STEP 78
ACTION: avl1 == avl2 
avl1 = <avl.AVLTree instance at 0x10587a680> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x103a7d5a8> : <type 'instance'>
avl_REF1 = set([12]) : <type 'set'>
avl_REF2 = set([16, 10, 12, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
avl1 == avl1                                                            # STEP 79
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x10587a680> : <type 'instance'>
avl_REF1 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
int2 = 4                                                                # STEP 80
ACTION: int2 = 4 
int2 = 2 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 81
ACTION: avl2.delete(int3) 
int3 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a7d5a8> : <type 'instance'>
avl_REF2 = set([16, 10, 12, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([16, 10, 12]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105841c20>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #5 STEP #0 (0:00:33.907189) Fri Apr 28 05:28:35 2017 [ 161 stmts 214 branches ]
  8 [2:0]
-- < 4 [1:0]
---- < 3 [0:0] L
---- > 7 [0:0] L
-- > 20 [1:1]
---- < 19 [0:0] L
set([3, 4, 7, 8, 19, 20])
  8 [2:0]
-- < 3 [1:-1]
---- > 7 [0:0] L
-- > 19 [1:0]
---- < 10 [0:0] L
---- > 20 [0:0] L
set([3, 7, 8, 10, 19, 20])
  8 [2:0]
-- < 3 [1:-1]
---- > 7 [0:0] L
-- > 19 [1:0]
---- < 10 [0:0] L
---- > 20 [0:0] L
set([3, 7, 8, 10, 19, 20])
  8 [2:0]
-- < 3 [1:-1]
---- > 7 [0:0] L
-- > 19 [1:0]
---- < 10 [0:0] L
---- > 20 [0:0] L
set([3, 7, 8, 10, 19, 20])
  8 [2:0]
-- < 3 [1:-1]
---- > 7 [0:0] L
-- > 19 [1:0]
---- < 10 [0:0] L
---- > 20 [0:0] L
set([3, 7, 8, 10, 19, 20])
  8 [3:-1]
-- < 3 [1:-1]
---- > 7 [0:0] L
-- > 19 [2:1]
---- < 10 [1:-1]
------ > 15 [0:0] L
---- > 20 [0:0] L
set([3, 7, 8, 10, 15, 19, 20])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103afe7a0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 43 steps

SAVING TEST AS failure.99975.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 10                                                                # STEP 0
ACTION: int1 = 10 
int1 = None : <type 'NoneType'>
=> int1 = 10 : <type 'int'>
==================================================
int0 = 12                                                                # STEP 1
ACTION: int0 = 12 
int0 = None : <type 'NoneType'>
=> int0 = 12 : <type 'int'>
==================================================
int3 = 9                                                                 # STEP 2
ACTION: int3 = 9 
int3 = None : <type 'NoneType'>
=> int3 = 9 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 3
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x103afecf8> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl2.inorder()                                                  # STEP 4
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x103afecf8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl2.find(int3)                                                 # STEP 5
ACTION: result = avl2.find(int3) 
int3 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103afecf8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl2.insert(int0)                                                        # STEP 6
ACTION: avl2.insert(int0) 
int0 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103afecf8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([12]) : <type 'set'>
==================================================
result = avl2.find(int3)                                                 # STEP 7
ACTION: result = avl2.find(int3) 
int3 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103afecf8> : <type 'instance'>
avl_REF2 = set([12]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl2.insert(int0)                                                        # STEP 8
ACTION: avl2.insert(int0) 
int0 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103afecf8> : <type 'instance'>
avl_REF2 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
int2 = 9                                                                 # STEP 9
ACTION: int2 = 9 
int2 = None : <type 'NoneType'>
=> int2 = 9 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 10
ACTION: avl2.delete(int0) 
int0 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103afecf8> : <type 'instance'>
avl_REF2 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl2.find(int3)                                                # STEP 11
ACTION: result = avl2.find(int3) 
int3 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103afecf8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
int0 = 10                                                               # STEP 12
ACTION: int0 = 10 
int0 = 12 : <type 'int'>
=> int0 = 10 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 13
ACTION: avl2.delete(int3) 
int3 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103afecf8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int3 = 8                                                                # STEP 14
ACTION: int3 = 8 
int3 = 9 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 15
ACTION: avl2.delete(int1) 
int1 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103afecf8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.delete(int2)                                                       # STEP 16
ACTION: avl2.delete(int2) 
int2 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103afecf8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.insert(int1)                                                       # STEP 17
ACTION: avl2.insert(int1) 
int1 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103afecf8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([10]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 18
ACTION: avl2.delete(int1) 
int1 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103afecf8> : <type 'instance'>
avl_REF2 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 19
ACTION: avl2.delete(int2) 
int2 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103afecf8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.insert(int2)                                                       # STEP 20
ACTION: avl2.insert(int2) 
int2 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103afecf8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([9]) : <type 'set'>
==================================================
result = avl2.find(int0)                                                # STEP 21
ACTION: result = avl2.find(int0) 
int0 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103afecf8> : <type 'instance'>
avl_REF2 = set([9]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl2.insert(int0)                                                       # STEP 22
ACTION: avl2.insert(int0) 
int0 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103afecf8> : <type 'instance'>
avl_REF2 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([9, 10]) : <type 'set'>
==================================================
int2 = 8                                                                # STEP 23
ACTION: int2 = 8 
int2 = 9 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 24
ACTION: avl2.delete(int0) 
int0 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103afecf8> : <type 'instance'>
avl_REF2 = set([9, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([9]) : <type 'set'>
==================================================
avl2 == avl2                                                            # STEP 25
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x103afecf8> : <type 'instance'>
avl_REF2 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl2.insert(int3)                                                       # STEP 26
ACTION: avl2.insert(int3) 
int3 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103afecf8> : <type 'instance'>
avl_REF2 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([8, 9]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 27
ACTION: avl2.delete(int1) 
int1 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103afecf8> : <type 'instance'>
avl_REF2 = set([8, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
result = avl2.find(int1)                                                # STEP 28
ACTION: result = avl2.find(int1) 
int1 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103afecf8> : <type 'instance'>
avl_REF2 = set([8, 9]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
result = avl2.find(int3)                                                # STEP 29
ACTION: result = avl2.find(int3) 
int3 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103afecf8> : <type 'instance'>
avl_REF2 = set([8, 9]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
int0 = 12                                                               # STEP 30
ACTION: int0 = 12 
int0 = 10 : <type 'int'>
=> int0 = 12 : <type 'int'>
==================================================
int1 = 11                                                               # STEP 31
ACTION: int1 = 11 
int1 = 10 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 32
ACTION: avl2.delete(int0) 
int0 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103afecf8> : <type 'instance'>
avl_REF2 = set([8, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
result = avl2.inorder()                                                 # STEP 33
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x103afecf8> : <type 'instance'>
avl_REF2 = set([8, 9]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int0 = 13                                                               # STEP 34
ACTION: int0 = 13 
int0 = 12 : <type 'int'>
=> int0 = 13 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 35
ACTION: avl2.insert(int2) 
int2 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103afecf8> : <type 'instance'>
avl_REF2 = set([8, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl2.insert(int0)                                                       # STEP 36
ACTION: avl2.insert(int0) 
int0 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103afecf8> : <type 'instance'>
avl_REF2 = set([8, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([8, 9, 13]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 37
ACTION: avl2.insert(int0) 
int0 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103afecf8> : <type 'instance'>
avl_REF2 = set([8, 9, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl2.delete(int1)                                                       # STEP 38
ACTION: avl2.delete(int1) 
int1 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103afecf8> : <type 'instance'>
avl_REF2 = set([8, 9, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int1)                                                       # STEP 39
ACTION: avl2.insert(int1) 
int1 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103afecf8> : <type 'instance'>
avl_REF2 = set([8, 9, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([8, 9, 11, 13]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 40
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x103afecf8> : <type 'instance'>
avl_REF2 = set([8, 9, 11, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int3 = 7                                                                # STEP 41
ACTION: int3 = 7 
int3 = 8 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 42
ACTION: avl2.delete(int2) 
int2 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103afecf8> : <type 'instance'>
avl_REF2 = set([8, 9, 11, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([9, 11, 13]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103dde5f0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 67
STOPPING TESTING DUE TO TIMEOUT
8.6528673227 PERCENT COVERED
60.1586108208 TOTAL RUNTIME
8 EXECUTED
692 TOTAL TEST OPERATIONS
25.2502126694 TIME SPENT EXECUTING TEST OPERATIONS
0.0708923339844 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
25.4437689781 TIME SPENT CHECKING PROPERTIES
50.6939816475 TOTAL TIME SPENT RUNNING SUT
0.00422310829163 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
2 FAILED
0 REPEATS OF FAILURES
2 ACTUAL DISTINCT FAILURES

FAILURE 0
avl2 = avl.AVLTree()                                                     # STEP 0
result = avl2.inorder()                                                  # STEP 1
int0 = 6                                                                 # STEP 2
avl0 = avl.AVLTree()                                                     # STEP 3
result = avl2.inorder()                                                  # STEP 4
int3 = 13                                                                # STEP 5
int1 = 13                                                                # STEP 6
avl2.delete(int3)                                                        # STEP 7
avl2.insert(int1)                                                        # STEP 8
avl2.delete(int3)                                                        # STEP 9
int1 = 12                                                               # STEP 10
avl2.delete(int0)                                                       # STEP 11
avl2.delete(int3)                                                       # STEP 12
int3 = 5                                                                # STEP 13
result = avl0.find(int1)                                                # STEP 14
int0 = 3                                                                # STEP 15
avl0.delete(int1)                                                       # STEP 16
int2 = 20                                                               # STEP 17
int1 = 13                                                               # STEP 18
avl2.delete(int1)                                                       # STEP 19
avl2.insert(int0)                                                       # STEP 20
avl2.delete(int2)                                                       # STEP 21
int0 = 16                                                               # STEP 22
avl2.insert(int1)                                                       # STEP 23
avl0.insert(int3)                                                       # STEP 24
avl0.insert(int2)                                                       # STEP 25
avl2.delete(int3)                                                       # STEP 26
avl0.insert(int1)                                                       # STEP 27
int3 = 20                                                               # STEP 28
result = avl2.find(int0)                                                # STEP 29
int2 = 16                                                               # STEP 30
result = avl2.inorder()                                                 # STEP 31
result = avl2.inorder()                                                 # STEP 32
avl2.insert(int2)                                                       # STEP 33
avl2.insert(int0)                                                       # STEP 34
avl0.insert(int1)                                                       # STEP 35
avl0.insert(int0)                                                       # STEP 36
avl2.delete(int2)                                                       # STEP 37
avl2.insert(int1)                                                       # STEP 38
avl0.delete(int3)                                                       # STEP 39
avl2.insert(int2)                                                       # STEP 40
int0 = 16                                                               # STEP 41
avl0.delete(int2)                                                       # STEP 42
avl0.insert(int2)                                                       # STEP 43
avl2.delete(int3)                                                       # STEP 44
int3 = 3                                                                # STEP 45
int1 = 10                                                               # STEP 46
avl0.delete(int2)                                                       # STEP 47
int2 = 3                                                                # STEP 48
result = avl2.find(int0)                                                # STEP 49
int0 = 11                                                               # STEP 50
avl2.insert(int3)                                                       # STEP 51
int3 = 13                                                               # STEP 52
avl0.insert(int0)                                                       # STEP 53
avl2.delete(int0)                                                       # STEP 54
result = avl0.inorder()                                                 # STEP 55
int0 = 7                                                                # STEP 56
avl0.insert(int2)                                                       # STEP 57
avl2.insert(int1)                                                       # STEP 58
avl2 == avl2                                                            # STEP 59
avl2.delete(int2)                                                       # STEP 60
int1 = 12                                                               # STEP 61
avl2.delete(int3)                                                       # STEP 62
result = avl0.inorder()                                                 # STEP 63
int2 = 2                                                                # STEP 64
avl0 = avl.AVLTree()                                                    # STEP 65
avl2.delete(int0)                                                       # STEP 66
avl2.insert(int3)                                                       # STEP 67
avl1 = avl.AVLTree()                                                    # STEP 68
avl0.insert(int3)                                                       # STEP 69
int0 = 8                                                                # STEP 70
result = avl0.inorder()                                                 # STEP 71
avl2.insert(int1)                                                       # STEP 72
result = avl2.inorder()                                                 # STEP 73
result = avl2.find(int1)                                                # STEP 74
avl0.insert(int2)                                                       # STEP 75
avl1.insert(int1)                                                       # STEP 76
int3 = 13                                                               # STEP 77
avl1 == avl2                                                            # STEP 78
avl1 == avl1                                                            # STEP 79
int2 = 4                                                                # STEP 80
avl2.delete(int3)                                                       # STEP 81
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105841c20>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE 1
int1 = 10                                                                # STEP 0
int0 = 12                                                                # STEP 1
int3 = 9                                                                 # STEP 2
avl2 = avl.AVLTree()                                                     # STEP 3
result = avl2.inorder()                                                  # STEP 4
result = avl2.find(int3)                                                 # STEP 5
avl2.insert(int0)                                                        # STEP 6
result = avl2.find(int3)                                                 # STEP 7
avl2.insert(int0)                                                        # STEP 8
int2 = 9                                                                 # STEP 9
avl2.delete(int0)                                                       # STEP 10
result = avl2.find(int3)                                                # STEP 11
int0 = 10                                                               # STEP 12
avl2.delete(int3)                                                       # STEP 13
int3 = 8                                                                # STEP 14
avl2.delete(int1)                                                       # STEP 15
avl2.delete(int2)                                                       # STEP 16
avl2.insert(int1)                                                       # STEP 17
avl2.delete(int1)                                                       # STEP 18
avl2.delete(int2)                                                       # STEP 19
avl2.insert(int2)                                                       # STEP 20
result = avl2.find(int0)                                                # STEP 21
avl2.insert(int0)                                                       # STEP 22
int2 = 8                                                                # STEP 23
avl2.delete(int0)                                                       # STEP 24
avl2 == avl2                                                            # STEP 25
avl2.insert(int3)                                                       # STEP 26
avl2.delete(int1)                                                       # STEP 27
result = avl2.find(int1)                                                # STEP 28
result = avl2.find(int3)                                                # STEP 29
int0 = 12                                                               # STEP 30
int1 = 11                                                               # STEP 31
avl2.delete(int0)                                                       # STEP 32
result = avl2.inorder()                                                 # STEP 33
int0 = 13                                                               # STEP 34
avl2.insert(int2)                                                       # STEP 35
avl2.insert(int0)                                                       # STEP 36
avl2.insert(int0)                                                       # STEP 37
avl2.delete(int1)                                                       # STEP 38
avl2.insert(int1)                                                       # STEP 39
result = avl2.inorder()                                                 # STEP 40
int3 = 7                                                                # STEP 41
avl2.delete(int2)                                                       # STEP 42
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103dde5f0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
218 BRANCHES COVERED
163 STATEMENTS COVERED

Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.193.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
TEST #4 STEP #82 (0:00:30.077826) Fri Apr 28 05:44:52 2017 [ 151 stmts 202 branches ]
  9 [3:1]
-- < 7 [2:1]
---- < 2 [1:-1]
------ > 3 [0:0] L
---- > 8 [0:0] L
-- > 12 [1:-1]
---- > 20 [0:0] L
set([2, 3, 7, 8, 9, 12, 20])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104a46a28>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 27 steps

SAVING TEST AS failure.193.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 17                                                                # STEP 0
ACTION: int0 = 17 
int0 = None : <type 'NoneType'>
=> int0 = 17 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 1
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x104a465a8> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int1 = 5                                                                 # STEP 2
ACTION: int1 = 5 
int1 = None : <type 'NoneType'>
=> int1 = 5 : <type 'int'>
==================================================
int3 = 10                                                                # STEP 3
ACTION: int3 = 10 
int3 = None : <type 'NoneType'>
=> int3 = 10 : <type 'int'>
==================================================
avl1.delete(int0)                                                        # STEP 4
ACTION: avl1.delete(int0) 
int0 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104a465a8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.insert(int1)                                                        # STEP 5
ACTION: avl1.insert(int1) 
int1 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104a465a8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([5]) : <type 'set'>
==================================================
int1 = 9                                                                 # STEP 6
ACTION: int1 = 9 
int1 = 5 : <type 'int'>
=> int1 = 9 : <type 'int'>
==================================================
int2 = 14                                                                # STEP 7
ACTION: int2 = 14 
int2 = None : <type 'NoneType'>
=> int2 = 14 : <type 'int'>
==================================================
int0 = 6                                                                 # STEP 8
ACTION: int0 = 6 
int0 = 17 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
avl1.insert(int3)                                                        # STEP 9
ACTION: avl1.insert(int3) 
int3 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104a465a8> : <type 'instance'>
avl_REF1 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([10, 5]) : <type 'set'>
==================================================
int3 = 3                                                                # STEP 10
ACTION: int3 = 3 
int3 = 10 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 11
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104a465a8> : <type 'instance'>
avl_REF1 = set([10, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
result = avl1.inorder()                                                 # STEP 12
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104a465a8> : <type 'instance'>
avl_REF1 = set([10, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.delete(int3)                                                       # STEP 13
ACTION: avl1.delete(int3) 
int3 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104a465a8> : <type 'instance'>
avl_REF1 = set([10, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
result = avl1.find(int2)                                                # STEP 14
ACTION: result = avl1.find(int2) 
int2 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104a465a8> : <type 'instance'>
avl_REF1 = set([10, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int2 = 17                                                               # STEP 15
ACTION: int2 = 17 
int2 = 14 : <type 'int'>
=> int2 = 17 : <type 'int'>
==================================================
int3 = 10                                                               # STEP 16
ACTION: int3 = 10 
int3 = 3 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
result = avl1.find(int3)                                                # STEP 17
ACTION: result = avl1.find(int3) 
int3 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104a465a8> : <type 'instance'>
avl_REF1 = set([10, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
int3 = 14                                                               # STEP 18
ACTION: int3 = 14 
int3 = 10 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 19
ACTION: avl1.insert(int3) 
int3 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104a465a8> : <type 'instance'>
avl_REF1 = set([10, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([10, 5, 14]) : <type 'set'>
==================================================
result = avl1.find(int3)                                                # STEP 20
ACTION: result = avl1.find(int3) 
int3 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104a465a8> : <type 'instance'>
avl_REF1 = set([10, 5, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
int3 = 3                                                                # STEP 21
ACTION: int3 = 3 
int3 = 14 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 22
ACTION: avl1.delete(int2) 
int2 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104a465a8> : <type 'instance'>
avl_REF1 = set([10, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int2 = 9                                                                # STEP 23
ACTION: int2 = 9 
int2 = 17 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 24
ACTION: avl1.insert(int3) 
int3 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104a465a8> : <type 'instance'>
avl_REF1 = set([10, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([10, 3, 5, 14]) : <type 'set'>
==================================================
int3 = 10                                                               # STEP 25
ACTION: int3 = 10 
int3 = 3 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 26
ACTION: avl1.delete(int3) 
int3 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104a465a8> : <type 'instance'>
avl_REF1 = set([10, 3, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([3, 5, 14]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104bb2488>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 17
STOPPING TESTING DUE TO TIMEOUT
8.6528673227 PERCENT COVERED
60.2364730835 TOTAL RUNTIME
9 EXECUTED
744 TOTAL TEST OPERATIONS
28.895583868 TIME SPENT EXECUTING TEST OPERATIONS
0.0266063213348 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
29.0847637653 TIME SPENT CHECKING PROPERTIES
57.9803476334 TOTAL TIME SPENT RUNNING SUT
0.00510096549988 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int0 = 17                                                                # STEP 0
avl1 = avl.AVLTree()                                                     # STEP 1
int1 = 5                                                                 # STEP 2
int3 = 10                                                                # STEP 3
avl1.delete(int0)                                                        # STEP 4
avl1.insert(int1)                                                        # STEP 5
int1 = 9                                                                 # STEP 6
int2 = 14                                                                # STEP 7
int0 = 6                                                                 # STEP 8
avl1.insert(int3)                                                        # STEP 9
int3 = 3                                                                # STEP 10
result = avl1.inorder()                                                 # STEP 11
result = avl1.inorder()                                                 # STEP 12
avl1.delete(int3)                                                       # STEP 13
result = avl1.find(int2)                                                # STEP 14
int2 = 17                                                               # STEP 15
int3 = 10                                                               # STEP 16
result = avl1.find(int3)                                                # STEP 17
int3 = 14                                                               # STEP 18
avl1.insert(int3)                                                       # STEP 19
result = avl1.find(int3)                                                # STEP 20
int3 = 3                                                                # STEP 21
avl1.delete(int2)                                                       # STEP 22
int2 = 9                                                                # STEP 23
avl1.insert(int3)                                                       # STEP 24
int3 = 10                                                               # STEP 25
avl1.delete(int3)                                                       # STEP 26
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104bb2488>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
218 BRANCHES COVERED
163 STATEMENTS COVERED

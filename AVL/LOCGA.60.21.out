Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.62053.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  9 [2:0]
-- < 2 [1:0]
---- < 1 [0:0] L
---- > 6 [0:0] L
-- > 14 [1:-1]
---- > 20 [0:0] L
set([1, 2, 6, 9, 14, 20])
  9 [2:0]
-- < 2 [1:0]
---- < 1 [0:0] L
---- > 6 [0:0] L
-- > 14 [1:-1]
---- > 20 [0:0] L
set([1, 2, 6, 9, 14, 20])
  9 [3:1]
-- < 2 [2:-1]
---- < 1 [0:0] L
---- > 6 [1:-1]
------ > 8 [0:0] L
-- > 14 [1:-1]
---- > 20 [0:0] L
set([1, 2, 6, 8, 9, 14, 20])
  9 [3:1]
-- < 2 [2:-1]
---- < 1 [0:0] L
---- > 6 [1:-1]
------ > 8 [0:0] L
-- > 14 [1:-1]
---- > 20 [0:0] L
set([1, 2, 6, 8, 9, 14, 20])
  9 [3:1]
-- < 2 [2:-1]
---- < 1 [0:0] L
---- > 6 [1:-1]
------ > 7 [0:0] L
-- > 14 [1:-1]
---- > 20 [0:0] L
set([1, 2, 6, 7, 9, 14, 20])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x101ee4830>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
Original test has 49 steps

SAVING TEST AS failure.62053.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 5                                                                 # STEP 0
ACTION: int1 = 5 
int1 = None : <type 'NoneType'>
=> int1 = 5 : <type 'int'>
==================================================
int2 = 20                                                                # STEP 1
ACTION: int2 = 20 
int2 = None : <type 'NoneType'>
=> int2 = 20 : <type 'int'>
==================================================
int0 = 6                                                                 # STEP 2
ACTION: int0 = 6 
int0 = None : <type 'NoneType'>
=> int0 = 6 : <type 'int'>
==================================================
int3 = 2                                                                 # STEP 3
ACTION: int3 = 2 
int3 = None : <type 'NoneType'>
=> int3 = 2 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x102c45758> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.insert(int3)                                                        # STEP 5
ACTION: avl1.insert(int3) 
int3 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102c45758> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([2]) : <type 'set'>
==================================================
avl1.insert(int2)                                                        # STEP 6
ACTION: avl1.insert(int2) 
int2 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102c45758> : <type 'instance'>
avl_REF1 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([2, 20]) : <type 'set'>
==================================================
int2 = 9                                                                 # STEP 7
ACTION: int2 = 9 
int2 = 20 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
result = avl1.find(int1)                                                 # STEP 8
ACTION: result = avl1.find(int1) 
int1 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102c45758> : <type 'instance'>
avl_REF1 = set([2, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int3 = 14                                                                # STEP 9
ACTION: int3 = 14 
int3 = 2 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 10
ACTION: avl1.insert(int1) 
int1 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102c45758> : <type 'instance'>
avl_REF1 = set([2, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([2, 20, 5]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 11
ACTION: avl1.insert(int3) 
int3 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102c45758> : <type 'instance'>
avl_REF1 = set([2, 20, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([2, 20, 5, 14]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 12
ACTION: avl1.insert(int1) 
int1 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102c45758> : <type 'instance'>
avl_REF1 = set([2, 20, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl1.insert(int2)                                                       # STEP 13
ACTION: avl1.insert(int2) 
int2 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102c45758> : <type 'instance'>
avl_REF1 = set([2, 20, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([9, 2, 20, 5, 14]) : <type 'set'>
==================================================
avl1 == avl1                                                            # STEP 14
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x102c45758> : <type 'instance'>
avl_REF1 = set([9, 2, 20, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.delete(int0)                                                       # STEP 15
ACTION: avl1.delete(int0) 
int0 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102c45758> : <type 'instance'>
avl_REF1 = set([9, 2, 20, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.delete(int1)                                                       # STEP 16
ACTION: avl1.delete(int1) 
int1 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102c45758> : <type 'instance'>
avl_REF1 = set([9, 2, 20, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([9, 2, 20, 14]) : <type 'set'>
==================================================
int3 = 1                                                                # STEP 17
ACTION: int3 = 1 
int3 = 14 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 18
ACTION: avl1.delete(int0) 
int0 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102c45758> : <type 'instance'>
avl_REF1 = set([9, 2, 20, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.insert(int2)                                                       # STEP 19
ACTION: avl1.insert(int2) 
int2 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102c45758> : <type 'instance'>
avl_REF1 = set([9, 2, 20, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
int1 = 14                                                               # STEP 20
ACTION: int1 = 14 
int1 = 5 : <type 'int'>
=> int1 = 14 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 21
ACTION: avl1.insert(int0) 
int0 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102c45758> : <type 'instance'>
avl_REF1 = set([9, 2, 20, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([9, 2, 20, 6, 14]) : <type 'set'>
==================================================
int2 = 8                                                                # STEP 22
ACTION: int2 = 8 
int2 = 9 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 23
ACTION: avl1.insert(int3) 
int3 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102c45758> : <type 'instance'>
avl_REF1 = set([9, 2, 20, 6, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([1, 2, 6, 9, 14, 20]) : <type 'set'>
==================================================
int3 = 20                                                               # STEP 24
ACTION: int3 = 20 
int3 = 1 : <type 'int'>
=> int3 = 20 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 25
ACTION: avl1.insert(int3) 
int3 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102c45758> : <type 'instance'>
avl_REF1 = set([1, 2, 6, 9, 14, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
result = avl1.find(int1)                                                # STEP 26
ACTION: result = avl1.find(int1) 
int1 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102c45758> : <type 'instance'>
avl_REF1 = set([1, 2, 6, 9, 14, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl1.display()                                                          # STEP 27
ACTION: avl1.display() 
avl1 = <avlbug2.AVLTree instance at 0x102c45758> : <type 'instance'>
avl_REF1 = set([1, 2, 6, 9, 14, 20]) : <type 'set'>
  9 [2:0]
-- < 2 [1:0]
---- < 1 [0:0] L
---- > 6 [0:0] L
-- > 14 [1:-1]
---- > 20 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([1, 2, 6, 9, 14, 20])
==================================================
int0 = 8                                                                # STEP 28
ACTION: int0 = 8 
int0 = 6 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 29
ACTION: avl1.insert(int1) 
int1 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102c45758> : <type 'instance'>
avl_REF1 = set([1, 2, 6, 9, 14, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl2 = avl.AVLTree()                                                    # STEP 30
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x102ac9f38> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl1.display()                                                          # STEP 31
ACTION: avl1.display() 
avl1 = <avlbug2.AVLTree instance at 0x102c45758> : <type 'instance'>
avl_REF1 = set([1, 2, 6, 9, 14, 20]) : <type 'set'>
  9 [2:0]
-- < 2 [1:0]
---- < 1 [0:0] L
---- > 6 [0:0] L
-- > 14 [1:-1]
---- > 20 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([1, 2, 6, 9, 14, 20])
==================================================
int3 = 8                                                                # STEP 32
ACTION: int3 = 8 
int3 = 20 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
int1 = 7                                                                # STEP 33
ACTION: int1 = 7 
int1 = 14 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 34
ACTION: avl1.insert(int3) 
int3 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102c45758> : <type 'instance'>
avl_REF1 = set([1, 2, 6, 9, 14, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([1, 2, 6, 8, 9, 14, 20]) : <type 'set'>
==================================================
avl1.display()                                                          # STEP 35
ACTION: avl1.display() 
avl1 = <avlbug2.AVLTree instance at 0x102c45758> : <type 'instance'>
avl_REF1 = set([1, 2, 6, 8, 9, 14, 20]) : <type 'set'>
  9 [3:1]
-- < 2 [2:-1]
---- < 1 [0:0] L
---- > 6 [1:-1]
------ > 8 [0:0] L
-- > 14 [1:-1]
---- > 20 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([1, 2, 6, 8, 9, 14, 20])
==================================================
avl1.delete(int1)                                                       # STEP 36
ACTION: avl1.delete(int1) 
int1 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102c45758> : <type 'instance'>
avl_REF1 = set([1, 2, 6, 8, 9, 14, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
result = avl2.inorder()                                                 # STEP 37
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x102ac9f38> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl1.delete(int1)                                                       # STEP 38
ACTION: avl1.delete(int1) 
int1 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102c45758> : <type 'instance'>
avl_REF1 = set([1, 2, 6, 8, 9, 14, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.display()                                                          # STEP 39
ACTION: avl1.display() 
avl1 = <avlbug2.AVLTree instance at 0x102c45758> : <type 'instance'>
avl_REF1 = set([1, 2, 6, 8, 9, 14, 20]) : <type 'set'>
  9 [3:1]
-- < 2 [2:-1]
---- < 1 [0:0] L
---- > 6 [1:-1]
------ > 8 [0:0] L
-- > 14 [1:-1]
---- > 20 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([1, 2, 6, 8, 9, 14, 20])
==================================================
avl1.insert(int2)                                                       # STEP 40
ACTION: avl1.insert(int2) 
int2 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102c45758> : <type 'instance'>
avl_REF1 = set([1, 2, 6, 8, 9, 14, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
avl1.delete(int3)                                                       # STEP 41
ACTION: avl1.delete(int3) 
int3 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102c45758> : <type 'instance'>
avl_REF1 = set([1, 2, 6, 8, 9, 14, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([1, 2, 6, 9, 14, 20]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 42
ACTION: avl2.delete(int1) 
int1 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102ac9f38> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int3 = 16                                                               # STEP 43
ACTION: int3 = 16 
int3 = 8 : <type 'int'>
=> int3 = 16 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 44
ACTION: avl1.delete(int1) 
int1 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102c45758> : <type 'instance'>
avl_REF1 = set([1, 2, 6, 9, 14, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.insert(int1)                                                       # STEP 45
ACTION: avl1.insert(int1) 
int1 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102c45758> : <type 'instance'>
avl_REF1 = set([1, 2, 6, 9, 14, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([1, 2, 6, 7, 9, 14, 20]) : <type 'set'>
==================================================
int2 = 14                                                               # STEP 46
ACTION: int2 = 14 
int2 = 8 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
avl1.display()                                                          # STEP 47
ACTION: avl1.display() 
avl1 = <avlbug2.AVLTree instance at 0x102c45758> : <type 'instance'>
avl_REF1 = set([1, 2, 6, 7, 9, 14, 20]) : <type 'set'>
  9 [3:1]
-- < 2 [2:-1]
---- < 1 [0:0] L
---- > 6 [1:-1]
------ > 7 [0:0] L
-- > 14 [1:-1]
---- > 20 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([1, 2, 6, 7, 9, 14, 20])
==================================================
avl1.delete(int2)                                                       # STEP 48
ACTION: avl1.delete(int2) 
int2 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102c45758> : <type 'instance'>
avl_REF1 = set([1, 2, 6, 7, 9, 14, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([1, 2, 6, 7, 9, 20]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102b17ef0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
  10 [2:0]
-- < 6 [1:-1]
---- > 7 [0:0] L
-- > 14 [1:0]
---- < 13 [0:0] L
---- > 15 [0:0] L
set([6, 7, 10, 13, 14, 15])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102d9fea8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
Original test has 87 steps

SAVING TEST AS failure.62053.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 3                                                                 # STEP 0
ACTION: int3 = 3 
int3 = None : <type 'NoneType'>
=> int3 = 3 : <type 'int'>
==================================================
int1 = 12                                                                # STEP 1
ACTION: int1 = 12 
int1 = None : <type 'NoneType'>
=> int1 = 12 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 2
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x102b39a28> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int2 = 6                                                                 # STEP 3
ACTION: int2 = 6 
int2 = None : <type 'NoneType'>
=> int2 = 6 : <type 'int'>
==================================================
avl1.insert(int1)                                                        # STEP 4
ACTION: avl1.insert(int1) 
int1 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102b39a28> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([12]) : <type 'set'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 5
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x101ed0680> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
result = avl1.find(int2)                                                 # STEP 6
ACTION: result = avl1.find(int2) 
int2 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102b39a28> : <type 'instance'>
avl_REF1 = set([12]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl0.insert(int2)                                                        # STEP 7
ACTION: avl0.insert(int2) 
int2 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101ed0680> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([6]) : <type 'set'>
==================================================
avl0.delete(int2)                                                        # STEP 8
ACTION: avl0.delete(int2) 
int2 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101ed0680> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int1 = 6                                                                 # STEP 9
ACTION: int1 = 6 
int1 = 12 : <type 'int'>
=> int1 = 6 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 10
ACTION: avl1.insert(int2) 
int2 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102b39a28> : <type 'instance'>
avl_REF1 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([12, 6]) : <type 'set'>
==================================================
int0 = 8                                                                # STEP 11
ACTION: int0 = 8 
int0 = None : <type 'NoneType'>
=> int0 = 8 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 12
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x102b39a28> : <type 'instance'>
avl_REF1 = set([12, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl0.delete(int2)                                                       # STEP 13
ACTION: avl0.delete(int2) 
int2 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101ed0680> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
result = avl1.inorder()                                                 # STEP 14
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x102b39a28> : <type 'instance'>
avl_REF1 = set([12, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl0.delete(int0)                                                       # STEP 15
ACTION: avl0.delete(int0) 
int0 = 8 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101ed0680> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.insert(int0)                                                       # STEP 16
ACTION: avl0.insert(int0) 
int0 = 8 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101ed0680> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([8]) : <type 'set'>
==================================================
int0 = 10                                                               # STEP 17
ACTION: int0 = 10 
int0 = 8 : <type 'int'>
=> int0 = 10 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 18
ACTION: avl1.delete(int2) 
int2 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102b39a28> : <type 'instance'>
avl_REF1 = set([12, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([12]) : <type 'set'>
==================================================
avl1 == avl1                                                            # STEP 19
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x102b39a28> : <type 'instance'>
avl_REF1 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl0.insert(int2)                                                       # STEP 20
ACTION: avl0.insert(int2) 
int2 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101ed0680> : <type 'instance'>
avl_REF0 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([8, 6]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 21
ACTION: avl1.insert(int3) 
int3 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102b39a28> : <type 'instance'>
avl_REF1 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([3, 12]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 22
ACTION: avl0.insert(int1) 
int1 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101ed0680> : <type 'instance'>
avl_REF0 = set([8, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
int1 = 3                                                                # STEP 23
ACTION: int1 = 3 
int1 = 6 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
int2 = 4                                                                # STEP 24
ACTION: int2 = 4 
int2 = 6 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 25
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x102e23488> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int3 = 15                                                               # STEP 26
ACTION: int3 = 15 
int3 = 3 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 27
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x101ed0680> : <type 'instance'>
avl_REF0 = set([8, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl2.insert(int0)                                                       # STEP 28
ACTION: avl2.insert(int0) 
int0 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102e23488> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([10]) : <type 'set'>
==================================================
avl2 == avl2                                                            # STEP 29
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x102e23488> : <type 'instance'>
avl_REF2 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl0.delete(int0)                                                       # STEP 30
ACTION: avl0.delete(int0) 
int0 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101ed0680> : <type 'instance'>
avl_REF0 = set([8, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.delete(int2)                                                       # STEP 31
ACTION: avl0.delete(int2) 
int2 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101ed0680> : <type 'instance'>
avl_REF0 = set([8, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int2 = 6                                                                # STEP 32
ACTION: int2 = 6 
int2 = 4 : <type 'int'>
=> int2 = 6 : <type 'int'>
==================================================
int0 = 13                                                               # STEP 33
ACTION: int0 = 13 
int0 = 10 : <type 'int'>
=> int0 = 13 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 34
ACTION: avl0.delete(int0) 
int0 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101ed0680> : <type 'instance'>
avl_REF0 = set([8, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl2.delete(int0)                                                       # STEP 35
ACTION: avl2.delete(int0) 
int0 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102e23488> : <type 'instance'>
avl_REF2 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.insert(int0)                                                       # STEP 36
ACTION: avl2.insert(int0) 
int0 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102e23488> : <type 'instance'>
avl_REF2 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([10, 13]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 37
ACTION: avl0.delete(int1) 
int1 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101ed0680> : <type 'instance'>
avl_REF0 = set([8, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int1 = 8                                                                # STEP 38
ACTION: int1 = 8 
int1 = 3 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 39
ACTION: avl1.insert(int1) 
int1 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102b39a28> : <type 'instance'>
avl_REF1 = set([3, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([8, 3, 12]) : <type 'set'>
==================================================
int1 = 8                                                                # STEP 40
ACTION: int1 = 8 
int1 = 8 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 41
ACTION: avl0.delete(int2) 
int2 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101ed0680> : <type 'instance'>
avl_REF0 = set([8, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([8]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 42
ACTION: avl2.delete(int3) 
int3 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102e23488> : <type 'instance'>
avl_REF2 = set([10, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.insert(int1)                                                       # STEP 43
ACTION: avl2.insert(int1) 
int1 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102e23488> : <type 'instance'>
avl_REF2 = set([10, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([8, 10, 13]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 44
ACTION: avl0.insert(int1) 
int1 = 8 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101ed0680> : <type 'instance'>
avl_REF0 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
result = avl2.find(int3)                                                # STEP 45
ACTION: result = avl2.find(int3) 
int3 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102e23488> : <type 'instance'>
avl_REF2 = set([8, 10, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl2.delete(int1)                                                       # STEP 46
ACTION: avl2.delete(int1) 
int1 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102e23488> : <type 'instance'>
avl_REF2 = set([8, 10, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([10, 13]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 47
ACTION: avl2.delete(int3) 
int3 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102e23488> : <type 'instance'>
avl_REF2 = set([10, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl0.insert(int3)                                                       # STEP 48
ACTION: avl0.insert(int3) 
int3 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101ed0680> : <type 'instance'>
avl_REF0 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([8, 15]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 49
ACTION: avl1.insert(int1) 
int1 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102b39a28> : <type 'instance'>
avl_REF1 = set([8, 3, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl1.delete(int1)                                                       # STEP 50
ACTION: avl1.delete(int1) 
int1 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102b39a28> : <type 'instance'>
avl_REF1 = set([8, 3, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([3, 12]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 51
ACTION: avl2.insert(int2) 
int2 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102e23488> : <type 'instance'>
avl_REF2 = set([10, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([10, 13, 6]) : <type 'set'>
==================================================
int0 = 17                                                               # STEP 52
ACTION: int0 = 17 
int0 = 13 : <type 'int'>
=> int0 = 17 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 53
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x102e23488> : <type 'instance'>
avl_REF2 = set([10, 13, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int1 = 14                                                               # STEP 54
ACTION: int1 = 14 
int1 = 8 : <type 'int'>
=> int1 = 14 : <type 'int'>
==================================================
avl0 == avl2                                                            # STEP 55
ACTION: avl0 == avl2 
avl0 = <avlbug2.AVLTree instance at 0x101ed0680> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x102e23488> : <type 'instance'>
avl_REF0 = set([8, 15]) : <type 'set'>
avl_REF2 = set([10, 13, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
int2 = 7                                                                # STEP 56
ACTION: int2 = 7 
int2 = 6 : <type 'int'>
=> int2 = 7 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 57
ACTION: avl2.insert(int3) 
int3 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102e23488> : <type 'instance'>
avl_REF2 = set([10, 13, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([10, 13, 6, 15]) : <type 'set'>
==================================================
int3 = 1                                                                # STEP 58
ACTION: int3 = 1 
int3 = 15 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 59
ACTION: avl1.delete(int0) 
int0 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102b39a28> : <type 'instance'>
avl_REF1 = set([3, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int0 = 2                                                                # STEP 60
ACTION: int0 = 2 
int0 = 17 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 61
ACTION: avl0.insert(int3) 
int3 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101ed0680> : <type 'instance'>
avl_REF0 = set([8, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([8, 1, 15]) : <type 'set'>
==================================================
avl1 == avl1                                                            # STEP 62
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x102b39a28> : <type 'instance'>
avl_REF1 = set([3, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl0.delete(int0)                                                       # STEP 63
ACTION: avl0.delete(int0) 
int0 = 2 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101ed0680> : <type 'instance'>
avl_REF0 = set([8, 1, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
result = avl1.inorder()                                                 # STEP 64
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x102b39a28> : <type 'instance'>
avl_REF1 = set([3, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl0.insert(int0)                                                       # STEP 65
ACTION: avl0.insert(int0) 
int0 = 2 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101ed0680> : <type 'instance'>
avl_REF0 = set([8, 1, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([8, 1, 2, 15]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 66
ACTION: avl2.insert(int2) 
int2 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102e23488> : <type 'instance'>
avl_REF2 = set([10, 13, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([6, 7, 10, 13, 15]) : <type 'set'>
==================================================
int2 = 16                                                               # STEP 67
ACTION: int2 = 16 
int2 = 7 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 68
ACTION: avl0.insert(int1) 
int1 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101ed0680> : <type 'instance'>
avl_REF0 = set([8, 1, 2, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([8, 1, 2, 14, 15]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 69
ACTION: avl1.delete(int1) 
int1 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102b39a28> : <type 'instance'>
avl_REF1 = set([3, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int3 = 1                                                                # STEP 70
ACTION: int3 = 1 
int3 = 1 : <type 'int'>
==================================================
avl0 == avl2                                                            # STEP 71
ACTION: avl0 == avl2 
avl0 = <avlbug2.AVLTree instance at 0x101ed0680> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x102e23488> : <type 'instance'>
avl_REF0 = set([8, 1, 2, 14, 15]) : <type 'set'>
avl_REF2 = set([6, 7, 10, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
avl2.insert(int1)                                                       # STEP 72
ACTION: avl2.insert(int1) 
int1 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102e23488> : <type 'instance'>
avl_REF2 = set([6, 7, 10, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([6, 7, 10, 13, 14, 15]) : <type 'set'>
==================================================
result = avl1.find(int3)                                                # STEP 73
ACTION: result = avl1.find(int3) 
int3 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102b39a28> : <type 'instance'>
avl_REF1 = set([3, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl0.delete(int3)                                                       # STEP 74
ACTION: avl0.delete(int3) 
int3 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101ed0680> : <type 'instance'>
avl_REF0 = set([8, 1, 2, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([8, 2, 14, 15]) : <type 'set'>
==================================================
int3 = 9                                                                # STEP 75
ACTION: int3 = 9 
int3 = 1 : <type 'int'>
=> int3 = 9 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 76
ACTION: avl1.delete(int3) 
int3 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102b39a28> : <type 'instance'>
avl_REF1 = set([3, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
result = avl0.inorder()                                                 # STEP 77
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x101ed0680> : <type 'instance'>
avl_REF0 = set([8, 2, 14, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl2.display()                                                          # STEP 78
ACTION: avl2.display() 
avl2 = <avlbug2.AVLTree instance at 0x102e23488> : <type 'instance'>
avl_REF2 = set([6, 7, 10, 13, 14, 15]) : <type 'set'>
  10 [2:0]
-- < 6 [1:-1]
---- > 7 [0:0] L
-- > 14 [1:0]
---- < 13 [0:0] L
---- > 15 [0:0] L
REFERENCE ACTION: print(avl_REF2) 
set([6, 7, 10, 13, 14, 15])
==================================================
avl1.delete(int3)                                                       # STEP 79
ACTION: avl1.delete(int3) 
int3 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102b39a28> : <type 'instance'>
avl_REF1 = set([3, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.insert(int0)                                                       # STEP 80
ACTION: avl1.insert(int0) 
int0 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102b39a28> : <type 'instance'>
avl_REF1 = set([3, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([2, 3, 12]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 81
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x102e23488> : <type 'instance'>
avl_REF2 = set([6, 7, 10, 13, 14, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int2)                                                       # STEP 82
ACTION: avl2.insert(int2) 
int2 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102e23488> : <type 'instance'>
avl_REF2 = set([6, 7, 10, 13, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([6, 7, 10, 13, 14, 15, 16]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 83
ACTION: avl2.insert(int2) 
int2 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102e23488> : <type 'instance'>
avl_REF2 = set([6, 7, 10, 13, 14, 15, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl1 == avl0                                                            # STEP 84
ACTION: avl1 == avl0 
avl1 = <avlbug2.AVLTree instance at 0x102b39a28> : <type 'instance'>
avl0 = <avlbug2.AVLTree instance at 0x101ed0680> : <type 'instance'>
avl_REF1 = set([2, 3, 12]) : <type 'set'>
avl_REF0 = set([8, 2, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
avl2.delete(int0)                                                       # STEP 85
ACTION: avl2.delete(int0) 
int0 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102e23488> : <type 'instance'>
avl_REF2 = set([6, 7, 10, 13, 14, 15, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl0.delete(int0)                                                       # STEP 86
ACTION: avl0.delete(int0) 
int0 = 2 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101ed0680> : <type 'instance'>
avl_REF0 = set([8, 2, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([8, 14, 15]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x101ee6950>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
TEST #3 STEP #21 (0:00:30.053196) Mon May  1 17:37:21 2017 [ 163 stmts 217 branches ]
  17 [2:0]
-- < 7 [1:0]
---- < 6 [0:0] L
---- > 9 [0:0] L
-- > 20 [1:1]
---- < 19 [0:0] L
set([6, 7, 9, 17, 19, 20])
  17 [2:0]
-- < 7 [1:0]
---- < 6 [0:0] L
---- > 9 [0:0] L
-- > 20 [1:1]
---- < 19 [0:0] L
set([6, 7, 9, 17, 19, 20])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102d4ebd8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
Original test has 97 steps

SAVING TEST AS failure.62053.test.2
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 17                                                                # STEP 0
ACTION: int0 = 17 
int0 = None : <type 'NoneType'>
=> int0 = 17 : <type 'int'>
==================================================
int2 = 16                                                                # STEP 1
ACTION: int2 = 16 
int2 = None : <type 'NoneType'>
=> int2 = 16 : <type 'int'>
==================================================
int3 = 10                                                                # STEP 2
ACTION: int3 = 10 
int3 = None : <type 'NoneType'>
=> int3 = 10 : <type 'int'>
==================================================
int1 = 19                                                                # STEP 3
ACTION: int1 = 19 
int1 = None : <type 'NoneType'>
=> int1 = 19 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x102d9ff80> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.insert(int1)                                                        # STEP 5
ACTION: avl1.insert(int1) 
int1 = 19 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102d9ff80> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([19]) : <type 'set'>
==================================================
avl1.insert(int2)                                                        # STEP 6
ACTION: avl1.insert(int2) 
int2 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102d9ff80> : <type 'instance'>
avl_REF1 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([16, 19]) : <type 'set'>
==================================================
avl1.delete(int3)                                                        # STEP 7
ACTION: avl1.delete(int3) 
int3 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102d9ff80> : <type 'instance'>
avl_REF1 = set([16, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1 == avl1                                                             # STEP 8
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x102d9ff80> : <type 'instance'>
avl_REF1 = set([16, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.delete(int3)                                                        # STEP 9
ACTION: avl1.delete(int3) 
int3 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102d9ff80> : <type 'instance'>
avl_REF1 = set([16, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.delete(int2)                                                       # STEP 10
ACTION: avl1.delete(int2) 
int2 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102d9ff80> : <type 'instance'>
avl_REF1 = set([16, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([19]) : <type 'set'>
==================================================
result = avl1.find(int3)                                                # STEP 11
ACTION: result = avl1.find(int3) 
int3 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102d9ff80> : <type 'instance'>
avl_REF1 = set([19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
result = avl1.inorder()                                                 # STEP 12
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x102d9ff80> : <type 'instance'>
avl_REF1 = set([19]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int1)                                                       # STEP 13
ACTION: avl1.insert(int1) 
int1 = 19 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102d9ff80> : <type 'instance'>
avl_REF1 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
result = avl1.find(int2)                                                # STEP 14
ACTION: result = avl1.find(int2) 
int2 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102d9ff80> : <type 'instance'>
avl_REF1 = set([19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int1 = 19                                                               # STEP 15
ACTION: int1 = 19 
int1 = 19 : <type 'int'>
==================================================
int2 = 20                                                               # STEP 16
ACTION: int2 = 20 
int2 = 16 : <type 'int'>
=> int2 = 20 : <type 'int'>
==================================================
int3 = 7                                                                # STEP 17
ACTION: int3 = 7 
int3 = 10 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 18
ACTION: avl1.delete(int1) 
int1 = 19 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102d9ff80> : <type 'instance'>
avl_REF1 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 19
ACTION: avl1.insert(int2) 
int2 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102d9ff80> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([20]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 20
ACTION: avl1.insert(int3) 
int3 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102d9ff80> : <type 'instance'>
avl_REF1 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([20, 7]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 21
ACTION: avl1.insert(int3) 
int3 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102d9ff80> : <type 'instance'>
avl_REF1 = set([20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
result = avl1.inorder()                                                 # STEP 22
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x102d9ff80> : <type 'instance'>
avl_REF1 = set([20, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int3 = 20                                                               # STEP 23
ACTION: int3 = 20 
int3 = 7 : <type 'int'>
=> int3 = 20 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 24
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x102d9ff80> : <type 'instance'>
avl_REF1 = set([20, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int0)                                                       # STEP 25
ACTION: avl1.insert(int0) 
int0 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102d9ff80> : <type 'instance'>
avl_REF1 = set([20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([17, 20, 7]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 26
ACTION: avl1.delete(int1) 
int1 = 19 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102d9ff80> : <type 'instance'>
avl_REF1 = set([17, 20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl0 = avl.AVLTree()                                                    # STEP 27
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x102d658c0> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 28
ACTION: avl0.insert(int1) 
int1 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102d658c0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([19]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 29
ACTION: avl0.insert(int3) 
int3 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102d658c0> : <type 'instance'>
avl_REF0 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([19, 20]) : <type 'set'>
==================================================
int1 = 6                                                                # STEP 30
ACTION: int1 = 6 
int1 = 19 : <type 'int'>
=> int1 = 6 : <type 'int'>
==================================================
avl1 == avl0                                                            # STEP 31
ACTION: avl1 == avl0 
avl1 = <avlbug2.AVLTree instance at 0x102d9ff80> : <type 'instance'>
avl0 = <avlbug2.AVLTree instance at 0x102d658c0> : <type 'instance'>
avl_REF1 = set([17, 20, 7]) : <type 'set'>
avl_REF0 = set([19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
avl1.delete(int2)                                                       # STEP 32
ACTION: avl1.delete(int2) 
int2 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102d9ff80> : <type 'instance'>
avl_REF1 = set([17, 20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([17, 7]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 33
ACTION: avl0.delete(int3) 
int3 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102d658c0> : <type 'instance'>
avl_REF0 = set([19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([19]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 34
ACTION: avl1.insert(int0) 
int0 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102d9ff80> : <type 'instance'>
avl_REF1 = set([17, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl0.insert(int3)                                                       # STEP 35
ACTION: avl0.insert(int3) 
int3 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102d658c0> : <type 'instance'>
avl_REF0 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([19, 20]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 36
ACTION: avl1.delete(int0) 
int0 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102d9ff80> : <type 'instance'>
avl_REF1 = set([17, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([7]) : <type 'set'>
==================================================
result = avl1.find(int0)                                                # STEP 37
ACTION: result = avl1.find(int0) 
int0 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102d9ff80> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
int2 = 5                                                                # STEP 38
ACTION: int2 = 5 
int2 = 20 : <type 'int'>
=> int2 = 5 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 39
ACTION: avl1.insert(int0) 
int0 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102d9ff80> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([17, 7]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 40
ACTION: avl0.delete(int1) 
int1 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102d658c0> : <type 'instance'>
avl_REF0 = set([19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.insert(int1)                                                       # STEP 41
ACTION: avl0.insert(int1) 
int1 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102d658c0> : <type 'instance'>
avl_REF0 = set([19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([19, 20, 6]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 42
ACTION: avl0.delete(int1) 
int1 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102d658c0> : <type 'instance'>
avl_REF0 = set([19, 20, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([19, 20]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 43
ACTION: avl0.insert(int2) 
int2 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102d658c0> : <type 'instance'>
avl_REF0 = set([19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([19, 20, 5]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 44
ACTION: avl0.delete(int3) 
int3 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102d658c0> : <type 'instance'>
avl_REF0 = set([19, 20, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([19, 5]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 45
ACTION: avl0.delete(int1) 
int1 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102d658c0> : <type 'instance'>
avl_REF0 = set([19, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.delete(int1)                                                       # STEP 46
ACTION: avl0.delete(int1) 
int1 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102d658c0> : <type 'instance'>
avl_REF0 = set([19, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl1.insert(int3)                                                       # STEP 47
ACTION: avl1.insert(int3) 
int3 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102d9ff80> : <type 'instance'>
avl_REF1 = set([17, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([17, 20, 7]) : <type 'set'>
==================================================
int3 = 9                                                                # STEP 48
ACTION: int3 = 9 
int3 = 20 : <type 'int'>
=> int3 = 9 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 49
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x102d9ff80> : <type 'instance'>
avl_REF1 = set([17, 20, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
result = avl0.inorder()                                                 # STEP 50
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x102d658c0> : <type 'instance'>
avl_REF0 = set([19, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl1.delete(int1)                                                       # STEP 51
ACTION: avl1.delete(int1) 
int1 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102d9ff80> : <type 'instance'>
avl_REF1 = set([17, 20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int0 = 5                                                                # STEP 52
ACTION: int0 = 5 
int0 = 17 : <type 'int'>
=> int0 = 5 : <type 'int'>
==================================================
avl1 == avl0                                                            # STEP 53
ACTION: avl1 == avl0 
avl1 = <avlbug2.AVLTree instance at 0x102d9ff80> : <type 'instance'>
avl0 = <avlbug2.AVLTree instance at 0x102d658c0> : <type 'instance'>
avl_REF1 = set([17, 20, 7]) : <type 'set'>
avl_REF0 = set([19, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
avl0.insert(int1)                                                       # STEP 54
ACTION: avl0.insert(int1) 
int1 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102d658c0> : <type 'instance'>
avl_REF0 = set([19, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([19, 5, 6]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 55
ACTION: avl1.insert(int1) 
int1 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102d9ff80> : <type 'instance'>
avl_REF1 = set([17, 20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([6, 7, 17, 20]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 56
ACTION: avl0.insert(int2) 
int2 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102d658c0> : <type 'instance'>
avl_REF0 = set([19, 5, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
result = avl0.inorder()                                                 # STEP 57
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x102d658c0> : <type 'instance'>
avl_REF0 = set([19, 5, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.delete(int1)                                                       # STEP 58
ACTION: avl0.delete(int1) 
int1 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102d658c0> : <type 'instance'>
avl_REF0 = set([19, 5, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([19, 5]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 59
ACTION: avl0.delete(int1) 
int1 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102d658c0> : <type 'instance'>
avl_REF0 = set([19, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int1 = 20                                                               # STEP 60
ACTION: int1 = 20 
int1 = 6 : <type 'int'>
=> int1 = 20 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 61
ACTION: avl1.delete(int0) 
int0 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102d9ff80> : <type 'instance'>
avl_REF1 = set([6, 7, 17, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl0.delete(int1)                                                       # STEP 62
ACTION: avl0.delete(int1) 
int1 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102d658c0> : <type 'instance'>
avl_REF0 = set([19, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int0 = 12                                                               # STEP 63
ACTION: int0 = 12 
int0 = 5 : <type 'int'>
=> int0 = 12 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 64
ACTION: avl0.insert(int2) 
int2 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102d658c0> : <type 'instance'>
avl_REF0 = set([19, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
result = avl0.inorder()                                                 # STEP 65
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x102d658c0> : <type 'instance'>
avl_REF0 = set([19, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl1.insert(int1)                                                       # STEP 66
ACTION: avl1.insert(int1) 
int1 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102d9ff80> : <type 'instance'>
avl_REF1 = set([6, 7, 17, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
int2 = 19                                                               # STEP 67
ACTION: int2 = 19 
int2 = 5 : <type 'int'>
=> int2 = 19 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 68
ACTION: avl1.insert(int2) 
int2 = 19 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102d9ff80> : <type 'instance'>
avl_REF1 = set([6, 7, 17, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([6, 7, 17, 19, 20]) : <type 'set'>
==================================================
int1 = 9                                                                # STEP 69
ACTION: int1 = 9 
int1 = 20 : <type 'int'>
=> int1 = 9 : <type 'int'>
==================================================
int2 = 1                                                                # STEP 70
ACTION: int2 = 1 
int2 = 19 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 71
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x101e326c8> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 72
ACTION: avl0.insert(int2) 
int2 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102d658c0> : <type 'instance'>
avl_REF0 = set([19, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([1, 19, 5]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 73
ACTION: avl2.insert(int1) 
int1 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101e326c8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([9]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 74
ACTION: avl0.delete(int2) 
int2 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102d658c0> : <type 'instance'>
avl_REF0 = set([1, 19, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([19, 5]) : <type 'set'>
==================================================
result = avl0.find(int2)                                                # STEP 75
ACTION: result = avl0.find(int2) 
int2 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102d658c0> : <type 'instance'>
avl_REF0 = set([19, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl1.insert(int3)                                                       # STEP 76
ACTION: avl1.insert(int3) 
int3 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102d9ff80> : <type 'instance'>
avl_REF1 = set([6, 7, 17, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([6, 7, 9, 17, 19, 20]) : <type 'set'>
==================================================
avl1.display()                                                          # STEP 77
ACTION: avl1.display() 
avl1 = <avlbug2.AVLTree instance at 0x102d9ff80> : <type 'instance'>
avl_REF1 = set([6, 7, 9, 17, 19, 20]) : <type 'set'>
  17 [2:0]
-- < 7 [1:0]
---- < 6 [0:0] L
---- > 9 [0:0] L
-- > 20 [1:1]
---- < 19 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([6, 7, 9, 17, 19, 20])
==================================================
int1 = 13                                                               # STEP 78
ACTION: int1 = 13 
int1 = 9 : <type 'int'>
=> int1 = 13 : <type 'int'>
==================================================
int3 = 10                                                               # STEP 79
ACTION: int3 = 10 
int3 = 9 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 80
ACTION: avl1.delete(int0) 
int0 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102d9ff80> : <type 'instance'>
avl_REF1 = set([6, 7, 9, 17, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl0.delete(int1)                                                       # STEP 81
ACTION: avl0.delete(int1) 
int1 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102d658c0> : <type 'instance'>
avl_REF0 = set([19, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl1.delete(int0)                                                       # STEP 82
ACTION: avl1.delete(int0) 
int0 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102d9ff80> : <type 'instance'>
avl_REF1 = set([6, 7, 9, 17, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
result = avl1.inorder()                                                 # STEP 83
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x102d9ff80> : <type 'instance'>
avl_REF1 = set([6, 7, 9, 17, 19, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.display()                                                          # STEP 84
ACTION: avl1.display() 
avl1 = <avlbug2.AVLTree instance at 0x102d9ff80> : <type 'instance'>
avl_REF1 = set([6, 7, 9, 17, 19, 20]) : <type 'set'>
  17 [2:0]
-- < 7 [1:0]
---- < 6 [0:0] L
---- > 9 [0:0] L
-- > 20 [1:1]
---- < 19 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([6, 7, 9, 17, 19, 20])
==================================================
avl1.insert(int2)                                                       # STEP 85
ACTION: avl1.insert(int2) 
int2 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102d9ff80> : <type 'instance'>
avl_REF1 = set([6, 7, 9, 17, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([1, 6, 7, 9, 17, 19, 20]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 86
ACTION: avl0.insert(int2) 
int2 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102d658c0> : <type 'instance'>
avl_REF0 = set([19, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([1, 19, 5]) : <type 'set'>
==================================================
int1 = 9                                                                # STEP 87
ACTION: int1 = 9 
int1 = 13 : <type 'int'>
=> int1 = 9 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 88
ACTION: avl1.delete(int3) 
int3 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102d9ff80> : <type 'instance'>
avl_REF1 = set([1, 6, 7, 9, 17, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl2.insert(int2)                                                       # STEP 89
ACTION: avl2.insert(int2) 
int2 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101e326c8> : <type 'instance'>
avl_REF2 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([9, 1]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 90
ACTION: avl0.insert(int1) 
int1 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102d658c0> : <type 'instance'>
avl_REF0 = set([1, 19, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([1, 5, 9, 19]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 91
ACTION: avl2.insert(int2) 
int2 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101e326c8> : <type 'instance'>
avl_REF2 = set([9, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
result = avl1.inorder()                                                 # STEP 92
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x102d9ff80> : <type 'instance'>
avl_REF1 = set([1, 6, 7, 9, 17, 19, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl2.insert(int2)                                                       # STEP 93
ACTION: avl2.insert(int2) 
int2 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101e326c8> : <type 'instance'>
avl_REF2 = set([9, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl2.insert(int3)                                                       # STEP 94
ACTION: avl2.insert(int3) 
int3 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101e326c8> : <type 'instance'>
avl_REF2 = set([9, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([9, 10, 1]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 95
ACTION: avl1.insert(int0) 
int0 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102d9ff80> : <type 'instance'>
avl_REF1 = set([1, 6, 7, 9, 17, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([1, 6, 7, 9, 12, 17, 19, 20]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 96
ACTION: avl0.delete(int2) 
int2 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102d658c0> : <type 'instance'>
avl_REF0 = set([1, 5, 9, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([5, 9, 19]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102d6eab8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 3 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 19
STOPPING TESTING DUE TO TIMEOUT
8.38653511317 PERCENT COVERED
60.2548568249 TOTAL RUNTIME
5 EXECUTED
352 TOTAL TEST OPERATIONS
17.9775297642 TIME SPENT EXECUTING TEST OPERATIONS
0.0406103134155 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
18.1668992043 TIME SPENT CHECKING PROPERTIES
36.1444289684 TOTAL TIME SPENT RUNNING SUT
0.00355911254883 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
3 FAILED
0 REPEATS OF FAILURES
3 ACTUAL DISTINCT FAILURES

FAILURE 0
int1 = 5                                                                 # STEP 0
int2 = 20                                                                # STEP 1
int0 = 6                                                                 # STEP 2
int3 = 2                                                                 # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
avl1.insert(int3)                                                        # STEP 5
avl1.insert(int2)                                                        # STEP 6
int2 = 9                                                                 # STEP 7
result = avl1.find(int1)                                                 # STEP 8
int3 = 14                                                                # STEP 9
avl1.insert(int1)                                                       # STEP 10
avl1.insert(int3)                                                       # STEP 11
avl1.insert(int1)                                                       # STEP 12
avl1.insert(int2)                                                       # STEP 13
avl1 == avl1                                                            # STEP 14
avl1.delete(int0)                                                       # STEP 15
avl1.delete(int1)                                                       # STEP 16
int3 = 1                                                                # STEP 17
avl1.delete(int0)                                                       # STEP 18
avl1.insert(int2)                                                       # STEP 19
int1 = 14                                                               # STEP 20
avl1.insert(int0)                                                       # STEP 21
int2 = 8                                                                # STEP 22
avl1.insert(int3)                                                       # STEP 23
int3 = 20                                                               # STEP 24
avl1.insert(int3)                                                       # STEP 25
result = avl1.find(int1)                                                # STEP 26
avl1.display()                                                          # STEP 27
int0 = 8                                                                # STEP 28
avl1.insert(int1)                                                       # STEP 29
avl2 = avl.AVLTree()                                                    # STEP 30
avl1.display()                                                          # STEP 31
int3 = 8                                                                # STEP 32
int1 = 7                                                                # STEP 33
avl1.insert(int3)                                                       # STEP 34
avl1.display()                                                          # STEP 35
avl1.delete(int1)                                                       # STEP 36
result = avl2.inorder()                                                 # STEP 37
avl1.delete(int1)                                                       # STEP 38
avl1.display()                                                          # STEP 39
avl1.insert(int2)                                                       # STEP 40
avl1.delete(int3)                                                       # STEP 41
avl2.delete(int1)                                                       # STEP 42
int3 = 16                                                               # STEP 43
avl1.delete(int1)                                                       # STEP 44
avl1.insert(int1)                                                       # STEP 45
int2 = 14                                                               # STEP 46
avl1.display()                                                          # STEP 47
avl1.delete(int2)                                                       # STEP 48
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102b17ef0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE 1
int3 = 3                                                                 # STEP 0
int1 = 12                                                                # STEP 1
avl1 = avl.AVLTree()                                                     # STEP 2
int2 = 6                                                                 # STEP 3
avl1.insert(int1)                                                        # STEP 4
avl0 = avl.AVLTree()                                                     # STEP 5
result = avl1.find(int2)                                                 # STEP 6
avl0.insert(int2)                                                        # STEP 7
avl0.delete(int2)                                                        # STEP 8
int1 = 6                                                                 # STEP 9
avl1.insert(int2)                                                       # STEP 10
int0 = 8                                                                # STEP 11
result = avl1.inorder()                                                 # STEP 12
avl0.delete(int2)                                                       # STEP 13
result = avl1.inorder()                                                 # STEP 14
avl0.delete(int0)                                                       # STEP 15
avl0.insert(int0)                                                       # STEP 16
int0 = 10                                                               # STEP 17
avl1.delete(int2)                                                       # STEP 18
avl1 == avl1                                                            # STEP 19
avl0.insert(int2)                                                       # STEP 20
avl1.insert(int3)                                                       # STEP 21
avl0.insert(int1)                                                       # STEP 22
int1 = 3                                                                # STEP 23
int2 = 4                                                                # STEP 24
avl2 = avl.AVLTree()                                                    # STEP 25
int3 = 15                                                               # STEP 26
result = avl0.inorder()                                                 # STEP 27
avl2.insert(int0)                                                       # STEP 28
avl2 == avl2                                                            # STEP 29
avl0.delete(int0)                                                       # STEP 30
avl0.delete(int2)                                                       # STEP 31
int2 = 6                                                                # STEP 32
int0 = 13                                                               # STEP 33
avl0.delete(int0)                                                       # STEP 34
avl2.delete(int0)                                                       # STEP 35
avl2.insert(int0)                                                       # STEP 36
avl0.delete(int1)                                                       # STEP 37
int1 = 8                                                                # STEP 38
avl1.insert(int1)                                                       # STEP 39
int1 = 8                                                                # STEP 40
avl0.delete(int2)                                                       # STEP 41
avl2.delete(int3)                                                       # STEP 42
avl2.insert(int1)                                                       # STEP 43
avl0.insert(int1)                                                       # STEP 44
result = avl2.find(int3)                                                # STEP 45
avl2.delete(int1)                                                       # STEP 46
avl2.delete(int3)                                                       # STEP 47
avl0.insert(int3)                                                       # STEP 48
avl1.insert(int1)                                                       # STEP 49
avl1.delete(int1)                                                       # STEP 50
avl2.insert(int2)                                                       # STEP 51
int0 = 17                                                               # STEP 52
result = avl2.inorder()                                                 # STEP 53
int1 = 14                                                               # STEP 54
avl0 == avl2                                                            # STEP 55
int2 = 7                                                                # STEP 56
avl2.insert(int3)                                                       # STEP 57
int3 = 1                                                                # STEP 58
avl1.delete(int0)                                                       # STEP 59
int0 = 2                                                                # STEP 60
avl0.insert(int3)                                                       # STEP 61
avl1 == avl1                                                            # STEP 62
avl0.delete(int0)                                                       # STEP 63
result = avl1.inorder()                                                 # STEP 64
avl0.insert(int0)                                                       # STEP 65
avl2.insert(int2)                                                       # STEP 66
int2 = 16                                                               # STEP 67
avl0.insert(int1)                                                       # STEP 68
avl1.delete(int1)                                                       # STEP 69
int3 = 1                                                                # STEP 70
avl0 == avl2                                                            # STEP 71
avl2.insert(int1)                                                       # STEP 72
result = avl1.find(int3)                                                # STEP 73
avl0.delete(int3)                                                       # STEP 74
int3 = 9                                                                # STEP 75
avl1.delete(int3)                                                       # STEP 76
result = avl0.inorder()                                                 # STEP 77
avl2.display()                                                          # STEP 78
avl1.delete(int3)                                                       # STEP 79
avl1.insert(int0)                                                       # STEP 80
result = avl2.inorder()                                                 # STEP 81
avl2.insert(int2)                                                       # STEP 82
avl2.insert(int2)                                                       # STEP 83
avl1 == avl0                                                            # STEP 84
avl2.delete(int0)                                                       # STEP 85
avl0.delete(int0)                                                       # STEP 86
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x101ee6950>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE 2
int0 = 17                                                                # STEP 0
int2 = 16                                                                # STEP 1
int3 = 10                                                                # STEP 2
int1 = 19                                                                # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
avl1.insert(int1)                                                        # STEP 5
avl1.insert(int2)                                                        # STEP 6
avl1.delete(int3)                                                        # STEP 7
avl1 == avl1                                                             # STEP 8
avl1.delete(int3)                                                        # STEP 9
avl1.delete(int2)                                                       # STEP 10
result = avl1.find(int3)                                                # STEP 11
result = avl1.inorder()                                                 # STEP 12
avl1.insert(int1)                                                       # STEP 13
result = avl1.find(int2)                                                # STEP 14
int1 = 19                                                               # STEP 15
int2 = 20                                                               # STEP 16
int3 = 7                                                                # STEP 17
avl1.delete(int1)                                                       # STEP 18
avl1.insert(int2)                                                       # STEP 19
avl1.insert(int3)                                                       # STEP 20
avl1.insert(int3)                                                       # STEP 21
result = avl1.inorder()                                                 # STEP 22
int3 = 20                                                               # STEP 23
result = avl1.inorder()                                                 # STEP 24
avl1.insert(int0)                                                       # STEP 25
avl1.delete(int1)                                                       # STEP 26
avl0 = avl.AVLTree()                                                    # STEP 27
avl0.insert(int1)                                                       # STEP 28
avl0.insert(int3)                                                       # STEP 29
int1 = 6                                                                # STEP 30
avl1 == avl0                                                            # STEP 31
avl1.delete(int2)                                                       # STEP 32
avl0.delete(int3)                                                       # STEP 33
avl1.insert(int0)                                                       # STEP 34
avl0.insert(int3)                                                       # STEP 35
avl1.delete(int0)                                                       # STEP 36
result = avl1.find(int0)                                                # STEP 37
int2 = 5                                                                # STEP 38
avl1.insert(int0)                                                       # STEP 39
avl0.delete(int1)                                                       # STEP 40
avl0.insert(int1)                                                       # STEP 41
avl0.delete(int1)                                                       # STEP 42
avl0.insert(int2)                                                       # STEP 43
avl0.delete(int3)                                                       # STEP 44
avl0.delete(int1)                                                       # STEP 45
avl0.delete(int1)                                                       # STEP 46
avl1.insert(int3)                                                       # STEP 47
int3 = 9                                                                # STEP 48
result = avl1.inorder()                                                 # STEP 49
result = avl0.inorder()                                                 # STEP 50
avl1.delete(int1)                                                       # STEP 51
int0 = 5                                                                # STEP 52
avl1 == avl0                                                            # STEP 53
avl0.insert(int1)                                                       # STEP 54
avl1.insert(int1)                                                       # STEP 55
avl0.insert(int2)                                                       # STEP 56
result = avl0.inorder()                                                 # STEP 57
avl0.delete(int1)                                                       # STEP 58
avl0.delete(int1)                                                       # STEP 59
int1 = 20                                                               # STEP 60
avl1.delete(int0)                                                       # STEP 61
avl0.delete(int1)                                                       # STEP 62
int0 = 12                                                               # STEP 63
avl0.insert(int2)                                                       # STEP 64
result = avl0.inorder()                                                 # STEP 65
avl1.insert(int1)                                                       # STEP 66
int2 = 19                                                               # STEP 67
avl1.insert(int2)                                                       # STEP 68
int1 = 9                                                                # STEP 69
int2 = 1                                                                # STEP 70
avl2 = avl.AVLTree()                                                    # STEP 71
avl0.insert(int2)                                                       # STEP 72
avl2.insert(int1)                                                       # STEP 73
avl0.delete(int2)                                                       # STEP 74
result = avl0.find(int2)                                                # STEP 75
avl1.insert(int3)                                                       # STEP 76
avl1.display()                                                          # STEP 77
int1 = 13                                                               # STEP 78
int3 = 10                                                               # STEP 79
avl1.delete(int0)                                                       # STEP 80
avl0.delete(int1)                                                       # STEP 81
avl1.delete(int0)                                                       # STEP 82
result = avl1.inorder()                                                 # STEP 83
avl1.display()                                                          # STEP 84
avl1.insert(int2)                                                       # STEP 85
avl0.insert(int2)                                                       # STEP 86
int1 = 9                                                                # STEP 87
avl1.delete(int3)                                                       # STEP 88
avl2.insert(int2)                                                       # STEP 89
avl0.insert(int1)                                                       # STEP 90
avl2.insert(int2)                                                       # STEP 91
result = avl1.inorder()                                                 # STEP 92
avl2.insert(int2)                                                       # STEP 93
avl2.insert(int3)                                                       # STEP 94
avl1.insert(int0)                                                       # STEP 95
avl0.delete(int2)                                                       # STEP 96
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102d6eab8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
220 BRANCHES COVERED
164 STATEMENTS COVERED

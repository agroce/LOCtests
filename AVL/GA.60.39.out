Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.14259.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  11 [2:0]
-- < 3 [1:0]
---- < 2 [0:0] L
---- > 10 [0:0] L
-- > 16 [1:-1]
---- > 19 [0:0] L
set([2, 3, 10, 11, 16, 19])
TEST #3 STEP #86 (0:00:30.103282) Sun Apr 30 03:41:01 2017 [ 149 stmts 200 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x101e7e128>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
Original test has 93 steps

SAVING TEST AS failure.14259.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 4                                                                 # STEP 0
ACTION: int2 = 4 
int2 = None : <type 'NoneType'>
=> int2 = 4 : <type 'int'>
==================================================
int1 = 19                                                                # STEP 1
ACTION: int1 = 19 
int1 = None : <type 'NoneType'>
=> int1 = 19 : <type 'int'>
==================================================
int0 = 8                                                                 # STEP 2
ACTION: int0 = 8 
int0 = None : <type 'NoneType'>
=> int0 = 8 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 3
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x101ea6098> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int3 = 3                                                                 # STEP 4
ACTION: int3 = 3 
int3 = None : <type 'NoneType'>
=> int3 = 3 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 5
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x103ffc050> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
result = avl1.find(int0)                                                 # STEP 6
ACTION: result = avl1.find(int0) 
int0 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101ea6098> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
int0 = 14                                                                # STEP 7
ACTION: int0 = 14 
int0 = 8 : <type 'int'>
=> int0 = 14 : <type 'int'>
==================================================
avl0.delete(int1)                                                        # STEP 8
ACTION: avl0.delete(int1) 
int1 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103ffc050> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl1.insert(int3)                                                        # STEP 9
ACTION: avl1.insert(int3) 
int3 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101ea6098> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([3]) : <type 'set'>
==================================================
int3 = 15                                                               # STEP 10
ACTION: int3 = 15 
int3 = 3 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 11
ACTION: avl0.insert(int2) 
int2 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103ffc050> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([4]) : <type 'set'>
==================================================
int1 = 11                                                               # STEP 12
ACTION: int1 = 11 
int1 = 19 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
int2 = 7                                                                # STEP 13
ACTION: int2 = 7 
int2 = 4 : <type 'int'>
=> int2 = 7 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 14
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x101ea6098> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl0.delete(int1)                                                       # STEP 15
ACTION: avl0.delete(int1) 
int1 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103ffc050> : <type 'instance'>
avl_REF0 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int1 = 2                                                                # STEP 16
ACTION: int1 = 2 
int1 = 11 : <type 'int'>
=> int1 = 2 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 17
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x101ea6098> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
result = avl0.find(int1)                                                # STEP 18
ACTION: result = avl0.find(int1) 
int1 = 2 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103ffc050> : <type 'instance'>
avl_REF0 = set([4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
int1 = 12                                                               # STEP 19
ACTION: int1 = 12 
int1 = 2 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
result = avl0.find(int3)                                                # STEP 20
ACTION: result = avl0.find(int3) 
int3 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103ffc050> : <type 'instance'>
avl_REF0 = set([4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
int3 = 16                                                               # STEP 21
ACTION: int3 = 16 
int3 = 15 : <type 'int'>
=> int3 = 16 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 22
ACTION: avl1.insert(int1) 
int1 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101ea6098> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([3, 12]) : <type 'set'>
==================================================
int1 = 11                                                               # STEP 23
ACTION: int1 = 11 
int1 = 12 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 24
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x101ea6098> : <type 'instance'>
avl_REF1 = set([3, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
result = avl1.find(int1)                                                # STEP 25
ACTION: result = avl1.find(int1) 
int1 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101ea6098> : <type 'instance'>
avl_REF1 = set([3, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
result = avl0.find(int0)                                                # STEP 26
ACTION: result = avl0.find(int0) 
int0 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103ffc050> : <type 'instance'>
avl_REF0 = set([4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
avl2 = avl.AVLTree()                                                    # STEP 27
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x103f24bd8> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl0.find(int1)                                                # STEP 28
ACTION: result = avl0.find(int1) 
int1 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103ffc050> : <type 'instance'>
avl_REF0 = set([4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
int1 = 13                                                               # STEP 29
ACTION: int1 = 13 
int1 = 11 : <type 'int'>
=> int1 = 13 : <type 'int'>
==================================================
result = avl2.find(int1)                                                # STEP 30
ACTION: result = avl2.find(int1) 
int1 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103f24bd8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int0 = 3                                                                # STEP 31
ACTION: int0 = 3 
int0 = 14 : <type 'int'>
=> int0 = 3 : <type 'int'>
==================================================
int1 = 20                                                               # STEP 32
ACTION: int1 = 20 
int1 = 13 : <type 'int'>
=> int1 = 20 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 33
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x101ea6098> : <type 'instance'>
avl_REF1 = set([3, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl2.delete(int2)                                                       # STEP 34
ACTION: avl2.delete(int2) 
int2 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103f24bd8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
result = avl2.find(int0)                                                # STEP 35
ACTION: result = avl2.find(int0) 
int0 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103f24bd8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
int2 = 8                                                                # STEP 36
ACTION: int2 = 8 
int2 = 7 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 37
ACTION: avl2.insert(int3) 
int3 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103f24bd8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([16]) : <type 'set'>
==================================================
int3 = 4                                                                # STEP 38
ACTION: int3 = 4 
int3 = 16 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
int0 = 19                                                               # STEP 39
ACTION: int0 = 19 
int0 = 3 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 40
ACTION: avl1.insert(int1) 
int1 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101ea6098> : <type 'instance'>
avl_REF1 = set([3, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([20, 3, 12]) : <type 'set'>
==================================================
int1 = 9                                                                # STEP 41
ACTION: int1 = 9 
int1 = 20 : <type 'int'>
=> int1 = 9 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 42
ACTION: avl1.delete(int3) 
int3 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101ea6098> : <type 'instance'>
avl_REF1 = set([20, 3, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl2.insert(int1)                                                       # STEP 43
ACTION: avl2.insert(int1) 
int1 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103f24bd8> : <type 'instance'>
avl_REF2 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([16, 9]) : <type 'set'>
==================================================
int1 = 11                                                               # STEP 44
ACTION: int1 = 11 
int1 = 9 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
int3 = 6                                                                # STEP 45
ACTION: int3 = 6 
int3 = 4 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
avl1 == avl0                                                            # STEP 46
ACTION: avl1 == avl0 
avl1 = <avlbug2.AVLTree instance at 0x101ea6098> : <type 'instance'>
avl0 = <avlbug2.AVLTree instance at 0x103ffc050> : <type 'instance'>
avl_REF1 = set([20, 3, 12]) : <type 'set'>
avl_REF0 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
avl2.delete(int3)                                                       # STEP 47
ACTION: avl2.delete(int3) 
int3 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103f24bd8> : <type 'instance'>
avl_REF2 = set([16, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl0 == avl0                                                            # STEP 48
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x103ffc050> : <type 'instance'>
avl_REF0 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl2.delete(int1)                                                       # STEP 49
ACTION: avl2.delete(int1) 
int1 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103f24bd8> : <type 'instance'>
avl_REF2 = set([16, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2 == avl2                                                            # STEP 50
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x103f24bd8> : <type 'instance'>
avl_REF2 = set([16, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl1.delete(int0)                                                       # STEP 51
ACTION: avl1.delete(int0) 
int0 = 19 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101ea6098> : <type 'instance'>
avl_REF1 = set([20, 3, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int0 = 5                                                                # STEP 52
ACTION: int0 = 5 
int0 = 19 : <type 'int'>
=> int0 = 5 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 53
ACTION: avl2.insert(int3) 
int3 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103f24bd8> : <type 'instance'>
avl_REF2 = set([16, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([16, 9, 6]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 54
ACTION: avl1.insert(int1) 
int1 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101ea6098> : <type 'instance'>
avl_REF1 = set([20, 3, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([11, 20, 3, 12]) : <type 'set'>
==================================================
int3 = 17                                                               # STEP 55
ACTION: int3 = 17 
int3 = 6 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 56
ACTION: avl2.insert(int0) 
int0 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103f24bd8> : <type 'instance'>
avl_REF2 = set([16, 9, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([16, 9, 5, 6]) : <type 'set'>
==================================================
int1 = 5                                                                # STEP 57
ACTION: int1 = 5 
int1 = 11 : <type 'int'>
=> int1 = 5 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 58
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x101ea6098> : <type 'instance'>
avl_REF1 = set([11, 20, 3, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1 = avl.AVLTree()                                                    # STEP 59
ACTION: avl1 = avl.AVLTree() 
avl1 = <avlbug2.AVLTree instance at 0x101ea6098> : <type 'instance'>
avl_REF1 = set([11, 20, 3, 12]) : <type 'set'>
=> avl1 = <avlbug2.AVLTree instance at 0x10385b3f8> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 60
ACTION: avl2.insert(int2) 
int2 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103f24bd8> : <type 'instance'>
avl_REF2 = set([16, 9, 5, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([16, 9, 5, 6, 8]) : <type 'set'>
==================================================
result = avl1.find(int0)                                                # STEP 61
ACTION: result = avl1.find(int0) 
int0 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10385b3f8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
int0 = 17                                                               # STEP 62
ACTION: int0 = 17 
int0 = 5 : <type 'int'>
=> int0 = 17 : <type 'int'>
==================================================
result = avl1.find(int1)                                                # STEP 63
ACTION: result = avl1.find(int1) 
int1 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10385b3f8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl1.insert(int2)                                                       # STEP 64
ACTION: avl1.insert(int2) 
int2 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10385b3f8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([8]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 65
ACTION: avl2.delete(int1) 
int1 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103f24bd8> : <type 'instance'>
avl_REF2 = set([16, 9, 5, 6, 8]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([16, 9, 6, 8]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 66
ACTION: avl0.insert(int1) 
int1 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103ffc050> : <type 'instance'>
avl_REF0 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([4, 5]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 67
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x103f24bd8> : <type 'instance'>
avl_REF2 = set([16, 9, 6, 8]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int2)                                                       # STEP 68
ACTION: avl2.insert(int2) 
int2 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103f24bd8> : <type 'instance'>
avl_REF2 = set([16, 9, 6, 8]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
result = avl1.find(int3)                                                # STEP 69
ACTION: result = avl1.find(int3) 
int3 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10385b3f8> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
int3 = 10                                                               # STEP 70
ACTION: int3 = 10 
int3 = 17 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
result = avl1.find(int1)                                                # STEP 71
ACTION: result = avl1.find(int1) 
int1 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10385b3f8> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int1 = 5                                                                # STEP 72
ACTION: int1 = 5 
int1 = 5 : <type 'int'>
==================================================
result = avl2.find(int0)                                                # STEP 73
ACTION: result = avl2.find(int0) 
int0 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103f24bd8> : <type 'instance'>
avl_REF2 = set([16, 9, 6, 8]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
int0 = 13                                                               # STEP 74
ACTION: int0 = 13 
int0 = 17 : <type 'int'>
=> int0 = 13 : <type 'int'>
==================================================
int2 = 13                                                               # STEP 75
ACTION: int2 = 13 
int2 = 8 : <type 'int'>
=> int2 = 13 : <type 'int'>
==================================================
result = avl2.find(int1)                                                # STEP 76
ACTION: result = avl2.find(int1) 
int1 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103f24bd8> : <type 'instance'>
avl_REF2 = set([16, 9, 6, 8]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl0.insert(int1)                                                       # STEP 77
ACTION: avl0.insert(int1) 
int1 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103ffc050> : <type 'instance'>
avl_REF0 = set([4, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl1.insert(int0)                                                       # STEP 78
ACTION: avl1.insert(int0) 
int0 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10385b3f8> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([8, 13]) : <type 'set'>
==================================================
int0 = 17                                                               # STEP 79
ACTION: int0 = 17 
int0 = 13 : <type 'int'>
=> int0 = 17 : <type 'int'>
==================================================
int1 = 8                                                                # STEP 80
ACTION: int1 = 8 
int1 = 5 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 81
ACTION: avl0.delete(int2) 
int2 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103ffc050> : <type 'instance'>
avl_REF0 = set([4, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
result = avl2.find(int1)                                                # STEP 82
ACTION: result = avl2.find(int1) 
int1 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103f24bd8> : <type 'instance'>
avl_REF2 = set([16, 9, 6, 8]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int1 = 11                                                               # STEP 83
ACTION: int1 = 11 
int1 = 8 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
int2 = 7                                                                # STEP 84
ACTION: int2 = 7 
int2 = 13 : <type 'int'>
=> int2 = 7 : <type 'int'>
==================================================
avl2 == avl1                                                            # STEP 85
ACTION: avl2 == avl1 
avl2 = <avlbug2.AVLTree instance at 0x103f24bd8> : <type 'instance'>
avl1 = <avlbug2.AVLTree instance at 0x10385b3f8> : <type 'instance'>
avl_REF2 = set([16, 9, 6, 8]) : <type 'set'>
avl_REF1 = set([8, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
avl0 == avl1                                                            # STEP 86
ACTION: avl0 == avl1 
avl0 = <avlbug2.AVLTree instance at 0x103ffc050> : <type 'instance'>
avl1 = <avlbug2.AVLTree instance at 0x10385b3f8> : <type 'instance'>
avl_REF0 = set([4, 5]) : <type 'set'>
avl_REF1 = set([8, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF1 
==================================================
result = avl1.inorder()                                                 # STEP 87
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x10385b3f8> : <type 'instance'>
avl_REF1 = set([8, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.delete(int3)                                                       # STEP 88
ACTION: avl1.delete(int3) 
int3 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10385b3f8> : <type 'instance'>
avl_REF1 = set([8, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int3 = 9                                                                # STEP 89
ACTION: int3 = 9 
int3 = 10 : <type 'int'>
=> int3 = 9 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 90
ACTION: avl1.delete(int0) 
int0 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10385b3f8> : <type 'instance'>
avl_REF1 = set([8, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int0 = 5                                                                # STEP 91
ACTION: int0 = 5 
int0 = 17 : <type 'int'>
=> int0 = 5 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 92
ACTION: avl2.delete(int3) 
int3 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103f24bd8> : <type 'instance'>
avl_REF2 = set([16, 9, 6, 8]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([16, 6, 8]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x101f813f8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 84
STOPPING TESTING DUE TO TIMEOUT
8.63952333664 PERCENT COVERED
60.2468309402 TOTAL RUNTIME
5 EXECUTED
477 TOTAL TEST OPERATIONS
24.9973218441 TIME SPENT EXECUTING TEST OPERATIONS
0.0184543132782 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
25.2121374607 TIME SPENT CHECKING PROPERTIES
50.2094593048 TOTAL TIME SPENT RUNNING SUT
0.00402998924255 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int2 = 4                                                                 # STEP 0
int1 = 19                                                                # STEP 1
int0 = 8                                                                 # STEP 2
avl1 = avl.AVLTree()                                                     # STEP 3
int3 = 3                                                                 # STEP 4
avl0 = avl.AVLTree()                                                     # STEP 5
result = avl1.find(int0)                                                 # STEP 6
int0 = 14                                                                # STEP 7
avl0.delete(int1)                                                        # STEP 8
avl1.insert(int3)                                                        # STEP 9
int3 = 15                                                               # STEP 10
avl0.insert(int2)                                                       # STEP 11
int1 = 11                                                               # STEP 12
int2 = 7                                                                # STEP 13
result = avl1.inorder()                                                 # STEP 14
avl0.delete(int1)                                                       # STEP 15
int1 = 2                                                                # STEP 16
result = avl1.inorder()                                                 # STEP 17
result = avl0.find(int1)                                                # STEP 18
int1 = 12                                                               # STEP 19
result = avl0.find(int3)                                                # STEP 20
int3 = 16                                                               # STEP 21
avl1.insert(int1)                                                       # STEP 22
int1 = 11                                                               # STEP 23
avl1 == avl1                                                            # STEP 24
result = avl1.find(int1)                                                # STEP 25
result = avl0.find(int0)                                                # STEP 26
avl2 = avl.AVLTree()                                                    # STEP 27
result = avl0.find(int1)                                                # STEP 28
int1 = 13                                                               # STEP 29
result = avl2.find(int1)                                                # STEP 30
int0 = 3                                                                # STEP 31
int1 = 20                                                               # STEP 32
result = avl1.inorder()                                                 # STEP 33
avl2.delete(int2)                                                       # STEP 34
result = avl2.find(int0)                                                # STEP 35
int2 = 8                                                                # STEP 36
avl2.insert(int3)                                                       # STEP 37
int3 = 4                                                                # STEP 38
int0 = 19                                                               # STEP 39
avl1.insert(int1)                                                       # STEP 40
int1 = 9                                                                # STEP 41
avl1.delete(int3)                                                       # STEP 42
avl2.insert(int1)                                                       # STEP 43
int1 = 11                                                               # STEP 44
int3 = 6                                                                # STEP 45
avl1 == avl0                                                            # STEP 46
avl2.delete(int3)                                                       # STEP 47
avl0 == avl0                                                            # STEP 48
avl2.delete(int1)                                                       # STEP 49
avl2 == avl2                                                            # STEP 50
avl1.delete(int0)                                                       # STEP 51
int0 = 5                                                                # STEP 52
avl2.insert(int3)                                                       # STEP 53
avl1.insert(int1)                                                       # STEP 54
int3 = 17                                                               # STEP 55
avl2.insert(int0)                                                       # STEP 56
int1 = 5                                                                # STEP 57
avl1 == avl1                                                            # STEP 58
avl1 = avl.AVLTree()                                                    # STEP 59
avl2.insert(int2)                                                       # STEP 60
result = avl1.find(int0)                                                # STEP 61
int0 = 17                                                               # STEP 62
result = avl1.find(int1)                                                # STEP 63
avl1.insert(int2)                                                       # STEP 64
avl2.delete(int1)                                                       # STEP 65
avl0.insert(int1)                                                       # STEP 66
result = avl2.inorder()                                                 # STEP 67
avl2.insert(int2)                                                       # STEP 68
result = avl1.find(int3)                                                # STEP 69
int3 = 10                                                               # STEP 70
result = avl1.find(int1)                                                # STEP 71
int1 = 5                                                                # STEP 72
result = avl2.find(int0)                                                # STEP 73
int0 = 13                                                               # STEP 74
int2 = 13                                                               # STEP 75
result = avl2.find(int1)                                                # STEP 76
avl0.insert(int1)                                                       # STEP 77
avl1.insert(int0)                                                       # STEP 78
int0 = 17                                                               # STEP 79
int1 = 8                                                                # STEP 80
avl0.delete(int2)                                                       # STEP 81
result = avl2.find(int1)                                                # STEP 82
int1 = 11                                                               # STEP 83
int2 = 7                                                                # STEP 84
avl2 == avl1                                                            # STEP 85
avl0 == avl1                                                            # STEP 86
result = avl1.inorder()                                                 # STEP 87
avl1.delete(int3)                                                       # STEP 88
int3 = 9                                                                # STEP 89
avl1.delete(int0)                                                       # STEP 90
int0 = 5                                                                # STEP 91
avl2.delete(int3)                                                       # STEP 92
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x101f813f8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
216 BRANCHES COVERED
162 STATEMENTS COVERED

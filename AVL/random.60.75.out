Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.686.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  10 [3:-1]
-- < 7 [1:0]
---- < 3 [0:0] L
---- > 8 [0:0] L
-- > 16 [2:1]
---- < 12 [1:-1]
------ > 14 [0:0] L
---- > 19 [0:0] L
set([3, 7, 8, 10, 12, 14, 16, 19])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103a48320>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
Original test has 93 steps

SAVING TEST AS failure.686.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 18                                                                # STEP 0
ACTION: int2 = 18 
int2 = None : <type 'NoneType'>
=> int2 = 18 : <type 'int'>
==================================================
int3 = 20                                                                # STEP 1
ACTION: int3 = 20 
int3 = None : <type 'NoneType'>
=> int3 = 20 : <type 'int'>
==================================================
int1 = 2                                                                 # STEP 2
ACTION: int1 = 2 
int1 = None : <type 'NoneType'>
=> int1 = 2 : <type 'int'>
==================================================
int0 = 13                                                                # STEP 3
ACTION: int0 = 13 
int0 = None : <type 'NoneType'>
=> int0 = 13 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x103a46248> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl2.find(int3)                                                 # STEP 5
ACTION: result = avl2.find(int3) 
int3 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a46248> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
int3 = 1                                                                 # STEP 6
ACTION: int3 = 1 
int3 = 20 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
avl2.delete(int0)                                                        # STEP 7
ACTION: avl2.delete(int0) 
int0 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a46248> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl0 = avl.AVLTree()                                                     # STEP 8
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x103b0a680> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int0 = 9                                                                 # STEP 9
ACTION: int0 = 9 
int0 = 13 : <type 'int'>
=> int0 = 9 : <type 'int'>
==================================================
result = avl2.find(int3)                                                # STEP 10
ACTION: result = avl2.find(int3) 
int3 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a46248> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl0.insert(int2)                                                       # STEP 11
ACTION: avl0.insert(int2) 
int2 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103b0a680> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([18]) : <type 'set'>
==================================================
result = avl2.find(int0)                                                # STEP 12
ACTION: result = avl2.find(int0) 
int0 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a46248> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
int2 = 4                                                                # STEP 13
ACTION: int2 = 4 
int2 = 18 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
int3 = 14                                                               # STEP 14
ACTION: int3 = 14 
int3 = 1 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 15
ACTION: avl0.delete(int0) 
int0 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103b0a680> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int0 = 2                                                                # STEP 16
ACTION: int0 = 2 
int0 = 9 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 17
ACTION: avl2.delete(int0) 
int0 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a46248> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl0.delete(int2)                                                       # STEP 18
ACTION: avl0.delete(int2) 
int2 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103b0a680> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int2 = 15                                                               # STEP 19
ACTION: int2 = 15 
int2 = 4 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 20
ACTION: avl2.delete(int1) 
int1 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a46248> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int1 = 17                                                               # STEP 21
ACTION: int1 = 17 
int1 = 2 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
int0 = 6                                                                # STEP 22
ACTION: int0 = 6 
int0 = 2 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 23
ACTION: avl2.delete(int3) 
int3 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a46248> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl0.insert(int0)                                                       # STEP 24
ACTION: avl0.insert(int0) 
int0 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103b0a680> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([18, 6]) : <type 'set'>
==================================================
int3 = 7                                                                # STEP 25
ACTION: int3 = 7 
int3 = 14 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
int0 = 15                                                               # STEP 26
ACTION: int0 = 15 
int0 = 6 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
result = avl2.find(int0)                                                # STEP 27
ACTION: result = avl2.find(int0) 
int0 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a46248> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
result = avl2.find(int0)                                                # STEP 28
ACTION: result = avl2.find(int0) 
int0 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a46248> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
int0 = 8                                                                # STEP 29
ACTION: int0 = 8 
int0 = 15 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 30
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x103a46248> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl0.delete(int3)                                                       # STEP 31
ACTION: avl0.delete(int3) 
int3 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103b0a680> : <type 'instance'>
avl_REF0 = set([18, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl2.delete(int0)                                                       # STEP 32
ACTION: avl2.delete(int0) 
int0 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a46248> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int3 = 11                                                               # STEP 33
ACTION: int3 = 11 
int3 = 7 : <type 'int'>
=> int3 = 11 : <type 'int'>
==================================================
int0 = 2                                                                # STEP 34
ACTION: int0 = 2 
int0 = 8 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 35
ACTION: avl0.delete(int3) 
int3 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103b0a680> : <type 'instance'>
avl_REF0 = set([18, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl2.insert(int0)                                                       # STEP 36
ACTION: avl2.insert(int0) 
int0 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a46248> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([2]) : <type 'set'>
==================================================
result = avl0.find(int2)                                                # STEP 37
ACTION: result = avl0.find(int2) 
int2 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103b0a680> : <type 'instance'>
avl_REF0 = set([18, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl0.insert(int0)                                                       # STEP 38
ACTION: avl0.insert(int0) 
int0 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103b0a680> : <type 'instance'>
avl_REF0 = set([18, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([18, 2, 6]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 39
ACTION: avl0.delete(int0) 
int0 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103b0a680> : <type 'instance'>
avl_REF0 = set([18, 2, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([18, 6]) : <type 'set'>
==================================================
int2 = 12                                                               # STEP 40
ACTION: int2 = 12 
int2 = 15 : <type 'int'>
=> int2 = 12 : <type 'int'>
==================================================
avl2 == avl0                                                            # STEP 41
ACTION: avl2 == avl0 
avl2 = <avl.AVLTree instance at 0x103a46248> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x103b0a680> : <type 'instance'>
avl_REF2 = set([2]) : <type 'set'>
avl_REF0 = set([18, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF0 
==================================================
result = avl0.find(int1)                                                # STEP 42
ACTION: result = avl0.find(int1) 
int1 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103b0a680> : <type 'instance'>
avl_REF0 = set([18, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
int1 = 18                                                               # STEP 43
ACTION: int1 = 18 
int1 = 17 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
int3 = 6                                                                # STEP 44
ACTION: int3 = 6 
int3 = 11 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 45
ACTION: avl2.insert(int1) 
int1 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a46248> : <type 'instance'>
avl_REF2 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([2, 18]) : <type 'set'>
==================================================
int1 = 1                                                                # STEP 46
ACTION: int1 = 1 
int1 = 18 : <type 'int'>
=> int1 = 1 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 47
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x103b0a680> : <type 'instance'>
avl_REF0 = set([18, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
result = avl0.find(int2)                                                # STEP 48
ACTION: result = avl0.find(int2) 
int2 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103b0a680> : <type 'instance'>
avl_REF0 = set([18, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl0.insert(int0)                                                       # STEP 49
ACTION: avl0.insert(int0) 
int0 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103b0a680> : <type 'instance'>
avl_REF0 = set([18, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([18, 2, 6]) : <type 'set'>
==================================================
int2 = 2                                                                # STEP 50
ACTION: int2 = 2 
int2 = 12 : <type 'int'>
=> int2 = 2 : <type 'int'>
==================================================
int0 = 20                                                               # STEP 51
ACTION: int0 = 20 
int0 = 2 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
avl0 == avl0                                                            # STEP 52
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x103b0a680> : <type 'instance'>
avl_REF0 = set([18, 2, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl0.insert(int0)                                                       # STEP 53
ACTION: avl0.insert(int0) 
int0 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103b0a680> : <type 'instance'>
avl_REF0 = set([18, 2, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([18, 20, 2, 6]) : <type 'set'>
==================================================
int0 = 3                                                                # STEP 54
ACTION: int0 = 3 
int0 = 20 : <type 'int'>
=> int0 = 3 : <type 'int'>
==================================================
result = avl2.find(int2)                                                # STEP 55
ACTION: result = avl2.find(int2) 
int2 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a46248> : <type 'instance'>
avl_REF2 = set([2, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl2.insert(int1)                                                       # STEP 56
ACTION: avl2.insert(int1) 
int1 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a46248> : <type 'instance'>
avl_REF2 = set([2, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([1, 2, 18]) : <type 'set'>
==================================================
int2 = 6                                                                # STEP 57
ACTION: int2 = 6 
int2 = 2 : <type 'int'>
=> int2 = 6 : <type 'int'>
==================================================
int1 = 6                                                                # STEP 58
ACTION: int1 = 6 
int1 = 1 : <type 'int'>
=> int1 = 6 : <type 'int'>
==================================================
avl0 == avl2                                                            # STEP 59
ACTION: avl0 == avl2 
avl0 = <avl.AVLTree instance at 0x103b0a680> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x103a46248> : <type 'instance'>
avl_REF0 = set([18, 20, 2, 6]) : <type 'set'>
avl_REF2 = set([1, 2, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
avl1 = avl.AVLTree()                                                    # STEP 60
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x103b0e2d8> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 61
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x103b0e2d8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl2.insert(int0)                                                       # STEP 62
ACTION: avl2.insert(int0) 
int0 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a46248> : <type 'instance'>
avl_REF2 = set([1, 2, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([1, 2, 3, 18]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 63
ACTION: avl1.insert(int3) 
int3 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103b0e2d8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([6]) : <type 'set'>
==================================================
int3 = 4                                                                # STEP 64
ACTION: int3 = 4 
int3 = 6 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 65
ACTION: avl2.delete(int2) 
int2 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a46248> : <type 'instance'>
avl_REF2 = set([1, 2, 3, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl0 == avl1                                                            # STEP 66
ACTION: avl0 == avl1 
avl0 = <avl.AVLTree instance at 0x103b0a680> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x103b0e2d8> : <type 'instance'>
avl_REF0 = set([18, 20, 2, 6]) : <type 'set'>
avl_REF1 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF1 
==================================================
int2 = 15                                                               # STEP 67
ACTION: int2 = 15 
int2 = 6 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
int0 = 8                                                                # STEP 68
ACTION: int0 = 8 
int0 = 3 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 69
ACTION: avl2.delete(int1) 
int1 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a46248> : <type 'instance'>
avl_REF2 = set([1, 2, 3, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
result = avl2.find(int2)                                                # STEP 70
ACTION: result = avl2.find(int2) 
int2 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a46248> : <type 'instance'>
avl_REF2 = set([1, 2, 3, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
result = avl2.find(int0)                                                # STEP 71
ACTION: result = avl2.find(int0) 
int0 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a46248> : <type 'instance'>
avl_REF2 = set([1, 2, 3, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
int1 = 20                                                               # STEP 72
ACTION: int1 = 20 
int1 = 6 : <type 'int'>
=> int1 = 20 : <type 'int'>
==================================================
avl2 == avl2                                                            # STEP 73
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x103a46248> : <type 'instance'>
avl_REF2 = set([1, 2, 3, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
int0 = 11                                                               # STEP 74
ACTION: int0 = 11 
int0 = 8 : <type 'int'>
=> int0 = 11 : <type 'int'>
==================================================
int2 = 8                                                                # STEP 75
ACTION: int2 = 8 
int2 = 15 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 76
ACTION: avl1.delete(int1) 
int1 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103b0e2d8> : <type 'instance'>
avl_REF1 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int1 = 18                                                               # STEP 77
ACTION: int1 = 18 
int1 = 20 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 78
ACTION: avl0.insert(int3) 
int3 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103b0a680> : <type 'instance'>
avl_REF0 = set([18, 20, 2, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([4, 18, 20, 2, 6]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 79
ACTION: avl2.delete(int3) 
int3 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a46248> : <type 'instance'>
avl_REF2 = set([1, 2, 3, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int3 = 2                                                                # STEP 80
ACTION: int3 = 2 
int3 = 4 : <type 'int'>
=> int3 = 2 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 81
ACTION: avl0.insert(int2) 
int2 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103b0a680> : <type 'instance'>
avl_REF0 = set([4, 18, 20, 2, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([2, 4, 6, 8, 18, 20]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 82
ACTION: avl0.delete(int2) 
int2 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103b0a680> : <type 'instance'>
avl_REF0 = set([2, 4, 6, 8, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([2, 4, 6, 18, 20]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 83
ACTION: avl0.insert(int0) 
int0 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103b0a680> : <type 'instance'>
avl_REF0 = set([2, 4, 6, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([2, 4, 6, 11, 18, 20]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 84
ACTION: avl1.delete(int1) 
int1 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103b0e2d8> : <type 'instance'>
avl_REF1 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl2.delete(int3)                                                       # STEP 85
ACTION: avl2.delete(int3) 
int3 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a46248> : <type 'instance'>
avl_REF2 = set([1, 2, 3, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([1, 3, 18]) : <type 'set'>
==================================================
int0 = 18                                                               # STEP 86
ACTION: int0 = 18 
int0 = 11 : <type 'int'>
=> int0 = 18 : <type 'int'>
==================================================
int3 = 14                                                               # STEP 87
ACTION: int3 = 14 
int3 = 2 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 88
ACTION: avl0.insert(int3) 
int3 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103b0a680> : <type 'instance'>
avl_REF0 = set([2, 4, 6, 11, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([2, 4, 6, 11, 14, 18, 20]) : <type 'set'>
==================================================
int3 = 16                                                               # STEP 89
ACTION: int3 = 16 
int3 = 14 : <type 'int'>
=> int3 = 16 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 90
ACTION: avl2.insert(int1) 
int1 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a46248> : <type 'instance'>
avl_REF2 = set([1, 3, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
int2 = 14                                                               # STEP 91
ACTION: int2 = 14 
int2 = 8 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 92
ACTION: avl0.delete(int0) 
int0 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103b0a680> : <type 'instance'>
avl_REF0 = set([2, 4, 6, 11, 14, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([2, 4, 6, 11, 14, 20]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105823098>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #4 STEP #0 (0:00:33.049888) Fri Apr 28 07:01:20 2017 [ 160 stmts 212 branches ]
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 23
STOPPING TESTING DUE TO TIMEOUT
8.44927044452 PERCENT COVERED
60.1755409241 TOTAL RUNTIME
7 EXECUTED
616 TOTAL TEST OPERATIONS
25.9181830883 TIME SPENT EXECUTING TEST OPERATIONS
0.0220210552216 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
26.1197605133 TIME SPENT CHECKING PROPERTIES
52.0379436016 TOTAL TIME SPENT RUNNING SUT
0.00416207313538 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int2 = 18                                                                # STEP 0
int3 = 20                                                                # STEP 1
int1 = 2                                                                 # STEP 2
int0 = 13                                                                # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
result = avl2.find(int3)                                                 # STEP 5
int3 = 1                                                                 # STEP 6
avl2.delete(int0)                                                        # STEP 7
avl0 = avl.AVLTree()                                                     # STEP 8
int0 = 9                                                                 # STEP 9
result = avl2.find(int3)                                                # STEP 10
avl0.insert(int2)                                                       # STEP 11
result = avl2.find(int0)                                                # STEP 12
int2 = 4                                                                # STEP 13
int3 = 14                                                               # STEP 14
avl0.delete(int0)                                                       # STEP 15
int0 = 2                                                                # STEP 16
avl2.delete(int0)                                                       # STEP 17
avl0.delete(int2)                                                       # STEP 18
int2 = 15                                                               # STEP 19
avl2.delete(int1)                                                       # STEP 20
int1 = 17                                                               # STEP 21
int0 = 6                                                                # STEP 22
avl2.delete(int3)                                                       # STEP 23
avl0.insert(int0)                                                       # STEP 24
int3 = 7                                                                # STEP 25
int0 = 15                                                               # STEP 26
result = avl2.find(int0)                                                # STEP 27
result = avl2.find(int0)                                                # STEP 28
int0 = 8                                                                # STEP 29
result = avl2.inorder()                                                 # STEP 30
avl0.delete(int3)                                                       # STEP 31
avl2.delete(int0)                                                       # STEP 32
int3 = 11                                                               # STEP 33
int0 = 2                                                                # STEP 34
avl0.delete(int3)                                                       # STEP 35
avl2.insert(int0)                                                       # STEP 36
result = avl0.find(int2)                                                # STEP 37
avl0.insert(int0)                                                       # STEP 38
avl0.delete(int0)                                                       # STEP 39
int2 = 12                                                               # STEP 40
avl2 == avl0                                                            # STEP 41
result = avl0.find(int1)                                                # STEP 42
int1 = 18                                                               # STEP 43
int3 = 6                                                                # STEP 44
avl2.insert(int1)                                                       # STEP 45
int1 = 1                                                                # STEP 46
result = avl0.inorder()                                                 # STEP 47
result = avl0.find(int2)                                                # STEP 48
avl0.insert(int0)                                                       # STEP 49
int2 = 2                                                                # STEP 50
int0 = 20                                                               # STEP 51
avl0 == avl0                                                            # STEP 52
avl0.insert(int0)                                                       # STEP 53
int0 = 3                                                                # STEP 54
result = avl2.find(int2)                                                # STEP 55
avl2.insert(int1)                                                       # STEP 56
int2 = 6                                                                # STEP 57
int1 = 6                                                                # STEP 58
avl0 == avl2                                                            # STEP 59
avl1 = avl.AVLTree()                                                    # STEP 60
result = avl1.inorder()                                                 # STEP 61
avl2.insert(int0)                                                       # STEP 62
avl1.insert(int3)                                                       # STEP 63
int3 = 4                                                                # STEP 64
avl2.delete(int2)                                                       # STEP 65
avl0 == avl1                                                            # STEP 66
int2 = 15                                                               # STEP 67
int0 = 8                                                                # STEP 68
avl2.delete(int1)                                                       # STEP 69
result = avl2.find(int2)                                                # STEP 70
result = avl2.find(int0)                                                # STEP 71
int1 = 20                                                               # STEP 72
avl2 == avl2                                                            # STEP 73
int0 = 11                                                               # STEP 74
int2 = 8                                                                # STEP 75
avl1.delete(int1)                                                       # STEP 76
int1 = 18                                                               # STEP 77
avl0.insert(int3)                                                       # STEP 78
avl2.delete(int3)                                                       # STEP 79
int3 = 2                                                                # STEP 80
avl0.insert(int2)                                                       # STEP 81
avl0.delete(int2)                                                       # STEP 82
avl0.insert(int0)                                                       # STEP 83
avl1.delete(int1)                                                       # STEP 84
avl2.delete(int3)                                                       # STEP 85
int0 = 18                                                               # STEP 86
int3 = 14                                                               # STEP 87
avl0.insert(int3)                                                       # STEP 88
int3 = 16                                                               # STEP 89
avl2.insert(int1)                                                       # STEP 90
int2 = 14                                                               # STEP 91
avl0.delete(int0)                                                       # STEP 92
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105823098>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
212 BRANCHES COVERED
160 STATEMENTS COVERED

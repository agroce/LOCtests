Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.99249.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105345cb0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
Original test has 53 steps

SAVING TEST AS failure.99249.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 13                                                                # STEP 0
ACTION: int0 = 13 
int0 = None : <type 'NoneType'>
=> int0 = 13 : <type 'int'>
==================================================
int2 = 7                                                                 # STEP 1
ACTION: int2 = 7 
int2 = None : <type 'NoneType'>
=> int2 = 7 : <type 'int'>
==================================================
int3 = 19                                                                # STEP 2
ACTION: int3 = 19 
int3 = None : <type 'NoneType'>
=> int3 = 19 : <type 'int'>
==================================================
int1 = 4                                                                 # STEP 3
ACTION: int1 = 4 
int1 = None : <type 'NoneType'>
=> int1 = 4 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 4
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x1052a1638> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.delete(int2)                                                        # STEP 5
ACTION: avl0.delete(int2) 
int2 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1052a1638> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.insert(int3)                                                        # STEP 6
ACTION: avl0.insert(int3) 
int3 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1052a1638> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([19]) : <type 'set'>
==================================================
avl0.insert(int1)                                                        # STEP 7
ACTION: avl0.insert(int1) 
int1 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1052a1638> : <type 'instance'>
avl_REF0 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([19, 4]) : <type 'set'>
==================================================
int3 = 12                                                                # STEP 8
ACTION: int3 = 12 
int3 = 19 : <type 'int'>
=> int3 = 12 : <type 'int'>
==================================================
avl0.insert(int3)                                                        # STEP 9
ACTION: avl0.insert(int3) 
int3 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1052a1638> : <type 'instance'>
avl_REF0 = set([19, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([12, 19, 4]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 10
ACTION: avl0.delete(int3) 
int3 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1052a1638> : <type 'instance'>
avl_REF0 = set([12, 19, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([19, 4]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 11
ACTION: avl0.delete(int3) 
int3 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1052a1638> : <type 'instance'>
avl_REF0 = set([19, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl2 = avl.AVLTree()                                                    # STEP 12
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x1056d3cf8> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int1 = 14                                                               # STEP 13
ACTION: int1 = 14 
int1 = 4 : <type 'int'>
=> int1 = 14 : <type 'int'>
==================================================
int2 = 4                                                                # STEP 14
ACTION: int2 = 4 
int2 = 7 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 15
ACTION: avl0.delete(int0) 
int0 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1052a1638> : <type 'instance'>
avl_REF0 = set([19, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.delete(int1)                                                       # STEP 16
ACTION: avl0.delete(int1) 
int1 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1052a1638> : <type 'instance'>
avl_REF0 = set([19, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl2.delete(int0)                                                       # STEP 17
ACTION: avl2.delete(int0) 
int0 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1056d3cf8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int1 = 10                                                               # STEP 18
ACTION: int1 = 10 
int1 = 14 : <type 'int'>
=> int1 = 10 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 19
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x1052a1638> : <type 'instance'>
avl_REF0 = set([19, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl2.delete(int1)                                                       # STEP 20
ACTION: avl2.delete(int1) 
int1 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1056d3cf8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int0)                                                       # STEP 21
ACTION: avl2.insert(int0) 
int0 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1056d3cf8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([13]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 22
ACTION: avl0.insert(int3) 
int3 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1052a1638> : <type 'instance'>
avl_REF0 = set([19, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([12, 19, 4]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 23
ACTION: avl0.insert(int2) 
int2 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1052a1638> : <type 'instance'>
avl_REF0 = set([12, 19, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl2.delete(int3)                                                       # STEP 24
ACTION: avl2.delete(int3) 
int3 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1056d3cf8> : <type 'instance'>
avl_REF2 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2 == avl0                                                            # STEP 25
ACTION: avl2 == avl0 
avl2 = <avl.AVLTree instance at 0x1056d3cf8> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x1052a1638> : <type 'instance'>
avl_REF2 = set([13]) : <type 'set'>
avl_REF0 = set([12, 19, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF0 
==================================================
int2 = 10                                                               # STEP 26
ACTION: int2 = 10 
int2 = 4 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 27
ACTION: avl2.insert(int2) 
int2 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1056d3cf8> : <type 'instance'>
avl_REF2 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([10, 13]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 28
ACTION: avl0.delete(int3) 
int3 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1052a1638> : <type 'instance'>
avl_REF0 = set([12, 19, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([19, 4]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 29
ACTION: avl0.delete(int1) 
int1 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1052a1638> : <type 'instance'>
avl_REF0 = set([19, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.delete(int2)                                                       # STEP 30
ACTION: avl0.delete(int2) 
int2 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1052a1638> : <type 'instance'>
avl_REF0 = set([19, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl2.insert(int1)                                                       # STEP 31
ACTION: avl2.insert(int1) 
int1 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1056d3cf8> : <type 'instance'>
avl_REF2 = set([10, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl0.insert(int1)                                                       # STEP 32
ACTION: avl0.insert(int1) 
int1 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1052a1638> : <type 'instance'>
avl_REF0 = set([19, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([10, 19, 4]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 33
ACTION: avl2.insert(int1) 
int1 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1056d3cf8> : <type 'instance'>
avl_REF2 = set([10, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl2.insert(int0)                                                       # STEP 34
ACTION: avl2.insert(int0) 
int0 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1056d3cf8> : <type 'instance'>
avl_REF2 = set([10, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl2 == avl2                                                            # STEP 35
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x1056d3cf8> : <type 'instance'>
avl_REF2 = set([10, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl0.delete(int1)                                                       # STEP 36
ACTION: avl0.delete(int1) 
int1 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1052a1638> : <type 'instance'>
avl_REF0 = set([10, 19, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([19, 4]) : <type 'set'>
==================================================
int3 = 3                                                                # STEP 37
ACTION: int3 = 3 
int3 = 12 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 38
ACTION: avl2.delete(int1) 
int1 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1056d3cf8> : <type 'instance'>
avl_REF2 = set([10, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([13]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 39
ACTION: avl2.delete(int3) 
int3 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1056d3cf8> : <type 'instance'>
avl_REF2 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl0.delete(int1)                                                       # STEP 40
ACTION: avl0.delete(int1) 
int1 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1052a1638> : <type 'instance'>
avl_REF0 = set([19, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int0 = 7                                                                # STEP 41
ACTION: int0 = 7 
int0 = 13 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 42
ACTION: avl2.delete(int2) 
int2 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1056d3cf8> : <type 'instance'>
avl_REF2 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int2 = 13                                                               # STEP 43
ACTION: int2 = 13 
int2 = 10 : <type 'int'>
=> int2 = 13 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 44
ACTION: avl0.insert(int2) 
int2 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1052a1638> : <type 'instance'>
avl_REF0 = set([19, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([19, 4, 13]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 45
ACTION: avl2.insert(int2) 
int2 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1056d3cf8> : <type 'instance'>
avl_REF2 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
result = avl0.inorder()                                                 # STEP 46
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x1052a1638> : <type 'instance'>
avl_REF0 = set([19, 4, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
result = avl2.find(int0)                                                # STEP 47
ACTION: result = avl2.find(int0) 
int0 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1056d3cf8> : <type 'instance'>
avl_REF2 = set([13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl2.delete(int0)                                                       # STEP 48
ACTION: avl2.delete(int0) 
int0 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1056d3cf8> : <type 'instance'>
avl_REF2 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.insert(int3)                                                       # STEP 49
ACTION: avl2.insert(int3) 
int3 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1056d3cf8> : <type 'instance'>
avl_REF2 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([3, 13]) : <type 'set'>
==================================================
int3 = 5                                                                # STEP 50
ACTION: int3 = 5 
int3 = 3 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 51
ACTION: avl0.insert(int0) 
int0 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1052a1638> : <type 'instance'>
avl_REF0 = set([19, 4, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([4, 7, 13, 19]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 52
ACTION: avl0.delete(int2) 
int2 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1052a1638> : <type 'instance'>
avl_REF0 = set([4, 7, 13, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([4, 7, 19]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1056df878>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10522d6c8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 27 steps

SAVING TEST AS failure.99249.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 3                                                                 # STEP 0
ACTION: int1 = 3 
int1 = None : <type 'NoneType'>
=> int1 = 3 : <type 'int'>
==================================================
int0 = 12                                                                # STEP 1
ACTION: int0 = 12 
int0 = None : <type 'NoneType'>
=> int0 = 12 : <type 'int'>
==================================================
int2 = 7                                                                 # STEP 2
ACTION: int2 = 7 
int2 = None : <type 'NoneType'>
=> int2 = 7 : <type 'int'>
==================================================
int3 = 2                                                                 # STEP 3
ACTION: int3 = 2 
int3 = None : <type 'NoneType'>
=> int3 = 2 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x10522de18> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int2)                                                        # STEP 5
ACTION: avl2.insert(int2) 
int2 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10522de18> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([7]) : <type 'set'>
==================================================
int2 = 19                                                                # STEP 6
ACTION: int2 = 19 
int2 = 7 : <type 'int'>
=> int2 = 19 : <type 'int'>
==================================================
avl2.insert(int3)                                                        # STEP 7
ACTION: avl2.insert(int3) 
int3 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10522de18> : <type 'instance'>
avl_REF2 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([2, 7]) : <type 'set'>
==================================================
avl2 == avl2                                                             # STEP 8
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x10522de18> : <type 'instance'>
avl_REF2 = set([2, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl2.delete(int3)                                                        # STEP 9
ACTION: avl2.delete(int3) 
int3 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10522de18> : <type 'instance'>
avl_REF2 = set([2, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([7]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 10
ACTION: avl2.insert(int2) 
int2 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10522de18> : <type 'instance'>
avl_REF2 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([19, 7]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 11
ACTION: avl2.delete(int3) 
int3 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10522de18> : <type 'instance'>
avl_REF2 = set([19, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.insert(int1)                                                       # STEP 12
ACTION: avl2.insert(int1) 
int1 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10522de18> : <type 'instance'>
avl_REF2 = set([19, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([3, 19, 7]) : <type 'set'>
==================================================
int2 = 19                                                               # STEP 13
ACTION: int2 = 19 
int2 = 19 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 14
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x10522de18> : <type 'instance'>
avl_REF2 = set([3, 19, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int2)                                                       # STEP 15
ACTION: avl2.delete(int2) 
int2 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10522de18> : <type 'instance'>
avl_REF2 = set([3, 19, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([3, 7]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 16
ACTION: avl2.delete(int3) 
int3 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10522de18> : <type 'instance'>
avl_REF2 = set([3, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.insert(int3)                                                       # STEP 17
ACTION: avl2.insert(int3) 
int3 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10522de18> : <type 'instance'>
avl_REF2 = set([3, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([3, 2, 7]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 18
ACTION: avl2.insert(int1) 
int1 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10522de18> : <type 'instance'>
avl_REF2 = set([3, 2, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
int3 = 1                                                                # STEP 19
ACTION: int3 = 1 
int3 = 2 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 20
ACTION: avl2.insert(int2) 
int2 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10522de18> : <type 'instance'>
avl_REF2 = set([3, 2, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([3, 2, 19, 7]) : <type 'set'>
==================================================
int1 = 7                                                                # STEP 21
ACTION: int1 = 7 
int1 = 3 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 22
ACTION: avl2.delete(int2) 
int2 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10522de18> : <type 'instance'>
avl_REF2 = set([3, 2, 19, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([3, 2, 7]) : <type 'set'>
==================================================
result = avl2.find(int1)                                                # STEP 23
ACTION: result = avl2.find(int1) 
int1 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10522de18> : <type 'instance'>
avl_REF2 = set([3, 2, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl2.insert(int3)                                                       # STEP 24
ACTION: avl2.insert(int3) 
int3 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10522de18> : <type 'instance'>
avl_REF2 = set([3, 2, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([3, 1, 2, 7]) : <type 'set'>
==================================================
int2 = 17                                                               # STEP 25
ACTION: int2 = 17 
int2 = 19 : <type 'int'>
=> int2 = 17 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 26
ACTION: avl2.delete(int1) 
int1 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10522de18> : <type 'instance'>
avl_REF2 = set([3, 1, 2, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([3, 1, 2]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105224b00>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
TEST #5 STEP #53 (0:00:30.026515) Fri Apr 28 03:29:22 2017 [ 149 stmts 198 branches ]
  13 [2:0]
-- < 4 [1:1]
---- < 3 [0:0] L
-- > 19 [1:0]
---- < 14 [0:0] L
---- > 20 [0:0] L
set([3, 4, 13, 14, 19, 20])
  8 [2:0]
-- < 4 [1:0]
---- < 2 [0:0] L
---- > 7 [0:0] L
-- > 10 [1:-1]
---- > 19 [0:0] L
set([2, 4, 7, 8, 10, 19])
  8 [2:0]
-- < 4 [1:0]
---- < 2 [0:0] L
---- > 7 [0:0] L
-- > 19 [1:0]
---- < 10 [0:0] L
---- > 20 [0:0] L
set([2, 4, 7, 8, 10, 19, 20])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1058473b0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 38 steps

SAVING TEST AS failure.99249.test.2
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 10                                                                # STEP 0
ACTION: int1 = 10 
int1 = None : <type 'NoneType'>
=> int1 = 10 : <type 'int'>
==================================================
int0 = 12                                                                # STEP 1
ACTION: int0 = 12 
int0 = None : <type 'NoneType'>
=> int0 = 12 : <type 'int'>
==================================================
int3 = 16                                                                # STEP 2
ACTION: int3 = 16 
int3 = None : <type 'NoneType'>
=> int3 = 16 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 3
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x105847710> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl2.inorder()                                                  # STEP 4
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x105847710> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int2 = 13                                                                # STEP 5
ACTION: int2 = 13 
int2 = None : <type 'NoneType'>
=> int2 = 13 : <type 'int'>
==================================================
avl2.insert(int3)                                                        # STEP 6
ACTION: avl2.insert(int3) 
int3 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105847710> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([16]) : <type 'set'>
==================================================
avl2.insert(int1)                                                        # STEP 7
ACTION: avl2.insert(int1) 
int1 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105847710> : <type 'instance'>
avl_REF2 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([16, 10]) : <type 'set'>
==================================================
avl2.insert(int3)                                                        # STEP 8
ACTION: avl2.insert(int3) 
int3 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105847710> : <type 'instance'>
avl_REF2 = set([16, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
avl2.insert(int0)                                                        # STEP 9
ACTION: avl2.insert(int0) 
int0 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105847710> : <type 'instance'>
avl_REF2 = set([16, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([16, 10, 12]) : <type 'set'>
==================================================
result = avl2.find(int1)                                                # STEP 10
ACTION: result = avl2.find(int1) 
int1 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105847710> : <type 'instance'>
avl_REF2 = set([16, 10, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
result = avl2.find(int1)                                                # STEP 11
ACTION: result = avl2.find(int1) 
int1 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105847710> : <type 'instance'>
avl_REF2 = set([16, 10, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int3 = 14                                                               # STEP 12
ACTION: int3 = 14 
int3 = 16 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
int1 = 10                                                               # STEP 13
ACTION: int1 = 10 
int1 = 10 : <type 'int'>
==================================================
int0 = 13                                                               # STEP 14
ACTION: int0 = 13 
int0 = 12 : <type 'int'>
=> int0 = 13 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 15
ACTION: avl2.insert(int3) 
int3 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105847710> : <type 'instance'>
avl_REF2 = set([16, 10, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([16, 10, 12, 14]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 16
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x105847710> : <type 'instance'>
avl_REF2 = set([16, 10, 12, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int2)                                                       # STEP 17
ACTION: avl2.insert(int2) 
int2 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105847710> : <type 'instance'>
avl_REF2 = set([16, 10, 12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([16, 10, 12, 13, 14]) : <type 'set'>
==================================================
int3 = 17                                                               # STEP 18
ACTION: int3 = 17 
int3 = 14 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
int2 = 11                                                               # STEP 19
ACTION: int2 = 11 
int2 = 13 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
result = avl2.find(int2)                                                # STEP 20
ACTION: result = avl2.find(int2) 
int2 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105847710> : <type 'instance'>
avl_REF2 = set([16, 10, 12, 13, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int2 = 10                                                               # STEP 21
ACTION: int2 = 10 
int2 = 11 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 22
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x105847710> : <type 'instance'>
avl_REF2 = set([16, 10, 12, 13, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl1 = avl.AVLTree()                                                    # STEP 23
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x105866ef0> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 24
ACTION: avl1.delete(int1) 
int1 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105866ef0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl2.insert(int1)                                                       # STEP 25
ACTION: avl2.insert(int1) 
int1 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105847710> : <type 'instance'>
avl_REF2 = set([16, 10, 12, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl2.delete(int0)                                                       # STEP 26
ACTION: avl2.delete(int0) 
int0 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105847710> : <type 'instance'>
avl_REF2 = set([16, 10, 12, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([16, 10, 12, 14]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 27
ACTION: avl2.delete(int3) 
int3 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105847710> : <type 'instance'>
avl_REF2 = set([16, 10, 12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.insert(int3)                                                       # STEP 28
ACTION: avl2.insert(int3) 
int3 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105847710> : <type 'instance'>
avl_REF2 = set([16, 10, 12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([10, 12, 14, 16, 17]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 29
ACTION: avl1.delete(int1) 
int1 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105866ef0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.insert(int3)                                                       # STEP 30
ACTION: avl1.insert(int3) 
int3 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105866ef0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([17]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 31
ACTION: avl2.insert(int2) 
int2 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105847710> : <type 'instance'>
avl_REF2 = set([10, 12, 14, 16, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
int0 = 17                                                               # STEP 32
ACTION: int0 = 17 
int0 = 13 : <type 'int'>
=> int0 = 17 : <type 'int'>
==================================================
int2 = 3                                                                # STEP 33
ACTION: int2 = 3 
int2 = 10 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 34
ACTION: avl1.insert(int2) 
int2 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105866ef0> : <type 'instance'>
avl_REF1 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([17, 3]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 35
ACTION: avl2.delete(int3) 
int3 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105847710> : <type 'instance'>
avl_REF2 = set([10, 12, 14, 16, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([10, 12, 14, 16]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 36
ACTION: avl1.insert(int0) 
int0 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105866ef0> : <type 'instance'>
avl_REF1 = set([17, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl2.delete(int1)                                                       # STEP 37
ACTION: avl2.delete(int1) 
int1 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105847710> : <type 'instance'>
avl_REF2 = set([10, 12, 14, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([12, 14, 16]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105881518>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 3 DISTINCT FAILURES
  12 [2:0]
-- < 3 [1:0]
---- < 2 [0:0] L
---- > 5 [0:0] L
-- > 13 [1:-1]
---- > 19 [0:0] L
set([2, 3, 5, 12, 13, 19])
  5 [3:-1]
-- < 3 [1:1]
---- < 2 [0:0] L
-- > 12 [2:1]
---- < 7 [1:-1]
------ > 9 [0:0] L
---- > 19 [0:0] L
set([2, 3, 5, 7, 9, 12, 19])
  5 [3:-1]
-- < 2 [1:0]
---- < 1 [0:0] L
---- > 3 [0:0] L
-- > 12 [2:1]
---- < 7 [1:-1]
------ > 9 [0:0] L
---- > 19 [0:0] L
set([1, 2, 3, 5, 7, 9, 12, 19])
  7 [3:-1]
-- < 2 [1:0]
---- < 1 [0:0] L
---- > 3 [0:0] L
-- > 12 [2:1]
---- < 9 [1:-1]
------ > 11 [0:0] L
---- > 19 [0:0] L
set([1, 2, 3, 7, 9, 11, 12, 19])
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 7
STOPPING TESTING DUE TO TIMEOUT
8.58500169664 PERCENT COVERED
60.1772069931 TOTAL RUNTIME
10 EXECUTED
725 TOTAL TEST OPERATIONS
25.738874197 TIME SPENT EXECUTING TEST OPERATIONS
0.0761830806732 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
25.8286783695 TIME SPENT CHECKING PROPERTIES
51.5675525665 TOTAL TIME SPENT RUNNING SUT
0.00542378425598 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
3 FAILED
0 REPEATS OF FAILURES
3 ACTUAL DISTINCT FAILURES

FAILURE 0
int0 = 13                                                                # STEP 0
int2 = 7                                                                 # STEP 1
int3 = 19                                                                # STEP 2
int1 = 4                                                                 # STEP 3
avl0 = avl.AVLTree()                                                     # STEP 4
avl0.delete(int2)                                                        # STEP 5
avl0.insert(int3)                                                        # STEP 6
avl0.insert(int1)                                                        # STEP 7
int3 = 12                                                                # STEP 8
avl0.insert(int3)                                                        # STEP 9
avl0.delete(int3)                                                       # STEP 10
avl0.delete(int3)                                                       # STEP 11
avl2 = avl.AVLTree()                                                    # STEP 12
int1 = 14                                                               # STEP 13
int2 = 4                                                                # STEP 14
avl0.delete(int0)                                                       # STEP 15
avl0.delete(int1)                                                       # STEP 16
avl2.delete(int0)                                                       # STEP 17
int1 = 10                                                               # STEP 18
result = avl0.inorder()                                                 # STEP 19
avl2.delete(int1)                                                       # STEP 20
avl2.insert(int0)                                                       # STEP 21
avl0.insert(int3)                                                       # STEP 22
avl0.insert(int2)                                                       # STEP 23
avl2.delete(int3)                                                       # STEP 24
avl2 == avl0                                                            # STEP 25
int2 = 10                                                               # STEP 26
avl2.insert(int2)                                                       # STEP 27
avl0.delete(int3)                                                       # STEP 28
avl0.delete(int1)                                                       # STEP 29
avl0.delete(int2)                                                       # STEP 30
avl2.insert(int1)                                                       # STEP 31
avl0.insert(int1)                                                       # STEP 32
avl2.insert(int1)                                                       # STEP 33
avl2.insert(int0)                                                       # STEP 34
avl2 == avl2                                                            # STEP 35
avl0.delete(int1)                                                       # STEP 36
int3 = 3                                                                # STEP 37
avl2.delete(int1)                                                       # STEP 38
avl2.delete(int3)                                                       # STEP 39
avl0.delete(int1)                                                       # STEP 40
int0 = 7                                                                # STEP 41
avl2.delete(int2)                                                       # STEP 42
int2 = 13                                                               # STEP 43
avl0.insert(int2)                                                       # STEP 44
avl2.insert(int2)                                                       # STEP 45
result = avl0.inorder()                                                 # STEP 46
result = avl2.find(int0)                                                # STEP 47
avl2.delete(int0)                                                       # STEP 48
avl2.insert(int3)                                                       # STEP 49
int3 = 5                                                                # STEP 50
avl0.insert(int0)                                                       # STEP 51
avl0.delete(int2)                                                       # STEP 52
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1056df878>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE 1
int1 = 3                                                                 # STEP 0
int0 = 12                                                                # STEP 1
int2 = 7                                                                 # STEP 2
int3 = 2                                                                 # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
avl2.insert(int2)                                                        # STEP 5
int2 = 19                                                                # STEP 6
avl2.insert(int3)                                                        # STEP 7
avl2 == avl2                                                             # STEP 8
avl2.delete(int3)                                                        # STEP 9
avl2.insert(int2)                                                       # STEP 10
avl2.delete(int3)                                                       # STEP 11
avl2.insert(int1)                                                       # STEP 12
int2 = 19                                                               # STEP 13
result = avl2.inorder()                                                 # STEP 14
avl2.delete(int2)                                                       # STEP 15
avl2.delete(int3)                                                       # STEP 16
avl2.insert(int3)                                                       # STEP 17
avl2.insert(int1)                                                       # STEP 18
int3 = 1                                                                # STEP 19
avl2.insert(int2)                                                       # STEP 20
int1 = 7                                                                # STEP 21
avl2.delete(int2)                                                       # STEP 22
result = avl2.find(int1)                                                # STEP 23
avl2.insert(int3)                                                       # STEP 24
int2 = 17                                                               # STEP 25
avl2.delete(int1)                                                       # STEP 26
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105224b00>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE 2
int1 = 10                                                                # STEP 0
int0 = 12                                                                # STEP 1
int3 = 16                                                                # STEP 2
avl2 = avl.AVLTree()                                                     # STEP 3
result = avl2.inorder()                                                  # STEP 4
int2 = 13                                                                # STEP 5
avl2.insert(int3)                                                        # STEP 6
avl2.insert(int1)                                                        # STEP 7
avl2.insert(int3)                                                        # STEP 8
avl2.insert(int0)                                                        # STEP 9
result = avl2.find(int1)                                                # STEP 10
result = avl2.find(int1)                                                # STEP 11
int3 = 14                                                               # STEP 12
int1 = 10                                                               # STEP 13
int0 = 13                                                               # STEP 14
avl2.insert(int3)                                                       # STEP 15
result = avl2.inorder()                                                 # STEP 16
avl2.insert(int2)                                                       # STEP 17
int3 = 17                                                               # STEP 18
int2 = 11                                                               # STEP 19
result = avl2.find(int2)                                                # STEP 20
int2 = 10                                                               # STEP 21
result = avl2.inorder()                                                 # STEP 22
avl1 = avl.AVLTree()                                                    # STEP 23
avl1.delete(int1)                                                       # STEP 24
avl2.insert(int1)                                                       # STEP 25
avl2.delete(int0)                                                       # STEP 26
avl2.delete(int3)                                                       # STEP 27
avl2.insert(int3)                                                       # STEP 28
avl1.delete(int1)                                                       # STEP 29
avl1.insert(int3)                                                       # STEP 30
avl2.insert(int2)                                                       # STEP 31
int0 = 17                                                               # STEP 32
int2 = 3                                                                # STEP 33
avl1.insert(int2)                                                       # STEP 34
avl2.delete(int3)                                                       # STEP 35
avl1.insert(int0)                                                       # STEP 36
avl2.delete(int1)                                                       # STEP 37
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105881518>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
216 BRANCHES COVERED
162 STATEMENTS COVERED

Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.62009.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  13 [2:0]
-- < 7 [1:-1]
---- > 12 [0:0] L
-- > 18 [1:0]
---- < 16 [0:0] L
---- > 20 [0:0] L
set([7, 12, 13, 16, 18, 20])
  13 [2:0]
-- < 7 [1:-1]
---- > 12 [0:0] L
-- > 18 [1:0]
---- < 16 [0:0] L
---- > 20 [0:0] L
set([7, 12, 13, 16, 18, 20])
  13 [3:-1]
-- < 10 [1:0]
---- < 7 [0:0] L
---- > 12 [0:0] L
-- > 18 [2:-1]
---- < 16 [0:0] L
---- > 20 [1:1]
------ < 19 [0:0] L
set([7, 10, 12, 13, 16, 18, 19, 20])
  13 [3:0]
-- < 10 [2:-1]
---- < 7 [0:0] L
---- > 12 [1:1]
------ < 11 [0:0] L
-- > 18 [2:0]
---- < 16 [1:1]
------ < 14 [0:0] L
---- > 20 [1:1]
------ < 19 [0:0] L
set([7, 10, 11, 12, 13, 14, 16, 18, 19, 20])
  13 [3:0]
-- < 10 [2:-1]
---- < 7 [0:0] L
---- > 12 [1:1]
------ < 11 [0:0] L
-- > 18 [2:0]
---- < 16 [1:1]
------ < 14 [0:0] L
---- > 20 [1:1]
------ < 19 [0:0] L
set([7, 10, 11, 12, 13, 14, 16, 18, 19, 20])
  8 [2:0]
-- < 4 [1:0]
---- < 1 [0:0] L
---- > 6 [0:0] L
-- > 11 [1:-1]
---- > 17 [0:0] L
set([1, 4, 6, 8, 11, 17])
  8 [3:-1]
-- < 4 [1:-1]
---- > 6 [0:0] L
-- > 17 [2:-1]
---- < 11 [0:0] L
---- > 20 [1:1]
------ < 18 [0:0] L
set([4, 6, 8, 11, 17, 18, 20])
  8 [3:-1]
-- < 4 [1:-1]
---- > 6 [0:0] L
-- > 17 [2:-1]
---- < 11 [0:0] L
---- > 20 [1:1]
------ < 18 [0:0] L
set([4, 6, 8, 11, 17, 18, 20])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10366de60>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
Original test has 69 steps

SAVING TEST AS failure.62009.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 1                                                                 # STEP 0
ACTION: int1 = 1 
int1 = None : <type 'NoneType'>
=> int1 = 1 : <type 'int'>
==================================================
int2 = 8                                                                 # STEP 1
ACTION: int2 = 8 
int2 = None : <type 'NoneType'>
=> int2 = 8 : <type 'int'>
==================================================
int0 = 20                                                                # STEP 2
ACTION: int0 = 20 
int0 = None : <type 'NoneType'>
=> int0 = 20 : <type 'int'>
==================================================
int3 = 13                                                                # STEP 3
ACTION: int3 = 13 
int3 = None : <type 'NoneType'>
=> int3 = 13 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 4
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x10275f440> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.insert(int0)                                                        # STEP 5
ACTION: avl0.insert(int0) 
int0 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10275f440> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([20]) : <type 'set'>
==================================================
int0 = 12                                                                # STEP 6
ACTION: int0 = 12 
int0 = 20 : <type 'int'>
=> int0 = 12 : <type 'int'>
==================================================
result = avl0.find(int0)                                                 # STEP 7
ACTION: result = avl0.find(int0) 
int0 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10275f440> : <type 'instance'>
avl_REF0 = set([20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
int0 = 14                                                                # STEP 8
ACTION: int0 = 14 
int0 = 12 : <type 'int'>
=> int0 = 14 : <type 'int'>
==================================================
avl0.insert(int2)                                                        # STEP 9
ACTION: avl0.insert(int2) 
int2 = 8 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10275f440> : <type 'instance'>
avl_REF0 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([8, 20]) : <type 'set'>
==================================================
result = avl0.find(int1)                                                # STEP 10
ACTION: result = avl0.find(int1) 
int1 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10275f440> : <type 'instance'>
avl_REF0 = set([8, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl0.insert(int1)                                                       # STEP 11
ACTION: avl0.insert(int1) 
int1 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10275f440> : <type 'instance'>
avl_REF0 = set([8, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([8, 1, 20]) : <type 'set'>
==================================================
int2 = 11                                                               # STEP 12
ACTION: int2 = 11 
int2 = 8 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 13
ACTION: avl0.insert(int2) 
int2 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10275f440> : <type 'instance'>
avl_REF0 = set([8, 1, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([8, 1, 11, 20]) : <type 'set'>
==================================================
int1 = 20                                                               # STEP 14
ACTION: int1 = 20 
int1 = 1 : <type 'int'>
=> int1 = 20 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 15
ACTION: avl0.delete(int0) 
int0 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10275f440> : <type 'instance'>
avl_REF0 = set([8, 1, 11, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.delete(int3)                                                       # STEP 16
ACTION: avl0.delete(int3) 
int3 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10275f440> : <type 'instance'>
avl_REF0 = set([8, 1, 11, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int3 = 17                                                               # STEP 17
ACTION: int3 = 17 
int3 = 13 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 18
ACTION: avl0.insert(int1) 
int1 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10275f440> : <type 'instance'>
avl_REF0 = set([8, 1, 11, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl0.delete(int0)                                                       # STEP 19
ACTION: avl0.delete(int0) 
int0 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10275f440> : <type 'instance'>
avl_REF0 = set([8, 1, 11, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.delete(int1)                                                       # STEP 20
ACTION: avl0.delete(int1) 
int1 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10275f440> : <type 'instance'>
avl_REF0 = set([8, 1, 11, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([8, 1, 11]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 21
ACTION: avl0.insert(int3) 
int3 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10275f440> : <type 'instance'>
avl_REF0 = set([8, 1, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([8, 1, 11, 17]) : <type 'set'>
==================================================
int1 = 4                                                                # STEP 22
ACTION: int1 = 4 
int1 = 20 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 23
ACTION: avl0.delete(int0) 
int0 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10275f440> : <type 'instance'>
avl_REF0 = set([8, 1, 11, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
result = avl0.find(int2)                                                # STEP 24
ACTION: result = avl0.find(int2) 
int2 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10275f440> : <type 'instance'>
avl_REF0 = set([8, 1, 11, 17]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
int0 = 6                                                                # STEP 25
ACTION: int0 = 6 
int0 = 14 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 26
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x10275f440> : <type 'instance'>
avl_REF0 = set([8, 1, 11, 17]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int2)                                                       # STEP 27
ACTION: avl0.insert(int2) 
int2 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10275f440> : <type 'instance'>
avl_REF0 = set([8, 1, 11, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl0.insert(int1)                                                       # STEP 28
ACTION: avl0.insert(int1) 
int1 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10275f440> : <type 'instance'>
avl_REF0 = set([8, 1, 11, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([8, 1, 11, 4, 17]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 29
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x10275f440> : <type 'instance'>
avl_REF0 = set([8, 1, 11, 4, 17]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.delete(int3)                                                       # STEP 30
ACTION: avl0.delete(int3) 
int3 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10275f440> : <type 'instance'>
avl_REF0 = set([8, 1, 11, 4, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([8, 1, 11, 4]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 31
ACTION: avl0.insert(int3) 
int3 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10275f440> : <type 'instance'>
avl_REF0 = set([8, 1, 11, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([8, 1, 11, 4, 17]) : <type 'set'>
==================================================
result = avl0.find(int0)                                                # STEP 32
ACTION: result = avl0.find(int0) 
int0 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10275f440> : <type 'instance'>
avl_REF0 = set([8, 1, 11, 4, 17]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
avl0.delete(int1)                                                       # STEP 33
ACTION: avl0.delete(int1) 
int1 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10275f440> : <type 'instance'>
avl_REF0 = set([8, 1, 11, 4, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([8, 1, 11, 17]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 34
ACTION: avl0.insert(int1) 
int1 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10275f440> : <type 'instance'>
avl_REF0 = set([8, 1, 11, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([8, 1, 11, 4, 17]) : <type 'set'>
==================================================
int2 = 4                                                                # STEP 35
ACTION: int2 = 4 
int2 = 11 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
result = avl0.find(int0)                                                # STEP 36
ACTION: result = avl0.find(int0) 
int0 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10275f440> : <type 'instance'>
avl_REF0 = set([8, 1, 11, 4, 17]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
avl0 == avl0                                                            # STEP 37
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x10275f440> : <type 'instance'>
avl_REF0 = set([8, 1, 11, 4, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
result = avl0.inorder()                                                 # STEP 38
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x10275f440> : <type 'instance'>
avl_REF0 = set([8, 1, 11, 4, 17]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int3 = 10                                                               # STEP 39
ACTION: int3 = 10 
int3 = 17 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
int1 = 6                                                                # STEP 40
ACTION: int1 = 6 
int1 = 4 : <type 'int'>
=> int1 = 6 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 41
ACTION: avl0.insert(int3) 
int3 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10275f440> : <type 'instance'>
avl_REF0 = set([8, 1, 11, 4, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([1, 4, 8, 10, 11, 17]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 42
ACTION: avl0.insert(int1) 
int1 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10275f440> : <type 'instance'>
avl_REF0 = set([1, 4, 8, 10, 11, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([1, 4, 6, 8, 10, 11, 17]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 43
ACTION: avl0.delete(int3) 
int3 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10275f440> : <type 'instance'>
avl_REF0 = set([1, 4, 6, 8, 10, 11, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([1, 4, 6, 8, 11, 17]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 44
ACTION: avl0.insert(int0) 
int0 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10275f440> : <type 'instance'>
avl_REF0 = set([1, 4, 6, 8, 11, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
avl0.display()                                                          # STEP 45
ACTION: avl0.display() 
avl0 = <avlbug2.AVLTree instance at 0x10275f440> : <type 'instance'>
avl_REF0 = set([1, 4, 6, 8, 11, 17]) : <type 'set'>
  8 [2:0]
-- < 4 [1:0]
---- < 1 [0:0] L
---- > 6 [0:0] L
-- > 11 [1:-1]
---- > 17 [0:0] L
REFERENCE ACTION: print(avl_REF0) 
set([1, 4, 6, 8, 11, 17])
==================================================
int0 = 16                                                               # STEP 46
ACTION: int0 = 16 
int0 = 6 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 47
ACTION: avl0.delete(int1) 
int1 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10275f440> : <type 'instance'>
avl_REF0 = set([1, 4, 6, 8, 11, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([1, 4, 8, 11, 17]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 48
ACTION: avl0.insert(int1) 
int1 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10275f440> : <type 'instance'>
avl_REF0 = set([1, 4, 8, 11, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([1, 4, 6, 8, 11, 17]) : <type 'set'>
==================================================
int1 = 12                                                               # STEP 49
ACTION: int1 = 12 
int1 = 6 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
int3 = 20                                                               # STEP 50
ACTION: int3 = 20 
int3 = 10 : <type 'int'>
=> int3 = 20 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 51
ACTION: avl0.delete(int0) 
int0 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10275f440> : <type 'instance'>
avl_REF0 = set([1, 4, 6, 8, 11, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.delete(int1)                                                       # STEP 52
ACTION: avl0.delete(int1) 
int1 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10275f440> : <type 'instance'>
avl_REF0 = set([1, 4, 6, 8, 11, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
result = avl0.inorder()                                                 # STEP 53
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x10275f440> : <type 'instance'>
avl_REF0 = set([1, 4, 6, 8, 11, 17]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int3)                                                       # STEP 54
ACTION: avl0.insert(int3) 
int3 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10275f440> : <type 'instance'>
avl_REF0 = set([1, 4, 6, 8, 11, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([1, 4, 6, 8, 11, 17, 20]) : <type 'set'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 55
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x1034cb290> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 56
ACTION: avl2.insert(int0) 
int0 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1034cb290> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([16]) : <type 'set'>
==================================================
int1 = 1                                                                # STEP 57
ACTION: int1 = 1 
int1 = 12 : <type 'int'>
=> int1 = 1 : <type 'int'>
==================================================
int0 = 2                                                                # STEP 58
ACTION: int0 = 2 
int0 = 16 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
int3 = 18                                                               # STEP 59
ACTION: int3 = 18 
int3 = 20 : <type 'int'>
=> int3 = 18 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 60
ACTION: avl0.delete(int1) 
int1 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10275f440> : <type 'instance'>
avl_REF0 = set([1, 4, 6, 8, 11, 17, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([4, 6, 8, 11, 17, 20]) : <type 'set'>
==================================================
int1 = 1                                                                # STEP 61
ACTION: int1 = 1 
int1 = 1 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 62
ACTION: avl2.delete(int1) 
int1 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1034cb290> : <type 'instance'>
avl_REF2 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl0.insert(int3)                                                       # STEP 63
ACTION: avl0.insert(int3) 
int3 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10275f440> : <type 'instance'>
avl_REF0 = set([4, 6, 8, 11, 17, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([4, 6, 8, 11, 17, 18, 20]) : <type 'set'>
==================================================
avl0.display()                                                          # STEP 64
ACTION: avl0.display() 
avl0 = <avlbug2.AVLTree instance at 0x10275f440> : <type 'instance'>
avl_REF0 = set([4, 6, 8, 11, 17, 18, 20]) : <type 'set'>
  8 [3:-1]
-- < 4 [1:-1]
---- > 6 [0:0] L
-- > 17 [2:-1]
---- < 11 [0:0] L
---- > 20 [1:1]
------ < 18 [0:0] L
REFERENCE ACTION: print(avl_REF0) 
set([4, 6, 8, 11, 17, 18, 20])
==================================================
avl0.display()                                                          # STEP 65
ACTION: avl0.display() 
avl0 = <avlbug2.AVLTree instance at 0x10275f440> : <type 'instance'>
avl_REF0 = set([4, 6, 8, 11, 17, 18, 20]) : <type 'set'>
  8 [3:-1]
-- < 4 [1:-1]
---- > 6 [0:0] L
-- > 17 [2:-1]
---- < 11 [0:0] L
---- > 20 [1:1]
------ < 18 [0:0] L
REFERENCE ACTION: print(avl_REF0) 
set([4, 6, 8, 11, 17, 18, 20])
==================================================
int3 = 6                                                                # STEP 66
ACTION: int3 = 6 
int3 = 18 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 67
ACTION: avl2.delete(int1) 
int1 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1034cb290> : <type 'instance'>
avl_REF2 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl0.delete(int2)                                                       # STEP 68
ACTION: avl0.delete(int2) 
int2 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10275f440> : <type 'instance'>
avl_REF0 = set([4, 6, 8, 11, 17, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([6, 8, 11, 17, 18, 20]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10352a7a0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #3 STEP #59 (0:00:30.021912) Mon May  1 17:31:08 2017 [ 161 stmts 214 branches ]
  15 [2:0]
-- < 3 [1:0]
---- < 1 [0:0] L
---- > 11 [0:0] L
-- > 18 [1:-1]
---- > 19 [0:0] L
set([1, 3, 11, 15, 18, 19])
  15 [2:0]
-- < 3 [1:0]
---- < 1 [0:0] L
---- > 11 [0:0] L
-- > 18 [1:-1]
---- > 19 [0:0] L
set([1, 3, 11, 15, 18, 19])
  15 [2:0]
-- < 3 [1:0]
---- < 1 [0:0] L
---- > 11 [0:0] L
-- > 18 [1:-1]
---- > 19 [0:0] L
set([1, 3, 11, 15, 18, 19])
  15 [2:0]
-- < 3 [1:0]
---- < 1 [0:0] L
---- > 11 [0:0] L
-- > 18 [1:-1]
---- > 19 [0:0] L
set([1, 3, 11, 15, 18, 19])
  15 [2:0]
-- < 3 [1:0]
---- < 1 [0:0] L
---- > 11 [0:0] L
-- > 18 [1:-1]
---- > 19 [0:0] L
set([1, 3, 11, 15, 18, 19])
  15 [2:0]
-- < 3 [1:0]
---- < 1 [0:0] L
---- > 11 [0:0] L
-- > 18 [1:-1]
---- > 19 [0:0] L
set([1, 3, 11, 15, 18, 19])
  15 [2:0]
-- < 3 [1:0]
---- < 1 [0:0] L
---- > 11 [0:0] L
-- > 18 [1:-1]
---- > 19 [0:0] L
set([1, 3, 11, 15, 18, 19])
  7 [2:0]
-- < 4 [1:-1]
---- > 6 [0:0] L
-- > 15 [1:0]
---- < 10 [0:0] L
---- > 18 [0:0] L
set([4, 6, 7, 10, 15, 18])
  6 [2:0]
-- < 2 [1:1]
---- < 1 [0:0] L
-- > 13 [1:0]
---- < 11 [0:0] L
---- > 17 [0:0] L
set([1, 2, 6, 11, 13, 17])
  7 [2:0]
-- < 6 [1:1]
---- < 4 [0:0] L
-- > 17 [1:0]
---- < 16 [0:0] L
---- > 18 [0:0] L
set([4, 6, 7, 16, 17, 18])
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 51
STOPPING TESTING DUE TO TIMEOUT
8.27045850261 PERCENT COVERED
60.2347199917 TOTAL RUNTIME
6 EXECUTED
520 TOTAL TEST OPERATIONS
26.3431727886 TIME SPENT EXECUTING TEST OPERATIONS
0.0581798553467 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
26.5997686386 TIME SPENT CHECKING PROPERTIES
52.9429414272 TOTAL TIME SPENT RUNNING SUT
0.00391483306885 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int1 = 1                                                                 # STEP 0
int2 = 8                                                                 # STEP 1
int0 = 20                                                                # STEP 2
int3 = 13                                                                # STEP 3
avl0 = avl.AVLTree()                                                     # STEP 4
avl0.insert(int0)                                                        # STEP 5
int0 = 12                                                                # STEP 6
result = avl0.find(int0)                                                 # STEP 7
int0 = 14                                                                # STEP 8
avl0.insert(int2)                                                        # STEP 9
result = avl0.find(int1)                                                # STEP 10
avl0.insert(int1)                                                       # STEP 11
int2 = 11                                                               # STEP 12
avl0.insert(int2)                                                       # STEP 13
int1 = 20                                                               # STEP 14
avl0.delete(int0)                                                       # STEP 15
avl0.delete(int3)                                                       # STEP 16
int3 = 17                                                               # STEP 17
avl0.insert(int1)                                                       # STEP 18
avl0.delete(int0)                                                       # STEP 19
avl0.delete(int1)                                                       # STEP 20
avl0.insert(int3)                                                       # STEP 21
int1 = 4                                                                # STEP 22
avl0.delete(int0)                                                       # STEP 23
result = avl0.find(int2)                                                # STEP 24
int0 = 6                                                                # STEP 25
result = avl0.inorder()                                                 # STEP 26
avl0.insert(int2)                                                       # STEP 27
avl0.insert(int1)                                                       # STEP 28
result = avl0.inorder()                                                 # STEP 29
avl0.delete(int3)                                                       # STEP 30
avl0.insert(int3)                                                       # STEP 31
result = avl0.find(int0)                                                # STEP 32
avl0.delete(int1)                                                       # STEP 33
avl0.insert(int1)                                                       # STEP 34
int2 = 4                                                                # STEP 35
result = avl0.find(int0)                                                # STEP 36
avl0 == avl0                                                            # STEP 37
result = avl0.inorder()                                                 # STEP 38
int3 = 10                                                               # STEP 39
int1 = 6                                                                # STEP 40
avl0.insert(int3)                                                       # STEP 41
avl0.insert(int1)                                                       # STEP 42
avl0.delete(int3)                                                       # STEP 43
avl0.insert(int0)                                                       # STEP 44
avl0.display()                                                          # STEP 45
int0 = 16                                                               # STEP 46
avl0.delete(int1)                                                       # STEP 47
avl0.insert(int1)                                                       # STEP 48
int1 = 12                                                               # STEP 49
int3 = 20                                                               # STEP 50
avl0.delete(int0)                                                       # STEP 51
avl0.delete(int1)                                                       # STEP 52
result = avl0.inorder()                                                 # STEP 53
avl0.insert(int3)                                                       # STEP 54
avl2 = avl.AVLTree()                                                    # STEP 55
avl2.insert(int0)                                                       # STEP 56
int1 = 1                                                                # STEP 57
int0 = 2                                                                # STEP 58
int3 = 18                                                               # STEP 59
avl0.delete(int1)                                                       # STEP 60
int1 = 1                                                                # STEP 61
avl2.delete(int1)                                                       # STEP 62
avl0.insert(int3)                                                       # STEP 63
avl0.display()                                                          # STEP 64
avl0.display()                                                          # STEP 65
int3 = 6                                                                # STEP 66
avl2.delete(int1)                                                       # STEP 67
avl0.delete(int2)                                                       # STEP 68
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10352a7a0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
216 BRANCHES COVERED
162 STATEMENTS COVERED

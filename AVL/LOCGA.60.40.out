Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.62204.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102f1a7e8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
Original test has 48 steps

SAVING TEST AS failure.62204.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 7                                                                 # STEP 0
ACTION: int3 = 7 
int3 = None : <type 'NoneType'>
=> int3 = 7 : <type 'int'>
==================================================
int2 = 8                                                                 # STEP 1
ACTION: int2 = 8 
int2 = None : <type 'NoneType'>
=> int2 = 8 : <type 'int'>
==================================================
int1 = 19                                                                # STEP 2
ACTION: int1 = 19 
int1 = None : <type 'NoneType'>
=> int1 = 19 : <type 'int'>
==================================================
int0 = 2                                                                 # STEP 3
ACTION: int0 = 2 
int0 = None : <type 'NoneType'>
=> int0 = 2 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x105098b48> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
result = avl1.find(int2)                                                 # STEP 5
ACTION: result = avl1.find(int2) 
int2 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105098b48> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl1.delete(int2)                                                        # STEP 6
ACTION: avl1.delete(int2) 
int2 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105098b48> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.insert(int2)                                                        # STEP 7
ACTION: avl1.insert(int2) 
int2 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105098b48> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([8]) : <type 'set'>
==================================================
avl1.insert(int0)                                                        # STEP 8
ACTION: avl1.insert(int0) 
int0 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105098b48> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([8, 2]) : <type 'set'>
==================================================
avl1.insert(int1)                                                        # STEP 9
ACTION: avl1.insert(int1) 
int1 = 19 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105098b48> : <type 'instance'>
avl_REF1 = set([8, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([8, 2, 19]) : <type 'set'>
==================================================
result = avl1.find(int0)                                                # STEP 10
ACTION: result = avl1.find(int0) 
int0 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105098b48> : <type 'instance'>
avl_REF1 = set([8, 2, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl1.delete(int0)                                                       # STEP 11
ACTION: avl1.delete(int0) 
int0 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105098b48> : <type 'instance'>
avl_REF1 = set([8, 2, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([8, 19]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 12
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x105098b48> : <type 'instance'>
avl_REF1 = set([8, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int2 = 13                                                               # STEP 13
ACTION: int2 = 13 
int2 = 8 : <type 'int'>
=> int2 = 13 : <type 'int'>
==================================================
result = avl1.find(int1)                                                # STEP 14
ACTION: result = avl1.find(int1) 
int1 = 19 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105098b48> : <type 'instance'>
avl_REF1 = set([8, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int1 = 9                                                                # STEP 15
ACTION: int1 = 9 
int1 = 19 : <type 'int'>
=> int1 = 9 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 16
ACTION: avl1.delete(int2) 
int2 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105098b48> : <type 'instance'>
avl_REF1 = set([8, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.insert(int0)                                                       # STEP 17
ACTION: avl1.insert(int0) 
int0 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105098b48> : <type 'instance'>
avl_REF1 = set([8, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([8, 2, 19]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 18
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x105098b48> : <type 'instance'>
avl_REF1 = set([8, 2, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int2 = 20                                                               # STEP 19
ACTION: int2 = 20 
int2 = 13 : <type 'int'>
=> int2 = 20 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 20
ACTION: avl1.insert(int0) 
int0 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105098b48> : <type 'instance'>
avl_REF1 = set([8, 2, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
result = avl1.inorder()                                                 # STEP 21
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x105098b48> : <type 'instance'>
avl_REF1 = set([8, 2, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.delete(int2)                                                       # STEP 22
ACTION: avl1.delete(int2) 
int2 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105098b48> : <type 'instance'>
avl_REF1 = set([8, 2, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.delete(int3)                                                       # STEP 23
ACTION: avl1.delete(int3) 
int3 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105098b48> : <type 'instance'>
avl_REF1 = set([8, 2, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.delete(int3)                                                       # STEP 24
ACTION: avl1.delete(int3) 
int3 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105098b48> : <type 'instance'>
avl_REF1 = set([8, 2, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.delete(int0)                                                       # STEP 25
ACTION: avl1.delete(int0) 
int0 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105098b48> : <type 'instance'>
avl_REF1 = set([8, 2, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([8, 19]) : <type 'set'>
==================================================
result = avl1.find(int3)                                                # STEP 26
ACTION: result = avl1.find(int3) 
int3 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105098b48> : <type 'instance'>
avl_REF1 = set([8, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl1.delete(int2)                                                       # STEP 27
ACTION: avl1.delete(int2) 
int2 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105098b48> : <type 'instance'>
avl_REF1 = set([8, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int3 = 13                                                               # STEP 28
ACTION: int3 = 13 
int3 = 7 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 29
ACTION: avl1.delete(int1) 
int1 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105098b48> : <type 'instance'>
avl_REF1 = set([8, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int0 = 9                                                                # STEP 30
ACTION: int0 = 9 
int0 = 2 : <type 'int'>
=> int0 = 9 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 31
ACTION: avl1.delete(int3) 
int3 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105098b48> : <type 'instance'>
avl_REF1 = set([8, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.insert(int2)                                                       # STEP 32
ACTION: avl1.insert(int2) 
int2 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105098b48> : <type 'instance'>
avl_REF1 = set([8, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([8, 19, 20]) : <type 'set'>
==================================================
result = avl1.find(int0)                                                # STEP 33
ACTION: result = avl1.find(int0) 
int0 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105098b48> : <type 'instance'>
avl_REF1 = set([8, 19, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
int0 = 11                                                               # STEP 34
ACTION: int0 = 11 
int0 = 9 : <type 'int'>
=> int0 = 11 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 35
ACTION: avl1.insert(int0) 
int0 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105098b48> : <type 'instance'>
avl_REF1 = set([8, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([8, 11, 19, 20]) : <type 'set'>
==================================================
int1 = 12                                                               # STEP 36
ACTION: int1 = 12 
int1 = 9 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 37
ACTION: avl1.delete(int3) 
int3 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105098b48> : <type 'instance'>
avl_REF1 = set([8, 11, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
result = avl1.find(int3)                                                # STEP 38
ACTION: result = avl1.find(int3) 
int3 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105098b48> : <type 'instance'>
avl_REF1 = set([8, 11, 19, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl1.insert(int3)                                                       # STEP 39
ACTION: avl1.insert(int3) 
int3 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105098b48> : <type 'instance'>
avl_REF1 = set([8, 11, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([8, 11, 13, 19, 20]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 40
ACTION: avl1.delete(int3) 
int3 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105098b48> : <type 'instance'>
avl_REF1 = set([8, 11, 13, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([8, 11, 19, 20]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 41
ACTION: avl1.insert(int1) 
int1 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105098b48> : <type 'instance'>
avl_REF1 = set([8, 11, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([8, 11, 12, 19, 20]) : <type 'set'>
==================================================
int2 = 10                                                               # STEP 42
ACTION: int2 = 10 
int2 = 20 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
int1 = 19                                                               # STEP 43
ACTION: int1 = 19 
int1 = 12 : <type 'int'>
=> int1 = 19 : <type 'int'>
==================================================
result = avl1.find(int0)                                                # STEP 44
ACTION: result = avl1.find(int0) 
int0 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105098b48> : <type 'instance'>
avl_REF1 = set([8, 11, 12, 19, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl1.delete(int3)                                                       # STEP 45
ACTION: avl1.delete(int3) 
int3 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105098b48> : <type 'instance'>
avl_REF1 = set([8, 11, 12, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.delete(int0)                                                       # STEP 46
ACTION: avl1.delete(int0) 
int0 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105098b48> : <type 'instance'>
avl_REF1 = set([8, 11, 12, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([8, 12, 19, 20]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 47
ACTION: avl1.delete(int1) 
int1 = 19 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105098b48> : <type 'instance'>
avl_REF1 = set([8, 12, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([8, 12, 20]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x101b961b8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x101db8908>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
Original test has 21 steps

SAVING TEST AS failure.62204.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 20                                                                # STEP 0
ACTION: int3 = 20 
int3 = None : <type 'NoneType'>
=> int3 = 20 : <type 'int'>
==================================================
int0 = 19                                                                # STEP 1
ACTION: int0 = 19 
int0 = None : <type 'NoneType'>
=> int0 = 19 : <type 'int'>
==================================================
int2 = 19                                                                # STEP 2
ACTION: int2 = 19 
int2 = None : <type 'NoneType'>
=> int2 = 19 : <type 'int'>
==================================================
int1 = 14                                                                # STEP 3
ACTION: int1 = 14 
int1 = None : <type 'NoneType'>
=> int1 = 14 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x101dd97e8> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int3)                                                        # STEP 5
ACTION: avl2.insert(int3) 
int3 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101dd97e8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([20]) : <type 'set'>
==================================================
int3 = 18                                                                # STEP 6
ACTION: int3 = 18 
int3 = 20 : <type 'int'>
=> int3 = 18 : <type 'int'>
==================================================
avl2.insert(int2)                                                        # STEP 7
ACTION: avl2.insert(int2) 
int2 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101dd97e8> : <type 'instance'>
avl_REF2 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([19, 20]) : <type 'set'>
==================================================
int2 = 15                                                                # STEP 8
ACTION: int2 = 15 
int2 = 19 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
avl2.insert(int3)                                                        # STEP 9
ACTION: avl2.insert(int3) 
int3 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101dd97e8> : <type 'instance'>
avl_REF2 = set([19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([18, 19, 20]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 10
ACTION: avl2.insert(int1) 
int1 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101dd97e8> : <type 'instance'>
avl_REF2 = set([18, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([18, 19, 20, 14]) : <type 'set'>
==================================================
int3 = 15                                                               # STEP 11
ACTION: int3 = 15 
int3 = 18 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 12
ACTION: avl2.insert(int1) 
int1 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101dd97e8> : <type 'instance'>
avl_REF2 = set([18, 19, 20, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl2.delete(int1)                                                       # STEP 13
ACTION: avl2.delete(int1) 
int1 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101dd97e8> : <type 'instance'>
avl_REF2 = set([18, 19, 20, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([18, 19, 20]) : <type 'set'>
==================================================
avl2 == avl2                                                            # STEP 14
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x101dd97e8> : <type 'instance'>
avl_REF2 = set([18, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl2.delete(int3)                                                       # STEP 15
ACTION: avl2.delete(int3) 
int3 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101dd97e8> : <type 'instance'>
avl_REF2 = set([18, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.insert(int0)                                                       # STEP 16
ACTION: avl2.insert(int0) 
int0 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101dd97e8> : <type 'instance'>
avl_REF2 = set([18, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl2.delete(int1)                                                       # STEP 17
ACTION: avl2.delete(int1) 
int1 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101dd97e8> : <type 'instance'>
avl_REF2 = set([18, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int2)                                                       # STEP 18
ACTION: avl2.insert(int2) 
int2 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101dd97e8> : <type 'instance'>
avl_REF2 = set([18, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([18, 19, 20, 15]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 19
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x101dd97e8> : <type 'instance'>
avl_REF2 = set([18, 19, 20, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int0)                                                       # STEP 20
ACTION: avl2.delete(int0) 
int0 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101dd97e8> : <type 'instance'>
avl_REF2 = set([18, 19, 20, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([18, 20, 15]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102ff45f0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105033368>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
Original test has 37 steps

SAVING TEST AS failure.62204.test.2
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 6                                                                 # STEP 0
ACTION: int3 = 6 
int3 = None : <type 'NoneType'>
=> int3 = 6 : <type 'int'>
==================================================
int0 = 17                                                                # STEP 1
ACTION: int0 = 17 
int0 = None : <type 'NoneType'>
=> int0 = 17 : <type 'int'>
==================================================
int2 = 2                                                                 # STEP 2
ACTION: int2 = 2 
int2 = None : <type 'NoneType'>
=> int2 = 2 : <type 'int'>
==================================================
int1 = 5                                                                 # STEP 3
ACTION: int1 = 5 
int1 = None : <type 'NoneType'>
=> int1 = 5 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x105033ab8> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.delete(int1)                                                        # STEP 5
ACTION: avl1.delete(int1) 
int1 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105033ab8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.delete(int0)                                                        # STEP 6
ACTION: avl1.delete(int0) 
int0 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105033ab8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.delete(int1)                                                        # STEP 7
ACTION: avl1.delete(int1) 
int1 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105033ab8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.insert(int1)                                                        # STEP 8
ACTION: avl1.insert(int1) 
int1 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105033ab8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([5]) : <type 'set'>
==================================================
avl1.delete(int2)                                                        # STEP 9
ACTION: avl1.delete(int2) 
int2 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105033ab8> : <type 'instance'>
avl_REF1 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int2 = 3                                                                # STEP 10
ACTION: int2 = 3 
int2 = 2 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 11
ACTION: avl1.delete(int2) 
int2 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105033ab8> : <type 'instance'>
avl_REF1 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
result = avl1.find(int0)                                                # STEP 12
ACTION: result = avl1.find(int0) 
int0 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105033ab8> : <type 'instance'>
avl_REF1 = set([5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl1.insert(int0)                                                       # STEP 13
ACTION: avl1.insert(int0) 
int0 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105033ab8> : <type 'instance'>
avl_REF1 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([17, 5]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 14
ACTION: avl1.delete(int3) 
int3 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105033ab8> : <type 'instance'>
avl_REF1 = set([17, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.delete(int3)                                                       # STEP 15
ACTION: avl1.delete(int3) 
int3 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105033ab8> : <type 'instance'>
avl_REF1 = set([17, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.insert(int2)                                                       # STEP 16
ACTION: avl1.insert(int2) 
int2 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105033ab8> : <type 'instance'>
avl_REF1 = set([17, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([17, 3, 5]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 17
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x105033ab8> : <type 'instance'>
avl_REF1 = set([17, 3, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int3)                                                       # STEP 18
ACTION: avl1.insert(int3) 
int3 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105033ab8> : <type 'instance'>
avl_REF1 = set([17, 3, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([17, 3, 5, 6]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 19
ACTION: avl1.delete(int3) 
int3 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105033ab8> : <type 'instance'>
avl_REF1 = set([17, 3, 5, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([17, 3, 5]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 20
ACTION: avl1.delete(int1) 
int1 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105033ab8> : <type 'instance'>
avl_REF1 = set([17, 3, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([17, 3]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 21
ACTION: avl1.delete(int2) 
int2 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105033ab8> : <type 'instance'>
avl_REF1 = set([17, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([17]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 22
ACTION: avl1.delete(int3) 
int3 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105033ab8> : <type 'instance'>
avl_REF1 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.insert(int3)                                                       # STEP 23
ACTION: avl1.insert(int3) 
int3 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105033ab8> : <type 'instance'>
avl_REF1 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([17, 6]) : <type 'set'>
==================================================
int3 = 20                                                               # STEP 24
ACTION: int3 = 20 
int3 = 6 : <type 'int'>
=> int3 = 20 : <type 'int'>
==================================================
int1 = 11                                                               # STEP 25
ACTION: int1 = 11 
int1 = 5 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 26
ACTION: avl1.delete(int3) 
int3 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105033ab8> : <type 'instance'>
avl_REF1 = set([17, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.insert(int0)                                                       # STEP 27
ACTION: avl1.insert(int0) 
int0 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105033ab8> : <type 'instance'>
avl_REF1 = set([17, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.delete(int0)                                                       # STEP 28
ACTION: avl1.delete(int0) 
int0 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105033ab8> : <type 'instance'>
avl_REF1 = set([17, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([6]) : <type 'set'>
==================================================
result = avl1.find(int0)                                                # STEP 29
ACTION: result = avl1.find(int0) 
int0 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105033ab8> : <type 'instance'>
avl_REF1 = set([6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl1.insert(int1)                                                       # STEP 30
ACTION: avl1.insert(int1) 
int1 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105033ab8> : <type 'instance'>
avl_REF1 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([11, 6]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 31
ACTION: avl1.delete(int0) 
int0 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105033ab8> : <type 'instance'>
avl_REF1 = set([11, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.insert(int2)                                                       # STEP 32
ACTION: avl1.insert(int2) 
int2 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105033ab8> : <type 'instance'>
avl_REF1 = set([11, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([3, 11, 6]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 33
ACTION: avl1.delete(int3) 
int3 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105033ab8> : <type 'instance'>
avl_REF1 = set([3, 11, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int3 = 13                                                               # STEP 34
ACTION: int3 = 13 
int3 = 20 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 35
ACTION: avl1.insert(int0) 
int0 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105033ab8> : <type 'instance'>
avl_REF1 = set([3, 11, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([3, 17, 11, 6]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 36
ACTION: avl1.delete(int2) 
int2 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105033ab8> : <type 'instance'>
avl_REF1 = set([3, 17, 11, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([17, 11, 6]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105050fc8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 3 DISTINCT FAILURES
TEST #5 STEP #0 (0:00:31.374303) Mon May  1 17:56:48 2017 [ 148 stmts 196 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102b78d88>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
Original test has 49 steps

SAVING TEST AS failure.62204.test.3
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 18                                                                # STEP 0
ACTION: int0 = 18 
int0 = None : <type 'NoneType'>
=> int0 = 18 : <type 'int'>
==================================================
int1 = 17                                                                # STEP 1
ACTION: int1 = 17 
int1 = None : <type 'NoneType'>
=> int1 = 17 : <type 'int'>
==================================================
int2 = 5                                                                 # STEP 2
ACTION: int2 = 5 
int2 = None : <type 'NoneType'>
=> int2 = 5 : <type 'int'>
==================================================
int3 = 7                                                                 # STEP 3
ACTION: int3 = 7 
int3 = None : <type 'NoneType'>
=> int3 = 7 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x105072050> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.delete(int1)                                                        # STEP 5
ACTION: avl1.delete(int1) 
int1 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105072050> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int1 = 5                                                                 # STEP 6
ACTION: int1 = 5 
int1 = 17 : <type 'int'>
=> int1 = 5 : <type 'int'>
==================================================
avl1.delete(int3)                                                        # STEP 7
ACTION: avl1.delete(int3) 
int3 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105072050> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.insert(int3)                                                        # STEP 8
ACTION: avl1.insert(int3) 
int3 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105072050> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([7]) : <type 'set'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 9
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x105072e60> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 10
ACTION: avl2.delete(int1) 
int1 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105072e60> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int1 = 6                                                                # STEP 11
ACTION: int1 = 6 
int1 = 5 : <type 'int'>
=> int1 = 6 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 12
ACTION: avl2.insert(int1) 
int1 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105072e60> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([6]) : <type 'set'>
==================================================
int1 = 17                                                               # STEP 13
ACTION: int1 = 17 
int1 = 6 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 14
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x101e4ecb0> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 15
ACTION: avl1.insert(int0) 
int0 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105072050> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([18, 7]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 16
ACTION: avl0.delete(int2) 
int2 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101e4ecb0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int2 = 4                                                                # STEP 17
ACTION: int2 = 4 
int2 = 5 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 18
ACTION: avl0.insert(int3) 
int3 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101e4ecb0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([7]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 19
ACTION: avl0.delete(int3) 
int3 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101e4ecb0> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 20
ACTION: avl2.insert(int2) 
int2 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105072e60> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([4, 6]) : <type 'set'>
==================================================
result = avl1.find(int3)                                                # STEP 21
ACTION: result = avl1.find(int3) 
int3 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105072050> : <type 'instance'>
avl_REF1 = set([18, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
result = avl0.find(int3)                                                # STEP 22
ACTION: result = avl0.find(int3) 
int3 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101e4ecb0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
avl0.insert(int3)                                                       # STEP 23
ACTION: avl0.insert(int3) 
int3 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101e4ecb0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([7]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 24
ACTION: avl0.delete(int3) 
int3 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101e4ecb0> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 25
ACTION: avl0.delete(int0) 
int0 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101e4ecb0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl2.insert(int3)                                                       # STEP 26
ACTION: avl2.insert(int3) 
int3 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105072e60> : <type 'instance'>
avl_REF2 = set([4, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([4, 6, 7]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 27
ACTION: avl1.delete(int0) 
int0 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105072050> : <type 'instance'>
avl_REF1 = set([18, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([7]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 28
ACTION: avl2.insert(int2) 
int2 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105072e60> : <type 'instance'>
avl_REF2 = set([4, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl0.insert(int1)                                                       # STEP 29
ACTION: avl0.insert(int1) 
int1 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101e4ecb0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([17]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 30
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x101e4ecb0> : <type 'instance'>
avl_REF0 = set([17]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
result = avl0.find(int3)                                                # STEP 31
ACTION: result = avl0.find(int3) 
int3 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101e4ecb0> : <type 'instance'>
avl_REF0 = set([17]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
int1 = 3                                                                # STEP 32
ACTION: int1 = 3 
int1 = 17 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 33
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x105072050> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int0)                                                       # STEP 34
ACTION: avl1.insert(int0) 
int0 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105072050> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([18, 7]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 35
ACTION: avl2.insert(int2) 
int2 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105072e60> : <type 'instance'>
avl_REF2 = set([4, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl0.delete(int1)                                                       # STEP 36
ACTION: avl0.delete(int1) 
int1 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101e4ecb0> : <type 'instance'>
avl_REF0 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl1.delete(int1)                                                       # STEP 37
ACTION: avl1.delete(int1) 
int1 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105072050> : <type 'instance'>
avl_REF1 = set([18, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl2.delete(int1)                                                       # STEP 38
ACTION: avl2.delete(int1) 
int1 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105072e60> : <type 'instance'>
avl_REF2 = set([4, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int0)                                                       # STEP 39
ACTION: avl2.insert(int0) 
int0 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105072e60> : <type 'instance'>
avl_REF2 = set([4, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([18, 4, 6, 7]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 40
ACTION: avl0.insert(int0) 
int0 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101e4ecb0> : <type 'instance'>
avl_REF0 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([17, 18]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 41
ACTION: avl2.insert(int0) 
int0 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105072e60> : <type 'instance'>
avl_REF2 = set([18, 4, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl0.insert(int2)                                                       # STEP 42
ACTION: avl0.insert(int2) 
int2 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101e4ecb0> : <type 'instance'>
avl_REF0 = set([17, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([17, 18, 4]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 43
ACTION: avl0.delete(int2) 
int2 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101e4ecb0> : <type 'instance'>
avl_REF0 = set([17, 18, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([17, 18]) : <type 'set'>
==================================================
result = avl0.find(int1)                                                # STEP 44
ACTION: result = avl0.find(int1) 
int1 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101e4ecb0> : <type 'instance'>
avl_REF0 = set([17, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl0.insert(int1)                                                       # STEP 45
ACTION: avl0.insert(int1) 
int1 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101e4ecb0> : <type 'instance'>
avl_REF0 = set([17, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([17, 18, 3]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 46
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x101e4ecb0> : <type 'instance'>
avl_REF0 = set([17, 18, 3]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl2.insert(int3)                                                       # STEP 47
ACTION: avl2.insert(int3) 
int3 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105072e60> : <type 'instance'>
avl_REF2 = set([18, 4, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
avl2.delete(int2)                                                       # STEP 48
ACTION: avl2.delete(int2) 
int2 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105072e60> : <type 'instance'>
avl_REF2 = set([18, 4, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([18, 6, 7]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x101d33b48>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 4 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 79
STOPPING TESTING DUE TO TIMEOUT
7.63203714452 PERCENT COVERED
60.2567489147 TOTAL RUNTIME
7 EXECUTED
434 TOTAL TEST OPERATIONS
22.0842349529 TIME SPENT EXECUTING TEST OPERATIONS
0.0501043796539 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
22.1801242828 TIME SPENT CHECKING PROPERTIES
44.2643592358 TOTAL TIME SPENT RUNNING SUT
0.00429272651672 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
4 FAILED
0 REPEATS OF FAILURES
4 ACTUAL DISTINCT FAILURES

FAILURE 0
int3 = 7                                                                 # STEP 0
int2 = 8                                                                 # STEP 1
int1 = 19                                                                # STEP 2
int0 = 2                                                                 # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
result = avl1.find(int2)                                                 # STEP 5
avl1.delete(int2)                                                        # STEP 6
avl1.insert(int2)                                                        # STEP 7
avl1.insert(int0)                                                        # STEP 8
avl1.insert(int1)                                                        # STEP 9
result = avl1.find(int0)                                                # STEP 10
avl1.delete(int0)                                                       # STEP 11
result = avl1.inorder()                                                 # STEP 12
int2 = 13                                                               # STEP 13
result = avl1.find(int1)                                                # STEP 14
int1 = 9                                                                # STEP 15
avl1.delete(int2)                                                       # STEP 16
avl1.insert(int0)                                                       # STEP 17
result = avl1.inorder()                                                 # STEP 18
int2 = 20                                                               # STEP 19
avl1.insert(int0)                                                       # STEP 20
result = avl1.inorder()                                                 # STEP 21
avl1.delete(int2)                                                       # STEP 22
avl1.delete(int3)                                                       # STEP 23
avl1.delete(int3)                                                       # STEP 24
avl1.delete(int0)                                                       # STEP 25
result = avl1.find(int3)                                                # STEP 26
avl1.delete(int2)                                                       # STEP 27
int3 = 13                                                               # STEP 28
avl1.delete(int1)                                                       # STEP 29
int0 = 9                                                                # STEP 30
avl1.delete(int3)                                                       # STEP 31
avl1.insert(int2)                                                       # STEP 32
result = avl1.find(int0)                                                # STEP 33
int0 = 11                                                               # STEP 34
avl1.insert(int0)                                                       # STEP 35
int1 = 12                                                               # STEP 36
avl1.delete(int3)                                                       # STEP 37
result = avl1.find(int3)                                                # STEP 38
avl1.insert(int3)                                                       # STEP 39
avl1.delete(int3)                                                       # STEP 40
avl1.insert(int1)                                                       # STEP 41
int2 = 10                                                               # STEP 42
int1 = 19                                                               # STEP 43
result = avl1.find(int0)                                                # STEP 44
avl1.delete(int3)                                                       # STEP 45
avl1.delete(int0)                                                       # STEP 46
avl1.delete(int1)                                                       # STEP 47
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x101b961b8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE 1
int3 = 20                                                                # STEP 0
int0 = 19                                                                # STEP 1
int2 = 19                                                                # STEP 2
int1 = 14                                                                # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
avl2.insert(int3)                                                        # STEP 5
int3 = 18                                                                # STEP 6
avl2.insert(int2)                                                        # STEP 7
int2 = 15                                                                # STEP 8
avl2.insert(int3)                                                        # STEP 9
avl2.insert(int1)                                                       # STEP 10
int3 = 15                                                               # STEP 11
avl2.insert(int1)                                                       # STEP 12
avl2.delete(int1)                                                       # STEP 13
avl2 == avl2                                                            # STEP 14
avl2.delete(int3)                                                       # STEP 15
avl2.insert(int0)                                                       # STEP 16
avl2.delete(int1)                                                       # STEP 17
avl2.insert(int2)                                                       # STEP 18
result = avl2.inorder()                                                 # STEP 19
avl2.delete(int0)                                                       # STEP 20
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102ff45f0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE 2
int3 = 6                                                                 # STEP 0
int0 = 17                                                                # STEP 1
int2 = 2                                                                 # STEP 2
int1 = 5                                                                 # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
avl1.delete(int1)                                                        # STEP 5
avl1.delete(int0)                                                        # STEP 6
avl1.delete(int1)                                                        # STEP 7
avl1.insert(int1)                                                        # STEP 8
avl1.delete(int2)                                                        # STEP 9
int2 = 3                                                                # STEP 10
avl1.delete(int2)                                                       # STEP 11
result = avl1.find(int0)                                                # STEP 12
avl1.insert(int0)                                                       # STEP 13
avl1.delete(int3)                                                       # STEP 14
avl1.delete(int3)                                                       # STEP 15
avl1.insert(int2)                                                       # STEP 16
result = avl1.inorder()                                                 # STEP 17
avl1.insert(int3)                                                       # STEP 18
avl1.delete(int3)                                                       # STEP 19
avl1.delete(int1)                                                       # STEP 20
avl1.delete(int2)                                                       # STEP 21
avl1.delete(int3)                                                       # STEP 22
avl1.insert(int3)                                                       # STEP 23
int3 = 20                                                               # STEP 24
int1 = 11                                                               # STEP 25
avl1.delete(int3)                                                       # STEP 26
avl1.insert(int0)                                                       # STEP 27
avl1.delete(int0)                                                       # STEP 28
result = avl1.find(int0)                                                # STEP 29
avl1.insert(int1)                                                       # STEP 30
avl1.delete(int0)                                                       # STEP 31
avl1.insert(int2)                                                       # STEP 32
avl1.delete(int3)                                                       # STEP 33
int3 = 13                                                               # STEP 34
avl1.insert(int0)                                                       # STEP 35
avl1.delete(int2)                                                       # STEP 36
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105050fc8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE 3
int0 = 18                                                                # STEP 0
int1 = 17                                                                # STEP 1
int2 = 5                                                                 # STEP 2
int3 = 7                                                                 # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
avl1.delete(int1)                                                        # STEP 5
int1 = 5                                                                 # STEP 6
avl1.delete(int3)                                                        # STEP 7
avl1.insert(int3)                                                        # STEP 8
avl2 = avl.AVLTree()                                                     # STEP 9
avl2.delete(int1)                                                       # STEP 10
int1 = 6                                                                # STEP 11
avl2.insert(int1)                                                       # STEP 12
int1 = 17                                                               # STEP 13
avl0 = avl.AVLTree()                                                    # STEP 14
avl1.insert(int0)                                                       # STEP 15
avl0.delete(int2)                                                       # STEP 16
int2 = 4                                                                # STEP 17
avl0.insert(int3)                                                       # STEP 18
avl0.delete(int3)                                                       # STEP 19
avl2.insert(int2)                                                       # STEP 20
result = avl1.find(int3)                                                # STEP 21
result = avl0.find(int3)                                                # STEP 22
avl0.insert(int3)                                                       # STEP 23
avl0.delete(int3)                                                       # STEP 24
avl0.delete(int0)                                                       # STEP 25
avl2.insert(int3)                                                       # STEP 26
avl1.delete(int0)                                                       # STEP 27
avl2.insert(int2)                                                       # STEP 28
avl0.insert(int1)                                                       # STEP 29
result = avl0.inorder()                                                 # STEP 30
result = avl0.find(int3)                                                # STEP 31
int1 = 3                                                                # STEP 32
result = avl1.inorder()                                                 # STEP 33
avl1.insert(int0)                                                       # STEP 34
avl2.insert(int2)                                                       # STEP 35
avl0.delete(int1)                                                       # STEP 36
avl1.delete(int1)                                                       # STEP 37
avl2.delete(int1)                                                       # STEP 38
avl2.insert(int0)                                                       # STEP 39
avl0.insert(int0)                                                       # STEP 40
avl2.insert(int0)                                                       # STEP 41
avl0.insert(int2)                                                       # STEP 42
avl0.delete(int2)                                                       # STEP 43
result = avl0.find(int1)                                                # STEP 44
avl0.insert(int1)                                                       # STEP 45
result = avl0.inorder()                                                 # STEP 46
avl2.insert(int3)                                                       # STEP 47
avl2.delete(int2)                                                       # STEP 48
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x101d33b48>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
196 BRANCHES COVERED
148 STATEMENTS COVERED

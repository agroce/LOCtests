Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.62171.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105b18a28>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
Original test has 81 steps

SAVING TEST AS failure.62171.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 14                                                                # STEP 0
ACTION: int2 = 14 
int2 = None : <type 'NoneType'>
=> int2 = 14 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 1
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x10557f0e0> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl2.find(int2)                                                 # STEP 2
ACTION: result = avl2.find(int2) 
int2 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10557f0e0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl2.insert(int2)                                                        # STEP 3
ACTION: avl2.insert(int2) 
int2 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10557f0e0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([14]) : <type 'set'>
==================================================
avl2.delete(int2)                                                        # STEP 4
ACTION: avl2.delete(int2) 
int2 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10557f0e0> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl2.inorder()                                                  # STEP 5
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x10557f0e0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int2)                                                        # STEP 6
ACTION: avl2.insert(int2) 
int2 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10557f0e0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([14]) : <type 'set'>
==================================================
result = avl2.inorder()                                                  # STEP 7
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x10557f0e0> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int2)                                                        # STEP 8
ACTION: avl2.insert(int2) 
int2 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10557f0e0> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl2.insert(int2)                                                        # STEP 9
ACTION: avl2.insert(int2) 
int2 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10557f0e0> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
result = avl2.inorder()                                                 # STEP 10
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x10557f0e0> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int2)                                                       # STEP 11
ACTION: avl2.insert(int2) 
int2 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10557f0e0> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl2.insert(int2)                                                       # STEP 12
ACTION: avl2.insert(int2) 
int2 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10557f0e0> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
result = avl2.inorder()                                                 # STEP 13
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x10557f0e0> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int2)                                                       # STEP 14
ACTION: avl2.insert(int2) 
int2 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10557f0e0> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
result = avl2.inorder()                                                 # STEP 15
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x10557f0e0> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl2.inorder()                                                 # STEP 16
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x10557f0e0> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int2)                                                       # STEP 17
ACTION: avl2.delete(int2) 
int2 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10557f0e0> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 18
ACTION: avl2.delete(int2) 
int2 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10557f0e0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int2 = 16                                                               # STEP 19
ACTION: int2 = 16 
int2 = 14 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 20
ACTION: avl2.insert(int2) 
int2 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10557f0e0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([16]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 21
ACTION: avl2.insert(int2) 
int2 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10557f0e0> : <type 'instance'>
avl_REF2 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
result = avl2.find(int2)                                                # STEP 22
ACTION: result = avl2.find(int2) 
int2 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10557f0e0> : <type 'instance'>
avl_REF2 = set([16]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl2.insert(int2)                                                       # STEP 23
ACTION: avl2.insert(int2) 
int2 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10557f0e0> : <type 'instance'>
avl_REF2 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl2.delete(int2)                                                       # STEP 24
ACTION: avl2.delete(int2) 
int2 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10557f0e0> : <type 'instance'>
avl_REF2 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 25
ACTION: avl2.delete(int2) 
int2 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10557f0e0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.delete(int2)                                                       # STEP 26
ACTION: avl2.delete(int2) 
int2 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10557f0e0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.delete(int2)                                                       # STEP 27
ACTION: avl2.delete(int2) 
int2 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10557f0e0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int1 = 10                                                               # STEP 28
ACTION: int1 = 10 
int1 = None : <type 'NoneType'>
=> int1 = 10 : <type 'int'>
==================================================
int3 = 6                                                                # STEP 29
ACTION: int3 = 6 
int3 = None : <type 'NoneType'>
=> int3 = 6 : <type 'int'>
==================================================
result = avl2.find(int3)                                                # STEP 30
ACTION: result = avl2.find(int3) 
int3 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10557f0e0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
int3 = 17                                                               # STEP 31
ACTION: int3 = 17 
int3 = 6 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
int0 = 7                                                                # STEP 32
ACTION: int0 = 7 
int0 = None : <type 'NoneType'>
=> int0 = 7 : <type 'int'>
==================================================
result = avl2.find(int3)                                                # STEP 33
ACTION: result = avl2.find(int3) 
int3 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10557f0e0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl2.delete(int1)                                                       # STEP 34
ACTION: avl2.delete(int1) 
int1 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10557f0e0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int1 = 7                                                                # STEP 35
ACTION: int1 = 7 
int1 = 10 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
int2 = 6                                                                # STEP 36
ACTION: int2 = 6 
int2 = 16 : <type 'int'>
=> int2 = 6 : <type 'int'>
==================================================
int3 = 19                                                               # STEP 37
ACTION: int3 = 19 
int3 = 17 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 38
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x10557f0e0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int1)                                                       # STEP 39
ACTION: avl2.delete(int1) 
int1 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10557f0e0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.delete(int1)                                                       # STEP 40
ACTION: avl2.delete(int1) 
int1 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10557f0e0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.delete(int3)                                                       # STEP 41
ACTION: avl2.delete(int3) 
int3 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10557f0e0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
result = avl2.inorder()                                                 # STEP 42
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x10557f0e0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int3)                                                       # STEP 43
ACTION: avl2.delete(int3) 
int3 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10557f0e0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.delete(int0)                                                       # STEP 44
ACTION: avl2.delete(int0) 
int0 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10557f0e0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.insert(int2)                                                       # STEP 45
ACTION: avl2.insert(int2) 
int2 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10557f0e0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([6]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 46
ACTION: avl2.delete(int3) 
int3 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10557f0e0> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2 == avl2                                                            # STEP 47
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x10557f0e0> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl2.delete(int2)                                                       # STEP 48
ACTION: avl2.delete(int2) 
int2 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10557f0e0> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 49
ACTION: avl2.insert(int2) 
int2 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10557f0e0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([6]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 50
ACTION: avl2.delete(int1) 
int1 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10557f0e0> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.delete(int0)                                                       # STEP 51
ACTION: avl2.delete(int0) 
int0 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10557f0e0> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
result = avl2.find(int1)                                                # STEP 52
ACTION: result = avl2.find(int1) 
int1 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10557f0e0> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl2.delete(int0)                                                       # STEP 53
ACTION: avl2.delete(int0) 
int0 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10557f0e0> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.delete(int3)                                                       # STEP 54
ACTION: avl2.delete(int3) 
int3 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10557f0e0> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.insert(int2)                                                       # STEP 55
ACTION: avl2.insert(int2) 
int2 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10557f0e0> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl2.delete(int2)                                                       # STEP 56
ACTION: avl2.delete(int2) 
int2 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10557f0e0> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 57
ACTION: avl2.insert(int0) 
int0 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10557f0e0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([7]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 58
ACTION: avl2.insert(int0) 
int0 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10557f0e0> : <type 'instance'>
avl_REF2 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
result = avl2.find(int0)                                                # STEP 59
ACTION: result = avl2.find(int0) 
int0 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10557f0e0> : <type 'instance'>
avl_REF2 = set([7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
result = avl2.inorder()                                                 # STEP 60
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x10557f0e0> : <type 'instance'>
avl_REF2 = set([7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int3)                                                       # STEP 61
ACTION: avl2.delete(int3) 
int3 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10557f0e0> : <type 'instance'>
avl_REF2 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.delete(int1)                                                       # STEP 62
ACTION: avl2.delete(int1) 
int1 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10557f0e0> : <type 'instance'>
avl_REF2 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 63
ACTION: avl2.insert(int2) 
int2 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10557f0e0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([6]) : <type 'set'>
==================================================
int1 = 13                                                               # STEP 64
ACTION: int1 = 13 
int1 = 7 : <type 'int'>
=> int1 = 13 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 65
ACTION: avl2.insert(int0) 
int0 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10557f0e0> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([6, 7]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 66
ACTION: avl2.delete(int2) 
int2 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10557f0e0> : <type 'instance'>
avl_REF2 = set([6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([7]) : <type 'set'>
==================================================
int2 = 19                                                               # STEP 67
ACTION: int2 = 19 
int2 = 6 : <type 'int'>
=> int2 = 19 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 68
ACTION: avl2.delete(int2) 
int2 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10557f0e0> : <type 'instance'>
avl_REF2 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int3 = 19                                                               # STEP 69
ACTION: int3 = 19 
int3 = 19 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 70
ACTION: avl2.insert(int1) 
int1 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10557f0e0> : <type 'instance'>
avl_REF2 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([13, 7]) : <type 'set'>
==================================================
result = avl2.find(int0)                                                # STEP 71
ACTION: result = avl2.find(int0) 
int0 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10557f0e0> : <type 'instance'>
avl_REF2 = set([13, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl2.delete(int3)                                                       # STEP 72
ACTION: avl2.delete(int3) 
int3 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10557f0e0> : <type 'instance'>
avl_REF2 = set([13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.insert(int3)                                                       # STEP 73
ACTION: avl2.insert(int3) 
int3 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10557f0e0> : <type 'instance'>
avl_REF2 = set([13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([19, 13, 7]) : <type 'set'>
==================================================
int3 = 5                                                                # STEP 74
ACTION: int3 = 5 
int3 = 19 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 75
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x10557f0e0> : <type 'instance'>
avl_REF2 = set([19, 13, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int3)                                                       # STEP 76
ACTION: avl2.insert(int3) 
int3 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10557f0e0> : <type 'instance'>
avl_REF2 = set([19, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([5, 7, 13, 19]) : <type 'set'>
==================================================
int3 = 7                                                                # STEP 77
ACTION: int3 = 7 
int3 = 5 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 78
ACTION: avl2.insert(int0) 
int0 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10557f0e0> : <type 'instance'>
avl_REF2 = set([5, 7, 13, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
int0 = 13                                                               # STEP 79
ACTION: int0 = 13 
int0 = 7 : <type 'int'>
=> int0 = 13 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 80
ACTION: avl2.delete(int0) 
int0 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10557f0e0> : <type 'instance'>
avl_REF2 = set([5, 7, 13, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([5, 7, 19]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1053b4e60>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
  9 [2:0]
-- < 2 [1:-1]
---- > 3 [0:0] L
-- > 14 [1:0]
---- < 11 [0:0] L
---- > 17 [0:0] L
set([2, 3, 9, 11, 14, 17])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1059cfc20>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
Original test has 53 steps

SAVING TEST AS failure.62171.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 2                                                                 # STEP 0
ACTION: int3 = 2 
int3 = None : <type 'NoneType'>
=> int3 = 2 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 1
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x1059cf248> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
result = avl1.inorder()                                                  # STEP 2
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x1059cf248> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int2 = 15                                                                # STEP 3
ACTION: int2 = 15 
int2 = None : <type 'NoneType'>
=> int2 = 15 : <type 'int'>
==================================================
avl1.insert(int3)                                                        # STEP 4
ACTION: avl1.insert(int3) 
int3 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1059cf248> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([2]) : <type 'set'>
==================================================
avl1.delete(int2)                                                        # STEP 5
ACTION: avl1.delete(int2) 
int2 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1059cf248> : <type 'instance'>
avl_REF1 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int3 = 13                                                                # STEP 6
ACTION: int3 = 13 
int3 = 2 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
result = avl1.inorder()                                                  # STEP 7
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x1059cf248> : <type 'instance'>
avl_REF1 = set([2]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int3)                                                        # STEP 8
ACTION: avl1.insert(int3) 
int3 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1059cf248> : <type 'instance'>
avl_REF1 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([2, 13]) : <type 'set'>
==================================================
avl1.insert(int3)                                                        # STEP 9
ACTION: avl1.insert(int3) 
int3 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1059cf248> : <type 'instance'>
avl_REF1 = set([2, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
int1 = 17                                                               # STEP 10
ACTION: int1 = 17 
int1 = None : <type 'NoneType'>
=> int1 = 17 : <type 'int'>
==================================================
int0 = 14                                                               # STEP 11
ACTION: int0 = 14 
int0 = None : <type 'NoneType'>
=> int0 = 14 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 12
ACTION: avl1.delete(int2) 
int2 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1059cf248> : <type 'instance'>
avl_REF1 = set([2, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int2 = 3                                                                # STEP 13
ACTION: int2 = 3 
int2 = 15 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 14
ACTION: avl1.insert(int1) 
int1 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1059cf248> : <type 'instance'>
avl_REF1 = set([2, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([17, 2, 13]) : <type 'set'>
==================================================
avl1 == avl1                                                            # STEP 15
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x1059cf248> : <type 'instance'>
avl_REF1 = set([17, 2, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.insert(int3)                                                       # STEP 16
ACTION: avl1.insert(int3) 
int3 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1059cf248> : <type 'instance'>
avl_REF1 = set([17, 2, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
int1 = 9                                                                # STEP 17
ACTION: int1 = 9 
int1 = 17 : <type 'int'>
=> int1 = 9 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 18
ACTION: avl1.delete(int1) 
int1 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1059cf248> : <type 'instance'>
avl_REF1 = set([17, 2, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
result = avl1.inorder()                                                 # STEP 19
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x1059cf248> : <type 'instance'>
avl_REF1 = set([17, 2, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int3 = 11                                                               # STEP 20
ACTION: int3 = 11 
int3 = 13 : <type 'int'>
=> int3 = 11 : <type 'int'>
==================================================
result = avl1.find(int1)                                                # STEP 21
ACTION: result = avl1.find(int1) 
int1 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1059cf248> : <type 'instance'>
avl_REF1 = set([17, 2, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl1.insert(int2)                                                       # STEP 22
ACTION: avl1.insert(int2) 
int2 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1059cf248> : <type 'instance'>
avl_REF1 = set([17, 2, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([17, 2, 3, 13]) : <type 'set'>
==================================================
result = avl1.find(int0)                                                # STEP 23
ACTION: result = avl1.find(int0) 
int0 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1059cf248> : <type 'instance'>
avl_REF1 = set([17, 2, 3, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl1.insert(int1)                                                       # STEP 24
ACTION: avl1.insert(int1) 
int1 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1059cf248> : <type 'instance'>
avl_REF1 = set([17, 2, 3, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([17, 2, 3, 13, 9]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 25
ACTION: avl1.delete(int3) 
int3 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1059cf248> : <type 'instance'>
avl_REF1 = set([17, 2, 3, 13, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.insert(int3)                                                       # STEP 26
ACTION: avl1.insert(int3) 
int3 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1059cf248> : <type 'instance'>
avl_REF1 = set([17, 2, 3, 13, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([2, 3, 9, 11, 13, 17]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 27
ACTION: avl1.delete(int2) 
int2 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1059cf248> : <type 'instance'>
avl_REF1 = set([2, 3, 9, 11, 13, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([2, 9, 11, 13, 17]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 28
ACTION: avl1.delete(int2) 
int2 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1059cf248> : <type 'instance'>
avl_REF1 = set([2, 9, 11, 13, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
result = avl1.find(int3)                                                # STEP 29
ACTION: result = avl1.find(int3) 
int3 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1059cf248> : <type 'instance'>
avl_REF1 = set([2, 9, 11, 13, 17]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
int3 = 13                                                               # STEP 30
ACTION: int3 = 13 
int3 = 11 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 31
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x1059cf248> : <type 'instance'>
avl_REF1 = set([2, 9, 11, 13, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.insert(int3)                                                       # STEP 32
ACTION: avl1.insert(int3) 
int3 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1059cf248> : <type 'instance'>
avl_REF1 = set([2, 9, 11, 13, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
avl1.insert(int1)                                                       # STEP 33
ACTION: avl1.insert(int1) 
int1 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1059cf248> : <type 'instance'>
avl_REF1 = set([2, 9, 11, 13, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl1.insert(int0)                                                       # STEP 34
ACTION: avl1.insert(int0) 
int0 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1059cf248> : <type 'instance'>
avl_REF1 = set([2, 9, 11, 13, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([2, 9, 11, 13, 14, 17]) : <type 'set'>
==================================================
int1 = 17                                                               # STEP 35
ACTION: int1 = 17 
int1 = 9 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 36
ACTION: avl1.insert(int1) 
int1 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1059cf248> : <type 'instance'>
avl_REF1 = set([2, 9, 11, 13, 14, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl1.delete(int3)                                                       # STEP 37
ACTION: avl1.delete(int3) 
int3 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1059cf248> : <type 'instance'>
avl_REF1 = set([2, 9, 11, 13, 14, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([2, 9, 11, 14, 17]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 38
ACTION: avl1.insert(int2) 
int2 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1059cf248> : <type 'instance'>
avl_REF1 = set([2, 9, 11, 14, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([2, 3, 9, 11, 14, 17]) : <type 'set'>
==================================================
avl1.display()                                                          # STEP 39
ACTION: avl1.display() 
avl1 = <avlbug2.AVLTree instance at 0x1059cf248> : <type 'instance'>
avl_REF1 = set([2, 3, 9, 11, 14, 17]) : <type 'set'>
  9 [2:0]
-- < 2 [1:-1]
---- > 3 [0:0] L
-- > 14 [1:0]
---- < 11 [0:0] L
---- > 17 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([2, 3, 9, 11, 14, 17])
==================================================
int2 = 11                                                               # STEP 40
ACTION: int2 = 11 
int2 = 3 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
int3 = 9                                                                # STEP 41
ACTION: int3 = 9 
int3 = 13 : <type 'int'>
=> int3 = 9 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 42
ACTION: avl1.delete(int0) 
int0 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1059cf248> : <type 'instance'>
avl_REF1 = set([2, 3, 9, 11, 14, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([2, 3, 9, 11, 17]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 43
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x1059cf248> : <type 'instance'>
avl_REF1 = set([2, 3, 9, 11, 17]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int0 = 5                                                                # STEP 44
ACTION: int0 = 5 
int0 = 14 : <type 'int'>
=> int0 = 5 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 45
ACTION: avl1.delete(int2) 
int2 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1059cf248> : <type 'instance'>
avl_REF1 = set([2, 3, 9, 11, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([2, 3, 9, 17]) : <type 'set'>
==================================================
result = avl1.find(int3)                                                # STEP 46
ACTION: result = avl1.find(int3) 
int3 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1059cf248> : <type 'instance'>
avl_REF1 = set([2, 3, 9, 17]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl1.insert(int0)                                                       # STEP 47
ACTION: avl1.insert(int0) 
int0 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1059cf248> : <type 'instance'>
avl_REF1 = set([2, 3, 9, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([2, 3, 5, 9, 17]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 48
ACTION: avl1.insert(int0) 
int0 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1059cf248> : <type 'instance'>
avl_REF1 = set([2, 3, 5, 9, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.delete(int0)                                                       # STEP 49
ACTION: avl1.delete(int0) 
int0 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1059cf248> : <type 'instance'>
avl_REF1 = set([2, 3, 5, 9, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([2, 3, 9, 17]) : <type 'set'>
==================================================
result = avl1.find(int2)                                                # STEP 50
ACTION: result = avl1.find(int2) 
int2 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1059cf248> : <type 'instance'>
avl_REF1 = set([2, 3, 9, 17]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int0 = 4                                                                # STEP 51
ACTION: int0 = 4 
int0 = 5 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 52
ACTION: avl1.delete(int3) 
int3 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1059cf248> : <type 'instance'>
avl_REF1 = set([2, 3, 9, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([2, 3, 17]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1053f1878>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
TEST #3 STEP #8 (0:00:30.080493) Mon May  1 17:51:39 2017 [ 157 stmts 208 branches ]
  11 [2:0]
-- < 8 [1:0]
---- < 2 [0:0] L
---- > 10 [0:0] L
-- > 19 [1:1]
---- < 15 [0:0] L
set([2, 8, 10, 11, 15, 19])
  11 [2:0]
-- < 8 [1:0]
---- < 2 [0:0] L
---- > 10 [0:0] L
-- > 19 [1:0]
---- < 15 [0:0] L
---- > 20 [0:0] L
set([2, 8, 10, 11, 15, 19, 20])
  11 [2:0]
-- < 8 [1:0]
---- < 1 [0:0] L
---- > 10 [0:0] L
-- > 19 [1:1]
---- < 15 [0:0] L
set([1, 8, 10, 11, 15, 19])
  12 [2:0]
-- < 6 [1:0]
---- < 2 [0:0] L
---- > 8 [0:0] L
-- > 13 [1:-1]
---- > 18 [0:0] L
set([2, 6, 8, 12, 13, 18])
  12 [3:1]
-- < 6 [2:1]
---- < 2 [1:1]
------ < 1 [0:0] L
---- > 8 [0:0] L
-- > 13 [1:-1]
---- > 18 [0:0] L
set([1, 2, 6, 8, 12, 13, 18])
  9 [2:0]
-- < 2 [1:0]
---- < 1 [0:0] L
---- > 8 [0:0] L
-- > 11 [1:1]
---- < 10 [0:0] L
set([1, 2, 8, 9, 10, 11])
  9 [2:0]
-- < 2 [1:0]
---- < 1 [0:0] L
---- > 8 [0:0] L
-- > 11 [1:1]
---- < 10 [0:0] L
set([1, 2, 8, 9, 10, 11])
  9 [2:0]
-- < 2 [1:0]
---- < 1 [0:0] L
---- > 8 [0:0] L
-- > 11 [1:1]
---- < 10 [0:0] L
set([1, 2, 8, 9, 10, 11])
  9 [2:0]
-- < 2 [1:0]
---- < 1 [0:0] L
---- > 8 [0:0] L
-- > 11 [1:1]
---- < 10 [0:0] L
set([1, 2, 8, 9, 10, 11])
  9 [2:0]
-- < 2 [1:0]
---- < 1 [0:0] L
---- > 8 [0:0] L
-- > 11 [1:1]
---- < 10 [0:0] L
set([1, 2, 8, 9, 10, 11])
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 90
STOPPING TESTING DUE TO TIMEOUT
8.27045850261 PERCENT COVERED
60.2949099541 TOTAL RUNTIME
5 EXECUTED
424 TOTAL TEST OPERATIONS
22.7326920033 TIME SPENT EXECUTING TEST OPERATIONS
0.0475077629089 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
22.5965571404 TIME SPENT CHECKING PROPERTIES
45.3292491436 TOTAL TIME SPENT RUNNING SUT
0.00448822975159 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
2 FAILED
0 REPEATS OF FAILURES
2 ACTUAL DISTINCT FAILURES

FAILURE 0
int2 = 14                                                                # STEP 0
avl2 = avl.AVLTree()                                                     # STEP 1
result = avl2.find(int2)                                                 # STEP 2
avl2.insert(int2)                                                        # STEP 3
avl2.delete(int2)                                                        # STEP 4
result = avl2.inorder()                                                  # STEP 5
avl2.insert(int2)                                                        # STEP 6
result = avl2.inorder()                                                  # STEP 7
avl2.insert(int2)                                                        # STEP 8
avl2.insert(int2)                                                        # STEP 9
result = avl2.inorder()                                                 # STEP 10
avl2.insert(int2)                                                       # STEP 11
avl2.insert(int2)                                                       # STEP 12
result = avl2.inorder()                                                 # STEP 13
avl2.insert(int2)                                                       # STEP 14
result = avl2.inorder()                                                 # STEP 15
result = avl2.inorder()                                                 # STEP 16
avl2.delete(int2)                                                       # STEP 17
avl2.delete(int2)                                                       # STEP 18
int2 = 16                                                               # STEP 19
avl2.insert(int2)                                                       # STEP 20
avl2.insert(int2)                                                       # STEP 21
result = avl2.find(int2)                                                # STEP 22
avl2.insert(int2)                                                       # STEP 23
avl2.delete(int2)                                                       # STEP 24
avl2.delete(int2)                                                       # STEP 25
avl2.delete(int2)                                                       # STEP 26
avl2.delete(int2)                                                       # STEP 27
int1 = 10                                                               # STEP 28
int3 = 6                                                                # STEP 29
result = avl2.find(int3)                                                # STEP 30
int3 = 17                                                               # STEP 31
int0 = 7                                                                # STEP 32
result = avl2.find(int3)                                                # STEP 33
avl2.delete(int1)                                                       # STEP 34
int1 = 7                                                                # STEP 35
int2 = 6                                                                # STEP 36
int3 = 19                                                               # STEP 37
result = avl2.inorder()                                                 # STEP 38
avl2.delete(int1)                                                       # STEP 39
avl2.delete(int1)                                                       # STEP 40
avl2.delete(int3)                                                       # STEP 41
result = avl2.inorder()                                                 # STEP 42
avl2.delete(int3)                                                       # STEP 43
avl2.delete(int0)                                                       # STEP 44
avl2.insert(int2)                                                       # STEP 45
avl2.delete(int3)                                                       # STEP 46
avl2 == avl2                                                            # STEP 47
avl2.delete(int2)                                                       # STEP 48
avl2.insert(int2)                                                       # STEP 49
avl2.delete(int1)                                                       # STEP 50
avl2.delete(int0)                                                       # STEP 51
result = avl2.find(int1)                                                # STEP 52
avl2.delete(int0)                                                       # STEP 53
avl2.delete(int3)                                                       # STEP 54
avl2.insert(int2)                                                       # STEP 55
avl2.delete(int2)                                                       # STEP 56
avl2.insert(int0)                                                       # STEP 57
avl2.insert(int0)                                                       # STEP 58
result = avl2.find(int0)                                                # STEP 59
result = avl2.inorder()                                                 # STEP 60
avl2.delete(int3)                                                       # STEP 61
avl2.delete(int1)                                                       # STEP 62
avl2.insert(int2)                                                       # STEP 63
int1 = 13                                                               # STEP 64
avl2.insert(int0)                                                       # STEP 65
avl2.delete(int2)                                                       # STEP 66
int2 = 19                                                               # STEP 67
avl2.delete(int2)                                                       # STEP 68
int3 = 19                                                               # STEP 69
avl2.insert(int1)                                                       # STEP 70
result = avl2.find(int0)                                                # STEP 71
avl2.delete(int3)                                                       # STEP 72
avl2.insert(int3)                                                       # STEP 73
int3 = 5                                                                # STEP 74
result = avl2.inorder()                                                 # STEP 75
avl2.insert(int3)                                                       # STEP 76
int3 = 7                                                                # STEP 77
avl2.insert(int0)                                                       # STEP 78
int0 = 13                                                               # STEP 79
avl2.delete(int0)                                                       # STEP 80
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1053b4e60>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE 1
int3 = 2                                                                 # STEP 0
avl1 = avl.AVLTree()                                                     # STEP 1
result = avl1.inorder()                                                  # STEP 2
int2 = 15                                                                # STEP 3
avl1.insert(int3)                                                        # STEP 4
avl1.delete(int2)                                                        # STEP 5
int3 = 13                                                                # STEP 6
result = avl1.inorder()                                                  # STEP 7
avl1.insert(int3)                                                        # STEP 8
avl1.insert(int3)                                                        # STEP 9
int1 = 17                                                               # STEP 10
int0 = 14                                                               # STEP 11
avl1.delete(int2)                                                       # STEP 12
int2 = 3                                                                # STEP 13
avl1.insert(int1)                                                       # STEP 14
avl1 == avl1                                                            # STEP 15
avl1.insert(int3)                                                       # STEP 16
int1 = 9                                                                # STEP 17
avl1.delete(int1)                                                       # STEP 18
result = avl1.inorder()                                                 # STEP 19
int3 = 11                                                               # STEP 20
result = avl1.find(int1)                                                # STEP 21
avl1.insert(int2)                                                       # STEP 22
result = avl1.find(int0)                                                # STEP 23
avl1.insert(int1)                                                       # STEP 24
avl1.delete(int3)                                                       # STEP 25
avl1.insert(int3)                                                       # STEP 26
avl1.delete(int2)                                                       # STEP 27
avl1.delete(int2)                                                       # STEP 28
result = avl1.find(int3)                                                # STEP 29
int3 = 13                                                               # STEP 30
avl1 == avl1                                                            # STEP 31
avl1.insert(int3)                                                       # STEP 32
avl1.insert(int1)                                                       # STEP 33
avl1.insert(int0)                                                       # STEP 34
int1 = 17                                                               # STEP 35
avl1.insert(int1)                                                       # STEP 36
avl1.delete(int3)                                                       # STEP 37
avl1.insert(int2)                                                       # STEP 38
avl1.display()                                                          # STEP 39
int2 = 11                                                               # STEP 40
int3 = 9                                                                # STEP 41
avl1.delete(int0)                                                       # STEP 42
result = avl1.inorder()                                                 # STEP 43
int0 = 5                                                                # STEP 44
avl1.delete(int2)                                                       # STEP 45
result = avl1.find(int3)                                                # STEP 46
avl1.insert(int0)                                                       # STEP 47
avl1.insert(int0)                                                       # STEP 48
avl1.delete(int0)                                                       # STEP 49
result = avl1.find(int2)                                                # STEP 50
int0 = 4                                                                # STEP 51
avl1.delete(int3)                                                       # STEP 52
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1053f1878>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
216 BRANCHES COVERED
162 STATEMENTS COVERED

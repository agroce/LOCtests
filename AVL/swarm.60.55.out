Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=True, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.302.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  7 [2:0]
-- < 5 [1:0]
---- < 3 [0:0] L
---- > 6 [0:0] L
-- > 9 [1:-1]
---- > 16 [0:0] L
set([3, 5, 6, 7, 9, 16])
  7 [3:-1]
-- < 5 [1:0]
---- < 3 [0:0] L
---- > 6 [0:0] L
-- > 15 [2:1]
---- < 9 [1:1]
------ < 8 [0:0] L
---- > 16 [0:0] L
set([3, 5, 6, 7, 8, 9, 15, 16])
  5 [3:-1]
-- < 3 [1:1]
---- < 1 [0:0] L
-- > 9 [2:0]
---- < 7 [1:0]
------ < 6 [0:0] L
------ > 8 [0:0] L
---- > 15 [1:0]
------ < 12 [0:0] L
------ > 17 [0:0] L
set([1, 3, 5, 6, 7, 8, 9, 12, 15, 17])
  9 [3:0]
-- < 5 [2:0]
---- < 3 [1:1]
------ < 1 [0:0] L
---- > 7 [1:0]
------ < 6 [0:0] L
------ > 8 [0:0] L
-- > 15 [2:-1]
---- < 12 [0:0] L
---- > 17 [1:1]
------ < 16 [0:0] L
set([1, 3, 5, 6, 7, 8, 9, 12, 15, 16, 17])
TEST #4 STEP #68 (0:00:30.004388) Fri Apr 28 06:01:09 2017 [ 125 stmts 168 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1031ee878>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 54 steps

SAVING TEST AS failure.302.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 6                                                                 # STEP 0
ACTION: int0 = 6 
int0 = None : <type 'NoneType'>
=> int0 = 6 : <type 'int'>
==================================================
int1 = 5                                                                 # STEP 1
ACTION: int1 = 5 
int1 = None : <type 'NoneType'>
=> int1 = 5 : <type 'int'>
==================================================
int2 = 5                                                                 # STEP 2
ACTION: int2 = 5 
int2 = None : <type 'NoneType'>
=> int2 = 5 : <type 'int'>
==================================================
int3 = 14                                                                # STEP 3
ACTION: int3 = 14 
int3 = None : <type 'NoneType'>
=> int3 = 14 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x105894050> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 5
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x105894368> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl1.delete(int1)                                                        # STEP 6
ACTION: avl1.delete(int1) 
int1 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105894050> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int1 = 15                                                                # STEP 7
ACTION: int1 = 15 
int1 = 5 : <type 'int'>
=> int1 = 15 : <type 'int'>
==================================================
result = avl1.find(int0)                                                 # STEP 8
ACTION: result = avl1.find(int0) 
int0 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105894050> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl2 == avl1                                                             # STEP 9
ACTION: avl2 == avl1 
avl2 = <avl.AVLTree instance at 0x105894368> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x105894050> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
avl2.delete(int2)                                                       # STEP 10
ACTION: avl2.delete(int2) 
int2 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105894368> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int2 = 16                                                               # STEP 11
ACTION: int2 = 16 
int2 = 5 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 12
ACTION: avl2.delete(int1) 
int1 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105894368> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int1)                                                       # STEP 13
ACTION: avl2.insert(int1) 
int1 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105894368> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([15]) : <type 'set'>
==================================================
result = avl1.find(int2)                                                # STEP 14
ACTION: result = avl1.find(int2) 
int2 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105894050> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int1 = 19                                                               # STEP 15
ACTION: int1 = 19 
int1 = 15 : <type 'int'>
=> int1 = 19 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 16
ACTION: avl1.insert(int2) 
int2 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105894050> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([16]) : <type 'set'>
==================================================
int0 = 15                                                               # STEP 17
ACTION: int0 = 15 
int0 = 6 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
int2 = 18                                                               # STEP 18
ACTION: int2 = 18 
int2 = 16 : <type 'int'>
=> int2 = 18 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 19
ACTION: avl2.insert(int3) 
int3 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105894368> : <type 'instance'>
avl_REF2 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([14, 15]) : <type 'set'>
==================================================
int3 = 20                                                               # STEP 20
ACTION: int3 = 20 
int3 = 14 : <type 'int'>
=> int3 = 20 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 21
ACTION: avl1.insert(int3) 
int3 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105894050> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([16, 20]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 22
ACTION: avl1.delete(int0) 
int0 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105894050> : <type 'instance'>
avl_REF1 = set([16, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int0 = 20                                                               # STEP 23
ACTION: int0 = 20 
int0 = 15 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
int3 = 16                                                               # STEP 24
ACTION: int3 = 16 
int3 = 20 : <type 'int'>
=> int3 = 16 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 25
ACTION: avl1.insert(int3) 
int3 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105894050> : <type 'instance'>
avl_REF1 = set([16, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
int3 = 9                                                                # STEP 26
ACTION: int3 = 9 
int3 = 16 : <type 'int'>
=> int3 = 9 : <type 'int'>
==================================================
result = avl1.find(int2)                                                # STEP 27
ACTION: result = avl1.find(int2) 
int2 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105894050> : <type 'instance'>
avl_REF1 = set([16, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
result = avl2.find(int3)                                                # STEP 28
ACTION: result = avl2.find(int3) 
int3 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105894368> : <type 'instance'>
avl_REF2 = set([14, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
int3 = 20                                                               # STEP 29
ACTION: int3 = 20 
int3 = 9 : <type 'int'>
=> int3 = 20 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 30
ACTION: avl2.insert(int3) 
int3 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105894368> : <type 'instance'>
avl_REF2 = set([14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([20, 14, 15]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 31
ACTION: avl1.delete(int3) 
int3 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105894050> : <type 'instance'>
avl_REF1 = set([16, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([16]) : <type 'set'>
==================================================
int3 = 19                                                               # STEP 32
ACTION: int3 = 19 
int3 = 20 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
int2 = 8                                                                # STEP 33
ACTION: int2 = 8 
int2 = 18 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 34
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x105894050> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.insert(int1)                                                       # STEP 35
ACTION: avl1.insert(int1) 
int1 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105894050> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([16, 19]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 36
ACTION: avl2.insert(int2) 
int2 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105894368> : <type 'instance'>
avl_REF2 = set([20, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([8, 20, 14, 15]) : <type 'set'>
==================================================
int2 = 15                                                               # STEP 37
ACTION: int2 = 15 
int2 = 8 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
int1 = 8                                                                # STEP 38
ACTION: int1 = 8 
int1 = 19 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
result = avl2.find(int3)                                                # STEP 39
ACTION: result = avl2.find(int3) 
int3 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105894368> : <type 'instance'>
avl_REF2 = set([8, 20, 14, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
int3 = 14                                                               # STEP 40
ACTION: int3 = 14 
int3 = 19 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 41
ACTION: avl1.insert(int0) 
int0 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105894050> : <type 'instance'>
avl_REF1 = set([16, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([16, 19, 20]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 42
ACTION: avl2.insert(int0) 
int0 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105894368> : <type 'instance'>
avl_REF2 = set([8, 20, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
result = avl2.find(int3)                                                # STEP 43
ACTION: result = avl2.find(int3) 
int3 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105894368> : <type 'instance'>
avl_REF2 = set([8, 20, 14, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
result = avl2.find(int1)                                                # STEP 44
ACTION: result = avl2.find(int1) 
int1 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105894368> : <type 'instance'>
avl_REF2 = set([8, 20, 14, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int1 = 9                                                                # STEP 45
ACTION: int1 = 9 
int1 = 8 : <type 'int'>
=> int1 = 9 : <type 'int'>
==================================================
int0 = 9                                                                # STEP 46
ACTION: int0 = 9 
int0 = 20 : <type 'int'>
=> int0 = 9 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 47
ACTION: avl1.delete(int3) 
int3 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105894050> : <type 'instance'>
avl_REF1 = set([16, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int3 = 7                                                                # STEP 48
ACTION: int3 = 7 
int3 = 14 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 49
ACTION: avl2.insert(int0) 
int0 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105894368> : <type 'instance'>
avl_REF2 = set([8, 20, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([8, 9, 20, 14, 15]) : <type 'set'>
==================================================
int0 = 15                                                               # STEP 50
ACTION: int0 = 15 
int0 = 9 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
avl2 == avl2                                                            # STEP 51
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x105894368> : <type 'instance'>
avl_REF2 = set([8, 9, 20, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl2 == avl2                                                            # STEP 52
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x105894368> : <type 'instance'>
avl_REF2 = set([8, 9, 20, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl2.delete(int0)                                                       # STEP 53
ACTION: avl2.delete(int0) 
int0 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105894368> : <type 'instance'>
avl_REF2 = set([8, 9, 20, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([8, 9, 20, 14]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1058953b0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 68
STOPPING TESTING DUE TO TIMEOUT
8.51713607058 PERCENT COVERED
60.1722378731 TOTAL RUNTIME
8 EXECUTED
722 TOTAL TEST OPERATIONS
27.9290878773 TIME SPENT EXECUTING TEST OPERATIONS
0.0257894992828 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
28.1421148777 TIME SPENT CHECKING PROPERTIES
56.071202755 TOTAL TIME SPENT RUNNING SUT
0.0044629573822 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int0 = 6                                                                 # STEP 0
int1 = 5                                                                 # STEP 1
int2 = 5                                                                 # STEP 2
int3 = 14                                                                # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
avl2 = avl.AVLTree()                                                     # STEP 5
avl1.delete(int1)                                                        # STEP 6
int1 = 15                                                                # STEP 7
result = avl1.find(int0)                                                 # STEP 8
avl2 == avl1                                                             # STEP 9
avl2.delete(int2)                                                       # STEP 10
int2 = 16                                                               # STEP 11
avl2.delete(int1)                                                       # STEP 12
avl2.insert(int1)                                                       # STEP 13
result = avl1.find(int2)                                                # STEP 14
int1 = 19                                                               # STEP 15
avl1.insert(int2)                                                       # STEP 16
int0 = 15                                                               # STEP 17
int2 = 18                                                               # STEP 18
avl2.insert(int3)                                                       # STEP 19
int3 = 20                                                               # STEP 20
avl1.insert(int3)                                                       # STEP 21
avl1.delete(int0)                                                       # STEP 22
int0 = 20                                                               # STEP 23
int3 = 16                                                               # STEP 24
avl1.insert(int3)                                                       # STEP 25
int3 = 9                                                                # STEP 26
result = avl1.find(int2)                                                # STEP 27
result = avl2.find(int3)                                                # STEP 28
int3 = 20                                                               # STEP 29
avl2.insert(int3)                                                       # STEP 30
avl1.delete(int3)                                                       # STEP 31
int3 = 19                                                               # STEP 32
int2 = 8                                                                # STEP 33
avl1 == avl1                                                            # STEP 34
avl1.insert(int1)                                                       # STEP 35
avl2.insert(int2)                                                       # STEP 36
int2 = 15                                                               # STEP 37
int1 = 8                                                                # STEP 38
result = avl2.find(int3)                                                # STEP 39
int3 = 14                                                               # STEP 40
avl1.insert(int0)                                                       # STEP 41
avl2.insert(int0)                                                       # STEP 42
result = avl2.find(int3)                                                # STEP 43
result = avl2.find(int1)                                                # STEP 44
int1 = 9                                                                # STEP 45
int0 = 9                                                                # STEP 46
avl1.delete(int3)                                                       # STEP 47
int3 = 7                                                                # STEP 48
avl2.insert(int0)                                                       # STEP 49
int0 = 15                                                               # STEP 50
avl2 == avl2                                                            # STEP 51
avl2 == avl2                                                            # STEP 52
avl2.delete(int0)                                                       # STEP 53
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1058953b0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
214 BRANCHES COVERED
161 STATEMENTS COVERED

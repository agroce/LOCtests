Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.62102.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  9 [2:0]
-- < 5 [1:0]
---- < 2 [0:0] L
---- > 6 [0:0] L
-- > 15 [1:0]
---- < 10 [0:0] L
---- > 20 [0:0] L
set([2, 5, 6, 9, 10, 15, 20])
  9 [3:-1]
-- < 5 [1:0]
---- < 2 [0:0] L
---- > 6 [0:0] L
-- > 15 [2:0]
---- < 10 [1:-1]
------ > 11 [0:0] L
---- > 20 [1:1]
------ < 19 [0:0] L
set([2, 5, 6, 9, 10, 11, 15, 19, 20])
  9 [3:-1]
-- < 5 [1:0]
---- < 2 [0:0] L
---- > 6 [0:0] L
-- > 15 [2:0]
---- < 10 [1:-1]
------ > 11 [0:0] L
---- > 20 [1:1]
------ < 19 [0:0] L
set([2, 5, 6, 9, 10, 11, 15, 19, 20])
  9 [3:-1]
-- < 5 [1:0]
---- < 2 [0:0] L
---- > 6 [0:0] L
-- > 15 [2:0]
---- < 10 [1:-1]
------ > 11 [0:0] L
---- > 20 [1:1]
------ < 19 [0:0] L
set([2, 5, 6, 9, 10, 11, 15, 19, 20])
  9 [3:-1]
-- < 5 [1:0]
---- < 2 [0:0] L
---- > 6 [0:0] L
-- > 15 [2:0]
---- < 10 [1:-1]
------ > 11 [0:0] L
---- > 20 [1:1]
------ < 19 [0:0] L
set([2, 5, 6, 9, 10, 11, 15, 19, 20])
  10 [2:0]
-- < 7 [1:0]
---- < 2 [0:0] L
---- > 9 [0:0] L
-- > 15 [1:0]
---- < 13 [0:0] L
---- > 19 [0:0] L
set([2, 7, 9, 10, 13, 15, 19])
  10 [3:1]
-- < 7 [2:-1]
---- < 2 [0:0] L
---- > 9 [1:1]
------ < 8 [0:0] L
-- > 15 [1:0]
---- < 13 [0:0] L
---- > 19 [0:0] L
set([2, 7, 8, 9, 10, 13, 15, 19])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103bb9908>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
Original test has 75 steps

SAVING TEST AS failure.62102.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 12                                                                # STEP 0
ACTION: int1 = 12 
int1 = None : <type 'NoneType'>
=> int1 = 12 : <type 'int'>
==================================================
int3 = 10                                                                # STEP 1
ACTION: int3 = 10 
int3 = None : <type 'NoneType'>
=> int3 = 10 : <type 'int'>
==================================================
int2 = 13                                                                # STEP 2
ACTION: int2 = 13 
int2 = None : <type 'NoneType'>
=> int2 = 13 : <type 'int'>
==================================================
int0 = 7                                                                 # STEP 3
ACTION: int0 = 7 
int0 = None : <type 'NoneType'>
=> int0 = 7 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x103bb9f80> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.insert(int2)                                                        # STEP 5
ACTION: avl1.insert(int2) 
int2 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103bb9f80> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([13]) : <type 'set'>
==================================================
avl1.insert(int0)                                                        # STEP 6
ACTION: avl1.insert(int0) 
int0 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103bb9f80> : <type 'instance'>
avl_REF1 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([13, 7]) : <type 'set'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 7
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x103a5bcf8> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.delete(int0)                                                        # STEP 8
ACTION: avl2.delete(int0) 
int0 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103a5bcf8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl1.delete(int2)                                                        # STEP 9
ACTION: avl1.delete(int2) 
int2 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103bb9f80> : <type 'instance'>
avl_REF1 = set([13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([7]) : <type 'set'>
==================================================
int0 = 15                                                               # STEP 10
ACTION: int0 = 15 
int0 = 7 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
avl2 == avl1                                                            # STEP 11
ACTION: avl2 == avl1 
avl2 = <avlbug2.AVLTree instance at 0x103a5bcf8> : <type 'instance'>
avl1 = <avlbug2.AVLTree instance at 0x103bb9f80> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
avl1.delete(int2)                                                       # STEP 12
ACTION: avl1.delete(int2) 
int2 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103bb9f80> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl2.delete(int1)                                                       # STEP 13
ACTION: avl2.delete(int1) 
int1 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103a5bcf8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl1.insert(int2)                                                       # STEP 14
ACTION: avl1.insert(int2) 
int2 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103bb9f80> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([13, 7]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 15
ACTION: avl1.insert(int3) 
int3 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103bb9f80> : <type 'instance'>
avl_REF1 = set([13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([10, 13, 7]) : <type 'set'>
==================================================
int2 = 9                                                                # STEP 16
ACTION: int2 = 9 
int2 = 13 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 17
ACTION: avl2.delete(int0) 
int0 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103a5bcf8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.delete(int1)                                                       # STEP 18
ACTION: avl2.delete(int1) 
int1 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103a5bcf8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int0 = 2                                                                # STEP 19
ACTION: int0 = 2 
int0 = 15 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
int1 = 11                                                               # STEP 20
ACTION: int1 = 11 
int1 = 12 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 21
ACTION: avl1.delete(int0) 
int0 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103bb9f80> : <type 'instance'>
avl_REF1 = set([10, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int3 = 19                                                               # STEP 22
ACTION: int3 = 19 
int3 = 10 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 23
ACTION: avl1.insert(int0) 
int0 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103bb9f80> : <type 'instance'>
avl_REF1 = set([10, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([10, 2, 13, 7]) : <type 'set'>
==================================================
int0 = 14                                                               # STEP 24
ACTION: int0 = 14 
int0 = 2 : <type 'int'>
=> int0 = 14 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 25
ACTION: avl2.insert(int0) 
int0 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103a5bcf8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([14]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 26
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x103bb9f80> : <type 'instance'>
avl_REF1 = set([10, 2, 13, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl2 == avl1                                                            # STEP 27
ACTION: avl2 == avl1 
avl2 = <avlbug2.AVLTree instance at 0x103a5bcf8> : <type 'instance'>
avl1 = <avlbug2.AVLTree instance at 0x103bb9f80> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
avl_REF1 = set([10, 2, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
avl1.insert(int2)                                                       # STEP 28
ACTION: avl1.insert(int2) 
int2 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103bb9f80> : <type 'instance'>
avl_REF1 = set([10, 2, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([9, 10, 2, 13, 7]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 29
ACTION: avl2.delete(int0) 
int0 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103a5bcf8> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 30
ACTION: avl2.insert(int0) 
int0 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103a5bcf8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([14]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 31
ACTION: avl2.insert(int2) 
int2 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103a5bcf8> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([9, 14]) : <type 'set'>
==================================================
int2 = 8                                                                # STEP 32
ACTION: int2 = 8 
int2 = 9 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
int0 = 20                                                               # STEP 33
ACTION: int0 = 20 
int0 = 14 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 34
ACTION: avl2.insert(int3) 
int3 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103a5bcf8> : <type 'instance'>
avl_REF2 = set([9, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([9, 19, 14]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 35
ACTION: avl1.delete(int1) 
int1 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103bb9f80> : <type 'instance'>
avl_REF1 = set([9, 10, 2, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
result = avl2.find(int0)                                                # STEP 36
ACTION: result = avl2.find(int0) 
int0 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103a5bcf8> : <type 'instance'>
avl_REF2 = set([9, 19, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl1 == avl2                                                            # STEP 37
ACTION: avl1 == avl2 
avl1 = <avlbug2.AVLTree instance at 0x103bb9f80> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x103a5bcf8> : <type 'instance'>
avl_REF1 = set([9, 10, 2, 13, 7]) : <type 'set'>
avl_REF2 = set([9, 19, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
avl1.delete(int1)                                                       # STEP 38
ACTION: avl1.delete(int1) 
int1 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103bb9f80> : <type 'instance'>
avl_REF1 = set([9, 10, 2, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl2 == avl1                                                            # STEP 39
ACTION: avl2 == avl1 
avl2 = <avlbug2.AVLTree instance at 0x103a5bcf8> : <type 'instance'>
avl1 = <avlbug2.AVLTree instance at 0x103bb9f80> : <type 'instance'>
avl_REF2 = set([9, 19, 14]) : <type 'set'>
avl_REF1 = set([9, 10, 2, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
avl2.delete(int0)                                                       # STEP 40
ACTION: avl2.delete(int0) 
int0 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103a5bcf8> : <type 'instance'>
avl_REF2 = set([9, 19, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int0 = 15                                                               # STEP 41
ACTION: int0 = 15 
int0 = 20 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 42
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x103a5bcf8> : <type 'instance'>
avl_REF2 = set([9, 19, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int1 = 18                                                               # STEP 43
ACTION: int1 = 18 
int1 = 11 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
result = avl2.find(int1)                                                # STEP 44
ACTION: result = avl2.find(int1) 
int1 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103a5bcf8> : <type 'instance'>
avl_REF2 = set([9, 19, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl2.delete(int3)                                                       # STEP 45
ACTION: avl2.delete(int3) 
int3 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103a5bcf8> : <type 'instance'>
avl_REF2 = set([9, 19, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([9, 14]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 46
ACTION: avl2.delete(int1) 
int1 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103a5bcf8> : <type 'instance'>
avl_REF2 = set([9, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl1.delete(int1)                                                       # STEP 47
ACTION: avl1.delete(int1) 
int1 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103bb9f80> : <type 'instance'>
avl_REF1 = set([9, 10, 2, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl2.delete(int3)                                                       # STEP 48
ACTION: avl2.delete(int3) 
int3 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103a5bcf8> : <type 'instance'>
avl_REF2 = set([9, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl1.insert(int3)                                                       # STEP 49
ACTION: avl1.insert(int3) 
int3 = 19 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103bb9f80> : <type 'instance'>
avl_REF1 = set([9, 10, 2, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([2, 7, 9, 10, 13, 19]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 50
ACTION: avl1.delete(int2) 
int2 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103bb9f80> : <type 'instance'>
avl_REF1 = set([2, 7, 9, 10, 13, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.delete(int2)                                                       # STEP 51
ACTION: avl1.delete(int2) 
int2 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103bb9f80> : <type 'instance'>
avl_REF1 = set([2, 7, 9, 10, 13, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl2.insert(int3)                                                       # STEP 52
ACTION: avl2.insert(int3) 
int3 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103a5bcf8> : <type 'instance'>
avl_REF2 = set([9, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([9, 19, 14]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 53
ACTION: avl1.insert(int0) 
int0 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103bb9f80> : <type 'instance'>
avl_REF1 = set([2, 7, 9, 10, 13, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([2, 7, 9, 10, 13, 15, 19]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 54
ACTION: avl2.delete(int2) 
int2 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103a5bcf8> : <type 'instance'>
avl_REF2 = set([9, 19, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2 == avl1                                                            # STEP 55
ACTION: avl2 == avl1 
avl2 = <avlbug2.AVLTree instance at 0x103a5bcf8> : <type 'instance'>
avl1 = <avlbug2.AVLTree instance at 0x103bb9f80> : <type 'instance'>
avl_REF2 = set([9, 19, 14]) : <type 'set'>
avl_REF1 = set([2, 7, 9, 10, 13, 15, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
avl1.display()                                                          # STEP 56
ACTION: avl1.display() 
avl1 = <avlbug2.AVLTree instance at 0x103bb9f80> : <type 'instance'>
avl_REF1 = set([2, 7, 9, 10, 13, 15, 19]) : <type 'set'>
  10 [2:0]
-- < 7 [1:0]
---- < 2 [0:0] L
---- > 9 [0:0] L
-- > 15 [1:0]
---- < 13 [0:0] L
---- > 19 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([2, 7, 9, 10, 13, 15, 19])
==================================================
avl2.delete(int2)                                                       # STEP 57
ACTION: avl2.delete(int2) 
int2 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103a5bcf8> : <type 'instance'>
avl_REF2 = set([9, 19, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl1.insert(int2)                                                       # STEP 58
ACTION: avl1.insert(int2) 
int2 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103bb9f80> : <type 'instance'>
avl_REF1 = set([2, 7, 9, 10, 13, 15, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([2, 7, 8, 9, 10, 13, 15, 19]) : <type 'set'>
==================================================
int1 = 4                                                                # STEP 59
ACTION: int1 = 4 
int1 = 18 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 60
ACTION: avl1.delete(int0) 
int0 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103bb9f80> : <type 'instance'>
avl_REF1 = set([2, 7, 8, 9, 10, 13, 15, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([2, 7, 8, 9, 10, 13, 19]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 61
ACTION: avl1.delete(int1) 
int1 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103bb9f80> : <type 'instance'>
avl_REF1 = set([2, 7, 8, 9, 10, 13, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int3 = 2                                                                # STEP 62
ACTION: int3 = 2 
int3 = 19 : <type 'int'>
=> int3 = 2 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 63
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x103da6b90> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 64
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x103bb9f80> : <type 'instance'>
avl_REF1 = set([2, 7, 8, 9, 10, 13, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int0)                                                       # STEP 65
ACTION: avl1.insert(int0) 
int0 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103bb9f80> : <type 'instance'>
avl_REF1 = set([2, 7, 8, 9, 10, 13, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([2, 7, 8, 9, 10, 13, 15, 19]) : <type 'set'>
==================================================
int0 = 1                                                                # STEP 66
ACTION: int0 = 1 
int0 = 15 : <type 'int'>
=> int0 = 1 : <type 'int'>
==================================================
result = avl1.find(int1)                                                # STEP 67
ACTION: result = avl1.find(int1) 
int1 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103bb9f80> : <type 'instance'>
avl_REF1 = set([2, 7, 8, 9, 10, 13, 15, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl0.insert(int0)                                                       # STEP 68
ACTION: avl0.insert(int0) 
int0 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103da6b90> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([1]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 69
ACTION: avl1.delete(int1) 
int1 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103bb9f80> : <type 'instance'>
avl_REF1 = set([2, 7, 8, 9, 10, 13, 15, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int2 = 12                                                               # STEP 70
ACTION: int2 = 12 
int2 = 8 : <type 'int'>
=> int2 = 12 : <type 'int'>
==================================================
int1 = 7                                                                # STEP 71
ACTION: int1 = 7 
int1 = 4 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 72
ACTION: avl0.insert(int3) 
int3 = 2 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103da6b90> : <type 'instance'>
avl_REF0 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([1, 2]) : <type 'set'>
==================================================
avl1.display()                                                          # STEP 73
ACTION: avl1.display() 
avl1 = <avlbug2.AVLTree instance at 0x103bb9f80> : <type 'instance'>
avl_REF1 = set([2, 7, 8, 9, 10, 13, 15, 19]) : <type 'set'>
  10 [3:1]
-- < 7 [2:-1]
---- < 2 [0:0] L
---- > 9 [1:1]
------ < 8 [0:0] L
-- > 15 [1:0]
---- < 13 [0:0] L
---- > 19 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([2, 7, 8, 9, 10, 13, 15, 19])
==================================================
avl1.delete(int3)                                                       # STEP 74
ACTION: avl1.delete(int3) 
int3 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103bb9f80> : <type 'instance'>
avl_REF1 = set([2, 7, 8, 9, 10, 13, 15, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([7, 8, 9, 10, 13, 15, 19]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103df1758>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #4 STEP #0 (0:00:35.540837) Mon May  1 17:44:34 2017 [ 160 stmts 211 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103eead88>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
Original test has 47 steps

SAVING TEST AS failure.62102.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 14                                                                # STEP 0
ACTION: int1 = 14 
int1 = None : <type 'NoneType'>
=> int1 = 14 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 1
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x103bb9d40> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.delete(int1)                                                        # STEP 2
ACTION: avl2.delete(int1) 
int1 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103bb9d40> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int1)                                                        # STEP 3
ACTION: avl2.insert(int1) 
int1 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103bb9d40> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([14]) : <type 'set'>
==================================================
int2 = 13                                                                # STEP 4
ACTION: int2 = 13 
int2 = None : <type 'NoneType'>
=> int2 = 13 : <type 'int'>
==================================================
avl2.delete(int2)                                                        # STEP 5
ACTION: avl2.delete(int2) 
int2 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103bb9d40> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.delete(int1)                                                        # STEP 6
ACTION: avl2.delete(int1) 
int1 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103bb9d40> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int1)                                                        # STEP 7
ACTION: avl2.insert(int1) 
int1 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103bb9d40> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([14]) : <type 'set'>
==================================================
avl2.insert(int1)                                                        # STEP 8
ACTION: avl2.insert(int1) 
int1 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103bb9d40> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl0 = avl.AVLTree()                                                     # STEP 9
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x1039754d0> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 10
ACTION: avl2.delete(int1) 
int1 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103bb9d40> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl0 == avl0                                                            # STEP 11
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x1039754d0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
result = avl2.inorder()                                                 # STEP 12
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x103bb9d40> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl0.insert(int2)                                                       # STEP 13
ACTION: avl0.insert(int2) 
int2 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1039754d0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([13]) : <type 'set'>
==================================================
int0 = 10                                                               # STEP 14
ACTION: int0 = 10 
int0 = None : <type 'NoneType'>
=> int0 = 10 : <type 'int'>
==================================================
int3 = 14                                                               # STEP 15
ACTION: int3 = 14 
int3 = None : <type 'NoneType'>
=> int3 = 14 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 16
ACTION: avl0.insert(int0) 
int0 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1039754d0> : <type 'instance'>
avl_REF0 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([10, 13]) : <type 'set'>
==================================================
int0 = 7                                                                # STEP 17
ACTION: int0 = 7 
int0 = 10 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
int2 = 7                                                                # STEP 18
ACTION: int2 = 7 
int2 = 13 : <type 'int'>
=> int2 = 7 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 19
ACTION: avl2.delete(int3) 
int3 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103bb9d40> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl0.delete(int0)                                                       # STEP 20
ACTION: avl0.delete(int0) 
int0 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1039754d0> : <type 'instance'>
avl_REF0 = set([10, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.delete(int1)                                                       # STEP 21
ACTION: avl0.delete(int1) 
int1 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1039754d0> : <type 'instance'>
avl_REF0 = set([10, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.insert(int0)                                                       # STEP 22
ACTION: avl0.insert(int0) 
int0 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1039754d0> : <type 'instance'>
avl_REF0 = set([10, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([10, 13, 7]) : <type 'set'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 23
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x103ec7638> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int0 = 20                                                               # STEP 24
ACTION: int0 = 20 
int0 = 7 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 25
ACTION: avl1.insert(int1) 
int1 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103ec7638> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([14]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 26
ACTION: avl0.delete(int1) 
int1 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1039754d0> : <type 'instance'>
avl_REF0 = set([10, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int3 = 2                                                                # STEP 27
ACTION: int3 = 2 
int3 = 14 : <type 'int'>
=> int3 = 2 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 28
ACTION: avl2.insert(int1) 
int1 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103bb9d40> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([14]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 29
ACTION: avl2.insert(int1) 
int1 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103bb9d40> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
int1 = 10                                                               # STEP 30
ACTION: int1 = 10 
int1 = 14 : <type 'int'>
=> int1 = 10 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 31
ACTION: avl1.insert(int0) 
int0 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103ec7638> : <type 'instance'>
avl_REF1 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([20, 14]) : <type 'set'>
==================================================
int0 = 17                                                               # STEP 32
ACTION: int0 = 17 
int0 = 20 : <type 'int'>
=> int0 = 17 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 33
ACTION: avl0.delete(int0) 
int0 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1039754d0> : <type 'instance'>
avl_REF0 = set([10, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl2.insert(int2)                                                       # STEP 34
ACTION: avl2.insert(int2) 
int2 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103bb9d40> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([14, 7]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 35
ACTION: avl1.insert(int3) 
int3 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103ec7638> : <type 'instance'>
avl_REF1 = set([20, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([2, 20, 14]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 36
ACTION: avl0.insert(int1) 
int1 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1039754d0> : <type 'instance'>
avl_REF0 = set([10, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl2.insert(int1)                                                       # STEP 37
ACTION: avl2.insert(int1) 
int1 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103bb9d40> : <type 'instance'>
avl_REF2 = set([14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([10, 14, 7]) : <type 'set'>
==================================================
int0 = 11                                                               # STEP 38
ACTION: int0 = 11 
int0 = 17 : <type 'int'>
=> int0 = 11 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 39
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x1039754d0> : <type 'instance'>
avl_REF0 = set([10, 13, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl2.insert(int3)                                                       # STEP 40
ACTION: avl2.insert(int3) 
int3 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103bb9d40> : <type 'instance'>
avl_REF2 = set([10, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([10, 2, 14, 7]) : <type 'set'>
==================================================
int3 = 7                                                                # STEP 41
ACTION: int3 = 7 
int3 = 2 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 42
ACTION: avl1.delete(int3) 
int3 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103ec7638> : <type 'instance'>
avl_REF1 = set([2, 20, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl0.delete(int1)                                                       # STEP 43
ACTION: avl0.delete(int1) 
int1 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1039754d0> : <type 'instance'>
avl_REF0 = set([10, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([13, 7]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 44
ACTION: avl1.delete(int1) 
int1 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103ec7638> : <type 'instance'>
avl_REF1 = set([2, 20, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.insert(int2)                                                       # STEP 45
ACTION: avl1.insert(int2) 
int2 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103ec7638> : <type 'instance'>
avl_REF1 = set([2, 20, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([2, 20, 14, 7]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 46
ACTION: avl2.delete(int1) 
int1 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103bb9d40> : <type 'instance'>
avl_REF2 = set([10, 2, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([2, 14, 7]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10394d320>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 47
STOPPING TESTING DUE TO TIMEOUT
8.32849680789 PERCENT COVERED
60.2766671181 TOTAL RUNTIME
6 EXECUTED
469 TOTAL TEST OPERATIONS
23.7301564217 TIME SPENT EXECUTING TEST OPERATIONS
0.0517752170563 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
23.8292047977 TIME SPENT CHECKING PROPERTIES
47.5593612194 TOTAL TIME SPENT RUNNING SUT
0.00395178794861 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
2 FAILED
0 REPEATS OF FAILURES
2 ACTUAL DISTINCT FAILURES

FAILURE 0
int1 = 12                                                                # STEP 0
int3 = 10                                                                # STEP 1
int2 = 13                                                                # STEP 2
int0 = 7                                                                 # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
avl1.insert(int2)                                                        # STEP 5
avl1.insert(int0)                                                        # STEP 6
avl2 = avl.AVLTree()                                                     # STEP 7
avl2.delete(int0)                                                        # STEP 8
avl1.delete(int2)                                                        # STEP 9
int0 = 15                                                               # STEP 10
avl2 == avl1                                                            # STEP 11
avl1.delete(int2)                                                       # STEP 12
avl2.delete(int1)                                                       # STEP 13
avl1.insert(int2)                                                       # STEP 14
avl1.insert(int3)                                                       # STEP 15
int2 = 9                                                                # STEP 16
avl2.delete(int0)                                                       # STEP 17
avl2.delete(int1)                                                       # STEP 18
int0 = 2                                                                # STEP 19
int1 = 11                                                               # STEP 20
avl1.delete(int0)                                                       # STEP 21
int3 = 19                                                               # STEP 22
avl1.insert(int0)                                                       # STEP 23
int0 = 14                                                               # STEP 24
avl2.insert(int0)                                                       # STEP 25
result = avl1.inorder()                                                 # STEP 26
avl2 == avl1                                                            # STEP 27
avl1.insert(int2)                                                       # STEP 28
avl2.delete(int0)                                                       # STEP 29
avl2.insert(int0)                                                       # STEP 30
avl2.insert(int2)                                                       # STEP 31
int2 = 8                                                                # STEP 32
int0 = 20                                                               # STEP 33
avl2.insert(int3)                                                       # STEP 34
avl1.delete(int1)                                                       # STEP 35
result = avl2.find(int0)                                                # STEP 36
avl1 == avl2                                                            # STEP 37
avl1.delete(int1)                                                       # STEP 38
avl2 == avl1                                                            # STEP 39
avl2.delete(int0)                                                       # STEP 40
int0 = 15                                                               # STEP 41
result = avl2.inorder()                                                 # STEP 42
int1 = 18                                                               # STEP 43
result = avl2.find(int1)                                                # STEP 44
avl2.delete(int3)                                                       # STEP 45
avl2.delete(int1)                                                       # STEP 46
avl1.delete(int1)                                                       # STEP 47
avl2.delete(int3)                                                       # STEP 48
avl1.insert(int3)                                                       # STEP 49
avl1.delete(int2)                                                       # STEP 50
avl1.delete(int2)                                                       # STEP 51
avl2.insert(int3)                                                       # STEP 52
avl1.insert(int0)                                                       # STEP 53
avl2.delete(int2)                                                       # STEP 54
avl2 == avl1                                                            # STEP 55
avl1.display()                                                          # STEP 56
avl2.delete(int2)                                                       # STEP 57
avl1.insert(int2)                                                       # STEP 58
int1 = 4                                                                # STEP 59
avl1.delete(int0)                                                       # STEP 60
avl1.delete(int1)                                                       # STEP 61
int3 = 2                                                                # STEP 62
avl0 = avl.AVLTree()                                                    # STEP 63
result = avl1.inorder()                                                 # STEP 64
avl1.insert(int0)                                                       # STEP 65
int0 = 1                                                                # STEP 66
result = avl1.find(int1)                                                # STEP 67
avl0.insert(int0)                                                       # STEP 68
avl1.delete(int1)                                                       # STEP 69
int2 = 12                                                               # STEP 70
int1 = 7                                                                # STEP 71
avl0.insert(int3)                                                       # STEP 72
avl1.display()                                                          # STEP 73
avl1.delete(int3)                                                       # STEP 74
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103df1758>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE 1
int1 = 14                                                                # STEP 0
avl2 = avl.AVLTree()                                                     # STEP 1
avl2.delete(int1)                                                        # STEP 2
avl2.insert(int1)                                                        # STEP 3
int2 = 13                                                                # STEP 4
avl2.delete(int2)                                                        # STEP 5
avl2.delete(int1)                                                        # STEP 6
avl2.insert(int1)                                                        # STEP 7
avl2.insert(int1)                                                        # STEP 8
avl0 = avl.AVLTree()                                                     # STEP 9
avl2.delete(int1)                                                       # STEP 10
avl0 == avl0                                                            # STEP 11
result = avl2.inorder()                                                 # STEP 12
avl0.insert(int2)                                                       # STEP 13
int0 = 10                                                               # STEP 14
int3 = 14                                                               # STEP 15
avl0.insert(int0)                                                       # STEP 16
int0 = 7                                                                # STEP 17
int2 = 7                                                                # STEP 18
avl2.delete(int3)                                                       # STEP 19
avl0.delete(int0)                                                       # STEP 20
avl0.delete(int1)                                                       # STEP 21
avl0.insert(int0)                                                       # STEP 22
avl1 = avl.AVLTree()                                                    # STEP 23
int0 = 20                                                               # STEP 24
avl1.insert(int1)                                                       # STEP 25
avl0.delete(int1)                                                       # STEP 26
int3 = 2                                                                # STEP 27
avl2.insert(int1)                                                       # STEP 28
avl2.insert(int1)                                                       # STEP 29
int1 = 10                                                               # STEP 30
avl1.insert(int0)                                                       # STEP 31
int0 = 17                                                               # STEP 32
avl0.delete(int0)                                                       # STEP 33
avl2.insert(int2)                                                       # STEP 34
avl1.insert(int3)                                                       # STEP 35
avl0.insert(int1)                                                       # STEP 36
avl2.insert(int1)                                                       # STEP 37
int0 = 11                                                               # STEP 38
result = avl0.inorder()                                                 # STEP 39
avl2.insert(int3)                                                       # STEP 40
int3 = 7                                                                # STEP 41
avl1.delete(int3)                                                       # STEP 42
avl0.delete(int1)                                                       # STEP 43
avl1.delete(int1)                                                       # STEP 44
avl1.insert(int2)                                                       # STEP 45
avl2.delete(int1)                                                       # STEP 46
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10394d320>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
218 BRANCHES COVERED
163 STATEMENTS COVERED

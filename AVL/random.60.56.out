Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.314.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1042e76c8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 41 steps

SAVING TEST AS failure.314.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 6                                                                 # STEP 0
ACTION: int2 = 6 
int2 = None : <type 'NoneType'>
=> int2 = 6 : <type 'int'>
==================================================
int3 = 17                                                                # STEP 1
ACTION: int3 = 17 
int3 = None : <type 'NoneType'>
=> int3 = 17 : <type 'int'>
==================================================
int1 = 18                                                                # STEP 2
ACTION: int1 = 18 
int1 = None : <type 'NoneType'>
=> int1 = 18 : <type 'int'>
==================================================
int0 = 20                                                                # STEP 3
ACTION: int0 = 20 
int0 = None : <type 'NoneType'>
=> int0 = 20 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x1026abdd0> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.delete(int1)                                                        # STEP 5
ACTION: avl2.delete(int1) 
int1 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1026abdd0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int1 = 6                                                                 # STEP 6
ACTION: int1 = 6 
int1 = 18 : <type 'int'>
=> int1 = 6 : <type 'int'>
==================================================
avl2 == avl2                                                             # STEP 7
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x1026abdd0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl2.insert(int3)                                                        # STEP 8
ACTION: avl2.insert(int3) 
int3 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1026abdd0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([17]) : <type 'set'>
==================================================
avl2.insert(int0)                                                        # STEP 9
ACTION: avl2.insert(int0) 
int0 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1026abdd0> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([17, 20]) : <type 'set'>
==================================================
int3 = 19                                                               # STEP 10
ACTION: int3 = 19 
int3 = 17 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
int0 = 1                                                                # STEP 11
ACTION: int0 = 1 
int0 = 20 : <type 'int'>
=> int0 = 1 : <type 'int'>
==================================================
result = avl2.find(int2)                                                # STEP 12
ACTION: result = avl2.find(int2) 
int2 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1026abdd0> : <type 'instance'>
avl_REF2 = set([17, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl2.delete(int1)                                                       # STEP 13
ACTION: avl2.delete(int1) 
int1 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1026abdd0> : <type 'instance'>
avl_REF2 = set([17, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int2 = 17                                                               # STEP 14
ACTION: int2 = 17 
int2 = 6 : <type 'int'>
=> int2 = 17 : <type 'int'>
==================================================
result = avl2.find(int1)                                                # STEP 15
ACTION: result = avl2.find(int1) 
int1 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1026abdd0> : <type 'instance'>
avl_REF2 = set([17, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int1 = 4                                                                # STEP 16
ACTION: int1 = 4 
int1 = 6 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 17
ACTION: avl2.insert(int1) 
int1 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1026abdd0> : <type 'instance'>
avl_REF2 = set([17, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([17, 20, 4]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 18
ACTION: avl2.insert(int0) 
int0 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1026abdd0> : <type 'instance'>
avl_REF2 = set([17, 20, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([17, 20, 4, 1]) : <type 'set'>
==================================================
int1 = 6                                                                # STEP 19
ACTION: int1 = 6 
int1 = 4 : <type 'int'>
=> int1 = 6 : <type 'int'>
==================================================
int0 = 5                                                                # STEP 20
ACTION: int0 = 5 
int0 = 1 : <type 'int'>
=> int0 = 5 : <type 'int'>
==================================================
result = avl2.find(int0)                                                # STEP 21
ACTION: result = avl2.find(int0) 
int0 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1026abdd0> : <type 'instance'>
avl_REF2 = set([17, 20, 4, 1]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl0 = avl.AVLTree()                                                    # STEP 22
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x1026a33f8> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int0 = 1                                                                # STEP 23
ACTION: int0 = 1 
int0 = 5 : <type 'int'>
=> int0 = 1 : <type 'int'>
==================================================
result = avl2.find(int1)                                                # STEP 24
ACTION: result = avl2.find(int1) 
int1 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1026abdd0> : <type 'instance'>
avl_REF2 = set([17, 20, 4, 1]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl0.insert(int1)                                                       # STEP 25
ACTION: avl0.insert(int1) 
int1 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1026a33f8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([6]) : <type 'set'>
==================================================
int1 = 18                                                               # STEP 26
ACTION: int1 = 18 
int1 = 6 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 27
ACTION: avl2.insert(int0) 
int0 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1026abdd0> : <type 'instance'>
avl_REF2 = set([17, 20, 4, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
result = avl0.inorder()                                                 # STEP 28
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x1026a33f8> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int0 = 4                                                                # STEP 29
ACTION: int0 = 4 
int0 = 1 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 30
ACTION: avl0 = avl.AVLTree() 
avl0 = <avl.AVLTree instance at 0x1026a33f8> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
=> avl0 = <avl.AVLTree instance at 0x10417e3f8> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl2 == avl2                                                            # STEP 31
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x1026abdd0> : <type 'instance'>
avl_REF2 = set([17, 20, 4, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
result = avl0.find(int0)                                                # STEP 32
ACTION: result = avl0.find(int0) 
int0 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10417e3f8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
result = avl2.find(int0)                                                # STEP 33
ACTION: result = avl2.find(int0) 
int0 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1026abdd0> : <type 'instance'>
avl_REF2 = set([17, 20, 4, 1]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
result = avl0.find(int3)                                                # STEP 34
ACTION: result = avl0.find(int3) 
int3 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10417e3f8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
avl0.delete(int1)                                                       # STEP 35
ACTION: avl0.delete(int1) 
int1 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10417e3f8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int0 = 20                                                               # STEP 36
ACTION: int0 = 20 
int0 = 4 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
int3 = 18                                                               # STEP 37
ACTION: int3 = 18 
int3 = 19 : <type 'int'>
=> int3 = 18 : <type 'int'>
==================================================
int1 = 16                                                               # STEP 38
ACTION: int1 = 16 
int1 = 18 : <type 'int'>
=> int1 = 16 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 39
ACTION: avl2.insert(int1) 
int1 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1026abdd0> : <type 'instance'>
avl_REF2 = set([17, 20, 4, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([16, 17, 20, 4, 1]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 40
ACTION: avl2.delete(int0) 
int0 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1026abdd0> : <type 'instance'>
avl_REF2 = set([16, 17, 20, 4, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([16, 17, 4, 1]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10414fc20>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105938878>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 93 steps

SAVING TEST AS failure.314.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 7                                                                 # STEP 0
ACTION: int2 = 7 
int2 = None : <type 'NoneType'>
=> int2 = 7 : <type 'int'>
==================================================
int1 = 11                                                                # STEP 1
ACTION: int1 = 11 
int1 = None : <type 'NoneType'>
=> int1 = 11 : <type 'int'>
==================================================
int0 = 9                                                                 # STEP 2
ACTION: int0 = 9 
int0 = None : <type 'NoneType'>
=> int0 = 9 : <type 'int'>
==================================================
int3 = 11                                                                # STEP 3
ACTION: int3 = 11 
int3 = None : <type 'NoneType'>
=> int3 = 11 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x105938950> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.insert(int1)                                                        # STEP 5
ACTION: avl1.insert(int1) 
int1 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105938950> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([11]) : <type 'set'>
==================================================
int1 = 12                                                                # STEP 6
ACTION: int1 = 12 
int1 = 11 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
avl1.delete(int3)                                                        # STEP 7
ACTION: avl1.delete(int3) 
int3 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105938950> : <type 'instance'>
avl_REF1 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int3 = 11                                                                # STEP 8
ACTION: int3 = 11 
int3 = 11 : <type 'int'>
==================================================
result = avl1.find(int1)                                                 # STEP 9
ACTION: result = avl1.find(int1) 
int1 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105938950> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
result = avl1.find(int1)                                                # STEP 10
ACTION: result = avl1.find(int1) 
int1 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105938950> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl1.insert(int0)                                                       # STEP 11
ACTION: avl1.insert(int0) 
int0 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105938950> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([9]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 12
ACTION: avl1.delete(int0) 
int0 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105938950> : <type 'instance'>
avl_REF1 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int0 = 18                                                               # STEP 13
ACTION: int0 = 18 
int0 = 9 : <type 'int'>
=> int0 = 18 : <type 'int'>
==================================================
int1 = 18                                                               # STEP 14
ACTION: int1 = 18 
int1 = 12 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 15
ACTION: avl1.insert(int2) 
int2 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105938950> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([7]) : <type 'set'>
==================================================
int2 = 15                                                               # STEP 16
ACTION: int2 = 15 
int2 = 7 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 17
ACTION: avl1.insert(int0) 
int0 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105938950> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([18, 7]) : <type 'set'>
==================================================
result = avl1.find(int2)                                                # STEP 18
ACTION: result = avl1.find(int2) 
int2 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105938950> : <type 'instance'>
avl_REF1 = set([18, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl0 = avl.AVLTree()                                                    # STEP 19
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x10591b2d8> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
result = avl1.find(int2)                                                # STEP 20
ACTION: result = avl1.find(int2) 
int2 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105938950> : <type 'instance'>
avl_REF1 = set([18, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int0 = 19                                                               # STEP 21
ACTION: int0 = 19 
int0 = 18 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 22
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x105938950> : <type 'instance'>
avl_REF1 = set([18, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int2 = 5                                                                # STEP 23
ACTION: int2 = 5 
int2 = 15 : <type 'int'>
=> int2 = 5 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 24
ACTION: avl0.delete(int1) 
int1 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10591b2d8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
result = avl1.find(int2)                                                # STEP 25
ACTION: result = avl1.find(int2) 
int2 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105938950> : <type 'instance'>
avl_REF1 = set([18, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int1 = 8                                                                # STEP 26
ACTION: int1 = 8 
int1 = 18 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 27
ACTION: avl1.delete(int3) 
int3 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105938950> : <type 'instance'>
avl_REF1 = set([18, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.delete(int2)                                                       # STEP 28
ACTION: avl1.delete(int2) 
int2 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105938950> : <type 'instance'>
avl_REF1 = set([18, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int2 = 13                                                               # STEP 29
ACTION: int2 = 13 
int2 = 5 : <type 'int'>
=> int2 = 13 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 30
ACTION: avl1.insert(int0) 
int0 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105938950> : <type 'instance'>
avl_REF1 = set([18, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([18, 19, 7]) : <type 'set'>
==================================================
int0 = 13                                                               # STEP 31
ACTION: int0 = 13 
int0 = 19 : <type 'int'>
=> int0 = 13 : <type 'int'>
==================================================
result = avl0.find(int1)                                                # STEP 32
ACTION: result = avl0.find(int1) 
int1 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10591b2d8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
int3 = 20                                                               # STEP 33
ACTION: int3 = 20 
int3 = 11 : <type 'int'>
=> int3 = 20 : <type 'int'>
==================================================
int1 = 8                                                                # STEP 34
ACTION: int1 = 8 
int1 = 8 : <type 'int'>
==================================================
result = avl1.find(int0)                                                # STEP 35
ACTION: result = avl1.find(int0) 
int0 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105938950> : <type 'instance'>
avl_REF1 = set([18, 19, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
int0 = 7                                                                # STEP 36
ACTION: int0 = 7 
int0 = 13 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
result = avl0.find(int2)                                                # STEP 37
ACTION: result = avl0.find(int2) 
int2 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10591b2d8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl1.insert(int2)                                                       # STEP 38
ACTION: avl1.insert(int2) 
int2 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105938950> : <type 'instance'>
avl_REF1 = set([18, 19, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([18, 19, 13, 7]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 39
ACTION: avl1.insert(int1) 
int1 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105938950> : <type 'instance'>
avl_REF1 = set([18, 19, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([7, 8, 13, 18, 19]) : <type 'set'>
==================================================
int1 = 20                                                               # STEP 40
ACTION: int1 = 20 
int1 = 8 : <type 'int'>
=> int1 = 20 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 41
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x105931e18> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int2 = 16                                                               # STEP 42
ACTION: int2 = 16 
int2 = 13 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 43
ACTION: avl2.insert(int0) 
int0 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105931e18> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([7]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 44
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x10591b2d8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int0 = 19                                                               # STEP 45
ACTION: int0 = 19 
int0 = 7 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
result = avl2.find(int2)                                                # STEP 46
ACTION: result = avl2.find(int2) 
int2 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105931e18> : <type 'instance'>
avl_REF2 = set([7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl1.delete(int2)                                                       # STEP 47
ACTION: avl1.delete(int2) 
int2 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105938950> : <type 'instance'>
avl_REF1 = set([7, 8, 13, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl2.insert(int0)                                                       # STEP 48
ACTION: avl2.insert(int0) 
int0 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105931e18> : <type 'instance'>
avl_REF2 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([19, 7]) : <type 'set'>
==================================================
int2 = 8                                                                # STEP 49
ACTION: int2 = 8 
int2 = 16 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
int0 = 20                                                               # STEP 50
ACTION: int0 = 20 
int0 = 19 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
avl0 == avl1                                                            # STEP 51
ACTION: avl0 == avl1 
avl0 = <avl.AVLTree instance at 0x10591b2d8> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x105938950> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
avl_REF1 = set([7, 8, 13, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF1 
==================================================
avl1.delete(int2)                                                       # STEP 52
ACTION: avl1.delete(int2) 
int2 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105938950> : <type 'instance'>
avl_REF1 = set([7, 8, 13, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([7, 13, 18, 19]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 53
ACTION: avl1.delete(int2) 
int2 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105938950> : <type 'instance'>
avl_REF1 = set([7, 13, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl0.insert(int0)                                                       # STEP 54
ACTION: avl0.insert(int0) 
int0 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10591b2d8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([20]) : <type 'set'>
==================================================
int2 = 4                                                                # STEP 55
ACTION: int2 = 4 
int2 = 8 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 56
ACTION: avl1.insert(int2) 
int2 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105938950> : <type 'instance'>
avl_REF1 = set([7, 13, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([4, 7, 13, 18, 19]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 57
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x10591b2d8> : <type 'instance'>
avl_REF0 = set([20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl2 == avl0                                                            # STEP 58
ACTION: avl2 == avl0 
avl2 = <avl.AVLTree instance at 0x105931e18> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x10591b2d8> : <type 'instance'>
avl_REF2 = set([19, 7]) : <type 'set'>
avl_REF0 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF0 
==================================================
int2 = 17                                                               # STEP 59
ACTION: int2 = 17 
int2 = 4 : <type 'int'>
=> int2 = 17 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 60
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x10591b2d8> : <type 'instance'>
avl_REF0 = set([20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl2 == avl2                                                            # STEP 61
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x105931e18> : <type 'instance'>
avl_REF2 = set([19, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl2.delete(int3)                                                       # STEP 62
ACTION: avl2.delete(int3) 
int3 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105931e18> : <type 'instance'>
avl_REF2 = set([19, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl0 == avl1                                                            # STEP 63
ACTION: avl0 == avl1 
avl0 = <avl.AVLTree instance at 0x10591b2d8> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x105938950> : <type 'instance'>
avl_REF0 = set([20]) : <type 'set'>
avl_REF1 = set([4, 7, 13, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF1 
==================================================
result = avl1.find(int2)                                                # STEP 64
ACTION: result = avl1.find(int2) 
int2 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105938950> : <type 'instance'>
avl_REF1 = set([4, 7, 13, 18, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int0 = 8                                                                # STEP 65
ACTION: int0 = 8 
int0 = 20 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
result = avl0.find(int2)                                                # STEP 66
ACTION: result = avl0.find(int2) 
int2 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10591b2d8> : <type 'instance'>
avl_REF0 = set([20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
int2 = 12                                                               # STEP 67
ACTION: int2 = 12 
int2 = 17 : <type 'int'>
=> int2 = 12 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 68
ACTION: avl0.delete(int1) 
int1 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10591b2d8> : <type 'instance'>
avl_REF0 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int1 = 5                                                                # STEP 69
ACTION: int1 = 5 
int1 = 20 : <type 'int'>
=> int1 = 5 : <type 'int'>
==================================================
result = avl0.find(int1)                                                # STEP 70
ACTION: result = avl0.find(int1) 
int1 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10591b2d8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
result = avl2.find(int3)                                                # STEP 71
ACTION: result = avl2.find(int3) 
int3 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105931e18> : <type 'instance'>
avl_REF2 = set([19, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl1.delete(int0)                                                       # STEP 72
ACTION: avl1.delete(int0) 
int0 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105938950> : <type 'instance'>
avl_REF1 = set([4, 7, 13, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
result = avl2.inorder()                                                 # STEP 73
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x105931e18> : <type 'instance'>
avl_REF2 = set([19, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int1 = 16                                                               # STEP 74
ACTION: int1 = 16 
int1 = 5 : <type 'int'>
=> int1 = 16 : <type 'int'>
==================================================
int3 = 17                                                               # STEP 75
ACTION: int3 = 17 
int3 = 20 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
int0 = 19                                                               # STEP 76
ACTION: int0 = 19 
int0 = 8 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
avl1 == avl0                                                            # STEP 77
ACTION: avl1 == avl0 
avl1 = <avl.AVLTree instance at 0x105938950> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x10591b2d8> : <type 'instance'>
avl_REF1 = set([4, 7, 13, 18, 19]) : <type 'set'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
result = avl1.find(int2)                                                # STEP 78
ACTION: result = avl1.find(int2) 
int2 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105938950> : <type 'instance'>
avl_REF1 = set([4, 7, 13, 18, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl2.insert(int2)                                                       # STEP 79
ACTION: avl2.insert(int2) 
int2 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105931e18> : <type 'instance'>
avl_REF2 = set([19, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([19, 12, 7]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 80
ACTION: avl2.insert(int3) 
int3 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105931e18> : <type 'instance'>
avl_REF2 = set([19, 12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([17, 19, 12, 7]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 81
ACTION: avl1.insert(int0) 
int0 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105938950> : <type 'instance'>
avl_REF1 = set([4, 7, 13, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
result = avl2.find(int1)                                                # STEP 82
ACTION: result = avl2.find(int1) 
int1 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105931e18> : <type 'instance'>
avl_REF2 = set([17, 19, 12, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
result = avl0.find(int1)                                                # STEP 83
ACTION: result = avl0.find(int1) 
int1 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10591b2d8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
int3 = 7                                                                # STEP 84
ACTION: int3 = 7 
int3 = 17 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
int0 = 12                                                               # STEP 85
ACTION: int0 = 12 
int0 = 19 : <type 'int'>
=> int0 = 12 : <type 'int'>
==================================================
int2 = 17                                                               # STEP 86
ACTION: int2 = 17 
int2 = 12 : <type 'int'>
=> int2 = 17 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 87
ACTION: avl0.delete(int0) 
int0 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10591b2d8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int0 = 15                                                               # STEP 88
ACTION: int0 = 15 
int0 = 12 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 89
ACTION: avl2.insert(int0) 
int0 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105931e18> : <type 'instance'>
avl_REF2 = set([17, 19, 12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([15, 17, 19, 12, 7]) : <type 'set'>
==================================================
avl2 == avl0                                                            # STEP 90
ACTION: avl2 == avl0 
avl2 = <avl.AVLTree instance at 0x105931e18> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x10591b2d8> : <type 'instance'>
avl_REF2 = set([15, 17, 19, 12, 7]) : <type 'set'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF0 
==================================================
int0 = 16                                                               # STEP 91
ACTION: int0 = 16 
int0 = 15 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 92
ACTION: avl2.delete(int3) 
int3 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105931e18> : <type 'instance'>
avl_REF2 = set([15, 17, 19, 12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([15, 17, 19, 12]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105906908>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
TEST #4 STEP #40 (0:00:30.044931) Fri Apr 28 06:03:11 2017 [ 145 stmts 192 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1047cde60>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
Original test has 38 steps

SAVING TEST AS failure.314.test.2
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 2                                                                 # STEP 0
ACTION: int2 = 2 
int2 = None : <type 'NoneType'>
=> int2 = 2 : <type 'int'>
==================================================
int3 = 20                                                                # STEP 1
ACTION: int3 = 20 
int3 = None : <type 'NoneType'>
=> int3 = 20 : <type 'int'>
==================================================
int1 = 9                                                                 # STEP 2
ACTION: int1 = 9 
int1 = None : <type 'NoneType'>
=> int1 = 9 : <type 'int'>
==================================================
int0 = 12                                                                # STEP 3
ACTION: int0 = 12 
int0 = None : <type 'NoneType'>
=> int0 = 12 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 4
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x1047c53b0> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.insert(int1)                                                        # STEP 5
ACTION: avl0.insert(int1) 
int1 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1047c53b0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([9]) : <type 'set'>
==================================================
int1 = 6                                                                 # STEP 6
ACTION: int1 = 6 
int1 = 9 : <type 'int'>
=> int1 = 6 : <type 'int'>
==================================================
avl0.insert(int2)                                                        # STEP 7
ACTION: avl0.insert(int2) 
int2 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1047c53b0> : <type 'instance'>
avl_REF0 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([9, 2]) : <type 'set'>
==================================================
result = avl0.find(int2)                                                 # STEP 8
ACTION: result = avl0.find(int2) 
int2 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1047c53b0> : <type 'instance'>
avl_REF0 = set([9, 2]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl1 = avl.AVLTree()                                                     # STEP 9
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x1059262d8> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 10
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x1059265f0> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int2 = 3                                                                # STEP 11
ACTION: int2 = 3 
int2 = 2 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
result = avl0.find(int1)                                                # STEP 12
ACTION: result = avl0.find(int1) 
int1 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1047c53b0> : <type 'instance'>
avl_REF0 = set([9, 2]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
int1 = 18                                                               # STEP 13
ACTION: int1 = 18 
int1 = 6 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 14
ACTION: avl2.delete(int0) 
int0 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1059265f0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int0 = 10                                                               # STEP 15
ACTION: int0 = 10 
int0 = 12 : <type 'int'>
=> int0 = 10 : <type 'int'>
==================================================
avl0 == avl2                                                            # STEP 16
ACTION: avl0 == avl2 
avl0 = <avl.AVLTree instance at 0x1047c53b0> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x1059265f0> : <type 'instance'>
avl_REF0 = set([9, 2]) : <type 'set'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
avl0.insert(int1)                                                       # STEP 17
ACTION: avl0.insert(int1) 
int1 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1047c53b0> : <type 'instance'>
avl_REF0 = set([9, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([9, 2, 18]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 18
ACTION: avl1.delete(int1) 
int1 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1059262d8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.insert(int1)                                                       # STEP 19
ACTION: avl1.insert(int1) 
int1 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1059262d8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([18]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 20
ACTION: avl1.insert(int1) 
int1 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1059262d8> : <type 'instance'>
avl_REF1 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
int1 = 20                                                               # STEP 21
ACTION: int1 = 20 
int1 = 18 : <type 'int'>
=> int1 = 20 : <type 'int'>
==================================================
avl1 == avl2                                                            # STEP 22
ACTION: avl1 == avl2 
avl1 = <avl.AVLTree instance at 0x1059262d8> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x1059265f0> : <type 'instance'>
avl_REF1 = set([18]) : <type 'set'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
avl1.insert(int1)                                                       # STEP 23
ACTION: avl1.insert(int1) 
int1 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1059262d8> : <type 'instance'>
avl_REF1 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([18, 20]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 24
ACTION: avl0.delete(int1) 
int1 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1047c53b0> : <type 'instance'>
avl_REF0 = set([9, 2, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int1 = 1                                                                # STEP 25
ACTION: int1 = 1 
int1 = 20 : <type 'int'>
=> int1 = 1 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 26
ACTION: avl1.delete(int2) 
int2 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1059262d8> : <type 'instance'>
avl_REF1 = set([18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int2 = 9                                                                # STEP 27
ACTION: int2 = 9 
int2 = 3 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
avl1 == avl0                                                            # STEP 28
ACTION: avl1 == avl0 
avl1 = <avl.AVLTree instance at 0x1059262d8> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x1047c53b0> : <type 'instance'>
avl_REF1 = set([18, 20]) : <type 'set'>
avl_REF0 = set([9, 2, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
avl0.insert(int1)                                                       # STEP 29
ACTION: avl0.insert(int1) 
int1 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1047c53b0> : <type 'instance'>
avl_REF0 = set([9, 2, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([9, 2, 18, 1]) : <type 'set'>
==================================================
int1 = 18                                                               # STEP 30
ACTION: int1 = 18 
int1 = 1 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 31
ACTION: avl2.delete(int0) 
int0 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1059265f0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl1.delete(int3)                                                       # STEP 32
ACTION: avl1.delete(int3) 
int3 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1059262d8> : <type 'instance'>
avl_REF1 = set([18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([18]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 33
ACTION: avl2.insert(int3) 
int3 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1059265f0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([20]) : <type 'set'>
==================================================
result = avl2.find(int0)                                                # STEP 34
ACTION: result = avl2.find(int0) 
int0 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1059265f0> : <type 'instance'>
avl_REF2 = set([20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
int0 = 19                                                               # STEP 35
ACTION: int0 = 19 
int0 = 10 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
int3 = 8                                                                # STEP 36
ACTION: int3 = 8 
int3 = 20 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 37
ACTION: avl0.delete(int2) 
int2 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1047c53b0> : <type 'instance'>
avl_REF0 = set([9, 2, 18, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([2, 18, 1]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1047c8fc8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 3 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 65
STOPPING TESTING DUE TO TIMEOUT
7.9742110621 PERCENT COVERED
60.1743080616 TOTAL RUNTIME
8 EXECUTED
637 TOTAL TEST OPERATIONS
23.5893146992 TIME SPENT EXECUTING TEST OPERATIONS
0.0208337306976 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
23.7049005032 TIME SPENT CHECKING PROPERTIES
47.2942152023 TOTAL TIME SPENT RUNNING SUT
0.00427651405334 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
3 FAILED
0 REPEATS OF FAILURES
3 ACTUAL DISTINCT FAILURES

FAILURE 0
int2 = 6                                                                 # STEP 0
int3 = 17                                                                # STEP 1
int1 = 18                                                                # STEP 2
int0 = 20                                                                # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
avl2.delete(int1)                                                        # STEP 5
int1 = 6                                                                 # STEP 6
avl2 == avl2                                                             # STEP 7
avl2.insert(int3)                                                        # STEP 8
avl2.insert(int0)                                                        # STEP 9
int3 = 19                                                               # STEP 10
int0 = 1                                                                # STEP 11
result = avl2.find(int2)                                                # STEP 12
avl2.delete(int1)                                                       # STEP 13
int2 = 17                                                               # STEP 14
result = avl2.find(int1)                                                # STEP 15
int1 = 4                                                                # STEP 16
avl2.insert(int1)                                                       # STEP 17
avl2.insert(int0)                                                       # STEP 18
int1 = 6                                                                # STEP 19
int0 = 5                                                                # STEP 20
result = avl2.find(int0)                                                # STEP 21
avl0 = avl.AVLTree()                                                    # STEP 22
int0 = 1                                                                # STEP 23
result = avl2.find(int1)                                                # STEP 24
avl0.insert(int1)                                                       # STEP 25
int1 = 18                                                               # STEP 26
avl2.insert(int0)                                                       # STEP 27
result = avl0.inorder()                                                 # STEP 28
int0 = 4                                                                # STEP 29
avl0 = avl.AVLTree()                                                    # STEP 30
avl2 == avl2                                                            # STEP 31
result = avl0.find(int0)                                                # STEP 32
result = avl2.find(int0)                                                # STEP 33
result = avl0.find(int3)                                                # STEP 34
avl0.delete(int1)                                                       # STEP 35
int0 = 20                                                               # STEP 36
int3 = 18                                                               # STEP 37
int1 = 16                                                               # STEP 38
avl2.insert(int1)                                                       # STEP 39
avl2.delete(int0)                                                       # STEP 40
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10414fc20>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE 1
int2 = 7                                                                 # STEP 0
int1 = 11                                                                # STEP 1
int0 = 9                                                                 # STEP 2
int3 = 11                                                                # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
avl1.insert(int1)                                                        # STEP 5
int1 = 12                                                                # STEP 6
avl1.delete(int3)                                                        # STEP 7
int3 = 11                                                                # STEP 8
result = avl1.find(int1)                                                 # STEP 9
result = avl1.find(int1)                                                # STEP 10
avl1.insert(int0)                                                       # STEP 11
avl1.delete(int0)                                                       # STEP 12
int0 = 18                                                               # STEP 13
int1 = 18                                                               # STEP 14
avl1.insert(int2)                                                       # STEP 15
int2 = 15                                                               # STEP 16
avl1.insert(int0)                                                       # STEP 17
result = avl1.find(int2)                                                # STEP 18
avl0 = avl.AVLTree()                                                    # STEP 19
result = avl1.find(int2)                                                # STEP 20
int0 = 19                                                               # STEP 21
result = avl1.inorder()                                                 # STEP 22
int2 = 5                                                                # STEP 23
avl0.delete(int1)                                                       # STEP 24
result = avl1.find(int2)                                                # STEP 25
int1 = 8                                                                # STEP 26
avl1.delete(int3)                                                       # STEP 27
avl1.delete(int2)                                                       # STEP 28
int2 = 13                                                               # STEP 29
avl1.insert(int0)                                                       # STEP 30
int0 = 13                                                               # STEP 31
result = avl0.find(int1)                                                # STEP 32
int3 = 20                                                               # STEP 33
int1 = 8                                                                # STEP 34
result = avl1.find(int0)                                                # STEP 35
int0 = 7                                                                # STEP 36
result = avl0.find(int2)                                                # STEP 37
avl1.insert(int2)                                                       # STEP 38
avl1.insert(int1)                                                       # STEP 39
int1 = 20                                                               # STEP 40
avl2 = avl.AVLTree()                                                    # STEP 41
int2 = 16                                                               # STEP 42
avl2.insert(int0)                                                       # STEP 43
result = avl0.inorder()                                                 # STEP 44
int0 = 19                                                               # STEP 45
result = avl2.find(int2)                                                # STEP 46
avl1.delete(int2)                                                       # STEP 47
avl2.insert(int0)                                                       # STEP 48
int2 = 8                                                                # STEP 49
int0 = 20                                                               # STEP 50
avl0 == avl1                                                            # STEP 51
avl1.delete(int2)                                                       # STEP 52
avl1.delete(int2)                                                       # STEP 53
avl0.insert(int0)                                                       # STEP 54
int2 = 4                                                                # STEP 55
avl1.insert(int2)                                                       # STEP 56
result = avl0.inorder()                                                 # STEP 57
avl2 == avl0                                                            # STEP 58
int2 = 17                                                               # STEP 59
result = avl0.inorder()                                                 # STEP 60
avl2 == avl2                                                            # STEP 61
avl2.delete(int3)                                                       # STEP 62
avl0 == avl1                                                            # STEP 63
result = avl1.find(int2)                                                # STEP 64
int0 = 8                                                                # STEP 65
result = avl0.find(int2)                                                # STEP 66
int2 = 12                                                               # STEP 67
avl0.delete(int1)                                                       # STEP 68
int1 = 5                                                                # STEP 69
result = avl0.find(int1)                                                # STEP 70
result = avl2.find(int3)                                                # STEP 71
avl1.delete(int0)                                                       # STEP 72
result = avl2.inorder()                                                 # STEP 73
int1 = 16                                                               # STEP 74
int3 = 17                                                               # STEP 75
int0 = 19                                                               # STEP 76
avl1 == avl0                                                            # STEP 77
result = avl1.find(int2)                                                # STEP 78
avl2.insert(int2)                                                       # STEP 79
avl2.insert(int3)                                                       # STEP 80
avl1.insert(int0)                                                       # STEP 81
result = avl2.find(int1)                                                # STEP 82
result = avl0.find(int1)                                                # STEP 83
int3 = 7                                                                # STEP 84
int0 = 12                                                               # STEP 85
int2 = 17                                                               # STEP 86
avl0.delete(int0)                                                       # STEP 87
int0 = 15                                                               # STEP 88
avl2.insert(int0)                                                       # STEP 89
avl2 == avl0                                                            # STEP 90
int0 = 16                                                               # STEP 91
avl2.delete(int3)                                                       # STEP 92
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105906908>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE 2
int2 = 2                                                                 # STEP 0
int3 = 20                                                                # STEP 1
int1 = 9                                                                 # STEP 2
int0 = 12                                                                # STEP 3
avl0 = avl.AVLTree()                                                     # STEP 4
avl0.insert(int1)                                                        # STEP 5
int1 = 6                                                                 # STEP 6
avl0.insert(int2)                                                        # STEP 7
result = avl0.find(int2)                                                 # STEP 8
avl1 = avl.AVLTree()                                                     # STEP 9
avl2 = avl.AVLTree()                                                    # STEP 10
int2 = 3                                                                # STEP 11
result = avl0.find(int1)                                                # STEP 12
int1 = 18                                                               # STEP 13
avl2.delete(int0)                                                       # STEP 14
int0 = 10                                                               # STEP 15
avl0 == avl2                                                            # STEP 16
avl0.insert(int1)                                                       # STEP 17
avl1.delete(int1)                                                       # STEP 18
avl1.insert(int1)                                                       # STEP 19
avl1.insert(int1)                                                       # STEP 20
int1 = 20                                                               # STEP 21
avl1 == avl2                                                            # STEP 22
avl1.insert(int1)                                                       # STEP 23
avl0.delete(int1)                                                       # STEP 24
int1 = 1                                                                # STEP 25
avl1.delete(int2)                                                       # STEP 26
int2 = 9                                                                # STEP 27
avl1 == avl0                                                            # STEP 28
avl0.insert(int1)                                                       # STEP 29
int1 = 18                                                               # STEP 30
avl2.delete(int0)                                                       # STEP 31
avl1.delete(int3)                                                       # STEP 32
avl2.insert(int3)                                                       # STEP 33
result = avl2.find(int0)                                                # STEP 34
int0 = 19                                                               # STEP 35
int3 = 8                                                                # STEP 36
avl0.delete(int2)                                                       # STEP 37
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1047c8fc8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
200 BRANCHES COVERED
150 STATEMENTS COVERED

Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.99887.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104c4fe60>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 49 steps

SAVING TEST AS failure.99887.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
avl1 = avl.AVLTree()                                                     # STEP 0
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x104c3aa70> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int0 = 16                                                                # STEP 1
ACTION: int0 = 16 
int0 = None : <type 'NoneType'>
=> int0 = 16 : <type 'int'>
==================================================
result = avl1.inorder()                                                  # STEP 2
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104c3aa70> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int0)                                                        # STEP 3
ACTION: avl1.insert(int0) 
int0 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c3aa70> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([16]) : <type 'set'>
==================================================
int0 = 17                                                                # STEP 4
ACTION: int0 = 17 
int0 = 16 : <type 'int'>
=> int0 = 17 : <type 'int'>
==================================================
avl1.delete(int0)                                                        # STEP 5
ACTION: avl1.delete(int0) 
int0 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c3aa70> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int3 = 7                                                                 # STEP 6
ACTION: int3 = 7 
int3 = None : <type 'NoneType'>
=> int3 = 7 : <type 'int'>
==================================================
avl1.delete(int3)                                                        # STEP 7
ACTION: avl1.delete(int3) 
int3 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c3aa70> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.insert(int0)                                                        # STEP 8
ACTION: avl1.insert(int0) 
int0 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c3aa70> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([16, 17]) : <type 'set'>
==================================================
int0 = 6                                                                 # STEP 9
ACTION: int0 = 6 
int0 = 17 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 10
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104c3aa70> : <type 'instance'>
avl_REF1 = set([16, 17]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int3 = 16                                                               # STEP 11
ACTION: int3 = 16 
int3 = 7 : <type 'int'>
=> int3 = 16 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 12
ACTION: avl1.insert(int3) 
int3 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c3aa70> : <type 'instance'>
avl_REF1 = set([16, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
avl1.insert(int3)                                                       # STEP 13
ACTION: avl1.insert(int3) 
int3 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c3aa70> : <type 'instance'>
avl_REF1 = set([16, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
avl1.delete(int0)                                                       # STEP 14
ACTION: avl1.delete(int0) 
int0 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c3aa70> : <type 'instance'>
avl_REF1 = set([16, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
result = avl1.find(int0)                                                # STEP 15
ACTION: result = avl1.find(int0) 
int0 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c3aa70> : <type 'instance'>
avl_REF1 = set([16, 17]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl1.delete(int3)                                                       # STEP 16
ACTION: avl1.delete(int3) 
int3 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c3aa70> : <type 'instance'>
avl_REF1 = set([16, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([17]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 17
ACTION: avl1.insert(int0) 
int0 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c3aa70> : <type 'instance'>
avl_REF1 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([17, 6]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 18
ACTION: avl1.delete(int3) 
int3 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c3aa70> : <type 'instance'>
avl_REF1 = set([17, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int3 = 5                                                                # STEP 19
ACTION: int3 = 5 
int3 = 16 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 20
ACTION: avl1 = avl.AVLTree() 
avl1 = <avl.AVLTree instance at 0x104c3aa70> : <type 'instance'>
avl_REF1 = set([17, 6]) : <type 'set'>
=> avl1 = <avl.AVLTree instance at 0x104c2afc8> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
result = avl1.find(int3)                                                # STEP 21
ACTION: result = avl1.find(int3) 
int3 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c2afc8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl1.insert(int3)                                                       # STEP 22
ACTION: avl1.insert(int3) 
int3 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c2afc8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([5]) : <type 'set'>
==================================================
int3 = 15                                                               # STEP 23
ACTION: int3 = 15 
int3 = 5 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
int2 = 9                                                                # STEP 24
ACTION: int2 = 9 
int2 = None : <type 'NoneType'>
=> int2 = 9 : <type 'int'>
==================================================
int0 = 1                                                                # STEP 25
ACTION: int0 = 1 
int0 = 6 : <type 'int'>
=> int0 = 1 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 26
ACTION: avl1.delete(int3) 
int3 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c2afc8> : <type 'instance'>
avl_REF1 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.delete(int2)                                                       # STEP 27
ACTION: avl1.delete(int2) 
int2 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c2afc8> : <type 'instance'>
avl_REF1 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.delete(int2)                                                       # STEP 28
ACTION: avl1.delete(int2) 
int2 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c2afc8> : <type 'instance'>
avl_REF1 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int1 = 15                                                               # STEP 29
ACTION: int1 = 15 
int1 = None : <type 'NoneType'>
=> int1 = 15 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 30
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104c2afc8> : <type 'instance'>
avl_REF1 = set([5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int3 = 12                                                               # STEP 31
ACTION: int3 = 12 
int3 = 15 : <type 'int'>
=> int3 = 12 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 32
ACTION: avl1.insert(int0) 
int0 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c2afc8> : <type 'instance'>
avl_REF1 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([1, 5]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 33
ACTION: avl1.insert(int0) 
int0 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c2afc8> : <type 'instance'>
avl_REF1 = set([1, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
result = avl1.find(int2)                                                # STEP 34
ACTION: result = avl1.find(int2) 
int2 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c2afc8> : <type 'instance'>
avl_REF1 = set([1, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl1.insert(int3)                                                       # STEP 35
ACTION: avl1.insert(int3) 
int3 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c2afc8> : <type 'instance'>
avl_REF1 = set([1, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([1, 12, 5]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 36
ACTION: avl1.delete(int0) 
int0 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c2afc8> : <type 'instance'>
avl_REF1 = set([1, 12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([12, 5]) : <type 'set'>
==================================================
int2 = 4                                                                # STEP 37
ACTION: int2 = 4 
int2 = 9 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 38
ACTION: avl1.insert(int3) 
int3 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c2afc8> : <type 'instance'>
avl_REF1 = set([12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
avl1.insert(int2)                                                       # STEP 39
ACTION: avl1.insert(int2) 
int2 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c2afc8> : <type 'instance'>
avl_REF1 = set([12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([4, 12, 5]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 40
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104c2afc8> : <type 'instance'>
avl_REF1 = set([4, 12, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int0)                                                       # STEP 41
ACTION: avl1.insert(int0) 
int0 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c2afc8> : <type 'instance'>
avl_REF1 = set([4, 12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([4, 12, 5, 1]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 42
ACTION: avl1.insert(int3) 
int3 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c2afc8> : <type 'instance'>
avl_REF1 = set([4, 12, 5, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
avl1.insert(int3)                                                       # STEP 43
ACTION: avl1.insert(int3) 
int3 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c2afc8> : <type 'instance'>
avl_REF1 = set([4, 12, 5, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
avl1.delete(int2)                                                       # STEP 44
ACTION: avl1.delete(int2) 
int2 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c2afc8> : <type 'instance'>
avl_REF1 = set([4, 12, 5, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([12, 5, 1]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 45
ACTION: avl1.delete(int1) 
int1 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c2afc8> : <type 'instance'>
avl_REF1 = set([12, 5, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.insert(int3)                                                       # STEP 46
ACTION: avl1.insert(int3) 
int3 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c2afc8> : <type 'instance'>
avl_REF1 = set([12, 5, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
avl1.insert(int2)                                                       # STEP 47
ACTION: avl1.insert(int2) 
int2 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c2afc8> : <type 'instance'>
avl_REF1 = set([12, 5, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([4, 12, 5, 1]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 48
ACTION: avl1.delete(int3) 
int3 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c2afc8> : <type 'instance'>
avl_REF1 = set([4, 12, 5, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([4, 5, 1]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104c05200>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
  14 [3:1]
-- < 6 [2:-1]
---- < 4 [0:0] L
---- > 13 [1:1]
------ < 9 [0:0] L
-- > 15 [1:-1]
---- > 16 [0:0] L
set([4, 6, 9, 13, 14, 15, 16])
  14 [3:1]
-- < 6 [2:-1]
---- < 4 [0:0] L
---- > 13 [1:1]
------ < 9 [0:0] L
-- > 15 [1:-1]
---- > 16 [0:0] L
set([4, 6, 9, 13, 14, 15, 16])
  9 [2:0]
-- < 3 [1:0]
---- < 1 [0:0] L
---- > 8 [0:0] L
-- > 16 [1:-1]
---- > 18 [0:0] L
set([1, 3, 8, 9, 16, 18])
  9 [2:0]
-- < 3 [1:0]
---- < 1 [0:0] L
---- > 8 [0:0] L
-- > 16 [1:-1]
---- > 18 [0:0] L
set([1, 3, 8, 9, 16, 18])
  8 [2:0]
-- < 3 [1:1]
---- < 1 [0:0] L
-- > 16 [1:0]
---- < 9 [0:0] L
---- > 18 [0:0] L
set([1, 3, 8, 9, 16, 18])
  8 [2:0]
-- < 3 [1:1]
---- < 1 [0:0] L
-- > 16 [1:0]
---- < 9 [0:0] L
---- > 18 [0:0] L
set([1, 3, 8, 9, 16, 18])
  8 [2:0]
-- < 3 [1:1]
---- < 1 [0:0] L
-- > 16 [1:0]
---- < 9 [0:0] L
---- > 18 [0:0] L
set([1, 3, 8, 9, 16, 18])
  8 [2:0]
-- < 3 [1:1]
---- < 1 [0:0] L
-- > 16 [1:0]
---- < 13 [0:0] L
---- > 18 [0:0] L
set([1, 3, 8, 13, 16, 18])
  8 [3:-1]
-- < 3 [1:1]
---- < 1 [0:0] L
-- > 16 [2:1]
---- < 13 [1:1]
------ < 9 [0:0] L
---- > 18 [0:0] L
set([1, 3, 8, 9, 13, 16, 18])
  9 [2:0]
-- < 3 [1:1]
---- < 1 [0:0] L
-- > 16 [1:0]
---- < 13 [0:0] L
---- > 18 [0:0] L
set([1, 3, 9, 13, 16, 18])
  9 [2:0]
-- < 3 [1:1]
---- < 1 [0:0] L
-- > 16 [1:0]
---- < 13 [0:0] L
---- > 18 [0:0] L
set([1, 3, 9, 13, 16, 18])
  9 [2:0]
-- < 3 [1:1]
---- < 1 [0:0] L
-- > 16 [1:0]
---- < 13 [0:0] L
---- > 18 [0:0] L
set([1, 3, 9, 13, 16, 18])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104e72d40>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 67 steps

SAVING TEST AS failure.99887.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 7                                                                 # STEP 0
ACTION: int2 = 7 
int2 = None : <type 'NoneType'>
=> int2 = 7 : <type 'int'>
==================================================
int1 = 14                                                                # STEP 1
ACTION: int1 = 14 
int1 = None : <type 'NoneType'>
=> int1 = 14 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 2
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x104e72fc8> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int1)                                                        # STEP 3
ACTION: avl2.insert(int1) 
int1 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e72fc8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([14]) : <type 'set'>
==================================================
avl2.delete(int1)                                                        # STEP 4
ACTION: avl2.delete(int1) 
int1 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e72fc8> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int3 = 2                                                                 # STEP 5
ACTION: int3 = 2 
int3 = None : <type 'NoneType'>
=> int3 = 2 : <type 'int'>
==================================================
avl2.delete(int3)                                                        # STEP 6
ACTION: avl2.delete(int3) 
int3 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e72fc8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.insert(int1)                                                        # STEP 7
ACTION: avl2.insert(int1) 
int1 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e72fc8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([14]) : <type 'set'>
==================================================
result = avl2.inorder()                                                  # STEP 8
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104e72fc8> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int1)                                                        # STEP 9
ACTION: avl2.delete(int1) 
int1 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e72fc8> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int1 = 20                                                               # STEP 10
ACTION: int1 = 20 
int1 = 14 : <type 'int'>
=> int1 = 20 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 11
ACTION: avl2.delete(int2) 
int2 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e72fc8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int0 = 5                                                                # STEP 12
ACTION: int0 = 5 
int0 = None : <type 'NoneType'>
=> int0 = 5 : <type 'int'>
==================================================
avl2 == avl2                                                            # STEP 13
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x104e72fc8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl2.delete(int0)                                                       # STEP 14
ACTION: avl2.delete(int0) 
int0 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e72fc8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
result = avl2.find(int3)                                                # STEP 15
ACTION: result = avl2.find(int3) 
int3 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e72fc8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl2.delete(int3)                                                       # STEP 16
ACTION: avl2.delete(int3) 
int3 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e72fc8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.insert(int2)                                                       # STEP 17
ACTION: avl2.insert(int2) 
int2 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e72fc8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([7]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 18
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104e72fc8> : <type 'instance'>
avl_REF2 = set([7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int0)                                                       # STEP 19
ACTION: avl2.delete(int0) 
int0 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e72fc8> : <type 'instance'>
avl_REF2 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.delete(int0)                                                       # STEP 20
ACTION: avl2.delete(int0) 
int0 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e72fc8> : <type 'instance'>
avl_REF2 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
result = avl2.find(int2)                                                # STEP 21
ACTION: result = avl2.find(int2) 
int2 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e72fc8> : <type 'instance'>
avl_REF2 = set([7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int3 = 5                                                                # STEP 22
ACTION: int3 = 5 
int3 = 2 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
int0 = 1                                                                # STEP 23
ACTION: int0 = 1 
int0 = 5 : <type 'int'>
=> int0 = 1 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 24
ACTION: avl2.delete(int3) 
int3 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e72fc8> : <type 'instance'>
avl_REF2 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
result = avl2.inorder()                                                 # STEP 25
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104e72fc8> : <type 'instance'>
avl_REF2 = set([7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int3)                                                       # STEP 26
ACTION: avl2.insert(int3) 
int3 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e72fc8> : <type 'instance'>
avl_REF2 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([5, 7]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 27
ACTION: avl2.delete(int2) 
int2 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e72fc8> : <type 'instance'>
avl_REF2 = set([5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([5]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 28
ACTION: avl2.insert(int2) 
int2 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e72fc8> : <type 'instance'>
avl_REF2 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([5, 7]) : <type 'set'>
==================================================
int2 = 15                                                               # STEP 29
ACTION: int2 = 15 
int2 = 7 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 30
ACTION: avl2.delete(int1) 
int1 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e72fc8> : <type 'instance'>
avl_REF2 = set([5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int0)                                                       # STEP 31
ACTION: avl2.insert(int0) 
int0 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e72fc8> : <type 'instance'>
avl_REF2 = set([5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([1, 5, 7]) : <type 'set'>
==================================================
int1 = 7                                                                # STEP 32
ACTION: int1 = 7 
int1 = 20 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 33
ACTION: avl2.insert(int0) 
int0 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e72fc8> : <type 'instance'>
avl_REF2 = set([1, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl2.insert(int2)                                                       # STEP 34
ACTION: avl2.insert(int2) 
int2 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e72fc8> : <type 'instance'>
avl_REF2 = set([1, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([1, 15, 5, 7]) : <type 'set'>
==================================================
result = avl2.find(int2)                                                # STEP 35
ACTION: result = avl2.find(int2) 
int2 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e72fc8> : <type 'instance'>
avl_REF2 = set([1, 15, 5, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl2.delete(int2)                                                       # STEP 36
ACTION: avl2.delete(int2) 
int2 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e72fc8> : <type 'instance'>
avl_REF2 = set([1, 15, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([1, 5, 7]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 37
ACTION: avl2.insert(int2) 
int2 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e72fc8> : <type 'instance'>
avl_REF2 = set([1, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([1, 15, 5, 7]) : <type 'set'>
==================================================
result = avl2.find(int0)                                                # STEP 38
ACTION: result = avl2.find(int0) 
int0 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e72fc8> : <type 'instance'>
avl_REF2 = set([1, 15, 5, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl2.delete(int2)                                                       # STEP 39
ACTION: avl2.delete(int2) 
int2 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e72fc8> : <type 'instance'>
avl_REF2 = set([1, 15, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([1, 5, 7]) : <type 'set'>
==================================================
int2 = 15                                                               # STEP 40
ACTION: int2 = 15 
int2 = 15 : <type 'int'>
==================================================
int0 = 4                                                                # STEP 41
ACTION: int0 = 4 
int0 = 1 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
int3 = 5                                                                # STEP 42
ACTION: int3 = 5 
int3 = 5 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 43
ACTION: avl2.delete(int0) 
int0 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e72fc8> : <type 'instance'>
avl_REF2 = set([1, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int0 = 8                                                                # STEP 44
ACTION: int0 = 8 
int0 = 4 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 45
ACTION: avl2.delete(int0) 
int0 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e72fc8> : <type 'instance'>
avl_REF2 = set([1, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.delete(int3)                                                       # STEP 46
ACTION: avl2.delete(int3) 
int3 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e72fc8> : <type 'instance'>
avl_REF2 = set([1, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([1, 7]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 47
ACTION: avl2.delete(int1) 
int1 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e72fc8> : <type 'instance'>
avl_REF2 = set([1, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([1]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 48
ACTION: avl2.delete(int0) 
int0 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e72fc8> : <type 'instance'>
avl_REF2 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int1 = 14                                                               # STEP 49
ACTION: int1 = 14 
int1 = 7 : <type 'int'>
=> int1 = 14 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 50
ACTION: avl2.delete(int0) 
int0 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e72fc8> : <type 'instance'>
avl_REF2 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int0 = 3                                                                # STEP 51
ACTION: int0 = 3 
int0 = 8 : <type 'int'>
=> int0 = 3 : <type 'int'>
==================================================
int3 = 5                                                                # STEP 52
ACTION: int3 = 5 
int3 = 5 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 53
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104e72fc8> : <type 'instance'>
avl_REF2 = set([1]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int1)                                                       # STEP 54
ACTION: avl2.insert(int1) 
int1 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e72fc8> : <type 'instance'>
avl_REF2 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([1, 14]) : <type 'set'>
==================================================
int1 = 11                                                               # STEP 55
ACTION: int1 = 11 
int1 = 14 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 56
ACTION: avl2.delete(int2) 
int2 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e72fc8> : <type 'instance'>
avl_REF2 = set([1, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
result = avl2.inorder()                                                 # STEP 57
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104e72fc8> : <type 'instance'>
avl_REF2 = set([1, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int2 = 8                                                                # STEP 58
ACTION: int2 = 8 
int2 = 15 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 59
ACTION: avl2.insert(int2) 
int2 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e72fc8> : <type 'instance'>
avl_REF2 = set([1, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([1, 8, 14]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 60
ACTION: avl2.insert(int0) 
int0 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e72fc8> : <type 'instance'>
avl_REF2 = set([1, 8, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([1, 3, 8, 14]) : <type 'set'>
==================================================
int0 = 8                                                                # STEP 61
ACTION: int0 = 8 
int0 = 3 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
int2 = 12                                                               # STEP 62
ACTION: int2 = 12 
int2 = 8 : <type 'int'>
=> int2 = 12 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 63
ACTION: avl2.insert(int3) 
int3 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e72fc8> : <type 'instance'>
avl_REF2 = set([1, 3, 8, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([1, 3, 5, 8, 14]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 64
ACTION: avl2.delete(int2) 
int2 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e72fc8> : <type 'instance'>
avl_REF2 = set([1, 3, 5, 8, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.insert(int3)                                                       # STEP 65
ACTION: avl2.insert(int3) 
int3 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e72fc8> : <type 'instance'>
avl_REF2 = set([1, 3, 5, 8, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
avl2.delete(int0)                                                       # STEP 66
ACTION: avl2.delete(int0) 
int0 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e72fc8> : <type 'instance'>
avl_REF2 = set([1, 3, 5, 8, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([1, 3, 5, 14]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104a67908>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
TEST #5 STEP #0 (0:00:35.622142) Fri Apr 28 05:13:20 2017 [ 164 stmts 220 branches ]
  6 [2:0]
-- < 1 [1:-1]
---- > 5 [0:0] L
-- > 9 [1:0]
---- < 7 [0:0] L
---- > 13 [0:0] L
set([1, 5, 6, 7, 9, 13])
  6 [2:0]
-- < 1 [1:-1]
---- > 5 [0:0] L
-- > 9 [1:0]
---- < 7 [0:0] L
---- > 13 [0:0] L
set([1, 5, 6, 7, 9, 13])
  6 [2:0]
-- < 1 [1:-1]
---- > 5 [0:0] L
-- > 9 [1:0]
---- < 7 [0:0] L
---- > 13 [0:0] L
set([1, 5, 6, 7, 9, 13])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104a49128>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 58 steps

SAVING TEST AS failure.99887.test.2
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 6                                                                 # STEP 0
ACTION: int3 = 6 
int3 = None : <type 'NoneType'>
=> int3 = 6 : <type 'int'>
==================================================
int1 = 12                                                                # STEP 1
ACTION: int1 = 12 
int1 = None : <type 'NoneType'>
=> int1 = 12 : <type 'int'>
==================================================
int0 = 17                                                                # STEP 2
ACTION: int0 = 17 
int0 = None : <type 'NoneType'>
=> int0 = 17 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 3
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x104a49638> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl2.inorder()                                                  # STEP 4
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104a49638> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl2.find(int0)                                                 # STEP 5
ACTION: result = avl2.find(int0) 
int0 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a49638> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
int0 = 7                                                                 # STEP 6
ACTION: int0 = 7 
int0 = 17 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
int2 = 12                                                                # STEP 7
ACTION: int2 = 12 
int2 = None : <type 'NoneType'>
=> int2 = 12 : <type 'int'>
==================================================
avl2.delete(int1)                                                        # STEP 8
ACTION: avl2.delete(int1) 
int1 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a49638> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2 == avl2                                                             # STEP 9
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x104a49638> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
int1 = 6                                                                # STEP 10
ACTION: int1 = 6 
int1 = 12 : <type 'int'>
=> int1 = 6 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 11
ACTION: avl2.delete(int2) 
int2 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a49638> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.delete(int1)                                                       # STEP 12
ACTION: avl2.delete(int1) 
int1 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a49638> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.delete(int3)                                                       # STEP 13
ACTION: avl2.delete(int3) 
int3 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a49638> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.delete(int2)                                                       # STEP 14
ACTION: avl2.delete(int2) 
int2 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a49638> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int3 = 15                                                               # STEP 15
ACTION: int3 = 15 
int3 = 6 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 16
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104a49638> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int0)                                                       # STEP 17
ACTION: avl2.delete(int0) 
int0 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a49638> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int1 = 18                                                               # STEP 18
ACTION: int1 = 18 
int1 = 6 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 19
ACTION: avl2.delete(int3) 
int3 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a49638> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.delete(int1)                                                       # STEP 20
ACTION: avl2.delete(int1) 
int1 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a49638> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int3)                                                       # STEP 21
ACTION: avl2.insert(int3) 
int3 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a49638> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([15]) : <type 'set'>
==================================================
int1 = 5                                                                # STEP 22
ACTION: int1 = 5 
int1 = 18 : <type 'int'>
=> int1 = 5 : <type 'int'>
==================================================
int3 = 17                                                               # STEP 23
ACTION: int3 = 17 
int3 = 15 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 24
ACTION: avl2.delete(int1) 
int1 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a49638> : <type 'instance'>
avl_REF2 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int2)                                                       # STEP 25
ACTION: avl2.insert(int2) 
int2 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a49638> : <type 'instance'>
avl_REF2 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([12, 15]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 26
ACTION: avl2.delete(int0) 
int0 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a49638> : <type 'instance'>
avl_REF2 = set([12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.insert(int0)                                                       # STEP 27
ACTION: avl2.insert(int0) 
int0 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a49638> : <type 'instance'>
avl_REF2 = set([12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([7, 12, 15]) : <type 'set'>
==================================================
avl2 == avl2                                                            # STEP 28
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x104a49638> : <type 'instance'>
avl_REF2 = set([7, 12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl2.delete(int0)                                                       # STEP 29
ACTION: avl2.delete(int0) 
int0 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a49638> : <type 'instance'>
avl_REF2 = set([7, 12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([12, 15]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 30
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104a49638> : <type 'instance'>
avl_REF2 = set([12, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl0 = avl.AVLTree()                                                    # STEP 31
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x104a7c098> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl2 == avl2                                                            # STEP 32
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x104a49638> : <type 'instance'>
avl_REF2 = set([12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
result = avl0.find(int2)                                                # STEP 33
ACTION: result = avl0.find(int2) 
int2 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104a7c098> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl0.delete(int3)                                                       # STEP 34
ACTION: avl0.delete(int3) 
int3 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104a7c098> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int0 = 17                                                               # STEP 35
ACTION: int0 = 17 
int0 = 7 : <type 'int'>
=> int0 = 17 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 36
ACTION: avl2.insert(int2) 
int2 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a49638> : <type 'instance'>
avl_REF2 = set([12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl2 = avl.AVLTree()                                                    # STEP 37
ACTION: avl2 = avl.AVLTree() 
avl2 = <avl.AVLTree instance at 0x104a49638> : <type 'instance'>
avl_REF2 = set([12, 15]) : <type 'set'>
=> avl2 = <avl.AVLTree instance at 0x104a82098> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int3 = 16                                                               # STEP 38
ACTION: int3 = 16 
int3 = 17 : <type 'int'>
=> int3 = 16 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 39
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104a82098> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl0.insert(int0)                                                       # STEP 40
ACTION: avl0.insert(int0) 
int0 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104a7c098> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([17]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 41
ACTION: avl0.delete(int0) 
int0 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104a7c098> : <type 'instance'>
avl_REF0 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 42
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104a7c098> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.delete(int0)                                                       # STEP 43
ACTION: avl0.delete(int0) 
int0 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104a7c098> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.delete(int1)                                                       # STEP 44
ACTION: avl0.delete(int1) 
int1 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104a7c098> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl2.delete(int1)                                                       # STEP 45
ACTION: avl2.delete(int1) 
int1 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a82098> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int1)                                                       # STEP 46
ACTION: avl2.insert(int1) 
int1 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a82098> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([5]) : <type 'set'>
==================================================
int0 = 7                                                                # STEP 47
ACTION: int0 = 7 
int0 = 17 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 48
ACTION: avl2.insert(int1) 
int1 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a82098> : <type 'instance'>
avl_REF2 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl2.insert(int2)                                                       # STEP 49
ACTION: avl2.insert(int2) 
int2 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a82098> : <type 'instance'>
avl_REF2 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([12, 5]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 50
ACTION: avl2.insert(int3) 
int3 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a82098> : <type 'instance'>
avl_REF2 = set([12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([16, 12, 5]) : <type 'set'>
==================================================
int3 = 9                                                                # STEP 51
ACTION: int3 = 9 
int3 = 16 : <type 'int'>
=> int3 = 9 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 52
ACTION: avl2.insert(int0) 
int0 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a82098> : <type 'instance'>
avl_REF2 = set([16, 12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([16, 12, 5, 7]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 53
ACTION: avl0.delete(int2) 
int2 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104a7c098> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.insert(int2)                                                       # STEP 54
ACTION: avl0.insert(int2) 
int2 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104a7c098> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([12]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 55
ACTION: avl0.delete(int3) 
int3 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104a7c098> : <type 'instance'>
avl_REF0 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0 = avl.AVLTree()                                                    # STEP 56
ACTION: avl0 = avl.AVLTree() 
avl0 = <avl.AVLTree instance at 0x104a7c098> : <type 'instance'>
avl_REF0 = set([12]) : <type 'set'>
=> avl0 = <avl.AVLTree instance at 0x104a5f440> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 57
ACTION: avl2.delete(int2) 
int2 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a82098> : <type 'instance'>
avl_REF2 = set([16, 12, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([16, 5, 7]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104a5f6c8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 3 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104a70680>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 33 steps

SAVING TEST AS failure.99887.test.3
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 14                                                                # STEP 0
ACTION: int1 = 14 
int1 = None : <type 'NoneType'>
=> int1 = 14 : <type 'int'>
==================================================
int3 = 15                                                                # STEP 1
ACTION: int3 = 15 
int3 = None : <type 'NoneType'>
=> int3 = 15 : <type 'int'>
==================================================
int0 = 16                                                                # STEP 2
ACTION: int0 = 16 
int0 = None : <type 'NoneType'>
=> int0 = 16 : <type 'int'>
==================================================
int2 = 5                                                                 # STEP 3
ACTION: int2 = 5 
int2 = None : <type 'NoneType'>
=> int2 = 5 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x104a70dd0> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
result = avl1.inorder()                                                  # STEP 5
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104a70dd0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.delete(int3)                                                        # STEP 6
ACTION: avl1.delete(int3) 
int3 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104a70dd0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.delete(int3)                                                        # STEP 7
ACTION: avl1.delete(int3) 
int3 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104a70dd0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.delete(int1)                                                        # STEP 8
ACTION: avl1.delete(int1) 
int1 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104a70dd0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.insert(int1)                                                        # STEP 9
ACTION: avl1.insert(int1) 
int1 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104a70dd0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([14]) : <type 'set'>
==================================================
int1 = 4                                                                # STEP 10
ACTION: int1 = 4 
int1 = 14 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 11
ACTION: avl1.delete(int3) 
int3 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104a70dd0> : <type 'instance'>
avl_REF1 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.insert(int2)                                                       # STEP 12
ACTION: avl1.insert(int2) 
int2 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104a70dd0> : <type 'instance'>
avl_REF1 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([5, 14]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 13
ACTION: avl1.delete(int0) 
int0 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104a70dd0> : <type 'instance'>
avl_REF1 = set([5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.delete(int2)                                                       # STEP 14
ACTION: avl1.delete(int2) 
int2 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104a70dd0> : <type 'instance'>
avl_REF1 = set([5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([14]) : <type 'set'>
==================================================
int0 = 2                                                                # STEP 15
ACTION: int0 = 2 
int0 = 16 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 16
ACTION: avl1.insert(int0) 
int0 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104a70dd0> : <type 'instance'>
avl_REF1 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([2, 14]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 17
ACTION: avl1.delete(int1) 
int1 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104a70dd0> : <type 'instance'>
avl_REF1 = set([2, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int1 = 11                                                               # STEP 18
ACTION: int1 = 11 
int1 = 4 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 19
ACTION: avl1.insert(int2) 
int2 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104a70dd0> : <type 'instance'>
avl_REF1 = set([2, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([2, 5, 14]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 20
ACTION: avl1.insert(int1) 
int1 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104a70dd0> : <type 'instance'>
avl_REF1 = set([2, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([2, 11, 5, 14]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 21
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104a70dd0> : <type 'instance'>
avl_REF1 = set([2, 11, 5, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
result = avl1.find(int3)                                                # STEP 22
ACTION: result = avl1.find(int3) 
int3 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104a70dd0> : <type 'instance'>
avl_REF1 = set([2, 11, 5, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
int1 = 16                                                               # STEP 23
ACTION: int1 = 16 
int1 = 11 : <type 'int'>
=> int1 = 16 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 24
ACTION: avl1.insert(int2) 
int2 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104a70dd0> : <type 'instance'>
avl_REF1 = set([2, 11, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
result = avl1.inorder()                                                 # STEP 25
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104a70dd0> : <type 'instance'>
avl_REF1 = set([2, 11, 5, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.delete(int3)                                                       # STEP 26
ACTION: avl1.delete(int3) 
int3 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104a70dd0> : <type 'instance'>
avl_REF1 = set([2, 11, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.delete(int1)                                                       # STEP 27
ACTION: avl1.delete(int1) 
int1 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104a70dd0> : <type 'instance'>
avl_REF1 = set([2, 11, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.insert(int0)                                                       # STEP 28
ACTION: avl1.insert(int0) 
int0 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104a70dd0> : <type 'instance'>
avl_REF1 = set([2, 11, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.delete(int2)                                                       # STEP 29
ACTION: avl1.delete(int2) 
int2 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104a70dd0> : <type 'instance'>
avl_REF1 = set([2, 11, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([2, 11, 14]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 30
ACTION: avl1.insert(int1) 
int1 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104a70dd0> : <type 'instance'>
avl_REF1 = set([2, 11, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([16, 2, 11, 14]) : <type 'set'>
==================================================
avl1 == avl1                                                            # STEP 31
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x104a70dd0> : <type 'instance'>
avl_REF1 = set([16, 2, 11, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.delete(int0)                                                       # STEP 32
ACTION: avl1.delete(int0) 
int0 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104a70dd0> : <type 'instance'>
avl_REF1 = set([16, 2, 11, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([16, 11, 14]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104e6aa70>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 4 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 40
STOPPING TESTING DUE TO TIMEOUT
8.72073294876 PERCENT COVERED
60.2253890038 TOTAL RUNTIME
8 EXECUTED
547 TOTAL TEST OPERATIONS
21.7107217312 TIME SPENT EXECUTING TEST OPERATIONS
0.0600028038025 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
21.8003294468 TIME SPENT CHECKING PROPERTIES
43.511051178 TOTAL TIME SPENT RUNNING SUT
0.00467967987061 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
4 FAILED
0 REPEATS OF FAILURES
4 ACTUAL DISTINCT FAILURES

FAILURE 0
avl1 = avl.AVLTree()                                                     # STEP 0
int0 = 16                                                                # STEP 1
result = avl1.inorder()                                                  # STEP 2
avl1.insert(int0)                                                        # STEP 3
int0 = 17                                                                # STEP 4
avl1.delete(int0)                                                        # STEP 5
int3 = 7                                                                 # STEP 6
avl1.delete(int3)                                                        # STEP 7
avl1.insert(int0)                                                        # STEP 8
int0 = 6                                                                 # STEP 9
result = avl1.inorder()                                                 # STEP 10
int3 = 16                                                               # STEP 11
avl1.insert(int3)                                                       # STEP 12
avl1.insert(int3)                                                       # STEP 13
avl1.delete(int0)                                                       # STEP 14
result = avl1.find(int0)                                                # STEP 15
avl1.delete(int3)                                                       # STEP 16
avl1.insert(int0)                                                       # STEP 17
avl1.delete(int3)                                                       # STEP 18
int3 = 5                                                                # STEP 19
avl1 = avl.AVLTree()                                                    # STEP 20
result = avl1.find(int3)                                                # STEP 21
avl1.insert(int3)                                                       # STEP 22
int3 = 15                                                               # STEP 23
int2 = 9                                                                # STEP 24
int0 = 1                                                                # STEP 25
avl1.delete(int3)                                                       # STEP 26
avl1.delete(int2)                                                       # STEP 27
avl1.delete(int2)                                                       # STEP 28
int1 = 15                                                               # STEP 29
result = avl1.inorder()                                                 # STEP 30
int3 = 12                                                               # STEP 31
avl1.insert(int0)                                                       # STEP 32
avl1.insert(int0)                                                       # STEP 33
result = avl1.find(int2)                                                # STEP 34
avl1.insert(int3)                                                       # STEP 35
avl1.delete(int0)                                                       # STEP 36
int2 = 4                                                                # STEP 37
avl1.insert(int3)                                                       # STEP 38
avl1.insert(int2)                                                       # STEP 39
result = avl1.inorder()                                                 # STEP 40
avl1.insert(int0)                                                       # STEP 41
avl1.insert(int3)                                                       # STEP 42
avl1.insert(int3)                                                       # STEP 43
avl1.delete(int2)                                                       # STEP 44
avl1.delete(int1)                                                       # STEP 45
avl1.insert(int3)                                                       # STEP 46
avl1.insert(int2)                                                       # STEP 47
avl1.delete(int3)                                                       # STEP 48
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104c05200>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE 1
int2 = 7                                                                 # STEP 0
int1 = 14                                                                # STEP 1
avl2 = avl.AVLTree()                                                     # STEP 2
avl2.insert(int1)                                                        # STEP 3
avl2.delete(int1)                                                        # STEP 4
int3 = 2                                                                 # STEP 5
avl2.delete(int3)                                                        # STEP 6
avl2.insert(int1)                                                        # STEP 7
result = avl2.inorder()                                                  # STEP 8
avl2.delete(int1)                                                        # STEP 9
int1 = 20                                                               # STEP 10
avl2.delete(int2)                                                       # STEP 11
int0 = 5                                                                # STEP 12
avl2 == avl2                                                            # STEP 13
avl2.delete(int0)                                                       # STEP 14
result = avl2.find(int3)                                                # STEP 15
avl2.delete(int3)                                                       # STEP 16
avl2.insert(int2)                                                       # STEP 17
result = avl2.inorder()                                                 # STEP 18
avl2.delete(int0)                                                       # STEP 19
avl2.delete(int0)                                                       # STEP 20
result = avl2.find(int2)                                                # STEP 21
int3 = 5                                                                # STEP 22
int0 = 1                                                                # STEP 23
avl2.delete(int3)                                                       # STEP 24
result = avl2.inorder()                                                 # STEP 25
avl2.insert(int3)                                                       # STEP 26
avl2.delete(int2)                                                       # STEP 27
avl2.insert(int2)                                                       # STEP 28
int2 = 15                                                               # STEP 29
avl2.delete(int1)                                                       # STEP 30
avl2.insert(int0)                                                       # STEP 31
int1 = 7                                                                # STEP 32
avl2.insert(int0)                                                       # STEP 33
avl2.insert(int2)                                                       # STEP 34
result = avl2.find(int2)                                                # STEP 35
avl2.delete(int2)                                                       # STEP 36
avl2.insert(int2)                                                       # STEP 37
result = avl2.find(int0)                                                # STEP 38
avl2.delete(int2)                                                       # STEP 39
int2 = 15                                                               # STEP 40
int0 = 4                                                                # STEP 41
int3 = 5                                                                # STEP 42
avl2.delete(int0)                                                       # STEP 43
int0 = 8                                                                # STEP 44
avl2.delete(int0)                                                       # STEP 45
avl2.delete(int3)                                                       # STEP 46
avl2.delete(int1)                                                       # STEP 47
avl2.delete(int0)                                                       # STEP 48
int1 = 14                                                               # STEP 49
avl2.delete(int0)                                                       # STEP 50
int0 = 3                                                                # STEP 51
int3 = 5                                                                # STEP 52
result = avl2.inorder()                                                 # STEP 53
avl2.insert(int1)                                                       # STEP 54
int1 = 11                                                               # STEP 55
avl2.delete(int2)                                                       # STEP 56
result = avl2.inorder()                                                 # STEP 57
int2 = 8                                                                # STEP 58
avl2.insert(int2)                                                       # STEP 59
avl2.insert(int0)                                                       # STEP 60
int0 = 8                                                                # STEP 61
int2 = 12                                                               # STEP 62
avl2.insert(int3)                                                       # STEP 63
avl2.delete(int2)                                                       # STEP 64
avl2.insert(int3)                                                       # STEP 65
avl2.delete(int0)                                                       # STEP 66
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104a67908>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE 2
int3 = 6                                                                 # STEP 0
int1 = 12                                                                # STEP 1
int0 = 17                                                                # STEP 2
avl2 = avl.AVLTree()                                                     # STEP 3
result = avl2.inorder()                                                  # STEP 4
result = avl2.find(int0)                                                 # STEP 5
int0 = 7                                                                 # STEP 6
int2 = 12                                                                # STEP 7
avl2.delete(int1)                                                        # STEP 8
avl2 == avl2                                                             # STEP 9
int1 = 6                                                                # STEP 10
avl2.delete(int2)                                                       # STEP 11
avl2.delete(int1)                                                       # STEP 12
avl2.delete(int3)                                                       # STEP 13
avl2.delete(int2)                                                       # STEP 14
int3 = 15                                                               # STEP 15
result = avl2.inorder()                                                 # STEP 16
avl2.delete(int0)                                                       # STEP 17
int1 = 18                                                               # STEP 18
avl2.delete(int3)                                                       # STEP 19
avl2.delete(int1)                                                       # STEP 20
avl2.insert(int3)                                                       # STEP 21
int1 = 5                                                                # STEP 22
int3 = 17                                                               # STEP 23
avl2.delete(int1)                                                       # STEP 24
avl2.insert(int2)                                                       # STEP 25
avl2.delete(int0)                                                       # STEP 26
avl2.insert(int0)                                                       # STEP 27
avl2 == avl2                                                            # STEP 28
avl2.delete(int0)                                                       # STEP 29
result = avl2.inorder()                                                 # STEP 30
avl0 = avl.AVLTree()                                                    # STEP 31
avl2 == avl2                                                            # STEP 32
result = avl0.find(int2)                                                # STEP 33
avl0.delete(int3)                                                       # STEP 34
int0 = 17                                                               # STEP 35
avl2.insert(int2)                                                       # STEP 36
avl2 = avl.AVLTree()                                                    # STEP 37
int3 = 16                                                               # STEP 38
result = avl2.inorder()                                                 # STEP 39
avl0.insert(int0)                                                       # STEP 40
avl0.delete(int0)                                                       # STEP 41
result = avl0.inorder()                                                 # STEP 42
avl0.delete(int0)                                                       # STEP 43
avl0.delete(int1)                                                       # STEP 44
avl2.delete(int1)                                                       # STEP 45
avl2.insert(int1)                                                       # STEP 46
int0 = 7                                                                # STEP 47
avl2.insert(int1)                                                       # STEP 48
avl2.insert(int2)                                                       # STEP 49
avl2.insert(int3)                                                       # STEP 50
int3 = 9                                                                # STEP 51
avl2.insert(int0)                                                       # STEP 52
avl0.delete(int2)                                                       # STEP 53
avl0.insert(int2)                                                       # STEP 54
avl0.delete(int3)                                                       # STEP 55
avl0 = avl.AVLTree()                                                    # STEP 56
avl2.delete(int2)                                                       # STEP 57
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104a5f6c8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE 3
int1 = 14                                                                # STEP 0
int3 = 15                                                                # STEP 1
int0 = 16                                                                # STEP 2
int2 = 5                                                                 # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
result = avl1.inorder()                                                  # STEP 5
avl1.delete(int3)                                                        # STEP 6
avl1.delete(int3)                                                        # STEP 7
avl1.delete(int1)                                                        # STEP 8
avl1.insert(int1)                                                        # STEP 9
int1 = 4                                                                # STEP 10
avl1.delete(int3)                                                       # STEP 11
avl1.insert(int2)                                                       # STEP 12
avl1.delete(int0)                                                       # STEP 13
avl1.delete(int2)                                                       # STEP 14
int0 = 2                                                                # STEP 15
avl1.insert(int0)                                                       # STEP 16
avl1.delete(int1)                                                       # STEP 17
int1 = 11                                                               # STEP 18
avl1.insert(int2)                                                       # STEP 19
avl1.insert(int1)                                                       # STEP 20
result = avl1.inorder()                                                 # STEP 21
result = avl1.find(int3)                                                # STEP 22
int1 = 16                                                               # STEP 23
avl1.insert(int2)                                                       # STEP 24
result = avl1.inorder()                                                 # STEP 25
avl1.delete(int3)                                                       # STEP 26
avl1.delete(int1)                                                       # STEP 27
avl1.insert(int0)                                                       # STEP 28
avl1.delete(int2)                                                       # STEP 29
avl1.insert(int1)                                                       # STEP 30
avl1 == avl1                                                            # STEP 31
avl1.delete(int0)                                                       # STEP 32
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104e6aa70>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
220 BRANCHES COVERED
164 STATEMENTS COVERED

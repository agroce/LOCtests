Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.918.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102efd638>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 46 steps

SAVING TEST AS failure.918.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 3                                                                 # STEP 0
ACTION: int3 = 3 
int3 = None : <type 'NoneType'>
=> int3 = 3 : <type 'int'>
==================================================
int0 = 15                                                                # STEP 1
ACTION: int0 = 15 
int0 = None : <type 'NoneType'>
=> int0 = 15 : <type 'int'>
==================================================
int1 = 7                                                                 # STEP 2
ACTION: int1 = 7 
int1 = None : <type 'NoneType'>
=> int1 = 7 : <type 'int'>
==================================================
int2 = 7                                                                 # STEP 3
ACTION: int2 = 7 
int2 = None : <type 'NoneType'>
=> int2 = 7 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x104d16a28> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.insert(int1)                                                        # STEP 5
ACTION: avl1.insert(int1) 
int1 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104d16a28> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([7]) : <type 'set'>
==================================================
avl1.insert(int1)                                                        # STEP 6
ACTION: avl1.insert(int1) 
int1 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104d16a28> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl1 == avl1                                                             # STEP 7
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x104d16a28> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.insert(int3)                                                        # STEP 8
ACTION: avl1.insert(int3) 
int3 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104d16a28> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([3, 7]) : <type 'set'>
==================================================
result = avl1.find(int1)                                                 # STEP 9
ACTION: result = avl1.find(int1) 
int1 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104d16a28> : <type 'instance'>
avl_REF1 = set([3, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
result = avl1.inorder()                                                 # STEP 10
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104d16a28> : <type 'instance'>
avl_REF1 = set([3, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.delete(int1)                                                       # STEP 11
ACTION: avl1.delete(int1) 
int1 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104d16a28> : <type 'instance'>
avl_REF1 = set([3, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([3]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 12
ACTION: avl1.insert(int2) 
int2 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104d16a28> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([3, 7]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 13
ACTION: avl1.delete(int0) 
int0 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104d16a28> : <type 'instance'>
avl_REF1 = set([3, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int2 = 6                                                                # STEP 14
ACTION: int2 = 6 
int2 = 7 : <type 'int'>
=> int2 = 6 : <type 'int'>
==================================================
int0 = 20                                                               # STEP 15
ACTION: int0 = 20 
int0 = 15 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 16
ACTION: avl1.insert(int1) 
int1 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104d16a28> : <type 'instance'>
avl_REF1 = set([3, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl1.delete(int3)                                                       # STEP 17
ACTION: avl1.delete(int3) 
int3 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104d16a28> : <type 'instance'>
avl_REF1 = set([3, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([7]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 18
ACTION: avl1.delete(int3) 
int3 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104d16a28> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int1 = 12                                                               # STEP 19
ACTION: int1 = 12 
int1 = 7 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 20
ACTION: avl1.insert(int0) 
int0 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104d16a28> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([20, 7]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 21
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104d16a28> : <type 'instance'>
avl_REF1 = set([20, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int1)                                                       # STEP 22
ACTION: avl1.insert(int1) 
int1 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104d16a28> : <type 'instance'>
avl_REF1 = set([20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([12, 20, 7]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 23
ACTION: avl1.delete(int1) 
int1 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104d16a28> : <type 'instance'>
avl_REF1 = set([12, 20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([20, 7]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 24
ACTION: avl1.insert(int1) 
int1 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104d16a28> : <type 'instance'>
avl_REF1 = set([20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([12, 20, 7]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 25
ACTION: avl1.delete(int0) 
int0 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104d16a28> : <type 'instance'>
avl_REF1 = set([12, 20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([12, 7]) : <type 'set'>
==================================================
int3 = 9                                                                # STEP 26
ACTION: int3 = 9 
int3 = 3 : <type 'int'>
=> int3 = 9 : <type 'int'>
==================================================
int0 = 5                                                                # STEP 27
ACTION: int0 = 5 
int0 = 20 : <type 'int'>
=> int0 = 5 : <type 'int'>
==================================================
int1 = 9                                                                # STEP 28
ACTION: int1 = 9 
int1 = 12 : <type 'int'>
=> int1 = 9 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 29
ACTION: avl1.insert(int0) 
int0 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104d16a28> : <type 'instance'>
avl_REF1 = set([12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([12, 5, 7]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 30
ACTION: avl1.delete(int0) 
int0 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104d16a28> : <type 'instance'>
avl_REF1 = set([12, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([12, 7]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 31
ACTION: avl1.insert(int3) 
int3 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104d16a28> : <type 'instance'>
avl_REF1 = set([12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([12, 9, 7]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 32
ACTION: avl1.insert(int2) 
int2 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104d16a28> : <type 'instance'>
avl_REF1 = set([12, 9, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([6, 7, 9, 12]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 33
ACTION: avl1.delete(int0) 
int0 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104d16a28> : <type 'instance'>
avl_REF1 = set([6, 7, 9, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
result = avl1.inorder()                                                 # STEP 34
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104d16a28> : <type 'instance'>
avl_REF1 = set([6, 7, 9, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int3 = 8                                                                # STEP 35
ACTION: int3 = 8 
int3 = 9 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 36
ACTION: avl1.delete(int0) 
int0 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104d16a28> : <type 'instance'>
avl_REF1 = set([6, 7, 9, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.delete(int3)                                                       # STEP 37
ACTION: avl1.delete(int3) 
int3 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104d16a28> : <type 'instance'>
avl_REF1 = set([6, 7, 9, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.delete(int3)                                                       # STEP 38
ACTION: avl1.delete(int3) 
int3 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104d16a28> : <type 'instance'>
avl_REF1 = set([6, 7, 9, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.insert(int3)                                                       # STEP 39
ACTION: avl1.insert(int3) 
int3 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104d16a28> : <type 'instance'>
avl_REF1 = set([6, 7, 9, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([6, 7, 8, 9, 12]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 40
ACTION: avl1.delete(int0) 
int0 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104d16a28> : <type 'instance'>
avl_REF1 = set([6, 7, 8, 9, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int3 = 20                                                               # STEP 41
ACTION: int3 = 20 
int3 = 8 : <type 'int'>
=> int3 = 20 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 42
ACTION: avl1.delete(int3) 
int3 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104d16a28> : <type 'instance'>
avl_REF1 = set([6, 7, 8, 9, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.delete(int2)                                                       # STEP 43
ACTION: avl1.delete(int2) 
int2 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104d16a28> : <type 'instance'>
avl_REF1 = set([6, 7, 8, 9, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([7, 8, 9, 12]) : <type 'set'>
==================================================
int3 = 1                                                                # STEP 44
ACTION: int3 = 1 
int3 = 20 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 45
ACTION: avl1.delete(int1) 
int1 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104d16a28> : <type 'instance'>
avl_REF1 = set([7, 8, 9, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([7, 8, 12]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104d508c0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104f7b9e0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 64 steps

SAVING TEST AS failure.918.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
avl1 = avl.AVLTree()                                                     # STEP 0
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x104b7eb90> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int2 = 10                                                                # STEP 1
ACTION: int2 = 10 
int2 = None : <type 'NoneType'>
=> int2 = 10 : <type 'int'>
==================================================
result = avl1.inorder()                                                  # STEP 2
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104b7eb90> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
result = avl1.inorder()                                                  # STEP 3
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104b7eb90> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.delete(int2)                                                        # STEP 4
ACTION: avl1.delete(int2) 
int2 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104b7eb90> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.delete(int2)                                                        # STEP 5
ACTION: avl1.delete(int2) 
int2 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104b7eb90> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.insert(int2)                                                        # STEP 6
ACTION: avl1.insert(int2) 
int2 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104b7eb90> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([10]) : <type 'set'>
==================================================
avl1.insert(int2)                                                        # STEP 7
ACTION: avl1.insert(int2) 
int2 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104b7eb90> : <type 'instance'>
avl_REF1 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
avl1.delete(int2)                                                        # STEP 8
ACTION: avl1.delete(int2) 
int2 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104b7eb90> : <type 'instance'>
avl_REF1 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
result = avl1.inorder()                                                  # STEP 9
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104b7eb90> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.delete(int2)                                                       # STEP 10
ACTION: avl1.delete(int2) 
int2 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104b7eb90> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.delete(int2)                                                       # STEP 11
ACTION: avl1.delete(int2) 
int2 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104b7eb90> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.insert(int2)                                                       # STEP 12
ACTION: avl1.insert(int2) 
int2 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104b7eb90> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([10]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 13
ACTION: avl1.delete(int2) 
int2 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104b7eb90> : <type 'instance'>
avl_REF1 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 14
ACTION: avl1.delete(int2) 
int2 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104b7eb90> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.delete(int2)                                                       # STEP 15
ACTION: avl1.delete(int2) 
int2 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104b7eb90> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.insert(int2)                                                       # STEP 16
ACTION: avl1.insert(int2) 
int2 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104b7eb90> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([10]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 17
ACTION: avl1.delete(int2) 
int2 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104b7eb90> : <type 'instance'>
avl_REF1 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 18
ACTION: avl1.delete(int2) 
int2 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104b7eb90> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.insert(int2)                                                       # STEP 19
ACTION: avl1.insert(int2) 
int2 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104b7eb90> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([10]) : <type 'set'>
==================================================
result = avl1.find(int2)                                                # STEP 20
ACTION: result = avl1.find(int2) 
int2 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104b7eb90> : <type 'instance'>
avl_REF1 = set([10]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
result = avl1.find(int2)                                                # STEP 21
ACTION: result = avl1.find(int2) 
int2 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104b7eb90> : <type 'instance'>
avl_REF1 = set([10]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int2 = 7                                                                # STEP 22
ACTION: int2 = 7 
int2 = 10 : <type 'int'>
=> int2 = 7 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 23
ACTION: avl1.delete(int2) 
int2 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104b7eb90> : <type 'instance'>
avl_REF1 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int2 = 14                                                               # STEP 24
ACTION: int2 = 14 
int2 = 7 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 25
ACTION: avl1.insert(int2) 
int2 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104b7eb90> : <type 'instance'>
avl_REF1 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([10, 14]) : <type 'set'>
==================================================
int1 = 6                                                                # STEP 26
ACTION: int1 = 6 
int1 = None : <type 'NoneType'>
=> int1 = 6 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 27
ACTION: avl1.insert(int2) 
int2 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104b7eb90> : <type 'instance'>
avl_REF1 = set([10, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
int0 = 7                                                                # STEP 28
ACTION: int0 = 7 
int0 = None : <type 'NoneType'>
=> int0 = 7 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 29
ACTION: avl1.insert(int0) 
int0 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104b7eb90> : <type 'instance'>
avl_REF1 = set([10, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([10, 14, 7]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 30
ACTION: avl1.insert(int2) 
int2 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104b7eb90> : <type 'instance'>
avl_REF1 = set([10, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
avl1.delete(int2)                                                       # STEP 31
ACTION: avl1.delete(int2) 
int2 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104b7eb90> : <type 'instance'>
avl_REF1 = set([10, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([10, 7]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 32
ACTION: avl1.delete(int0) 
int0 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104b7eb90> : <type 'instance'>
avl_REF1 = set([10, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([10]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 33
ACTION: avl1.delete(int0) 
int0 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104b7eb90> : <type 'instance'>
avl_REF1 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.insert(int2)                                                       # STEP 34
ACTION: avl1.insert(int2) 
int2 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104b7eb90> : <type 'instance'>
avl_REF1 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([10, 14]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 35
ACTION: avl1.insert(int2) 
int2 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104b7eb90> : <type 'instance'>
avl_REF1 = set([10, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
int3 = 5                                                                # STEP 36
ACTION: int3 = 5 
int3 = None : <type 'NoneType'>
=> int3 = 5 : <type 'int'>
==================================================
int2 = 4                                                                # STEP 37
ACTION: int2 = 4 
int2 = 14 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 38
ACTION: avl1.delete(int2) 
int2 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104b7eb90> : <type 'instance'>
avl_REF1 = set([10, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.insert(int3)                                                       # STEP 39
ACTION: avl1.insert(int3) 
int3 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104b7eb90> : <type 'instance'>
avl_REF1 = set([10, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([10, 5, 14]) : <type 'set'>
==================================================
int3 = 20                                                               # STEP 40
ACTION: int3 = 20 
int3 = 5 : <type 'int'>
=> int3 = 20 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 41
ACTION: avl1.delete(int3) 
int3 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104b7eb90> : <type 'instance'>
avl_REF1 = set([10, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.insert(int0)                                                       # STEP 42
ACTION: avl1.insert(int0) 
int0 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104b7eb90> : <type 'instance'>
avl_REF1 = set([10, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([10, 5, 14, 7]) : <type 'set'>
==================================================
int3 = 16                                                               # STEP 43
ACTION: int3 = 16 
int3 = 20 : <type 'int'>
=> int3 = 16 : <type 'int'>
==================================================
int0 = 14                                                               # STEP 44
ACTION: int0 = 14 
int0 = 7 : <type 'int'>
=> int0 = 14 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 45
ACTION: avl1.delete(int1) 
int1 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104b7eb90> : <type 'instance'>
avl_REF1 = set([10, 5, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.insert(int0)                                                       # STEP 46
ACTION: avl1.insert(int0) 
int0 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104b7eb90> : <type 'instance'>
avl_REF1 = set([10, 5, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.delete(int3)                                                       # STEP 47
ACTION: avl1.delete(int3) 
int3 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104b7eb90> : <type 'instance'>
avl_REF1 = set([10, 5, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.insert(int1)                                                       # STEP 48
ACTION: avl1.insert(int1) 
int1 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104b7eb90> : <type 'instance'>
avl_REF1 = set([10, 5, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([10, 6, 5, 14, 7]) : <type 'set'>
==================================================
int0 = 19                                                               # STEP 49
ACTION: int0 = 19 
int0 = 14 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 50
ACTION: avl1.insert(int0) 
int0 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104b7eb90> : <type 'instance'>
avl_REF1 = set([10, 6, 5, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([5, 6, 7, 10, 14, 19]) : <type 'set'>
==================================================
int1 = 14                                                               # STEP 51
ACTION: int1 = 14 
int1 = 6 : <type 'int'>
=> int1 = 14 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 52
ACTION: avl1.insert(int2) 
int2 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104b7eb90> : <type 'instance'>
avl_REF1 = set([5, 6, 7, 10, 14, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([4, 5, 6, 7, 10, 14, 19]) : <type 'set'>
==================================================
int0 = 2                                                                # STEP 53
ACTION: int0 = 2 
int0 = 19 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 54
ACTION: avl1.insert(int0) 
int0 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104b7eb90> : <type 'instance'>
avl_REF1 = set([4, 5, 6, 7, 10, 14, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([2, 4, 5, 6, 7, 10, 14, 19]) : <type 'set'>
==================================================
int0 = 17                                                               # STEP 55
ACTION: int0 = 17 
int0 = 2 : <type 'int'>
=> int0 = 17 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 56
ACTION: avl1.insert(int0) 
int0 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104b7eb90> : <type 'instance'>
avl_REF1 = set([2, 4, 5, 6, 7, 10, 14, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([2, 4, 5, 6, 7, 10, 14, 17, 19]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 57
ACTION: avl1.insert(int0) 
int0 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104b7eb90> : <type 'instance'>
avl_REF1 = set([2, 4, 5, 6, 7, 10, 14, 17, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.insert(int0)                                                       # STEP 58
ACTION: avl1.insert(int0) 
int0 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104b7eb90> : <type 'instance'>
avl_REF1 = set([2, 4, 5, 6, 7, 10, 14, 17, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.delete(int3)                                                       # STEP 59
ACTION: avl1.delete(int3) 
int3 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104b7eb90> : <type 'instance'>
avl_REF1 = set([2, 4, 5, 6, 7, 10, 14, 17, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.delete(int1)                                                       # STEP 60
ACTION: avl1.delete(int1) 
int1 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104b7eb90> : <type 'instance'>
avl_REF1 = set([2, 4, 5, 6, 7, 10, 14, 17, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([2, 4, 5, 6, 7, 10, 17, 19]) : <type 'set'>
==================================================
int2 = 19                                                               # STEP 61
ACTION: int2 = 19 
int2 = 4 : <type 'int'>
=> int2 = 19 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 62
ACTION: avl1.insert(int2) 
int2 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104b7eb90> : <type 'instance'>
avl_REF1 = set([2, 4, 5, 6, 7, 10, 17, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
avl1.delete(int2)                                                       # STEP 63
ACTION: avl1.delete(int2) 
int2 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104b7eb90> : <type 'instance'>
avl_REF1 = set([2, 4, 5, 6, 7, 10, 17, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([2, 4, 5, 6, 7, 10, 17]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1048accb0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
  8 [3:1]
-- < 6 [2:1]
---- < 2 [1:-1]
------ > 3 [0:0] L
---- > 7 [0:0] L
-- > 15 [1:1]
---- < 14 [0:0] L
set([2, 3, 6, 7, 8, 14, 15])
  8 [3:1]
-- < 6 [2:1]
---- < 2 [1:-1]
------ > 3 [0:0] L
---- > 7 [0:0] L
-- > 15 [1:1]
---- < 14 [0:0] L
set([2, 3, 6, 7, 8, 14, 15])
  8 [3:1]
-- < 6 [2:1]
---- < 2 [1:-1]
------ > 3 [0:0] L
---- > 7 [0:0] L
-- > 15 [1:1]
---- < 14 [0:0] L
set([2, 3, 6, 7, 8, 14, 15])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10498a6c8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 68 steps

SAVING TEST AS failure.918.test.2
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 7                                                                 # STEP 0
ACTION: int1 = 7 
int1 = None : <type 'NoneType'>
=> int1 = 7 : <type 'int'>
==================================================
int0 = 7                                                                 # STEP 1
ACTION: int0 = 7 
int0 = None : <type 'NoneType'>
=> int0 = 7 : <type 'int'>
==================================================
int3 = 6                                                                 # STEP 2
ACTION: int3 = 6 
int3 = None : <type 'NoneType'>
=> int3 = 6 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 3
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x1049a4950> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int2 = 10                                                                # STEP 4
ACTION: int2 = 10 
int2 = None : <type 'NoneType'>
=> int2 = 10 : <type 'int'>
==================================================
avl1.delete(int3)                                                        # STEP 5
ACTION: avl1.delete(int3) 
int3 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1049a4950> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
result = avl1.find(int1)                                                 # STEP 6
ACTION: result = avl1.find(int1) 
int1 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1049a4950> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl1.insert(int3)                                                        # STEP 7
ACTION: avl1.insert(int3) 
int3 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1049a4950> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([6]) : <type 'set'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 8
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x104b4f440> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.insert(int0)                                                        # STEP 9
ACTION: avl0.insert(int0) 
int0 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104b4f440> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([7]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 10
ACTION: avl1.insert(int3) 
int3 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1049a4950> : <type 'instance'>
avl_REF1 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
avl1.insert(int1)                                                       # STEP 11
ACTION: avl1.insert(int1) 
int1 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1049a4950> : <type 'instance'>
avl_REF1 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([6, 7]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 12
ACTION: avl0.delete(int2) 
int2 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104b4f440> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
result = avl1.find(int2)                                                # STEP 13
ACTION: result = avl1.find(int2) 
int2 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1049a4950> : <type 'instance'>
avl_REF1 = set([6, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int3 = 2                                                                # STEP 14
ACTION: int3 = 2 
int3 = 6 : <type 'int'>
=> int3 = 2 : <type 'int'>
==================================================
int1 = 5                                                                # STEP 15
ACTION: int1 = 5 
int1 = 7 : <type 'int'>
=> int1 = 5 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 16
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1049a4950> : <type 'instance'>
avl_REF1 = set([6, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.delete(int2)                                                       # STEP 17
ACTION: avl1.delete(int2) 
int2 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1049a4950> : <type 'instance'>
avl_REF1 = set([6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl0.delete(int3)                                                       # STEP 18
ACTION: avl0.delete(int3) 
int3 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104b4f440> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int0 = 12                                                               # STEP 19
ACTION: int0 = 12 
int0 = 7 : <type 'int'>
=> int0 = 12 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 20
ACTION: avl1.delete(int1) 
int1 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1049a4950> : <type 'instance'>
avl_REF1 = set([6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1 == avl0                                                            # STEP 21
ACTION: avl1 == avl0 
avl1 = <avl.AVLTree instance at 0x1049a4950> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x104b4f440> : <type 'instance'>
avl_REF1 = set([6, 7]) : <type 'set'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
avl0.delete(int3)                                                       # STEP 22
ACTION: avl0.delete(int3) 
int3 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104b4f440> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
result = avl1.find(int0)                                                # STEP 23
ACTION: result = avl1.find(int0) 
int0 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1049a4950> : <type 'instance'>
avl_REF1 = set([6, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
result = avl0.inorder()                                                 # STEP 24
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104b4f440> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int3)                                                       # STEP 25
ACTION: avl0.insert(int3) 
int3 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104b4f440> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([2, 7]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 26
ACTION: avl0.insert(int1) 
int1 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104b4f440> : <type 'instance'>
avl_REF0 = set([2, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([2, 5, 7]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 27
ACTION: avl1.insert(int3) 
int3 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1049a4950> : <type 'instance'>
avl_REF1 = set([6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([2, 6, 7]) : <type 'set'>
==================================================
int1 = 7                                                                # STEP 28
ACTION: int1 = 7 
int1 = 5 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 29
ACTION: avl0.delete(int3) 
int3 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104b4f440> : <type 'instance'>
avl_REF0 = set([2, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([5, 7]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 30
ACTION: avl1.delete(int1) 
int1 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1049a4950> : <type 'instance'>
avl_REF1 = set([2, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([2, 6]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 31
ACTION: avl0.delete(int3) 
int3 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104b4f440> : <type 'instance'>
avl_REF0 = set([5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.delete(int0)                                                       # STEP 32
ACTION: avl0.delete(int0) 
int0 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104b4f440> : <type 'instance'>
avl_REF0 = set([5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int2 = 8                                                                # STEP 33
ACTION: int2 = 8 
int2 = 10 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
result = avl0.find(int3)                                                # STEP 34
ACTION: result = avl0.find(int3) 
int3 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104b4f440> : <type 'instance'>
avl_REF0 = set([5, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
avl1.delete(int0)                                                       # STEP 35
ACTION: avl1.delete(int0) 
int0 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1049a4950> : <type 'instance'>
avl_REF1 = set([2, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int0 = 8                                                                # STEP 36
ACTION: int0 = 8 
int0 = 12 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 37
ACTION: avl1.delete(int2) 
int2 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1049a4950> : <type 'instance'>
avl_REF1 = set([2, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
result = avl0.find(int3)                                                # STEP 38
ACTION: result = avl0.find(int3) 
int3 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104b4f440> : <type 'instance'>
avl_REF0 = set([5, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
result = avl0.inorder()                                                 # STEP 39
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104b4f440> : <type 'instance'>
avl_REF0 = set([5, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int3 = 15                                                               # STEP 40
ACTION: int3 = 15 
int3 = 2 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
int2 = 8                                                                # STEP 41
ACTION: int2 = 8 
int2 = 8 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 42
ACTION: avl0.delete(int2) 
int2 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104b4f440> : <type 'instance'>
avl_REF0 = set([5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl1.insert(int3)                                                       # STEP 43
ACTION: avl1.insert(int3) 
int3 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1049a4950> : <type 'instance'>
avl_REF1 = set([2, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([2, 6, 15]) : <type 'set'>
==================================================
int2 = 14                                                               # STEP 44
ACTION: int2 = 14 
int2 = 8 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 45
ACTION: avl1.insert(int0) 
int0 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1049a4950> : <type 'instance'>
avl_REF1 = set([2, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([8, 2, 6, 15]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 46
ACTION: avl1.insert(int1) 
int1 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1049a4950> : <type 'instance'>
avl_REF1 = set([8, 2, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([8, 2, 7, 6, 15]) : <type 'set'>
==================================================
int1 = 3                                                                # STEP 47
ACTION: int1 = 3 
int1 = 7 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 48
ACTION: avl1.insert(int2) 
int2 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1049a4950> : <type 'instance'>
avl_REF1 = set([8, 2, 7, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([2, 6, 7, 8, 14, 15]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 49
ACTION: avl1.insert(int1) 
int1 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1049a4950> : <type 'instance'>
avl_REF1 = set([2, 6, 7, 8, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([2, 3, 6, 7, 8, 14, 15]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 50
ACTION: avl1.insert(int2) 
int2 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1049a4950> : <type 'instance'>
avl_REF1 = set([2, 3, 6, 7, 8, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
avl1.display()                                                          # STEP 51
ACTION: avl1.display() 
avl1 = <avl.AVLTree instance at 0x1049a4950> : <type 'instance'>
avl_REF1 = set([2, 3, 6, 7, 8, 14, 15]) : <type 'set'>
  8 [3:1]
-- < 6 [2:1]
---- < 2 [1:-1]
------ > 3 [0:0] L
---- > 7 [0:0] L
-- > 15 [1:1]
---- < 14 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([2, 3, 6, 7, 8, 14, 15])
==================================================
avl1 == avl0                                                            # STEP 52
ACTION: avl1 == avl0 
avl1 = <avl.AVLTree instance at 0x1049a4950> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x104b4f440> : <type 'instance'>
avl_REF1 = set([2, 3, 6, 7, 8, 14, 15]) : <type 'set'>
avl_REF0 = set([5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
avl1.display()                                                          # STEP 53
ACTION: avl1.display() 
avl1 = <avl.AVLTree instance at 0x1049a4950> : <type 'instance'>
avl_REF1 = set([2, 3, 6, 7, 8, 14, 15]) : <type 'set'>
  8 [3:1]
-- < 6 [2:1]
---- < 2 [1:-1]
------ > 3 [0:0] L
---- > 7 [0:0] L
-- > 15 [1:1]
---- < 14 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([2, 3, 6, 7, 8, 14, 15])
==================================================
avl0.delete(int0)                                                       # STEP 54
ACTION: avl0.delete(int0) 
int0 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104b4f440> : <type 'instance'>
avl_REF0 = set([5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl1.display()                                                          # STEP 55
ACTION: avl1.display() 
avl1 = <avl.AVLTree instance at 0x1049a4950> : <type 'instance'>
avl_REF1 = set([2, 3, 6, 7, 8, 14, 15]) : <type 'set'>
  8 [3:1]
-- < 6 [2:1]
---- < 2 [1:-1]
------ > 3 [0:0] L
---- > 7 [0:0] L
-- > 15 [1:1]
---- < 14 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([2, 3, 6, 7, 8, 14, 15])
==================================================
avl0.delete(int0)                                                       # STEP 56
ACTION: avl0.delete(int0) 
int0 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104b4f440> : <type 'instance'>
avl_REF0 = set([5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.insert(int3)                                                       # STEP 57
ACTION: avl0.insert(int3) 
int3 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104b4f440> : <type 'instance'>
avl_REF0 = set([5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([15, 5, 7]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 58
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1049a4950> : <type 'instance'>
avl_REF1 = set([2, 3, 6, 7, 8, 14, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl0.insert(int2)                                                       # STEP 59
ACTION: avl0.insert(int2) 
int2 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104b4f440> : <type 'instance'>
avl_REF0 = set([15, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([15, 5, 14, 7]) : <type 'set'>
==================================================
int3 = 14                                                               # STEP 60
ACTION: int3 = 14 
int3 = 15 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 61
ACTION: avl0.delete(int3) 
int3 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104b4f440> : <type 'instance'>
avl_REF0 = set([15, 5, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([15, 5, 7]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 62
ACTION: avl0.insert(int0) 
int0 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104b4f440> : <type 'instance'>
avl_REF0 = set([15, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([5, 7, 8, 15]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 63
ACTION: avl0.insert(int0) 
int0 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104b4f440> : <type 'instance'>
avl_REF0 = set([5, 7, 8, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
avl0.delete(int2)                                                       # STEP 64
ACTION: avl0.delete(int2) 
int2 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104b4f440> : <type 'instance'>
avl_REF0 = set([5, 7, 8, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl1.delete(int1)                                                       # STEP 65
ACTION: avl1.delete(int1) 
int1 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1049a4950> : <type 'instance'>
avl_REF1 = set([2, 3, 6, 7, 8, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([2, 6, 7, 8, 14, 15]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 66
ACTION: avl1.insert(int1) 
int1 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1049a4950> : <type 'instance'>
avl_REF1 = set([2, 6, 7, 8, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([2, 3, 6, 7, 8, 14, 15]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 67
ACTION: avl1.delete(int3) 
int3 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1049a4950> : <type 'instance'>
avl_REF1 = set([2, 3, 6, 7, 8, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([2, 3, 6, 7, 8, 15]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10498f098>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 3 DISTINCT FAILURES
TEST #4 STEP #0 (0:00:30.039486) Fri Apr 28 07:39:56 2017 [ 160 stmts 212 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104f529e0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 49 steps

SAVING TEST AS failure.918.test.3
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 9                                                                 # STEP 0
ACTION: int0 = 9 
int0 = None : <type 'NoneType'>
=> int0 = 9 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 1
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x104f527a0> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int2 = 16                                                                # STEP 2
ACTION: int2 = 16 
int2 = None : <type 'NoneType'>
=> int2 = 16 : <type 'int'>
==================================================
int3 = 2                                                                 # STEP 3
ACTION: int3 = 2 
int3 = None : <type 'NoneType'>
=> int3 = 2 : <type 'int'>
==================================================
int1 = 17                                                                # STEP 4
ACTION: int1 = 17 
int1 = None : <type 'NoneType'>
=> int1 = 17 : <type 'int'>
==================================================
avl1.insert(int0)                                                        # STEP 5
ACTION: avl1.insert(int0) 
int0 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f527a0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([9]) : <type 'set'>
==================================================
int0 = 14                                                                # STEP 6
ACTION: int0 = 14 
int0 = 9 : <type 'int'>
=> int0 = 14 : <type 'int'>
==================================================
avl1.delete(int3)                                                        # STEP 7
ACTION: avl1.delete(int3) 
int3 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f527a0> : <type 'instance'>
avl_REF1 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
result = avl1.find(int2)                                                 # STEP 8
ACTION: result = avl1.find(int2) 
int2 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f527a0> : <type 'instance'>
avl_REF1 = set([9]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int3 = 17                                                                # STEP 9
ACTION: int3 = 17 
int3 = 2 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
result = avl1.find(int0)                                                # STEP 10
ACTION: result = avl1.find(int0) 
int0 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f527a0> : <type 'instance'>
avl_REF1 = set([9]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl1.insert(int3)                                                       # STEP 11
ACTION: avl1.insert(int3) 
int3 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f527a0> : <type 'instance'>
avl_REF1 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([9, 17]) : <type 'set'>
==================================================
int2 = 15                                                               # STEP 12
ACTION: int2 = 15 
int2 = 16 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 13
ACTION: avl1.delete(int0) 
int0 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f527a0> : <type 'instance'>
avl_REF1 = set([9, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int0 = 10                                                               # STEP 14
ACTION: int0 = 10 
int0 = 14 : <type 'int'>
=> int0 = 10 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 15
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104f527a0> : <type 'instance'>
avl_REF1 = set([9, 17]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.delete(int0)                                                       # STEP 16
ACTION: avl1.delete(int0) 
int0 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f527a0> : <type 'instance'>
avl_REF1 = set([9, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int0 = 20                                                               # STEP 17
ACTION: int0 = 20 
int0 = 10 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 18
ACTION: avl1.delete(int3) 
int3 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f527a0> : <type 'instance'>
avl_REF1 = set([9, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([9]) : <type 'set'>
==================================================
int3 = 14                                                               # STEP 19
ACTION: int3 = 14 
int3 = 17 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 20
ACTION: avl1.delete(int0) 
int0 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f527a0> : <type 'instance'>
avl_REF1 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.delete(int0)                                                       # STEP 21
ACTION: avl1.delete(int0) 
int0 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f527a0> : <type 'instance'>
avl_REF1 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl2 = avl.AVLTree()                                                    # STEP 22
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x104b56170> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int0 = 2                                                                # STEP 23
ACTION: int0 = 2 
int0 = 20 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
result = avl1.find(int1)                                                # STEP 24
ACTION: result = avl1.find(int1) 
int1 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f527a0> : <type 'instance'>
avl_REF1 = set([9]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl2.delete(int1)                                                       # STEP 25
ACTION: avl2.delete(int1) 
int1 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b56170> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int1 = 14                                                               # STEP 26
ACTION: int1 = 14 
int1 = 17 : <type 'int'>
=> int1 = 14 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 27
ACTION: avl2.insert(int0) 
int0 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b56170> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([2]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 28
ACTION: avl1.insert(int2) 
int2 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f527a0> : <type 'instance'>
avl_REF1 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([9, 15]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 29
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104b56170> : <type 'instance'>
avl_REF2 = set([2]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2 = avl.AVLTree()                                                    # STEP 30
ACTION: avl2 = avl.AVLTree() 
avl2 = <avl.AVLTree instance at 0x104b56170> : <type 'instance'>
avl_REF2 = set([2]) : <type 'set'>
=> avl2 = <avl.AVLTree instance at 0x1049ad830> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl1.find(int0)                                                # STEP 31
ACTION: result = avl1.find(int0) 
int0 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f527a0> : <type 'instance'>
avl_REF1 = set([9, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl1.delete(int0)                                                       # STEP 32
ACTION: avl1.delete(int0) 
int0 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f527a0> : <type 'instance'>
avl_REF1 = set([9, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl2.delete(int3)                                                       # STEP 33
ACTION: avl2.delete(int3) 
int3 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1049ad830> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.insert(int3)                                                       # STEP 34
ACTION: avl2.insert(int3) 
int3 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1049ad830> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([14]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 35
ACTION: avl1.delete(int3) 
int3 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f527a0> : <type 'instance'>
avl_REF1 = set([9, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int2 = 10                                                               # STEP 36
ACTION: int2 = 10 
int2 = 15 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
result = avl1.find(int1)                                                # STEP 37
ACTION: result = avl1.find(int1) 
int1 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f527a0> : <type 'instance'>
avl_REF1 = set([9, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl1.delete(int2)                                                       # STEP 38
ACTION: avl1.delete(int2) 
int2 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f527a0> : <type 'instance'>
avl_REF1 = set([9, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.insert(int3)                                                       # STEP 39
ACTION: avl1.insert(int3) 
int3 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f527a0> : <type 'instance'>
avl_REF1 = set([9, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([9, 14, 15]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 40
ACTION: avl1.delete(int0) 
int0 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f527a0> : <type 'instance'>
avl_REF1 = set([9, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
result = avl2.inorder()                                                 # STEP 41
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x1049ad830> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl1.find(int1)                                                # STEP 42
ACTION: result = avl1.find(int1) 
int1 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f527a0> : <type 'instance'>
avl_REF1 = set([9, 14, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl1.insert(int0)                                                       # STEP 43
ACTION: avl1.insert(int0) 
int0 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f527a0> : <type 'instance'>
avl_REF1 = set([9, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([9, 2, 14, 15]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 44
ACTION: avl2.delete(int1) 
int1 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1049ad830> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 45
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x1049a5fc8> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 46
ACTION: avl2.delete(int1) 
int1 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1049ad830> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int3)                                                       # STEP 47
ACTION: avl2.insert(int3) 
int3 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1049ad830> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([14]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 48
ACTION: avl1.delete(int3) 
int3 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f527a0> : <type 'instance'>
avl_REF1 = set([9, 2, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([9, 2, 15]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1049ba998>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 4 DISTINCT FAILURES
  15 [3:-1]
-- < 5 [1:-1]
---- > 8 [0:0] L
-- > 18 [2:1]
---- < 17 [1:1]
------ < 16 [0:0] L
---- > 20 [0:0] L
set([5, 8, 15, 16, 17, 18, 20])
  15 [2:0]
-- < 5 [1:-1]
---- > 8 [0:0] L
-- > 18 [1:0]
---- < 17 [0:0] L
---- > 20 [0:0] L
set([5, 8, 15, 17, 18, 20])
  15 [2:0]
-- < 5 [1:0]
---- < 2 [0:0] L
---- > 8 [0:0] L
-- > 18 [1:-1]
---- > 20 [0:0] L
set([2, 5, 8, 15, 18, 20])
  15 [2:0]
-- < 5 [1:0]
---- < 2 [0:0] L
---- > 8 [0:0] L
-- > 18 [1:-1]
---- > 20 [0:0] L
set([2, 5, 8, 15, 18, 20])
  8 [2:0]
-- < 5 [1:0]
---- < 4 [0:0] L
---- > 7 [0:0] L
-- > 17 [1:-1]
---- > 20 [0:0] L
set([4, 5, 7, 8, 17, 20])
  8 [2:0]
-- < 5 [1:0]
---- < 4 [0:0] L
---- > 7 [0:0] L
-- > 17 [1:-1]
---- > 20 [0:0] L
set([4, 5, 7, 8, 17, 20])
  8 [2:0]
-- < 5 [1:0]
---- < 4 [0:0] L
---- > 7 [0:0] L
-- > 17 [1:-1]
---- > 20 [0:0] L
set([4, 5, 7, 8, 17, 20])
  8 [2:0]
-- < 5 [1:0]
---- < 4 [0:0] L
---- > 7 [0:0] L
-- > 19 [1:0]
---- < 17 [0:0] L
---- > 20 [0:0] L
set([4, 5, 7, 8, 17, 19, 20])
  8 [3:-1]
-- < 5 [1:0]
---- < 4 [0:0] L
---- > 7 [0:0] L
-- > 19 [2:1]
---- < 17 [1:-1]
------ > 18 [0:0] L
---- > 20 [0:0] L
set([4, 5, 7, 8, 17, 18, 19, 20])
  13 [2:0]
-- < 2 [1:-1]
---- > 11 [0:0] L
-- > 17 [1:0]
---- < 14 [0:0] L
---- > 19 [0:0] L
set([2, 11, 13, 14, 17, 19])
  13 [2:0]
-- < 3 [1:0]
---- < 2 [0:0] L
---- > 11 [0:0] L
-- > 17 [1:0]
---- < 14 [0:0] L
---- > 19 [0:0] L
set([2, 3, 11, 13, 14, 17, 19])
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 78
STOPPING TESTING DUE TO TIMEOUT
8.44927044452 PERCENT COVERED
60.246680975 TOTAL RUNTIME
7 EXECUTED
505 TOTAL TEST OPERATIONS
20.5940179825 TIME SPENT EXECUTING TEST OPERATIONS
0.0523777008057 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
20.6847803593 TIME SPENT CHECKING PROPERTIES
41.2787983418 TOTAL TIME SPENT RUNNING SUT
0.00384521484375 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
4 FAILED
0 REPEATS OF FAILURES
4 ACTUAL DISTINCT FAILURES

FAILURE 0
int3 = 3                                                                 # STEP 0
int0 = 15                                                                # STEP 1
int1 = 7                                                                 # STEP 2
int2 = 7                                                                 # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
avl1.insert(int1)                                                        # STEP 5
avl1.insert(int1)                                                        # STEP 6
avl1 == avl1                                                             # STEP 7
avl1.insert(int3)                                                        # STEP 8
result = avl1.find(int1)                                                 # STEP 9
result = avl1.inorder()                                                 # STEP 10
avl1.delete(int1)                                                       # STEP 11
avl1.insert(int2)                                                       # STEP 12
avl1.delete(int0)                                                       # STEP 13
int2 = 6                                                                # STEP 14
int0 = 20                                                               # STEP 15
avl1.insert(int1)                                                       # STEP 16
avl1.delete(int3)                                                       # STEP 17
avl1.delete(int3)                                                       # STEP 18
int1 = 12                                                               # STEP 19
avl1.insert(int0)                                                       # STEP 20
result = avl1.inorder()                                                 # STEP 21
avl1.insert(int1)                                                       # STEP 22
avl1.delete(int1)                                                       # STEP 23
avl1.insert(int1)                                                       # STEP 24
avl1.delete(int0)                                                       # STEP 25
int3 = 9                                                                # STEP 26
int0 = 5                                                                # STEP 27
int1 = 9                                                                # STEP 28
avl1.insert(int0)                                                       # STEP 29
avl1.delete(int0)                                                       # STEP 30
avl1.insert(int3)                                                       # STEP 31
avl1.insert(int2)                                                       # STEP 32
avl1.delete(int0)                                                       # STEP 33
result = avl1.inorder()                                                 # STEP 34
int3 = 8                                                                # STEP 35
avl1.delete(int0)                                                       # STEP 36
avl1.delete(int3)                                                       # STEP 37
avl1.delete(int3)                                                       # STEP 38
avl1.insert(int3)                                                       # STEP 39
avl1.delete(int0)                                                       # STEP 40
int3 = 20                                                               # STEP 41
avl1.delete(int3)                                                       # STEP 42
avl1.delete(int2)                                                       # STEP 43
int3 = 1                                                                # STEP 44
avl1.delete(int1)                                                       # STEP 45
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104d508c0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE 1
avl1 = avl.AVLTree()                                                     # STEP 0
int2 = 10                                                                # STEP 1
result = avl1.inorder()                                                  # STEP 2
result = avl1.inorder()                                                  # STEP 3
avl1.delete(int2)                                                        # STEP 4
avl1.delete(int2)                                                        # STEP 5
avl1.insert(int2)                                                        # STEP 6
avl1.insert(int2)                                                        # STEP 7
avl1.delete(int2)                                                        # STEP 8
result = avl1.inorder()                                                  # STEP 9
avl1.delete(int2)                                                       # STEP 10
avl1.delete(int2)                                                       # STEP 11
avl1.insert(int2)                                                       # STEP 12
avl1.delete(int2)                                                       # STEP 13
avl1.delete(int2)                                                       # STEP 14
avl1.delete(int2)                                                       # STEP 15
avl1.insert(int2)                                                       # STEP 16
avl1.delete(int2)                                                       # STEP 17
avl1.delete(int2)                                                       # STEP 18
avl1.insert(int2)                                                       # STEP 19
result = avl1.find(int2)                                                # STEP 20
result = avl1.find(int2)                                                # STEP 21
int2 = 7                                                                # STEP 22
avl1.delete(int2)                                                       # STEP 23
int2 = 14                                                               # STEP 24
avl1.insert(int2)                                                       # STEP 25
int1 = 6                                                                # STEP 26
avl1.insert(int2)                                                       # STEP 27
int0 = 7                                                                # STEP 28
avl1.insert(int0)                                                       # STEP 29
avl1.insert(int2)                                                       # STEP 30
avl1.delete(int2)                                                       # STEP 31
avl1.delete(int0)                                                       # STEP 32
avl1.delete(int0)                                                       # STEP 33
avl1.insert(int2)                                                       # STEP 34
avl1.insert(int2)                                                       # STEP 35
int3 = 5                                                                # STEP 36
int2 = 4                                                                # STEP 37
avl1.delete(int2)                                                       # STEP 38
avl1.insert(int3)                                                       # STEP 39
int3 = 20                                                               # STEP 40
avl1.delete(int3)                                                       # STEP 41
avl1.insert(int0)                                                       # STEP 42
int3 = 16                                                               # STEP 43
int0 = 14                                                               # STEP 44
avl1.delete(int1)                                                       # STEP 45
avl1.insert(int0)                                                       # STEP 46
avl1.delete(int3)                                                       # STEP 47
avl1.insert(int1)                                                       # STEP 48
int0 = 19                                                               # STEP 49
avl1.insert(int0)                                                       # STEP 50
int1 = 14                                                               # STEP 51
avl1.insert(int2)                                                       # STEP 52
int0 = 2                                                                # STEP 53
avl1.insert(int0)                                                       # STEP 54
int0 = 17                                                               # STEP 55
avl1.insert(int0)                                                       # STEP 56
avl1.insert(int0)                                                       # STEP 57
avl1.insert(int0)                                                       # STEP 58
avl1.delete(int3)                                                       # STEP 59
avl1.delete(int1)                                                       # STEP 60
int2 = 19                                                               # STEP 61
avl1.insert(int2)                                                       # STEP 62
avl1.delete(int2)                                                       # STEP 63
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1048accb0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE 2
int1 = 7                                                                 # STEP 0
int0 = 7                                                                 # STEP 1
int3 = 6                                                                 # STEP 2
avl1 = avl.AVLTree()                                                     # STEP 3
int2 = 10                                                                # STEP 4
avl1.delete(int3)                                                        # STEP 5
result = avl1.find(int1)                                                 # STEP 6
avl1.insert(int3)                                                        # STEP 7
avl0 = avl.AVLTree()                                                     # STEP 8
avl0.insert(int0)                                                        # STEP 9
avl1.insert(int3)                                                       # STEP 10
avl1.insert(int1)                                                       # STEP 11
avl0.delete(int2)                                                       # STEP 12
result = avl1.find(int2)                                                # STEP 13
int3 = 2                                                                # STEP 14
int1 = 5                                                                # STEP 15
result = avl1.inorder()                                                 # STEP 16
avl1.delete(int2)                                                       # STEP 17
avl0.delete(int3)                                                       # STEP 18
int0 = 12                                                               # STEP 19
avl1.delete(int1)                                                       # STEP 20
avl1 == avl0                                                            # STEP 21
avl0.delete(int3)                                                       # STEP 22
result = avl1.find(int0)                                                # STEP 23
result = avl0.inorder()                                                 # STEP 24
avl0.insert(int3)                                                       # STEP 25
avl0.insert(int1)                                                       # STEP 26
avl1.insert(int3)                                                       # STEP 27
int1 = 7                                                                # STEP 28
avl0.delete(int3)                                                       # STEP 29
avl1.delete(int1)                                                       # STEP 30
avl0.delete(int3)                                                       # STEP 31
avl0.delete(int0)                                                       # STEP 32
int2 = 8                                                                # STEP 33
result = avl0.find(int3)                                                # STEP 34
avl1.delete(int0)                                                       # STEP 35
int0 = 8                                                                # STEP 36
avl1.delete(int2)                                                       # STEP 37
result = avl0.find(int3)                                                # STEP 38
result = avl0.inorder()                                                 # STEP 39
int3 = 15                                                               # STEP 40
int2 = 8                                                                # STEP 41
avl0.delete(int2)                                                       # STEP 42
avl1.insert(int3)                                                       # STEP 43
int2 = 14                                                               # STEP 44
avl1.insert(int0)                                                       # STEP 45
avl1.insert(int1)                                                       # STEP 46
int1 = 3                                                                # STEP 47
avl1.insert(int2)                                                       # STEP 48
avl1.insert(int1)                                                       # STEP 49
avl1.insert(int2)                                                       # STEP 50
avl1.display()                                                          # STEP 51
avl1 == avl0                                                            # STEP 52
avl1.display()                                                          # STEP 53
avl0.delete(int0)                                                       # STEP 54
avl1.display()                                                          # STEP 55
avl0.delete(int0)                                                       # STEP 56
avl0.insert(int3)                                                       # STEP 57
result = avl1.inorder()                                                 # STEP 58
avl0.insert(int2)                                                       # STEP 59
int3 = 14                                                               # STEP 60
avl0.delete(int3)                                                       # STEP 61
avl0.insert(int0)                                                       # STEP 62
avl0.insert(int0)                                                       # STEP 63
avl0.delete(int2)                                                       # STEP 64
avl1.delete(int1)                                                       # STEP 65
avl1.insert(int1)                                                       # STEP 66
avl1.delete(int3)                                                       # STEP 67
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10498f098>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE 3
int0 = 9                                                                 # STEP 0
avl1 = avl.AVLTree()                                                     # STEP 1
int2 = 16                                                                # STEP 2
int3 = 2                                                                 # STEP 3
int1 = 17                                                                # STEP 4
avl1.insert(int0)                                                        # STEP 5
int0 = 14                                                                # STEP 6
avl1.delete(int3)                                                        # STEP 7
result = avl1.find(int2)                                                 # STEP 8
int3 = 17                                                                # STEP 9
result = avl1.find(int0)                                                # STEP 10
avl1.insert(int3)                                                       # STEP 11
int2 = 15                                                               # STEP 12
avl1.delete(int0)                                                       # STEP 13
int0 = 10                                                               # STEP 14
result = avl1.inorder()                                                 # STEP 15
avl1.delete(int0)                                                       # STEP 16
int0 = 20                                                               # STEP 17
avl1.delete(int3)                                                       # STEP 18
int3 = 14                                                               # STEP 19
avl1.delete(int0)                                                       # STEP 20
avl1.delete(int0)                                                       # STEP 21
avl2 = avl.AVLTree()                                                    # STEP 22
int0 = 2                                                                # STEP 23
result = avl1.find(int1)                                                # STEP 24
avl2.delete(int1)                                                       # STEP 25
int1 = 14                                                               # STEP 26
avl2.insert(int0)                                                       # STEP 27
avl1.insert(int2)                                                       # STEP 28
result = avl2.inorder()                                                 # STEP 29
avl2 = avl.AVLTree()                                                    # STEP 30
result = avl1.find(int0)                                                # STEP 31
avl1.delete(int0)                                                       # STEP 32
avl2.delete(int3)                                                       # STEP 33
avl2.insert(int3)                                                       # STEP 34
avl1.delete(int3)                                                       # STEP 35
int2 = 10                                                               # STEP 36
result = avl1.find(int1)                                                # STEP 37
avl1.delete(int2)                                                       # STEP 38
avl1.insert(int3)                                                       # STEP 39
avl1.delete(int0)                                                       # STEP 40
result = avl2.inorder()                                                 # STEP 41
result = avl1.find(int1)                                                # STEP 42
avl1.insert(int0)                                                       # STEP 43
avl2.delete(int1)                                                       # STEP 44
avl0 = avl.AVLTree()                                                    # STEP 45
avl2.delete(int1)                                                       # STEP 46
avl2.insert(int3)                                                       # STEP 47
avl1.delete(int3)                                                       # STEP 48
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1049ba998>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
212 BRANCHES COVERED
160 STATEMENTS COVERED

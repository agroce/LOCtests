Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.523.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
TEST #4 STEP #55 (0:00:30.066468) Fri Apr 28 06:33:44 2017 [ 136 stmts 182 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1040e2b48>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 87 steps

SAVING TEST AS failure.523.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 2                                                                 # STEP 0
ACTION: int3 = 2 
int3 = None : <type 'NoneType'>
=> int3 = 2 : <type 'int'>
==================================================
int1 = 5                                                                 # STEP 1
ACTION: int1 = 5 
int1 = None : <type 'NoneType'>
=> int1 = 5 : <type 'int'>
==================================================
int0 = 6                                                                 # STEP 2
ACTION: int0 = 6 
int0 = None : <type 'NoneType'>
=> int0 = 6 : <type 'int'>
==================================================
int2 = 15                                                                # STEP 3
ACTION: int2 = 15 
int2 = None : <type 'NoneType'>
=> int2 = 15 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x105807b90> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int3)                                                        # STEP 5
ACTION: avl2.insert(int3) 
int3 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105807b90> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([2]) : <type 'set'>
==================================================
int3 = 14                                                                # STEP 6
ACTION: int3 = 14 
int3 = 2 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
result = avl2.find(int0)                                                 # STEP 7
ACTION: result = avl2.find(int0) 
int0 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105807b90> : <type 'instance'>
avl_REF2 = set([2]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
result = avl2.find(int0)                                                 # STEP 8
ACTION: result = avl2.find(int0) 
int0 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105807b90> : <type 'instance'>
avl_REF2 = set([2]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
result = avl2.inorder()                                                  # STEP 9
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x105807b90> : <type 'instance'>
avl_REF2 = set([2]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int0 = 7                                                                # STEP 10
ACTION: int0 = 7 
int0 = 6 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
result = avl2.find(int2)                                                # STEP 11
ACTION: result = avl2.find(int2) 
int2 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105807b90> : <type 'instance'>
avl_REF2 = set([2]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl2.insert(int1)                                                       # STEP 12
ACTION: avl2.insert(int1) 
int1 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105807b90> : <type 'instance'>
avl_REF2 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([2, 5]) : <type 'set'>
==================================================
int2 = 9                                                                # STEP 13
ACTION: int2 = 9 
int2 = 15 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
int1 = 1                                                                # STEP 14
ACTION: int1 = 1 
int1 = 5 : <type 'int'>
=> int1 = 1 : <type 'int'>
==================================================
result = avl2.find(int0)                                                # STEP 15
ACTION: result = avl2.find(int0) 
int0 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105807b90> : <type 'instance'>
avl_REF2 = set([2, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl0 = avl.AVLTree()                                                    # STEP 16
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x10594e6c8> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int0 = 16                                                               # STEP 17
ACTION: int0 = 16 
int0 = 7 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
result = avl0.find(int0)                                                # STEP 18
ACTION: result = avl0.find(int0) 
int0 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10594e6c8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
int0 = 19                                                               # STEP 19
ACTION: int0 = 19 
int0 = 16 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 20
ACTION: avl2.insert(int2) 
int2 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105807b90> : <type 'instance'>
avl_REF2 = set([2, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([9, 2, 5]) : <type 'set'>
==================================================
int2 = 9                                                                # STEP 21
ACTION: int2 = 9 
int2 = 9 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 22
ACTION: avl0.delete(int3) 
int3 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10594e6c8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int3 = 17                                                               # STEP 23
ACTION: int3 = 17 
int3 = 14 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
avl2 == avl0                                                            # STEP 24
ACTION: avl2 == avl0 
avl2 = <avl.AVLTree instance at 0x105807b90> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x10594e6c8> : <type 'instance'>
avl_REF2 = set([9, 2, 5]) : <type 'set'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF0 
==================================================
avl2.delete(int3)                                                       # STEP 25
ACTION: avl2.delete(int3) 
int3 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105807b90> : <type 'instance'>
avl_REF2 = set([9, 2, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int3 = 16                                                               # STEP 26
ACTION: int3 = 16 
int3 = 17 : <type 'int'>
=> int3 = 16 : <type 'int'>
==================================================
result = avl2.find(int3)                                                # STEP 27
ACTION: result = avl2.find(int3) 
int3 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105807b90> : <type 'instance'>
avl_REF2 = set([9, 2, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl2.insert(int0)                                                       # STEP 28
ACTION: avl2.insert(int0) 
int0 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105807b90> : <type 'instance'>
avl_REF2 = set([9, 2, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([9, 2, 19, 5]) : <type 'set'>
==================================================
int3 = 4                                                                # STEP 29
ACTION: int3 = 4 
int3 = 16 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 30
ACTION: avl0.delete(int2) 
int2 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10594e6c8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.delete(int3)                                                       # STEP 31
ACTION: avl0.delete(int3) 
int3 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10594e6c8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int3 = 18                                                               # STEP 32
ACTION: int3 = 18 
int3 = 4 : <type 'int'>
=> int3 = 18 : <type 'int'>
==================================================
int2 = 3                                                                # STEP 33
ACTION: int2 = 3 
int2 = 9 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
int0 = 20                                                               # STEP 34
ACTION: int0 = 20 
int0 = 19 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 35
ACTION: avl2.delete(int0) 
int0 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105807b90> : <type 'instance'>
avl_REF2 = set([9, 2, 19, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.delete(int1)                                                       # STEP 36
ACTION: avl2.delete(int1) 
int1 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105807b90> : <type 'instance'>
avl_REF2 = set([9, 2, 19, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl0.delete(int1)                                                       # STEP 37
ACTION: avl0.delete(int1) 
int1 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10594e6c8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.insert(int0)                                                       # STEP 38
ACTION: avl0.insert(int0) 
int0 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10594e6c8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([20]) : <type 'set'>
==================================================
avl0 == avl0                                                            # STEP 39
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x10594e6c8> : <type 'instance'>
avl_REF0 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl2 = avl.AVLTree()                                                    # STEP 40
ACTION: avl2 = avl.AVLTree() 
avl2 = <avl.AVLTree instance at 0x105807b90> : <type 'instance'>
avl_REF2 = set([9, 2, 19, 5]) : <type 'set'>
=> avl2 = <avl.AVLTree instance at 0x105969758> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int1 = 8                                                                # STEP 41
ACTION: int1 = 8 
int1 = 1 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 42
ACTION: avl0.delete(int3) 
int3 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10594e6c8> : <type 'instance'>
avl_REF0 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int0 = 19                                                               # STEP 43
ACTION: int0 = 19 
int0 = 20 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
result = avl0.find(int0)                                                # STEP 44
ACTION: result = avl0.find(int0) 
int0 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10594e6c8> : <type 'instance'>
avl_REF0 = set([20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
int3 = 12                                                               # STEP 45
ACTION: int3 = 12 
int3 = 18 : <type 'int'>
=> int3 = 12 : <type 'int'>
==================================================
int0 = 14                                                               # STEP 46
ACTION: int0 = 14 
int0 = 19 : <type 'int'>
=> int0 = 14 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 47
ACTION: avl0.delete(int0) 
int0 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10594e6c8> : <type 'instance'>
avl_REF0 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0 == avl2                                                            # STEP 48
ACTION: avl0 == avl2 
avl0 = <avl.AVLTree instance at 0x10594e6c8> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x105969758> : <type 'instance'>
avl_REF0 = set([20]) : <type 'set'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
avl0.insert(int1)                                                       # STEP 49
ACTION: avl0.insert(int1) 
int1 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10594e6c8> : <type 'instance'>
avl_REF0 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([8, 20]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 50
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x10594e6c8> : <type 'instance'>
avl_REF0 = set([8, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl2.insert(int0)                                                       # STEP 51
ACTION: avl2.insert(int0) 
int0 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105969758> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([14]) : <type 'set'>
==================================================
avl2 == avl2                                                            # STEP 52
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x105969758> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
int1 = 11                                                               # STEP 53
ACTION: int1 = 11 
int1 = 8 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
int0 = 6                                                                # STEP 54
ACTION: int0 = 6 
int0 = 14 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 55
ACTION: avl2.delete(int0) 
int0 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105969758> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.delete(int3)                                                       # STEP 56
ACTION: avl2.delete(int3) 
int3 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105969758> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int0 = 12                                                               # STEP 57
ACTION: int0 = 12 
int0 = 6 : <type 'int'>
=> int0 = 12 : <type 'int'>
==================================================
int3 = 7                                                                # STEP 58
ACTION: int3 = 7 
int3 = 12 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 59
ACTION: avl2.insert(int2) 
int2 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105969758> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([3, 14]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 60
ACTION: avl0.insert(int2) 
int2 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10594e6c8> : <type 'instance'>
avl_REF0 = set([8, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([8, 3, 20]) : <type 'set'>
==================================================
result = avl0.find(int3)                                                # STEP 61
ACTION: result = avl0.find(int3) 
int3 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10594e6c8> : <type 'instance'>
avl_REF0 = set([8, 3, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
int2 = 13                                                               # STEP 62
ACTION: int2 = 13 
int2 = 3 : <type 'int'>
=> int2 = 13 : <type 'int'>
==================================================
int3 = 18                                                               # STEP 63
ACTION: int3 = 18 
int3 = 7 : <type 'int'>
=> int3 = 18 : <type 'int'>
==================================================
avl2 == avl0                                                            # STEP 64
ACTION: avl2 == avl0 
avl2 = <avl.AVLTree instance at 0x105969758> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x10594e6c8> : <type 'instance'>
avl_REF2 = set([3, 14]) : <type 'set'>
avl_REF0 = set([8, 3, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF0 
==================================================
avl2.insert(int1)                                                       # STEP 65
ACTION: avl2.insert(int1) 
int1 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105969758> : <type 'instance'>
avl_REF2 = set([3, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([11, 3, 14]) : <type 'set'>
==================================================
int1 = 2                                                                # STEP 66
ACTION: int1 = 2 
int1 = 11 : <type 'int'>
=> int1 = 2 : <type 'int'>
==================================================
result = avl0.find(int3)                                                # STEP 67
ACTION: result = avl0.find(int3) 
int3 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10594e6c8> : <type 'instance'>
avl_REF0 = set([8, 3, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
avl2.delete(int3)                                                       # STEP 68
ACTION: avl2.delete(int3) 
int3 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105969758> : <type 'instance'>
avl_REF2 = set([11, 3, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int3 = 12                                                               # STEP 69
ACTION: int3 = 12 
int3 = 18 : <type 'int'>
=> int3 = 12 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 70
ACTION: avl2.delete(int1) 
int1 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105969758> : <type 'instance'>
avl_REF2 = set([11, 3, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int1 = 2                                                                # STEP 71
ACTION: int1 = 2 
int1 = 2 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 72
ACTION: avl0.delete(int2) 
int2 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10594e6c8> : <type 'instance'>
avl_REF0 = set([8, 3, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int2 = 9                                                                # STEP 73
ACTION: int2 = 9 
int2 = 13 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 74
ACTION: avl0.insert(int1) 
int1 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10594e6c8> : <type 'instance'>
avl_REF0 = set([8, 3, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([8, 2, 3, 20]) : <type 'set'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 75
ACTION: avl0 = avl.AVLTree() 
avl0 = <avl.AVLTree instance at 0x10594e6c8> : <type 'instance'>
avl_REF0 = set([8, 2, 3, 20]) : <type 'set'>
=> avl0 = <avl.AVLTree instance at 0x104670518> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int1 = 3                                                                # STEP 76
ACTION: int1 = 3 
int1 = 2 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 77
ACTION: avl0.insert(int3) 
int3 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104670518> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([12]) : <type 'set'>
==================================================
int3 = 8                                                                # STEP 78
ACTION: int3 = 8 
int3 = 12 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
avl0 == avl2                                                            # STEP 79
ACTION: avl0 == avl2 
avl0 = <avl.AVLTree instance at 0x104670518> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x105969758> : <type 'instance'>
avl_REF0 = set([12]) : <type 'set'>
avl_REF2 = set([11, 3, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
result = avl0.find(int3)                                                # STEP 80
ACTION: result = avl0.find(int3) 
int3 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104670518> : <type 'instance'>
avl_REF0 = set([12]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
int3 = 14                                                               # STEP 81
ACTION: int3 = 14 
int3 = 8 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 82
ACTION: avl0.insert(int2) 
int2 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104670518> : <type 'instance'>
avl_REF0 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([9, 12]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 83
ACTION: avl2.insert(int0) 
int0 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105969758> : <type 'instance'>
avl_REF2 = set([11, 3, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([11, 3, 12, 14]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 84
ACTION: avl0.delete(int2) 
int2 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104670518> : <type 'instance'>
avl_REF0 = set([9, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([12]) : <type 'set'>
==================================================
int2 = 3                                                                # STEP 85
ACTION: int2 = 3 
int2 = 9 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 86
ACTION: avl2.delete(int1) 
int1 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105969758> : <type 'instance'>
avl_REF2 = set([11, 3, 12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([11, 12, 14]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104660098>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 48
STOPPING TESTING DUE TO TIMEOUT
7.32948761452 PERCENT COVERED
60.1985239983 TOTAL RUNTIME
7 EXECUTED
635 TOTAL TEST OPERATIONS
26.3258345127 TIME SPENT EXECUTING TEST OPERATIONS
0.0211443901062 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
26.4901652336 TIME SPENT CHECKING PROPERTIES
52.8159997463 TOTAL TIME SPENT RUNNING SUT
0.00450992584229 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int3 = 2                                                                 # STEP 0
int1 = 5                                                                 # STEP 1
int0 = 6                                                                 # STEP 2
int2 = 15                                                                # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
avl2.insert(int3)                                                        # STEP 5
int3 = 14                                                                # STEP 6
result = avl2.find(int0)                                                 # STEP 7
result = avl2.find(int0)                                                 # STEP 8
result = avl2.inorder()                                                  # STEP 9
int0 = 7                                                                # STEP 10
result = avl2.find(int2)                                                # STEP 11
avl2.insert(int1)                                                       # STEP 12
int2 = 9                                                                # STEP 13
int1 = 1                                                                # STEP 14
result = avl2.find(int0)                                                # STEP 15
avl0 = avl.AVLTree()                                                    # STEP 16
int0 = 16                                                               # STEP 17
result = avl0.find(int0)                                                # STEP 18
int0 = 19                                                               # STEP 19
avl2.insert(int2)                                                       # STEP 20
int2 = 9                                                                # STEP 21
avl0.delete(int3)                                                       # STEP 22
int3 = 17                                                               # STEP 23
avl2 == avl0                                                            # STEP 24
avl2.delete(int3)                                                       # STEP 25
int3 = 16                                                               # STEP 26
result = avl2.find(int3)                                                # STEP 27
avl2.insert(int0)                                                       # STEP 28
int3 = 4                                                                # STEP 29
avl0.delete(int2)                                                       # STEP 30
avl0.delete(int3)                                                       # STEP 31
int3 = 18                                                               # STEP 32
int2 = 3                                                                # STEP 33
int0 = 20                                                               # STEP 34
avl2.delete(int0)                                                       # STEP 35
avl2.delete(int1)                                                       # STEP 36
avl0.delete(int1)                                                       # STEP 37
avl0.insert(int0)                                                       # STEP 38
avl0 == avl0                                                            # STEP 39
avl2 = avl.AVLTree()                                                    # STEP 40
int1 = 8                                                                # STEP 41
avl0.delete(int3)                                                       # STEP 42
int0 = 19                                                               # STEP 43
result = avl0.find(int0)                                                # STEP 44
int3 = 12                                                               # STEP 45
int0 = 14                                                               # STEP 46
avl0.delete(int0)                                                       # STEP 47
avl0 == avl2                                                            # STEP 48
avl0.insert(int1)                                                       # STEP 49
result = avl0.inorder()                                                 # STEP 50
avl2.insert(int0)                                                       # STEP 51
avl2 == avl2                                                            # STEP 52
int1 = 11                                                               # STEP 53
int0 = 6                                                                # STEP 54
avl2.delete(int0)                                                       # STEP 55
avl2.delete(int3)                                                       # STEP 56
int0 = 12                                                               # STEP 57
int3 = 7                                                                # STEP 58
avl2.insert(int2)                                                       # STEP 59
avl0.insert(int2)                                                       # STEP 60
result = avl0.find(int3)                                                # STEP 61
int2 = 13                                                               # STEP 62
int3 = 18                                                               # STEP 63
avl2 == avl0                                                            # STEP 64
avl2.insert(int1)                                                       # STEP 65
int1 = 2                                                                # STEP 66
result = avl0.find(int3)                                                # STEP 67
avl2.delete(int3)                                                       # STEP 68
int3 = 12                                                               # STEP 69
avl2.delete(int1)                                                       # STEP 70
int1 = 2                                                                # STEP 71
avl0.delete(int2)                                                       # STEP 72
int2 = 9                                                                # STEP 73
avl0.insert(int1)                                                       # STEP 74
avl0 = avl.AVLTree()                                                    # STEP 75
int1 = 3                                                                # STEP 76
avl0.insert(int3)                                                       # STEP 77
int3 = 8                                                                # STEP 78
avl0 == avl2                                                            # STEP 79
result = avl0.find(int3)                                                # STEP 80
int3 = 14                                                               # STEP 81
avl0.insert(int2)                                                       # STEP 82
avl2.insert(int0)                                                       # STEP 83
avl0.delete(int2)                                                       # STEP 84
int2 = 3                                                                # STEP 85
avl2.delete(int1)                                                       # STEP 86
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104660098>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
185 BRANCHES COVERED
137 STATEMENTS COVERED

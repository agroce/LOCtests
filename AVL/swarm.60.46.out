Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=True, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.111.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
TEST #4 STEP #68 (0:00:30.066244) Fri Apr 28 05:33:41 2017 [ 133 stmts 178 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104c0bf38>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 73 steps

SAVING TEST AS failure.111.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 5                                                                 # STEP 0
ACTION: int3 = 5 
int3 = None : <type 'NoneType'>
=> int3 = 5 : <type 'int'>
==================================================
int1 = 14                                                                # STEP 1
ACTION: int1 = 14 
int1 = None : <type 'NoneType'>
=> int1 = 14 : <type 'int'>
==================================================
int2 = 13                                                                # STEP 2
ACTION: int2 = 13 
int2 = None : <type 'NoneType'>
=> int2 = 13 : <type 'int'>
==================================================
int0 = 10                                                                # STEP 3
ACTION: int0 = 10 
int0 = None : <type 'NoneType'>
=> int0 = 10 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 4
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x105911440> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 5
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x105823680> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.insert(int0)                                                        # STEP 6
ACTION: avl1.insert(int0) 
int0 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105823680> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([10]) : <type 'set'>
==================================================
avl1.delete(int0)                                                        # STEP 7
ACTION: avl1.delete(int0) 
int0 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105823680> : <type 'instance'>
avl_REF1 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl0.insert(int2)                                                        # STEP 8
ACTION: avl0.insert(int2) 
int2 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105911440> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([13]) : <type 'set'>
==================================================
int2 = 12                                                                # STEP 9
ACTION: int2 = 12 
int2 = 13 : <type 'int'>
=> int2 = 12 : <type 'int'>
==================================================
int0 = 2                                                                # STEP 10
ACTION: int0 = 2 
int0 = 10 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 11
ACTION: avl1.insert(int2) 
int2 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105823680> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([12]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 12
ACTION: avl1.delete(int1) 
int1 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105823680> : <type 'instance'>
avl_REF1 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl0.insert(int0)                                                       # STEP 13
ACTION: avl0.insert(int0) 
int0 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105911440> : <type 'instance'>
avl_REF0 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([2, 13]) : <type 'set'>
==================================================
int1 = 4                                                                # STEP 14
ACTION: int1 = 4 
int1 = 14 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 15
ACTION: avl0.delete(int2) 
int2 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105911440> : <type 'instance'>
avl_REF0 = set([2, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int2 = 9                                                                # STEP 16
ACTION: int2 = 9 
int2 = 12 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 17
ACTION: avl1.insert(int2) 
int2 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105823680> : <type 'instance'>
avl_REF1 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([9, 12]) : <type 'set'>
==================================================
int0 = 2                                                                # STEP 18
ACTION: int0 = 2 
int0 = 2 : <type 'int'>
==================================================
int2 = 14                                                               # STEP 19
ACTION: int2 = 14 
int2 = 9 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 20
ACTION: avl0.insert(int0) 
int0 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105911440> : <type 'instance'>
avl_REF0 = set([2, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
int0 = 20                                                               # STEP 21
ACTION: int0 = 20 
int0 = 2 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 22
ACTION: avl0.insert(int2) 
int2 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105911440> : <type 'instance'>
avl_REF0 = set([2, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([2, 13, 14]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 23
ACTION: avl0.delete(int1) 
int1 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105911440> : <type 'instance'>
avl_REF0 = set([2, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl1 == avl1                                                            # STEP 24
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x105823680> : <type 'instance'>
avl_REF1 = set([9, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
int1 = 16                                                               # STEP 25
ACTION: int1 = 16 
int1 = 4 : <type 'int'>
=> int1 = 16 : <type 'int'>
==================================================
int2 = 8                                                                # STEP 26
ACTION: int2 = 8 
int2 = 14 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 27
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x105823680> : <type 'instance'>
avl_REF1 = set([9, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.delete(int1)                                                       # STEP 28
ACTION: avl1.delete(int1) 
int1 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105823680> : <type 'instance'>
avl_REF1 = set([9, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int1 = 20                                                               # STEP 29
ACTION: int1 = 20 
int1 = 16 : <type 'int'>
=> int1 = 20 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 30
ACTION: avl1.delete(int0) 
int0 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105823680> : <type 'instance'>
avl_REF1 = set([9, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int0 = 4                                                                # STEP 31
ACTION: int0 = 4 
int0 = 20 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 32
ACTION: avl1.delete(int1) 
int1 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105823680> : <type 'instance'>
avl_REF1 = set([9, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int1 = 8                                                                # STEP 33
ACTION: int1 = 8 
int1 = 20 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 34
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x104b505a8> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl0 == avl2                                                            # STEP 35
ACTION: avl0 == avl2 
avl0 = <avl.AVLTree instance at 0x105911440> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x104b505a8> : <type 'instance'>
avl_REF0 = set([2, 13, 14]) : <type 'set'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
avl0.delete(int0)                                                       # STEP 36
ACTION: avl0.delete(int0) 
int0 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105911440> : <type 'instance'>
avl_REF0 = set([2, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl2 == avl0                                                            # STEP 37
ACTION: avl2 == avl0 
avl2 = <avl.AVLTree instance at 0x104b505a8> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x105911440> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
avl_REF0 = set([2, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF0 
==================================================
avl2.insert(int2)                                                       # STEP 38
ACTION: avl2.insert(int2) 
int2 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b505a8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([8]) : <type 'set'>
==================================================
int2 = 6                                                                # STEP 39
ACTION: int2 = 6 
int2 = 8 : <type 'int'>
=> int2 = 6 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 40
ACTION: avl1.delete(int1) 
int1 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105823680> : <type 'instance'>
avl_REF1 = set([9, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1 == avl2                                                            # STEP 41
ACTION: avl1 == avl2 
avl1 = <avl.AVLTree instance at 0x105823680> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x104b505a8> : <type 'instance'>
avl_REF1 = set([9, 12]) : <type 'set'>
avl_REF2 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
avl2.insert(int0)                                                       # STEP 42
ACTION: avl2.insert(int0) 
int0 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b505a8> : <type 'instance'>
avl_REF2 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([8, 4]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 43
ACTION: avl2.insert(int3) 
int3 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b505a8> : <type 'instance'>
avl_REF2 = set([8, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([8, 4, 5]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 44
ACTION: avl1.insert(int2) 
int2 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105823680> : <type 'instance'>
avl_REF1 = set([9, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([9, 12, 6]) : <type 'set'>
==================================================
int2 = 2                                                                # STEP 45
ACTION: int2 = 2 
int2 = 6 : <type 'int'>
=> int2 = 2 : <type 'int'>
==================================================
int3 = 13                                                               # STEP 46
ACTION: int3 = 13 
int3 = 5 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
int0 = 4                                                                # STEP 47
ACTION: int0 = 4 
int0 = 4 : <type 'int'>
==================================================
int1 = 16                                                               # STEP 48
ACTION: int1 = 16 
int1 = 8 : <type 'int'>
=> int1 = 16 : <type 'int'>
==================================================
avl2 == avl2                                                            # STEP 49
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x104b505a8> : <type 'instance'>
avl_REF2 = set([8, 4, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl0.delete(int1)                                                       # STEP 50
ACTION: avl0.delete(int1) 
int1 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105911440> : <type 'instance'>
avl_REF0 = set([2, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl2.insert(int3)                                                       # STEP 51
ACTION: avl2.insert(int3) 
int3 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b505a8> : <type 'instance'>
avl_REF2 = set([8, 4, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([8, 4, 5, 13]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 52
ACTION: avl1.delete(int1) 
int1 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105823680> : <type 'instance'>
avl_REF1 = set([9, 12, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.delete(int2)                                                       # STEP 53
ACTION: avl1.delete(int2) 
int2 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105823680> : <type 'instance'>
avl_REF1 = set([9, 12, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int1 = 11                                                               # STEP 54
ACTION: int1 = 11 
int1 = 16 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
int3 = 6                                                                # STEP 55
ACTION: int3 = 6 
int3 = 13 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
int2 = 9                                                                # STEP 56
ACTION: int2 = 9 
int2 = 2 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 57
ACTION: avl0.delete(int1) 
int1 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105911440> : <type 'instance'>
avl_REF0 = set([2, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.insert(int0)                                                       # STEP 58
ACTION: avl0.insert(int0) 
int0 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105911440> : <type 'instance'>
avl_REF0 = set([2, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([2, 4, 13, 14]) : <type 'set'>
==================================================
int1 = 5                                                                # STEP 59
ACTION: int1 = 5 
int1 = 11 : <type 'int'>
=> int1 = 5 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 60
ACTION: avl2.delete(int3) 
int3 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b505a8> : <type 'instance'>
avl_REF2 = set([8, 4, 5, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int0 = 3                                                                # STEP 61
ACTION: int0 = 3 
int0 = 4 : <type 'int'>
=> int0 = 3 : <type 'int'>
==================================================
int3 = 1                                                                # STEP 62
ACTION: int3 = 1 
int3 = 6 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 63
ACTION: avl2.delete(int3) 
int3 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b505a8> : <type 'instance'>
avl_REF2 = set([8, 4, 5, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int3 = 18                                                               # STEP 64
ACTION: int3 = 18 
int3 = 1 : <type 'int'>
=> int3 = 18 : <type 'int'>
==================================================
avl2 == avl0                                                            # STEP 65
ACTION: avl2 == avl0 
avl2 = <avl.AVLTree instance at 0x104b505a8> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x105911440> : <type 'instance'>
avl_REF2 = set([8, 4, 5, 13]) : <type 'set'>
avl_REF0 = set([2, 4, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF0 
==================================================
avl1 == avl0                                                            # STEP 66
ACTION: avl1 == avl0 
avl1 = <avl.AVLTree instance at 0x105823680> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x105911440> : <type 'instance'>
avl_REF1 = set([9, 12, 6]) : <type 'set'>
avl_REF0 = set([2, 4, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
avl1 == avl2                                                            # STEP 67
ACTION: avl1 == avl2 
avl1 = <avl.AVLTree instance at 0x105823680> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x104b505a8> : <type 'instance'>
avl_REF1 = set([9, 12, 6]) : <type 'set'>
avl_REF2 = set([8, 4, 5, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
avl1.insert(int0)                                                       # STEP 68
ACTION: avl1.insert(int0) 
int0 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105823680> : <type 'instance'>
avl_REF1 = set([9, 12, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([9, 3, 12, 6]) : <type 'set'>
==================================================
avl1 == avl0                                                            # STEP 69
ACTION: avl1 == avl0 
avl1 = <avl.AVLTree instance at 0x105823680> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x105911440> : <type 'instance'>
avl_REF1 = set([9, 3, 12, 6]) : <type 'set'>
avl_REF0 = set([2, 4, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
avl0 == avl2                                                            # STEP 70
ACTION: avl0 == avl2 
avl0 = <avl.AVLTree instance at 0x105911440> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x104b505a8> : <type 'instance'>
avl_REF0 = set([2, 4, 13, 14]) : <type 'set'>
avl_REF2 = set([8, 4, 5, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
int0 = 12                                                               # STEP 71
ACTION: int0 = 12 
int0 = 3 : <type 'int'>
=> int0 = 12 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 72
ACTION: avl1.delete(int0) 
int0 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105823680> : <type 'instance'>
avl_REF1 = set([9, 3, 12, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([9, 3, 6]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104b53e18>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 4
STOPPING TESTING DUE TO TIMEOUT
7.9742110621 PERCENT COVERED
60.1918179989 TOTAL RUNTIME
8 EXECUTED
677 TOTAL TEST OPERATIONS
27.1573004723 TIME SPENT EXECUTING TEST OPERATIONS
0.0241453647614 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
27.295822382 TIME SPENT CHECKING PROPERTIES
54.4531228542 TOTAL TIME SPENT RUNNING SUT
0.004469871521 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int3 = 5                                                                 # STEP 0
int1 = 14                                                                # STEP 1
int2 = 13                                                                # STEP 2
int0 = 10                                                                # STEP 3
avl0 = avl.AVLTree()                                                     # STEP 4
avl1 = avl.AVLTree()                                                     # STEP 5
avl1.insert(int0)                                                        # STEP 6
avl1.delete(int0)                                                        # STEP 7
avl0.insert(int2)                                                        # STEP 8
int2 = 12                                                                # STEP 9
int0 = 2                                                                # STEP 10
avl1.insert(int2)                                                       # STEP 11
avl1.delete(int1)                                                       # STEP 12
avl0.insert(int0)                                                       # STEP 13
int1 = 4                                                                # STEP 14
avl0.delete(int2)                                                       # STEP 15
int2 = 9                                                                # STEP 16
avl1.insert(int2)                                                       # STEP 17
int0 = 2                                                                # STEP 18
int2 = 14                                                               # STEP 19
avl0.insert(int0)                                                       # STEP 20
int0 = 20                                                               # STEP 21
avl0.insert(int2)                                                       # STEP 22
avl0.delete(int1)                                                       # STEP 23
avl1 == avl1                                                            # STEP 24
int1 = 16                                                               # STEP 25
int2 = 8                                                                # STEP 26
avl1 == avl1                                                            # STEP 27
avl1.delete(int1)                                                       # STEP 28
int1 = 20                                                               # STEP 29
avl1.delete(int0)                                                       # STEP 30
int0 = 4                                                                # STEP 31
avl1.delete(int1)                                                       # STEP 32
int1 = 8                                                                # STEP 33
avl2 = avl.AVLTree()                                                    # STEP 34
avl0 == avl2                                                            # STEP 35
avl0.delete(int0)                                                       # STEP 36
avl2 == avl0                                                            # STEP 37
avl2.insert(int2)                                                       # STEP 38
int2 = 6                                                                # STEP 39
avl1.delete(int1)                                                       # STEP 40
avl1 == avl2                                                            # STEP 41
avl2.insert(int0)                                                       # STEP 42
avl2.insert(int3)                                                       # STEP 43
avl1.insert(int2)                                                       # STEP 44
int2 = 2                                                                # STEP 45
int3 = 13                                                               # STEP 46
int0 = 4                                                                # STEP 47
int1 = 16                                                               # STEP 48
avl2 == avl2                                                            # STEP 49
avl0.delete(int1)                                                       # STEP 50
avl2.insert(int3)                                                       # STEP 51
avl1.delete(int1)                                                       # STEP 52
avl1.delete(int2)                                                       # STEP 53
int1 = 11                                                               # STEP 54
int3 = 6                                                                # STEP 55
int2 = 9                                                                # STEP 56
avl0.delete(int1)                                                       # STEP 57
avl0.insert(int0)                                                       # STEP 58
int1 = 5                                                                # STEP 59
avl2.delete(int3)                                                       # STEP 60
int0 = 3                                                                # STEP 61
int3 = 1                                                                # STEP 62
avl2.delete(int3)                                                       # STEP 63
int3 = 18                                                               # STEP 64
avl2 == avl0                                                            # STEP 65
avl1 == avl0                                                            # STEP 66
avl1 == avl2                                                            # STEP 67
avl1.insert(int0)                                                       # STEP 68
avl1 == avl0                                                            # STEP 69
avl0 == avl2                                                            # STEP 70
int0 = 12                                                               # STEP 71
avl1.delete(int0)                                                       # STEP 72
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104b53e18>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
200 BRANCHES COVERED
150 STATEMENTS COVERED

Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.882.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10502a368>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 40 steps

SAVING TEST AS failure.882.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
avl1 = avl.AVLTree()                                                     # STEP 0
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x103981320> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1 == avl1                                                             # STEP 1
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x103981320> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
int1 = 17                                                                # STEP 2
ACTION: int1 = 17 
int1 = None : <type 'NoneType'>
=> int1 = 17 : <type 'int'>
==================================================
int2 = 8                                                                 # STEP 3
ACTION: int2 = 8 
int2 = None : <type 'NoneType'>
=> int2 = 8 : <type 'int'>
==================================================
avl1.insert(int2)                                                        # STEP 4
ACTION: avl1.insert(int2) 
int2 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103981320> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([8]) : <type 'set'>
==================================================
avl1.insert(int2)                                                        # STEP 5
ACTION: avl1.insert(int2) 
int2 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103981320> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
avl1.delete(int1)                                                        # STEP 6
ACTION: avl1.delete(int1) 
int1 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103981320> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int3 = 2                                                                 # STEP 7
ACTION: int3 = 2 
int3 = None : <type 'NoneType'>
=> int3 = 2 : <type 'int'>
==================================================
avl1.delete(int1)                                                        # STEP 8
ACTION: avl1.delete(int1) 
int1 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103981320> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.delete(int3)                                                        # STEP 9
ACTION: avl1.delete(int3) 
int3 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103981320> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.insert(int2)                                                       # STEP 10
ACTION: avl1.insert(int2) 
int2 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103981320> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
avl1 == avl1                                                            # STEP 11
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x103981320> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
int3 = 20                                                               # STEP 12
ACTION: int3 = 20 
int3 = 2 : <type 'int'>
=> int3 = 20 : <type 'int'>
==================================================
int2 = 10                                                               # STEP 13
ACTION: int2 = 10 
int2 = 8 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
int1 = 3                                                                # STEP 14
ACTION: int1 = 3 
int1 = 17 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 15
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x103981320> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
result = avl1.inorder()                                                 # STEP 16
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x103981320> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int0 = 19                                                               # STEP 17
ACTION: int0 = 19 
int0 = None : <type 'NoneType'>
=> int0 = 19 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 18
ACTION: avl1.delete(int1) 
int1 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103981320> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.delete(int2)                                                       # STEP 19
ACTION: avl1.delete(int2) 
int2 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103981320> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
result = avl1.inorder()                                                 # STEP 20
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x103981320> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int3)                                                       # STEP 21
ACTION: avl1.insert(int3) 
int3 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103981320> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([8, 20]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 22
ACTION: avl1.delete(int1) 
int1 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103981320> : <type 'instance'>
avl_REF1 = set([8, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int3 = 20                                                               # STEP 23
ACTION: int3 = 20 
int3 = 20 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 24
ACTION: avl1.delete(int1) 
int1 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103981320> : <type 'instance'>
avl_REF1 = set([8, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.delete(int0)                                                       # STEP 25
ACTION: avl1.delete(int0) 
int0 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103981320> : <type 'instance'>
avl_REF1 = set([8, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.insert(int0)                                                       # STEP 26
ACTION: avl1.insert(int0) 
int0 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103981320> : <type 'instance'>
avl_REF1 = set([8, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([8, 19, 20]) : <type 'set'>
==================================================
int2 = 4                                                                # STEP 27
ACTION: int2 = 4 
int2 = 10 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 28
ACTION: avl1.insert(int1) 
int1 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103981320> : <type 'instance'>
avl_REF1 = set([8, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([8, 3, 19, 20]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 29
ACTION: avl1.insert(int0) 
int0 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103981320> : <type 'instance'>
avl_REF1 = set([8, 3, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.delete(int2)                                                       # STEP 30
ACTION: avl1.delete(int2) 
int2 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103981320> : <type 'instance'>
avl_REF1 = set([8, 3, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl0 = avl.AVLTree()                                                    # STEP 31
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x103f8a3b0> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 32
ACTION: avl1.insert(int0) 
int0 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103981320> : <type 'instance'>
avl_REF1 = set([8, 3, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl0.insert(int0)                                                       # STEP 33
ACTION: avl0.insert(int0) 
int0 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103f8a3b0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([19]) : <type 'set'>
==================================================
int1 = 4                                                                # STEP 34
ACTION: int1 = 4 
int1 = 3 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 35
ACTION: avl1.insert(int0) 
int0 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103981320> : <type 'instance'>
avl_REF1 = set([8, 3, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.insert(int0)                                                       # STEP 36
ACTION: avl1.insert(int0) 
int0 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103981320> : <type 'instance'>
avl_REF1 = set([8, 3, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl0.insert(int3)                                                       # STEP 37
ACTION: avl0.insert(int3) 
int3 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103f8a3b0> : <type 'instance'>
avl_REF0 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([19, 20]) : <type 'set'>
==================================================
int3 = 6                                                                # STEP 38
ACTION: int3 = 6 
int3 = 20 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 39
ACTION: avl1.delete(int0) 
int0 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103981320> : <type 'instance'>
avl_REF1 = set([8, 3, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([8, 3, 20]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103d4ccf8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
  7 [2:0]
-- < 2 [1:-1]
---- > 5 [0:0] L
-- > 12 [1:0]
---- < 8 [0:0] L
---- > 15 [0:0] L
set([2, 5, 7, 8, 12, 15])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103d36f80>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
Original test has 82 steps

SAVING TEST AS failure.882.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 18                                                                # STEP 0
ACTION: int2 = 18 
int2 = None : <type 'NoneType'>
=> int2 = 18 : <type 'int'>
==================================================
int3 = 4                                                                 # STEP 1
ACTION: int3 = 4 
int3 = None : <type 'NoneType'>
=> int3 = 4 : <type 'int'>
==================================================
int0 = 13                                                                # STEP 2
ACTION: int0 = 13 
int0 = None : <type 'NoneType'>
=> int0 = 13 : <type 'int'>
==================================================
int1 = 17                                                                # STEP 3
ACTION: int1 = 17 
int1 = None : <type 'NoneType'>
=> int1 = 17 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x103a3d170> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int1)                                                        # STEP 5
ACTION: avl2.insert(int1) 
int1 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a3d170> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([17]) : <type 'set'>
==================================================
avl2.delete(int1)                                                        # STEP 6
ACTION: avl2.delete(int1) 
int1 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a3d170> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.delete(int1)                                                        # STEP 7
ACTION: avl2.delete(int1) 
int1 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a3d170> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.delete(int1)                                                        # STEP 8
ACTION: avl2.delete(int1) 
int1 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a3d170> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
result = avl2.inorder()                                                  # STEP 9
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x103a3d170> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl2.inorder()                                                 # STEP 10
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x103a3d170> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int2)                                                       # STEP 11
ACTION: avl2.insert(int2) 
int2 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a3d170> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([18]) : <type 'set'>
==================================================
int1 = 2                                                                # STEP 12
ACTION: int1 = 2 
int1 = 17 : <type 'int'>
=> int1 = 2 : <type 'int'>
==================================================
int2 = 12                                                               # STEP 13
ACTION: int2 = 12 
int2 = 18 : <type 'int'>
=> int2 = 12 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 14
ACTION: avl2.delete(int3) 
int3 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a3d170> : <type 'instance'>
avl_REF2 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int3 = 5                                                                # STEP 15
ACTION: int3 = 5 
int3 = 4 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 16
ACTION: avl2.delete(int0) 
int0 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a3d170> : <type 'instance'>
avl_REF2 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.delete(int1)                                                       # STEP 17
ACTION: avl2.delete(int1) 
int1 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a3d170> : <type 'instance'>
avl_REF2 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.delete(int1)                                                       # STEP 18
ACTION: avl2.delete(int1) 
int1 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a3d170> : <type 'instance'>
avl_REF2 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
result = avl2.find(int3)                                                # STEP 19
ACTION: result = avl2.find(int3) 
int3 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a3d170> : <type 'instance'>
avl_REF2 = set([18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl2.delete(int3)                                                       # STEP 20
ACTION: avl2.delete(int3) 
int3 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a3d170> : <type 'instance'>
avl_REF2 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2 = avl.AVLTree()                                                    # STEP 21
ACTION: avl2 = avl.AVLTree() 
avl2 = <avl.AVLTree instance at 0x103a3d170> : <type 'instance'>
avl_REF2 = set([18]) : <type 'set'>
=> avl2 = <avl.AVLTree instance at 0x105144d88> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 22
ACTION: avl2.delete(int2) 
int2 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105144d88> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
result = avl2.find(int3)                                                # STEP 23
ACTION: result = avl2.find(int3) 
int3 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105144d88> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
int1 = 9                                                                # STEP 24
ACTION: int1 = 9 
int1 = 2 : <type 'int'>
=> int1 = 9 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 25
ACTION: avl2.delete(int2) 
int2 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105144d88> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.insert(int1)                                                       # STEP 26
ACTION: avl2.insert(int1) 
int1 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105144d88> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([9]) : <type 'set'>
==================================================
int1 = 4                                                                # STEP 27
ACTION: int1 = 4 
int1 = 9 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 28
ACTION: avl2.delete(int0) 
int0 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105144d88> : <type 'instance'>
avl_REF2 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int0 = 7                                                                # STEP 29
ACTION: int0 = 7 
int0 = 13 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 30
ACTION: avl2.insert(int3) 
int3 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105144d88> : <type 'instance'>
avl_REF2 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([9, 5]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 31
ACTION: avl2.insert(int0) 
int0 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105144d88> : <type 'instance'>
avl_REF2 = set([9, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([9, 5, 7]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 32
ACTION: avl2.delete(int2) 
int2 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105144d88> : <type 'instance'>
avl_REF2 = set([9, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int3 = 15                                                               # STEP 33
ACTION: int3 = 15 
int3 = 5 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
int2 = 8                                                                # STEP 34
ACTION: int2 = 8 
int2 = 12 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 35
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x103ed73b0> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 36
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x103ed76c8> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 37
ACTION: avl2.delete(int1) 
int1 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105144d88> : <type 'instance'>
avl_REF2 = set([9, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl0.insert(int2)                                                       # STEP 38
ACTION: avl0.insert(int2) 
int2 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103ed73b0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([8]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 39
ACTION: avl2.insert(int0) 
int0 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105144d88> : <type 'instance'>
avl_REF2 = set([9, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
int1 = 13                                                               # STEP 40
ACTION: int1 = 13 
int1 = 4 : <type 'int'>
=> int1 = 13 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 41
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x103ed76c8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl0.insert(int1)                                                       # STEP 42
ACTION: avl0.insert(int1) 
int1 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103ed73b0> : <type 'instance'>
avl_REF0 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([8, 13]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 43
ACTION: avl1.delete(int3) 
int3 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103ed76c8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.insert(int1)                                                       # STEP 44
ACTION: avl1.insert(int1) 
int1 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103ed76c8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([13]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 45
ACTION: avl2.insert(int2) 
int2 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105144d88> : <type 'instance'>
avl_REF2 = set([9, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([8, 9, 5, 7]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 46
ACTION: avl0.insert(int0) 
int0 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103ed73b0> : <type 'instance'>
avl_REF0 = set([8, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([8, 13, 7]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 47
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x105144d88> : <type 'instance'>
avl_REF2 = set([8, 9, 5, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int3)                                                       # STEP 48
ACTION: avl2.insert(int3) 
int3 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105144d88> : <type 'instance'>
avl_REF2 = set([8, 9, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([8, 9, 15, 5, 7]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 49
ACTION: avl1.insert(int3) 
int3 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103ed76c8> : <type 'instance'>
avl_REF1 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([13, 15]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 50
ACTION: avl2.insert(int0) 
int0 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105144d88> : <type 'instance'>
avl_REF2 = set([8, 9, 15, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl2.insert(int2)                                                       # STEP 51
ACTION: avl2.insert(int2) 
int2 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105144d88> : <type 'instance'>
avl_REF2 = set([8, 9, 15, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl0.delete(int3)                                                       # STEP 52
ACTION: avl0.delete(int3) 
int3 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103ed73b0> : <type 'instance'>
avl_REF0 = set([8, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.delete(int3)                                                       # STEP 53
ACTION: avl0.delete(int3) 
int3 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103ed73b0> : <type 'instance'>
avl_REF0 = set([8, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.insert(int3)                                                       # STEP 54
ACTION: avl0.insert(int3) 
int3 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103ed73b0> : <type 'instance'>
avl_REF0 = set([8, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([8, 15, 13, 7]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 55
ACTION: avl1.delete(int1) 
int1 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103ed76c8> : <type 'instance'>
avl_REF1 = set([13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([15]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 56
ACTION: avl1.insert(int3) 
int3 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103ed76c8> : <type 'instance'>
avl_REF1 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
avl1.insert(int3)                                                       # STEP 57
ACTION: avl1.insert(int3) 
int3 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103ed76c8> : <type 'instance'>
avl_REF1 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
int3 = 3                                                                # STEP 58
ACTION: int3 = 3 
int3 = 15 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
int0 = 10                                                               # STEP 59
ACTION: int0 = 10 
int0 = 7 : <type 'int'>
=> int0 = 10 : <type 'int'>
==================================================
result = avl1.find(int0)                                                # STEP 60
ACTION: result = avl1.find(int0) 
int0 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103ed76c8> : <type 'instance'>
avl_REF1 = set([15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl0.delete(int3)                                                       # STEP 61
ACTION: avl0.delete(int3) 
int3 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103ed73b0> : <type 'instance'>
avl_REF0 = set([8, 15, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl1.delete(int3)                                                       # STEP 62
ACTION: avl1.delete(int3) 
int3 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103ed76c8> : <type 'instance'>
avl_REF1 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl0.delete(int0)                                                       # STEP 63
ACTION: avl0.delete(int0) 
int0 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103ed73b0> : <type 'instance'>
avl_REF0 = set([8, 15, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int0 = 19                                                               # STEP 64
ACTION: int0 = 19 
int0 = 10 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
avl0 == avl2                                                            # STEP 65
ACTION: avl0 == avl2 
avl0 = <avl.AVLTree instance at 0x103ed73b0> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x105144d88> : <type 'instance'>
avl_REF0 = set([8, 15, 13, 7]) : <type 'set'>
avl_REF2 = set([8, 9, 15, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
result = avl0.find(int2)                                                # STEP 66
ACTION: result = avl0.find(int2) 
int2 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103ed73b0> : <type 'instance'>
avl_REF0 = set([8, 15, 13, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
int1 = 7                                                                # STEP 67
ACTION: int1 = 7 
int1 = 13 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 68
ACTION: avl0.insert(int2) 
int2 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103ed73b0> : <type 'instance'>
avl_REF0 = set([8, 15, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl2.insert(int3)                                                       # STEP 69
ACTION: avl2.insert(int3) 
int3 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105144d88> : <type 'instance'>
avl_REF2 = set([8, 9, 15, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([3, 5, 7, 8, 9, 15]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 70
ACTION: avl0.insert(int3) 
int3 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103ed73b0> : <type 'instance'>
avl_REF0 = set([8, 15, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([8, 3, 15, 13, 7]) : <type 'set'>
==================================================
int2 = 1                                                                # STEP 71
ACTION: int2 = 1 
int2 = 8 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
int3 = 6                                                                # STEP 72
ACTION: int3 = 6 
int3 = 3 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
avl0 == avl0                                                            # STEP 73
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x103ed73b0> : <type 'instance'>
avl_REF0 = set([8, 3, 15, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl1.delete(int0)                                                       # STEP 74
ACTION: avl1.delete(int0) 
int0 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103ed76c8> : <type 'instance'>
avl_REF1 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.delete(int1)                                                       # STEP 75
ACTION: avl1.delete(int1) 
int1 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103ed76c8> : <type 'instance'>
avl_REF1 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl0.delete(int3)                                                       # STEP 76
ACTION: avl0.delete(int3) 
int3 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103ed73b0> : <type 'instance'>
avl_REF0 = set([8, 3, 15, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl1.delete(int0)                                                       # STEP 77
ACTION: avl1.delete(int0) 
int0 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103ed76c8> : <type 'instance'>
avl_REF1 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
result = avl2.inorder()                                                 # STEP 78
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x105144d88> : <type 'instance'>
avl_REF2 = set([3, 5, 7, 8, 9, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int0 = 3                                                                # STEP 79
ACTION: int0 = 3 
int0 = 19 : <type 'int'>
=> int0 = 3 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 80
ACTION: avl0.delete(int0) 
int0 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103ed73b0> : <type 'instance'>
avl_REF0 = set([8, 3, 15, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([8, 15, 13, 7]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 81
ACTION: avl0.delete(int1) 
int1 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103ed73b0> : <type 'instance'>
avl_REF0 = set([8, 15, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([8, 15, 13]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103a0d290>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
TEST #4 STEP #40 (0:00:30.052920) Fri Apr 28 07:33:52 2017 [ 162 stmts 216 branches ]
  5 [3:-1]
-- < 3 [1:0]
---- < 2 [0:0] L
---- > 4 [0:0] L
-- > 13 [2:1]
---- < 11 [1:1]
------ < 7 [0:0] L
---- > 15 [0:0] L
set([2, 3, 4, 5, 7, 11, 13, 15])
  5 [3:-1]
-- < 3 [1:0]
---- < 2 [0:0] L
---- > 4 [0:0] L
-- > 13 [2:-1]
---- < 11 [0:0] L
---- > 15 [1:-1]
------ > 17 [0:0] L
set([2, 3, 4, 5, 11, 13, 15, 17])
  12 [3:1]
-- < 10 [2:1]
---- < 4 [1:0]
------ < 2 [0:0] L
------ > 7 [0:0] L
---- > 11 [0:0] L
-- > 16 [1:0]
---- < 15 [0:0] L
---- > 17 [0:0] L
set([2, 4, 7, 10, 11, 12, 15, 16, 17])
  5 [3:-1]
-- < 3 [1:0]
---- < 2 [0:0] L
---- > 4 [0:0] L
-- > 13 [2:0]
---- < 11 [1:1]
------ < 10 [0:0] L
---- > 15 [1:-1]
------ > 17 [0:0] L
set([2, 3, 4, 5, 10, 11, 13, 15, 17])
  5 [3:-1]
-- < 3 [1:0]
---- < 2 [0:0] L
---- > 4 [0:0] L
-- > 13 [2:-1]
---- < 11 [0:0] L
---- > 15 [1:-1]
------ > 17 [0:0] L
set([2, 3, 4, 5, 11, 13, 15, 17])
  9 [2:0]
-- < 4 [1:-1]
---- > 8 [0:0] L
-- > 14 [1:0]
---- < 10 [0:0] L
---- > 20 [0:0] L
set([4, 8, 9, 10, 14, 20])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103d09050>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 22 steps

SAVING TEST AS failure.882.test.2
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 3                                                                 # STEP 0
ACTION: int0 = 3 
int0 = None : <type 'NoneType'>
=> int0 = 3 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 1
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x103a24950> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl2.inorder()                                                  # STEP 2
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x103a24950> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int3 = 6                                                                 # STEP 3
ACTION: int3 = 6 
int3 = None : <type 'NoneType'>
=> int3 = 6 : <type 'int'>
==================================================
int2 = 5                                                                 # STEP 4
ACTION: int2 = 5 
int2 = None : <type 'NoneType'>
=> int2 = 5 : <type 'int'>
==================================================
avl2.insert(int3)                                                        # STEP 5
ACTION: avl2.insert(int3) 
int3 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a24950> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([6]) : <type 'set'>
==================================================
avl2.insert(int2)                                                        # STEP 6
ACTION: avl2.insert(int2) 
int2 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a24950> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([5, 6]) : <type 'set'>
==================================================
int2 = 13                                                                # STEP 7
ACTION: int2 = 13 
int2 = 5 : <type 'int'>
=> int2 = 13 : <type 'int'>
==================================================
avl2.insert(int2)                                                        # STEP 8
ACTION: avl2.insert(int2) 
int2 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a24950> : <type 'instance'>
avl_REF2 = set([5, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([5, 6, 13]) : <type 'set'>
==================================================
avl2.delete(int3)                                                        # STEP 9
ACTION: avl2.delete(int3) 
int3 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a24950> : <type 'instance'>
avl_REF2 = set([5, 6, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([5, 13]) : <type 'set'>
==================================================
int2 = 16                                                               # STEP 10
ACTION: int2 = 16 
int2 = 13 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 11
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x103a24950> : <type 'instance'>
avl_REF2 = set([5, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl2.find(int0)                                                # STEP 12
ACTION: result = avl2.find(int0) 
int0 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a24950> : <type 'instance'>
avl_REF2 = set([5, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
result = avl2.inorder()                                                 # STEP 13
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x103a24950> : <type 'instance'>
avl_REF2 = set([5, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int0)                                                       # STEP 14
ACTION: avl2.delete(int0) 
int0 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a24950> : <type 'instance'>
avl_REF2 = set([5, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int3 = 13                                                               # STEP 15
ACTION: int3 = 13 
int3 = 6 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
int1 = 14                                                               # STEP 16
ACTION: int1 = 14 
int1 = None : <type 'NoneType'>
=> int1 = 14 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 17
ACTION: avl2.insert(int1) 
int1 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a24950> : <type 'instance'>
avl_REF2 = set([5, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([5, 14, 13]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 18
ACTION: avl2.delete(int3) 
int3 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a24950> : <type 'instance'>
avl_REF2 = set([5, 14, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([5, 14]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 19
ACTION: avl2.insert(int3) 
int3 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a24950> : <type 'instance'>
avl_REF2 = set([5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([5, 14, 13]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 20
ACTION: avl2.insert(int0) 
int0 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a24950> : <type 'instance'>
avl_REF2 = set([5, 14, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([3, 5, 14, 13]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 21
ACTION: avl2.delete(int1) 
int1 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a24950> : <type 'instance'>
avl_REF2 = set([3, 5, 14, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([3, 5, 13]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103a30998>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 3 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103a23050>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
Original test has 66 steps

SAVING TEST AS failure.882.test.3
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
avl0 = avl.AVLTree()                                                     # STEP 0
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x103a34908> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
result = avl0.inorder()                                                  # STEP 1
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x103a34908> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int2 = 13                                                                # STEP 2
ACTION: int2 = 13 
int2 = None : <type 'NoneType'>
=> int2 = 13 : <type 'int'>
==================================================
int3 = 7                                                                 # STEP 3
ACTION: int3 = 7 
int3 = None : <type 'NoneType'>
=> int3 = 7 : <type 'int'>
==================================================
int1 = 19                                                                # STEP 4
ACTION: int1 = 19 
int1 = None : <type 'NoneType'>
=> int1 = 19 : <type 'int'>
==================================================
result = avl0.find(int2)                                                 # STEP 5
ACTION: result = avl0.find(int2) 
int2 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a34908> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl0.delete(int1)                                                        # STEP 6
ACTION: avl0.delete(int1) 
int1 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a34908> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.delete(int1)                                                        # STEP 7
ACTION: avl0.delete(int1) 
int1 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a34908> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
result = avl0.inorder()                                                  # STEP 8
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x103a34908> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.delete(int1)                                                        # STEP 9
ACTION: avl0.delete(int1) 
int1 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a34908> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int0 = 8                                                                # STEP 10
ACTION: int0 = 8 
int0 = None : <type 'NoneType'>
=> int0 = 8 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 11
ACTION: avl0.insert(int3) 
int3 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a34908> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([7]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 12
ACTION: avl0.delete(int1) 
int1 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a34908> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.delete(int2)                                                       # STEP 13
ACTION: avl0.delete(int2) 
int2 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a34908> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.insert(int1)                                                       # STEP 14
ACTION: avl0.insert(int1) 
int1 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a34908> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([19, 7]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 15
ACTION: avl0.insert(int0) 
int0 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a34908> : <type 'instance'>
avl_REF0 = set([19, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([8, 19, 7]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 16
ACTION: avl0.insert(int2) 
int2 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a34908> : <type 'instance'>
avl_REF0 = set([8, 19, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([8, 19, 13, 7]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 17
ACTION: avl0.insert(int1) 
int1 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a34908> : <type 'instance'>
avl_REF0 = set([8, 19, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl0.insert(int2)                                                       # STEP 18
ACTION: avl0.insert(int2) 
int2 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a34908> : <type 'instance'>
avl_REF0 = set([8, 19, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl0.insert(int2)                                                       # STEP 19
ACTION: avl0.insert(int2) 
int2 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a34908> : <type 'instance'>
avl_REF0 = set([8, 19, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
int3 = 5                                                                # STEP 20
ACTION: int3 = 5 
int3 = 7 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
int0 = 3                                                                # STEP 21
ACTION: int0 = 3 
int0 = 8 : <type 'int'>
=> int0 = 3 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 22
ACTION: avl0.delete(int0) 
int0 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a34908> : <type 'instance'>
avl_REF0 = set([8, 19, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.delete(int0)                                                       # STEP 23
ACTION: avl0.delete(int0) 
int0 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a34908> : <type 'instance'>
avl_REF0 = set([8, 19, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int2 = 11                                                               # STEP 24
ACTION: int2 = 11 
int2 = 13 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 25
ACTION: avl0.insert(int1) 
int1 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a34908> : <type 'instance'>
avl_REF0 = set([8, 19, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl0.delete(int2)                                                       # STEP 26
ACTION: avl0.delete(int2) 
int2 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a34908> : <type 'instance'>
avl_REF0 = set([8, 19, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.delete(int0)                                                       # STEP 27
ACTION: avl0.delete(int0) 
int0 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a34908> : <type 'instance'>
avl_REF0 = set([8, 19, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0 == avl0                                                            # STEP 28
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x103a34908> : <type 'instance'>
avl_REF0 = set([8, 19, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl0.delete(int3)                                                       # STEP 29
ACTION: avl0.delete(int3) 
int3 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a34908> : <type 'instance'>
avl_REF0 = set([8, 19, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.insert(int1)                                                       # STEP 30
ACTION: avl0.insert(int1) 
int1 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a34908> : <type 'instance'>
avl_REF0 = set([8, 19, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl0.delete(int3)                                                       # STEP 31
ACTION: avl0.delete(int3) 
int3 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a34908> : <type 'instance'>
avl_REF0 = set([8, 19, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int1 = 14                                                               # STEP 32
ACTION: int1 = 14 
int1 = 19 : <type 'int'>
=> int1 = 14 : <type 'int'>
==================================================
int2 = 4                                                                # STEP 33
ACTION: int2 = 4 
int2 = 11 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 34
ACTION: avl0.delete(int2) 
int2 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a34908> : <type 'instance'>
avl_REF0 = set([8, 19, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int2 = 14                                                               # STEP 35
ACTION: int2 = 14 
int2 = 4 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
result = avl0.find(int2)                                                # STEP 36
ACTION: result = avl0.find(int2) 
int2 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a34908> : <type 'instance'>
avl_REF0 = set([8, 19, 13, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl0.delete(int0)                                                       # STEP 37
ACTION: avl0.delete(int0) 
int0 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a34908> : <type 'instance'>
avl_REF0 = set([8, 19, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int0 = 20                                                               # STEP 38
ACTION: int0 = 20 
int0 = 3 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 39
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x103a34908> : <type 'instance'>
avl_REF0 = set([8, 19, 13, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int2)                                                       # STEP 40
ACTION: avl0.insert(int2) 
int2 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a34908> : <type 'instance'>
avl_REF0 = set([8, 19, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([8, 19, 13, 14, 7]) : <type 'set'>
==================================================
int2 = 19                                                               # STEP 41
ACTION: int2 = 19 
int2 = 14 : <type 'int'>
=> int2 = 19 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 42
ACTION: avl0.delete(int3) 
int3 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a34908> : <type 'instance'>
avl_REF0 = set([8, 19, 13, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.delete(int0)                                                       # STEP 43
ACTION: avl0.delete(int0) 
int0 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a34908> : <type 'instance'>
avl_REF0 = set([8, 19, 13, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl2 = avl.AVLTree()                                                    # STEP 44
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x103a402d8> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 45
ACTION: avl2.delete(int2) 
int2 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a402d8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl0.delete(int1)                                                       # STEP 46
ACTION: avl0.delete(int1) 
int1 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a34908> : <type 'instance'>
avl_REF0 = set([8, 19, 13, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([8, 19, 13, 7]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 47
ACTION: avl0.insert(int2) 
int2 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a34908> : <type 'instance'>
avl_REF0 = set([8, 19, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
int1 = 12                                                               # STEP 48
ACTION: int1 = 12 
int1 = 14 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
result = avl0.find(int1)                                                # STEP 49
ACTION: result = avl0.find(int1) 
int1 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a34908> : <type 'instance'>
avl_REF0 = set([8, 19, 13, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl2.insert(int0)                                                       # STEP 50
ACTION: avl2.insert(int0) 
int0 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a402d8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([20]) : <type 'set'>
==================================================
int0 = 20                                                               # STEP 51
ACTION: int0 = 20 
int0 = 20 : <type 'int'>
==================================================
int1 = 3                                                                # STEP 52
ACTION: int1 = 3 
int1 = 12 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 53
ACTION: avl0.delete(int0) 
int0 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a34908> : <type 'instance'>
avl_REF0 = set([8, 19, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int2 = 10                                                               # STEP 54
ACTION: int2 = 10 
int2 = 19 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
avl0 == avl2                                                            # STEP 55
ACTION: avl0 == avl2 
avl0 = <avl.AVLTree instance at 0x103a34908> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x103a402d8> : <type 'instance'>
avl_REF0 = set([8, 19, 13, 7]) : <type 'set'>
avl_REF2 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
int3 = 4                                                                # STEP 56
ACTION: int3 = 4 
int3 = 5 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
int0 = 12                                                               # STEP 57
ACTION: int0 = 12 
int0 = 20 : <type 'int'>
=> int0 = 12 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 58
ACTION: avl0.delete(int0) 
int0 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a34908> : <type 'instance'>
avl_REF0 = set([8, 19, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl2 == avl2                                                            # STEP 59
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x103a402d8> : <type 'instance'>
avl_REF2 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl2.insert(int2)                                                       # STEP 60
ACTION: avl2.insert(int2) 
int2 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a402d8> : <type 'instance'>
avl_REF2 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([10, 20]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 61
ACTION: avl2.insert(int3) 
int3 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a402d8> : <type 'instance'>
avl_REF2 = set([10, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([4, 10, 20]) : <type 'set'>
==================================================
int3 = 2                                                                # STEP 62
ACTION: int3 = 2 
int3 = 4 : <type 'int'>
=> int3 = 2 : <type 'int'>
==================================================
int2 = 7                                                                # STEP 63
ACTION: int2 = 7 
int2 = 10 : <type 'int'>
=> int2 = 7 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 64
ACTION: avl2.delete(int0) 
int0 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a402d8> : <type 'instance'>
avl_REF2 = set([4, 10, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl0.delete(int2)                                                       # STEP 65
ACTION: avl0.delete(int2) 
int2 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a34908> : <type 'instance'>
avl_REF0 = set([8, 19, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([8, 19, 13]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103a15b48>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 4 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 38
STOPPING TESTING DUE TO TIMEOUT
8.6528673227 PERCENT COVERED
60.1618568897 TOTAL RUNTIME
8 EXECUTED
548 TOTAL TEST OPERATIONS
21.5338587761 TIME SPENT EXECUTING TEST OPERATIONS
0.0568993091583 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
21.6924126148 TIME SPENT CHECKING PROPERTIES
43.2262713909 TOTAL TIME SPENT RUNNING SUT
0.00469851493835 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
4 FAILED
0 REPEATS OF FAILURES
4 ACTUAL DISTINCT FAILURES

FAILURE 0
avl1 = avl.AVLTree()                                                     # STEP 0
avl1 == avl1                                                             # STEP 1
int1 = 17                                                                # STEP 2
int2 = 8                                                                 # STEP 3
avl1.insert(int2)                                                        # STEP 4
avl1.insert(int2)                                                        # STEP 5
avl1.delete(int1)                                                        # STEP 6
int3 = 2                                                                 # STEP 7
avl1.delete(int1)                                                        # STEP 8
avl1.delete(int3)                                                        # STEP 9
avl1.insert(int2)                                                       # STEP 10
avl1 == avl1                                                            # STEP 11
int3 = 20                                                               # STEP 12
int2 = 10                                                               # STEP 13
int1 = 3                                                                # STEP 14
result = avl1.inorder()                                                 # STEP 15
result = avl1.inorder()                                                 # STEP 16
int0 = 19                                                               # STEP 17
avl1.delete(int1)                                                       # STEP 18
avl1.delete(int2)                                                       # STEP 19
result = avl1.inorder()                                                 # STEP 20
avl1.insert(int3)                                                       # STEP 21
avl1.delete(int1)                                                       # STEP 22
int3 = 20                                                               # STEP 23
avl1.delete(int1)                                                       # STEP 24
avl1.delete(int0)                                                       # STEP 25
avl1.insert(int0)                                                       # STEP 26
int2 = 4                                                                # STEP 27
avl1.insert(int1)                                                       # STEP 28
avl1.insert(int0)                                                       # STEP 29
avl1.delete(int2)                                                       # STEP 30
avl0 = avl.AVLTree()                                                    # STEP 31
avl1.insert(int0)                                                       # STEP 32
avl0.insert(int0)                                                       # STEP 33
int1 = 4                                                                # STEP 34
avl1.insert(int0)                                                       # STEP 35
avl1.insert(int0)                                                       # STEP 36
avl0.insert(int3)                                                       # STEP 37
int3 = 6                                                                # STEP 38
avl1.delete(int0)                                                       # STEP 39
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103d4ccf8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE 1
int2 = 18                                                                # STEP 0
int3 = 4                                                                 # STEP 1
int0 = 13                                                                # STEP 2
int1 = 17                                                                # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
avl2.insert(int1)                                                        # STEP 5
avl2.delete(int1)                                                        # STEP 6
avl2.delete(int1)                                                        # STEP 7
avl2.delete(int1)                                                        # STEP 8
result = avl2.inorder()                                                  # STEP 9
result = avl2.inorder()                                                 # STEP 10
avl2.insert(int2)                                                       # STEP 11
int1 = 2                                                                # STEP 12
int2 = 12                                                               # STEP 13
avl2.delete(int3)                                                       # STEP 14
int3 = 5                                                                # STEP 15
avl2.delete(int0)                                                       # STEP 16
avl2.delete(int1)                                                       # STEP 17
avl2.delete(int1)                                                       # STEP 18
result = avl2.find(int3)                                                # STEP 19
avl2.delete(int3)                                                       # STEP 20
avl2 = avl.AVLTree()                                                    # STEP 21
avl2.delete(int2)                                                       # STEP 22
result = avl2.find(int3)                                                # STEP 23
int1 = 9                                                                # STEP 24
avl2.delete(int2)                                                       # STEP 25
avl2.insert(int1)                                                       # STEP 26
int1 = 4                                                                # STEP 27
avl2.delete(int0)                                                       # STEP 28
int0 = 7                                                                # STEP 29
avl2.insert(int3)                                                       # STEP 30
avl2.insert(int0)                                                       # STEP 31
avl2.delete(int2)                                                       # STEP 32
int3 = 15                                                               # STEP 33
int2 = 8                                                                # STEP 34
avl0 = avl.AVLTree()                                                    # STEP 35
avl1 = avl.AVLTree()                                                    # STEP 36
avl2.delete(int1)                                                       # STEP 37
avl0.insert(int2)                                                       # STEP 38
avl2.insert(int0)                                                       # STEP 39
int1 = 13                                                               # STEP 40
avl1 == avl1                                                            # STEP 41
avl0.insert(int1)                                                       # STEP 42
avl1.delete(int3)                                                       # STEP 43
avl1.insert(int1)                                                       # STEP 44
avl2.insert(int2)                                                       # STEP 45
avl0.insert(int0)                                                       # STEP 46
result = avl2.inorder()                                                 # STEP 47
avl2.insert(int3)                                                       # STEP 48
avl1.insert(int3)                                                       # STEP 49
avl2.insert(int0)                                                       # STEP 50
avl2.insert(int2)                                                       # STEP 51
avl0.delete(int3)                                                       # STEP 52
avl0.delete(int3)                                                       # STEP 53
avl0.insert(int3)                                                       # STEP 54
avl1.delete(int1)                                                       # STEP 55
avl1.insert(int3)                                                       # STEP 56
avl1.insert(int3)                                                       # STEP 57
int3 = 3                                                                # STEP 58
int0 = 10                                                               # STEP 59
result = avl1.find(int0)                                                # STEP 60
avl0.delete(int3)                                                       # STEP 61
avl1.delete(int3)                                                       # STEP 62
avl0.delete(int0)                                                       # STEP 63
int0 = 19                                                               # STEP 64
avl0 == avl2                                                            # STEP 65
result = avl0.find(int2)                                                # STEP 66
int1 = 7                                                                # STEP 67
avl0.insert(int2)                                                       # STEP 68
avl2.insert(int3)                                                       # STEP 69
avl0.insert(int3)                                                       # STEP 70
int2 = 1                                                                # STEP 71
int3 = 6                                                                # STEP 72
avl0 == avl0                                                            # STEP 73
avl1.delete(int0)                                                       # STEP 74
avl1.delete(int1)                                                       # STEP 75
avl0.delete(int3)                                                       # STEP 76
avl1.delete(int0)                                                       # STEP 77
result = avl2.inorder()                                                 # STEP 78
int0 = 3                                                                # STEP 79
avl0.delete(int0)                                                       # STEP 80
avl0.delete(int1)                                                       # STEP 81
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103a0d290>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE 2
int0 = 3                                                                 # STEP 0
avl2 = avl.AVLTree()                                                     # STEP 1
result = avl2.inorder()                                                  # STEP 2
int3 = 6                                                                 # STEP 3
int2 = 5                                                                 # STEP 4
avl2.insert(int3)                                                        # STEP 5
avl2.insert(int2)                                                        # STEP 6
int2 = 13                                                                # STEP 7
avl2.insert(int2)                                                        # STEP 8
avl2.delete(int3)                                                        # STEP 9
int2 = 16                                                               # STEP 10
result = avl2.inorder()                                                 # STEP 11
result = avl2.find(int0)                                                # STEP 12
result = avl2.inorder()                                                 # STEP 13
avl2.delete(int0)                                                       # STEP 14
int3 = 13                                                               # STEP 15
int1 = 14                                                               # STEP 16
avl2.insert(int1)                                                       # STEP 17
avl2.delete(int3)                                                       # STEP 18
avl2.insert(int3)                                                       # STEP 19
avl2.insert(int0)                                                       # STEP 20
avl2.delete(int1)                                                       # STEP 21
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103a30998>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE 3
avl0 = avl.AVLTree()                                                     # STEP 0
result = avl0.inorder()                                                  # STEP 1
int2 = 13                                                                # STEP 2
int3 = 7                                                                 # STEP 3
int1 = 19                                                                # STEP 4
result = avl0.find(int2)                                                 # STEP 5
avl0.delete(int1)                                                        # STEP 6
avl0.delete(int1)                                                        # STEP 7
result = avl0.inorder()                                                  # STEP 8
avl0.delete(int1)                                                        # STEP 9
int0 = 8                                                                # STEP 10
avl0.insert(int3)                                                       # STEP 11
avl0.delete(int1)                                                       # STEP 12
avl0.delete(int2)                                                       # STEP 13
avl0.insert(int1)                                                       # STEP 14
avl0.insert(int0)                                                       # STEP 15
avl0.insert(int2)                                                       # STEP 16
avl0.insert(int1)                                                       # STEP 17
avl0.insert(int2)                                                       # STEP 18
avl0.insert(int2)                                                       # STEP 19
int3 = 5                                                                # STEP 20
int0 = 3                                                                # STEP 21
avl0.delete(int0)                                                       # STEP 22
avl0.delete(int0)                                                       # STEP 23
int2 = 11                                                               # STEP 24
avl0.insert(int1)                                                       # STEP 25
avl0.delete(int2)                                                       # STEP 26
avl0.delete(int0)                                                       # STEP 27
avl0 == avl0                                                            # STEP 28
avl0.delete(int3)                                                       # STEP 29
avl0.insert(int1)                                                       # STEP 30
avl0.delete(int3)                                                       # STEP 31
int1 = 14                                                               # STEP 32
int2 = 4                                                                # STEP 33
avl0.delete(int2)                                                       # STEP 34
int2 = 14                                                               # STEP 35
result = avl0.find(int2)                                                # STEP 36
avl0.delete(int0)                                                       # STEP 37
int0 = 20                                                               # STEP 38
result = avl0.inorder()                                                 # STEP 39
avl0.insert(int2)                                                       # STEP 40
int2 = 19                                                               # STEP 41
avl0.delete(int3)                                                       # STEP 42
avl0.delete(int0)                                                       # STEP 43
avl2 = avl.AVLTree()                                                    # STEP 44
avl2.delete(int2)                                                       # STEP 45
avl0.delete(int1)                                                       # STEP 46
avl0.insert(int2)                                                       # STEP 47
int1 = 12                                                               # STEP 48
result = avl0.find(int1)                                                # STEP 49
avl2.insert(int0)                                                       # STEP 50
int0 = 20                                                               # STEP 51
int1 = 3                                                                # STEP 52
avl0.delete(int0)                                                       # STEP 53
int2 = 10                                                               # STEP 54
avl0 == avl2                                                            # STEP 55
int3 = 4                                                                # STEP 56
int0 = 12                                                               # STEP 57
avl0.delete(int0)                                                       # STEP 58
avl2 == avl2                                                            # STEP 59
avl2.insert(int2)                                                       # STEP 60
avl2.insert(int3)                                                       # STEP 61
int3 = 2                                                                # STEP 62
int2 = 7                                                                # STEP 63
avl2.delete(int0)                                                       # STEP 64
avl0.delete(int2)                                                       # STEP 65
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103a15b48>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
218 BRANCHES COVERED
163 STATEMENTS COVERED

Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.395.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  8 [2:0]
-- < 7 [1:1]
---- < 6 [0:0] L
-- > 11 [1:0]
---- < 9 [0:0] L
---- > 18 [0:0] L
set([6, 7, 8, 9, 11, 18])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1042c4518>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
Original test has 71 steps

SAVING TEST AS failure.395.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 10                                                                # STEP 0
ACTION: int0 = 10 
int0 = None : <type 'NoneType'>
=> int0 = 10 : <type 'int'>
==================================================
int2 = 1                                                                 # STEP 1
ACTION: int2 = 1 
int2 = None : <type 'NoneType'>
=> int2 = 1 : <type 'int'>
==================================================
int3 = 13                                                                # STEP 2
ACTION: int3 = 13 
int3 = None : <type 'NoneType'>
=> int3 = 13 : <type 'int'>
==================================================
int1 = 19                                                                # STEP 3
ACTION: int1 = 19 
int1 = None : <type 'NoneType'>
=> int1 = 19 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 4
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x1046a75a8> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.insert(int2)                                                        # STEP 5
ACTION: avl0.insert(int2) 
int2 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1046a75a8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([1]) : <type 'set'>
==================================================
int2 = 11                                                                # STEP 6
ACTION: int2 = 11 
int2 = 1 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
avl0 == avl0                                                             # STEP 7
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x1046a75a8> : <type 'instance'>
avl_REF0 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl0.insert(int3)                                                        # STEP 8
ACTION: avl0.insert(int3) 
int3 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1046a75a8> : <type 'instance'>
avl_REF0 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([1, 13]) : <type 'set'>
==================================================
avl0.delete(int1)                                                        # STEP 9
ACTION: avl0.delete(int1) 
int1 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1046a75a8> : <type 'instance'>
avl_REF0 = set([1, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int3 = 18                                                               # STEP 10
ACTION: int3 = 18 
int3 = 13 : <type 'int'>
=> int3 = 18 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 11
ACTION: avl0.delete(int2) 
int2 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1046a75a8> : <type 'instance'>
avl_REF0 = set([1, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int2 = 8                                                                # STEP 12
ACTION: int2 = 8 
int2 = 11 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
int1 = 6                                                                # STEP 13
ACTION: int1 = 6 
int1 = 19 : <type 'int'>
=> int1 = 6 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 14
ACTION: avl0.delete(int1) 
int1 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1046a75a8> : <type 'instance'>
avl_REF0 = set([1, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int1 = 13                                                               # STEP 15
ACTION: int1 = 13 
int1 = 6 : <type 'int'>
=> int1 = 13 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 16
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x1058696c8> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 17
ACTION: avl1.insert(int1) 
int1 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058696c8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([13]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 18
ACTION: avl1.insert(int0) 
int0 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058696c8> : <type 'instance'>
avl_REF1 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([10, 13]) : <type 'set'>
==================================================
int1 = 15                                                               # STEP 19
ACTION: int1 = 15 
int1 = 13 : <type 'int'>
=> int1 = 15 : <type 'int'>
==================================================
avl0 == avl0                                                            # STEP 20
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x1046a75a8> : <type 'instance'>
avl_REF0 = set([1, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
int0 = 2                                                                # STEP 21
ACTION: int0 = 2 
int0 = 10 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 22
ACTION: avl1.insert(int3) 
int3 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058696c8> : <type 'instance'>
avl_REF1 = set([10, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([10, 18, 13]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 23
ACTION: avl0.delete(int1) 
int1 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1046a75a8> : <type 'instance'>
avl_REF0 = set([1, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.delete(int1)                                                       # STEP 24
ACTION: avl0.delete(int1) 
int1 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1046a75a8> : <type 'instance'>
avl_REF0 = set([1, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.delete(int0)                                                       # STEP 25
ACTION: avl0.delete(int0) 
int0 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1046a75a8> : <type 'instance'>
avl_REF0 = set([1, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl1.delete(int3)                                                       # STEP 26
ACTION: avl1.delete(int3) 
int3 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058696c8> : <type 'instance'>
avl_REF1 = set([10, 18, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([10, 13]) : <type 'set'>
==================================================
result = avl0.find(int3)                                                # STEP 27
ACTION: result = avl0.find(int3) 
int3 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1046a75a8> : <type 'instance'>
avl_REF0 = set([1, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
int1 = 17                                                               # STEP 28
ACTION: int1 = 17 
int1 = 15 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
int0 = 6                                                                # STEP 29
ACTION: int0 = 6 
int0 = 2 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 30
ACTION: avl1.delete(int2) 
int2 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058696c8> : <type 'instance'>
avl_REF1 = set([10, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
result = avl1.find(int0)                                                # STEP 31
ACTION: result = avl1.find(int0) 
int0 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058696c8> : <type 'instance'>
avl_REF1 = set([10, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
int3 = 18                                                               # STEP 32
ACTION: int3 = 18 
int3 = 18 : <type 'int'>
==================================================
int2 = 3                                                                # STEP 33
ACTION: int2 = 3 
int2 = 8 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
int0 = 13                                                               # STEP 34
ACTION: int0 = 13 
int0 = 6 : <type 'int'>
=> int0 = 13 : <type 'int'>
==================================================
result = avl0.find(int1)                                                # STEP 35
ACTION: result = avl0.find(int1) 
int1 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1046a75a8> : <type 'instance'>
avl_REF0 = set([1, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
result = avl1.find(int0)                                                # STEP 36
ACTION: result = avl1.find(int0) 
int0 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058696c8> : <type 'instance'>
avl_REF1 = set([10, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl0 == avl1                                                            # STEP 37
ACTION: avl0 == avl1 
avl0 = <avl.AVLTree instance at 0x1046a75a8> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x1058696c8> : <type 'instance'>
avl_REF0 = set([1, 13]) : <type 'set'>
avl_REF1 = set([10, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF1 
==================================================
avl1.insert(int1)                                                       # STEP 38
ACTION: avl1.insert(int1) 
int1 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058696c8> : <type 'instance'>
avl_REF1 = set([10, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([17, 10, 13]) : <type 'set'>
==================================================
int0 = 15                                                               # STEP 39
ACTION: int0 = 15 
int0 = 13 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
int1 = 2                                                                # STEP 40
ACTION: int1 = 2 
int1 = 17 : <type 'int'>
=> int1 = 2 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 41
ACTION: avl1.insert(int1) 
int1 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058696c8> : <type 'instance'>
avl_REF1 = set([17, 10, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([17, 10, 2, 13]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 42
ACTION: avl1.delete(int1) 
int1 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058696c8> : <type 'instance'>
avl_REF1 = set([17, 10, 2, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([17, 10, 13]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 43
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x1046a75a8> : <type 'instance'>
avl_REF0 = set([1, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.delete(int3)                                                       # STEP 44
ACTION: avl0.delete(int3) 
int3 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1046a75a8> : <type 'instance'>
avl_REF0 = set([1, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.insert(int1)                                                       # STEP 45
ACTION: avl0.insert(int1) 
int1 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1046a75a8> : <type 'instance'>
avl_REF0 = set([1, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([1, 2, 13]) : <type 'set'>
==================================================
int3 = 18                                                               # STEP 46
ACTION: int3 = 18 
int3 = 18 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 47
ACTION: avl0.delete(int1) 
int1 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1046a75a8> : <type 'instance'>
avl_REF0 = set([1, 2, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([1, 13]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 48
ACTION: avl0.delete(int0) 
int0 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1046a75a8> : <type 'instance'>
avl_REF0 = set([1, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl1.insert(int0)                                                       # STEP 49
ACTION: avl1.insert(int0) 
int0 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058696c8> : <type 'instance'>
avl_REF1 = set([17, 10, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([17, 10, 13, 15]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 50
ACTION: avl0.insert(int3) 
int3 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1046a75a8> : <type 'instance'>
avl_REF0 = set([1, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([1, 18, 13]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 51
ACTION: avl1.insert(int2) 
int2 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058696c8> : <type 'instance'>
avl_REF1 = set([17, 10, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([17, 10, 3, 13, 15]) : <type 'set'>
==================================================
result = avl0.find(int3)                                                # STEP 52
ACTION: result = avl0.find(int3) 
int3 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1046a75a8> : <type 'instance'>
avl_REF0 = set([1, 18, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
int0 = 18                                                               # STEP 53
ACTION: int0 = 18 
int0 = 15 : <type 'int'>
=> int0 = 18 : <type 'int'>
==================================================
int2 = 11                                                               # STEP 54
ACTION: int2 = 11 
int2 = 3 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
int3 = 16                                                               # STEP 55
ACTION: int3 = 16 
int3 = 18 : <type 'int'>
=> int3 = 16 : <type 'int'>
==================================================
int1 = 20                                                               # STEP 56
ACTION: int1 = 20 
int1 = 2 : <type 'int'>
=> int1 = 20 : <type 'int'>
==================================================
result = avl1.find(int1)                                                # STEP 57
ACTION: result = avl1.find(int1) 
int1 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058696c8> : <type 'instance'>
avl_REF1 = set([17, 10, 3, 13, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
result = avl1.find(int2)                                                # STEP 58
ACTION: result = avl1.find(int2) 
int2 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058696c8> : <type 'instance'>
avl_REF1 = set([17, 10, 3, 13, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl0.insert(int2)                                                       # STEP 59
ACTION: avl0.insert(int2) 
int2 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1046a75a8> : <type 'instance'>
avl_REF0 = set([1, 18, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([1, 18, 11, 13]) : <type 'set'>
==================================================
int1 = 16                                                               # STEP 60
ACTION: int1 = 16 
int1 = 20 : <type 'int'>
=> int1 = 16 : <type 'int'>
==================================================
int2 = 9                                                                # STEP 61
ACTION: int2 = 9 
int2 = 11 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 62
ACTION: avl1.insert(int1) 
int1 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058696c8> : <type 'instance'>
avl_REF1 = set([17, 10, 3, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([3, 10, 13, 15, 16, 17]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 63
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x1046a75a8> : <type 'instance'>
avl_REF0 = set([1, 18, 11, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl1 == avl0                                                            # STEP 64
ACTION: avl1 == avl0 
avl1 = <avl.AVLTree instance at 0x1058696c8> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x1046a75a8> : <type 'instance'>
avl_REF1 = set([3, 10, 13, 15, 16, 17]) : <type 'set'>
avl_REF0 = set([1, 18, 11, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
int1 = 5                                                                # STEP 65
ACTION: int1 = 5 
int1 = 16 : <type 'int'>
=> int1 = 5 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 66
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1058696c8> : <type 'instance'>
avl_REF1 = set([3, 10, 13, 15, 16, 17]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1 = avl.AVLTree()                                                    # STEP 67
ACTION: avl1 = avl.AVLTree() 
avl1 = <avl.AVLTree instance at 0x1058696c8> : <type 'instance'>
avl_REF1 = set([3, 10, 13, 15, 16, 17]) : <type 'set'>
=> avl1 = <avl.AVLTree instance at 0x10468b2d8> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 68
ACTION: avl0.insert(int0) 
int0 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1046a75a8> : <type 'instance'>
avl_REF0 = set([1, 18, 11, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
result = avl0.find(int2)                                                # STEP 69
ACTION: result = avl0.find(int2) 
int2 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1046a75a8> : <type 'instance'>
avl_REF0 = set([1, 18, 11, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl0.delete(int0)                                                       # STEP 70
ACTION: avl0.delete(int0) 
int0 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1046a75a8> : <type 'instance'>
avl_REF0 = set([1, 18, 11, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([1, 11, 13]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10468b5f0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #4 STEP #20 (0:00:30.076027) Fri Apr 28 06:15:22 2017 [ 161 stmts 214 branches ]
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 89
STOPPING TESTING DUE TO TIMEOUT
8.6528673227 PERCENT COVERED
60.1977760792 TOTAL RUNTIME
7 EXECUTED
660 TOTAL TEST OPERATIONS
26.896197319 TIME SPENT EXECUTING TEST OPERATIONS
0.0225276947021 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
27.0611784458 TIME SPENT CHECKING PROPERTIES
53.9573757648 TOTAL TIME SPENT RUNNING SUT
0.004065990448 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int0 = 10                                                                # STEP 0
int2 = 1                                                                 # STEP 1
int3 = 13                                                                # STEP 2
int1 = 19                                                                # STEP 3
avl0 = avl.AVLTree()                                                     # STEP 4
avl0.insert(int2)                                                        # STEP 5
int2 = 11                                                                # STEP 6
avl0 == avl0                                                             # STEP 7
avl0.insert(int3)                                                        # STEP 8
avl0.delete(int1)                                                        # STEP 9
int3 = 18                                                               # STEP 10
avl0.delete(int2)                                                       # STEP 11
int2 = 8                                                                # STEP 12
int1 = 6                                                                # STEP 13
avl0.delete(int1)                                                       # STEP 14
int1 = 13                                                               # STEP 15
avl1 = avl.AVLTree()                                                    # STEP 16
avl1.insert(int1)                                                       # STEP 17
avl1.insert(int0)                                                       # STEP 18
int1 = 15                                                               # STEP 19
avl0 == avl0                                                            # STEP 20
int0 = 2                                                                # STEP 21
avl1.insert(int3)                                                       # STEP 22
avl0.delete(int1)                                                       # STEP 23
avl0.delete(int1)                                                       # STEP 24
avl0.delete(int0)                                                       # STEP 25
avl1.delete(int3)                                                       # STEP 26
result = avl0.find(int3)                                                # STEP 27
int1 = 17                                                               # STEP 28
int0 = 6                                                                # STEP 29
avl1.delete(int2)                                                       # STEP 30
result = avl1.find(int0)                                                # STEP 31
int3 = 18                                                               # STEP 32
int2 = 3                                                                # STEP 33
int0 = 13                                                               # STEP 34
result = avl0.find(int1)                                                # STEP 35
result = avl1.find(int0)                                                # STEP 36
avl0 == avl1                                                            # STEP 37
avl1.insert(int1)                                                       # STEP 38
int0 = 15                                                               # STEP 39
int1 = 2                                                                # STEP 40
avl1.insert(int1)                                                       # STEP 41
avl1.delete(int1)                                                       # STEP 42
result = avl0.inorder()                                                 # STEP 43
avl0.delete(int3)                                                       # STEP 44
avl0.insert(int1)                                                       # STEP 45
int3 = 18                                                               # STEP 46
avl0.delete(int1)                                                       # STEP 47
avl0.delete(int0)                                                       # STEP 48
avl1.insert(int0)                                                       # STEP 49
avl0.insert(int3)                                                       # STEP 50
avl1.insert(int2)                                                       # STEP 51
result = avl0.find(int3)                                                # STEP 52
int0 = 18                                                               # STEP 53
int2 = 11                                                               # STEP 54
int3 = 16                                                               # STEP 55
int1 = 20                                                               # STEP 56
result = avl1.find(int1)                                                # STEP 57
result = avl1.find(int2)                                                # STEP 58
avl0.insert(int2)                                                       # STEP 59
int1 = 16                                                               # STEP 60
int2 = 9                                                                # STEP 61
avl1.insert(int1)                                                       # STEP 62
result = avl0.inorder()                                                 # STEP 63
avl1 == avl0                                                            # STEP 64
int1 = 5                                                                # STEP 65
result = avl1.inorder()                                                 # STEP 66
avl1 = avl.AVLTree()                                                    # STEP 67
avl0.insert(int0)                                                       # STEP 68
result = avl0.find(int2)                                                # STEP 69
avl0.delete(int0)                                                       # STEP 70
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10468b5f0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
218 BRANCHES COVERED
163 STATEMENTS COVERED

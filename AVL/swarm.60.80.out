Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=True, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.787.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104e83518>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 87 steps

SAVING TEST AS failure.787.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 19                                                                # STEP 0
ACTION: int1 = 19 
int1 = None : <type 'NoneType'>
=> int1 = 19 : <type 'int'>
==================================================
int0 = 1                                                                 # STEP 1
ACTION: int0 = 1 
int0 = None : <type 'NoneType'>
=> int0 = 1 : <type 'int'>
==================================================
int3 = 10                                                                # STEP 2
ACTION: int3 = 10 
int3 = None : <type 'NoneType'>
=> int3 = 10 : <type 'int'>
==================================================
int2 = 18                                                                # STEP 3
ACTION: int2 = 18 
int2 = None : <type 'NoneType'>
=> int2 = 18 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 4
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x104c51050> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.insert(int0)                                                        # STEP 5
ACTION: avl0.insert(int0) 
int0 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104c51050> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([1]) : <type 'set'>
==================================================
int0 = 15                                                                # STEP 6
ACTION: int0 = 15 
int0 = 1 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
avl0.insert(int2)                                                        # STEP 7
ACTION: avl0.insert(int2) 
int2 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104c51050> : <type 'instance'>
avl_REF0 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([1, 18]) : <type 'set'>
==================================================
result = avl0.find(int2)                                                 # STEP 8
ACTION: result = avl0.find(int2) 
int2 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104c51050> : <type 'instance'>
avl_REF0 = set([1, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
result = avl0.find(int0)                                                 # STEP 9
ACTION: result = avl0.find(int0) 
int0 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104c51050> : <type 'instance'>
avl_REF0 = set([1, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
int0 = 15                                                               # STEP 10
ACTION: int0 = 15 
int0 = 15 : <type 'int'>
==================================================
int2 = 20                                                               # STEP 11
ACTION: int2 = 20 
int2 = 18 : <type 'int'>
=> int2 = 20 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 12
ACTION: avl0.insert(int1) 
int1 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104c51050> : <type 'instance'>
avl_REF0 = set([1, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([1, 18, 19]) : <type 'set'>
==================================================
int1 = 18                                                               # STEP 13
ACTION: int1 = 18 
int1 = 19 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
result = avl0.find(int1)                                                # STEP 14
ACTION: result = avl0.find(int1) 
int1 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104c51050> : <type 'instance'>
avl_REF0 = set([1, 18, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
int1 = 1                                                                # STEP 15
ACTION: int1 = 1 
int1 = 18 : <type 'int'>
=> int1 = 1 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 16
ACTION: avl0.insert(int0) 
int0 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104c51050> : <type 'instance'>
avl_REF0 = set([1, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([1, 18, 19, 15]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 17
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104c51050> : <type 'instance'>
avl_REF0 = set([1, 18, 19, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
result = avl0.find(int1)                                                # STEP 18
ACTION: result = avl0.find(int1) 
int1 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104c51050> : <type 'instance'>
avl_REF0 = set([1, 18, 19, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
int0 = 16                                                               # STEP 19
ACTION: int0 = 16 
int0 = 15 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 20
ACTION: avl0.delete(int2) 
int2 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104c51050> : <type 'instance'>
avl_REF0 = set([1, 18, 19, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int1 = 11                                                               # STEP 21
ACTION: int1 = 11 
int1 = 1 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
int2 = 19                                                               # STEP 22
ACTION: int2 = 19 
int2 = 20 : <type 'int'>
=> int2 = 19 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 23
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x104c46f38> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 24
ACTION: avl2.insert(int1) 
int1 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104c46f38> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([11]) : <type 'set'>
==================================================
int1 = 2                                                                # STEP 25
ACTION: int1 = 2 
int1 = 11 : <type 'int'>
=> int1 = 2 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 26
ACTION: avl0.delete(int1) 
int1 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104c51050> : <type 'instance'>
avl_REF0 = set([1, 18, 19, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
result = avl0.find(int1)                                                # STEP 27
ACTION: result = avl0.find(int1) 
int1 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104c51050> : <type 'instance'>
avl_REF0 = set([1, 18, 19, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
result = avl2.find(int0)                                                # STEP 28
ACTION: result = avl2.find(int0) 
int0 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104c46f38> : <type 'instance'>
avl_REF2 = set([11]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
int0 = 20                                                               # STEP 29
ACTION: int0 = 20 
int0 = 16 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 30
ACTION: avl0.insert(int2) 
int2 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104c51050> : <type 'instance'>
avl_REF0 = set([1, 18, 19, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
int1 = 2                                                                # STEP 31
ACTION: int1 = 2 
int1 = 2 : <type 'int'>
==================================================
result = avl0.find(int3)                                                # STEP 32
ACTION: result = avl0.find(int3) 
int3 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104c51050> : <type 'instance'>
avl_REF0 = set([1, 18, 19, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
int2 = 7                                                                # STEP 33
ACTION: int2 = 7 
int2 = 19 : <type 'int'>
=> int2 = 7 : <type 'int'>
==================================================
int3 = 7                                                                # STEP 34
ACTION: int3 = 7 
int3 = 10 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 35
ACTION: avl2.delete(int0) 
int0 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104c46f38> : <type 'instance'>
avl_REF2 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int0 = 18                                                               # STEP 36
ACTION: int0 = 18 
int0 = 20 : <type 'int'>
=> int0 = 18 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 37
ACTION: avl0.insert(int2) 
int2 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104c51050> : <type 'instance'>
avl_REF0 = set([1, 18, 19, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([7, 1, 18, 19, 15]) : <type 'set'>
==================================================
int2 = 9                                                                # STEP 38
ACTION: int2 = 9 
int2 = 7 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 39
ACTION: avl2.insert(int3) 
int3 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104c46f38> : <type 'instance'>
avl_REF2 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([11, 7]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 40
ACTION: avl2.delete(int3) 
int3 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104c46f38> : <type 'instance'>
avl_REF2 = set([11, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([11]) : <type 'set'>
==================================================
result = avl2.find(int3)                                                # STEP 41
ACTION: result = avl2.find(int3) 
int3 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104c46f38> : <type 'instance'>
avl_REF2 = set([11]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
int3 = 7                                                                # STEP 42
ACTION: int3 = 7 
int3 = 7 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 43
ACTION: avl2.delete(int3) 
int3 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104c46f38> : <type 'instance'>
avl_REF2 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.delete(int3)                                                       # STEP 44
ACTION: avl2.delete(int3) 
int3 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104c46f38> : <type 'instance'>
avl_REF2 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
result = avl2.find(int0)                                                # STEP 45
ACTION: result = avl2.find(int0) 
int0 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104c46f38> : <type 'instance'>
avl_REF2 = set([11]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
int0 = 9                                                                # STEP 46
ACTION: int0 = 9 
int0 = 18 : <type 'int'>
=> int0 = 9 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 47
ACTION: avl2.delete(int2) 
int2 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104c46f38> : <type 'instance'>
avl_REF2 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int2 = 17                                                               # STEP 48
ACTION: int2 = 17 
int2 = 9 : <type 'int'>
=> int2 = 17 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 49
ACTION: avl2.insert(int0) 
int0 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104c46f38> : <type 'instance'>
avl_REF2 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([9, 11]) : <type 'set'>
==================================================
int3 = 9                                                                # STEP 50
ACTION: int3 = 9 
int3 = 7 : <type 'int'>
=> int3 = 9 : <type 'int'>
==================================================
result = avl2.find(int2)                                                # STEP 51
ACTION: result = avl2.find(int2) 
int2 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104c46f38> : <type 'instance'>
avl_REF2 = set([9, 11]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int2 = 10                                                               # STEP 52
ACTION: int2 = 10 
int2 = 17 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
int0 = 17                                                               # STEP 53
ACTION: int0 = 17 
int0 = 9 : <type 'int'>
=> int0 = 17 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 54
ACTION: avl0 = avl.AVLTree() 
avl0 = <avl.AVLTree instance at 0x104c51050> : <type 'instance'>
avl_REF0 = set([7, 1, 18, 19, 15]) : <type 'set'>
=> avl0 = <avl.AVLTree instance at 0x104a71440> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 55
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104a71440> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int3)                                                       # STEP 56
ACTION: avl0.insert(int3) 
int3 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104a71440> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([9]) : <type 'set'>
==================================================
int3 = 1                                                                # STEP 57
ACTION: int3 = 1 
int3 = 9 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 58
ACTION: avl2.insert(int0) 
int0 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104c46f38> : <type 'instance'>
avl_REF2 = set([9, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([9, 11, 17]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 59
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104c46f38> : <type 'instance'>
avl_REF2 = set([9, 11, 17]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl2.find(int0)                                                # STEP 60
ACTION: result = avl2.find(int0) 
int0 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104c46f38> : <type 'instance'>
avl_REF2 = set([9, 11, 17]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
int0 = 15                                                               # STEP 61
ACTION: int0 = 15 
int0 = 17 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 62
ACTION: avl2.delete(int1) 
int1 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104c46f38> : <type 'instance'>
avl_REF2 = set([9, 11, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int1 = 5                                                                # STEP 63
ACTION: int1 = 5 
int1 = 2 : <type 'int'>
=> int1 = 5 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 64
ACTION: avl0.delete(int0) 
int0 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104a71440> : <type 'instance'>
avl_REF0 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
result = avl0.find(int1)                                                # STEP 65
ACTION: result = avl0.find(int1) 
int1 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104a71440> : <type 'instance'>
avl_REF0 = set([9]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
int1 = 11                                                               # STEP 66
ACTION: int1 = 11 
int1 = 5 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 67
ACTION: avl2.insert(int1) 
int1 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104c46f38> : <type 'instance'>
avl_REF2 = set([9, 11, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
result = avl2.find(int2)                                                # STEP 68
ACTION: result = avl2.find(int2) 
int2 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104c46f38> : <type 'instance'>
avl_REF2 = set([9, 11, 17]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl0.delete(int3)                                                       # STEP 69
ACTION: avl0.delete(int3) 
int3 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104a71440> : <type 'instance'>
avl_REF0 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int2 = 3                                                                # STEP 70
ACTION: int2 = 3 
int2 = 10 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 71
ACTION: avl0.delete(int2) 
int2 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104a71440> : <type 'instance'>
avl_REF0 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int2 = 10                                                               # STEP 72
ACTION: int2 = 10 
int2 = 3 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
int1 = 18                                                               # STEP 73
ACTION: int1 = 18 
int1 = 11 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
int3 = 8                                                                # STEP 74
ACTION: int3 = 8 
int3 = 1 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 75
ACTION: avl2.insert(int2) 
int2 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104c46f38> : <type 'instance'>
avl_REF2 = set([9, 11, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([9, 10, 11, 17]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 76
ACTION: avl2.delete(int3) 
int3 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104c46f38> : <type 'instance'>
avl_REF2 = set([9, 10, 11, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int0 = 9                                                                # STEP 77
ACTION: int0 = 9 
int0 = 15 : <type 'int'>
=> int0 = 9 : <type 'int'>
==================================================
result = avl0.find(int1)                                                # STEP 78
ACTION: result = avl0.find(int1) 
int1 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104a71440> : <type 'instance'>
avl_REF0 = set([9]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl0.delete(int0)                                                       # STEP 79
ACTION: avl0.delete(int0) 
int0 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104a71440> : <type 'instance'>
avl_REF0 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
result = avl2.find(int3)                                                # STEP 80
ACTION: result = avl2.find(int3) 
int3 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104c46f38> : <type 'instance'>
avl_REF2 = set([9, 10, 11, 17]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
int0 = 19                                                               # STEP 81
ACTION: int0 = 19 
int0 = 9 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 82
ACTION: avl2.insert(int2) 
int2 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104c46f38> : <type 'instance'>
avl_REF2 = set([9, 10, 11, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
int3 = 17                                                               # STEP 83
ACTION: int3 = 17 
int3 = 8 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
int2 = 3                                                                # STEP 84
ACTION: int2 = 3 
int2 = 10 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 85
ACTION: avl0.insert(int0) 
int0 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104a71440> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([19]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 86
ACTION: avl2.delete(int3) 
int3 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104c46f38> : <type 'instance'>
avl_REF2 = set([9, 10, 11, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([9, 10, 11]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104a78680>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #4 STEP #0 (0:00:31.042766) Fri Apr 28 07:17:36 2017 [ 116 stmts 155 branches ]
  4 [2:0]
-- < 3 [1:1]
---- < 2 [0:0] L
-- > 16 [1:0]
---- < 10 [0:0] L
---- > 17 [0:0] L
set([2, 3, 4, 10, 16, 17])
  12 [2:0]
-- < 4 [1:0]
---- < 3 [0:0] L
---- > 10 [0:0] L
-- > 17 [1:0]
---- < 15 [0:0] L
---- > 18 [0:0] L
set([3, 4, 10, 12, 15, 17, 18])
  15 [3:1]
-- < 5 [2:0]
---- < 3 [1:1]
------ < 1 [0:0] L
---- > 6 [1:-1]
------ > 10 [0:0] L
-- > 19 [1:1]
---- < 18 [0:0] L
set([1, 3, 5, 6, 10, 15, 18, 19])
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 31
STOPPING TESTING DUE TO TIMEOUT
8.44927044452 PERCENT COVERED
60.2044758797 TOTAL RUNTIME
7 EXECUTED
618 TOTAL TEST OPERATIONS
26.2068669796 TIME SPENT EXECUTING TEST OPERATIONS
0.0226676464081 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
26.3721618652 TIME SPENT CHECKING PROPERTIES
52.5790288448 TOTAL TIME SPENT RUNNING SUT
0.00429606437683 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int1 = 19                                                                # STEP 0
int0 = 1                                                                 # STEP 1
int3 = 10                                                                # STEP 2
int2 = 18                                                                # STEP 3
avl0 = avl.AVLTree()                                                     # STEP 4
avl0.insert(int0)                                                        # STEP 5
int0 = 15                                                                # STEP 6
avl0.insert(int2)                                                        # STEP 7
result = avl0.find(int2)                                                 # STEP 8
result = avl0.find(int0)                                                 # STEP 9
int0 = 15                                                               # STEP 10
int2 = 20                                                               # STEP 11
avl0.insert(int1)                                                       # STEP 12
int1 = 18                                                               # STEP 13
result = avl0.find(int1)                                                # STEP 14
int1 = 1                                                                # STEP 15
avl0.insert(int0)                                                       # STEP 16
result = avl0.inorder()                                                 # STEP 17
result = avl0.find(int1)                                                # STEP 18
int0 = 16                                                               # STEP 19
avl0.delete(int2)                                                       # STEP 20
int1 = 11                                                               # STEP 21
int2 = 19                                                               # STEP 22
avl2 = avl.AVLTree()                                                    # STEP 23
avl2.insert(int1)                                                       # STEP 24
int1 = 2                                                                # STEP 25
avl0.delete(int1)                                                       # STEP 26
result = avl0.find(int1)                                                # STEP 27
result = avl2.find(int0)                                                # STEP 28
int0 = 20                                                               # STEP 29
avl0.insert(int2)                                                       # STEP 30
int1 = 2                                                                # STEP 31
result = avl0.find(int3)                                                # STEP 32
int2 = 7                                                                # STEP 33
int3 = 7                                                                # STEP 34
avl2.delete(int0)                                                       # STEP 35
int0 = 18                                                               # STEP 36
avl0.insert(int2)                                                       # STEP 37
int2 = 9                                                                # STEP 38
avl2.insert(int3)                                                       # STEP 39
avl2.delete(int3)                                                       # STEP 40
result = avl2.find(int3)                                                # STEP 41
int3 = 7                                                                # STEP 42
avl2.delete(int3)                                                       # STEP 43
avl2.delete(int3)                                                       # STEP 44
result = avl2.find(int0)                                                # STEP 45
int0 = 9                                                                # STEP 46
avl2.delete(int2)                                                       # STEP 47
int2 = 17                                                               # STEP 48
avl2.insert(int0)                                                       # STEP 49
int3 = 9                                                                # STEP 50
result = avl2.find(int2)                                                # STEP 51
int2 = 10                                                               # STEP 52
int0 = 17                                                               # STEP 53
avl0 = avl.AVLTree()                                                    # STEP 54
result = avl0.inorder()                                                 # STEP 55
avl0.insert(int3)                                                       # STEP 56
int3 = 1                                                                # STEP 57
avl2.insert(int0)                                                       # STEP 58
result = avl2.inorder()                                                 # STEP 59
result = avl2.find(int0)                                                # STEP 60
int0 = 15                                                               # STEP 61
avl2.delete(int1)                                                       # STEP 62
int1 = 5                                                                # STEP 63
avl0.delete(int0)                                                       # STEP 64
result = avl0.find(int1)                                                # STEP 65
int1 = 11                                                               # STEP 66
avl2.insert(int1)                                                       # STEP 67
result = avl2.find(int2)                                                # STEP 68
avl0.delete(int3)                                                       # STEP 69
int2 = 3                                                                # STEP 70
avl0.delete(int2)                                                       # STEP 71
int2 = 10                                                               # STEP 72
int1 = 18                                                               # STEP 73
int3 = 8                                                                # STEP 74
avl2.insert(int2)                                                       # STEP 75
avl2.delete(int3)                                                       # STEP 76
int0 = 9                                                                # STEP 77
result = avl0.find(int1)                                                # STEP 78
avl0.delete(int0)                                                       # STEP 79
result = avl2.find(int3)                                                # STEP 80
int0 = 19                                                               # STEP 81
avl2.insert(int2)                                                       # STEP 82
int3 = 17                                                               # STEP 83
int2 = 3                                                                # STEP 84
avl0.insert(int0)                                                       # STEP 85
avl2.delete(int3)                                                       # STEP 86
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104a78680>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
212 BRANCHES COVERED
160 STATEMENTS COVERED

Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.478.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104a09d40>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 48 steps

SAVING TEST AS failure.478.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
avl2 = avl.AVLTree()                                                     # STEP 0
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x104a23ef0> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 1
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x104cf1f80> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int3 = 7                                                                 # STEP 2
ACTION: int3 = 7 
int3 = None : <type 'NoneType'>
=> int3 = 7 : <type 'int'>
==================================================
result = avl2.inorder()                                                  # STEP 3
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104a23ef0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int0 = 2                                                                 # STEP 4
ACTION: int0 = 2 
int0 = None : <type 'NoneType'>
=> int0 = 2 : <type 'int'>
==================================================
result = avl2.inorder()                                                  # STEP 5
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104a23ef0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl1.insert(int0)                                                        # STEP 6
ACTION: avl1.insert(int0) 
int0 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104cf1f80> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([2]) : <type 'set'>
==================================================
avl1.delete(int3)                                                        # STEP 7
ACTION: avl1.delete(int3) 
int3 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104cf1f80> : <type 'instance'>
avl_REF1 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl2.insert(int3)                                                        # STEP 8
ACTION: avl2.insert(int3) 
int3 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a23ef0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([7]) : <type 'set'>
==================================================
avl1.insert(int3)                                                        # STEP 9
ACTION: avl1.insert(int3) 
int3 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104cf1f80> : <type 'instance'>
avl_REF1 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([2, 7]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 10
ACTION: avl2.delete(int0) 
int0 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a23ef0> : <type 'instance'>
avl_REF2 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int2 = 2                                                                # STEP 11
ACTION: int2 = 2 
int2 = None : <type 'NoneType'>
=> int2 = 2 : <type 'int'>
==================================================
int0 = 13                                                               # STEP 12
ACTION: int0 = 13 
int0 = 2 : <type 'int'>
=> int0 = 13 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 13
ACTION: avl1.insert(int0) 
int0 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104cf1f80> : <type 'instance'>
avl_REF1 = set([2, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([2, 13, 7]) : <type 'set'>
==================================================
int3 = 14                                                               # STEP 14
ACTION: int3 = 14 
int3 = 7 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 15
ACTION: avl1.insert(int0) 
int0 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104cf1f80> : <type 'instance'>
avl_REF1 = set([2, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1 == avl1                                                            # STEP 16
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x104cf1f80> : <type 'instance'>
avl_REF1 = set([2, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.delete(int0)                                                       # STEP 17
ACTION: avl1.delete(int0) 
int0 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104cf1f80> : <type 'instance'>
avl_REF1 = set([2, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([2, 7]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 18
ACTION: avl1.delete(int3) 
int3 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104cf1f80> : <type 'instance'>
avl_REF1 = set([2, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl2.insert(int3)                                                       # STEP 19
ACTION: avl2.insert(int3) 
int3 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a23ef0> : <type 'instance'>
avl_REF2 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([14, 7]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 20
ACTION: avl2.delete(int0) 
int0 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a23ef0> : <type 'instance'>
avl_REF2 = set([14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.insert(int2)                                                       # STEP 21
ACTION: avl2.insert(int2) 
int2 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a23ef0> : <type 'instance'>
avl_REF2 = set([14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([2, 14, 7]) : <type 'set'>
==================================================
int1 = 9                                                                # STEP 22
ACTION: int1 = 9 
int1 = None : <type 'NoneType'>
=> int1 = 9 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 23
ACTION: avl1.insert(int3) 
int3 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104cf1f80> : <type 'instance'>
avl_REF1 = set([2, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([2, 14, 7]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 24
ACTION: avl1.delete(int3) 
int3 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104cf1f80> : <type 'instance'>
avl_REF1 = set([2, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([2, 7]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 25
ACTION: avl2.delete(int3) 
int3 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a23ef0> : <type 'instance'>
avl_REF2 = set([2, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([2, 7]) : <type 'set'>
==================================================
result = avl1.find(int1)                                                # STEP 26
ACTION: result = avl1.find(int1) 
int1 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104cf1f80> : <type 'instance'>
avl_REF1 = set([2, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl2 == avl2                                                            # STEP 27
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x104a23ef0> : <type 'instance'>
avl_REF2 = set([2, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl1.insert(int1)                                                       # STEP 28
ACTION: avl1.insert(int1) 
int1 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104cf1f80> : <type 'instance'>
avl_REF1 = set([2, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([9, 2, 7]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 29
ACTION: avl1.delete(int3) 
int3 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104cf1f80> : <type 'instance'>
avl_REF1 = set([9, 2, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl2.insert(int3)                                                       # STEP 30
ACTION: avl2.insert(int3) 
int3 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a23ef0> : <type 'instance'>
avl_REF2 = set([2, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([2, 14, 7]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 31
ACTION: avl1.delete(int2) 
int2 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104cf1f80> : <type 'instance'>
avl_REF1 = set([9, 2, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([9, 7]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 32
ACTION: avl1.delete(int2) 
int2 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104cf1f80> : <type 'instance'>
avl_REF1 = set([9, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.delete(int0)                                                       # STEP 33
ACTION: avl1.delete(int0) 
int0 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104cf1f80> : <type 'instance'>
avl_REF1 = set([9, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl2.delete(int0)                                                       # STEP 34
ACTION: avl2.delete(int0) 
int0 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a23ef0> : <type 'instance'>
avl_REF2 = set([2, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.insert(int3)                                                       # STEP 35
ACTION: avl2.insert(int3) 
int3 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a23ef0> : <type 'instance'>
avl_REF2 = set([2, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
avl1.delete(int2)                                                       # STEP 36
ACTION: avl1.delete(int2) 
int2 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104cf1f80> : <type 'instance'>
avl_REF1 = set([9, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.delete(int1)                                                       # STEP 37
ACTION: avl1.delete(int1) 
int1 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104cf1f80> : <type 'instance'>
avl_REF1 = set([9, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([7]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 38
ACTION: avl2.insert(int0) 
int0 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a23ef0> : <type 'instance'>
avl_REF2 = set([2, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([2, 13, 14, 7]) : <type 'set'>
==================================================
int3 = 15                                                               # STEP 39
ACTION: int3 = 15 
int3 = 14 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 40
ACTION: avl1.insert(int3) 
int3 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104cf1f80> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([7, 15]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 41
ACTION: avl1.delete(int3) 
int3 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104cf1f80> : <type 'instance'>
avl_REF1 = set([7, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([7]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 42
ACTION: avl1.insert(int1) 
int1 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104cf1f80> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([7, 9]) : <type 'set'>
==================================================
result = avl1.find(int1)                                                # STEP 43
ACTION: result = avl1.find(int1) 
int1 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104cf1f80> : <type 'instance'>
avl_REF1 = set([7, 9]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl2.insert(int3)                                                       # STEP 44
ACTION: avl2.insert(int3) 
int3 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a23ef0> : <type 'instance'>
avl_REF2 = set([2, 13, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([2, 15, 13, 14, 7]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 45
ACTION: avl1.delete(int0) 
int0 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104cf1f80> : <type 'instance'>
avl_REF1 = set([7, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl2.delete(int0)                                                       # STEP 46
ACTION: avl2.delete(int0) 
int0 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a23ef0> : <type 'instance'>
avl_REF2 = set([2, 15, 13, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([2, 15, 14, 7]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 47
ACTION: avl2.delete(int2) 
int2 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a23ef0> : <type 'instance'>
avl_REF2 = set([2, 15, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([15, 14, 7]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104a2cc20>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10591b320>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
Original test has 89 steps

SAVING TEST AS failure.478.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 16                                                                # STEP 0
ACTION: int2 = 16 
int2 = None : <type 'NoneType'>
=> int2 = 16 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 1
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x104cf1200> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int3 = 11                                                                # STEP 2
ACTION: int3 = 11 
int3 = None : <type 'NoneType'>
=> int3 = 11 : <type 'int'>
==================================================
avl0.insert(int2)                                                        # STEP 3
ACTION: avl0.insert(int2) 
int2 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104cf1200> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([16]) : <type 'set'>
==================================================
avl0.insert(int3)                                                        # STEP 4
ACTION: avl0.insert(int3) 
int3 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104cf1200> : <type 'instance'>
avl_REF0 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([16, 11]) : <type 'set'>
==================================================
result = avl0.find(int3)                                                 # STEP 5
ACTION: result = avl0.find(int3) 
int3 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104cf1200> : <type 'instance'>
avl_REF0 = set([16, 11]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
avl0.delete(int3)                                                        # STEP 6
ACTION: avl0.delete(int3) 
int3 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104cf1200> : <type 'instance'>
avl_REF0 = set([16, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([16]) : <type 'set'>
==================================================
avl0.insert(int2)                                                        # STEP 7
ACTION: avl0.insert(int2) 
int2 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104cf1200> : <type 'instance'>
avl_REF0 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl0.delete(int3)                                                        # STEP 8
ACTION: avl0.delete(int3) 
int3 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104cf1200> : <type 'instance'>
avl_REF0 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.delete(int3)                                                        # STEP 9
ACTION: avl0.delete(int3) 
int3 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104cf1200> : <type 'instance'>
avl_REF0 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.delete(int3)                                                       # STEP 10
ACTION: avl0.delete(int3) 
int3 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104cf1200> : <type 'instance'>
avl_REF0 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.insert(int3)                                                       # STEP 11
ACTION: avl0.insert(int3) 
int3 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104cf1200> : <type 'instance'>
avl_REF0 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([16, 11]) : <type 'set'>
==================================================
int1 = 16                                                               # STEP 12
ACTION: int1 = 16 
int1 = None : <type 'NoneType'>
=> int1 = 16 : <type 'int'>
==================================================
int3 = 12                                                               # STEP 13
ACTION: int3 = 12 
int3 = 11 : <type 'int'>
=> int3 = 12 : <type 'int'>
==================================================
result = avl0.find(int3)                                                # STEP 14
ACTION: result = avl0.find(int3) 
int3 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104cf1200> : <type 'instance'>
avl_REF0 = set([16, 11]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
avl0.insert(int3)                                                       # STEP 15
ACTION: avl0.insert(int3) 
int3 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104cf1200> : <type 'instance'>
avl_REF0 = set([16, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([16, 11, 12]) : <type 'set'>
==================================================
int0 = 15                                                               # STEP 16
ACTION: int0 = 15 
int0 = None : <type 'NoneType'>
=> int0 = 15 : <type 'int'>
==================================================
int3 = 14                                                               # STEP 17
ACTION: int3 = 14 
int3 = 12 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 18
ACTION: avl0.insert(int3) 
int3 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104cf1200> : <type 'instance'>
avl_REF0 = set([16, 11, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([16, 11, 12, 14]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 19
ACTION: avl0.delete(int0) 
int0 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104cf1200> : <type 'instance'>
avl_REF0 = set([16, 11, 12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.delete(int3)                                                       # STEP 20
ACTION: avl0.delete(int3) 
int3 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104cf1200> : <type 'instance'>
avl_REF0 = set([16, 11, 12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([16, 11, 12]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 21
ACTION: avl0.insert(int0) 
int0 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104cf1200> : <type 'instance'>
avl_REF0 = set([16, 11, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([16, 11, 12, 15]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 22
ACTION: avl0.insert(int1) 
int1 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104cf1200> : <type 'instance'>
avl_REF0 = set([16, 11, 12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl0.delete(int0)                                                       # STEP 23
ACTION: avl0.delete(int0) 
int0 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104cf1200> : <type 'instance'>
avl_REF0 = set([16, 11, 12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([16, 11, 12]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 24
ACTION: avl0.delete(int1) 
int1 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104cf1200> : <type 'instance'>
avl_REF0 = set([16, 11, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([11, 12]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 25
ACTION: avl0.insert(int0) 
int0 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104cf1200> : <type 'instance'>
avl_REF0 = set([11, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([11, 12, 15]) : <type 'set'>
==================================================
int1 = 19                                                               # STEP 26
ACTION: int1 = 19 
int1 = 16 : <type 'int'>
=> int1 = 19 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 27
ACTION: avl0.delete(int1) 
int1 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104cf1200> : <type 'instance'>
avl_REF0 = set([11, 12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.delete(int0)                                                       # STEP 28
ACTION: avl0.delete(int0) 
int0 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104cf1200> : <type 'instance'>
avl_REF0 = set([11, 12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([11, 12]) : <type 'set'>
==================================================
int1 = 10                                                               # STEP 29
ACTION: int1 = 10 
int1 = 19 : <type 'int'>
=> int1 = 10 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 30
ACTION: avl0.insert(int1) 
int1 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104cf1200> : <type 'instance'>
avl_REF0 = set([11, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([10, 11, 12]) : <type 'set'>
==================================================
int1 = 1                                                                # STEP 31
ACTION: int1 = 1 
int1 = 10 : <type 'int'>
=> int1 = 1 : <type 'int'>
==================================================
int2 = 1                                                                # STEP 32
ACTION: int2 = 1 
int2 = 16 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 33
ACTION: avl0.insert(int2) 
int2 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104cf1200> : <type 'instance'>
avl_REF0 = set([10, 11, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([1, 10, 11, 12]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 34
ACTION: avl0.insert(int0) 
int0 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104cf1200> : <type 'instance'>
avl_REF0 = set([1, 10, 11, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([1, 10, 11, 12, 15]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 35
ACTION: avl0.delete(int1) 
int1 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104cf1200> : <type 'instance'>
avl_REF0 = set([1, 10, 11, 12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([10, 11, 12, 15]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 36
ACTION: avl0.insert(int1) 
int1 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104cf1200> : <type 'instance'>
avl_REF0 = set([10, 11, 12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([1, 10, 11, 12, 15]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 37
ACTION: avl0.delete(int2) 
int2 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104cf1200> : <type 'instance'>
avl_REF0 = set([1, 10, 11, 12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([10, 11, 12, 15]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 38
ACTION: avl0.insert(int2) 
int2 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104cf1200> : <type 'instance'>
avl_REF0 = set([10, 11, 12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([1, 10, 11, 12, 15]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 39
ACTION: avl0.insert(int0) 
int0 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104cf1200> : <type 'instance'>
avl_REF0 = set([1, 10, 11, 12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
avl0.insert(int1)                                                       # STEP 40
ACTION: avl0.insert(int1) 
int1 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104cf1200> : <type 'instance'>
avl_REF0 = set([1, 10, 11, 12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
result = avl0.inorder()                                                 # STEP 41
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104cf1200> : <type 'instance'>
avl_REF0 = set([1, 10, 11, 12, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int3)                                                       # STEP 42
ACTION: avl0.insert(int3) 
int3 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104cf1200> : <type 'instance'>
avl_REF0 = set([1, 10, 11, 12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([1, 10, 11, 12, 14, 15]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 43
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104cf1200> : <type 'instance'>
avl_REF0 = set([1, 10, 11, 12, 14, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.delete(int2)                                                       # STEP 44
ACTION: avl0.delete(int2) 
int2 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104cf1200> : <type 'instance'>
avl_REF0 = set([1, 10, 11, 12, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([10, 11, 12, 14, 15]) : <type 'set'>
==================================================
int2 = 13                                                               # STEP 45
ACTION: int2 = 13 
int2 = 1 : <type 'int'>
=> int2 = 13 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 46
ACTION: avl0.delete(int2) 
int2 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104cf1200> : <type 'instance'>
avl_REF0 = set([10, 11, 12, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
result = avl0.inorder()                                                 # STEP 47
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104cf1200> : <type 'instance'>
avl_REF0 = set([10, 11, 12, 14, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.delete(int3)                                                       # STEP 48
ACTION: avl0.delete(int3) 
int3 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104cf1200> : <type 'instance'>
avl_REF0 = set([10, 11, 12, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([10, 11, 12, 15]) : <type 'set'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 49
ACTION: avl0 = avl.AVLTree() 
avl0 = <avl.AVLTree instance at 0x104cf1200> : <type 'instance'>
avl_REF0 = set([10, 11, 12, 15]) : <type 'set'>
=> avl0 = <avl.AVLTree instance at 0x1058ee5f0> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 50
ACTION: avl0.delete(int0) 
int0 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058ee5f0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int1 = 18                                                               # STEP 51
ACTION: int1 = 18 
int1 = 1 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 52
ACTION: avl0.delete(int2) 
int2 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058ee5f0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.insert(int1)                                                       # STEP 53
ACTION: avl0.insert(int1) 
int1 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058ee5f0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([18]) : <type 'set'>
==================================================
int2 = 3                                                                # STEP 54
ACTION: int2 = 3 
int2 = 13 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
result = avl0.find(int1)                                                # STEP 55
ACTION: result = avl0.find(int1) 
int1 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058ee5f0> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl0.insert(int2)                                                       # STEP 56
ACTION: avl0.insert(int2) 
int2 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058ee5f0> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([18, 3]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 57
ACTION: avl0.insert(int2) 
int2 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058ee5f0> : <type 'instance'>
avl_REF0 = set([18, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
result = avl0.inorder()                                                 # STEP 58
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x1058ee5f0> : <type 'instance'>
avl_REF0 = set([18, 3]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl2 = avl.AVLTree()                                                    # STEP 59
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x104f13ea8> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int2 = 12                                                               # STEP 60
ACTION: int2 = 12 
int2 = 3 : <type 'int'>
=> int2 = 12 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 61
ACTION: avl0.insert(int1) 
int1 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058ee5f0> : <type 'instance'>
avl_REF0 = set([18, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl2.insert(int3)                                                       # STEP 62
ACTION: avl2.insert(int3) 
int3 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f13ea8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([14]) : <type 'set'>
==================================================
avl2 == avl2                                                            # STEP 63
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x104f13ea8> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl0 == avl2                                                            # STEP 64
ACTION: avl0 == avl2 
avl0 = <avl.AVLTree instance at 0x1058ee5f0> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x104f13ea8> : <type 'instance'>
avl_REF0 = set([18, 3]) : <type 'set'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
avl2.delete(int2)                                                       # STEP 65
ACTION: avl2.delete(int2) 
int2 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f13ea8> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int1 = 4                                                                # STEP 66
ACTION: int1 = 4 
int1 = 18 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 67
ACTION: avl0.delete(int1) 
int1 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058ee5f0> : <type 'instance'>
avl_REF0 = set([18, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
result = avl0.inorder()                                                 # STEP 68
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x1058ee5f0> : <type 'instance'>
avl_REF0 = set([18, 3]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
result = avl2.find(int3)                                                # STEP 69
ACTION: result = avl2.find(int3) 
int3 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f13ea8> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl2.delete(int2)                                                       # STEP 70
ACTION: avl2.delete(int2) 
int2 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f13ea8> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
result = avl0.find(int0)                                                # STEP 71
ACTION: result = avl0.find(int0) 
int0 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058ee5f0> : <type 'instance'>
avl_REF0 = set([18, 3]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
int3 = 19                                                               # STEP 72
ACTION: int3 = 19 
int3 = 14 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 73
ACTION: avl2.insert(int0) 
int0 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f13ea8> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([14, 15]) : <type 'set'>
==================================================
result = avl0.find(int0)                                                # STEP 74
ACTION: result = avl0.find(int0) 
int0 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058ee5f0> : <type 'instance'>
avl_REF0 = set([18, 3]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
avl2.insert(int2)                                                       # STEP 75
ACTION: avl2.insert(int2) 
int2 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f13ea8> : <type 'instance'>
avl_REF2 = set([14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([12, 14, 15]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 76
ACTION: avl2.insert(int2) 
int2 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f13ea8> : <type 'instance'>
avl_REF2 = set([12, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl0.insert(int0)                                                       # STEP 77
ACTION: avl0.insert(int0) 
int0 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058ee5f0> : <type 'instance'>
avl_REF0 = set([18, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([18, 3, 15]) : <type 'set'>
==================================================
int1 = 15                                                               # STEP 78
ACTION: int1 = 15 
int1 = 4 : <type 'int'>
=> int1 = 15 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 79
ACTION: avl0.insert(int3) 
int3 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058ee5f0> : <type 'instance'>
avl_REF0 = set([18, 3, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([19, 18, 3, 15]) : <type 'set'>
==================================================
result = avl0.find(int1)                                                # STEP 80
ACTION: result = avl0.find(int1) 
int1 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058ee5f0> : <type 'instance'>
avl_REF0 = set([19, 18, 3, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl0.insert(int0)                                                       # STEP 81
ACTION: avl0.insert(int0) 
int0 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058ee5f0> : <type 'instance'>
avl_REF0 = set([19, 18, 3, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
avl2.insert(int1)                                                       # STEP 82
ACTION: avl2.insert(int1) 
int1 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f13ea8> : <type 'instance'>
avl_REF2 = set([12, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl0.insert(int2)                                                       # STEP 83
ACTION: avl0.insert(int2) 
int2 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058ee5f0> : <type 'instance'>
avl_REF0 = set([19, 18, 3, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([19, 18, 3, 12, 15]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 84
ACTION: avl2.delete(int2) 
int2 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f13ea8> : <type 'instance'>
avl_REF2 = set([12, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([14, 15]) : <type 'set'>
==================================================
result = avl2.find(int2)                                                # STEP 85
ACTION: result = avl2.find(int2) 
int2 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f13ea8> : <type 'instance'>
avl_REF2 = set([14, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl0.delete(int0)                                                       # STEP 86
ACTION: avl0.delete(int0) 
int0 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058ee5f0> : <type 'instance'>
avl_REF0 = set([19, 18, 3, 12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([19, 18, 3, 12]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 87
ACTION: avl2.insert(int2) 
int2 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f13ea8> : <type 'instance'>
avl_REF2 = set([14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([12, 14, 15]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 88
ACTION: avl0.delete(int3) 
int3 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058ee5f0> : <type 'instance'>
avl_REF0 = set([19, 18, 3, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([18, 3, 12]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104ad0ab8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
TEST #3 STEP #96 (0:00:30.016637) Fri Apr 28 06:26:38 2017 [ 147 stmts 194 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104acba70>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 18 steps

SAVING TEST AS failure.478.test.2
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 7                                                                 # STEP 0
ACTION: int1 = 7 
int1 = None : <type 'NoneType'>
=> int1 = 7 : <type 'int'>
==================================================
int2 = 5                                                                 # STEP 1
ACTION: int2 = 5 
int2 = None : <type 'NoneType'>
=> int2 = 5 : <type 'int'>
==================================================
int3 = 12                                                                # STEP 2
ACTION: int3 = 12 
int3 = None : <type 'NoneType'>
=> int3 = 12 : <type 'int'>
==================================================
int0 = 13                                                                # STEP 3
ACTION: int0 = 13 
int0 = None : <type 'NoneType'>
=> int0 = 13 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x104ad4200> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.insert(int3)                                                        # STEP 5
ACTION: avl1.insert(int3) 
int3 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104ad4200> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([12]) : <type 'set'>
==================================================
int3 = 17                                                                # STEP 6
ACTION: int3 = 17 
int3 = 12 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
avl1.delete(int0)                                                        # STEP 7
ACTION: avl1.delete(int0) 
int0 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104ad4200> : <type 'instance'>
avl_REF1 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.delete(int0)                                                        # STEP 8
ACTION: avl1.delete(int0) 
int0 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104ad4200> : <type 'instance'>
avl_REF1 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.delete(int2)                                                        # STEP 9
ACTION: avl1.delete(int2) 
int2 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104ad4200> : <type 'instance'>
avl_REF1 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
result = avl1.find(int3)                                                # STEP 10
ACTION: result = avl1.find(int3) 
int3 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104ad4200> : <type 'instance'>
avl_REF1 = set([12]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl1.delete(int2)                                                       # STEP 11
ACTION: avl1.delete(int2) 
int2 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104ad4200> : <type 'instance'>
avl_REF1 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.insert(int1)                                                       # STEP 12
ACTION: avl1.insert(int1) 
int1 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104ad4200> : <type 'instance'>
avl_REF1 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([12, 7]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 13
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104ad4200> : <type 'instance'>
avl_REF1 = set([12, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int0)                                                       # STEP 14
ACTION: avl1.insert(int0) 
int0 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104ad4200> : <type 'instance'>
avl_REF1 = set([12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([12, 13, 7]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 15
ACTION: avl1.insert(int2) 
int2 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104ad4200> : <type 'instance'>
avl_REF1 = set([12, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([5, 12, 13, 7]) : <type 'set'>
==================================================
result = avl1.find(int3)                                                # STEP 16
ACTION: result = avl1.find(int3) 
int3 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104ad4200> : <type 'instance'>
avl_REF1 = set([5, 12, 13, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl1.delete(int0)                                                       # STEP 17
ACTION: avl1.delete(int0) 
int0 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104ad4200> : <type 'instance'>
avl_REF1 = set([5, 12, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([5, 12, 7]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104af87e8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 3 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104ae9b00>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 66 steps

SAVING TEST AS failure.478.test.3
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 6                                                                 # STEP 0
ACTION: int1 = 6 
int1 = None : <type 'NoneType'>
=> int1 = 6 : <type 'int'>
==================================================
int2 = 12                                                                # STEP 1
ACTION: int2 = 12 
int2 = None : <type 'NoneType'>
=> int2 = 12 : <type 'int'>
==================================================
int3 = 9                                                                 # STEP 2
ACTION: int3 = 9 
int3 = None : <type 'NoneType'>
=> int3 = 9 : <type 'int'>
==================================================
int0 = 13                                                                # STEP 3
ACTION: int0 = 13 
int0 = None : <type 'NoneType'>
=> int0 = 13 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x104af01b8> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.delete(int2)                                                        # STEP 5
ACTION: avl1.delete(int2) 
int2 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104af01b8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int2 = 9                                                                 # STEP 6
ACTION: int2 = 9 
int2 = 12 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
avl1.delete(int2)                                                        # STEP 7
ACTION: avl1.delete(int2) 
int2 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104af01b8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int2 = 13                                                                # STEP 8
ACTION: int2 = 13 
int2 = 9 : <type 'int'>
=> int2 = 13 : <type 'int'>
==================================================
result = avl1.inorder()                                                  # STEP 9
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104af01b8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
result = avl1.find(int2)                                                # STEP 10
ACTION: result = avl1.find(int2) 
int2 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104af01b8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl1.delete(int1)                                                       # STEP 11
ACTION: avl1.delete(int1) 
int1 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104af01b8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int1 = 20                                                               # STEP 12
ACTION: int1 = 20 
int1 = 6 : <type 'int'>
=> int1 = 20 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 13
ACTION: avl1.delete(int0) 
int0 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104af01b8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int2 = 17                                                               # STEP 14
ACTION: int2 = 17 
int2 = 13 : <type 'int'>
=> int2 = 17 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 15
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104af01b8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int0 = 2                                                                # STEP 16
ACTION: int0 = 2 
int0 = 13 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 17
ACTION: avl1.insert(int2) 
int2 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104af01b8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([17]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 18
ACTION: avl1.delete(int2) 
int2 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104af01b8> : <type 'instance'>
avl_REF1 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 19
ACTION: avl1.delete(int3) 
int3 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104af01b8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.insert(int3)                                                       # STEP 20
ACTION: avl1.insert(int3) 
int3 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104af01b8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([9]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 21
ACTION: avl1.delete(int3) 
int3 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104af01b8> : <type 'instance'>
avl_REF1 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 22
ACTION: avl1.delete(int3) 
int3 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104af01b8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int2 = 11                                                               # STEP 23
ACTION: int2 = 11 
int2 = 17 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
int3 = 10                                                               # STEP 24
ACTION: int3 = 10 
int3 = 9 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 25
ACTION: avl1.delete(int2) 
int2 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104af01b8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
result = avl1.inorder()                                                 # STEP 26
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104af01b8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int3)                                                       # STEP 27
ACTION: avl1.insert(int3) 
int3 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104af01b8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([10]) : <type 'set'>
==================================================
int3 = 4                                                                # STEP 28
ACTION: int3 = 4 
int3 = 10 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
int2 = 11                                                               # STEP 29
ACTION: int2 = 11 
int2 = 11 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 30
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104af01b8> : <type 'instance'>
avl_REF1 = set([10]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int2)                                                       # STEP 31
ACTION: avl1.insert(int2) 
int2 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104af01b8> : <type 'instance'>
avl_REF1 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([10, 11]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 32
ACTION: avl1.insert(int2) 
int2 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104af01b8> : <type 'instance'>
avl_REF1 = set([10, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
int2 = 2                                                                # STEP 33
ACTION: int2 = 2 
int2 = 11 : <type 'int'>
=> int2 = 2 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 34
ACTION: avl1.insert(int0) 
int0 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104af01b8> : <type 'instance'>
avl_REF1 = set([10, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([10, 11, 2]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 35
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104af01b8> : <type 'instance'>
avl_REF1 = set([10, 11, 2]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.delete(int3)                                                       # STEP 36
ACTION: avl1.delete(int3) 
int3 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104af01b8> : <type 'instance'>
avl_REF1 = set([10, 11, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
result = avl1.find(int2)                                                # STEP 37
ACTION: result = avl1.find(int2) 
int2 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104af01b8> : <type 'instance'>
avl_REF1 = set([10, 11, 2]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int3 = 20                                                               # STEP 38
ACTION: int3 = 20 
int3 = 4 : <type 'int'>
=> int3 = 20 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 39
ACTION: avl1.insert(int1) 
int1 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104af01b8> : <type 'instance'>
avl_REF1 = set([10, 11, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([10, 11, 20, 2]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 40
ACTION: avl1.delete(int1) 
int1 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104af01b8> : <type 'instance'>
avl_REF1 = set([10, 11, 20, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([10, 11, 2]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 41
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104af01b8> : <type 'instance'>
avl_REF1 = set([10, 11, 2]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int0)                                                       # STEP 42
ACTION: avl1.insert(int0) 
int0 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104af01b8> : <type 'instance'>
avl_REF1 = set([10, 11, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
int1 = 18                                                               # STEP 43
ACTION: int1 = 18 
int1 = 20 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 44
ACTION: avl1.insert(int2) 
int2 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104af01b8> : <type 'instance'>
avl_REF1 = set([10, 11, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
avl1.delete(int1)                                                       # STEP 45
ACTION: avl1.delete(int1) 
int1 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104af01b8> : <type 'instance'>
avl_REF1 = set([10, 11, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.delete(int2)                                                       # STEP 46
ACTION: avl1.delete(int2) 
int2 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104af01b8> : <type 'instance'>
avl_REF1 = set([10, 11, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([10, 11]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 47
ACTION: avl1.insert(int0) 
int0 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104af01b8> : <type 'instance'>
avl_REF1 = set([10, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([10, 11, 2]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 48
ACTION: avl1.insert(int1) 
int1 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104af01b8> : <type 'instance'>
avl_REF1 = set([10, 11, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([2, 10, 11, 18]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 49
ACTION: avl1.insert(int2) 
int2 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104af01b8> : <type 'instance'>
avl_REF1 = set([2, 10, 11, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
avl1.insert(int3)                                                       # STEP 50
ACTION: avl1.insert(int3) 
int3 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104af01b8> : <type 'instance'>
avl_REF1 = set([2, 10, 11, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([2, 10, 11, 18, 20]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 51
ACTION: avl1.insert(int2) 
int2 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104af01b8> : <type 'instance'>
avl_REF1 = set([2, 10, 11, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
int0 = 19                                                               # STEP 52
ACTION: int0 = 19 
int0 = 2 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 53
ACTION: avl1.delete(int0) 
int0 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104af01b8> : <type 'instance'>
avl_REF1 = set([2, 10, 11, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.insert(int0)                                                       # STEP 54
ACTION: avl1.insert(int0) 
int0 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104af01b8> : <type 'instance'>
avl_REF1 = set([2, 10, 11, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([2, 10, 11, 18, 19, 20]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 55
ACTION: avl1.insert(int3) 
int3 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104af01b8> : <type 'instance'>
avl_REF1 = set([2, 10, 11, 18, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
avl1.insert(int2)                                                       # STEP 56
ACTION: avl1.insert(int2) 
int2 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104af01b8> : <type 'instance'>
avl_REF1 = set([2, 10, 11, 18, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
avl1.insert(int0)                                                       # STEP 57
ACTION: avl1.insert(int0) 
int0 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104af01b8> : <type 'instance'>
avl_REF1 = set([2, 10, 11, 18, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.delete(int2)                                                       # STEP 58
ACTION: avl1.delete(int2) 
int2 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104af01b8> : <type 'instance'>
avl_REF1 = set([2, 10, 11, 18, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([10, 11, 18, 19, 20]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 59
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104af01b8> : <type 'instance'>
avl_REF1 = set([10, 11, 18, 19, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1 == avl1                                                            # STEP 60
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x104af01b8> : <type 'instance'>
avl_REF1 = set([10, 11, 18, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.insert(int2)                                                       # STEP 61
ACTION: avl1.insert(int2) 
int2 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104af01b8> : <type 'instance'>
avl_REF1 = set([10, 11, 18, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([2, 10, 11, 18, 19, 20]) : <type 'set'>
==================================================
result = avl1.find(int3)                                                # STEP 62
ACTION: result = avl1.find(int3) 
int3 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104af01b8> : <type 'instance'>
avl_REF1 = set([2, 10, 11, 18, 19, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl1.delete(int1)                                                       # STEP 63
ACTION: avl1.delete(int1) 
int1 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104af01b8> : <type 'instance'>
avl_REF1 = set([2, 10, 11, 18, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([2, 10, 11, 19, 20]) : <type 'set'>
==================================================
avl1 == avl1                                                            # STEP 64
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x104af01b8> : <type 'instance'>
avl_REF1 = set([2, 10, 11, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.delete(int0)                                                       # STEP 65
ACTION: avl1.delete(int0) 
int0 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104af01b8> : <type 'instance'>
avl_REF1 = set([2, 10, 11, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([2, 10, 11, 20]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104af23b0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 4 DISTINCT FAILURES
  11 [3:-1]
-- < 9 [1:1]
---- < 3 [0:0] L
-- > 14 [2:-1]
---- < 12 [0:0] L
---- > 18 [1:1]
------ < 17 [0:0] L
set([3, 9, 11, 12, 14, 17, 18])
  11 [3:-1]
-- < 8 [1:0]
---- < 3 [0:0] L
---- > 9 [0:0] L
-- > 14 [2:-1]
---- < 12 [0:0] L
---- > 17 [1:0]
------ < 16 [0:0] L
------ > 18 [0:0] L
set([3, 8, 9, 11, 12, 14, 16, 17, 18])
  11 [3:0]
-- < 8 [2:1]
---- < 3 [1:1]
------ < 2 [0:0] L
---- > 9 [0:0] L
-- > 14 [2:-1]
---- < 12 [0:0] L
---- > 17 [1:1]
------ < 16 [0:0] L
set([2, 3, 8, 9, 11, 12, 14, 16, 17])
  11 [3:0]
-- < 8 [2:1]
---- < 3 [1:1]
------ < 2 [0:0] L
---- > 9 [0:0] L
-- > 14 [2:-1]
---- < 12 [0:0] L
---- > 17 [1:0]
------ < 16 [0:0] L
------ > 19 [0:0] L
set([2, 3, 8, 9, 11, 12, 14, 16, 17, 19])
  11 [3:0]
-- < 8 [2:1]
---- < 3 [1:1]
------ < 1 [0:0] L
---- > 9 [0:0] L
-- > 14 [2:-1]
---- < 12 [0:0] L
---- > 17 [1:0]
------ < 16 [0:0] L
------ > 19 [0:0] L
set([1, 3, 8, 9, 11, 12, 14, 16, 17, 19])
  11 [3:0]
-- < 8 [2:1]
---- < 3 [1:1]
------ < 1 [0:0] L
---- > 9 [0:0] L
-- > 14 [2:-1]
---- < 12 [0:0] L
---- > 17 [1:0]
------ < 16 [0:0] L
------ > 19 [0:0] L
set([1, 3, 8, 9, 11, 12, 14, 16, 17, 19])
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 14
STOPPING TESTING DUE TO TIMEOUT
8.51713607058 PERCENT COVERED
60.2113711834 TOTAL RUNTIME
8 EXECUTED
535 TOTAL TEST OPERATIONS
21.1997442245 TIME SPENT EXECUTING TEST OPERATIONS
0.056351184845 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
21.2851536274 TIME SPENT CHECKING PROPERTIES
42.4848978519 TOTAL TIME SPENT RUNNING SUT
0.00442934036255 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
4 FAILED
0 REPEATS OF FAILURES
4 ACTUAL DISTINCT FAILURES

FAILURE 0
avl2 = avl.AVLTree()                                                     # STEP 0
avl1 = avl.AVLTree()                                                     # STEP 1
int3 = 7                                                                 # STEP 2
result = avl2.inorder()                                                  # STEP 3
int0 = 2                                                                 # STEP 4
result = avl2.inorder()                                                  # STEP 5
avl1.insert(int0)                                                        # STEP 6
avl1.delete(int3)                                                        # STEP 7
avl2.insert(int3)                                                        # STEP 8
avl1.insert(int3)                                                        # STEP 9
avl2.delete(int0)                                                       # STEP 10
int2 = 2                                                                # STEP 11
int0 = 13                                                               # STEP 12
avl1.insert(int0)                                                       # STEP 13
int3 = 14                                                               # STEP 14
avl1.insert(int0)                                                       # STEP 15
avl1 == avl1                                                            # STEP 16
avl1.delete(int0)                                                       # STEP 17
avl1.delete(int3)                                                       # STEP 18
avl2.insert(int3)                                                       # STEP 19
avl2.delete(int0)                                                       # STEP 20
avl2.insert(int2)                                                       # STEP 21
int1 = 9                                                                # STEP 22
avl1.insert(int3)                                                       # STEP 23
avl1.delete(int3)                                                       # STEP 24
avl2.delete(int3)                                                       # STEP 25
result = avl1.find(int1)                                                # STEP 26
avl2 == avl2                                                            # STEP 27
avl1.insert(int1)                                                       # STEP 28
avl1.delete(int3)                                                       # STEP 29
avl2.insert(int3)                                                       # STEP 30
avl1.delete(int2)                                                       # STEP 31
avl1.delete(int2)                                                       # STEP 32
avl1.delete(int0)                                                       # STEP 33
avl2.delete(int0)                                                       # STEP 34
avl2.insert(int3)                                                       # STEP 35
avl1.delete(int2)                                                       # STEP 36
avl1.delete(int1)                                                       # STEP 37
avl2.insert(int0)                                                       # STEP 38
int3 = 15                                                               # STEP 39
avl1.insert(int3)                                                       # STEP 40
avl1.delete(int3)                                                       # STEP 41
avl1.insert(int1)                                                       # STEP 42
result = avl1.find(int1)                                                # STEP 43
avl2.insert(int3)                                                       # STEP 44
avl1.delete(int0)                                                       # STEP 45
avl2.delete(int0)                                                       # STEP 46
avl2.delete(int2)                                                       # STEP 47
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104a2cc20>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE 1
int2 = 16                                                                # STEP 0
avl0 = avl.AVLTree()                                                     # STEP 1
int3 = 11                                                                # STEP 2
avl0.insert(int2)                                                        # STEP 3
avl0.insert(int3)                                                        # STEP 4
result = avl0.find(int3)                                                 # STEP 5
avl0.delete(int3)                                                        # STEP 6
avl0.insert(int2)                                                        # STEP 7
avl0.delete(int3)                                                        # STEP 8
avl0.delete(int3)                                                        # STEP 9
avl0.delete(int3)                                                       # STEP 10
avl0.insert(int3)                                                       # STEP 11
int1 = 16                                                               # STEP 12
int3 = 12                                                               # STEP 13
result = avl0.find(int3)                                                # STEP 14
avl0.insert(int3)                                                       # STEP 15
int0 = 15                                                               # STEP 16
int3 = 14                                                               # STEP 17
avl0.insert(int3)                                                       # STEP 18
avl0.delete(int0)                                                       # STEP 19
avl0.delete(int3)                                                       # STEP 20
avl0.insert(int0)                                                       # STEP 21
avl0.insert(int1)                                                       # STEP 22
avl0.delete(int0)                                                       # STEP 23
avl0.delete(int1)                                                       # STEP 24
avl0.insert(int0)                                                       # STEP 25
int1 = 19                                                               # STEP 26
avl0.delete(int1)                                                       # STEP 27
avl0.delete(int0)                                                       # STEP 28
int1 = 10                                                               # STEP 29
avl0.insert(int1)                                                       # STEP 30
int1 = 1                                                                # STEP 31
int2 = 1                                                                # STEP 32
avl0.insert(int2)                                                       # STEP 33
avl0.insert(int0)                                                       # STEP 34
avl0.delete(int1)                                                       # STEP 35
avl0.insert(int1)                                                       # STEP 36
avl0.delete(int2)                                                       # STEP 37
avl0.insert(int2)                                                       # STEP 38
avl0.insert(int0)                                                       # STEP 39
avl0.insert(int1)                                                       # STEP 40
result = avl0.inorder()                                                 # STEP 41
avl0.insert(int3)                                                       # STEP 42
result = avl0.inorder()                                                 # STEP 43
avl0.delete(int2)                                                       # STEP 44
int2 = 13                                                               # STEP 45
avl0.delete(int2)                                                       # STEP 46
result = avl0.inorder()                                                 # STEP 47
avl0.delete(int3)                                                       # STEP 48
avl0 = avl.AVLTree()                                                    # STEP 49
avl0.delete(int0)                                                       # STEP 50
int1 = 18                                                               # STEP 51
avl0.delete(int2)                                                       # STEP 52
avl0.insert(int1)                                                       # STEP 53
int2 = 3                                                                # STEP 54
result = avl0.find(int1)                                                # STEP 55
avl0.insert(int2)                                                       # STEP 56
avl0.insert(int2)                                                       # STEP 57
result = avl0.inorder()                                                 # STEP 58
avl2 = avl.AVLTree()                                                    # STEP 59
int2 = 12                                                               # STEP 60
avl0.insert(int1)                                                       # STEP 61
avl2.insert(int3)                                                       # STEP 62
avl2 == avl2                                                            # STEP 63
avl0 == avl2                                                            # STEP 64
avl2.delete(int2)                                                       # STEP 65
int1 = 4                                                                # STEP 66
avl0.delete(int1)                                                       # STEP 67
result = avl0.inorder()                                                 # STEP 68
result = avl2.find(int3)                                                # STEP 69
avl2.delete(int2)                                                       # STEP 70
result = avl0.find(int0)                                                # STEP 71
int3 = 19                                                               # STEP 72
avl2.insert(int0)                                                       # STEP 73
result = avl0.find(int0)                                                # STEP 74
avl2.insert(int2)                                                       # STEP 75
avl2.insert(int2)                                                       # STEP 76
avl0.insert(int0)                                                       # STEP 77
int1 = 15                                                               # STEP 78
avl0.insert(int3)                                                       # STEP 79
result = avl0.find(int1)                                                # STEP 80
avl0.insert(int0)                                                       # STEP 81
avl2.insert(int1)                                                       # STEP 82
avl0.insert(int2)                                                       # STEP 83
avl2.delete(int2)                                                       # STEP 84
result = avl2.find(int2)                                                # STEP 85
avl0.delete(int0)                                                       # STEP 86
avl2.insert(int2)                                                       # STEP 87
avl0.delete(int3)                                                       # STEP 88
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104ad0ab8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE 2
int1 = 7                                                                 # STEP 0
int2 = 5                                                                 # STEP 1
int3 = 12                                                                # STEP 2
int0 = 13                                                                # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
avl1.insert(int3)                                                        # STEP 5
int3 = 17                                                                # STEP 6
avl1.delete(int0)                                                        # STEP 7
avl1.delete(int0)                                                        # STEP 8
avl1.delete(int2)                                                        # STEP 9
result = avl1.find(int3)                                                # STEP 10
avl1.delete(int2)                                                       # STEP 11
avl1.insert(int1)                                                       # STEP 12
result = avl1.inorder()                                                 # STEP 13
avl1.insert(int0)                                                       # STEP 14
avl1.insert(int2)                                                       # STEP 15
result = avl1.find(int3)                                                # STEP 16
avl1.delete(int0)                                                       # STEP 17
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104af87e8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE 3
int1 = 6                                                                 # STEP 0
int2 = 12                                                                # STEP 1
int3 = 9                                                                 # STEP 2
int0 = 13                                                                # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
avl1.delete(int2)                                                        # STEP 5
int2 = 9                                                                 # STEP 6
avl1.delete(int2)                                                        # STEP 7
int2 = 13                                                                # STEP 8
result = avl1.inorder()                                                  # STEP 9
result = avl1.find(int2)                                                # STEP 10
avl1.delete(int1)                                                       # STEP 11
int1 = 20                                                               # STEP 12
avl1.delete(int0)                                                       # STEP 13
int2 = 17                                                               # STEP 14
result = avl1.inorder()                                                 # STEP 15
int0 = 2                                                                # STEP 16
avl1.insert(int2)                                                       # STEP 17
avl1.delete(int2)                                                       # STEP 18
avl1.delete(int3)                                                       # STEP 19
avl1.insert(int3)                                                       # STEP 20
avl1.delete(int3)                                                       # STEP 21
avl1.delete(int3)                                                       # STEP 22
int2 = 11                                                               # STEP 23
int3 = 10                                                               # STEP 24
avl1.delete(int2)                                                       # STEP 25
result = avl1.inorder()                                                 # STEP 26
avl1.insert(int3)                                                       # STEP 27
int3 = 4                                                                # STEP 28
int2 = 11                                                               # STEP 29
result = avl1.inorder()                                                 # STEP 30
avl1.insert(int2)                                                       # STEP 31
avl1.insert(int2)                                                       # STEP 32
int2 = 2                                                                # STEP 33
avl1.insert(int0)                                                       # STEP 34
result = avl1.inorder()                                                 # STEP 35
avl1.delete(int3)                                                       # STEP 36
result = avl1.find(int2)                                                # STEP 37
int3 = 20                                                               # STEP 38
avl1.insert(int1)                                                       # STEP 39
avl1.delete(int1)                                                       # STEP 40
result = avl1.inorder()                                                 # STEP 41
avl1.insert(int0)                                                       # STEP 42
int1 = 18                                                               # STEP 43
avl1.insert(int2)                                                       # STEP 44
avl1.delete(int1)                                                       # STEP 45
avl1.delete(int2)                                                       # STEP 46
avl1.insert(int0)                                                       # STEP 47
avl1.insert(int1)                                                       # STEP 48
avl1.insert(int2)                                                       # STEP 49
avl1.insert(int3)                                                       # STEP 50
avl1.insert(int2)                                                       # STEP 51
int0 = 19                                                               # STEP 52
avl1.delete(int0)                                                       # STEP 53
avl1.insert(int0)                                                       # STEP 54
avl1.insert(int3)                                                       # STEP 55
avl1.insert(int2)                                                       # STEP 56
avl1.insert(int0)                                                       # STEP 57
avl1.delete(int2)                                                       # STEP 58
result = avl1.inorder()                                                 # STEP 59
avl1 == avl1                                                            # STEP 60
avl1.insert(int2)                                                       # STEP 61
result = avl1.find(int3)                                                # STEP 62
avl1.delete(int1)                                                       # STEP 63
avl1 == avl1                                                            # STEP 64
avl1.delete(int0)                                                       # STEP 65
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104af23b0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
214 BRANCHES COVERED
161 STATEMENTS COVERED

Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=True, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.99225.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1045124d0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
Original test has 99 steps

SAVING TEST AS failure.99225.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 16                                                                # STEP 0
ACTION: int2 = 16 
int2 = None : <type 'NoneType'>
=> int2 = 16 : <type 'int'>
==================================================
int0 = 4                                                                 # STEP 1
ACTION: int0 = 4 
int0 = None : <type 'NoneType'>
=> int0 = 4 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 2
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x1040c9a70> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int1 = 3                                                                 # STEP 3
ACTION: int1 = 3 
int1 = None : <type 'NoneType'>
=> int1 = 3 : <type 'int'>
==================================================
avl2.delete(int0)                                                        # STEP 4
ACTION: avl2.delete(int0) 
int0 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1040c9a70> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.insert(int1)                                                        # STEP 5
ACTION: avl2.insert(int1) 
int1 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1040c9a70> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([3]) : <type 'set'>
==================================================
avl2.insert(int1)                                                        # STEP 6
ACTION: avl2.insert(int1) 
int1 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1040c9a70> : <type 'instance'>
avl_REF2 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
int3 = 19                                                                # STEP 7
ACTION: int3 = 19 
int3 = None : <type 'NoneType'>
=> int3 = 19 : <type 'int'>
==================================================
int0 = 10                                                                # STEP 8
ACTION: int0 = 10 
int0 = 4 : <type 'int'>
=> int0 = 10 : <type 'int'>
==================================================
result = avl2.find(int3)                                                 # STEP 9
ACTION: result = avl2.find(int3) 
int3 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1040c9a70> : <type 'instance'>
avl_REF2 = set([3]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
int1 = 5                                                                # STEP 10
ACTION: int1 = 5 
int1 = 3 : <type 'int'>
=> int1 = 5 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 11
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x1042b0950> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int3 = 17                                                               # STEP 12
ACTION: int3 = 17 
int3 = 19 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 13
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x1042b0f80> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 14
ACTION: avl1.delete(int0) 
int0 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042b0f80> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl0.delete(int2)                                                       # STEP 15
ACTION: avl0.delete(int2) 
int2 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1042b0950> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
result = avl0.find(int3)                                                # STEP 16
ACTION: result = avl0.find(int3) 
int3 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1042b0950> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
int2 = 14                                                               # STEP 17
ACTION: int2 = 14 
int2 = 16 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
int0 = 11                                                               # STEP 18
ACTION: int0 = 11 
int0 = 10 : <type 'int'>
=> int0 = 11 : <type 'int'>
==================================================
int3 = 11                                                               # STEP 19
ACTION: int3 = 11 
int3 = 17 : <type 'int'>
=> int3 = 11 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 20
ACTION: avl2.insert(int1) 
int1 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1040c9a70> : <type 'instance'>
avl_REF2 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([3, 5]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 21
ACTION: avl1.insert(int3) 
int3 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042b0f80> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([11]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 22
ACTION: avl0.insert(int1) 
int1 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1042b0950> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([5]) : <type 'set'>
==================================================
int1 = 3                                                                # STEP 23
ACTION: int1 = 3 
int1 = 5 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
int3 = 11                                                               # STEP 24
ACTION: int3 = 11 
int3 = 11 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 25
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x1040c9a70> : <type 'instance'>
avl_REF2 = set([3, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl1.insert(int1)                                                       # STEP 26
ACTION: avl1.insert(int1) 
int1 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042b0f80> : <type 'instance'>
avl_REF1 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([3, 11]) : <type 'set'>
==================================================
int1 = 7                                                                # STEP 27
ACTION: int1 = 7 
int1 = 3 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 28
ACTION: avl1.delete(int3) 
int3 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042b0f80> : <type 'instance'>
avl_REF1 = set([3, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([3]) : <type 'set'>
==================================================
result = avl1.find(int0)                                                # STEP 29
ACTION: result = avl1.find(int0) 
int0 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042b0f80> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl1.delete(int0)                                                       # STEP 30
ACTION: avl1.delete(int0) 
int0 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042b0f80> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int0 = 9                                                                # STEP 31
ACTION: int0 = 9 
int0 = 11 : <type 'int'>
=> int0 = 9 : <type 'int'>
==================================================
int3 = 1                                                                # STEP 32
ACTION: int3 = 1 
int3 = 11 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 33
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x1040c9a70> : <type 'instance'>
avl_REF2 = set([3, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl0.insert(int0)                                                       # STEP 34
ACTION: avl0.insert(int0) 
int0 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1042b0950> : <type 'instance'>
avl_REF0 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([9, 5]) : <type 'set'>
==================================================
int0 = 18                                                               # STEP 35
ACTION: int0 = 18 
int0 = 9 : <type 'int'>
=> int0 = 18 : <type 'int'>
==================================================
result = avl0.find(int1)                                                # STEP 36
ACTION: result = avl0.find(int1) 
int1 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1042b0950> : <type 'instance'>
avl_REF0 = set([9, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl0.insert(int0)                                                       # STEP 37
ACTION: avl0.insert(int0) 
int0 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1042b0950> : <type 'instance'>
avl_REF0 = set([9, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([9, 18, 5]) : <type 'set'>
==================================================
int1 = 19                                                               # STEP 38
ACTION: int1 = 19 
int1 = 7 : <type 'int'>
=> int1 = 19 : <type 'int'>
==================================================
result = avl1.find(int2)                                                # STEP 39
ACTION: result = avl1.find(int2) 
int2 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042b0f80> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int0 = 18                                                               # STEP 40
ACTION: int0 = 18 
int0 = 18 : <type 'int'>
==================================================
result = avl1.find(int3)                                                # STEP 41
ACTION: result = avl1.find(int3) 
int3 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042b0f80> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
result = avl1.find(int2)                                                # STEP 42
ACTION: result = avl1.find(int2) 
int2 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042b0f80> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl0.delete(int3)                                                       # STEP 43
ACTION: avl0.delete(int3) 
int3 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1042b0950> : <type 'instance'>
avl_REF0 = set([9, 18, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int2 = 1                                                                # STEP 44
ACTION: int2 = 1 
int2 = 14 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
result = avl2.find(int1)                                                # STEP 45
ACTION: result = avl2.find(int1) 
int1 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1040c9a70> : <type 'instance'>
avl_REF2 = set([3, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int3 = 10                                                               # STEP 46
ACTION: int3 = 10 
int3 = 1 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 47
ACTION: avl1.delete(int0) 
int0 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042b0f80> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int0 = 17                                                               # STEP 48
ACTION: int0 = 17 
int0 = 18 : <type 'int'>
=> int0 = 17 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 49
ACTION: avl0.insert(int1) 
int1 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1042b0950> : <type 'instance'>
avl_REF0 = set([9, 18, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([9, 18, 19, 5]) : <type 'set'>
==================================================
result = avl1.find(int1)                                                # STEP 50
ACTION: result = avl1.find(int1) 
int1 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042b0f80> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int1 = 4                                                                # STEP 51
ACTION: int1 = 4 
int1 = 19 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
result = avl1.find(int1)                                                # STEP 52
ACTION: result = avl1.find(int1) 
int1 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042b0f80> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl2.insert(int2)                                                       # STEP 53
ACTION: avl2.insert(int2) 
int2 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1040c9a70> : <type 'instance'>
avl_REF2 = set([3, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([1, 3, 5]) : <type 'set'>
==================================================
result = avl1.find(int2)                                                # STEP 54
ACTION: result = avl1.find(int2) 
int2 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042b0f80> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl2.insert(int2)                                                       # STEP 55
ACTION: avl2.insert(int2) 
int2 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1040c9a70> : <type 'instance'>
avl_REF2 = set([1, 3, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
int1 = 8                                                                # STEP 56
ACTION: int1 = 8 
int1 = 4 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 57
ACTION: avl2.insert(int3) 
int3 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1040c9a70> : <type 'instance'>
avl_REF2 = set([1, 3, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([1, 10, 3, 5]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 58
ACTION: avl1.delete(int3) 
int3 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042b0f80> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.delete(int3)                                                       # STEP 59
ACTION: avl1.delete(int3) 
int3 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042b0f80> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.insert(int2)                                                       # STEP 60
ACTION: avl1.insert(int2) 
int2 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042b0f80> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([3, 1]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 61
ACTION: avl2.insert(int3) 
int3 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1040c9a70> : <type 'instance'>
avl_REF2 = set([1, 10, 3, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
avl0.delete(int1)                                                       # STEP 62
ACTION: avl0.delete(int1) 
int1 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1042b0950> : <type 'instance'>
avl_REF0 = set([9, 18, 19, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int1 = 9                                                                # STEP 63
ACTION: int1 = 9 
int1 = 8 : <type 'int'>
=> int1 = 9 : <type 'int'>
==================================================
int2 = 9                                                                # STEP 64
ACTION: int2 = 9 
int2 = 1 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
result = avl2.find(int0)                                                # STEP 65
ACTION: result = avl2.find(int0) 
int0 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1040c9a70> : <type 'instance'>
avl_REF2 = set([1, 10, 3, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
int3 = 7                                                                # STEP 66
ACTION: int3 = 7 
int3 = 10 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
int0 = 19                                                               # STEP 67
ACTION: int0 = 19 
int0 = 17 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 68
ACTION: avl0.delete(int2) 
int2 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1042b0950> : <type 'instance'>
avl_REF0 = set([9, 18, 19, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([18, 19, 5]) : <type 'set'>
==================================================
result = avl2.find(int1)                                                # STEP 69
ACTION: result = avl2.find(int1) 
int1 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1040c9a70> : <type 'instance'>
avl_REF2 = set([1, 10, 3, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl0.insert(int3)                                                       # STEP 70
ACTION: avl0.insert(int3) 
int3 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1042b0950> : <type 'instance'>
avl_REF0 = set([18, 19, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([18, 19, 5, 7]) : <type 'set'>
==================================================
int2 = 9                                                                # STEP 71
ACTION: int2 = 9 
int2 = 9 : <type 'int'>
==================================================
int1 = 4                                                                # STEP 72
ACTION: int1 = 4 
int1 = 9 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 73
ACTION: avl1.insert(int2) 
int2 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042b0f80> : <type 'instance'>
avl_REF1 = set([3, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([3, 1, 9]) : <type 'set'>
==================================================
int2 = 19                                                               # STEP 74
ACTION: int2 = 19 
int2 = 9 : <type 'int'>
=> int2 = 19 : <type 'int'>
==================================================
int3 = 7                                                                # STEP 75
ACTION: int3 = 7 
int3 = 7 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 76
ACTION: avl0.insert(int2) 
int2 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1042b0950> : <type 'instance'>
avl_REF0 = set([18, 19, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
int2 = 20                                                               # STEP 77
ACTION: int2 = 20 
int2 = 19 : <type 'int'>
=> int2 = 20 : <type 'int'>
==================================================
result = avl2.find(int2)                                                # STEP 78
ACTION: result = avl2.find(int2) 
int2 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1040c9a70> : <type 'instance'>
avl_REF2 = set([1, 10, 3, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl1.insert(int0)                                                       # STEP 79
ACTION: avl1.insert(int0) 
int0 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042b0f80> : <type 'instance'>
avl_REF1 = set([3, 1, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([3, 1, 19, 9]) : <type 'set'>
==================================================
int2 = 15                                                               # STEP 80
ACTION: int2 = 15 
int2 = 20 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 81
ACTION: avl1.insert(int1) 
int1 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042b0f80> : <type 'instance'>
avl_REF1 = set([3, 1, 19, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([3, 1, 19, 4, 9]) : <type 'set'>
==================================================
int0 = 5                                                                # STEP 82
ACTION: int0 = 5 
int0 = 19 : <type 'int'>
=> int0 = 5 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 83
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x1040c9a70> : <type 'instance'>
avl_REF2 = set([1, 10, 3, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl1.inorder()                                                 # STEP 84
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1042b0f80> : <type 'instance'>
avl_REF1 = set([3, 1, 19, 4, 9]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int1 = 8                                                                # STEP 85
ACTION: int1 = 8 
int1 = 4 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
result = avl2.find(int3)                                                # STEP 86
ACTION: result = avl2.find(int3) 
int3 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1040c9a70> : <type 'instance'>
avl_REF2 = set([1, 10, 3, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
result = avl2.find(int1)                                                # STEP 87
ACTION: result = avl2.find(int1) 
int1 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1040c9a70> : <type 'instance'>
avl_REF2 = set([1, 10, 3, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl1.insert(int1)                                                       # STEP 88
ACTION: avl1.insert(int1) 
int1 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042b0f80> : <type 'instance'>
avl_REF1 = set([3, 1, 19, 4, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([1, 3, 4, 8, 9, 19]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 89
ACTION: avl1.delete(int1) 
int1 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042b0f80> : <type 'instance'>
avl_REF1 = set([1, 3, 4, 8, 9, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([1, 3, 4, 9, 19]) : <type 'set'>
==================================================
int3 = 1                                                                # STEP 90
ACTION: int3 = 1 
int3 = 7 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
int1 = 2                                                                # STEP 91
ACTION: int1 = 2 
int1 = 8 : <type 'int'>
=> int1 = 2 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 92
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1042b0f80> : <type 'instance'>
avl_REF1 = set([1, 3, 4, 9, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl2.insert(int2)                                                       # STEP 93
ACTION: avl2.insert(int2) 
int2 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1040c9a70> : <type 'instance'>
avl_REF2 = set([1, 10, 3, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([1, 10, 3, 5, 15]) : <type 'set'>
==================================================
int2 = 16                                                               # STEP 94
ACTION: int2 = 16 
int2 = 15 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 95
ACTION: avl0.insert(int3) 
int3 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1042b0950> : <type 'instance'>
avl_REF0 = set([18, 19, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([1, 18, 19, 5, 7]) : <type 'set'>
==================================================
int3 = 18                                                               # STEP 96
ACTION: int3 = 18 
int3 = 1 : <type 'int'>
=> int3 = 18 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 97
ACTION: avl1 = avl.AVLTree() 
avl1 = <avl.AVLTree instance at 0x1042b0f80> : <type 'instance'>
avl_REF1 = set([1, 3, 4, 9, 19]) : <type 'set'>
=> avl1 = <avl.AVLTree instance at 0x1046a5830> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 98
ACTION: avl0.delete(int3) 
int3 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1042b0950> : <type 'instance'>
avl_REF0 = set([1, 18, 19, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([1, 19, 5, 7]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1046a5518>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #3 STEP #97 (0:00:30.072039) Fri Apr 28 03:25:19 2017 [ 132 stmts 175 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1046c3a70>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 64 steps

SAVING TEST AS failure.99225.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 4                                                                 # STEP 0
ACTION: int3 = 4 
int3 = None : <type 'NoneType'>
=> int3 = 4 : <type 'int'>
==================================================
int1 = 8                                                                 # STEP 1
ACTION: int1 = 8 
int1 = None : <type 'NoneType'>
=> int1 = 8 : <type 'int'>
==================================================
int2 = 18                                                                # STEP 2
ACTION: int2 = 18 
int2 = None : <type 'NoneType'>
=> int2 = 18 : <type 'int'>
==================================================
int0 = 1                                                                 # STEP 3
ACTION: int0 = 1 
int0 = None : <type 'NoneType'>
=> int0 = 1 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x1046c3ef0> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl2.find(int1)                                                 # STEP 5
ACTION: result = avl2.find(int1) 
int1 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046c3ef0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int1 = 11                                                                # STEP 6
ACTION: int1 = 11 
int1 = 8 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
avl2.delete(int1)                                                        # STEP 7
ACTION: avl2.delete(int1) 
int1 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046c3ef0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int1 = 3                                                                 # STEP 8
ACTION: int1 = 3 
int1 = 11 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
avl2 == avl2                                                             # STEP 9
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x1046c3ef0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl2.delete(int0)                                                       # STEP 10
ACTION: avl2.delete(int0) 
int0 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046c3ef0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int0 = 18                                                               # STEP 11
ACTION: int0 = 18 
int0 = 1 : <type 'int'>
=> int0 = 18 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 12
ACTION: avl2.delete(int0) 
int0 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046c3ef0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int0 = 8                                                                # STEP 13
ACTION: int0 = 8 
int0 = 18 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 14
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x104735950> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
result = avl1.find(int3)                                                # STEP 15
ACTION: result = avl1.find(int3) 
int3 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104735950> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl2.insert(int1)                                                       # STEP 16
ACTION: avl2.insert(int1) 
int1 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046c3ef0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([3]) : <type 'set'>
==================================================
int1 = 12                                                               # STEP 17
ACTION: int1 = 12 
int1 = 3 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 18
ACTION: avl1.insert(int0) 
int0 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104735950> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([8]) : <type 'set'>
==================================================
int0 = 2                                                                # STEP 19
ACTION: int0 = 2 
int0 = 8 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
result = avl2.find(int0)                                                # STEP 20
ACTION: result = avl2.find(int0) 
int0 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046c3ef0> : <type 'instance'>
avl_REF2 = set([3]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
result = avl1.find(int1)                                                # STEP 21
ACTION: result = avl1.find(int1) 
int1 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104735950> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int3 = 9                                                                # STEP 22
ACTION: int3 = 9 
int3 = 4 : <type 'int'>
=> int3 = 9 : <type 'int'>
==================================================
result = avl2.find(int2)                                                # STEP 23
ACTION: result = avl2.find(int2) 
int2 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046c3ef0> : <type 'instance'>
avl_REF2 = set([3]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int1 = 3                                                                # STEP 24
ACTION: int1 = 3 
int1 = 12 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 25
ACTION: avl1.insert(int3) 
int3 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104735950> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([8, 9]) : <type 'set'>
==================================================
int2 = 3                                                                # STEP 26
ACTION: int2 = 3 
int2 = 18 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
int3 = 14                                                               # STEP 27
ACTION: int3 = 14 
int3 = 9 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
result = avl2.find(int2)                                                # STEP 28
ACTION: result = avl2.find(int2) 
int2 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046c3ef0> : <type 'instance'>
avl_REF2 = set([3]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int2 = 1                                                                # STEP 29
ACTION: int2 = 1 
int2 = 3 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
int0 = 14                                                               # STEP 30
ACTION: int0 = 14 
int0 = 2 : <type 'int'>
=> int0 = 14 : <type 'int'>
==================================================
result = avl1.find(int0)                                                # STEP 31
ACTION: result = avl1.find(int0) 
int0 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104735950> : <type 'instance'>
avl_REF1 = set([8, 9]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
result = avl2.find(int0)                                                # STEP 32
ACTION: result = avl2.find(int0) 
int0 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046c3ef0> : <type 'instance'>
avl_REF2 = set([3]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
int0 = 14                                                               # STEP 33
ACTION: int0 = 14 
int0 = 14 : <type 'int'>
==================================================
result = avl2.find(int1)                                                # STEP 34
ACTION: result = avl2.find(int1) 
int1 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046c3ef0> : <type 'instance'>
avl_REF2 = set([3]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int1 = 17                                                               # STEP 35
ACTION: int1 = 17 
int1 = 3 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 36
ACTION: avl1.delete(int1) 
int1 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104735950> : <type 'instance'>
avl_REF1 = set([8, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl2.insert(int3)                                                       # STEP 37
ACTION: avl2.insert(int3) 
int3 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046c3ef0> : <type 'instance'>
avl_REF2 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([3, 14]) : <type 'set'>
==================================================
int1 = 18                                                               # STEP 38
ACTION: int1 = 18 
int1 = 17 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 39
ACTION: avl2.delete(int1) 
int1 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046c3ef0> : <type 'instance'>
avl_REF2 = set([3, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int1 = 5                                                                # STEP 40
ACTION: int1 = 5 
int1 = 18 : <type 'int'>
=> int1 = 5 : <type 'int'>
==================================================
int3 = 4                                                                # STEP 41
ACTION: int3 = 4 
int3 = 14 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 42
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104735950> : <type 'instance'>
avl_REF1 = set([8, 9]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.delete(int0)                                                       # STEP 43
ACTION: avl1.delete(int0) 
int0 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104735950> : <type 'instance'>
avl_REF1 = set([8, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.delete(int1)                                                       # STEP 44
ACTION: avl1.delete(int1) 
int1 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104735950> : <type 'instance'>
avl_REF1 = set([8, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.insert(int1)                                                       # STEP 45
ACTION: avl1.insert(int1) 
int1 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104735950> : <type 'instance'>
avl_REF1 = set([8, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([8, 9, 5]) : <type 'set'>
==================================================
result = avl2.find(int0)                                                # STEP 46
ACTION: result = avl2.find(int0) 
int0 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046c3ef0> : <type 'instance'>
avl_REF2 = set([3, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl1.delete(int2)                                                       # STEP 47
ACTION: avl1.delete(int2) 
int2 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104735950> : <type 'instance'>
avl_REF1 = set([8, 9, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int2 = 8                                                                # STEP 48
ACTION: int2 = 8 
int2 = 1 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
int0 = 7                                                                # STEP 49
ACTION: int0 = 7 
int0 = 14 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
int1 = 9                                                                # STEP 50
ACTION: int1 = 9 
int1 = 5 : <type 'int'>
=> int1 = 9 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 51
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x1046c3ef0> : <type 'instance'>
avl_REF2 = set([3, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl2.find(int2)                                                # STEP 52
ACTION: result = avl2.find(int2) 
int2 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046c3ef0> : <type 'instance'>
avl_REF2 = set([3, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl1.delete(int3)                                                       # STEP 53
ACTION: avl1.delete(int3) 
int3 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104735950> : <type 'instance'>
avl_REF1 = set([8, 9, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int3 = 17                                                               # STEP 54
ACTION: int3 = 17 
int3 = 4 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
result = avl2.find(int2)                                                # STEP 55
ACTION: result = avl2.find(int2) 
int2 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046c3ef0> : <type 'instance'>
avl_REF2 = set([3, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int2 = 5                                                                # STEP 56
ACTION: int2 = 5 
int2 = 8 : <type 'int'>
=> int2 = 5 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 57
ACTION: avl2.insert(int1) 
int1 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046c3ef0> : <type 'instance'>
avl_REF2 = set([3, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([9, 3, 14]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 58
ACTION: avl1.insert(int3) 
int3 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104735950> : <type 'instance'>
avl_REF1 = set([8, 9, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([8, 9, 5, 17]) : <type 'set'>
==================================================
int1 = 5                                                                # STEP 59
ACTION: int1 = 5 
int1 = 9 : <type 'int'>
=> int1 = 5 : <type 'int'>
==================================================
int3 = 8                                                                # STEP 60
ACTION: int3 = 8 
int3 = 17 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
result = avl1.find(int3)                                                # STEP 61
ACTION: result = avl1.find(int3) 
int3 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104735950> : <type 'instance'>
avl_REF1 = set([8, 9, 5, 17]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
int3 = 16                                                               # STEP 62
ACTION: int3 = 16 
int3 = 8 : <type 'int'>
=> int3 = 16 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 63
ACTION: avl1.delete(int1) 
int1 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104735950> : <type 'instance'>
avl_REF1 = set([8, 9, 5, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([8, 9, 17]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1046bbe18>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
  15 [2:0]
-- < 8 [1:0]
---- < 1 [0:0] L
---- > 11 [0:0] L
-- > 17 [1:1]
---- < 16 [0:0] L
set([1, 8, 11, 15, 16, 17])
  8 [2:0]
-- < 3 [1:1]
---- < 2 [0:0] L
-- > 12 [1:0]
---- < 10 [0:0] L
---- > 20 [0:0] L
set([2, 3, 8, 10, 12, 20])
  8 [2:0]
-- < 3 [1:1]
---- < 2 [0:0] L
-- > 12 [1:0]
---- < 10 [0:0] L
---- > 20 [0:0] L
set([2, 3, 8, 10, 12, 20])
  8 [3:-1]
-- < 3 [1:1]
---- < 2 [0:0] L
-- > 12 [2:-1]
---- < 10 [0:0] L
---- > 16 [1:0]
------ < 14 [0:0] L
------ > 20 [0:0] L
set([2, 3, 8, 10, 12, 14, 16, 20])
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 61
STOPPING TESTING DUE TO TIMEOUT
7.9742110621 PERCENT COVERED
60.2210180759 TOTAL RUNTIME
7 EXECUTED
624 TOTAL TEST OPERATIONS
23.6447763443 TIME SPENT EXECUTING TEST OPERATIONS
0.0224318504333 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
23.846975565 TIME SPENT CHECKING PROPERTIES
47.4917519093 TOTAL TIME SPENT RUNNING SUT
0.00384783744812 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
2 FAILED
0 REPEATS OF FAILURES
2 ACTUAL DISTINCT FAILURES

FAILURE 0
int2 = 16                                                                # STEP 0
int0 = 4                                                                 # STEP 1
avl2 = avl.AVLTree()                                                     # STEP 2
int1 = 3                                                                 # STEP 3
avl2.delete(int0)                                                        # STEP 4
avl2.insert(int1)                                                        # STEP 5
avl2.insert(int1)                                                        # STEP 6
int3 = 19                                                                # STEP 7
int0 = 10                                                                # STEP 8
result = avl2.find(int3)                                                 # STEP 9
int1 = 5                                                                # STEP 10
avl0 = avl.AVLTree()                                                    # STEP 11
int3 = 17                                                               # STEP 12
avl1 = avl.AVLTree()                                                    # STEP 13
avl1.delete(int0)                                                       # STEP 14
avl0.delete(int2)                                                       # STEP 15
result = avl0.find(int3)                                                # STEP 16
int2 = 14                                                               # STEP 17
int0 = 11                                                               # STEP 18
int3 = 11                                                               # STEP 19
avl2.insert(int1)                                                       # STEP 20
avl1.insert(int3)                                                       # STEP 21
avl0.insert(int1)                                                       # STEP 22
int1 = 3                                                                # STEP 23
int3 = 11                                                               # STEP 24
result = avl2.inorder()                                                 # STEP 25
avl1.insert(int1)                                                       # STEP 26
int1 = 7                                                                # STEP 27
avl1.delete(int3)                                                       # STEP 28
result = avl1.find(int0)                                                # STEP 29
avl1.delete(int0)                                                       # STEP 30
int0 = 9                                                                # STEP 31
int3 = 1                                                                # STEP 32
result = avl2.inorder()                                                 # STEP 33
avl0.insert(int0)                                                       # STEP 34
int0 = 18                                                               # STEP 35
result = avl0.find(int1)                                                # STEP 36
avl0.insert(int0)                                                       # STEP 37
int1 = 19                                                               # STEP 38
result = avl1.find(int2)                                                # STEP 39
int0 = 18                                                               # STEP 40
result = avl1.find(int3)                                                # STEP 41
result = avl1.find(int2)                                                # STEP 42
avl0.delete(int3)                                                       # STEP 43
int2 = 1                                                                # STEP 44
result = avl2.find(int1)                                                # STEP 45
int3 = 10                                                               # STEP 46
avl1.delete(int0)                                                       # STEP 47
int0 = 17                                                               # STEP 48
avl0.insert(int1)                                                       # STEP 49
result = avl1.find(int1)                                                # STEP 50
int1 = 4                                                                # STEP 51
result = avl1.find(int1)                                                # STEP 52
avl2.insert(int2)                                                       # STEP 53
result = avl1.find(int2)                                                # STEP 54
avl2.insert(int2)                                                       # STEP 55
int1 = 8                                                                # STEP 56
avl2.insert(int3)                                                       # STEP 57
avl1.delete(int3)                                                       # STEP 58
avl1.delete(int3)                                                       # STEP 59
avl1.insert(int2)                                                       # STEP 60
avl2.insert(int3)                                                       # STEP 61
avl0.delete(int1)                                                       # STEP 62
int1 = 9                                                                # STEP 63
int2 = 9                                                                # STEP 64
result = avl2.find(int0)                                                # STEP 65
int3 = 7                                                                # STEP 66
int0 = 19                                                               # STEP 67
avl0.delete(int2)                                                       # STEP 68
result = avl2.find(int1)                                                # STEP 69
avl0.insert(int3)                                                       # STEP 70
int2 = 9                                                                # STEP 71
int1 = 4                                                                # STEP 72
avl1.insert(int2)                                                       # STEP 73
int2 = 19                                                               # STEP 74
int3 = 7                                                                # STEP 75
avl0.insert(int2)                                                       # STEP 76
int2 = 20                                                               # STEP 77
result = avl2.find(int2)                                                # STEP 78
avl1.insert(int0)                                                       # STEP 79
int2 = 15                                                               # STEP 80
avl1.insert(int1)                                                       # STEP 81
int0 = 5                                                                # STEP 82
result = avl2.inorder()                                                 # STEP 83
result = avl1.inorder()                                                 # STEP 84
int1 = 8                                                                # STEP 85
result = avl2.find(int3)                                                # STEP 86
result = avl2.find(int1)                                                # STEP 87
avl1.insert(int1)                                                       # STEP 88
avl1.delete(int1)                                                       # STEP 89
int3 = 1                                                                # STEP 90
int1 = 2                                                                # STEP 91
result = avl1.inorder()                                                 # STEP 92
avl2.insert(int2)                                                       # STEP 93
int2 = 16                                                               # STEP 94
avl0.insert(int3)                                                       # STEP 95
int3 = 18                                                               # STEP 96
avl1 = avl.AVLTree()                                                    # STEP 97
avl0.delete(int3)                                                       # STEP 98
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1046a5518>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE 1
int3 = 4                                                                 # STEP 0
int1 = 8                                                                 # STEP 1
int2 = 18                                                                # STEP 2
int0 = 1                                                                 # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
result = avl2.find(int1)                                                 # STEP 5
int1 = 11                                                                # STEP 6
avl2.delete(int1)                                                        # STEP 7
int1 = 3                                                                 # STEP 8
avl2 == avl2                                                             # STEP 9
avl2.delete(int0)                                                       # STEP 10
int0 = 18                                                               # STEP 11
avl2.delete(int0)                                                       # STEP 12
int0 = 8                                                                # STEP 13
avl1 = avl.AVLTree()                                                    # STEP 14
result = avl1.find(int3)                                                # STEP 15
avl2.insert(int1)                                                       # STEP 16
int1 = 12                                                               # STEP 17
avl1.insert(int0)                                                       # STEP 18
int0 = 2                                                                # STEP 19
result = avl2.find(int0)                                                # STEP 20
result = avl1.find(int1)                                                # STEP 21
int3 = 9                                                                # STEP 22
result = avl2.find(int2)                                                # STEP 23
int1 = 3                                                                # STEP 24
avl1.insert(int3)                                                       # STEP 25
int2 = 3                                                                # STEP 26
int3 = 14                                                               # STEP 27
result = avl2.find(int2)                                                # STEP 28
int2 = 1                                                                # STEP 29
int0 = 14                                                               # STEP 30
result = avl1.find(int0)                                                # STEP 31
result = avl2.find(int0)                                                # STEP 32
int0 = 14                                                               # STEP 33
result = avl2.find(int1)                                                # STEP 34
int1 = 17                                                               # STEP 35
avl1.delete(int1)                                                       # STEP 36
avl2.insert(int3)                                                       # STEP 37
int1 = 18                                                               # STEP 38
avl2.delete(int1)                                                       # STEP 39
int1 = 5                                                                # STEP 40
int3 = 4                                                                # STEP 41
result = avl1.inorder()                                                 # STEP 42
avl1.delete(int0)                                                       # STEP 43
avl1.delete(int1)                                                       # STEP 44
avl1.insert(int1)                                                       # STEP 45
result = avl2.find(int0)                                                # STEP 46
avl1.delete(int2)                                                       # STEP 47
int2 = 8                                                                # STEP 48
int0 = 7                                                                # STEP 49
int1 = 9                                                                # STEP 50
result = avl2.inorder()                                                 # STEP 51
result = avl2.find(int2)                                                # STEP 52
avl1.delete(int3)                                                       # STEP 53
int3 = 17                                                               # STEP 54
result = avl2.find(int2)                                                # STEP 55
int2 = 5                                                                # STEP 56
avl2.insert(int1)                                                       # STEP 57
avl1.insert(int3)                                                       # STEP 58
int1 = 5                                                                # STEP 59
int3 = 8                                                                # STEP 60
result = avl1.find(int3)                                                # STEP 61
int3 = 16                                                               # STEP 62
avl1.delete(int1)                                                       # STEP 63
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1046bbe18>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
201 BRANCHES COVERED
151 STATEMENTS COVERED

Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.61951.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103b77950>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
Original test has 41 steps

SAVING TEST AS failure.61951.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 13                                                                # STEP 0
ACTION: int3 = 13 
int3 = None : <type 'NoneType'>
=> int3 = 13 : <type 'int'>
==================================================
int2 = 1                                                                 # STEP 1
ACTION: int2 = 1 
int2 = None : <type 'NoneType'>
=> int2 = 1 : <type 'int'>
==================================================
int1 = 20                                                                # STEP 2
ACTION: int1 = 20 
int1 = None : <type 'NoneType'>
=> int1 = 20 : <type 'int'>
==================================================
int0 = 15                                                                # STEP 3
ACTION: int0 = 15 
int0 = None : <type 'NoneType'>
=> int0 = 15 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 4
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x10400ba70> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.delete(int2)                                                        # STEP 5
ACTION: avl0.delete(int2) 
int2 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10400ba70> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.insert(int2)                                                        # STEP 6
ACTION: avl0.insert(int2) 
int2 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10400ba70> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([1]) : <type 'set'>
==================================================
avl0.delete(int3)                                                        # STEP 7
ACTION: avl0.delete(int3) 
int3 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10400ba70> : <type 'instance'>
avl_REF0 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
result = avl0.inorder()                                                  # STEP 8
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x10400ba70> : <type 'instance'>
avl_REF0 = set([1]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int3 = 20                                                                # STEP 9
ACTION: int3 = 20 
int3 = 13 : <type 'int'>
=> int3 = 20 : <type 'int'>
==================================================
int2 = 13                                                               # STEP 10
ACTION: int2 = 13 
int2 = 1 : <type 'int'>
=> int2 = 13 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 11
ACTION: avl0.insert(int2) 
int2 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10400ba70> : <type 'instance'>
avl_REF0 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([1, 13]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 12
ACTION: avl0.insert(int3) 
int3 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10400ba70> : <type 'instance'>
avl_REF0 = set([1, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([1, 20, 13]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 13
ACTION: avl0.delete(int2) 
int2 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10400ba70> : <type 'instance'>
avl_REF0 = set([1, 20, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([1, 20]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 14
ACTION: avl0.insert(int0) 
int0 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10400ba70> : <type 'instance'>
avl_REF0 = set([1, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([1, 20, 15]) : <type 'set'>
==================================================
result = avl0.find(int0)                                                # STEP 15
ACTION: result = avl0.find(int0) 
int0 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10400ba70> : <type 'instance'>
avl_REF0 = set([1, 20, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
avl0 == avl0                                                            # STEP 16
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x10400ba70> : <type 'instance'>
avl_REF0 = set([1, 20, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl0.insert(int2)                                                       # STEP 17
ACTION: avl0.insert(int2) 
int2 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10400ba70> : <type 'instance'>
avl_REF0 = set([1, 20, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([1, 20, 13, 15]) : <type 'set'>
==================================================
int3 = 5                                                                # STEP 18
ACTION: int3 = 5 
int3 = 20 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
int0 = 13                                                               # STEP 19
ACTION: int0 = 13 
int0 = 15 : <type 'int'>
=> int0 = 13 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 20
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x10400ba70> : <type 'instance'>
avl_REF0 = set([1, 20, 13, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int2 = 13                                                               # STEP 21
ACTION: int2 = 13 
int2 = 13 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 22
ACTION: avl0.delete(int2) 
int2 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10400ba70> : <type 'instance'>
avl_REF0 = set([1, 20, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([1, 20, 15]) : <type 'set'>
==================================================
int2 = 10                                                               # STEP 23
ACTION: int2 = 10 
int2 = 13 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 24
ACTION: avl0.insert(int2) 
int2 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10400ba70> : <type 'instance'>
avl_REF0 = set([1, 20, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([1, 10, 20, 15]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 25
ACTION: avl0.insert(int2) 
int2 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10400ba70> : <type 'instance'>
avl_REF0 = set([1, 10, 20, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl0.delete(int2)                                                       # STEP 26
ACTION: avl0.delete(int2) 
int2 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10400ba70> : <type 'instance'>
avl_REF0 = set([1, 10, 20, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([1, 20, 15]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 27
ACTION: avl0.insert(int3) 
int3 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10400ba70> : <type 'instance'>
avl_REF0 = set([1, 20, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([1, 20, 5, 15]) : <type 'set'>
==================================================
int3 = 5                                                                # STEP 28
ACTION: int3 = 5 
int3 = 5 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 29
ACTION: avl0.insert(int1) 
int1 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10400ba70> : <type 'instance'>
avl_REF0 = set([1, 20, 5, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
int2 = 13                                                               # STEP 30
ACTION: int2 = 13 
int2 = 10 : <type 'int'>
=> int2 = 13 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 31
ACTION: avl0.insert(int1) 
int1 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10400ba70> : <type 'instance'>
avl_REF0 = set([1, 20, 5, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl0.insert(int0)                                                       # STEP 32
ACTION: avl0.insert(int0) 
int0 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10400ba70> : <type 'instance'>
avl_REF0 = set([1, 20, 5, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([1, 13, 20, 5, 15]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 33
ACTION: avl0.insert(int0) 
int0 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10400ba70> : <type 'instance'>
avl_REF0 = set([1, 13, 20, 5, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
avl0.insert(int3)                                                       # STEP 34
ACTION: avl0.insert(int3) 
int3 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10400ba70> : <type 'instance'>
avl_REF0 = set([1, 13, 20, 5, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
avl0.delete(int2)                                                       # STEP 35
ACTION: avl0.delete(int2) 
int2 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10400ba70> : <type 'instance'>
avl_REF0 = set([1, 13, 20, 5, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([1, 20, 5, 15]) : <type 'set'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 36
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x103c5f3b0> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 37
ACTION: avl1.insert(int2) 
int2 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103c5f3b0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([13]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 38
ACTION: avl0.insert(int1) 
int1 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10400ba70> : <type 'instance'>
avl_REF0 = set([1, 20, 5, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl1.delete(int1)                                                       # STEP 39
ACTION: avl1.delete(int1) 
int1 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103c5f3b0> : <type 'instance'>
avl_REF1 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl0.delete(int1)                                                       # STEP 40
ACTION: avl0.delete(int1) 
int1 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10400ba70> : <type 'instance'>
avl_REF0 = set([1, 20, 5, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([1, 5, 15]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103e256c8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103e7f050>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
Original test has 54 steps

SAVING TEST AS failure.61951.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 15                                                                # STEP 0
ACTION: int2 = 15 
int2 = None : <type 'NoneType'>
=> int2 = 15 : <type 'int'>
==================================================
int0 = 18                                                                # STEP 1
ACTION: int0 = 18 
int0 = None : <type 'NoneType'>
=> int0 = 18 : <type 'int'>
==================================================
int1 = 11                                                                # STEP 2
ACTION: int1 = 11 
int1 = None : <type 'NoneType'>
=> int1 = 11 : <type 'int'>
==================================================
int3 = 10                                                                # STEP 3
ACTION: int3 = 10 
int3 = None : <type 'NoneType'>
=> int3 = 10 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 4
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x103e7f098> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.delete(int3)                                                        # STEP 5
ACTION: avl0.delete(int3) 
int3 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103e7f098> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.insert(int2)                                                        # STEP 6
ACTION: avl0.insert(int2) 
int2 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103e7f098> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([15]) : <type 'set'>
==================================================
result = avl0.find(int3)                                                 # STEP 7
ACTION: result = avl0.find(int3) 
int3 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103e7f098> : <type 'instance'>
avl_REF0 = set([15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
avl0.delete(int3)                                                        # STEP 8
ACTION: avl0.delete(int3) 
int3 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103e7f098> : <type 'instance'>
avl_REF0 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.delete(int0)                                                        # STEP 9
ACTION: avl0.delete(int0) 
int0 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103e7f098> : <type 'instance'>
avl_REF0 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
result = avl0.find(int1)                                                # STEP 10
ACTION: result = avl0.find(int1) 
int1 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103e7f098> : <type 'instance'>
avl_REF0 = set([15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl0.insert(int1)                                                       # STEP 11
ACTION: avl0.insert(int1) 
int1 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103e7f098> : <type 'instance'>
avl_REF0 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([11, 15]) : <type 'set'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 12
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x104023758> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int1 = 20                                                               # STEP 13
ACTION: int1 = 20 
int1 = 11 : <type 'int'>
=> int1 = 20 : <type 'int'>
==================================================
int3 = 3                                                                # STEP 14
ACTION: int3 = 3 
int3 = 10 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 15
ACTION: avl1.delete(int3) 
int3 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x104023758> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.insert(int3)                                                       # STEP 16
ACTION: avl1.insert(int3) 
int3 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x104023758> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([3]) : <type 'set'>
==================================================
int3 = 20                                                               # STEP 17
ACTION: int3 = 20 
int3 = 3 : <type 'int'>
=> int3 = 20 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 18
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x104023758> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int1)                                                       # STEP 19
ACTION: avl1.insert(int1) 
int1 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x104023758> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([3, 20]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 20
ACTION: avl0.delete(int2) 
int2 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103e7f098> : <type 'instance'>
avl_REF0 = set([11, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([11]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 21
ACTION: avl1.delete(int3) 
int3 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x104023758> : <type 'instance'>
avl_REF1 = set([3, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([3]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 22
ACTION: avl1.delete(int1) 
int1 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x104023758> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.insert(int1)                                                       # STEP 23
ACTION: avl1.insert(int1) 
int1 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x104023758> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([3, 20]) : <type 'set'>
==================================================
int1 = 18                                                               # STEP 24
ACTION: int1 = 18 
int1 = 20 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 25
ACTION: avl0.insert(int3) 
int3 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103e7f098> : <type 'instance'>
avl_REF0 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([11, 20]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 26
ACTION: avl1.delete(int2) 
int2 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x104023758> : <type 'instance'>
avl_REF1 = set([3, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl0.insert(int2)                                                       # STEP 27
ACTION: avl0.insert(int2) 
int2 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103e7f098> : <type 'instance'>
avl_REF0 = set([11, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([11, 20, 15]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 28
ACTION: avl0.insert(int0) 
int0 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103e7f098> : <type 'instance'>
avl_REF0 = set([11, 20, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([18, 11, 20, 15]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 29
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x103e7f098> : <type 'instance'>
avl_REF0 = set([18, 11, 20, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl1.delete(int0)                                                       # STEP 30
ACTION: avl1.delete(int0) 
int0 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x104023758> : <type 'instance'>
avl_REF1 = set([3, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
result = avl0.find(int2)                                                # STEP 31
ACTION: result = avl0.find(int2) 
int2 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103e7f098> : <type 'instance'>
avl_REF0 = set([18, 11, 20, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
int0 = 9                                                                # STEP 32
ACTION: int0 = 9 
int0 = 18 : <type 'int'>
=> int0 = 9 : <type 'int'>
==================================================
result = avl1.find(int2)                                                # STEP 33
ACTION: result = avl1.find(int2) 
int2 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x104023758> : <type 'instance'>
avl_REF1 = set([3, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
result = avl0.inorder()                                                 # STEP 34
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x103e7f098> : <type 'instance'>
avl_REF0 = set([18, 11, 20, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl1 == avl0                                                            # STEP 35
ACTION: avl1 == avl0 
avl1 = <avlbug2.AVLTree instance at 0x104023758> : <type 'instance'>
avl0 = <avlbug2.AVLTree instance at 0x103e7f098> : <type 'instance'>
avl_REF1 = set([3, 20]) : <type 'set'>
avl_REF0 = set([18, 11, 20, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
avl1 == avl1                                                            # STEP 36
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x104023758> : <type 'instance'>
avl_REF1 = set([3, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
result = avl1.inorder()                                                 # STEP 37
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x104023758> : <type 'instance'>
avl_REF1 = set([3, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl0.insert(int3)                                                       # STEP 38
ACTION: avl0.insert(int3) 
int3 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103e7f098> : <type 'instance'>
avl_REF0 = set([18, 11, 20, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
avl1.delete(int2)                                                       # STEP 39
ACTION: avl1.delete(int2) 
int2 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x104023758> : <type 'instance'>
avl_REF1 = set([3, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.delete(int0)                                                       # STEP 40
ACTION: avl1.delete(int0) 
int0 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x104023758> : <type 'instance'>
avl_REF1 = set([3, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.insert(int1)                                                       # STEP 41
ACTION: avl1.insert(int1) 
int1 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x104023758> : <type 'instance'>
avl_REF1 = set([3, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([18, 3, 20]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 42
ACTION: avl0.insert(int0) 
int0 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103e7f098> : <type 'instance'>
avl_REF0 = set([18, 11, 20, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([9, 18, 11, 20, 15]) : <type 'set'>
==================================================
avl1 == avl0                                                            # STEP 43
ACTION: avl1 == avl0 
avl1 = <avlbug2.AVLTree instance at 0x104023758> : <type 'instance'>
avl0 = <avlbug2.AVLTree instance at 0x103e7f098> : <type 'instance'>
avl_REF1 = set([18, 3, 20]) : <type 'set'>
avl_REF0 = set([9, 18, 11, 20, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
avl1.insert(int2)                                                       # STEP 44
ACTION: avl1.insert(int2) 
int2 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x104023758> : <type 'instance'>
avl_REF1 = set([18, 3, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([18, 3, 20, 15]) : <type 'set'>
==================================================
int3 = 5                                                                # STEP 45
ACTION: int3 = 5 
int3 = 20 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 46
ACTION: avl0.insert(int1) 
int1 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103e7f098> : <type 'instance'>
avl_REF0 = set([9, 18, 11, 20, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
int2 = 17                                                               # STEP 47
ACTION: int2 = 17 
int2 = 15 : <type 'int'>
=> int2 = 17 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 48
ACTION: avl1.delete(int0) 
int0 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x104023758> : <type 'instance'>
avl_REF1 = set([18, 3, 20, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl0.delete(int0)                                                       # STEP 49
ACTION: avl0.delete(int0) 
int0 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103e7f098> : <type 'instance'>
avl_REF0 = set([9, 18, 11, 20, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([18, 11, 20, 15]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 50
ACTION: avl0.delete(int1) 
int1 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103e7f098> : <type 'instance'>
avl_REF0 = set([18, 11, 20, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([11, 20, 15]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 51
ACTION: avl0.insert(int2) 
int2 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103e7f098> : <type 'instance'>
avl_REF0 = set([11, 20, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([17, 11, 20, 15]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 52
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x104023758> : <type 'instance'>
avl_REF1 = set([18, 3, 20, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.delete(int1)                                                       # STEP 53
ACTION: avl1.delete(int1) 
int1 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x104023758> : <type 'instance'>
avl_REF1 = set([18, 3, 20, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([3, 20, 15]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1025c9cb0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
  14 [2:0]
-- < 6 [1:0]
---- < 5 [0:0] L
---- > 10 [0:0] L
-- > 17 [1:1]
---- < 15 [0:0] L
set([5, 6, 10, 14, 15, 17])
  14 [2:0]
-- < 6 [1:0]
---- < 5 [0:0] L
---- > 10 [0:0] L
-- > 17 [1:1]
---- < 15 [0:0] L
set([5, 6, 10, 14, 15, 17])
  14 [2:0]
-- < 6 [1:0]
---- < 5 [0:0] L
---- > 10 [0:0] L
-- > 17 [1:1]
---- < 15 [0:0] L
set([5, 6, 10, 14, 15, 17])
  14 [2:0]
-- < 6 [1:0]
---- < 5 [0:0] L
---- > 10 [0:0] L
-- > 17 [1:1]
---- < 15 [0:0] L
set([5, 6, 10, 14, 15, 17])
TEST #4 STEP #8 (0:00:30.086800) Mon May  1 17:22:55 2017 [ 160 stmts 212 branches ]
  5 [2:0]
-- < 4 [1:1]
---- < 3 [0:0] L
-- > 17 [1:0]
---- < 7 [0:0] L
---- > 18 [0:0] L
set([3, 4, 5, 7, 17, 18])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10416ce60>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
Original test has 90 steps

SAVING TEST AS failure.61951.test.2
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 7                                                                 # STEP 0
ACTION: int2 = 7 
int2 = None : <type 'NoneType'>
=> int2 = 7 : <type 'int'>
==================================================
int3 = 2                                                                 # STEP 1
ACTION: int3 = 2 
int3 = None : <type 'NoneType'>
=> int3 = 2 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 2
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x1041791b8> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
result = avl1.find(int3)                                                 # STEP 3
ACTION: result = avl1.find(int3) 
int3 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1041791b8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
int3 = 10                                                                # STEP 4
ACTION: int3 = 10 
int3 = 2 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
int1 = 18                                                                # STEP 5
ACTION: int1 = 18 
int1 = None : <type 'NoneType'>
=> int1 = 18 : <type 'int'>
==================================================
avl1.insert(int2)                                                        # STEP 6
ACTION: avl1.insert(int2) 
int2 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1041791b8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([7]) : <type 'set'>
==================================================
avl1.insert(int1)                                                        # STEP 7
ACTION: avl1.insert(int1) 
int1 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1041791b8> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([18, 7]) : <type 'set'>
==================================================
avl1.delete(int3)                                                        # STEP 8
ACTION: avl1.delete(int3) 
int3 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1041791b8> : <type 'instance'>
avl_REF1 = set([18, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.insert(int1)                                                        # STEP 9
ACTION: avl1.insert(int1) 
int1 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1041791b8> : <type 'instance'>
avl_REF1 = set([18, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl1.insert(int2)                                                       # STEP 10
ACTION: avl1.insert(int2) 
int2 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1041791b8> : <type 'instance'>
avl_REF1 = set([18, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
result = avl1.find(int1)                                                # STEP 11
ACTION: result = avl1.find(int1) 
int1 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1041791b8> : <type 'instance'>
avl_REF1 = set([18, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl1.delete(int1)                                                       # STEP 12
ACTION: avl1.delete(int1) 
int1 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1041791b8> : <type 'instance'>
avl_REF1 = set([18, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([7]) : <type 'set'>
==================================================
avl1 == avl1                                                            # STEP 13
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x1041791b8> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl0 = avl.AVLTree()                                                    # STEP 14
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x103c33f80> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 15
ACTION: avl1.delete(int3) 
int3 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1041791b8> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.insert(int1)                                                       # STEP 16
ACTION: avl1.insert(int1) 
int1 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1041791b8> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([18, 7]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 17
ACTION: avl0.insert(int1) 
int1 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c33f80> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([18]) : <type 'set'>
==================================================
result = avl0.find(int3)                                                # STEP 18
ACTION: result = avl0.find(int3) 
int3 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c33f80> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
avl0.insert(int1)                                                       # STEP 19
ACTION: avl0.insert(int1) 
int1 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c33f80> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
result = avl0.find(int1)                                                # STEP 20
ACTION: result = avl0.find(int1) 
int1 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c33f80> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl0.delete(int2)                                                       # STEP 21
ACTION: avl0.delete(int2) 
int2 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c33f80> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl1.insert(int1)                                                       # STEP 22
ACTION: avl1.insert(int1) 
int1 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1041791b8> : <type 'instance'>
avl_REF1 = set([18, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
int0 = 17                                                               # STEP 23
ACTION: int0 = 17 
int0 = None : <type 'NoneType'>
=> int0 = 17 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 24
ACTION: avl1.insert(int1) 
int1 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1041791b8> : <type 'instance'>
avl_REF1 = set([18, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl0.insert(int0)                                                       # STEP 25
ACTION: avl0.insert(int0) 
int0 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c33f80> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([17, 18]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 26
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x103c33f80> : <type 'instance'>
avl_REF0 = set([17, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
result = avl0.inorder()                                                 # STEP 27
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x103c33f80> : <type 'instance'>
avl_REF0 = set([17, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int1)                                                       # STEP 28
ACTION: avl0.insert(int1) 
int1 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c33f80> : <type 'instance'>
avl_REF0 = set([17, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl1.insert(int0)                                                       # STEP 29
ACTION: avl1.insert(int0) 
int0 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1041791b8> : <type 'instance'>
avl_REF1 = set([18, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([17, 18, 7]) : <type 'set'>
==================================================
int1 = 4                                                                # STEP 30
ACTION: int1 = 4 
int1 = 18 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 31
ACTION: avl0.insert(int2) 
int2 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c33f80> : <type 'instance'>
avl_REF0 = set([17, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([17, 18, 7]) : <type 'set'>
==================================================
avl0 == avl1                                                            # STEP 32
ACTION: avl0 == avl1 
avl0 = <avlbug2.AVLTree instance at 0x103c33f80> : <type 'instance'>
avl1 = <avlbug2.AVLTree instance at 0x1041791b8> : <type 'instance'>
avl_REF0 = set([17, 18, 7]) : <type 'set'>
avl_REF1 = set([17, 18, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF1 
==================================================
avl0.delete(int3)                                                       # STEP 33
ACTION: avl0.delete(int3) 
int3 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c33f80> : <type 'instance'>
avl_REF0 = set([17, 18, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int0 = 18                                                               # STEP 34
ACTION: int0 = 18 
int0 = 17 : <type 'int'>
=> int0 = 18 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 35
ACTION: avl0.insert(int0) 
int0 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c33f80> : <type 'instance'>
avl_REF0 = set([17, 18, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
avl0.delete(int2)                                                       # STEP 36
ACTION: avl0.delete(int2) 
int2 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c33f80> : <type 'instance'>
avl_REF0 = set([17, 18, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([17, 18]) : <type 'set'>
==================================================
result = avl1.find(int1)                                                # STEP 37
ACTION: result = avl1.find(int1) 
int1 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1041791b8> : <type 'instance'>
avl_REF1 = set([17, 18, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl0.insert(int0)                                                       # STEP 38
ACTION: avl0.insert(int0) 
int0 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c33f80> : <type 'instance'>
avl_REF0 = set([17, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
result = avl1.find(int1)                                                # STEP 39
ACTION: result = avl1.find(int1) 
int1 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1041791b8> : <type 'instance'>
avl_REF1 = set([17, 18, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl1.insert(int2)                                                       # STEP 40
ACTION: avl1.insert(int2) 
int2 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1041791b8> : <type 'instance'>
avl_REF1 = set([17, 18, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
avl0 == avl1                                                            # STEP 41
ACTION: avl0 == avl1 
avl0 = <avlbug2.AVLTree instance at 0x103c33f80> : <type 'instance'>
avl1 = <avlbug2.AVLTree instance at 0x1041791b8> : <type 'instance'>
avl_REF0 = set([17, 18]) : <type 'set'>
avl_REF1 = set([17, 18, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF1 
==================================================
avl0.insert(int2)                                                       # STEP 42
ACTION: avl0.insert(int2) 
int2 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c33f80> : <type 'instance'>
avl_REF0 = set([17, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([17, 18, 7]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 43
ACTION: avl1.insert(int2) 
int2 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1041791b8> : <type 'instance'>
avl_REF1 = set([17, 18, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
avl0.insert(int3)                                                       # STEP 44
ACTION: avl0.insert(int3) 
int3 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c33f80> : <type 'instance'>
avl_REF0 = set([17, 18, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([17, 18, 10, 7]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 45
ACTION: avl0.insert(int0) 
int0 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c33f80> : <type 'instance'>
avl_REF0 = set([17, 18, 10, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
avl0.delete(int2)                                                       # STEP 46
ACTION: avl0.delete(int2) 
int2 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c33f80> : <type 'instance'>
avl_REF0 = set([17, 18, 10, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([17, 18, 10]) : <type 'set'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 47
ACTION: avl0 = avl.AVLTree() 
avl0 = <avlbug2.AVLTree instance at 0x103c33f80> : <type 'instance'>
avl_REF0 = set([17, 18, 10]) : <type 'set'>
=> avl0 = <avlbug2.AVLTree instance at 0x1042acdd0> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 48
ACTION: avl1.insert(int1) 
int1 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1041791b8> : <type 'instance'>
avl_REF1 = set([17, 18, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([17, 18, 4, 7]) : <type 'set'>
==================================================
result = avl1.find(int3)                                                # STEP 49
ACTION: result = avl1.find(int3) 
int3 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1041791b8> : <type 'instance'>
avl_REF1 = set([17, 18, 4, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
result = avl1.find(int1)                                                # STEP 50
ACTION: result = avl1.find(int1) 
int1 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1041791b8> : <type 'instance'>
avl_REF1 = set([17, 18, 4, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int3 = 6                                                                # STEP 51
ACTION: int3 = 6 
int3 = 10 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 52
ACTION: avl0.delete(int2) 
int2 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1042acdd0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl1.delete(int3)                                                       # STEP 53
ACTION: avl1.delete(int3) 
int3 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1041791b8> : <type 'instance'>
avl_REF1 = set([17, 18, 4, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl0.insert(int3)                                                       # STEP 54
ACTION: avl0.insert(int3) 
int3 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1042acdd0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([6]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 55
ACTION: avl0.delete(int0) 
int0 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1042acdd0> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int1 = 5                                                                # STEP 56
ACTION: int1 = 5 
int1 = 4 : <type 'int'>
=> int1 = 5 : <type 'int'>
==================================================
result = avl0.find(int2)                                                # STEP 57
ACTION: result = avl0.find(int2) 
int2 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1042acdd0> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
int0 = 3                                                                # STEP 58
ACTION: int0 = 3 
int0 = 18 : <type 'int'>
=> int0 = 3 : <type 'int'>
==================================================
int3 = 4                                                                # STEP 59
ACTION: int3 = 4 
int3 = 6 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 60
ACTION: avl1.insert(int2) 
int2 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1041791b8> : <type 'instance'>
avl_REF1 = set([17, 18, 4, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
avl0.insert(int3)                                                       # STEP 61
ACTION: avl0.insert(int3) 
int3 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1042acdd0> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([4, 6]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 62
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x1042acdd0> : <type 'instance'>
avl_REF0 = set([4, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl1.insert(int1)                                                       # STEP 63
ACTION: avl1.insert(int1) 
int1 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1041791b8> : <type 'instance'>
avl_REF1 = set([17, 18, 4, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([17, 18, 4, 5, 7]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 64
ACTION: avl1.delete(int1) 
int1 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1041791b8> : <type 'instance'>
avl_REF1 = set([17, 18, 4, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([17, 18, 4, 7]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 65
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x1042acdd0> : <type 'instance'>
avl_REF0 = set([4, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl1.insert(int1)                                                       # STEP 66
ACTION: avl1.insert(int1) 
int1 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1041791b8> : <type 'instance'>
avl_REF1 = set([17, 18, 4, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([17, 18, 4, 5, 7]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 67
ACTION: avl1.insert(int0) 
int0 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1041791b8> : <type 'instance'>
avl_REF1 = set([17, 18, 4, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([3, 4, 5, 7, 17, 18]) : <type 'set'>
==================================================
int1 = 11                                                               # STEP 68
ACTION: int1 = 11 
int1 = 5 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 69
ACTION: avl1.insert(int0) 
int0 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1041791b8> : <type 'instance'>
avl_REF1 = set([3, 4, 5, 7, 17, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
int2 = 1                                                                # STEP 70
ACTION: int2 = 1 
int2 = 7 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 71
ACTION: avl0.delete(int3) 
int3 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1042acdd0> : <type 'instance'>
avl_REF0 = set([4, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([6]) : <type 'set'>
==================================================
avl1.display()                                                          # STEP 72
ACTION: avl1.display() 
avl1 = <avlbug2.AVLTree instance at 0x1041791b8> : <type 'instance'>
avl_REF1 = set([3, 4, 5, 7, 17, 18]) : <type 'set'>
  5 [2:0]
-- < 4 [1:1]
---- < 3 [0:0] L
-- > 17 [1:0]
---- < 7 [0:0] L
---- > 18 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([3, 4, 5, 7, 17, 18])
==================================================
int0 = 12                                                               # STEP 73
ACTION: int0 = 12 
int0 = 3 : <type 'int'>
=> int0 = 12 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 74
ACTION: avl1.insert(int2) 
int2 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1041791b8> : <type 'instance'>
avl_REF1 = set([3, 4, 5, 7, 17, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([1, 3, 4, 5, 7, 17, 18]) : <type 'set'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 75
ACTION: avl1 = avl.AVLTree() 
avl1 = <avlbug2.AVLTree instance at 0x1041791b8> : <type 'instance'>
avl_REF1 = set([1, 3, 4, 5, 7, 17, 18]) : <type 'set'>
=> avl1 = <avlbug2.AVLTree instance at 0x103c29c68> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int3 = 5                                                                # STEP 76
ACTION: int3 = 5 
int3 = 4 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 77
ACTION: avl1.delete(int2) 
int2 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103c29c68> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
result = avl0.inorder()                                                 # STEP 78
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x1042acdd0> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int2 = 17                                                               # STEP 79
ACTION: int2 = 17 
int2 = 1 : <type 'int'>
=> int2 = 17 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 80
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x103c29c68> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
result = avl0.inorder()                                                 # STEP 81
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x1042acdd0> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int0)                                                       # STEP 82
ACTION: avl0.insert(int0) 
int0 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1042acdd0> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([12, 6]) : <type 'set'>
==================================================
result = avl1.find(int2)                                                # STEP 83
ACTION: result = avl1.find(int2) 
int2 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103c29c68> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
result = avl0.find(int0)                                                # STEP 84
ACTION: result = avl0.find(int0) 
int0 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1042acdd0> : <type 'instance'>
avl_REF0 = set([12, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
avl0.insert(int3)                                                       # STEP 85
ACTION: avl0.insert(int3) 
int3 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1042acdd0> : <type 'instance'>
avl_REF0 = set([12, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([12, 5, 6]) : <type 'set'>
==================================================
avl0 == avl1                                                            # STEP 86
ACTION: avl0 == avl1 
avl0 = <avlbug2.AVLTree instance at 0x1042acdd0> : <type 'instance'>
avl1 = <avlbug2.AVLTree instance at 0x103c29c68> : <type 'instance'>
avl_REF0 = set([12, 5, 6]) : <type 'set'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF1 
==================================================
avl0.insert(int2)                                                       # STEP 87
ACTION: avl0.insert(int2) 
int2 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1042acdd0> : <type 'instance'>
avl_REF0 = set([12, 5, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([17, 12, 5, 6]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 88
ACTION: avl1.delete(int2) 
int2 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103c29c68> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl0.delete(int3)                                                       # STEP 89
ACTION: avl0.delete(int3) 
int3 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1042acdd0> : <type 'instance'>
avl_REF0 = set([17, 12, 5, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([17, 12, 6]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103c0fd88>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 3 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 24
STOPPING TESTING DUE TO TIMEOUT
8.21242019733 PERCENT COVERED
60.2294619083 TOTAL RUNTIME
6 EXECUTED
409 TOTAL TEST OPERATIONS
20.5773694515 TIME SPENT EXECUTING TEST OPERATIONS
0.047892332077 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
20.6741888523 TIME SPENT CHECKING PROPERTIES
41.2515583038 TOTAL TIME SPENT RUNNING SUT
0.00413393974304 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
3 FAILED
0 REPEATS OF FAILURES
3 ACTUAL DISTINCT FAILURES

FAILURE 0
int3 = 13                                                                # STEP 0
int2 = 1                                                                 # STEP 1
int1 = 20                                                                # STEP 2
int0 = 15                                                                # STEP 3
avl0 = avl.AVLTree()                                                     # STEP 4
avl0.delete(int2)                                                        # STEP 5
avl0.insert(int2)                                                        # STEP 6
avl0.delete(int3)                                                        # STEP 7
result = avl0.inorder()                                                  # STEP 8
int3 = 20                                                                # STEP 9
int2 = 13                                                               # STEP 10
avl0.insert(int2)                                                       # STEP 11
avl0.insert(int3)                                                       # STEP 12
avl0.delete(int2)                                                       # STEP 13
avl0.insert(int0)                                                       # STEP 14
result = avl0.find(int0)                                                # STEP 15
avl0 == avl0                                                            # STEP 16
avl0.insert(int2)                                                       # STEP 17
int3 = 5                                                                # STEP 18
int0 = 13                                                               # STEP 19
result = avl0.inorder()                                                 # STEP 20
int2 = 13                                                               # STEP 21
avl0.delete(int2)                                                       # STEP 22
int2 = 10                                                               # STEP 23
avl0.insert(int2)                                                       # STEP 24
avl0.insert(int2)                                                       # STEP 25
avl0.delete(int2)                                                       # STEP 26
avl0.insert(int3)                                                       # STEP 27
int3 = 5                                                                # STEP 28
avl0.insert(int1)                                                       # STEP 29
int2 = 13                                                               # STEP 30
avl0.insert(int1)                                                       # STEP 31
avl0.insert(int0)                                                       # STEP 32
avl0.insert(int0)                                                       # STEP 33
avl0.insert(int3)                                                       # STEP 34
avl0.delete(int2)                                                       # STEP 35
avl1 = avl.AVLTree()                                                    # STEP 36
avl1.insert(int2)                                                       # STEP 37
avl0.insert(int1)                                                       # STEP 38
avl1.delete(int1)                                                       # STEP 39
avl0.delete(int1)                                                       # STEP 40
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103e256c8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE 1
int2 = 15                                                                # STEP 0
int0 = 18                                                                # STEP 1
int1 = 11                                                                # STEP 2
int3 = 10                                                                # STEP 3
avl0 = avl.AVLTree()                                                     # STEP 4
avl0.delete(int3)                                                        # STEP 5
avl0.insert(int2)                                                        # STEP 6
result = avl0.find(int3)                                                 # STEP 7
avl0.delete(int3)                                                        # STEP 8
avl0.delete(int0)                                                        # STEP 9
result = avl0.find(int1)                                                # STEP 10
avl0.insert(int1)                                                       # STEP 11
avl1 = avl.AVLTree()                                                    # STEP 12
int1 = 20                                                               # STEP 13
int3 = 3                                                                # STEP 14
avl1.delete(int3)                                                       # STEP 15
avl1.insert(int3)                                                       # STEP 16
int3 = 20                                                               # STEP 17
result = avl1.inorder()                                                 # STEP 18
avl1.insert(int1)                                                       # STEP 19
avl0.delete(int2)                                                       # STEP 20
avl1.delete(int3)                                                       # STEP 21
avl1.delete(int1)                                                       # STEP 22
avl1.insert(int1)                                                       # STEP 23
int1 = 18                                                               # STEP 24
avl0.insert(int3)                                                       # STEP 25
avl1.delete(int2)                                                       # STEP 26
avl0.insert(int2)                                                       # STEP 27
avl0.insert(int0)                                                       # STEP 28
result = avl0.inorder()                                                 # STEP 29
avl1.delete(int0)                                                       # STEP 30
result = avl0.find(int2)                                                # STEP 31
int0 = 9                                                                # STEP 32
result = avl1.find(int2)                                                # STEP 33
result = avl0.inorder()                                                 # STEP 34
avl1 == avl0                                                            # STEP 35
avl1 == avl1                                                            # STEP 36
result = avl1.inorder()                                                 # STEP 37
avl0.insert(int3)                                                       # STEP 38
avl1.delete(int2)                                                       # STEP 39
avl1.delete(int0)                                                       # STEP 40
avl1.insert(int1)                                                       # STEP 41
avl0.insert(int0)                                                       # STEP 42
avl1 == avl0                                                            # STEP 43
avl1.insert(int2)                                                       # STEP 44
int3 = 5                                                                # STEP 45
avl0.insert(int1)                                                       # STEP 46
int2 = 17                                                               # STEP 47
avl1.delete(int0)                                                       # STEP 48
avl0.delete(int0)                                                       # STEP 49
avl0.delete(int1)                                                       # STEP 50
avl0.insert(int2)                                                       # STEP 51
result = avl1.inorder()                                                 # STEP 52
avl1.delete(int1)                                                       # STEP 53
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1025c9cb0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE 2
int2 = 7                                                                 # STEP 0
int3 = 2                                                                 # STEP 1
avl1 = avl.AVLTree()                                                     # STEP 2
result = avl1.find(int3)                                                 # STEP 3
int3 = 10                                                                # STEP 4
int1 = 18                                                                # STEP 5
avl1.insert(int2)                                                        # STEP 6
avl1.insert(int1)                                                        # STEP 7
avl1.delete(int3)                                                        # STEP 8
avl1.insert(int1)                                                        # STEP 9
avl1.insert(int2)                                                       # STEP 10
result = avl1.find(int1)                                                # STEP 11
avl1.delete(int1)                                                       # STEP 12
avl1 == avl1                                                            # STEP 13
avl0 = avl.AVLTree()                                                    # STEP 14
avl1.delete(int3)                                                       # STEP 15
avl1.insert(int1)                                                       # STEP 16
avl0.insert(int1)                                                       # STEP 17
result = avl0.find(int3)                                                # STEP 18
avl0.insert(int1)                                                       # STEP 19
result = avl0.find(int1)                                                # STEP 20
avl0.delete(int2)                                                       # STEP 21
avl1.insert(int1)                                                       # STEP 22
int0 = 17                                                               # STEP 23
avl1.insert(int1)                                                       # STEP 24
avl0.insert(int0)                                                       # STEP 25
result = avl0.inorder()                                                 # STEP 26
result = avl0.inorder()                                                 # STEP 27
avl0.insert(int1)                                                       # STEP 28
avl1.insert(int0)                                                       # STEP 29
int1 = 4                                                                # STEP 30
avl0.insert(int2)                                                       # STEP 31
avl0 == avl1                                                            # STEP 32
avl0.delete(int3)                                                       # STEP 33
int0 = 18                                                               # STEP 34
avl0.insert(int0)                                                       # STEP 35
avl0.delete(int2)                                                       # STEP 36
result = avl1.find(int1)                                                # STEP 37
avl0.insert(int0)                                                       # STEP 38
result = avl1.find(int1)                                                # STEP 39
avl1.insert(int2)                                                       # STEP 40
avl0 == avl1                                                            # STEP 41
avl0.insert(int2)                                                       # STEP 42
avl1.insert(int2)                                                       # STEP 43
avl0.insert(int3)                                                       # STEP 44
avl0.insert(int0)                                                       # STEP 45
avl0.delete(int2)                                                       # STEP 46
avl0 = avl.AVLTree()                                                    # STEP 47
avl1.insert(int1)                                                       # STEP 48
result = avl1.find(int3)                                                # STEP 49
result = avl1.find(int1)                                                # STEP 50
int3 = 6                                                                # STEP 51
avl0.delete(int2)                                                       # STEP 52
avl1.delete(int3)                                                       # STEP 53
avl0.insert(int3)                                                       # STEP 54
avl0.delete(int0)                                                       # STEP 55
int1 = 5                                                                # STEP 56
result = avl0.find(int2)                                                # STEP 57
int0 = 3                                                                # STEP 58
int3 = 4                                                                # STEP 59
avl1.insert(int2)                                                       # STEP 60
avl0.insert(int3)                                                       # STEP 61
result = avl0.inorder()                                                 # STEP 62
avl1.insert(int1)                                                       # STEP 63
avl1.delete(int1)                                                       # STEP 64
result = avl0.inorder()                                                 # STEP 65
avl1.insert(int1)                                                       # STEP 66
avl1.insert(int0)                                                       # STEP 67
int1 = 11                                                               # STEP 68
avl1.insert(int0)                                                       # STEP 69
int2 = 1                                                                # STEP 70
avl0.delete(int3)                                                       # STEP 71
avl1.display()                                                          # STEP 72
int0 = 12                                                               # STEP 73
avl1.insert(int2)                                                       # STEP 74
avl1 = avl.AVLTree()                                                    # STEP 75
int3 = 5                                                                # STEP 76
avl1.delete(int2)                                                       # STEP 77
result = avl0.inorder()                                                 # STEP 78
int2 = 17                                                               # STEP 79
result = avl1.inorder()                                                 # STEP 80
result = avl0.inorder()                                                 # STEP 81
avl0.insert(int0)                                                       # STEP 82
result = avl1.find(int2)                                                # STEP 83
result = avl0.find(int0)                                                # STEP 84
avl0.insert(int3)                                                       # STEP 85
avl0 == avl1                                                            # STEP 86
avl0.insert(int2)                                                       # STEP 87
avl1.delete(int2)                                                       # STEP 88
avl0.delete(int3)                                                       # STEP 89
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103c0fd88>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
214 BRANCHES COVERED
161 STATEMENTS COVERED

Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=True, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.673.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
TEST #4 STEP #71 (0:00:30.069159) Fri Apr 28 06:59:14 2017 [ 108 stmts 145 branches ]
WARNING: DEADLOCK (NO ENABLED ACTIONS)
TERMINATING TEST DUE TO NO ENABLED ACTIONS
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103c60ab8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 29 steps

SAVING TEST AS failure.673.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 13                                                                # STEP 0
ACTION: int3 = 13 
int3 = None : <type 'NoneType'>
=> int3 = 13 : <type 'int'>
==================================================
int1 = 6                                                                 # STEP 1
ACTION: int1 = 6 
int1 = None : <type 'NoneType'>
=> int1 = 6 : <type 'int'>
==================================================
int0 = 20                                                                # STEP 2
ACTION: int0 = 20 
int0 = None : <type 'NoneType'>
=> int0 = 20 : <type 'int'>
==================================================
int2 = 7                                                                 # STEP 3
ACTION: int2 = 7 
int2 = None : <type 'NoneType'>
=> int2 = 7 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x105a2b908> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int0)                                                        # STEP 5
ACTION: avl2.insert(int0) 
int0 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105a2b908> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([20]) : <type 'set'>
==================================================
int0 = 4                                                                 # STEP 6
ACTION: int0 = 4 
int0 = 20 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
avl2.insert(int3)                                                        # STEP 7
ACTION: avl2.insert(int3) 
int3 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105a2b908> : <type 'instance'>
avl_REF2 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([20, 13]) : <type 'set'>
==================================================
int3 = 17                                                                # STEP 8
ACTION: int3 = 17 
int3 = 13 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
avl2.insert(int3)                                                        # STEP 9
ACTION: avl2.insert(int3) 
int3 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105a2b908> : <type 'instance'>
avl_REF2 = set([20, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([17, 20, 13]) : <type 'set'>
==================================================
int3 = 17                                                               # STEP 10
ACTION: int3 = 17 
int3 = 17 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 11
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x10598c908> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 12
ACTION: avl0.delete(int0) 
int0 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10598c908> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int0 = 12                                                               # STEP 13
ACTION: int0 = 12 
int0 = 4 : <type 'int'>
=> int0 = 12 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 14
ACTION: avl0.insert(int1) 
int1 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10598c908> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([6]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 15
ACTION: avl2.insert(int2) 
int2 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105a2b908> : <type 'instance'>
avl_REF2 = set([17, 20, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([17, 20, 13, 7]) : <type 'set'>
==================================================
int1 = 10                                                               # STEP 16
ACTION: int1 = 10 
int1 = 6 : <type 'int'>
=> int1 = 10 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 17
ACTION: avl0.insert(int0) 
int0 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10598c908> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([12, 6]) : <type 'set'>
==================================================
int2 = 15                                                               # STEP 18
ACTION: int2 = 15 
int2 = 7 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
int0 = 16                                                               # STEP 19
ACTION: int0 = 16 
int0 = 12 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 20
ACTION: avl2.delete(int2) 
int2 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105a2b908> : <type 'instance'>
avl_REF2 = set([17, 20, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int2 = 20                                                               # STEP 21
ACTION: int2 = 20 
int2 = 15 : <type 'int'>
=> int2 = 20 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 22
ACTION: avl2.delete(int1) 
int1 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105a2b908> : <type 'instance'>
avl_REF2 = set([17, 20, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl0.delete(int2)                                                       # STEP 23
ACTION: avl0.delete(int2) 
int2 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10598c908> : <type 'instance'>
avl_REF0 = set([12, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int1 = 12                                                               # STEP 24
ACTION: int1 = 12 
int1 = 10 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 25
ACTION: avl2.delete(int0) 
int0 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105a2b908> : <type 'instance'>
avl_REF2 = set([17, 20, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int0 = 19                                                               # STEP 26
ACTION: int0 = 19 
int0 = 16 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 27
ACTION: avl2.insert(int2) 
int2 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105a2b908> : <type 'instance'>
avl_REF2 = set([17, 20, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl2.delete(int3)                                                       # STEP 28
ACTION: avl2.delete(int3) 
int3 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105a2b908> : <type 'instance'>
avl_REF2 = set([17, 20, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([20, 13, 7]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103a61170>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 63
STOPPING TESTING DUE TO TIMEOUT
7.22768917543 PERCENT COVERED
60.2106349468 TOTAL RUNTIME
9 EXECUTED
695 TOTAL TEST OPERATIONS
28.7266938686 TIME SPENT EXECUTING TEST OPERATIONS
0.0256376266479 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
28.803609848 TIME SPENT CHECKING PROPERTIES
57.5303037167 TOTAL TIME SPENT RUNNING SUT
0.00488829612732 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int3 = 13                                                                # STEP 0
int1 = 6                                                                 # STEP 1
int0 = 20                                                                # STEP 2
int2 = 7                                                                 # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
avl2.insert(int0)                                                        # STEP 5
int0 = 4                                                                 # STEP 6
avl2.insert(int3)                                                        # STEP 7
int3 = 17                                                                # STEP 8
avl2.insert(int3)                                                        # STEP 9
int3 = 17                                                               # STEP 10
avl0 = avl.AVLTree()                                                    # STEP 11
avl0.delete(int0)                                                       # STEP 12
int0 = 12                                                               # STEP 13
avl0.insert(int1)                                                       # STEP 14
avl2.insert(int2)                                                       # STEP 15
int1 = 10                                                               # STEP 16
avl0.insert(int0)                                                       # STEP 17
int2 = 15                                                               # STEP 18
int0 = 16                                                               # STEP 19
avl2.delete(int2)                                                       # STEP 20
int2 = 20                                                               # STEP 21
avl2.delete(int1)                                                       # STEP 22
avl0.delete(int2)                                                       # STEP 23
int1 = 12                                                               # STEP 24
avl2.delete(int0)                                                       # STEP 25
int0 = 19                                                               # STEP 26
avl2.insert(int2)                                                       # STEP 27
avl2.delete(int3)                                                       # STEP 28
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103a61170>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
181 BRANCHES COVERED
137 STATEMENTS COVERED

Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.14313.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  10 [2:0]
-- < 9 [1:1]
---- < 7 [0:0] L
-- > 17 [1:0]
---- < 11 [0:0] L
---- > 18 [0:0] L
set([7, 9, 10, 11, 17, 18])
TEST #3 STEP #86 (0:00:30.093151) Sun Apr 30 03:49:19 2017 [ 148 stmts 199 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103e4fa70>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
Original test has 91 steps

SAVING TEST AS failure.14313.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 14                                                                # STEP 0
ACTION: int0 = 14 
int0 = None : <type 'NoneType'>
=> int0 = 14 : <type 'int'>
==================================================
int3 = 10                                                                # STEP 1
ACTION: int3 = 10 
int3 = None : <type 'NoneType'>
=> int3 = 10 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 2
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x103b737e8> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int2 = 19                                                                # STEP 3
ACTION: int2 = 19 
int2 = None : <type 'NoneType'>
=> int2 = 19 : <type 'int'>
==================================================
result = avl0.find(int0)                                                 # STEP 4
ACTION: result = avl0.find(int0) 
int0 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103b737e8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
int0 = 5                                                                 # STEP 5
ACTION: int0 = 5 
int0 = 14 : <type 'int'>
=> int0 = 5 : <type 'int'>
==================================================
int1 = 15                                                                # STEP 6
ACTION: int1 = 15 
int1 = None : <type 'NoneType'>
=> int1 = 15 : <type 'int'>
==================================================
avl0.delete(int1)                                                        # STEP 7
ACTION: avl0.delete(int1) 
int1 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103b737e8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int1 = 10                                                                # STEP 8
ACTION: int1 = 10 
int1 = 15 : <type 'int'>
=> int1 = 10 : <type 'int'>
==================================================
avl0.insert(int3)                                                        # STEP 9
ACTION: avl0.insert(int3) 
int3 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103b737e8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([10]) : <type 'set'>
==================================================
int3 = 10                                                               # STEP 10
ACTION: int3 = 10 
int3 = 10 : <type 'int'>
==================================================
result = avl0.find(int3)                                                # STEP 11
ACTION: result = avl0.find(int3) 
int3 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103b737e8> : <type 'instance'>
avl_REF0 = set([10]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
int3 = 9                                                                # STEP 12
ACTION: int3 = 9 
int3 = 10 : <type 'int'>
=> int3 = 9 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 13
ACTION: avl0.insert(int1) 
int1 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103b737e8> : <type 'instance'>
avl_REF0 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
int1 = 8                                                                # STEP 14
ACTION: int1 = 8 
int1 = 10 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 15
ACTION: avl0.insert(int0) 
int0 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103b737e8> : <type 'instance'>
avl_REF0 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([10, 5]) : <type 'set'>
==================================================
int0 = 2                                                                # STEP 16
ACTION: int0 = 2 
int0 = 5 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 17
ACTION: avl0.delete(int2) 
int2 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103b737e8> : <type 'instance'>
avl_REF0 = set([10, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int2 = 3                                                                # STEP 18
ACTION: int2 = 3 
int2 = 19 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 19
ACTION: avl0.insert(int3) 
int3 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103b737e8> : <type 'instance'>
avl_REF0 = set([10, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([9, 10, 5]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 20
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x103b737e8> : <type 'instance'>
avl_REF0 = set([9, 10, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
result = avl0.find(int2)                                                # STEP 21
ACTION: result = avl0.find(int2) 
int2 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103b737e8> : <type 'instance'>
avl_REF0 = set([9, 10, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
int3 = 4                                                                # STEP 22
ACTION: int3 = 4 
int3 = 9 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
result = avl0.find(int1)                                                # STEP 23
ACTION: result = avl0.find(int1) 
int1 = 8 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103b737e8> : <type 'instance'>
avl_REF0 = set([9, 10, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
int1 = 15                                                               # STEP 24
ACTION: int1 = 15 
int1 = 8 : <type 'int'>
=> int1 = 15 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 25
ACTION: avl0.delete(int2) 
int2 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103b737e8> : <type 'instance'>
avl_REF0 = set([9, 10, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl2 = avl.AVLTree()                                                    # STEP 26
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x10399f5a8> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 27
ACTION: avl2.insert(int0) 
int0 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10399f5a8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([2]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 28
ACTION: avl0.insert(int3) 
int3 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103b737e8> : <type 'instance'>
avl_REF0 = set([9, 10, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([9, 10, 4, 5]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 29
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x103b737e8> : <type 'instance'>
avl_REF0 = set([9, 10, 4, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int0 = 2                                                                # STEP 30
ACTION: int0 = 2 
int0 = 2 : <type 'int'>
==================================================
int2 = 9                                                                # STEP 31
ACTION: int2 = 9 
int2 = 3 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
result = avl2.find(int2)                                                # STEP 32
ACTION: result = avl2.find(int2) 
int2 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10399f5a8> : <type 'instance'>
avl_REF2 = set([2]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int2 = 16                                                               # STEP 33
ACTION: int2 = 16 
int2 = 9 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
int3 = 13                                                               # STEP 34
ACTION: int3 = 13 
int3 = 4 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
result = avl0.find(int0)                                                # STEP 35
ACTION: result = avl0.find(int0) 
int0 = 2 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103b737e8> : <type 'instance'>
avl_REF0 = set([9, 10, 4, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
result = avl0.find(int1)                                                # STEP 36
ACTION: result = avl0.find(int1) 
int1 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103b737e8> : <type 'instance'>
avl_REF0 = set([9, 10, 4, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl0.insert(int2)                                                       # STEP 37
ACTION: avl0.insert(int2) 
int2 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103b737e8> : <type 'instance'>
avl_REF0 = set([9, 10, 4, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([16, 9, 10, 4, 5]) : <type 'set'>
==================================================
int2 = 12                                                               # STEP 38
ACTION: int2 = 12 
int2 = 16 : <type 'int'>
=> int2 = 12 : <type 'int'>
==================================================
int1 = 19                                                               # STEP 39
ACTION: int1 = 19 
int1 = 15 : <type 'int'>
=> int1 = 19 : <type 'int'>
==================================================
result = avl2.find(int1)                                                # STEP 40
ACTION: result = avl2.find(int1) 
int1 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10399f5a8> : <type 'instance'>
avl_REF2 = set([2]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int1 = 3                                                                # STEP 41
ACTION: int1 = 3 
int1 = 19 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 42
ACTION: avl0.delete(int0) 
int0 = 2 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103b737e8> : <type 'instance'>
avl_REF0 = set([16, 9, 10, 4, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int0 = 19                                                               # STEP 43
ACTION: int0 = 19 
int0 = 2 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
result = avl2.find(int3)                                                # STEP 44
ACTION: result = avl2.find(int3) 
int3 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10399f5a8> : <type 'instance'>
avl_REF2 = set([2]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
result = avl0.find(int1)                                                # STEP 45
ACTION: result = avl0.find(int1) 
int1 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103b737e8> : <type 'instance'>
avl_REF0 = set([16, 9, 10, 4, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
int3 = 8                                                                # STEP 46
ACTION: int3 = 8 
int3 = 13 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
int1 = 17                                                               # STEP 47
ACTION: int1 = 17 
int1 = 3 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 48
ACTION: avl0.delete(int2) 
int2 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103b737e8> : <type 'instance'>
avl_REF0 = set([16, 9, 10, 4, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int2 = 17                                                               # STEP 49
ACTION: int2 = 17 
int2 = 12 : <type 'int'>
=> int2 = 17 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 50
ACTION: avl2.delete(int0) 
int0 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10399f5a8> : <type 'instance'>
avl_REF2 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int0 = 11                                                               # STEP 51
ACTION: int0 = 11 
int0 = 19 : <type 'int'>
=> int0 = 11 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 52
ACTION: avl2.delete(int3) 
int3 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10399f5a8> : <type 'instance'>
avl_REF2 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.insert(int1)                                                       # STEP 53
ACTION: avl2.insert(int1) 
int1 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10399f5a8> : <type 'instance'>
avl_REF2 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([17, 2]) : <type 'set'>
==================================================
int1 = 10                                                               # STEP 54
ACTION: int1 = 10 
int1 = 17 : <type 'int'>
=> int1 = 10 : <type 'int'>
==================================================
int3 = 12                                                               # STEP 55
ACTION: int3 = 12 
int3 = 8 : <type 'int'>
=> int3 = 12 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 56
ACTION: avl2.insert(int2) 
int2 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10399f5a8> : <type 'instance'>
avl_REF2 = set([17, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl2 == avl0                                                            # STEP 57
ACTION: avl2 == avl0 
avl2 = <avlbug2.AVLTree instance at 0x10399f5a8> : <type 'instance'>
avl0 = <avlbug2.AVLTree instance at 0x103b737e8> : <type 'instance'>
avl_REF2 = set([17, 2]) : <type 'set'>
avl_REF0 = set([16, 9, 10, 4, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF0 
==================================================
result = avl0.find(int2)                                                # STEP 58
ACTION: result = avl0.find(int2) 
int2 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103b737e8> : <type 'instance'>
avl_REF0 = set([16, 9, 10, 4, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl0.insert(int0)                                                       # STEP 59
ACTION: avl0.insert(int0) 
int0 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103b737e8> : <type 'instance'>
avl_REF0 = set([16, 9, 10, 4, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([4, 5, 9, 10, 11, 16]) : <type 'set'>
==================================================
int2 = 11                                                               # STEP 60
ACTION: int2 = 11 
int2 = 17 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
result = avl2.find(int0)                                                # STEP 61
ACTION: result = avl2.find(int0) 
int0 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10399f5a8> : <type 'instance'>
avl_REF2 = set([17, 2]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
int0 = 13                                                               # STEP 62
ACTION: int0 = 13 
int0 = 11 : <type 'int'>
=> int0 = 13 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 63
ACTION: avl2.delete(int3) 
int3 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10399f5a8> : <type 'instance'>
avl_REF2 = set([17, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl0.delete(int2)                                                       # STEP 64
ACTION: avl0.delete(int2) 
int2 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103b737e8> : <type 'instance'>
avl_REF0 = set([4, 5, 9, 10, 11, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([4, 5, 9, 10, 16]) : <type 'set'>
==================================================
int3 = 3                                                                # STEP 65
ACTION: int3 = 3 
int3 = 12 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 66
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x1038cfab8> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int2 = 1                                                                # STEP 67
ACTION: int2 = 1 
int2 = 11 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 68
ACTION: avl0.delete(int1) 
int1 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103b737e8> : <type 'instance'>
avl_REF0 = set([4, 5, 9, 10, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([4, 5, 9, 16]) : <type 'set'>
==================================================
result = avl1.find(int3)                                                # STEP 69
ACTION: result = avl1.find(int3) 
int3 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1038cfab8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
result = avl0.find(int0)                                                # STEP 70
ACTION: result = avl0.find(int0) 
int0 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103b737e8> : <type 'instance'>
avl_REF0 = set([4, 5, 9, 16]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
int1 = 11                                                               # STEP 71
ACTION: int1 = 11 
int1 = 10 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
int3 = 17                                                               # STEP 72
ACTION: int3 = 17 
int3 = 3 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 73
ACTION: avl2.delete(int0) 
int0 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10399f5a8> : <type 'instance'>
avl_REF2 = set([17, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
result = avl0.inorder()                                                 # STEP 74
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x103b737e8> : <type 'instance'>
avl_REF0 = set([4, 5, 9, 16]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl1 == avl1                                                            # STEP 75
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x1038cfab8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl2 == avl2                                                            # STEP 76
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x10399f5a8> : <type 'instance'>
avl_REF2 = set([17, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl2 == avl1                                                            # STEP 77
ACTION: avl2 == avl1 
avl2 = <avlbug2.AVLTree instance at 0x10399f5a8> : <type 'instance'>
avl1 = <avlbug2.AVLTree instance at 0x1038cfab8> : <type 'instance'>
avl_REF2 = set([17, 2]) : <type 'set'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
avl1.delete(int3)                                                       # STEP 78
ACTION: avl1.delete(int3) 
int3 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1038cfab8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.delete(int0)                                                       # STEP 79
ACTION: avl1.delete(int0) 
int0 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1038cfab8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int0 = 16                                                               # STEP 80
ACTION: int0 = 16 
int0 = 13 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 81
ACTION: avl2.delete(int3) 
int3 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10399f5a8> : <type 'instance'>
avl_REF2 = set([17, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([2]) : <type 'set'>
==================================================
result = avl0.find(int3)                                                # STEP 82
ACTION: result = avl0.find(int3) 
int3 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103b737e8> : <type 'instance'>
avl_REF0 = set([4, 5, 9, 16]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
int3 = 4                                                                # STEP 83
ACTION: int3 = 4 
int3 = 17 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
avl0 == avl1                                                            # STEP 84
ACTION: avl0 == avl1 
avl0 = <avlbug2.AVLTree instance at 0x103b737e8> : <type 'instance'>
avl1 = <avlbug2.AVLTree instance at 0x1038cfab8> : <type 'instance'>
avl_REF0 = set([4, 5, 9, 16]) : <type 'set'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF1 
==================================================
result = avl0.inorder()                                                 # STEP 85
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x103b737e8> : <type 'instance'>
avl_REF0 = set([4, 5, 9, 16]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl2 == avl1                                                            # STEP 86
ACTION: avl2 == avl1 
avl2 = <avlbug2.AVLTree instance at 0x10399f5a8> : <type 'instance'>
avl1 = <avlbug2.AVLTree instance at 0x1038cfab8> : <type 'instance'>
avl_REF2 = set([2]) : <type 'set'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
result = avl2.find(int1)                                                # STEP 87
ACTION: result = avl2.find(int1) 
int1 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10399f5a8> : <type 'instance'>
avl_REF2 = set([2]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl2.insert(int1)                                                       # STEP 88
ACTION: avl2.insert(int1) 
int1 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10399f5a8> : <type 'instance'>
avl_REF2 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([2, 11]) : <type 'set'>
==================================================
int1 = 7                                                                # STEP 89
ACTION: int1 = 7 
int1 = 11 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 90
ACTION: avl0.delete(int0) 
int0 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103b737e8> : <type 'instance'>
avl_REF0 = set([4, 5, 9, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([4, 5, 9]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1038d0488>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 87
STOPPING TESTING DUE TO TIMEOUT
8.57332009268 PERCENT COVERED
60.2892580032 TOTAL RUNTIME
5 EXECUTED
478 TOTAL TEST OPERATIONS
25.1295788288 TIME SPENT EXECUTING TEST OPERATIONS
0.0188870429993 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
25.2309482098 TIME SPENT CHECKING PROPERTIES
50.3605270386 TOTAL TIME SPENT RUNNING SUT
0.00380778312683 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int0 = 14                                                                # STEP 0
int3 = 10                                                                # STEP 1
avl0 = avl.AVLTree()                                                     # STEP 2
int2 = 19                                                                # STEP 3
result = avl0.find(int0)                                                 # STEP 4
int0 = 5                                                                 # STEP 5
int1 = 15                                                                # STEP 6
avl0.delete(int1)                                                        # STEP 7
int1 = 10                                                                # STEP 8
avl0.insert(int3)                                                        # STEP 9
int3 = 10                                                               # STEP 10
result = avl0.find(int3)                                                # STEP 11
int3 = 9                                                                # STEP 12
avl0.insert(int1)                                                       # STEP 13
int1 = 8                                                                # STEP 14
avl0.insert(int0)                                                       # STEP 15
int0 = 2                                                                # STEP 16
avl0.delete(int2)                                                       # STEP 17
int2 = 3                                                                # STEP 18
avl0.insert(int3)                                                       # STEP 19
result = avl0.inorder()                                                 # STEP 20
result = avl0.find(int2)                                                # STEP 21
int3 = 4                                                                # STEP 22
result = avl0.find(int1)                                                # STEP 23
int1 = 15                                                               # STEP 24
avl0.delete(int2)                                                       # STEP 25
avl2 = avl.AVLTree()                                                    # STEP 26
avl2.insert(int0)                                                       # STEP 27
avl0.insert(int3)                                                       # STEP 28
result = avl0.inorder()                                                 # STEP 29
int0 = 2                                                                # STEP 30
int2 = 9                                                                # STEP 31
result = avl2.find(int2)                                                # STEP 32
int2 = 16                                                               # STEP 33
int3 = 13                                                               # STEP 34
result = avl0.find(int0)                                                # STEP 35
result = avl0.find(int1)                                                # STEP 36
avl0.insert(int2)                                                       # STEP 37
int2 = 12                                                               # STEP 38
int1 = 19                                                               # STEP 39
result = avl2.find(int1)                                                # STEP 40
int1 = 3                                                                # STEP 41
avl0.delete(int0)                                                       # STEP 42
int0 = 19                                                               # STEP 43
result = avl2.find(int3)                                                # STEP 44
result = avl0.find(int1)                                                # STEP 45
int3 = 8                                                                # STEP 46
int1 = 17                                                               # STEP 47
avl0.delete(int2)                                                       # STEP 48
int2 = 17                                                               # STEP 49
avl2.delete(int0)                                                       # STEP 50
int0 = 11                                                               # STEP 51
avl2.delete(int3)                                                       # STEP 52
avl2.insert(int1)                                                       # STEP 53
int1 = 10                                                               # STEP 54
int3 = 12                                                               # STEP 55
avl2.insert(int2)                                                       # STEP 56
avl2 == avl0                                                            # STEP 57
result = avl0.find(int2)                                                # STEP 58
avl0.insert(int0)                                                       # STEP 59
int2 = 11                                                               # STEP 60
result = avl2.find(int0)                                                # STEP 61
int0 = 13                                                               # STEP 62
avl2.delete(int3)                                                       # STEP 63
avl0.delete(int2)                                                       # STEP 64
int3 = 3                                                                # STEP 65
avl1 = avl.AVLTree()                                                    # STEP 66
int2 = 1                                                                # STEP 67
avl0.delete(int1)                                                       # STEP 68
result = avl1.find(int3)                                                # STEP 69
result = avl0.find(int0)                                                # STEP 70
int1 = 11                                                               # STEP 71
int3 = 17                                                               # STEP 72
avl2.delete(int0)                                                       # STEP 73
result = avl0.inorder()                                                 # STEP 74
avl1 == avl1                                                            # STEP 75
avl2 == avl2                                                            # STEP 76
avl2 == avl1                                                            # STEP 77
avl1.delete(int3)                                                       # STEP 78
avl1.delete(int0)                                                       # STEP 79
int0 = 16                                                               # STEP 80
avl2.delete(int3)                                                       # STEP 81
result = avl0.find(int3)                                                # STEP 82
int3 = 4                                                                # STEP 83
avl0 == avl1                                                            # STEP 84
result = avl0.inorder()                                                 # STEP 85
avl2 == avl1                                                            # STEP 86
result = avl2.find(int1)                                                # STEP 87
avl2.insert(int1)                                                       # STEP 88
int1 = 7                                                                # STEP 89
avl0.delete(int0)                                                       # STEP 90
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1038d0488>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
214 BRANCHES COVERED
161 STATEMENTS COVERED

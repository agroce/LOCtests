Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.99518.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  9 [2:0]
-- < 6 [1:0]
---- < 5 [0:0] L
---- > 8 [0:0] L
-- > 11 [1:-1]
---- > 17 [0:0] L
set([17, 5, 6, 8, 9, 11])
  9 [2:0]
-- < 6 [1:0]
---- < 5 [0:0] L
---- > 8 [0:0] L
-- > 17 [1:0]
---- < 11 [0:0] L
---- > 19 [0:0] L
set([17, 19, 5, 6, 8, 9, 11])
  9 [2:0]
-- < 6 [1:1]
---- < 5 [0:0] L
-- > 17 [1:0]
---- < 11 [0:0] L
---- > 19 [0:0] L
set([17, 19, 5, 6, 9, 11])
  9 [3:1]
-- < 6 [2:1]
---- < 5 [1:1]
------ < 1 [0:0] L
---- > 8 [0:0] L
-- > 17 [1:0]
---- < 11 [0:0] L
---- > 19 [0:0] L
set([17, 19, 5, 6, 1, 8, 9, 11])
  16 [2:0]
-- < 5 [1:-1]
---- > 9 [0:0] L
-- > 18 [1:0]
---- < 17 [0:0] L
---- > 20 [0:0] L
set([5, 9, 16, 17, 18, 20])
  16 [2:0]
-- < 9 [1:0]
---- < 5 [0:0] L
---- > 12 [0:0] L
-- > 18 [1:0]
---- < 17 [0:0] L
---- > 20 [0:0] L
set([5, 9, 12, 16, 17, 18, 20])
  16 [3:1]
-- < 9 [2:1]
---- < 5 [1:1]
------ < 2 [0:0] L
---- > 12 [0:0] L
-- > 18 [1:0]
---- < 17 [0:0] L
---- > 20 [0:0] L
set([2, 5, 9, 12, 16, 17, 18, 20])
  10 [2:0]
-- < 2 [1:0]
---- < 1 [0:0] L
---- > 8 [0:0] L
-- > 14 [1:-1]
---- > 18 [0:0] L
set([1, 2, 8, 10, 14, 18])
  10 [2:0]
-- < 2 [1:-1]
---- > 8 [0:0] L
-- > 15 [1:0]
---- < 14 [0:0] L
---- > 18 [0:0] L
set([2, 8, 10, 14, 15, 18])
  10 [2:0]
-- < 2 [1:-1]
---- > 8 [0:0] L
-- > 15 [1:0]
---- < 14 [0:0] L
---- > 18 [0:0] L
set([2, 8, 10, 14, 15, 18])
  10 [2:0]
-- < 2 [1:-1]
---- > 8 [0:0] L
-- > 15 [1:0]
---- < 14 [0:0] L
---- > 18 [0:0] L
set([2, 8, 10, 14, 15, 18])
TEST #4 STEP #82 (0:00:30.044789) Fri Apr 28 04:12:14 2017 [ 161 stmts 214 branches ]
  10 [2:0]
-- < 2 [1:-1]
---- > 8 [0:0] L
-- > 15 [1:0]
---- < 14 [0:0] L
---- > 18 [0:0] L
set([2, 8, 10, 14, 15, 18])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104c1d9e0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 48 steps

SAVING TEST AS failure.99518.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 14                                                                # STEP 0
ACTION: int1 = 14 
int1 = None : <type 'NoneType'>
=> int1 = 14 : <type 'int'>
==================================================
int0 = 16                                                                # STEP 1
ACTION: int0 = 16 
int0 = None : <type 'NoneType'>
=> int0 = 16 : <type 'int'>
==================================================
int2 = 10                                                                # STEP 2
ACTION: int2 = 10 
int2 = None : <type 'NoneType'>
=> int2 = 10 : <type 'int'>
==================================================
int3 = 15                                                                # STEP 3
ACTION: int3 = 15 
int3 = None : <type 'NoneType'>
=> int3 = 15 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x104944560> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1 == avl1                                                             # STEP 5
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x104944560> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.insert(int1)                                                        # STEP 6
ACTION: avl1.insert(int1) 
int1 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104944560> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([14]) : <type 'set'>
==================================================
avl1 == avl1                                                             # STEP 7
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x104944560> : <type 'instance'>
avl_REF1 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
int1 = 9                                                                 # STEP 8
ACTION: int1 = 9 
int1 = 14 : <type 'int'>
=> int1 = 9 : <type 'int'>
==================================================
avl1.insert(int0)                                                        # STEP 9
ACTION: avl1.insert(int0) 
int0 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104944560> : <type 'instance'>
avl_REF1 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([16, 14]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 10
ACTION: avl1.delete(int0) 
int0 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104944560> : <type 'instance'>
avl_REF1 = set([16, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([14]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 11
ACTION: avl1.insert(int0) 
int0 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104944560> : <type 'instance'>
avl_REF1 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([16, 14]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 12
ACTION: avl1.delete(int1) 
int1 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104944560> : <type 'instance'>
avl_REF1 = set([16, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.delete(int1)                                                       # STEP 13
ACTION: avl1.delete(int1) 
int1 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104944560> : <type 'instance'>
avl_REF1 = set([16, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.insert(int3)                                                       # STEP 14
ACTION: avl1.insert(int3) 
int3 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104944560> : <type 'instance'>
avl_REF1 = set([16, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([16, 14, 15]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 15
ACTION: avl1.insert(int3) 
int3 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104944560> : <type 'instance'>
avl_REF1 = set([16, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
avl1.insert(int3)                                                       # STEP 16
ACTION: avl1.insert(int3) 
int3 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104944560> : <type 'instance'>
avl_REF1 = set([16, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
int1 = 17                                                               # STEP 17
ACTION: int1 = 17 
int1 = 9 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 18
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x104944560> : <type 'instance'>
avl_REF1 = set([16, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
int0 = 4                                                                # STEP 19
ACTION: int0 = 4 
int0 = 16 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 20
ACTION: avl1.insert(int1) 
int1 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104944560> : <type 'instance'>
avl_REF1 = set([16, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([16, 17, 14, 15]) : <type 'set'>
==================================================
int3 = 15                                                               # STEP 21
ACTION: int3 = 15 
int3 = 15 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 22
ACTION: avl1.insert(int3) 
int3 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104944560> : <type 'instance'>
avl_REF1 = set([16, 17, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
result = avl1.inorder()                                                 # STEP 23
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104944560> : <type 'instance'>
avl_REF1 = set([16, 17, 14, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.delete(int3)                                                       # STEP 24
ACTION: avl1.delete(int3) 
int3 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104944560> : <type 'instance'>
avl_REF1 = set([16, 17, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([16, 17, 14]) : <type 'set'>
==================================================
result = avl1.find(int2)                                                # STEP 25
ACTION: result = avl1.find(int2) 
int2 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104944560> : <type 'instance'>
avl_REF1 = set([16, 17, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int3 = 16                                                               # STEP 26
ACTION: int3 = 16 
int3 = 15 : <type 'int'>
=> int3 = 16 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 27
ACTION: avl1.insert(int3) 
int3 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104944560> : <type 'instance'>
avl_REF1 = set([16, 17, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
avl1.insert(int1)                                                       # STEP 28
ACTION: avl1.insert(int1) 
int1 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104944560> : <type 'instance'>
avl_REF1 = set([16, 17, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl1.delete(int0)                                                       # STEP 29
ACTION: avl1.delete(int0) 
int0 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104944560> : <type 'instance'>
avl_REF1 = set([16, 17, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
result = avl1.inorder()                                                 # STEP 30
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104944560> : <type 'instance'>
avl_REF1 = set([16, 17, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int3 = 13                                                               # STEP 31
ACTION: int3 = 13 
int3 = 16 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 32
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104944560> : <type 'instance'>
avl_REF1 = set([16, 17, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
result = avl1.inorder()                                                 # STEP 33
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104944560> : <type 'instance'>
avl_REF1 = set([16, 17, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
result = avl1.inorder()                                                 # STEP 34
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104944560> : <type 'instance'>
avl_REF1 = set([16, 17, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
result = avl1.find(int1)                                                # STEP 35
ACTION: result = avl1.find(int1) 
int1 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104944560> : <type 'instance'>
avl_REF1 = set([16, 17, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl1.delete(int0)                                                       # STEP 36
ACTION: avl1.delete(int0) 
int0 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104944560> : <type 'instance'>
avl_REF1 = set([16, 17, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int0 = 2                                                                # STEP 37
ACTION: int0 = 2 
int0 = 4 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
int2 = 4                                                                # STEP 38
ACTION: int2 = 4 
int2 = 10 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 39
ACTION: avl1.delete(int3) 
int3 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104944560> : <type 'instance'>
avl_REF1 = set([16, 17, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
result = avl1.find(int0)                                                # STEP 40
ACTION: result = avl1.find(int0) 
int0 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104944560> : <type 'instance'>
avl_REF1 = set([16, 17, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
int3 = 20                                                               # STEP 41
ACTION: int3 = 20 
int3 = 13 : <type 'int'>
=> int3 = 20 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 42
ACTION: avl1.insert(int0) 
int0 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104944560> : <type 'instance'>
avl_REF1 = set([16, 17, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([16, 17, 2, 14]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 43
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104944560> : <type 'instance'>
avl_REF1 = set([16, 17, 2, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int0)                                                       # STEP 44
ACTION: avl1.insert(int0) 
int0 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104944560> : <type 'instance'>
avl_REF1 = set([16, 17, 2, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
result = avl1.find(int3)                                                # STEP 45
ACTION: result = avl1.find(int3) 
int3 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104944560> : <type 'instance'>
avl_REF1 = set([16, 17, 2, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
result = avl1.inorder()                                                 # STEP 46
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104944560> : <type 'instance'>
avl_REF1 = set([16, 17, 2, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.delete(int1)                                                       # STEP 47
ACTION: avl1.delete(int1) 
int1 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104944560> : <type 'instance'>
avl_REF1 = set([16, 17, 2, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([16, 2, 14]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105111830>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
  6 [2:0]
-- < 5 [1:1]
---- < 3 [0:0] L
-- > 13 [1:0]
---- < 10 [0:0] L
---- > 17 [0:0] L
set([3, 5, 6, 10, 13, 17])
  5 [2:0]
-- < 4 [1:1]
---- < 2 [0:0] L
-- > 11 [1:0]
---- < 9 [0:0] L
---- > 14 [0:0] L
set([2, 4, 5, 9, 11, 14])
  11 [2:0]
-- < 6 [1:0]
---- < 1 [0:0] L
---- > 8 [0:0] L
-- > 12 [1:-1]
---- > 17 [0:0] L
set([1, 6, 8, 11, 12, 17])
  11 [2:0]
-- < 8 [1:1]
---- < 1 [0:0] L
-- > 17 [1:0]
---- < 13 [0:0] L
---- > 19 [0:0] L
set([1, 8, 11, 13, 17, 19])
  10 [3:1]
-- < 7 [2:1]
---- < 2 [1:-1]
------ > 5 [0:0] L
---- > 9 [0:0] L
-- > 14 [1:-1]
---- > 20 [0:0] L
set([2, 5, 7, 9, 10, 14, 20])
  10 [3:1]
-- < 7 [2:1]
---- < 2 [1:-1]
------ > 5 [0:0] L
---- > 9 [0:0] L
-- > 14 [1:-1]
---- > 20 [0:0] L
set([2, 5, 7, 9, 10, 14, 20])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1050d9368>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
Original test has 60 steps

SAVING TEST AS failure.99518.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 1                                                                 # STEP 0
ACTION: int2 = 1 
int2 = None : <type 'NoneType'>
=> int2 = 1 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 1
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x10501b878> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int3 = 2                                                                 # STEP 2
ACTION: int3 = 2 
int3 = None : <type 'NoneType'>
=> int3 = 2 : <type 'int'>
==================================================
int1 = 20                                                                # STEP 3
ACTION: int1 = 20 
int1 = None : <type 'NoneType'>
=> int1 = 20 : <type 'int'>
==================================================
result = avl0.inorder()                                                  # STEP 4
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x10501b878> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int0 = 5                                                                 # STEP 5
ACTION: int0 = 5 
int0 = None : <type 'NoneType'>
=> int0 = 5 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 6
ACTION: avl0 = avl.AVLTree() 
avl0 = <avl.AVLTree instance at 0x10501b878> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
=> avl0 = <avl.AVLTree instance at 0x1050d9f38> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
==================================================
avl0.delete(int1)                                                        # STEP 7
ACTION: avl0.delete(int1) 
int1 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1050d9f38> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
result = avl0.inorder()                                                  # STEP 8
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x1050d9f38> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.delete(int2)                                                        # STEP 9
ACTION: avl0.delete(int2) 
int2 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1050d9f38> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int2 = 9                                                                # STEP 10
ACTION: int2 = 9 
int2 = 1 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
avl0 == avl0                                                            # STEP 11
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x1050d9f38> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
result = avl0.inorder()                                                 # STEP 12
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x1050d9f38> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int2)                                                       # STEP 13
ACTION: avl0.insert(int2) 
int2 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1050d9f38> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([9]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 14
ACTION: avl0.delete(int3) 
int3 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1050d9f38> : <type 'instance'>
avl_REF0 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.insert(int1)                                                       # STEP 15
ACTION: avl0.insert(int1) 
int1 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1050d9f38> : <type 'instance'>
avl_REF0 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([9, 20]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 16
ACTION: avl0.insert(int3) 
int3 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1050d9f38> : <type 'instance'>
avl_REF0 = set([9, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([9, 2, 20]) : <type 'set'>
==================================================
int3 = 14                                                               # STEP 17
ACTION: int3 = 14 
int3 = 2 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 18
ACTION: avl0.insert(int3) 
int3 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1050d9f38> : <type 'instance'>
avl_REF0 = set([9, 2, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([9, 2, 20, 14]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 19
ACTION: avl0.delete(int0) 
int0 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1050d9f38> : <type 'instance'>
avl_REF0 = set([9, 2, 20, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int3 = 13                                                               # STEP 20
ACTION: int3 = 13 
int3 = 14 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 21
ACTION: avl0.insert(int0) 
int0 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1050d9f38> : <type 'instance'>
avl_REF0 = set([9, 2, 20, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([9, 2, 20, 5, 14]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 22
ACTION: avl0.insert(int1) 
int1 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1050d9f38> : <type 'instance'>
avl_REF0 = set([9, 2, 20, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl0.delete(int2)                                                       # STEP 23
ACTION: avl0.delete(int2) 
int2 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1050d9f38> : <type 'instance'>
avl_REF0 = set([9, 2, 20, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([2, 20, 5, 14]) : <type 'set'>
==================================================
result = avl0.find(int1)                                                # STEP 24
ACTION: result = avl0.find(int1) 
int1 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1050d9f38> : <type 'instance'>
avl_REF0 = set([2, 20, 5, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
result = avl0.inorder()                                                 # STEP 25
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x1050d9f38> : <type 'instance'>
avl_REF0 = set([2, 20, 5, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int1 = 2                                                                # STEP 26
ACTION: int1 = 2 
int1 = 20 : <type 'int'>
=> int1 = 2 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 27
ACTION: avl0.delete(int3) 
int3 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1050d9f38> : <type 'instance'>
avl_REF0 = set([2, 20, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int3 = 10                                                               # STEP 28
ACTION: int3 = 10 
int3 = 13 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 29
ACTION: avl0.insert(int2) 
int2 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1050d9f38> : <type 'instance'>
avl_REF0 = set([2, 20, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([9, 2, 20, 5, 14]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 30
ACTION: avl0.delete(int2) 
int2 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1050d9f38> : <type 'instance'>
avl_REF0 = set([9, 2, 20, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([2, 20, 5, 14]) : <type 'set'>
==================================================
int0 = 5                                                                # STEP 31
ACTION: int0 = 5 
int0 = 5 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 32
ACTION: avl0.insert(int0) 
int0 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1050d9f38> : <type 'instance'>
avl_REF0 = set([2, 20, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
avl0.insert(int3)                                                       # STEP 33
ACTION: avl0.insert(int3) 
int3 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1050d9f38> : <type 'instance'>
avl_REF0 = set([2, 20, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([2, 5, 10, 14, 20]) : <type 'set'>
==================================================
int3 = 7                                                                # STEP 34
ACTION: int3 = 7 
int3 = 10 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 35
ACTION: avl0.delete(int2) 
int2 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1050d9f38> : <type 'instance'>
avl_REF0 = set([2, 5, 10, 14, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.insert(int1)                                                       # STEP 36
ACTION: avl0.insert(int1) 
int1 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1050d9f38> : <type 'instance'>
avl_REF0 = set([2, 5, 10, 14, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl0.insert(int2)                                                       # STEP 37
ACTION: avl0.insert(int2) 
int2 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1050d9f38> : <type 'instance'>
avl_REF0 = set([2, 5, 10, 14, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([2, 5, 9, 10, 14, 20]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 38
ACTION: avl0.insert(int1) 
int1 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1050d9f38> : <type 'instance'>
avl_REF0 = set([2, 5, 9, 10, 14, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl0.insert(int0)                                                       # STEP 39
ACTION: avl0.insert(int0) 
int0 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1050d9f38> : <type 'instance'>
avl_REF0 = set([2, 5, 9, 10, 14, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
result = avl0.inorder()                                                 # STEP 40
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x1050d9f38> : <type 'instance'>
avl_REF0 = set([2, 5, 9, 10, 14, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int2 = 4                                                                # STEP 41
ACTION: int2 = 4 
int2 = 9 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 42
ACTION: avl0.delete(int3) 
int3 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1050d9f38> : <type 'instance'>
avl_REF0 = set([2, 5, 9, 10, 14, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.delete(int3)                                                       # STEP 43
ACTION: avl0.delete(int3) 
int3 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1050d9f38> : <type 'instance'>
avl_REF0 = set([2, 5, 9, 10, 14, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.insert(int3)                                                       # STEP 44
ACTION: avl0.insert(int3) 
int3 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1050d9f38> : <type 'instance'>
avl_REF0 = set([2, 5, 9, 10, 14, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([2, 5, 7, 9, 10, 14, 20]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 45
ACTION: avl0.insert(int0) 
int0 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1050d9f38> : <type 'instance'>
avl_REF0 = set([2, 5, 7, 9, 10, 14, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
avl1 = avl.AVLTree()                                                    # STEP 46
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x104fbcc20> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 47
ACTION: avl0.delete(int0) 
int0 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1050d9f38> : <type 'instance'>
avl_REF0 = set([2, 5, 7, 9, 10, 14, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([2, 7, 9, 10, 14, 20]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 48
ACTION: avl0.insert(int0) 
int0 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1050d9f38> : <type 'instance'>
avl_REF0 = set([2, 7, 9, 10, 14, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([2, 5, 7, 9, 10, 14, 20]) : <type 'set'>
==================================================
int0 = 20                                                               # STEP 49
ACTION: int0 = 20 
int0 = 5 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
result = avl1.find(int1)                                                # STEP 50
ACTION: result = avl1.find(int1) 
int1 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104fbcc20> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
result = avl0.inorder()                                                 # STEP 51
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x1050d9f38> : <type 'instance'>
avl_REF0 = set([2, 5, 7, 9, 10, 14, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl1.insert(int0)                                                       # STEP 52
ACTION: avl1.insert(int0) 
int0 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104fbcc20> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([20]) : <type 'set'>
==================================================
avl0.display()                                                          # STEP 53
ACTION: avl0.display() 
avl0 = <avl.AVLTree instance at 0x1050d9f38> : <type 'instance'>
avl_REF0 = set([2, 5, 7, 9, 10, 14, 20]) : <type 'set'>
  10 [3:1]
-- < 7 [2:1]
---- < 2 [1:-1]
------ > 5 [0:0] L
---- > 9 [0:0] L
-- > 14 [1:-1]
---- > 20 [0:0] L
REFERENCE ACTION: print(avl_REF0) 
set([2, 5, 7, 9, 10, 14, 20])
==================================================
avl0.insert(int3)                                                       # STEP 54
ACTION: avl0.insert(int3) 
int3 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1050d9f38> : <type 'instance'>
avl_REF0 = set([2, 5, 7, 9, 10, 14, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
avl0.display()                                                          # STEP 55
ACTION: avl0.display() 
avl0 = <avl.AVLTree instance at 0x1050d9f38> : <type 'instance'>
avl_REF0 = set([2, 5, 7, 9, 10, 14, 20]) : <type 'set'>
  10 [3:1]
-- < 7 [2:1]
---- < 2 [1:-1]
------ > 5 [0:0] L
---- > 9 [0:0] L
-- > 14 [1:-1]
---- > 20 [0:0] L
REFERENCE ACTION: print(avl_REF0) 
set([2, 5, 7, 9, 10, 14, 20])
==================================================
int3 = 19                                                               # STEP 56
ACTION: int3 = 19 
int3 = 7 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 57
ACTION: avl1.delete(int0) 
int0 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104fbcc20> : <type 'instance'>
avl_REF1 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int0 = 9                                                                # STEP 58
ACTION: int0 = 9 
int0 = 20 : <type 'int'>
=> int0 = 9 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 59
ACTION: avl0.delete(int0) 
int0 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1050d9f38> : <type 'instance'>
avl_REF0 = set([2, 5, 7, 9, 10, 14, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([2, 5, 7, 10, 14, 20]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10500ec68>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 0
STOPPING TESTING DUE TO TIMEOUT
8.58500169664 PERCENT COVERED
62.6186039448 TOTAL RUNTIME
9 EXECUTED
708 TOTAL TEST OPERATIONS
27.0819561481 TIME SPENT EXECUTING TEST OPERATIONS
0.0773251056671 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
27.1505503654 TIME SPENT CHECKING PROPERTIES
54.2325065136 TOTAL TIME SPENT RUNNING SUT
0.00499272346497 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
2 FAILED
0 REPEATS OF FAILURES
2 ACTUAL DISTINCT FAILURES

FAILURE 0
int1 = 14                                                                # STEP 0
int0 = 16                                                                # STEP 1
int2 = 10                                                                # STEP 2
int3 = 15                                                                # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
avl1 == avl1                                                             # STEP 5
avl1.insert(int1)                                                        # STEP 6
avl1 == avl1                                                             # STEP 7
int1 = 9                                                                 # STEP 8
avl1.insert(int0)                                                        # STEP 9
avl1.delete(int0)                                                       # STEP 10
avl1.insert(int0)                                                       # STEP 11
avl1.delete(int1)                                                       # STEP 12
avl1.delete(int1)                                                       # STEP 13
avl1.insert(int3)                                                       # STEP 14
avl1.insert(int3)                                                       # STEP 15
avl1.insert(int3)                                                       # STEP 16
int1 = 17                                                               # STEP 17
avl1 == avl1                                                            # STEP 18
int0 = 4                                                                # STEP 19
avl1.insert(int1)                                                       # STEP 20
int3 = 15                                                               # STEP 21
avl1.insert(int3)                                                       # STEP 22
result = avl1.inorder()                                                 # STEP 23
avl1.delete(int3)                                                       # STEP 24
result = avl1.find(int2)                                                # STEP 25
int3 = 16                                                               # STEP 26
avl1.insert(int3)                                                       # STEP 27
avl1.insert(int1)                                                       # STEP 28
avl1.delete(int0)                                                       # STEP 29
result = avl1.inorder()                                                 # STEP 30
int3 = 13                                                               # STEP 31
result = avl1.inorder()                                                 # STEP 32
result = avl1.inorder()                                                 # STEP 33
result = avl1.inorder()                                                 # STEP 34
result = avl1.find(int1)                                                # STEP 35
avl1.delete(int0)                                                       # STEP 36
int0 = 2                                                                # STEP 37
int2 = 4                                                                # STEP 38
avl1.delete(int3)                                                       # STEP 39
result = avl1.find(int0)                                                # STEP 40
int3 = 20                                                               # STEP 41
avl1.insert(int0)                                                       # STEP 42
result = avl1.inorder()                                                 # STEP 43
avl1.insert(int0)                                                       # STEP 44
result = avl1.find(int3)                                                # STEP 45
result = avl1.inorder()                                                 # STEP 46
avl1.delete(int1)                                                       # STEP 47
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105111830>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE 1
int2 = 1                                                                 # STEP 0
avl0 = avl.AVLTree()                                                     # STEP 1
int3 = 2                                                                 # STEP 2
int1 = 20                                                                # STEP 3
result = avl0.inorder()                                                  # STEP 4
int0 = 5                                                                 # STEP 5
avl0 = avl.AVLTree()                                                     # STEP 6
avl0.delete(int1)                                                        # STEP 7
result = avl0.inorder()                                                  # STEP 8
avl0.delete(int2)                                                        # STEP 9
int2 = 9                                                                # STEP 10
avl0 == avl0                                                            # STEP 11
result = avl0.inorder()                                                 # STEP 12
avl0.insert(int2)                                                       # STEP 13
avl0.delete(int3)                                                       # STEP 14
avl0.insert(int1)                                                       # STEP 15
avl0.insert(int3)                                                       # STEP 16
int3 = 14                                                               # STEP 17
avl0.insert(int3)                                                       # STEP 18
avl0.delete(int0)                                                       # STEP 19
int3 = 13                                                               # STEP 20
avl0.insert(int0)                                                       # STEP 21
avl0.insert(int1)                                                       # STEP 22
avl0.delete(int2)                                                       # STEP 23
result = avl0.find(int1)                                                # STEP 24
result = avl0.inorder()                                                 # STEP 25
int1 = 2                                                                # STEP 26
avl0.delete(int3)                                                       # STEP 27
int3 = 10                                                               # STEP 28
avl0.insert(int2)                                                       # STEP 29
avl0.delete(int2)                                                       # STEP 30
int0 = 5                                                                # STEP 31
avl0.insert(int0)                                                       # STEP 32
avl0.insert(int3)                                                       # STEP 33
int3 = 7                                                                # STEP 34
avl0.delete(int2)                                                       # STEP 35
avl0.insert(int1)                                                       # STEP 36
avl0.insert(int2)                                                       # STEP 37
avl0.insert(int1)                                                       # STEP 38
avl0.insert(int0)                                                       # STEP 39
result = avl0.inorder()                                                 # STEP 40
int2 = 4                                                                # STEP 41
avl0.delete(int3)                                                       # STEP 42
avl0.delete(int3)                                                       # STEP 43
avl0.insert(int3)                                                       # STEP 44
avl0.insert(int0)                                                       # STEP 45
avl1 = avl.AVLTree()                                                    # STEP 46
avl0.delete(int0)                                                       # STEP 47
avl0.insert(int0)                                                       # STEP 48
int0 = 20                                                               # STEP 49
result = avl1.find(int1)                                                # STEP 50
result = avl0.inorder()                                                 # STEP 51
avl1.insert(int0)                                                       # STEP 52
avl0.display()                                                          # STEP 53
avl0.insert(int3)                                                       # STEP 54
avl0.display()                                                          # STEP 55
int3 = 19                                                               # STEP 56
avl1.delete(int0)                                                       # STEP 57
int0 = 9                                                                # STEP 58
avl0.delete(int0)                                                       # STEP 59
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10500ec68>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
216 BRANCHES COVERED
162 STATEMENTS COVERED

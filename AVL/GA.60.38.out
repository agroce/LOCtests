Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.14246.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103c00fc8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
Original test has 59 steps

SAVING TEST AS failure.14246.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 10                                                                # STEP 0
ACTION: int3 = 10 
int3 = None : <type 'NoneType'>
=> int3 = 10 : <type 'int'>
==================================================
int0 = 1                                                                 # STEP 1
ACTION: int0 = 1 
int0 = None : <type 'NoneType'>
=> int0 = 1 : <type 'int'>
==================================================
int1 = 6                                                                 # STEP 2
ACTION: int1 = 6 
int1 = None : <type 'NoneType'>
=> int1 = 6 : <type 'int'>
==================================================
int2 = 10                                                                # STEP 3
ACTION: int2 = 10 
int2 = None : <type 'NoneType'>
=> int2 = 10 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 4
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x103e5f4d0> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 5
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x103e5f128> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl0.inorder()                                                  # STEP 6
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x103e5f4d0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0 == avl0                                                             # STEP 7
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x103e5f4d0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl0.delete(int2)                                                        # STEP 8
ACTION: avl0.delete(int2) 
int2 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103e5f4d0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int2 = 7                                                                 # STEP 9
ACTION: int2 = 7 
int2 = 10 : <type 'int'>
=> int2 = 7 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 10
ACTION: avl0.insert(int2) 
int2 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103e5f4d0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([7]) : <type 'set'>
==================================================
result = avl0.find(int3)                                                # STEP 11
ACTION: result = avl0.find(int3) 
int3 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103e5f4d0> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
int3 = 17                                                               # STEP 12
ACTION: int3 = 17 
int3 = 10 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 13
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x103e5f4d0> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.delete(int3)                                                       # STEP 14
ACTION: avl0.delete(int3) 
int3 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103e5f4d0> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
result = avl0.find(int2)                                                # STEP 15
ACTION: result = avl0.find(int2) 
int2 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103e5f4d0> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
result = avl2.find(int0)                                                # STEP 16
ACTION: result = avl2.find(int0) 
int0 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103e5f128> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
int0 = 12                                                               # STEP 17
ACTION: int0 = 12 
int0 = 1 : <type 'int'>
=> int0 = 12 : <type 'int'>
==================================================
int2 = 10                                                               # STEP 18
ACTION: int2 = 10 
int2 = 7 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
int3 = 8                                                                # STEP 19
ACTION: int3 = 8 
int3 = 17 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 20
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x103e5f128> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl1 = avl.AVLTree()                                                    # STEP 21
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x103a733f8> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 22
ACTION: avl2.delete(int2) 
int2 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103e5f128> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int2 = 19                                                               # STEP 23
ACTION: int2 = 19 
int2 = 10 : <type 'int'>
=> int2 = 19 : <type 'int'>
==================================================
result = avl0.find(int3)                                                # STEP 24
ACTION: result = avl0.find(int3) 
int3 = 8 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103e5f4d0> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
avl0.insert(int2)                                                       # STEP 25
ACTION: avl0.insert(int2) 
int2 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103e5f4d0> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([19, 7]) : <type 'set'>
==================================================
int3 = 20                                                               # STEP 26
ACTION: int3 = 20 
int3 = 8 : <type 'int'>
=> int3 = 20 : <type 'int'>
==================================================
int2 = 2                                                                # STEP 27
ACTION: int2 = 2 
int2 = 19 : <type 'int'>
=> int2 = 2 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 28
ACTION: avl0.insert(int0) 
int0 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103e5f4d0> : <type 'instance'>
avl_REF0 = set([19, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([19, 12, 7]) : <type 'set'>
==================================================
result = avl1.find(int1)                                                # STEP 29
ACTION: result = avl1.find(int1) 
int1 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103a733f8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl0.insert(int2)                                                       # STEP 30
ACTION: avl0.insert(int2) 
int2 = 2 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103e5f4d0> : <type 'instance'>
avl_REF0 = set([19, 12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([2, 19, 12, 7]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 31
ACTION: avl2.delete(int0) 
int0 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103e5f128> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int2 = 15                                                               # STEP 32
ACTION: int2 = 15 
int2 = 2 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 33
ACTION: avl0.delete(int1) 
int1 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103e5f4d0> : <type 'instance'>
avl_REF0 = set([2, 19, 12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int1 = 19                                                               # STEP 34
ACTION: int1 = 19 
int1 = 6 : <type 'int'>
=> int1 = 19 : <type 'int'>
==================================================
result = avl0.find(int2)                                                # STEP 35
ACTION: result = avl0.find(int2) 
int2 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103e5f4d0> : <type 'instance'>
avl_REF0 = set([2, 19, 12, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
result = avl2.find(int0)                                                # STEP 36
ACTION: result = avl2.find(int0) 
int0 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103e5f128> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl1 == avl0                                                            # STEP 37
ACTION: avl1 == avl0 
avl1 = <avlbug2.AVLTree instance at 0x103a733f8> : <type 'instance'>
avl0 = <avlbug2.AVLTree instance at 0x103e5f4d0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
avl_REF0 = set([2, 19, 12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
int2 = 7                                                                # STEP 38
ACTION: int2 = 7 
int2 = 15 : <type 'int'>
=> int2 = 7 : <type 'int'>
==================================================
int0 = 5                                                                # STEP 39
ACTION: int0 = 5 
int0 = 12 : <type 'int'>
=> int0 = 5 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 40
ACTION: avl2.insert(int2) 
int2 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103e5f128> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([7]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 41
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x103a733f8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl2 == avl0                                                            # STEP 42
ACTION: avl2 == avl0 
avl2 = <avlbug2.AVLTree instance at 0x103e5f128> : <type 'instance'>
avl0 = <avlbug2.AVLTree instance at 0x103e5f4d0> : <type 'instance'>
avl_REF2 = set([7]) : <type 'set'>
avl_REF0 = set([2, 19, 12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF0 
==================================================
result = avl0.find(int2)                                                # STEP 43
ACTION: result = avl0.find(int2) 
int2 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103e5f4d0> : <type 'instance'>
avl_REF0 = set([2, 19, 12, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl1.delete(int1)                                                       # STEP 44
ACTION: avl1.delete(int1) 
int1 = 19 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103a733f8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int1 = 15                                                               # STEP 45
ACTION: int1 = 15 
int1 = 19 : <type 'int'>
=> int1 = 15 : <type 'int'>
==================================================
int2 = 16                                                               # STEP 46
ACTION: int2 = 16 
int2 = 7 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
avl2 == avl1                                                            # STEP 47
ACTION: avl2 == avl1 
avl2 = <avlbug2.AVLTree instance at 0x103e5f128> : <type 'instance'>
avl1 = <avlbug2.AVLTree instance at 0x103a733f8> : <type 'instance'>
avl_REF2 = set([7]) : <type 'set'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
avl1 == avl1                                                            # STEP 48
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x103a733f8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
result = avl0.find(int3)                                                # STEP 49
ACTION: result = avl0.find(int3) 
int3 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103e5f4d0> : <type 'instance'>
avl_REF0 = set([2, 19, 12, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
result = avl2.find(int1)                                                # STEP 50
ACTION: result = avl2.find(int1) 
int1 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103e5f128> : <type 'instance'>
avl_REF2 = set([7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl2.insert(int0)                                                       # STEP 51
ACTION: avl2.insert(int0) 
int0 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103e5f128> : <type 'instance'>
avl_REF2 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([5, 7]) : <type 'set'>
==================================================
int1 = 17                                                               # STEP 52
ACTION: int1 = 17 
int1 = 15 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
int3 = 17                                                               # STEP 53
ACTION: int3 = 17 
int3 = 20 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
int0 = 6                                                                # STEP 54
ACTION: int0 = 6 
int0 = 5 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
result = avl2.find(int3)                                                # STEP 55
ACTION: result = avl2.find(int3) 
int3 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103e5f128> : <type 'instance'>
avl_REF2 = set([5, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
int3 = 12                                                               # STEP 56
ACTION: int3 = 12 
int3 = 17 : <type 'int'>
=> int3 = 12 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 57
ACTION: avl1.insert(int0) 
int0 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103a733f8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([6]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 58
ACTION: avl0.delete(int3) 
int3 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103e5f4d0> : <type 'instance'>
avl_REF0 = set([2, 19, 12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([2, 19, 7]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10385b908>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #3 STEP #68 (0:00:30.064332) Sun Apr 30 03:38:59 2017 [ 142 stmts 187 branches ]
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 51
STOPPING TESTING DUE TO TIMEOUT
8.10989738497 PERCENT COVERED
60.261868 TOTAL RUNTIME
6 EXECUTED
510 TOTAL TEST OPERATIONS
26.9021611214 TIME SPENT EXECUTING TEST OPERATIONS
0.0196793079376 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
26.9991004467 TIME SPENT CHECKING PROPERTIES
53.9012615681 TOTAL TIME SPENT RUNNING SUT
0.00462603569031 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int3 = 10                                                                # STEP 0
int0 = 1                                                                 # STEP 1
int1 = 6                                                                 # STEP 2
int2 = 10                                                                # STEP 3
avl0 = avl.AVLTree()                                                     # STEP 4
avl2 = avl.AVLTree()                                                     # STEP 5
result = avl0.inorder()                                                  # STEP 6
avl0 == avl0                                                             # STEP 7
avl0.delete(int2)                                                        # STEP 8
int2 = 7                                                                 # STEP 9
avl0.insert(int2)                                                       # STEP 10
result = avl0.find(int3)                                                # STEP 11
int3 = 17                                                               # STEP 12
result = avl0.inorder()                                                 # STEP 13
avl0.delete(int3)                                                       # STEP 14
result = avl0.find(int2)                                                # STEP 15
result = avl2.find(int0)                                                # STEP 16
int0 = 12                                                               # STEP 17
int2 = 10                                                               # STEP 18
int3 = 8                                                                # STEP 19
result = avl2.inorder()                                                 # STEP 20
avl1 = avl.AVLTree()                                                    # STEP 21
avl2.delete(int2)                                                       # STEP 22
int2 = 19                                                               # STEP 23
result = avl0.find(int3)                                                # STEP 24
avl0.insert(int2)                                                       # STEP 25
int3 = 20                                                               # STEP 26
int2 = 2                                                                # STEP 27
avl0.insert(int0)                                                       # STEP 28
result = avl1.find(int1)                                                # STEP 29
avl0.insert(int2)                                                       # STEP 30
avl2.delete(int0)                                                       # STEP 31
int2 = 15                                                               # STEP 32
avl0.delete(int1)                                                       # STEP 33
int1 = 19                                                               # STEP 34
result = avl0.find(int2)                                                # STEP 35
result = avl2.find(int0)                                                # STEP 36
avl1 == avl0                                                            # STEP 37
int2 = 7                                                                # STEP 38
int0 = 5                                                                # STEP 39
avl2.insert(int2)                                                       # STEP 40
result = avl1.inorder()                                                 # STEP 41
avl2 == avl0                                                            # STEP 42
result = avl0.find(int2)                                                # STEP 43
avl1.delete(int1)                                                       # STEP 44
int1 = 15                                                               # STEP 45
int2 = 16                                                               # STEP 46
avl2 == avl1                                                            # STEP 47
avl1 == avl1                                                            # STEP 48
result = avl0.find(int3)                                                # STEP 49
result = avl2.find(int1)                                                # STEP 50
avl2.insert(int0)                                                       # STEP 51
int1 = 17                                                               # STEP 52
int3 = 17                                                               # STEP 53
int0 = 6                                                                # STEP 54
result = avl2.find(int3)                                                # STEP 55
int3 = 12                                                               # STEP 56
avl1.insert(int0)                                                       # STEP 57
avl0.delete(int3)                                                       # STEP 58
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10385b908>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
202 BRANCHES COVERED
151 STATEMENTS COVERED

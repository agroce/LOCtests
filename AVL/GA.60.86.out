Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.14897.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10341bef0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
Original test has 60 steps

SAVING TEST AS failure.14897.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 9                                                                 # STEP 0
ACTION: int2 = 9 
int2 = None : <type 'NoneType'>
=> int2 = 9 : <type 'int'>
==================================================
int3 = 14                                                                # STEP 1
ACTION: int3 = 14 
int3 = None : <type 'NoneType'>
=> int3 = 14 : <type 'int'>
==================================================
int0 = 7                                                                 # STEP 2
ACTION: int0 = 7 
int0 = None : <type 'NoneType'>
=> int0 = 7 : <type 'int'>
==================================================
int1 = 10                                                                # STEP 3
ACTION: int1 = 10 
int1 = None : <type 'NoneType'>
=> int1 = 10 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x10334f488> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
result = avl1.find(int2)                                                 # STEP 5
ACTION: result = avl1.find(int2) 
int2 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10334f488> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl1.delete(int0)                                                        # STEP 6
ACTION: avl1.delete(int0) 
int0 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10334f488> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl0 = avl.AVLTree()                                                     # STEP 7
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x1026ab368> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.insert(int1)                                                        # STEP 8
ACTION: avl0.insert(int1) 
int1 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1026ab368> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([10]) : <type 'set'>
==================================================
result = avl1.find(int2)                                                 # STEP 9
ACTION: result = avl1.find(int2) 
int2 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10334f488> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int0 = 6                                                                # STEP 10
ACTION: int0 = 6 
int0 = 7 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
result = avl0.find(int3)                                                # STEP 11
ACTION: result = avl0.find(int3) 
int3 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1026ab368> : <type 'instance'>
avl_REF0 = set([10]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
int1 = 20                                                               # STEP 12
ACTION: int1 = 20 
int1 = 10 : <type 'int'>
=> int1 = 20 : <type 'int'>
==================================================
int3 = 9                                                                # STEP 13
ACTION: int3 = 9 
int3 = 14 : <type 'int'>
=> int3 = 9 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 14
ACTION: avl1.delete(int0) 
int0 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10334f488> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
result = avl0.inorder()                                                 # STEP 15
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x1026ab368> : <type 'instance'>
avl_REF0 = set([10]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int2 = 15                                                               # STEP 16
ACTION: int2 = 15 
int2 = 9 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 17
ACTION: avl0.insert(int0) 
int0 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1026ab368> : <type 'instance'>
avl_REF0 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([10, 6]) : <type 'set'>
==================================================
int0 = 20                                                               # STEP 18
ACTION: int0 = 20 
int0 = 6 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 19
ACTION: avl1.insert(int3) 
int3 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10334f488> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([9]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 20
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x10334f488> : <type 'instance'>
avl_REF1 = set([9]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.delete(int2)                                                       # STEP 21
ACTION: avl1.delete(int2) 
int2 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10334f488> : <type 'instance'>
avl_REF1 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl0.delete(int2)                                                       # STEP 22
ACTION: avl0.delete(int2) 
int2 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1026ab368> : <type 'instance'>
avl_REF0 = set([10, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int3 = 18                                                               # STEP 23
ACTION: int3 = 18 
int3 = 9 : <type 'int'>
=> int3 = 18 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 24
ACTION: avl1 = avl.AVLTree() 
avl1 = <avlbug2.AVLTree instance at 0x10334f488> : <type 'instance'>
avl_REF1 = set([9]) : <type 'set'>
=> avl1 = <avlbug2.AVLTree instance at 0x103333d88> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 25
ACTION: avl0.insert(int3) 
int3 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1026ab368> : <type 'instance'>
avl_REF0 = set([10, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([10, 18, 6]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 26
ACTION: avl0.insert(int1) 
int1 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1026ab368> : <type 'instance'>
avl_REF0 = set([10, 18, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([10, 20, 18, 6]) : <type 'set'>
==================================================
int3 = 19                                                               # STEP 27
ACTION: int3 = 19 
int3 = 18 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
int2 = 10                                                               # STEP 28
ACTION: int2 = 10 
int2 = 15 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
int1 = 1                                                                # STEP 29
ACTION: int1 = 1 
int1 = 20 : <type 'int'>
=> int1 = 1 : <type 'int'>
==================================================
avl0 == avl1                                                            # STEP 30
ACTION: avl0 == avl1 
avl0 = <avlbug2.AVLTree instance at 0x1026ab368> : <type 'instance'>
avl1 = <avlbug2.AVLTree instance at 0x103333d88> : <type 'instance'>
avl_REF0 = set([10, 20, 18, 6]) : <type 'set'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF1 
==================================================
avl1.insert(int0)                                                       # STEP 31
ACTION: avl1.insert(int0) 
int0 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103333d88> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([20]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 32
ACTION: avl0.insert(int1) 
int1 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1026ab368> : <type 'instance'>
avl_REF0 = set([10, 20, 18, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([1, 10, 20, 18, 6]) : <type 'set'>
==================================================
int1 = 13                                                               # STEP 33
ACTION: int1 = 13 
int1 = 1 : <type 'int'>
=> int1 = 13 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 34
ACTION: avl1.insert(int0) 
int0 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103333d88> : <type 'instance'>
avl_REF1 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
int0 = 18                                                               # STEP 35
ACTION: int0 = 18 
int0 = 20 : <type 'int'>
=> int0 = 18 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 36
ACTION: avl0.insert(int0) 
int0 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1026ab368> : <type 'instance'>
avl_REF0 = set([1, 10, 20, 18, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
avl0.delete(int3)                                                       # STEP 37
ACTION: avl0.delete(int3) 
int3 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1026ab368> : <type 'instance'>
avl_REF0 = set([1, 10, 20, 18, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl1 == avl1                                                            # STEP 38
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x103333d88> : <type 'instance'>
avl_REF1 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl0.delete(int0)                                                       # STEP 39
ACTION: avl0.delete(int0) 
int0 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1026ab368> : <type 'instance'>
avl_REF0 = set([1, 10, 20, 18, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([1, 10, 20, 6]) : <type 'set'>
==================================================
int3 = 13                                                               # STEP 40
ACTION: int3 = 13 
int3 = 19 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
int0 = 16                                                               # STEP 41
ACTION: int0 = 16 
int0 = 18 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
avl0 == avl0                                                            # STEP 42
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x1026ab368> : <type 'instance'>
avl_REF0 = set([1, 10, 20, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl1.delete(int1)                                                       # STEP 43
ACTION: avl1.delete(int1) 
int1 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103333d88> : <type 'instance'>
avl_REF1 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
result = avl0.find(int1)                                                # STEP 44
ACTION: result = avl0.find(int1) 
int1 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1026ab368> : <type 'instance'>
avl_REF0 = set([1, 10, 20, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl1.insert(int3)                                                       # STEP 45
ACTION: avl1.insert(int3) 
int3 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103333d88> : <type 'instance'>
avl_REF1 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([20, 13]) : <type 'set'>
==================================================
int3 = 12                                                               # STEP 46
ACTION: int3 = 12 
int3 = 13 : <type 'int'>
=> int3 = 12 : <type 'int'>
==================================================
int1 = 17                                                               # STEP 47
ACTION: int1 = 17 
int1 = 13 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 48
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x103333d88> : <type 'instance'>
avl_REF1 = set([20, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl0 == avl0                                                            # STEP 49
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x1026ab368> : <type 'instance'>
avl_REF0 = set([1, 10, 20, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl2 = avl.AVLTree()                                                    # STEP 50
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x10335ce18> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl1.find(int1)                                                # STEP 51
ACTION: result = avl1.find(int1) 
int1 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103333d88> : <type 'instance'>
avl_REF1 = set([20, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int1 = 20                                                               # STEP 52
ACTION: int1 = 20 
int1 = 17 : <type 'int'>
=> int1 = 20 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 53
ACTION: avl0.insert(int1) 
int1 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1026ab368> : <type 'instance'>
avl_REF0 = set([1, 10, 20, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
result = avl2.find(int2)                                                # STEP 54
ACTION: result = avl2.find(int2) 
int2 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10335ce18> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int1 = 1                                                                # STEP 55
ACTION: int1 = 1 
int1 = 20 : <type 'int'>
=> int1 = 1 : <type 'int'>
==================================================
avl2 == avl0                                                            # STEP 56
ACTION: avl2 == avl0 
avl2 = <avlbug2.AVLTree instance at 0x10335ce18> : <type 'instance'>
avl0 = <avlbug2.AVLTree instance at 0x1026ab368> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
avl_REF0 = set([1, 10, 20, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF0 
==================================================
avl1.insert(int3)                                                       # STEP 57
ACTION: avl1.insert(int3) 
int3 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103333d88> : <type 'instance'>
avl_REF1 = set([20, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([12, 20, 13]) : <type 'set'>
==================================================
int3 = 20                                                               # STEP 58
ACTION: int3 = 20 
int3 = 12 : <type 'int'>
=> int3 = 20 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 59
ACTION: avl0.delete(int2) 
int2 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1026ab368> : <type 'instance'>
avl_REF0 = set([1, 10, 20, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([1, 20, 6]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10336c050>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #4 STEP #0 (0:00:34.387672) Sun Apr 30 05:17:03 2017 [ 144 stmts 190 branches ]
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 39
STOPPING TESTING DUE TO TIMEOUT
8.04369414101 PERCENT COVERED
60.2251310349 TOTAL RUNTIME
6 EXECUTED
499 TOTAL TEST OPERATIONS
26.6868097782 TIME SPENT EXECUTING TEST OPERATIONS
0.0206186771393 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
26.9148957729 TIME SPENT CHECKING PROPERTIES
53.6017055511 TOTAL TIME SPENT RUNNING SUT
0.00454592704773 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int2 = 9                                                                 # STEP 0
int3 = 14                                                                # STEP 1
int0 = 7                                                                 # STEP 2
int1 = 10                                                                # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
result = avl1.find(int2)                                                 # STEP 5
avl1.delete(int0)                                                        # STEP 6
avl0 = avl.AVLTree()                                                     # STEP 7
avl0.insert(int1)                                                        # STEP 8
result = avl1.find(int2)                                                 # STEP 9
int0 = 6                                                                # STEP 10
result = avl0.find(int3)                                                # STEP 11
int1 = 20                                                               # STEP 12
int3 = 9                                                                # STEP 13
avl1.delete(int0)                                                       # STEP 14
result = avl0.inorder()                                                 # STEP 15
int2 = 15                                                               # STEP 16
avl0.insert(int0)                                                       # STEP 17
int0 = 20                                                               # STEP 18
avl1.insert(int3)                                                       # STEP 19
result = avl1.inorder()                                                 # STEP 20
avl1.delete(int2)                                                       # STEP 21
avl0.delete(int2)                                                       # STEP 22
int3 = 18                                                               # STEP 23
avl1 = avl.AVLTree()                                                    # STEP 24
avl0.insert(int3)                                                       # STEP 25
avl0.insert(int1)                                                       # STEP 26
int3 = 19                                                               # STEP 27
int2 = 10                                                               # STEP 28
int1 = 1                                                                # STEP 29
avl0 == avl1                                                            # STEP 30
avl1.insert(int0)                                                       # STEP 31
avl0.insert(int1)                                                       # STEP 32
int1 = 13                                                               # STEP 33
avl1.insert(int0)                                                       # STEP 34
int0 = 18                                                               # STEP 35
avl0.insert(int0)                                                       # STEP 36
avl0.delete(int3)                                                       # STEP 37
avl1 == avl1                                                            # STEP 38
avl0.delete(int0)                                                       # STEP 39
int3 = 13                                                               # STEP 40
int0 = 16                                                               # STEP 41
avl0 == avl0                                                            # STEP 42
avl1.delete(int1)                                                       # STEP 43
result = avl0.find(int1)                                                # STEP 44
avl1.insert(int3)                                                       # STEP 45
int3 = 12                                                               # STEP 46
int1 = 17                                                               # STEP 47
avl1 == avl1                                                            # STEP 48
avl0 == avl0                                                            # STEP 49
avl2 = avl.AVLTree()                                                    # STEP 50
result = avl1.find(int1)                                                # STEP 51
int1 = 20                                                               # STEP 52
avl0.insert(int1)                                                       # STEP 53
result = avl2.find(int2)                                                # STEP 54
int1 = 1                                                                # STEP 55
avl2 == avl0                                                            # STEP 56
avl1.insert(int3)                                                       # STEP 57
int3 = 20                                                               # STEP 58
avl0.delete(int2)                                                       # STEP 59
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10336c050>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
200 BRANCHES COVERED
150 STATEMENTS COVERED

Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.99834.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  7 [2:0]
-- < 1 [1:-1]
---- > 6 [0:0] L
-- > 11 [1:0]
---- < 9 [0:0] L
---- > 17 [0:0] L
set([1, 6, 7, 9, 11, 17])
  7 [2:0]
-- < 1 [1:-1]
---- > 6 [0:0] L
-- > 11 [1:0]
---- < 9 [0:0] L
---- > 17 [0:0] L
set([1, 6, 7, 9, 11, 17])
  7 [2:0]
-- < 1 [1:-1]
---- > 6 [0:0] L
-- > 11 [1:0]
---- < 9 [0:0] L
---- > 17 [0:0] L
set([1, 6, 7, 9, 11, 17])
  7 [2:0]
-- < 4 [1:0]
---- < 1 [0:0] L
---- > 5 [0:0] L
-- > 18 [1:-1]
---- > 20 [0:0] L
set([1, 18, 4, 5, 7, 20])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10435f0e0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
Original test has 42 steps

SAVING TEST AS failure.99834.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
avl0 = avl.AVLTree()                                                     # STEP 0
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x104425a70> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0 == avl0                                                             # STEP 1
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x104425a70> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
int2 = 14                                                                # STEP 2
ACTION: int2 = 14 
int2 = None : <type 'NoneType'>
=> int2 = 14 : <type 'int'>
==================================================
avl0.insert(int2)                                                        # STEP 3
ACTION: avl0.insert(int2) 
int2 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104425a70> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([14]) : <type 'set'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x104285248> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int2)                                                        # STEP 5
ACTION: avl2.insert(int2) 
int2 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104285248> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([14]) : <type 'set'>
==================================================
avl2.delete(int2)                                                        # STEP 6
ACTION: avl2.delete(int2) 
int2 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104285248> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int3 = 9                                                                 # STEP 7
ACTION: int3 = 9 
int3 = None : <type 'NoneType'>
=> int3 = 9 : <type 'int'>
==================================================
int0 = 10                                                                # STEP 8
ACTION: int0 = 10 
int0 = None : <type 'NoneType'>
=> int0 = 10 : <type 'int'>
==================================================
avl0.insert(int2)                                                        # STEP 9
ACTION: avl0.insert(int2) 
int2 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104425a70> : <type 'instance'>
avl_REF0 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl2.insert(int2)                                                       # STEP 10
ACTION: avl2.insert(int2) 
int2 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104285248> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([14]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 11
ACTION: avl2.delete(int3) 
int3 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104285248> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int3 = 12                                                               # STEP 12
ACTION: int3 = 12 
int3 = 9 : <type 'int'>
=> int3 = 12 : <type 'int'>
==================================================
int2 = 4                                                                # STEP 13
ACTION: int2 = 4 
int2 = 14 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 14
ACTION: avl2.insert(int0) 
int0 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104285248> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([10, 14]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 15
ACTION: avl2.insert(int3) 
int3 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104285248> : <type 'instance'>
avl_REF2 = set([10, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([10, 12, 14]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 16
ACTION: avl0.delete(int0) 
int0 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104425a70> : <type 'instance'>
avl_REF0 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl2.insert(int3)                                                       # STEP 17
ACTION: avl2.insert(int3) 
int3 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104285248> : <type 'instance'>
avl_REF2 = set([10, 12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
avl0.insert(int3)                                                       # STEP 18
ACTION: avl0.insert(int3) 
int3 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104425a70> : <type 'instance'>
avl_REF0 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([12, 14]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 19
ACTION: avl2.delete(int3) 
int3 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104285248> : <type 'instance'>
avl_REF2 = set([10, 12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([10, 14]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 20
ACTION: avl2.delete(int2) 
int2 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104285248> : <type 'instance'>
avl_REF2 = set([10, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.insert(int3)                                                       # STEP 21
ACTION: avl2.insert(int3) 
int3 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104285248> : <type 'instance'>
avl_REF2 = set([10, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([10, 12, 14]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 22
ACTION: avl0.insert(int0) 
int0 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104425a70> : <type 'instance'>
avl_REF0 = set([12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([10, 12, 14]) : <type 'set'>
==================================================
int1 = 2                                                                # STEP 23
ACTION: int1 = 2 
int1 = None : <type 'NoneType'>
=> int1 = 2 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 24
ACTION: avl2.delete(int0) 
int0 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104285248> : <type 'instance'>
avl_REF2 = set([10, 12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([12, 14]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 25
ACTION: avl0.insert(int1) 
int1 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104425a70> : <type 'instance'>
avl_REF0 = set([10, 12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([10, 12, 2, 14]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 26
ACTION: avl0.insert(int1) 
int1 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104425a70> : <type 'instance'>
avl_REF0 = set([10, 12, 2, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
int0 = 18                                                               # STEP 27
ACTION: int0 = 18 
int0 = 10 : <type 'int'>
=> int0 = 18 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 28
ACTION: avl0.delete(int0) 
int0 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104425a70> : <type 'instance'>
avl_REF0 = set([10, 12, 2, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
result = avl0.inorder()                                                 # STEP 29
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104425a70> : <type 'instance'>
avl_REF0 = set([10, 12, 2, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int1 = 17                                                               # STEP 30
ACTION: int1 = 17 
int1 = 2 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 31
ACTION: avl2.delete(int2) 
int2 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104285248> : <type 'instance'>
avl_REF2 = set([12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl0.insert(int0)                                                       # STEP 32
ACTION: avl0.insert(int0) 
int0 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104425a70> : <type 'instance'>
avl_REF0 = set([10, 12, 2, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([10, 18, 12, 2, 14]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 33
ACTION: avl2.insert(int1) 
int1 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104285248> : <type 'instance'>
avl_REF2 = set([12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([17, 12, 14]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 34
ACTION: avl0.delete(int0) 
int0 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104425a70> : <type 'instance'>
avl_REF0 = set([10, 18, 12, 2, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([10, 12, 2, 14]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 35
ACTION: avl0.delete(int0) 
int0 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104425a70> : <type 'instance'>
avl_REF0 = set([10, 12, 2, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl2.insert(int0)                                                       # STEP 36
ACTION: avl2.insert(int0) 
int0 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104285248> : <type 'instance'>
avl_REF2 = set([17, 12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([17, 18, 12, 14]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 37
ACTION: avl2.insert(int2) 
int2 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104285248> : <type 'instance'>
avl_REF2 = set([17, 18, 12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([17, 18, 12, 14, 4]) : <type 'set'>
==================================================
result = avl0.find(int0)                                                # STEP 38
ACTION: result = avl0.find(int0) 
int0 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104425a70> : <type 'instance'>
avl_REF0 = set([10, 12, 2, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
int1 = 6                                                                # STEP 39
ACTION: int1 = 6 
int1 = 17 : <type 'int'>
=> int1 = 6 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 40
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104285248> : <type 'instance'>
avl_REF2 = set([17, 18, 12, 14, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl0.delete(int3)                                                       # STEP 41
ACTION: avl0.delete(int3) 
int3 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104425a70> : <type 'instance'>
avl_REF0 = set([10, 12, 2, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([10, 2, 14]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105861290>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #5 STEP #1 (0:00:30.069259) Fri Apr 28 05:04:08 2017 [ 161 stmts 214 branches ]
  14 [2:0]
-- < 2 [1:0]
---- < 1 [0:0] L
---- > 8 [0:0] L
-- > 17 [1:1]
---- < 15 [0:0] L
set([1, 2, 8, 14, 15, 17])
  14 [3:1]
-- < 2 [2:-1]
---- < 1 [0:0] L
---- > 8 [1:1]
------ < 6 [0:0] L
-- > 17 [1:1]
---- < 15 [0:0] L
set([1, 2, 6, 8, 14, 15, 17])
  14 [3:1]
-- < 2 [2:-1]
---- < 1 [0:0] L
---- > 8 [1:0]
------ < 6 [0:0] L
------ > 10 [0:0] L
-- > 17 [1:1]
---- < 15 [0:0] L
set([1, 2, 6, 8, 10, 14, 15, 17])
  14 [3:1]
-- < 2 [2:-1]
---- < 1 [0:0] L
---- > 8 [1:-1]
------ > 10 [0:0] L
-- > 17 [1:1]
---- < 15 [0:0] L
set([1, 2, 8, 10, 14, 15, 17])
  10 [2:0]
-- < 5 [1:0]
---- < 4 [0:0] L
---- > 6 [0:0] L
-- > 15 [1:-1]
---- > 16 [0:0] L
set([4, 5, 6, 10, 15, 16])
  10 [2:0]
-- < 5 [1:0]
---- < 4 [0:0] L
---- > 6 [0:0] L
-- > 15 [1:-1]
---- > 16 [0:0] L
set([4, 5, 6, 10, 15, 16])
  13 [3:1]
-- < 10 [2:-1]
---- < 7 [0:0] L
---- > 11 [1:-1]
------ > 12 [0:0] L
-- > 17 [1:0]
---- < 16 [0:0] L
---- > 19 [0:0] L
set([7, 10, 11, 12, 13, 16, 17, 19])
  13 [2:0]
-- < 10 [1:0]
---- < 7 [0:0] L
---- > 11 [0:0] L
-- > 17 [1:0]
---- < 16 [0:0] L
---- > 19 [0:0] L
set([7, 10, 11, 13, 16, 17, 19])
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 4
STOPPING TESTING DUE TO TIMEOUT
8.51713607058 PERCENT COVERED
60.2155890465 TOTAL RUNTIME
9 EXECUTED
746 TOTAL TEST OPERATIONS
28.2789785862 TIME SPENT EXECUTING TEST OPERATIONS
0.0805203914642 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
28.503472805 TIME SPENT CHECKING PROPERTIES
56.7824513912 TOTAL TIME SPENT RUNNING SUT
0.00484991073608 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
avl0 = avl.AVLTree()                                                     # STEP 0
avl0 == avl0                                                             # STEP 1
int2 = 14                                                                # STEP 2
avl0.insert(int2)                                                        # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
avl2.insert(int2)                                                        # STEP 5
avl2.delete(int2)                                                        # STEP 6
int3 = 9                                                                 # STEP 7
int0 = 10                                                                # STEP 8
avl0.insert(int2)                                                        # STEP 9
avl2.insert(int2)                                                       # STEP 10
avl2.delete(int3)                                                       # STEP 11
int3 = 12                                                               # STEP 12
int2 = 4                                                                # STEP 13
avl2.insert(int0)                                                       # STEP 14
avl2.insert(int3)                                                       # STEP 15
avl0.delete(int0)                                                       # STEP 16
avl2.insert(int3)                                                       # STEP 17
avl0.insert(int3)                                                       # STEP 18
avl2.delete(int3)                                                       # STEP 19
avl2.delete(int2)                                                       # STEP 20
avl2.insert(int3)                                                       # STEP 21
avl0.insert(int0)                                                       # STEP 22
int1 = 2                                                                # STEP 23
avl2.delete(int0)                                                       # STEP 24
avl0.insert(int1)                                                       # STEP 25
avl0.insert(int1)                                                       # STEP 26
int0 = 18                                                               # STEP 27
avl0.delete(int0)                                                       # STEP 28
result = avl0.inorder()                                                 # STEP 29
int1 = 17                                                               # STEP 30
avl2.delete(int2)                                                       # STEP 31
avl0.insert(int0)                                                       # STEP 32
avl2.insert(int1)                                                       # STEP 33
avl0.delete(int0)                                                       # STEP 34
avl0.delete(int0)                                                       # STEP 35
avl2.insert(int0)                                                       # STEP 36
avl2.insert(int2)                                                       # STEP 37
result = avl0.find(int0)                                                # STEP 38
int1 = 6                                                                # STEP 39
result = avl2.inorder()                                                 # STEP 40
avl0.delete(int3)                                                       # STEP 41
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105861290>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
214 BRANCHES COVERED
161 STATEMENTS COVERED

Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.14656.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103dd1a28>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
Original test has 78 steps

SAVING TEST AS failure.14656.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 2                                                                 # STEP 0
ACTION: int2 = 2 
int2 = None : <type 'NoneType'>
=> int2 = 2 : <type 'int'>
==================================================
int3 = 9                                                                 # STEP 1
ACTION: int3 = 9 
int3 = None : <type 'NoneType'>
=> int3 = 9 : <type 'int'>
==================================================
int1 = 9                                                                 # STEP 2
ACTION: int1 = 9 
int1 = None : <type 'NoneType'>
=> int1 = 9 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 3
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x101531d88> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int0 = 9                                                                 # STEP 4
ACTION: int0 = 9 
int0 = None : <type 'NoneType'>
=> int0 = 9 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 5
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x101515368> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl1.delete(int3)                                                        # STEP 6
ACTION: avl1.delete(int3) 
int3 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101531d88> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int3 = 18                                                                # STEP 7
ACTION: int3 = 18 
int3 = 9 : <type 'int'>
=> int3 = 18 : <type 'int'>
==================================================
avl2.delete(int2)                                                        # STEP 8
ACTION: avl2.delete(int2) 
int2 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101515368> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl1 == avl1                                                             # STEP 9
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x101531d88> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl2.delete(int0)                                                       # STEP 10
ACTION: avl2.delete(int0) 
int0 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101515368> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.delete(int1)                                                       # STEP 11
ACTION: avl2.delete(int1) 
int1 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101515368> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int0 = 1                                                                # STEP 12
ACTION: int0 = 1 
int0 = 9 : <type 'int'>
=> int0 = 1 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 13
ACTION: avl1.insert(int2) 
int2 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101531d88> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([2]) : <type 'set'>
==================================================
int1 = 9                                                                # STEP 14
ACTION: int1 = 9 
int1 = 9 : <type 'int'>
==================================================
result = avl2.find(int1)                                                # STEP 15
ACTION: result = avl2.find(int1) 
int1 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101515368> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int2 = 9                                                                # STEP 16
ACTION: int2 = 9 
int2 = 2 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
int1 = 5                                                                # STEP 17
ACTION: int1 = 5 
int1 = 9 : <type 'int'>
=> int1 = 5 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 18
ACTION: avl2.insert(int3) 
int3 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101515368> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([18]) : <type 'set'>
==================================================
avl1 == avl1                                                            # STEP 19
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x101531d88> : <type 'instance'>
avl_REF1 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl2.insert(int3)                                                       # STEP 20
ACTION: avl2.insert(int3) 
int3 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101515368> : <type 'instance'>
avl_REF2 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
avl1.insert(int3)                                                       # STEP 21
ACTION: avl1.insert(int3) 
int3 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101531d88> : <type 'instance'>
avl_REF1 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([2, 18]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 22
ACTION: avl1.delete(int3) 
int3 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101531d88> : <type 'instance'>
avl_REF1 = set([2, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([2]) : <type 'set'>
==================================================
result = avl2.find(int2)                                                # STEP 23
ACTION: result = avl2.find(int2) 
int2 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101515368> : <type 'instance'>
avl_REF2 = set([18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int2 = 1                                                                # STEP 24
ACTION: int2 = 1 
int2 = 9 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
int3 = 13                                                               # STEP 25
ACTION: int3 = 13 
int3 = 18 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 26
ACTION: avl2.delete(int1) 
int1 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101515368> : <type 'instance'>
avl_REF2 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int1 = 3                                                                # STEP 27
ACTION: int1 = 3 
int1 = 5 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 28
ACTION: avl2.insert(int2) 
int2 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101515368> : <type 'instance'>
avl_REF2 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([1, 18]) : <type 'set'>
==================================================
int2 = 20                                                               # STEP 29
ACTION: int2 = 20 
int2 = 1 : <type 'int'>
=> int2 = 20 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 30
ACTION: avl1.delete(int2) 
int2 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101531d88> : <type 'instance'>
avl_REF1 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int2 = 8                                                                # STEP 31
ACTION: int2 = 8 
int2 = 20 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 32
ACTION: avl2.delete(int2) 
int2 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101515368> : <type 'instance'>
avl_REF2 = set([1, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
result = avl2.find(int3)                                                # STEP 33
ACTION: result = avl2.find(int3) 
int3 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101515368> : <type 'instance'>
avl_REF2 = set([1, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
int2 = 15                                                               # STEP 34
ACTION: int2 = 15 
int2 = 8 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 35
ACTION: avl1.delete(int0) 
int0 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101531d88> : <type 'instance'>
avl_REF1 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
result = avl2.find(int0)                                                # STEP 36
ACTION: result = avl2.find(int0) 
int0 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101515368> : <type 'instance'>
avl_REF2 = set([1, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
int0 = 12                                                               # STEP 37
ACTION: int0 = 12 
int0 = 1 : <type 'int'>
=> int0 = 12 : <type 'int'>
==================================================
result = avl2.find(int0)                                                # STEP 38
ACTION: result = avl2.find(int0) 
int0 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101515368> : <type 'instance'>
avl_REF2 = set([1, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
int0 = 19                                                               # STEP 39
ACTION: int0 = 19 
int0 = 12 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 40
ACTION: avl2.insert(int3) 
int3 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101515368> : <type 'instance'>
avl_REF2 = set([1, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([1, 18, 13]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 41
ACTION: avl1.insert(int0) 
int0 = 19 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101531d88> : <type 'instance'>
avl_REF1 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([2, 19]) : <type 'set'>
==================================================
int3 = 1                                                                # STEP 42
ACTION: int3 = 1 
int3 = 13 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
int0 = 5                                                                # STEP 43
ACTION: int0 = 5 
int0 = 19 : <type 'int'>
=> int0 = 5 : <type 'int'>
==================================================
avl1 == avl2                                                            # STEP 44
ACTION: avl1 == avl2 
avl1 = <avlbug2.AVLTree instance at 0x101531d88> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x101515368> : <type 'instance'>
avl_REF1 = set([2, 19]) : <type 'set'>
avl_REF2 = set([1, 18, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
avl2.delete(int2)                                                       # STEP 45
ACTION: avl2.delete(int2) 
int2 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101515368> : <type 'instance'>
avl_REF2 = set([1, 18, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int2 = 11                                                               # STEP 46
ACTION: int2 = 11 
int2 = 15 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 47
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x101515368> : <type 'instance'>
avl_REF2 = set([1, 18, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int0)                                                       # STEP 48
ACTION: avl2.delete(int0) 
int0 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101515368> : <type 'instance'>
avl_REF2 = set([1, 18, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int0 = 13                                                               # STEP 49
ACTION: int0 = 13 
int0 = 5 : <type 'int'>
=> int0 = 13 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 50
ACTION: avl2.delete(int0) 
int0 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101515368> : <type 'instance'>
avl_REF2 = set([1, 18, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([1, 18]) : <type 'set'>
==================================================
int0 = 3                                                                # STEP 51
ACTION: int0 = 3 
int0 = 13 : <type 'int'>
=> int0 = 3 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 52
ACTION: avl2.insert(int2) 
int2 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101515368> : <type 'instance'>
avl_REF2 = set([1, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([1, 18, 11]) : <type 'set'>
==================================================
int2 = 4                                                                # STEP 53
ACTION: int2 = 4 
int2 = 11 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
result = avl2.find(int2)                                                # STEP 54
ACTION: result = avl2.find(int2) 
int2 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101515368> : <type 'instance'>
avl_REF2 = set([1, 18, 11]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int2 = 4                                                                # STEP 55
ACTION: int2 = 4 
int2 = 4 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 56
ACTION: avl2.delete(int1) 
int1 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101515368> : <type 'instance'>
avl_REF2 = set([1, 18, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int2)                                                       # STEP 57
ACTION: avl2.insert(int2) 
int2 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101515368> : <type 'instance'>
avl_REF2 = set([1, 18, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([1, 18, 11, 4]) : <type 'set'>
==================================================
int1 = 13                                                               # STEP 58
ACTION: int1 = 13 
int1 = 3 : <type 'int'>
=> int1 = 13 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 59
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x101531d88> : <type 'instance'>
avl_REF1 = set([2, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
result = avl1.find(int1)                                                # STEP 60
ACTION: result = avl1.find(int1) 
int1 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101531d88> : <type 'instance'>
avl_REF1 = set([2, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int2 = 16                                                               # STEP 61
ACTION: int2 = 16 
int2 = 4 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 62
ACTION: avl1.insert(int0) 
int0 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101531d88> : <type 'instance'>
avl_REF1 = set([2, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([3, 2, 19]) : <type 'set'>
==================================================
int1 = 10                                                               # STEP 63
ACTION: int1 = 10 
int1 = 13 : <type 'int'>
=> int1 = 10 : <type 'int'>
==================================================
int0 = 1                                                                # STEP 64
ACTION: int0 = 1 
int0 = 3 : <type 'int'>
=> int0 = 1 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 65
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x1038c35f0> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 66
ACTION: avl1.insert(int1) 
int1 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101531d88> : <type 'instance'>
avl_REF1 = set([3, 2, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([3, 2, 19, 10]) : <type 'set'>
==================================================
result = avl2.find(int3)                                                # STEP 67
ACTION: result = avl2.find(int3) 
int3 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101515368> : <type 'instance'>
avl_REF2 = set([1, 18, 11, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl2 = avl.AVLTree()                                                    # STEP 68
ACTION: avl2 = avl.AVLTree() 
avl2 = <avlbug2.AVLTree instance at 0x101515368> : <type 'instance'>
avl_REF2 = set([1, 18, 11, 4]) : <type 'set'>
=> avl2 = <avlbug2.AVLTree instance at 0x1038c3ef0> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int3 = 4                                                                # STEP 69
ACTION: int3 = 4 
int3 = 1 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
int1 = 2                                                                # STEP 70
ACTION: int1 = 2 
int1 = 10 : <type 'int'>
=> int1 = 2 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 71
ACTION: avl1.insert(int3) 
int3 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101531d88> : <type 'instance'>
avl_REF1 = set([3, 2, 19, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([3, 2, 19, 4, 10]) : <type 'set'>
==================================================
avl1 == avl0                                                            # STEP 72
ACTION: avl1 == avl0 
avl1 = <avlbug2.AVLTree instance at 0x101531d88> : <type 'instance'>
avl0 = <avlbug2.AVLTree instance at 0x1038c35f0> : <type 'instance'>
avl_REF1 = set([3, 2, 19, 4, 10]) : <type 'set'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
avl1 == avl2                                                            # STEP 73
ACTION: avl1 == avl2 
avl1 = <avlbug2.AVLTree instance at 0x101531d88> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x1038c3ef0> : <type 'instance'>
avl_REF1 = set([3, 2, 19, 4, 10]) : <type 'set'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
int3 = 7                                                                # STEP 74
ACTION: int3 = 7 
int3 = 4 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 75
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x1038c35f0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl2 == avl2                                                            # STEP 76
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x1038c3ef0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl1.delete(int1)                                                       # STEP 77
ACTION: avl1.delete(int1) 
int1 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101531d88> : <type 'instance'>
avl_REF1 = set([3, 2, 19, 4, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([3, 19, 4, 10]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103b6f878>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #4 STEP #0 (0:00:37.971683) Sun Apr 30 04:40:19 2017 [ 147 stmts 194 branches ]
  8 [2:0]
-- < 5 [1:0]
---- < 4 [0:0] L
---- > 6 [0:0] L
-- > 12 [1:0]
---- < 10 [0:0] L
---- > 18 [0:0] L
set([4, 5, 6, 8, 10, 12, 18])
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 5
STOPPING TESTING DUE TO TIMEOUT
8.57332009268 PERCENT COVERED
60.2455859184 TOTAL RUNTIME
6 EXECUTED
483 TOTAL TEST OPERATIONS
25.7757604122 TIME SPENT EXECUTING TEST OPERATIONS
0.0184600353241 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
25.9874742031 TIME SPENT CHECKING PROPERTIES
51.7632346153 TOTAL TIME SPENT RUNNING SUT
0.00470948219299 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int2 = 2                                                                 # STEP 0
int3 = 9                                                                 # STEP 1
int1 = 9                                                                 # STEP 2
avl1 = avl.AVLTree()                                                     # STEP 3
int0 = 9                                                                 # STEP 4
avl2 = avl.AVLTree()                                                     # STEP 5
avl1.delete(int3)                                                        # STEP 6
int3 = 18                                                                # STEP 7
avl2.delete(int2)                                                        # STEP 8
avl1 == avl1                                                             # STEP 9
avl2.delete(int0)                                                       # STEP 10
avl2.delete(int1)                                                       # STEP 11
int0 = 1                                                                # STEP 12
avl1.insert(int2)                                                       # STEP 13
int1 = 9                                                                # STEP 14
result = avl2.find(int1)                                                # STEP 15
int2 = 9                                                                # STEP 16
int1 = 5                                                                # STEP 17
avl2.insert(int3)                                                       # STEP 18
avl1 == avl1                                                            # STEP 19
avl2.insert(int3)                                                       # STEP 20
avl1.insert(int3)                                                       # STEP 21
avl1.delete(int3)                                                       # STEP 22
result = avl2.find(int2)                                                # STEP 23
int2 = 1                                                                # STEP 24
int3 = 13                                                               # STEP 25
avl2.delete(int1)                                                       # STEP 26
int1 = 3                                                                # STEP 27
avl2.insert(int2)                                                       # STEP 28
int2 = 20                                                               # STEP 29
avl1.delete(int2)                                                       # STEP 30
int2 = 8                                                                # STEP 31
avl2.delete(int2)                                                       # STEP 32
result = avl2.find(int3)                                                # STEP 33
int2 = 15                                                               # STEP 34
avl1.delete(int0)                                                       # STEP 35
result = avl2.find(int0)                                                # STEP 36
int0 = 12                                                               # STEP 37
result = avl2.find(int0)                                                # STEP 38
int0 = 19                                                               # STEP 39
avl2.insert(int3)                                                       # STEP 40
avl1.insert(int0)                                                       # STEP 41
int3 = 1                                                                # STEP 42
int0 = 5                                                                # STEP 43
avl1 == avl2                                                            # STEP 44
avl2.delete(int2)                                                       # STEP 45
int2 = 11                                                               # STEP 46
result = avl2.inorder()                                                 # STEP 47
avl2.delete(int0)                                                       # STEP 48
int0 = 13                                                               # STEP 49
avl2.delete(int0)                                                       # STEP 50
int0 = 3                                                                # STEP 51
avl2.insert(int2)                                                       # STEP 52
int2 = 4                                                                # STEP 53
result = avl2.find(int2)                                                # STEP 54
int2 = 4                                                                # STEP 55
avl2.delete(int1)                                                       # STEP 56
avl2.insert(int2)                                                       # STEP 57
int1 = 13                                                               # STEP 58
avl1 == avl1                                                            # STEP 59
result = avl1.find(int1)                                                # STEP 60
int2 = 16                                                               # STEP 61
avl1.insert(int0)                                                       # STEP 62
int1 = 10                                                               # STEP 63
int0 = 1                                                                # STEP 64
avl0 = avl.AVLTree()                                                    # STEP 65
avl1.insert(int1)                                                       # STEP 66
result = avl2.find(int3)                                                # STEP 67
avl2 = avl.AVLTree()                                                    # STEP 68
int3 = 4                                                                # STEP 69
int1 = 2                                                                # STEP 70
avl1.insert(int3)                                                       # STEP 71
avl1 == avl0                                                            # STEP 72
avl1 == avl2                                                            # STEP 73
int3 = 7                                                                # STEP 74
result = avl0.inorder()                                                 # STEP 75
avl2 == avl2                                                            # STEP 76
avl1.delete(int1)                                                       # STEP 77
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103b6f878>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
214 BRANCHES COVERED
161 STATEMENTS COVERED

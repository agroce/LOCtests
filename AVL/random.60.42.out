Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.99929.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  7 [2:0]
-- < 2 [1:-1]
---- > 5 [0:0] L
-- > 18 [1:0]
---- < 9 [0:0] L
---- > 20 [0:0] L
set([2, 5, 7, 9, 18, 20])
TEST #4 STEP #95 (0:00:30.043113) Fri Apr 28 05:20:20 2017 [ 150 stmts 201 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103a7fbd8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
Original test has 97 steps

SAVING TEST AS failure.99929.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
avl2 = avl.AVLTree()                                                     # STEP 0
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x103a85e18> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int2 = 6                                                                 # STEP 1
ACTION: int2 = 6 
int2 = None : <type 'NoneType'>
=> int2 = 6 : <type 'int'>
==================================================
int1 = 19                                                                # STEP 2
ACTION: int1 = 19 
int1 = None : <type 'NoneType'>
=> int1 = 19 : <type 'int'>
==================================================
int3 = 17                                                                # STEP 3
ACTION: int3 = 17 
int3 = None : <type 'NoneType'>
=> int3 = 17 : <type 'int'>
==================================================
int0 = 15                                                                # STEP 4
ACTION: int0 = 15 
int0 = None : <type 'NoneType'>
=> int0 = 15 : <type 'int'>
==================================================
result = avl2.inorder()                                                  # STEP 5
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x103a85e18> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl2.find(int0)                                                 # STEP 6
ACTION: result = avl2.find(int0) 
int0 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a85e18> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
int0 = 3                                                                 # STEP 7
ACTION: int0 = 3 
int0 = 15 : <type 'int'>
=> int0 = 3 : <type 'int'>
==================================================
result = avl2.find(int1)                                                 # STEP 8
ACTION: result = avl2.find(int1) 
int1 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a85e18> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl2 == avl2                                                             # STEP 9
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x103a85e18> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
int1 = 12                                                               # STEP 10
ACTION: int1 = 12 
int1 = 19 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 11
ACTION: avl2 = avl.AVLTree() 
avl2 = <avl.AVLTree instance at 0x103a85e18> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
=> avl2 = <avl.AVLTree instance at 0x103e634d0> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
==================================================
avl2 == avl2                                                            # STEP 12
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x103e634d0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl1 = avl.AVLTree()                                                    # STEP 13
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x103e63a28> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
result = avl1.find(int3)                                                # STEP 14
ACTION: result = avl1.find(int3) 
int3 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103e63a28> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl1 == avl2                                                            # STEP 15
ACTION: avl1 == avl2 
avl1 = <avl.AVLTree instance at 0x103e63a28> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x103e634d0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
result = avl2.find(int2)                                                # STEP 16
ACTION: result = avl2.find(int2) 
int2 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e634d0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int2 = 13                                                               # STEP 17
ACTION: int2 = 13 
int2 = 6 : <type 'int'>
=> int2 = 13 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 18
ACTION: avl1.delete(int0) 
int0 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103e63a28> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.delete(int3)                                                       # STEP 19
ACTION: avl1.delete(int3) 
int3 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103e63a28> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl2 == avl2                                                            # STEP 20
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x103e634d0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
int3 = 15                                                               # STEP 21
ACTION: int3 = 15 
int3 = 17 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
int0 = 1                                                                # STEP 22
ACTION: int0 = 1 
int0 = 3 : <type 'int'>
=> int0 = 1 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 23
ACTION: avl2.delete(int2) 
int2 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e634d0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl1.delete(int0)                                                       # STEP 24
ACTION: avl1.delete(int0) 
int0 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103e63a28> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int2 = 1                                                                # STEP 25
ACTION: int2 = 1 
int2 = 13 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
int0 = 13                                                               # STEP 26
ACTION: int0 = 13 
int0 = 1 : <type 'int'>
=> int0 = 13 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 27
ACTION: avl2.insert(int3) 
int3 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e634d0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([15]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 28
ACTION: avl1.insert(int0) 
int0 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103e63a28> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([13]) : <type 'set'>
==================================================
result = avl1.find(int0)                                                # STEP 29
ACTION: result = avl1.find(int0) 
int0 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103e63a28> : <type 'instance'>
avl_REF1 = set([13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl2.insert(int1)                                                       # STEP 30
ACTION: avl2.insert(int1) 
int1 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e634d0> : <type 'instance'>
avl_REF2 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([12, 15]) : <type 'set'>
==================================================
int3 = 13                                                               # STEP 31
ACTION: int3 = 13 
int3 = 15 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 32
ACTION: avl1.delete(int2) 
int2 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103e63a28> : <type 'instance'>
avl_REF1 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int1 = 13                                                               # STEP 33
ACTION: int1 = 13 
int1 = 12 : <type 'int'>
=> int1 = 13 : <type 'int'>
==================================================
int0 = 4                                                                # STEP 34
ACTION: int0 = 4 
int0 = 13 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
result = avl2.find(int1)                                                # STEP 35
ACTION: result = avl2.find(int1) 
int1 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e634d0> : <type 'instance'>
avl_REF2 = set([12, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
result = avl1.find(int0)                                                # STEP 36
ACTION: result = avl1.find(int0) 
int0 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103e63a28> : <type 'instance'>
avl_REF1 = set([13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
int0 = 11                                                               # STEP 37
ACTION: int0 = 11 
int0 = 4 : <type 'int'>
=> int0 = 11 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 38
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x103e6cd88> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int1 = 14                                                               # STEP 39
ACTION: int1 = 14 
int1 = 13 : <type 'int'>
=> int1 = 14 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 40
ACTION: avl0.insert(int2) 
int2 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103e6cd88> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([1]) : <type 'set'>
==================================================
avl0 == avl1                                                            # STEP 41
ACTION: avl0 == avl1 
avl0 = <avl.AVLTree instance at 0x103e6cd88> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x103e63a28> : <type 'instance'>
avl_REF0 = set([1]) : <type 'set'>
avl_REF1 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF1 
==================================================
avl1.insert(int3)                                                       # STEP 42
ACTION: avl1.insert(int3) 
int3 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103e63a28> : <type 'instance'>
avl_REF1 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
avl1.insert(int2)                                                       # STEP 43
ACTION: avl1.insert(int2) 
int2 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103e63a28> : <type 'instance'>
avl_REF1 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([1, 13]) : <type 'set'>
==================================================
int2 = 15                                                               # STEP 44
ACTION: int2 = 15 
int2 = 1 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
int3 = 1                                                                # STEP 45
ACTION: int3 = 1 
int3 = 13 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
avl1 == avl0                                                            # STEP 46
ACTION: avl1 == avl0 
avl1 = <avl.AVLTree instance at 0x103e63a28> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x103e6cd88> : <type 'instance'>
avl_REF1 = set([1, 13]) : <type 'set'>
avl_REF0 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
avl2.delete(int3)                                                       # STEP 47
ACTION: avl2.delete(int3) 
int3 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e634d0> : <type 'instance'>
avl_REF2 = set([12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl0.delete(int2)                                                       # STEP 48
ACTION: avl0.delete(int2) 
int2 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103e6cd88> : <type 'instance'>
avl_REF0 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int3 = 17                                                               # STEP 49
ACTION: int3 = 17 
int3 = 1 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
int2 = 5                                                                # STEP 50
ACTION: int2 = 5 
int2 = 15 : <type 'int'>
=> int2 = 5 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 51
ACTION: avl2.insert(int0) 
int0 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e634d0> : <type 'instance'>
avl_REF2 = set([12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([11, 12, 15]) : <type 'set'>
==================================================
int0 = 20                                                               # STEP 52
ACTION: int0 = 20 
int0 = 11 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 53
ACTION: avl2.delete(int1) 
int1 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e634d0> : <type 'instance'>
avl_REF2 = set([11, 12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl0.insert(int0)                                                       # STEP 54
ACTION: avl0.insert(int0) 
int0 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103e6cd88> : <type 'instance'>
avl_REF0 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([1, 20]) : <type 'set'>
==================================================
int1 = 14                                                               # STEP 55
ACTION: int1 = 14 
int1 = 14 : <type 'int'>
==================================================
result = avl1.find(int1)                                                # STEP 56
ACTION: result = avl1.find(int1) 
int1 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103e63a28> : <type 'instance'>
avl_REF1 = set([1, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int0 = 15                                                               # STEP 57
ACTION: int0 = 15 
int0 = 20 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
int1 = 16                                                               # STEP 58
ACTION: int1 = 16 
int1 = 14 : <type 'int'>
=> int1 = 16 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 59
ACTION: avl1.insert(int0) 
int0 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103e63a28> : <type 'instance'>
avl_REF1 = set([1, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([1, 13, 15]) : <type 'set'>
==================================================
result = avl2.find(int2)                                                # STEP 60
ACTION: result = avl2.find(int2) 
int2 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e634d0> : <type 'instance'>
avl_REF2 = set([11, 12, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int0 = 2                                                                # STEP 61
ACTION: int0 = 2 
int0 = 15 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
int2 = 14                                                               # STEP 62
ACTION: int2 = 14 
int2 = 5 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 63
ACTION: avl0.delete(int2) 
int2 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103e6cd88> : <type 'instance'>
avl_REF0 = set([1, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.insert(int0)                                                       # STEP 64
ACTION: avl0.insert(int0) 
int0 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103e6cd88> : <type 'instance'>
avl_REF0 = set([1, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([1, 2, 20]) : <type 'set'>
==================================================
int0 = 8                                                                # STEP 65
ACTION: int0 = 8 
int0 = 2 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
avl0 == avl0                                                            # STEP 66
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x103e6cd88> : <type 'instance'>
avl_REF0 = set([1, 2, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
int2 = 5                                                                # STEP 67
ACTION: int2 = 5 
int2 = 14 : <type 'int'>
=> int2 = 5 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 68
ACTION: avl0.delete(int1) 
int1 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103e6cd88> : <type 'instance'>
avl_REF0 = set([1, 2, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int1 = 10                                                               # STEP 69
ACTION: int1 = 10 
int1 = 16 : <type 'int'>
=> int1 = 10 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 70
ACTION: avl0.delete(int2) 
int2 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103e6cd88> : <type 'instance'>
avl_REF0 = set([1, 2, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int2 = 18                                                               # STEP 71
ACTION: int2 = 18 
int2 = 5 : <type 'int'>
=> int2 = 18 : <type 'int'>
==================================================
avl1 == avl0                                                            # STEP 72
ACTION: avl1 == avl0 
avl1 = <avl.AVLTree instance at 0x103e63a28> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x103e6cd88> : <type 'instance'>
avl_REF1 = set([1, 13, 15]) : <type 'set'>
avl_REF0 = set([1, 2, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
avl0.delete(int1)                                                       # STEP 73
ACTION: avl0.delete(int1) 
int1 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103e6cd88> : <type 'instance'>
avl_REF0 = set([1, 2, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl2 == avl2                                                            # STEP 74
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x103e634d0> : <type 'instance'>
avl_REF2 = set([11, 12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
int1 = 3                                                                # STEP 75
ACTION: int1 = 3 
int1 = 10 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 76
ACTION: avl2.delete(int0) 
int0 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e634d0> : <type 'instance'>
avl_REF2 = set([11, 12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl0.insert(int3)                                                       # STEP 77
ACTION: avl0.insert(int3) 
int3 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103e6cd88> : <type 'instance'>
avl_REF0 = set([1, 2, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([1, 2, 20, 17]) : <type 'set'>
==================================================
int3 = 4                                                                # STEP 78
ACTION: int3 = 4 
int3 = 17 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
int0 = 3                                                                # STEP 79
ACTION: int0 = 3 
int0 = 8 : <type 'int'>
=> int0 = 3 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 80
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x103e634d0> : <type 'instance'>
avl_REF2 = set([11, 12, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int3)                                                       # STEP 81
ACTION: avl2.delete(int3) 
int3 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e634d0> : <type 'instance'>
avl_REF2 = set([11, 12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int3 = 1                                                                # STEP 82
ACTION: int3 = 1 
int3 = 4 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
avl1 == avl2                                                            # STEP 83
ACTION: avl1 == avl2 
avl1 = <avl.AVLTree instance at 0x103e63a28> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x103e634d0> : <type 'instance'>
avl_REF1 = set([1, 13, 15]) : <type 'set'>
avl_REF2 = set([11, 12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
avl1 == avl0                                                            # STEP 84
ACTION: avl1 == avl0 
avl1 = <avl.AVLTree instance at 0x103e63a28> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x103e6cd88> : <type 'instance'>
avl_REF1 = set([1, 13, 15]) : <type 'set'>
avl_REF0 = set([1, 2, 20, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
result = avl1.find(int2)                                                # STEP 85
ACTION: result = avl1.find(int2) 
int2 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103e63a28> : <type 'instance'>
avl_REF1 = set([1, 13, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
result = avl2.find(int2)                                                # STEP 86
ACTION: result = avl2.find(int2) 
int2 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e634d0> : <type 'instance'>
avl_REF2 = set([11, 12, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int2 = 18                                                               # STEP 87
ACTION: int2 = 18 
int2 = 18 : <type 'int'>
==================================================
result = avl1.find(int0)                                                # STEP 88
ACTION: result = avl1.find(int0) 
int0 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103e63a28> : <type 'instance'>
avl_REF1 = set([1, 13, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl0.delete(int0)                                                       # STEP 89
ACTION: avl0.delete(int0) 
int0 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103e6cd88> : <type 'instance'>
avl_REF0 = set([1, 2, 20, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int0 = 1                                                                # STEP 90
ACTION: int0 = 1 
int0 = 3 : <type 'int'>
=> int0 = 1 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 91
ACTION: avl0.insert(int2) 
int2 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103e6cd88> : <type 'instance'>
avl_REF0 = set([1, 2, 20, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([1, 2, 20, 18, 17]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 92
ACTION: avl2.insert(int3) 
int3 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e634d0> : <type 'instance'>
avl_REF2 = set([11, 12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([1, 11, 12, 15]) : <type 'set'>
==================================================
int3 = 6                                                                # STEP 93
ACTION: int3 = 6 
int3 = 1 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
int2 = 1                                                                # STEP 94
ACTION: int2 = 1 
int2 = 18 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
avl1 == avl0                                                            # STEP 95
ACTION: avl1 == avl0 
avl1 = <avl.AVLTree instance at 0x103e63a28> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x103e6cd88> : <type 'instance'>
avl_REF1 = set([1, 13, 15]) : <type 'set'>
avl_REF0 = set([1, 2, 20, 18, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
avl0.delete(int2)                                                       # STEP 96
ACTION: avl0.delete(int2) 
int2 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103e6cd88> : <type 'instance'>
avl_REF0 = set([1, 2, 20, 18, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([2, 20, 18, 17]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103b45b00>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 0
STOPPING TESTING DUE TO TIMEOUT
8.00814387513 PERCENT COVERED
61.9901437759 TOTAL RUNTIME
8 EXECUTED
697 TOTAL TEST OPERATIONS
26.9802985191 TIME SPENT EXECUTING TEST OPERATIONS
0.0247058868408 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
27.0896897316 TIME SPENT CHECKING PROPERTIES
54.0699882507 TOTAL TIME SPENT RUNNING SUT
0.00446724891663 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
avl2 = avl.AVLTree()                                                     # STEP 0
int2 = 6                                                                 # STEP 1
int1 = 19                                                                # STEP 2
int3 = 17                                                                # STEP 3
int0 = 15                                                                # STEP 4
result = avl2.inorder()                                                  # STEP 5
result = avl2.find(int0)                                                 # STEP 6
int0 = 3                                                                 # STEP 7
result = avl2.find(int1)                                                 # STEP 8
avl2 == avl2                                                             # STEP 9
int1 = 12                                                               # STEP 10
avl2 = avl.AVLTree()                                                    # STEP 11
avl2 == avl2                                                            # STEP 12
avl1 = avl.AVLTree()                                                    # STEP 13
result = avl1.find(int3)                                                # STEP 14
avl1 == avl2                                                            # STEP 15
result = avl2.find(int2)                                                # STEP 16
int2 = 13                                                               # STEP 17
avl1.delete(int0)                                                       # STEP 18
avl1.delete(int3)                                                       # STEP 19
avl2 == avl2                                                            # STEP 20
int3 = 15                                                               # STEP 21
int0 = 1                                                                # STEP 22
avl2.delete(int2)                                                       # STEP 23
avl1.delete(int0)                                                       # STEP 24
int2 = 1                                                                # STEP 25
int0 = 13                                                               # STEP 26
avl2.insert(int3)                                                       # STEP 27
avl1.insert(int0)                                                       # STEP 28
result = avl1.find(int0)                                                # STEP 29
avl2.insert(int1)                                                       # STEP 30
int3 = 13                                                               # STEP 31
avl1.delete(int2)                                                       # STEP 32
int1 = 13                                                               # STEP 33
int0 = 4                                                                # STEP 34
result = avl2.find(int1)                                                # STEP 35
result = avl1.find(int0)                                                # STEP 36
int0 = 11                                                               # STEP 37
avl0 = avl.AVLTree()                                                    # STEP 38
int1 = 14                                                               # STEP 39
avl0.insert(int2)                                                       # STEP 40
avl0 == avl1                                                            # STEP 41
avl1.insert(int3)                                                       # STEP 42
avl1.insert(int2)                                                       # STEP 43
int2 = 15                                                               # STEP 44
int3 = 1                                                                # STEP 45
avl1 == avl0                                                            # STEP 46
avl2.delete(int3)                                                       # STEP 47
avl0.delete(int2)                                                       # STEP 48
int3 = 17                                                               # STEP 49
int2 = 5                                                                # STEP 50
avl2.insert(int0)                                                       # STEP 51
int0 = 20                                                               # STEP 52
avl2.delete(int1)                                                       # STEP 53
avl0.insert(int0)                                                       # STEP 54
int1 = 14                                                               # STEP 55
result = avl1.find(int1)                                                # STEP 56
int0 = 15                                                               # STEP 57
int1 = 16                                                               # STEP 58
avl1.insert(int0)                                                       # STEP 59
result = avl2.find(int2)                                                # STEP 60
int0 = 2                                                                # STEP 61
int2 = 14                                                               # STEP 62
avl0.delete(int2)                                                       # STEP 63
avl0.insert(int0)                                                       # STEP 64
int0 = 8                                                                # STEP 65
avl0 == avl0                                                            # STEP 66
int2 = 5                                                                # STEP 67
avl0.delete(int1)                                                       # STEP 68
int1 = 10                                                               # STEP 69
avl0.delete(int2)                                                       # STEP 70
int2 = 18                                                               # STEP 71
avl1 == avl0                                                            # STEP 72
avl0.delete(int1)                                                       # STEP 73
avl2 == avl2                                                            # STEP 74
int1 = 3                                                                # STEP 75
avl2.delete(int0)                                                       # STEP 76
avl0.insert(int3)                                                       # STEP 77
int3 = 4                                                                # STEP 78
int0 = 3                                                                # STEP 79
result = avl2.inorder()                                                 # STEP 80
avl2.delete(int3)                                                       # STEP 81
int3 = 1                                                                # STEP 82
avl1 == avl2                                                            # STEP 83
avl1 == avl0                                                            # STEP 84
result = avl1.find(int2)                                                # STEP 85
result = avl2.find(int2)                                                # STEP 86
int2 = 18                                                               # STEP 87
result = avl1.find(int0)                                                # STEP 88
avl0.delete(int0)                                                       # STEP 89
int0 = 1                                                                # STEP 90
avl0.insert(int2)                                                       # STEP 91
avl2.insert(int3)                                                       # STEP 92
int3 = 6                                                                # STEP 93
int2 = 1                                                                # STEP 94
avl1 == avl0                                                            # STEP 95
avl0.delete(int2)                                                       # STEP 96
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103b45b00>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
202 BRANCHES COVERED
150 STATEMENTS COVERED

Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.99626.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  6 [2:0]
-- < 2 [1:-1]
---- > 5 [0:0] L
-- > 16 [1:0]
---- < 15 [0:0] L
---- > 18 [0:0] L
set([2, 5, 6, 15, 16, 18])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10420a560>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 55 steps

SAVING TEST AS failure.99626.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 2                                                                 # STEP 0
ACTION: int3 = 2 
int3 = None : <type 'NoneType'>
=> int3 = 2 : <type 'int'>
==================================================
int2 = 13                                                                # STEP 1
ACTION: int2 = 13 
int2 = None : <type 'NoneType'>
=> int2 = 13 : <type 'int'>
==================================================
int0 = 2                                                                 # STEP 2
ACTION: int0 = 2 
int0 = None : <type 'NoneType'>
=> int0 = 2 : <type 'int'>
==================================================
int1 = 18                                                                # STEP 3
ACTION: int1 = 18 
int1 = None : <type 'NoneType'>
=> int1 = 18 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 4
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x1046af488> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 5
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x1046af1b8> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl0.insert(int2)                                                        # STEP 6
ACTION: avl0.insert(int2) 
int2 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1046af488> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([13]) : <type 'set'>
==================================================
int2 = 15                                                                # STEP 7
ACTION: int2 = 15 
int2 = 13 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
avl1.insert(int0)                                                        # STEP 8
ACTION: avl1.insert(int0) 
int0 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1046af1b8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([2]) : <type 'set'>
==================================================
int0 = 9                                                                 # STEP 9
ACTION: int0 = 9 
int0 = 2 : <type 'int'>
=> int0 = 9 : <type 'int'>
==================================================
result = avl0.find(int3)                                                # STEP 10
ACTION: result = avl0.find(int3) 
int3 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1046af488> : <type 'instance'>
avl_REF0 = set([13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
int3 = 6                                                                # STEP 11
ACTION: int3 = 6 
int3 = 2 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 12
ACTION: avl0.insert(int1) 
int1 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1046af488> : <type 'instance'>
avl_REF0 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([18, 13]) : <type 'set'>
==================================================
result = avl1.find(int1)                                                # STEP 13
ACTION: result = avl1.find(int1) 
int1 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1046af1b8> : <type 'instance'>
avl_REF1 = set([2]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
result = avl0.find(int1)                                                # STEP 14
ACTION: result = avl0.find(int1) 
int1 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1046af488> : <type 'instance'>
avl_REF0 = set([18, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
result = avl0.find(int3)                                                # STEP 15
ACTION: result = avl0.find(int3) 
int3 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1046af488> : <type 'instance'>
avl_REF0 = set([18, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
avl1.insert(int1)                                                       # STEP 16
ACTION: avl1.insert(int1) 
int1 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1046af1b8> : <type 'instance'>
avl_REF1 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([2, 18]) : <type 'set'>
==================================================
int1 = 5                                                                # STEP 17
ACTION: int1 = 5 
int1 = 18 : <type 'int'>
=> int1 = 5 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 18
ACTION: avl1.insert(int3) 
int3 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1046af1b8> : <type 'instance'>
avl_REF1 = set([2, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([2, 18, 6]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 19
ACTION: avl0.insert(int2) 
int2 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1046af488> : <type 'instance'>
avl_REF0 = set([18, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([18, 13, 15]) : <type 'set'>
==================================================
int3 = 14                                                               # STEP 20
ACTION: int3 = 14 
int3 = 6 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
result = avl1.find(int3)                                                # STEP 21
ACTION: result = avl1.find(int3) 
int3 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1046af1b8> : <type 'instance'>
avl_REF1 = set([2, 18, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl1.insert(int1)                                                       # STEP 22
ACTION: avl1.insert(int1) 
int1 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1046af1b8> : <type 'instance'>
avl_REF1 = set([2, 18, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([2, 18, 6, 5]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 23
ACTION: avl0.delete(int3) 
int3 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1046af488> : <type 'instance'>
avl_REF0 = set([18, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int3 = 11                                                               # STEP 24
ACTION: int3 = 11 
int3 = 14 : <type 'int'>
=> int3 = 11 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 25
ACTION: avl1.insert(int2) 
int2 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1046af1b8> : <type 'instance'>
avl_REF1 = set([2, 18, 6, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([2, 15, 18, 6, 5]) : <type 'set'>
==================================================
result = avl1.find(int2)                                                # STEP 26
ACTION: result = avl1.find(int2) 
int2 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1046af1b8> : <type 'instance'>
avl_REF1 = set([2, 15, 18, 6, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int2 = 20                                                               # STEP 27
ACTION: int2 = 20 
int2 = 15 : <type 'int'>
=> int2 = 20 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 28
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x1046af488> : <type 'instance'>
avl_REF0 = set([18, 13, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl1.delete(int2)                                                       # STEP 29
ACTION: avl1.delete(int2) 
int2 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1046af1b8> : <type 'instance'>
avl_REF1 = set([2, 15, 18, 6, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int1 = 15                                                               # STEP 30
ACTION: int1 = 15 
int1 = 5 : <type 'int'>
=> int1 = 15 : <type 'int'>
==================================================
result = avl0.find(int3)                                                # STEP 31
ACTION: result = avl0.find(int3) 
int3 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1046af488> : <type 'instance'>
avl_REF0 = set([18, 13, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
int2 = 15                                                               # STEP 32
ACTION: int2 = 15 
int2 = 20 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
int3 = 9                                                                # STEP 33
ACTION: int3 = 9 
int3 = 11 : <type 'int'>
=> int3 = 9 : <type 'int'>
==================================================
result = avl0.find(int1)                                                # STEP 34
ACTION: result = avl0.find(int1) 
int1 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1046af488> : <type 'instance'>
avl_REF0 = set([18, 13, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl1.delete(int3)                                                       # STEP 35
ACTION: avl1.delete(int3) 
int3 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1046af1b8> : <type 'instance'>
avl_REF1 = set([2, 15, 18, 6, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
result = avl1.find(int3)                                                # STEP 36
ACTION: result = avl1.find(int3) 
int3 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1046af1b8> : <type 'instance'>
avl_REF1 = set([2, 15, 18, 6, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl0 = avl.AVLTree()                                                    # STEP 37
ACTION: avl0 = avl.AVLTree() 
avl0 = <avl.AVLTree instance at 0x1046af488> : <type 'instance'>
avl_REF0 = set([18, 13, 15]) : <type 'set'>
=> avl0 = <avl.AVLTree instance at 0x1058518c0> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 38
ACTION: avl0.insert(int3) 
int3 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058518c0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([9]) : <type 'set'>
==================================================
int3 = 3                                                                # STEP 39
ACTION: int3 = 3 
int3 = 9 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
int1 = 16                                                               # STEP 40
ACTION: int1 = 16 
int1 = 15 : <type 'int'>
=> int1 = 16 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 41
ACTION: avl1.insert(int1) 
int1 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1046af1b8> : <type 'instance'>
avl_REF1 = set([2, 15, 18, 6, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([2, 5, 6, 15, 16, 18]) : <type 'set'>
==================================================
result = avl0.find(int1)                                                # STEP 42
ACTION: result = avl0.find(int1) 
int1 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058518c0> : <type 'instance'>
avl_REF0 = set([9]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
int1 = 18                                                               # STEP 43
ACTION: int1 = 18 
int1 = 16 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 44
ACTION: avl1.delete(int3) 
int3 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1046af1b8> : <type 'instance'>
avl_REF1 = set([2, 5, 6, 15, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int3 = 18                                                               # STEP 45
ACTION: int3 = 18 
int3 = 3 : <type 'int'>
=> int3 = 18 : <type 'int'>
==================================================
avl0 == avl1                                                            # STEP 46
ACTION: avl0 == avl1 
avl0 = <avl.AVLTree instance at 0x1058518c0> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x1046af1b8> : <type 'instance'>
avl_REF0 = set([9]) : <type 'set'>
avl_REF1 = set([2, 5, 6, 15, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF1 
==================================================
avl1.display()                                                          # STEP 47
ACTION: avl1.display() 
avl1 = <avl.AVLTree instance at 0x1046af1b8> : <type 'instance'>
avl_REF1 = set([2, 5, 6, 15, 16, 18]) : <type 'set'>
  6 [2:0]
-- < 2 [1:-1]
---- > 5 [0:0] L
-- > 16 [1:0]
---- < 15 [0:0] L
---- > 18 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([2, 5, 6, 15, 16, 18])
==================================================
avl1.insert(int0)                                                       # STEP 48
ACTION: avl1.insert(int0) 
int0 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1046af1b8> : <type 'instance'>
avl_REF1 = set([2, 5, 6, 15, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([2, 5, 6, 9, 15, 16, 18]) : <type 'set'>
==================================================
int0 = 19                                                               # STEP 49
ACTION: int0 = 19 
int0 = 9 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 50
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x10585ec68> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 51
ACTION: avl2.delete(int1) 
int1 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10585ec68> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl0.insert(int1)                                                       # STEP 52
ACTION: avl0.insert(int1) 
int1 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058518c0> : <type 'instance'>
avl_REF0 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([9, 18]) : <type 'set'>
==================================================
int1 = 7                                                                # STEP 53
ACTION: int1 = 7 
int1 = 18 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 54
ACTION: avl1.delete(int3) 
int3 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1046af1b8> : <type 'instance'>
avl_REF1 = set([2, 5, 6, 9, 15, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([2, 5, 6, 9, 15, 16]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10584ca70>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #4 STEP #77 (0:00:30.003643) Fri Apr 28 04:28:30 2017 [ 163 stmts 218 branches ]
  12 [3:1]
-- < 4 [2:-1]
---- < 2 [0:0] L
---- > 5 [1:-1]
------ > 6 [0:0] L
-- > 13 [1:-1]
---- > 18 [0:0] L
set([2, 4, 5, 6, 12, 13, 18])
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 73
STOPPING TESTING DUE TO TIMEOUT
8.72073294876 PERCENT COVERED
60.2277090549 TOTAL RUNTIME
8 EXECUTED
728 TOTAL TEST OPERATIONS
27.7604045868 TIME SPENT EXECUTING TEST OPERATIONS
0.0252804756165 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
27.9323472977 TIME SPENT CHECKING PROPERTIES
55.6927518845 TOTAL TIME SPENT RUNNING SUT
0.00455117225647 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int3 = 2                                                                 # STEP 0
int2 = 13                                                                # STEP 1
int0 = 2                                                                 # STEP 2
int1 = 18                                                                # STEP 3
avl0 = avl.AVLTree()                                                     # STEP 4
avl1 = avl.AVLTree()                                                     # STEP 5
avl0.insert(int2)                                                        # STEP 6
int2 = 15                                                                # STEP 7
avl1.insert(int0)                                                        # STEP 8
int0 = 9                                                                 # STEP 9
result = avl0.find(int3)                                                # STEP 10
int3 = 6                                                                # STEP 11
avl0.insert(int1)                                                       # STEP 12
result = avl1.find(int1)                                                # STEP 13
result = avl0.find(int1)                                                # STEP 14
result = avl0.find(int3)                                                # STEP 15
avl1.insert(int1)                                                       # STEP 16
int1 = 5                                                                # STEP 17
avl1.insert(int3)                                                       # STEP 18
avl0.insert(int2)                                                       # STEP 19
int3 = 14                                                               # STEP 20
result = avl1.find(int3)                                                # STEP 21
avl1.insert(int1)                                                       # STEP 22
avl0.delete(int3)                                                       # STEP 23
int3 = 11                                                               # STEP 24
avl1.insert(int2)                                                       # STEP 25
result = avl1.find(int2)                                                # STEP 26
int2 = 20                                                               # STEP 27
result = avl0.inorder()                                                 # STEP 28
avl1.delete(int2)                                                       # STEP 29
int1 = 15                                                               # STEP 30
result = avl0.find(int3)                                                # STEP 31
int2 = 15                                                               # STEP 32
int3 = 9                                                                # STEP 33
result = avl0.find(int1)                                                # STEP 34
avl1.delete(int3)                                                       # STEP 35
result = avl1.find(int3)                                                # STEP 36
avl0 = avl.AVLTree()                                                    # STEP 37
avl0.insert(int3)                                                       # STEP 38
int3 = 3                                                                # STEP 39
int1 = 16                                                               # STEP 40
avl1.insert(int1)                                                       # STEP 41
result = avl0.find(int1)                                                # STEP 42
int1 = 18                                                               # STEP 43
avl1.delete(int3)                                                       # STEP 44
int3 = 18                                                               # STEP 45
avl0 == avl1                                                            # STEP 46
avl1.display()                                                          # STEP 47
avl1.insert(int0)                                                       # STEP 48
int0 = 19                                                               # STEP 49
avl2 = avl.AVLTree()                                                    # STEP 50
avl2.delete(int1)                                                       # STEP 51
avl0.insert(int1)                                                       # STEP 52
int1 = 7                                                                # STEP 53
avl1.delete(int3)                                                       # STEP 54
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10584ca70>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
220 BRANCHES COVERED
164 STATEMENTS COVERED

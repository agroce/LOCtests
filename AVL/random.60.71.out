Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.614.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10389bc20>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 92 steps

SAVING TEST AS failure.614.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 7                                                                 # STEP 0
ACTION: int2 = 7 
int2 = None : <type 'NoneType'>
=> int2 = 7 : <type 'int'>
==================================================
int1 = 1                                                                 # STEP 1
ACTION: int1 = 1 
int1 = None : <type 'NoneType'>
=> int1 = 1 : <type 'int'>
==================================================
int3 = 6                                                                 # STEP 2
ACTION: int3 = 6 
int3 = None : <type 'NoneType'>
=> int3 = 6 : <type 'int'>
==================================================
int0 = 15                                                                # STEP 3
ACTION: int0 = 15 
int0 = None : <type 'NoneType'>
=> int0 = 15 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x1058d6908> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
result = avl1.find(int0)                                                 # STEP 5
ACTION: result = avl1.find(int0) 
int0 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058d6908> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl2 = avl.AVLTree()                                                     # STEP 6
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x1058d63b0> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.delete(int0)                                                        # STEP 7
ACTION: avl2.delete(int0) 
int0 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058d63b0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int0 = 15                                                                # STEP 8
ACTION: int0 = 15 
int0 = 15 : <type 'int'>
==================================================
avl2.delete(int3)                                                        # STEP 9
ACTION: avl2.delete(int3) 
int3 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058d63b0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int3 = 18                                                               # STEP 10
ACTION: int3 = 18 
int3 = 6 : <type 'int'>
=> int3 = 18 : <type 'int'>
==================================================
result = avl2.find(int3)                                                # STEP 11
ACTION: result = avl2.find(int3) 
int3 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058d63b0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl1.insert(int3)                                                       # STEP 12
ACTION: avl1.insert(int3) 
int3 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058d6908> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([18]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 13
ACTION: avl1.insert(int0) 
int0 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058d6908> : <type 'instance'>
avl_REF1 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([18, 15]) : <type 'set'>
==================================================
result = avl1.find(int3)                                                # STEP 14
ACTION: result = avl1.find(int3) 
int3 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058d6908> : <type 'instance'>
avl_REF1 = set([18, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
int0 = 20                                                               # STEP 15
ACTION: int0 = 20 
int0 = 15 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
result = avl1.find(int2)                                                # STEP 16
ACTION: result = avl1.find(int2) 
int2 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058d6908> : <type 'instance'>
avl_REF1 = set([18, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int3 = 17                                                               # STEP 17
ACTION: int3 = 17 
int3 = 18 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 18
ACTION: avl1.insert(int2) 
int2 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058d6908> : <type 'instance'>
avl_REF1 = set([18, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([18, 7, 15]) : <type 'set'>
==================================================
int2 = 12                                                               # STEP 19
ACTION: int2 = 12 
int2 = 7 : <type 'int'>
=> int2 = 12 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 20
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x1058d6908> : <type 'instance'>
avl_REF1 = set([18, 7, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
result = avl2.inorder()                                                 # STEP 21
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x1058d63b0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl1.delete(int2)                                                       # STEP 22
ACTION: avl1.delete(int2) 
int2 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058d6908> : <type 'instance'>
avl_REF1 = set([18, 7, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
result = avl1.inorder()                                                 # STEP 23
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1058d6908> : <type 'instance'>
avl_REF1 = set([18, 7, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl2.delete(int3)                                                       # STEP 24
ACTION: avl2.delete(int3) 
int3 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058d63b0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int3 = 10                                                               # STEP 25
ACTION: int3 = 10 
int3 = 17 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
result = avl1.find(int1)                                                # STEP 26
ACTION: result = avl1.find(int1) 
int1 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058d6908> : <type 'instance'>
avl_REF1 = set([18, 7, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int1 = 19                                                               # STEP 27
ACTION: int1 = 19 
int1 = 1 : <type 'int'>
=> int1 = 19 : <type 'int'>
==================================================
int2 = 20                                                               # STEP 28
ACTION: int2 = 20 
int2 = 12 : <type 'int'>
=> int2 = 20 : <type 'int'>
==================================================
avl2 == avl1                                                            # STEP 29
ACTION: avl2 == avl1 
avl2 = <avl.AVLTree instance at 0x1058d63b0> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x1058d6908> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
avl_REF1 = set([18, 7, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
result = avl2.find(int2)                                                # STEP 30
ACTION: result = avl2.find(int2) 
int2 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058d63b0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
result = avl2.find(int2)                                                # STEP 31
ACTION: result = avl2.find(int2) 
int2 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058d63b0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
result = avl1.find(int2)                                                # STEP 32
ACTION: result = avl1.find(int2) 
int2 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058d6908> : <type 'instance'>
avl_REF1 = set([18, 7, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl1.delete(int2)                                                       # STEP 33
ACTION: avl1.delete(int2) 
int2 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058d6908> : <type 'instance'>
avl_REF1 = set([18, 7, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
result = avl2.find(int3)                                                # STEP 34
ACTION: result = avl2.find(int3) 
int3 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058d63b0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl2.delete(int0)                                                       # STEP 35
ACTION: avl2.delete(int0) 
int0 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058d63b0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
result = avl2.inorder()                                                 # STEP 36
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x1058d63b0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl1.find(int1)                                                # STEP 37
ACTION: result = avl1.find(int1) 
int1 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058d6908> : <type 'instance'>
avl_REF1 = set([18, 7, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int0 = 5                                                                # STEP 38
ACTION: int0 = 5 
int0 = 20 : <type 'int'>
=> int0 = 5 : <type 'int'>
==================================================
int3 = 15                                                               # STEP 39
ACTION: int3 = 15 
int3 = 10 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
avl2 == avl1                                                            # STEP 40
ACTION: avl2 == avl1 
avl2 = <avl.AVLTree instance at 0x1058d63b0> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x1058d6908> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
avl_REF1 = set([18, 7, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
avl1.insert(int0)                                                       # STEP 41
ACTION: avl1.insert(int0) 
int0 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058d6908> : <type 'instance'>
avl_REF1 = set([18, 7, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([18, 7, 5, 15]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 42
ACTION: avl2.delete(int1) 
int1 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058d63b0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
result = avl2.find(int3)                                                # STEP 43
ACTION: result = avl2.find(int3) 
int3 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058d63b0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
result = avl1.find(int0)                                                # STEP 44
ACTION: result = avl1.find(int0) 
int0 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058d6908> : <type 'instance'>
avl_REF1 = set([18, 7, 5, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
int1 = 9                                                                # STEP 45
ACTION: int1 = 9 
int1 = 19 : <type 'int'>
=> int1 = 9 : <type 'int'>
==================================================
int0 = 18                                                               # STEP 46
ACTION: int0 = 18 
int0 = 5 : <type 'int'>
=> int0 = 18 : <type 'int'>
==================================================
int3 = 6                                                                # STEP 47
ACTION: int3 = 6 
int3 = 15 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
result = avl1.find(int2)                                                # STEP 48
ACTION: result = avl1.find(int2) 
int2 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058d6908> : <type 'instance'>
avl_REF1 = set([18, 7, 5, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
result = avl1.find(int0)                                                # STEP 49
ACTION: result = avl1.find(int0) 
int0 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058d6908> : <type 'instance'>
avl_REF1 = set([18, 7, 5, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl0 = avl.AVLTree()                                                    # STEP 50
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x103910ef0> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl2 == avl1                                                            # STEP 51
ACTION: avl2 == avl1 
avl2 = <avl.AVLTree instance at 0x1058d63b0> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x1058d6908> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
avl_REF1 = set([18, 7, 5, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
avl0.insert(int3)                                                       # STEP 52
ACTION: avl0.insert(int3) 
int3 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103910ef0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([6]) : <type 'set'>
==================================================
int3 = 16                                                               # STEP 53
ACTION: int3 = 16 
int3 = 6 : <type 'int'>
=> int3 = 16 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 54
ACTION: avl1.delete(int1) 
int1 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058d6908> : <type 'instance'>
avl_REF1 = set([18, 7, 5, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int1 = 20                                                               # STEP 55
ACTION: int1 = 20 
int1 = 9 : <type 'int'>
=> int1 = 20 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 56
ACTION: avl0.insert(int0) 
int0 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103910ef0> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([18, 6]) : <type 'set'>
==================================================
result = avl2.find(int1)                                                # STEP 57
ACTION: result = avl2.find(int1) 
int1 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058d63b0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl1.delete(int1)                                                       # STEP 58
ACTION: avl1.delete(int1) 
int1 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058d6908> : <type 'instance'>
avl_REF1 = set([18, 7, 5, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1 == avl1                                                            # STEP 59
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x1058d6908> : <type 'instance'>
avl_REF1 = set([18, 7, 5, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl2.insert(int3)                                                       # STEP 60
ACTION: avl2.insert(int3) 
int3 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058d63b0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([16]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 61
ACTION: avl2.delete(int3) 
int3 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058d63b0> : <type 'instance'>
avl_REF2 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 62
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1058d6908> : <type 'instance'>
avl_REF1 = set([18, 7, 5, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int2 = 6                                                                # STEP 63
ACTION: int2 = 6 
int2 = 20 : <type 'int'>
=> int2 = 6 : <type 'int'>
==================================================
int1 = 7                                                                # STEP 64
ACTION: int1 = 7 
int1 = 20 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
avl0 == avl0                                                            # STEP 65
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x103910ef0> : <type 'instance'>
avl_REF0 = set([18, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl2.insert(int2)                                                       # STEP 66
ACTION: avl2.insert(int2) 
int2 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058d63b0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([6]) : <type 'set'>
==================================================
avl2 == avl1                                                            # STEP 67
ACTION: avl2 == avl1 
avl2 = <avl.AVLTree instance at 0x1058d63b0> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x1058d6908> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
avl_REF1 = set([18, 7, 5, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
avl0.delete(int2)                                                       # STEP 68
ACTION: avl0.delete(int2) 
int2 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103910ef0> : <type 'instance'>
avl_REF0 = set([18, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([18]) : <type 'set'>
==================================================
int3 = 17                                                               # STEP 69
ACTION: int3 = 17 
int3 = 16 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
int0 = 17                                                               # STEP 70
ACTION: int0 = 17 
int0 = 18 : <type 'int'>
=> int0 = 17 : <type 'int'>
==================================================
avl0 == avl0                                                            # STEP 71
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x103910ef0> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
int2 = 15                                                               # STEP 72
ACTION: int2 = 15 
int2 = 6 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 73
ACTION: avl1.insert(int1) 
int1 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058d6908> : <type 'instance'>
avl_REF1 = set([18, 7, 5, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
result = avl2.find(int2)                                                # STEP 74
ACTION: result = avl2.find(int2) 
int2 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058d63b0> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int2 = 16                                                               # STEP 75
ACTION: int2 = 16 
int2 = 15 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
avl0 == avl2                                                            # STEP 76
ACTION: avl0 == avl2 
avl0 = <avl.AVLTree instance at 0x103910ef0> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x1058d63b0> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
avl2.delete(int3)                                                       # STEP 77
ACTION: avl2.delete(int3) 
int3 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058d63b0> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int1 = 15                                                               # STEP 78
ACTION: int1 = 15 
int1 = 7 : <type 'int'>
=> int1 = 15 : <type 'int'>
==================================================
int3 = 15                                                               # STEP 79
ACTION: int3 = 15 
int3 = 17 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 80
ACTION: avl0.delete(int3) 
int3 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103910ef0> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int3 = 3                                                                # STEP 81
ACTION: int3 = 3 
int3 = 15 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 82
ACTION: avl2.delete(int2) 
int2 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058d63b0> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl1 == avl0                                                            # STEP 83
ACTION: avl1 == avl0 
avl1 = <avl.AVLTree instance at 0x1058d6908> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x103910ef0> : <type 'instance'>
avl_REF1 = set([18, 7, 5, 15]) : <type 'set'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
avl0.insert(int2)                                                       # STEP 84
ACTION: avl0.insert(int2) 
int2 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103910ef0> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([16, 18]) : <type 'set'>
==================================================
result = avl2.find(int0)                                                # STEP 85
ACTION: result = avl2.find(int0) 
int0 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058d63b0> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl1.delete(int3)                                                       # STEP 86
ACTION: avl1.delete(int3) 
int3 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058d6908> : <type 'instance'>
avl_REF1 = set([18, 7, 5, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int2 = 18                                                               # STEP 87
ACTION: int2 = 18 
int2 = 16 : <type 'int'>
=> int2 = 18 : <type 'int'>
==================================================
avl2 == avl1                                                            # STEP 88
ACTION: avl2 == avl1 
avl2 = <avl.AVLTree instance at 0x1058d63b0> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x1058d6908> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
avl_REF1 = set([18, 7, 5, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
int3 = 17                                                               # STEP 89
ACTION: int3 = 17 
int3 = 3 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
int0 = 16                                                               # STEP 90
ACTION: int0 = 16 
int0 = 17 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 91
ACTION: avl1.delete(int2) 
int2 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058d6908> : <type 'instance'>
avl_REF1 = set([18, 7, 5, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([7, 5, 15]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1058cfe60>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #4 STEP #0 (0:00:32.527425) Fri Apr 28 06:49:00 2017 [ 132 stmts 179 branches ]
  7 [2:0]
-- < 5 [1:1]
---- < 4 [0:0] L
-- > 19 [1:0]
---- < 13 [0:0] L
---- > 20 [0:0] L
set([4, 5, 7, 13, 19, 20])
  7 [3:-1]
-- < 5 [1:1]
---- < 4 [0:0] L
-- > 19 [2:1]
---- < 13 [1:0]
------ < 10 [0:0] L
------ > 14 [0:0] L
---- > 20 [0:0] L
set([4, 5, 7, 10, 13, 14, 19, 20])
  9 [3:-1]
-- < 5 [1:1]
---- < 4 [0:0] L
-- > 13 [2:-1]
---- < 10 [0:0] L
---- > 19 [1:0]
------ < 14 [0:0] L
------ > 20 [0:0] L
set([4, 5, 9, 10, 13, 14, 19, 20])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10584c4d0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 59 steps

SAVING TEST AS failure.614.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 7                                                                 # STEP 0
ACTION: int2 = 7 
int2 = None : <type 'NoneType'>
=> int2 = 7 : <type 'int'>
==================================================
int0 = 5                                                                 # STEP 1
ACTION: int0 = 5 
int0 = None : <type 'NoneType'>
=> int0 = 5 : <type 'int'>
==================================================
int1 = 19                                                                # STEP 2
ACTION: int1 = 19 
int1 = None : <type 'NoneType'>
=> int1 = 19 : <type 'int'>
==================================================
int3 = 9                                                                 # STEP 3
ACTION: int3 = 9 
int3 = None : <type 'NoneType'>
=> int3 = 9 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x10584c878> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int0)                                                        # STEP 5
ACTION: avl2.insert(int0) 
int0 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10584c878> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([5]) : <type 'set'>
==================================================
int0 = 16                                                                # STEP 6
ACTION: int0 = 16 
int0 = 5 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
result = avl2.find(int0)                                                 # STEP 7
ACTION: result = avl2.find(int0) 
int0 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10584c878> : <type 'instance'>
avl_REF2 = set([5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl2.delete(int3)                                                        # STEP 8
ACTION: avl2.delete(int3) 
int3 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10584c878> : <type 'instance'>
avl_REF2 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int0 = 4                                                                 # STEP 9
ACTION: int0 = 4 
int0 = 16 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
int3 = 13                                                               # STEP 10
ACTION: int3 = 13 
int3 = 9 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 11
ACTION: avl2.insert(int2) 
int2 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10584c878> : <type 'instance'>
avl_REF2 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([5, 7]) : <type 'set'>
==================================================
int2 = 2                                                                # STEP 12
ACTION: int2 = 2 
int2 = 7 : <type 'int'>
=> int2 = 2 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 13
ACTION: avl2.insert(int1) 
int1 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10584c878> : <type 'instance'>
avl_REF2 = set([5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([19, 5, 7]) : <type 'set'>
==================================================
int1 = 20                                                               # STEP 14
ACTION: int1 = 20 
int1 = 19 : <type 'int'>
=> int1 = 20 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 15
ACTION: avl2.insert(int1) 
int1 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10584c878> : <type 'instance'>
avl_REF2 = set([19, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([19, 20, 5, 7]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 16
ACTION: avl2.insert(int0) 
int0 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10584c878> : <type 'instance'>
avl_REF2 = set([19, 20, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([4, 19, 20, 5, 7]) : <type 'set'>
==================================================
result = avl2.find(int0)                                                # STEP 17
ACTION: result = avl2.find(int0) 
int0 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10584c878> : <type 'instance'>
avl_REF2 = set([4, 19, 20, 5, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
result = avl2.find(int3)                                                # STEP 18
ACTION: result = avl2.find(int3) 
int3 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10584c878> : <type 'instance'>
avl_REF2 = set([4, 19, 20, 5, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
int1 = 14                                                               # STEP 19
ACTION: int1 = 14 
int1 = 20 : <type 'int'>
=> int1 = 14 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 20
ACTION: avl2.insert(int3) 
int3 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10584c878> : <type 'instance'>
avl_REF2 = set([4, 19, 20, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([4, 5, 7, 13, 19, 20]) : <type 'set'>
==================================================
int0 = 5                                                                # STEP 21
ACTION: int0 = 5 
int0 = 4 : <type 'int'>
=> int0 = 5 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 22
ACTION: avl2.insert(int0) 
int0 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10584c878> : <type 'instance'>
avl_REF2 = set([4, 5, 7, 13, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl2.display()                                                          # STEP 23
ACTION: avl2.display() 
avl2 = <avl.AVLTree instance at 0x10584c878> : <type 'instance'>
avl_REF2 = set([4, 5, 7, 13, 19, 20]) : <type 'set'>
  7 [2:0]
-- < 5 [1:1]
---- < 4 [0:0] L
-- > 19 [1:0]
---- < 13 [0:0] L
---- > 20 [0:0] L
REFERENCE ACTION: print(avl_REF2) 
set([4, 5, 7, 13, 19, 20])
==================================================
result = avl2.find(int2)                                                # STEP 24
ACTION: result = avl2.find(int2) 
int2 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10584c878> : <type 'instance'>
avl_REF2 = set([4, 5, 7, 13, 19, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int0 = 2                                                                # STEP 25
ACTION: int0 = 2 
int0 = 5 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 26
ACTION: avl2.insert(int1) 
int1 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10584c878> : <type 'instance'>
avl_REF2 = set([4, 5, 7, 13, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([4, 5, 7, 13, 14, 19, 20]) : <type 'set'>
==================================================
int1 = 7                                                                # STEP 27
ACTION: int1 = 7 
int1 = 14 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
result = avl2.find(int3)                                                # STEP 28
ACTION: result = avl2.find(int3) 
int3 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10584c878> : <type 'instance'>
avl_REF2 = set([4, 5, 7, 13, 14, 19, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
int2 = 10                                                               # STEP 29
ACTION: int2 = 10 
int2 = 2 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
int3 = 9                                                                # STEP 30
ACTION: int3 = 9 
int3 = 13 : <type 'int'>
=> int3 = 9 : <type 'int'>
==================================================
result = avl2.find(int0)                                                # STEP 31
ACTION: result = avl2.find(int0) 
int0 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10584c878> : <type 'instance'>
avl_REF2 = set([4, 5, 7, 13, 14, 19, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
int0 = 3                                                                # STEP 32
ACTION: int0 = 3 
int0 = 2 : <type 'int'>
=> int0 = 3 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 33
ACTION: avl2.insert(int2) 
int2 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10584c878> : <type 'instance'>
avl_REF2 = set([4, 5, 7, 13, 14, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([4, 5, 7, 10, 13, 14, 19, 20]) : <type 'set'>
==================================================
int2 = 15                                                               # STEP 34
ACTION: int2 = 15 
int2 = 10 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
avl2.display()                                                          # STEP 35
ACTION: avl2.display() 
avl2 = <avl.AVLTree instance at 0x10584c878> : <type 'instance'>
avl_REF2 = set([4, 5, 7, 10, 13, 14, 19, 20]) : <type 'set'>
  7 [3:-1]
-- < 5 [1:1]
---- < 4 [0:0] L
-- > 19 [2:1]
---- < 13 [1:0]
------ < 10 [0:0] L
------ > 14 [0:0] L
---- > 20 [0:0] L
REFERENCE ACTION: print(avl_REF2) 
set([4, 5, 7, 10, 13, 14, 19, 20])
==================================================
avl2.delete(int0)                                                       # STEP 36
ACTION: avl2.delete(int0) 
int0 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10584c878> : <type 'instance'>
avl_REF2 = set([4, 5, 7, 10, 13, 14, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int0 = 8                                                                # STEP 37
ACTION: int0 = 8 
int0 = 3 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
avl2 == avl2                                                            # STEP 38
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x10584c878> : <type 'instance'>
avl_REF2 = set([4, 5, 7, 10, 13, 14, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl2.insert(int3)                                                       # STEP 39
ACTION: avl2.insert(int3) 
int3 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10584c878> : <type 'instance'>
avl_REF2 = set([4, 5, 7, 10, 13, 14, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([4, 5, 7, 9, 10, 13, 14, 19, 20]) : <type 'set'>
==================================================
int3 = 4                                                                # STEP 40
ACTION: int3 = 4 
int3 = 9 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 41
ACTION: avl2.delete(int1) 
int1 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10584c878> : <type 'instance'>
avl_REF2 = set([4, 5, 7, 9, 10, 13, 14, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([4, 5, 9, 10, 13, 14, 19, 20]) : <type 'set'>
==================================================
int1 = 9                                                                # STEP 42
ACTION: int1 = 9 
int1 = 7 : <type 'int'>
=> int1 = 9 : <type 'int'>
==================================================
result = avl2.find(int0)                                                # STEP 43
ACTION: result = avl2.find(int0) 
int0 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10584c878> : <type 'instance'>
avl_REF2 = set([4, 5, 9, 10, 13, 14, 19, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
int0 = 2                                                                # STEP 44
ACTION: int0 = 2 
int0 = 8 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
result = avl2.find(int0)                                                # STEP 45
ACTION: result = avl2.find(int0) 
int0 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10584c878> : <type 'instance'>
avl_REF2 = set([4, 5, 9, 10, 13, 14, 19, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl2.delete(int0)                                                       # STEP 46
ACTION: avl2.delete(int0) 
int0 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10584c878> : <type 'instance'>
avl_REF2 = set([4, 5, 9, 10, 13, 14, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int0 = 7                                                                # STEP 47
ACTION: int0 = 7 
int0 = 2 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
avl2.display()                                                          # STEP 48
ACTION: avl2.display() 
avl2 = <avl.AVLTree instance at 0x10584c878> : <type 'instance'>
avl_REF2 = set([4, 5, 9, 10, 13, 14, 19, 20]) : <type 'set'>
  9 [3:-1]
-- < 5 [1:1]
---- < 4 [0:0] L
-- > 13 [2:-1]
---- < 10 [0:0] L
---- > 19 [1:0]
------ < 14 [0:0] L
------ > 20 [0:0] L
REFERENCE ACTION: print(avl_REF2) 
set([4, 5, 9, 10, 13, 14, 19, 20])
==================================================
avl0 = avl.AVLTree()                                                    # STEP 49
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x103e3ef80> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 50
ACTION: avl2.delete(int2) 
int2 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10584c878> : <type 'instance'>
avl_REF2 = set([4, 5, 9, 10, 13, 14, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl0 == avl2                                                            # STEP 51
ACTION: avl0 == avl2 
avl0 = <avl.AVLTree instance at 0x103e3ef80> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x10584c878> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
avl_REF2 = set([4, 5, 9, 10, 13, 14, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
result = avl2.find(int3)                                                # STEP 52
ACTION: result = avl2.find(int3) 
int3 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10584c878> : <type 'instance'>
avl_REF2 = set([4, 5, 9, 10, 13, 14, 19, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
int2 = 3                                                                # STEP 53
ACTION: int2 = 3 
int2 = 15 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 54
ACTION: avl2.insert(int1) 
int1 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10584c878> : <type 'instance'>
avl_REF2 = set([4, 5, 9, 10, 13, 14, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
int1 = 4                                                                # STEP 55
ACTION: int1 = 4 
int1 = 9 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
avl0 == avl0                                                            # STEP 56
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x103e3ef80> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
int3 = 3                                                                # STEP 57
ACTION: int3 = 3 
int3 = 4 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 58
ACTION: avl2.delete(int1) 
int1 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10584c878> : <type 'instance'>
avl_REF2 = set([4, 5, 9, 10, 13, 14, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([5, 9, 10, 13, 14, 19, 20]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103e337a0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 6
STOPPING TESTING DUE TO TIMEOUT
8.58500169664 PERCENT COVERED
60.1775410175 TOTAL RUNTIME
7 EXECUTED
557 TOTAL TEST OPERATIONS
23.5899951458 TIME SPENT EXECUTING TEST OPERATIONS
0.0199811458588 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
23.6878576279 TIME SPENT CHECKING PROPERTIES
47.2778527737 TOTAL TIME SPENT RUNNING SUT
0.0045063495636 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
2 FAILED
0 REPEATS OF FAILURES
2 ACTUAL DISTINCT FAILURES

FAILURE 0
int2 = 7                                                                 # STEP 0
int1 = 1                                                                 # STEP 1
int3 = 6                                                                 # STEP 2
int0 = 15                                                                # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
result = avl1.find(int0)                                                 # STEP 5
avl2 = avl.AVLTree()                                                     # STEP 6
avl2.delete(int0)                                                        # STEP 7
int0 = 15                                                                # STEP 8
avl2.delete(int3)                                                        # STEP 9
int3 = 18                                                               # STEP 10
result = avl2.find(int3)                                                # STEP 11
avl1.insert(int3)                                                       # STEP 12
avl1.insert(int0)                                                       # STEP 13
result = avl1.find(int3)                                                # STEP 14
int0 = 20                                                               # STEP 15
result = avl1.find(int2)                                                # STEP 16
int3 = 17                                                               # STEP 17
avl1.insert(int2)                                                       # STEP 18
int2 = 12                                                               # STEP 19
avl1 == avl1                                                            # STEP 20
result = avl2.inorder()                                                 # STEP 21
avl1.delete(int2)                                                       # STEP 22
result = avl1.inorder()                                                 # STEP 23
avl2.delete(int3)                                                       # STEP 24
int3 = 10                                                               # STEP 25
result = avl1.find(int1)                                                # STEP 26
int1 = 19                                                               # STEP 27
int2 = 20                                                               # STEP 28
avl2 == avl1                                                            # STEP 29
result = avl2.find(int2)                                                # STEP 30
result = avl2.find(int2)                                                # STEP 31
result = avl1.find(int2)                                                # STEP 32
avl1.delete(int2)                                                       # STEP 33
result = avl2.find(int3)                                                # STEP 34
avl2.delete(int0)                                                       # STEP 35
result = avl2.inorder()                                                 # STEP 36
result = avl1.find(int1)                                                # STEP 37
int0 = 5                                                                # STEP 38
int3 = 15                                                               # STEP 39
avl2 == avl1                                                            # STEP 40
avl1.insert(int0)                                                       # STEP 41
avl2.delete(int1)                                                       # STEP 42
result = avl2.find(int3)                                                # STEP 43
result = avl1.find(int0)                                                # STEP 44
int1 = 9                                                                # STEP 45
int0 = 18                                                               # STEP 46
int3 = 6                                                                # STEP 47
result = avl1.find(int2)                                                # STEP 48
result = avl1.find(int0)                                                # STEP 49
avl0 = avl.AVLTree()                                                    # STEP 50
avl2 == avl1                                                            # STEP 51
avl0.insert(int3)                                                       # STEP 52
int3 = 16                                                               # STEP 53
avl1.delete(int1)                                                       # STEP 54
int1 = 20                                                               # STEP 55
avl0.insert(int0)                                                       # STEP 56
result = avl2.find(int1)                                                # STEP 57
avl1.delete(int1)                                                       # STEP 58
avl1 == avl1                                                            # STEP 59
avl2.insert(int3)                                                       # STEP 60
avl2.delete(int3)                                                       # STEP 61
result = avl1.inorder()                                                 # STEP 62
int2 = 6                                                                # STEP 63
int1 = 7                                                                # STEP 64
avl0 == avl0                                                            # STEP 65
avl2.insert(int2)                                                       # STEP 66
avl2 == avl1                                                            # STEP 67
avl0.delete(int2)                                                       # STEP 68
int3 = 17                                                               # STEP 69
int0 = 17                                                               # STEP 70
avl0 == avl0                                                            # STEP 71
int2 = 15                                                               # STEP 72
avl1.insert(int1)                                                       # STEP 73
result = avl2.find(int2)                                                # STEP 74
int2 = 16                                                               # STEP 75
avl0 == avl2                                                            # STEP 76
avl2.delete(int3)                                                       # STEP 77
int1 = 15                                                               # STEP 78
int3 = 15                                                               # STEP 79
avl0.delete(int3)                                                       # STEP 80
int3 = 3                                                                # STEP 81
avl2.delete(int2)                                                       # STEP 82
avl1 == avl0                                                            # STEP 83
avl0.insert(int2)                                                       # STEP 84
result = avl2.find(int0)                                                # STEP 85
avl1.delete(int3)                                                       # STEP 86
int2 = 18                                                               # STEP 87
avl2 == avl1                                                            # STEP 88
int3 = 17                                                               # STEP 89
int0 = 16                                                               # STEP 90
avl1.delete(int2)                                                       # STEP 91
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1058cfe60>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE 1
int2 = 7                                                                 # STEP 0
int0 = 5                                                                 # STEP 1
int1 = 19                                                                # STEP 2
int3 = 9                                                                 # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
avl2.insert(int0)                                                        # STEP 5
int0 = 16                                                                # STEP 6
result = avl2.find(int0)                                                 # STEP 7
avl2.delete(int3)                                                        # STEP 8
int0 = 4                                                                 # STEP 9
int3 = 13                                                               # STEP 10
avl2.insert(int2)                                                       # STEP 11
int2 = 2                                                                # STEP 12
avl2.insert(int1)                                                       # STEP 13
int1 = 20                                                               # STEP 14
avl2.insert(int1)                                                       # STEP 15
avl2.insert(int0)                                                       # STEP 16
result = avl2.find(int0)                                                # STEP 17
result = avl2.find(int3)                                                # STEP 18
int1 = 14                                                               # STEP 19
avl2.insert(int3)                                                       # STEP 20
int0 = 5                                                                # STEP 21
avl2.insert(int0)                                                       # STEP 22
avl2.display()                                                          # STEP 23
result = avl2.find(int2)                                                # STEP 24
int0 = 2                                                                # STEP 25
avl2.insert(int1)                                                       # STEP 26
int1 = 7                                                                # STEP 27
result = avl2.find(int3)                                                # STEP 28
int2 = 10                                                               # STEP 29
int3 = 9                                                                # STEP 30
result = avl2.find(int0)                                                # STEP 31
int0 = 3                                                                # STEP 32
avl2.insert(int2)                                                       # STEP 33
int2 = 15                                                               # STEP 34
avl2.display()                                                          # STEP 35
avl2.delete(int0)                                                       # STEP 36
int0 = 8                                                                # STEP 37
avl2 == avl2                                                            # STEP 38
avl2.insert(int3)                                                       # STEP 39
int3 = 4                                                                # STEP 40
avl2.delete(int1)                                                       # STEP 41
int1 = 9                                                                # STEP 42
result = avl2.find(int0)                                                # STEP 43
int0 = 2                                                                # STEP 44
result = avl2.find(int0)                                                # STEP 45
avl2.delete(int0)                                                       # STEP 46
int0 = 7                                                                # STEP 47
avl2.display()                                                          # STEP 48
avl0 = avl.AVLTree()                                                    # STEP 49
avl2.delete(int2)                                                       # STEP 50
avl0 == avl2                                                            # STEP 51
result = avl2.find(int3)                                                # STEP 52
int2 = 3                                                                # STEP 53
avl2.insert(int1)                                                       # STEP 54
int1 = 4                                                                # STEP 55
avl0 == avl0                                                            # STEP 56
int3 = 3                                                                # STEP 57
avl2.delete(int1)                                                       # STEP 58
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103e337a0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
216 BRANCHES COVERED
161 STATEMENTS COVERED

Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.62046.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  11 [2:0]
-- < 6 [1:0]
---- < 4 [0:0] L
---- > 9 [0:0] L
-- > 17 [1:-1]
---- > 18 [0:0] L
set([4, 6, 9, 11, 17, 18])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10595b488>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
Original test has 26 steps

SAVING TEST AS failure.62046.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 14                                                                # STEP 0
ACTION: int2 = 14 
int2 = None : <type 'NoneType'>
=> int2 = 14 : <type 'int'>
==================================================
int1 = 1                                                                 # STEP 1
ACTION: int1 = 1 
int1 = None : <type 'NoneType'>
=> int1 = 1 : <type 'int'>
==================================================
int3 = 4                                                                 # STEP 2
ACTION: int3 = 4 
int3 = None : <type 'NoneType'>
=> int3 = 4 : <type 'int'>
==================================================
int0 = 10                                                                # STEP 3
ACTION: int0 = 10 
int0 = None : <type 'NoneType'>
=> int0 = 10 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x1044565f0> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.delete(int0)                                                        # STEP 5
ACTION: avl1.delete(int0) 
int0 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1044565f0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
result = avl1.inorder()                                                  # STEP 6
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x1044565f0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1 == avl1                                                             # STEP 7
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x1044565f0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
int0 = 4                                                                 # STEP 8
ACTION: int0 = 4 
int0 = 10 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
avl1 == avl1                                                             # STEP 9
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x1044565f0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
result = avl1.inorder()                                                 # STEP 10
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x1044565f0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
result = avl1.inorder()                                                 # STEP 11
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x1044565f0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int2)                                                       # STEP 12
ACTION: avl1.insert(int2) 
int2 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1044565f0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([14]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 13
ACTION: avl1.insert(int2) 
int2 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1044565f0> : <type 'instance'>
avl_REF1 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
avl1.delete(int1)                                                       # STEP 14
ACTION: avl1.delete(int1) 
int1 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1044565f0> : <type 'instance'>
avl_REF1 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.insert(int1)                                                       # STEP 15
ACTION: avl1.insert(int1) 
int1 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1044565f0> : <type 'instance'>
avl_REF1 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([1, 14]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 16
ACTION: avl1.insert(int1) 
int1 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1044565f0> : <type 'instance'>
avl_REF1 = set([1, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
int1 = 3                                                                # STEP 17
ACTION: int1 = 3 
int1 = 1 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 18
ACTION: avl1.delete(int0) 
int0 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1044565f0> : <type 'instance'>
avl_REF1 = set([1, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int0 = 2                                                                # STEP 19
ACTION: int0 = 2 
int0 = 4 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 20
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x1044565f0> : <type 'instance'>
avl_REF1 = set([1, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
int2 = 4                                                                # STEP 21
ACTION: int2 = 4 
int2 = 14 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 22
ACTION: avl1.delete(int0) 
int0 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1044565f0> : <type 'instance'>
avl_REF1 = set([1, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.insert(int3)                                                       # STEP 23
ACTION: avl1.insert(int3) 
int3 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1044565f0> : <type 'instance'>
avl_REF1 = set([1, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([1, 4, 14]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 24
ACTION: avl1.insert(int0) 
int0 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1044565f0> : <type 'instance'>
avl_REF1 = set([1, 4, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([1, 2, 4, 14]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 25
ACTION: avl1.delete(int2) 
int2 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1044565f0> : <type 'instance'>
avl_REF1 = set([1, 2, 4, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([1, 2, 14]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1041965f0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104270d40>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
Original test has 22 steps

SAVING TEST AS failure.62046.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
avl0 = avl.AVLTree()                                                     # STEP 0
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x1042160e0> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
result = avl0.inorder()                                                  # STEP 1
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x1042160e0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0 == avl0                                                             # STEP 2
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x1042160e0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
int3 = 18                                                                # STEP 3
ACTION: int3 = 18 
int3 = None : <type 'NoneType'>
=> int3 = 18 : <type 'int'>
==================================================
avl0.insert(int3)                                                        # STEP 4
ACTION: avl0.insert(int3) 
int3 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1042160e0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([18]) : <type 'set'>
==================================================
result = avl0.inorder()                                                  # STEP 5
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x1042160e0> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int3)                                                        # STEP 6
ACTION: avl0.insert(int3) 
int3 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1042160e0> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
avl0.insert(int3)                                                        # STEP 7
ACTION: avl0.insert(int3) 
int3 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1042160e0> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
avl0.insert(int3)                                                        # STEP 8
ACTION: avl0.insert(int3) 
int3 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1042160e0> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
int1 = 15                                                                # STEP 9
ACTION: int1 = 15 
int1 = None : <type 'NoneType'>
=> int1 = 15 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 10
ACTION: avl0.delete(int3) 
int3 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1042160e0> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 11
ACTION: avl0.insert(int3) 
int3 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1042160e0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([18]) : <type 'set'>
==================================================
int0 = 19                                                               # STEP 12
ACTION: int0 = 19 
int0 = None : <type 'NoneType'>
=> int0 = 19 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 13
ACTION: avl0.delete(int0) 
int0 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1042160e0> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int3 = 4                                                                # STEP 14
ACTION: int3 = 4 
int3 = 18 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 15
ACTION: avl0.insert(int3) 
int3 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1042160e0> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([18, 4]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 16
ACTION: avl0.insert(int0) 
int0 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1042160e0> : <type 'instance'>
avl_REF0 = set([18, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([18, 19, 4]) : <type 'set'>
==================================================
int3 = 6                                                                # STEP 17
ACTION: int3 = 6 
int3 = 4 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 18
ACTION: avl0.delete(int1) 
int1 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1042160e0> : <type 'instance'>
avl_REF0 = set([18, 19, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.insert(int1)                                                       # STEP 19
ACTION: avl0.insert(int1) 
int1 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1042160e0> : <type 'instance'>
avl_REF0 = set([18, 19, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([18, 19, 4, 15]) : <type 'set'>
==================================================
int2 = 20                                                               # STEP 20
ACTION: int2 = 20 
int2 = None : <type 'NoneType'>
=> int2 = 20 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 21
ACTION: avl0.delete(int0) 
int0 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1042160e0> : <type 'instance'>
avl_REF0 = set([18, 19, 4, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([18, 4, 15]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1044fafc8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1058ac710>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
Original test has 42 steps

SAVING TEST AS failure.62046.test.2
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 14                                                                # STEP 0
ACTION: int2 = 14 
int2 = None : <type 'NoneType'>
=> int2 = 14 : <type 'int'>
==================================================
int3 = 18                                                                # STEP 1
ACTION: int3 = 18 
int3 = None : <type 'NoneType'>
=> int3 = 18 : <type 'int'>
==================================================
int1 = 18                                                                # STEP 2
ACTION: int1 = 18 
int1 = None : <type 'NoneType'>
=> int1 = 18 : <type 'int'>
==================================================
int0 = 3                                                                 # STEP 3
ACTION: int0 = 3 
int0 = None : <type 'NoneType'>
=> int0 = 3 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x1058acfc8> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int3)                                                        # STEP 5
ACTION: avl2.insert(int3) 
int3 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1058acfc8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([18]) : <type 'set'>
==================================================
avl2.delete(int1)                                                        # STEP 6
ACTION: avl2.delete(int1) 
int1 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1058acfc8> : <type 'instance'>
avl_REF2 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.delete(int3)                                                        # STEP 7
ACTION: avl2.delete(int3) 
int3 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1058acfc8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
result = avl2.find(int2)                                                 # STEP 8
ACTION: result = avl2.find(int2) 
int2 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1058acfc8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl2.delete(int0)                                                        # STEP 9
ACTION: avl2.delete(int0) 
int0 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1058acfc8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int2 = 6                                                                # STEP 10
ACTION: int2 = 6 
int2 = 14 : <type 'int'>
=> int2 = 6 : <type 'int'>
==================================================
avl2 == avl2                                                            # STEP 11
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x1058acfc8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl2 == avl2                                                            # STEP 12
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x1058acfc8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl2.delete(int2)                                                       # STEP 13
ACTION: avl2.delete(int2) 
int2 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1058acfc8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl0 = avl.AVLTree()                                                    # STEP 14
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x1058f8e60> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 15
ACTION: avl2.delete(int0) 
int0 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1058acfc8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
result = avl0.find(int1)                                                # STEP 16
ACTION: result = avl0.find(int1) 
int1 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1058f8e60> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl0.insert(int0)                                                       # STEP 17
ACTION: avl0.insert(int0) 
int0 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1058f8e60> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([3]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 18
ACTION: avl2.insert(int1) 
int1 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1058acfc8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([18]) : <type 'set'>
==================================================
result = avl2.find(int2)                                                # STEP 19
ACTION: result = avl2.find(int2) 
int2 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1058acfc8> : <type 'instance'>
avl_REF2 = set([18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int2 = 2                                                                # STEP 20
ACTION: int2 = 2 
int2 = 6 : <type 'int'>
=> int2 = 2 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 21
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x1058acfc8> : <type 'instance'>
avl_REF2 = set([18]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl0.insert(int1)                                                       # STEP 22
ACTION: avl0.insert(int1) 
int1 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1058f8e60> : <type 'instance'>
avl_REF0 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([18, 3]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 23
ACTION: avl2.delete(int3) 
int3 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1058acfc8> : <type 'instance'>
avl_REF2 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int3 = 16                                                               # STEP 24
ACTION: int3 = 16 
int3 = 18 : <type 'int'>
=> int3 = 16 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 25
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x1058f8e60> : <type 'instance'>
avl_REF0 = set([18, 3]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
result = avl0.find(int3)                                                # STEP 26
ACTION: result = avl0.find(int3) 
int3 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1058f8e60> : <type 'instance'>
avl_REF0 = set([18, 3]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
int3 = 6                                                                # STEP 27
ACTION: int3 = 6 
int3 = 16 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
int0 = 1                                                                # STEP 28
ACTION: int0 = 1 
int0 = 3 : <type 'int'>
=> int0 = 1 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 29
ACTION: avl2.insert(int2) 
int2 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1058acfc8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([2]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 30
ACTION: avl2.insert(int0) 
int0 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1058acfc8> : <type 'instance'>
avl_REF2 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([1, 2]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 31
ACTION: avl2.insert(int1) 
int1 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1058acfc8> : <type 'instance'>
avl_REF2 = set([1, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([1, 2, 18]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 32
ACTION: avl0.insert(int1) 
int1 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1058f8e60> : <type 'instance'>
avl_REF0 = set([18, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl2.insert(int3)                                                       # STEP 33
ACTION: avl2.insert(int3) 
int3 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1058acfc8> : <type 'instance'>
avl_REF2 = set([1, 2, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([1, 2, 18, 6]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 34
ACTION: avl0.delete(int2) 
int2 = 2 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1058f8e60> : <type 'instance'>
avl_REF0 = set([18, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.delete(int0)                                                       # STEP 35
ACTION: avl0.delete(int0) 
int0 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1058f8e60> : <type 'instance'>
avl_REF0 = set([18, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int3 = 9                                                                # STEP 36
ACTION: int3 = 9 
int3 = 6 : <type 'int'>
=> int3 = 9 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 37
ACTION: avl2.insert(int2) 
int2 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1058acfc8> : <type 'instance'>
avl_REF2 = set([1, 2, 18, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
result = avl2.inorder()                                                 # STEP 38
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x1058acfc8> : <type 'instance'>
avl_REF2 = set([1, 2, 18, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl0.insert(int2)                                                       # STEP 39
ACTION: avl0.insert(int2) 
int2 = 2 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1058f8e60> : <type 'instance'>
avl_REF0 = set([18, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([18, 3, 2]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 40
ACTION: avl0.insert(int0) 
int0 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1058f8e60> : <type 'instance'>
avl_REF0 = set([18, 3, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([1, 18, 3, 2]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 41
ACTION: avl2.delete(int0) 
int0 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1058acfc8> : <type 'instance'>
avl_REF2 = set([1, 2, 18, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([2, 18, 6]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105972560>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 3 DISTINCT FAILURES
TEST #5 STEP #15 (0:00:30.026098) Mon May  1 17:36:16 2017 [ 159 stmts 209 branches ]
  9 [3:1]
-- < 5 [2:-1]
---- < 4 [0:0] L
---- > 7 [1:-1]
------ > 8 [0:0] L
-- > 18 [1:1]
---- < 16 [0:0] L
set([4, 5, 7, 8, 9, 16, 18])
  9 [2:0]
-- < 5 [1:0]
---- < 4 [0:0] L
---- > 8 [0:0] L
-- > 16 [1:0]
---- < 10 [0:0] L
---- > 18 [0:0] L
set([4, 5, 8, 9, 10, 16, 18])
  9 [2:0]
-- < 5 [1:0]
---- < 4 [0:0] L
---- > 8 [0:0] L
-- > 16 [1:0]
---- < 10 [0:0] L
---- > 18 [0:0] L
set([4, 5, 8, 9, 10, 16, 18])
  10 [3:1]
-- < 5 [2:1]
---- < 4 [1:1]
------ < 2 [0:0] L
---- > 9 [0:0] L
-- > 17 [1:0]
---- < 16 [0:0] L
---- > 18 [0:0] L
set([2, 4, 5, 9, 10, 16, 17, 18])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104571c20>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
Original test has 66 steps

SAVING TEST AS failure.62046.test.3
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 9                                                                 # STEP 0
ACTION: int1 = 9 
int1 = None : <type 'NoneType'>
=> int1 = 9 : <type 'int'>
==================================================
int3 = 18                                                                # STEP 1
ACTION: int3 = 18 
int3 = None : <type 'NoneType'>
=> int3 = 18 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 2
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x1045485a8> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.insert(int1)                                                        # STEP 3
ACTION: avl1.insert(int1) 
int1 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1045485a8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([9]) : <type 'set'>
==================================================
int1 = 7                                                                 # STEP 4
ACTION: int1 = 7 
int1 = 9 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
avl1 == avl1                                                             # STEP 5
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x1045485a8> : <type 'instance'>
avl_REF1 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
result = avl1.inorder()                                                  # STEP 6
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x1045485a8> : <type 'instance'>
avl_REF1 = set([9]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
result = avl1.inorder()                                                  # STEP 7
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x1045485a8> : <type 'instance'>
avl_REF1 = set([9]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int2 = 16                                                                # STEP 8
ACTION: int2 = 16 
int2 = None : <type 'NoneType'>
=> int2 = 16 : <type 'int'>
==================================================
int0 = 4                                                                 # STEP 9
ACTION: int0 = 4 
int0 = None : <type 'NoneType'>
=> int0 = 4 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 10
ACTION: avl1.delete(int1) 
int1 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1045485a8> : <type 'instance'>
avl_REF1 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.delete(int1)                                                       # STEP 11
ACTION: avl1.delete(int1) 
int1 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1045485a8> : <type 'instance'>
avl_REF1 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
result = avl1.find(int2)                                                # STEP 12
ACTION: result = avl1.find(int2) 
int2 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1045485a8> : <type 'instance'>
avl_REF1 = set([9]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl1.insert(int3)                                                       # STEP 13
ACTION: avl1.insert(int3) 
int3 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1045485a8> : <type 'instance'>
avl_REF1 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([9, 18]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 14
ACTION: avl1.insert(int1) 
int1 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1045485a8> : <type 'instance'>
avl_REF1 = set([9, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([9, 18, 7]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 15
ACTION: avl1.insert(int2) 
int2 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1045485a8> : <type 'instance'>
avl_REF1 = set([9, 18, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([16, 9, 18, 7]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 16
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x1045485a8> : <type 'instance'>
avl_REF1 = set([16, 9, 18, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int1 = 10                                                               # STEP 17
ACTION: int1 = 10 
int1 = 7 : <type 'int'>
=> int1 = 10 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 18
ACTION: avl1.insert(int3) 
int3 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1045485a8> : <type 'instance'>
avl_REF1 = set([16, 9, 18, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
avl1 == avl1                                                            # STEP 19
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x1045485a8> : <type 'instance'>
avl_REF1 = set([16, 9, 18, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
int2 = 8                                                                # STEP 20
ACTION: int2 = 8 
int2 = 16 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 21
ACTION: avl1.insert(int0) 
int0 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1045485a8> : <type 'instance'>
avl_REF1 = set([16, 9, 18, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([16, 9, 18, 4, 7]) : <type 'set'>
==================================================
int3 = 7                                                                # STEP 22
ACTION: int3 = 7 
int3 = 18 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
int0 = 5                                                                # STEP 23
ACTION: int0 = 5 
int0 = 4 : <type 'int'>
=> int0 = 5 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 24
ACTION: avl1.insert(int0) 
int0 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1045485a8> : <type 'instance'>
avl_REF1 = set([16, 9, 18, 4, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([4, 5, 7, 9, 16, 18]) : <type 'set'>
==================================================
avl1 == avl1                                                            # STEP 25
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x1045485a8> : <type 'instance'>
avl_REF1 = set([4, 5, 7, 9, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.insert(int0)                                                       # STEP 26
ACTION: avl1.insert(int0) 
int0 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1045485a8> : <type 'instance'>
avl_REF1 = set([4, 5, 7, 9, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.insert(int2)                                                       # STEP 27
ACTION: avl1.insert(int2) 
int2 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1045485a8> : <type 'instance'>
avl_REF1 = set([4, 5, 7, 9, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([4, 5, 7, 8, 9, 16, 18]) : <type 'set'>
==================================================
avl1.display()                                                          # STEP 28
ACTION: avl1.display() 
avl1 = <avlbug2.AVLTree instance at 0x1045485a8> : <type 'instance'>
avl_REF1 = set([4, 5, 7, 8, 9, 16, 18]) : <type 'set'>
  9 [3:1]
-- < 5 [2:-1]
---- < 4 [0:0] L
---- > 7 [1:-1]
------ > 8 [0:0] L
-- > 18 [1:1]
---- < 16 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([4, 5, 7, 8, 9, 16, 18])
==================================================
avl1.insert(int1)                                                       # STEP 29
ACTION: avl1.insert(int1) 
int1 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1045485a8> : <type 'instance'>
avl_REF1 = set([4, 5, 7, 8, 9, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([4, 5, 7, 8, 9, 10, 16, 18]) : <type 'set'>
==================================================
int1 = 4                                                                # STEP 30
ACTION: int1 = 4 
int1 = 10 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 31
ACTION: avl1.delete(int3) 
int3 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1045485a8> : <type 'instance'>
avl_REF1 = set([4, 5, 7, 8, 9, 10, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([4, 5, 8, 9, 10, 16, 18]) : <type 'set'>
==================================================
avl1.display()                                                          # STEP 32
ACTION: avl1.display() 
avl1 = <avlbug2.AVLTree instance at 0x1045485a8> : <type 'instance'>
avl_REF1 = set([4, 5, 8, 9, 10, 16, 18]) : <type 'set'>
  9 [2:0]
-- < 5 [1:0]
---- < 4 [0:0] L
---- > 8 [0:0] L
-- > 16 [1:0]
---- < 10 [0:0] L
---- > 18 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([4, 5, 8, 9, 10, 16, 18])
==================================================
result = avl1.find(int2)                                                # STEP 33
ACTION: result = avl1.find(int2) 
int2 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1045485a8> : <type 'instance'>
avl_REF1 = set([4, 5, 8, 9, 10, 16, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
result = avl1.find(int3)                                                # STEP 34
ACTION: result = avl1.find(int3) 
int3 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1045485a8> : <type 'instance'>
avl_REF1 = set([4, 5, 8, 9, 10, 16, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl1.insert(int0)                                                       # STEP 35
ACTION: avl1.insert(int0) 
int0 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1045485a8> : <type 'instance'>
avl_REF1 = set([4, 5, 8, 9, 10, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.display()                                                          # STEP 36
ACTION: avl1.display() 
avl1 = <avlbug2.AVLTree instance at 0x1045485a8> : <type 'instance'>
avl_REF1 = set([4, 5, 8, 9, 10, 16, 18]) : <type 'set'>
  9 [2:0]
-- < 5 [1:0]
---- < 4 [0:0] L
---- > 8 [0:0] L
-- > 16 [1:0]
---- < 10 [0:0] L
---- > 18 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([4, 5, 8, 9, 10, 16, 18])
==================================================
avl1.insert(int1)                                                       # STEP 37
ACTION: avl1.insert(int1) 
int1 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1045485a8> : <type 'instance'>
avl_REF1 = set([4, 5, 8, 9, 10, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
result = avl1.find(int1)                                                # STEP 38
ACTION: result = avl1.find(int1) 
int1 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1045485a8> : <type 'instance'>
avl_REF1 = set([4, 5, 8, 9, 10, 16, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int3 = 9                                                                # STEP 39
ACTION: int3 = 9 
int3 = 7 : <type 'int'>
=> int3 = 9 : <type 'int'>
==================================================
int1 = 8                                                                # STEP 40
ACTION: int1 = 8 
int1 = 4 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
int2 = 17                                                               # STEP 41
ACTION: int2 = 17 
int2 = 8 : <type 'int'>
=> int2 = 17 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 42
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x1045485a8> : <type 'instance'>
avl_REF1 = set([4, 5, 8, 9, 10, 16, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int1)                                                       # STEP 43
ACTION: avl1.insert(int1) 
int1 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1045485a8> : <type 'instance'>
avl_REF1 = set([4, 5, 8, 9, 10, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
int0 = 20                                                               # STEP 44
ACTION: int0 = 20 
int0 = 5 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 45
ACTION: avl1.delete(int3) 
int3 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1045485a8> : <type 'instance'>
avl_REF1 = set([4, 5, 8, 9, 10, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([4, 5, 8, 10, 16, 18]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 46
ACTION: avl1.delete(int1) 
int1 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1045485a8> : <type 'instance'>
avl_REF1 = set([4, 5, 8, 10, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([4, 5, 10, 16, 18]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 47
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x1045485a8> : <type 'instance'>
avl_REF1 = set([4, 5, 10, 16, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.delete(int1)                                                       # STEP 48
ACTION: avl1.delete(int1) 
int1 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1045485a8> : <type 'instance'>
avl_REF1 = set([4, 5, 10, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.delete(int1)                                                       # STEP 49
ACTION: avl1.delete(int1) 
int1 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1045485a8> : <type 'instance'>
avl_REF1 = set([4, 5, 10, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int1 = 2                                                                # STEP 50
ACTION: int1 = 2 
int1 = 8 : <type 'int'>
=> int1 = 2 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 51
ACTION: avl1.delete(int2) 
int2 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1045485a8> : <type 'instance'>
avl_REF1 = set([4, 5, 10, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.delete(int1)                                                       # STEP 52
ACTION: avl1.delete(int1) 
int1 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1045485a8> : <type 'instance'>
avl_REF1 = set([4, 5, 10, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.insert(int3)                                                       # STEP 53
ACTION: avl1.insert(int3) 
int3 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1045485a8> : <type 'instance'>
avl_REF1 = set([4, 5, 10, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([4, 5, 9, 10, 16, 18]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 54
ACTION: avl1.insert(int1) 
int1 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1045485a8> : <type 'instance'>
avl_REF1 = set([4, 5, 9, 10, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([2, 4, 5, 9, 10, 16, 18]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 55
ACTION: avl1.insert(int2) 
int2 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1045485a8> : <type 'instance'>
avl_REF1 = set([2, 4, 5, 9, 10, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([2, 4, 5, 9, 10, 16, 17, 18]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 56
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x1045485a8> : <type 'instance'>
avl_REF1 = set([2, 4, 5, 9, 10, 16, 17, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int3 = 6                                                                # STEP 57
ACTION: int3 = 6 
int3 = 9 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
int1 = 2                                                                # STEP 58
ACTION: int1 = 2 
int1 = 2 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 59
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x1045485a8> : <type 'instance'>
avl_REF1 = set([2, 4, 5, 9, 10, 16, 17, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.display()                                                          # STEP 60
ACTION: avl1.display() 
avl1 = <avlbug2.AVLTree instance at 0x1045485a8> : <type 'instance'>
avl_REF1 = set([2, 4, 5, 9, 10, 16, 17, 18]) : <type 'set'>
  10 [3:1]
-- < 5 [2:1]
---- < 4 [1:1]
------ < 2 [0:0] L
---- > 9 [0:0] L
-- > 17 [1:0]
---- < 16 [0:0] L
---- > 18 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([2, 4, 5, 9, 10, 16, 17, 18])
==================================================
int2 = 3                                                                # STEP 61
ACTION: int2 = 3 
int2 = 17 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 62
ACTION: avl1.insert(int1) 
int1 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1045485a8> : <type 'instance'>
avl_REF1 = set([2, 4, 5, 9, 10, 16, 17, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl1.insert(int0)                                                       # STEP 63
ACTION: avl1.insert(int0) 
int0 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1045485a8> : <type 'instance'>
avl_REF1 = set([2, 4, 5, 9, 10, 16, 17, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([2, 4, 5, 9, 10, 16, 17, 18, 20]) : <type 'set'>
==================================================
int1 = 10                                                               # STEP 64
ACTION: int1 = 10 
int1 = 2 : <type 'int'>
=> int1 = 10 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 65
ACTION: avl1.delete(int1) 
int1 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1045485a8> : <type 'instance'>
avl_REF1 = set([2, 4, 5, 9, 10, 16, 17, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([2, 4, 5, 9, 16, 17, 18, 20]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1041113b0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 4 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105933320>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
Original test has 59 steps

SAVING TEST AS failure.62046.test.4
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 13                                                                # STEP 0
ACTION: int2 = 13 
int2 = None : <type 'NoneType'>
=> int2 = 13 : <type 'int'>
==================================================
int1 = 17                                                                # STEP 1
ACTION: int1 = 17 
int1 = None : <type 'NoneType'>
=> int1 = 17 : <type 'int'>
==================================================
int0 = 6                                                                 # STEP 2
ACTION: int0 = 6 
int0 = None : <type 'NoneType'>
=> int0 = 6 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 3
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x105933878> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.insert(int1)                                                        # STEP 4
ACTION: avl0.insert(int1) 
int1 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x105933878> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([17]) : <type 'set'>
==================================================
avl0.insert(int1)                                                        # STEP 5
ACTION: avl0.insert(int1) 
int1 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x105933878> : <type 'instance'>
avl_REF0 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl0.delete(int0)                                                        # STEP 6
ACTION: avl0.delete(int0) 
int0 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x105933878> : <type 'instance'>
avl_REF0 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int0 = 11                                                                # STEP 7
ACTION: int0 = 11 
int0 = 6 : <type 'int'>
=> int0 = 11 : <type 'int'>
==================================================
result = avl0.inorder()                                                  # STEP 8
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x105933878> : <type 'instance'>
avl_REF0 = set([17]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.delete(int1)                                                        # STEP 9
ACTION: avl0.delete(int1) 
int1 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x105933878> : <type 'instance'>
avl_REF0 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 10
ACTION: avl0.delete(int1) 
int1 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x105933878> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.insert(int2)                                                       # STEP 11
ACTION: avl0.insert(int2) 
int2 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x105933878> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([13]) : <type 'set'>
==================================================
result = avl0.find(int1)                                                # STEP 12
ACTION: result = avl0.find(int1) 
int1 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x105933878> : <type 'instance'>
avl_REF0 = set([13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl0.delete(int2)                                                       # STEP 13
ACTION: avl0.delete(int2) 
int2 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x105933878> : <type 'instance'>
avl_REF0 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 14
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x105933878> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
result = avl0.inorder()                                                 # STEP 15
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x105933878> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.delete(int1)                                                       # STEP 16
ACTION: avl0.delete(int1) 
int1 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x105933878> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.delete(int0)                                                       # STEP 17
ACTION: avl0.delete(int0) 
int0 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x105933878> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.delete(int2)                                                       # STEP 18
ACTION: avl0.delete(int2) 
int2 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x105933878> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int0 = 1                                                                # STEP 19
ACTION: int0 = 1 
int0 = 11 : <type 'int'>
=> int0 = 1 : <type 'int'>
==================================================
int2 = 2                                                                # STEP 20
ACTION: int2 = 2 
int2 = 13 : <type 'int'>
=> int2 = 2 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 21
ACTION: avl0.delete(int2) 
int2 = 2 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x105933878> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.insert(int1)                                                       # STEP 22
ACTION: avl0.insert(int1) 
int1 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x105933878> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([17]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 23
ACTION: avl0.delete(int1) 
int1 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x105933878> : <type 'instance'>
avl_REF0 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 24
ACTION: avl0 = avl.AVLTree() 
avl0 = <avlbug2.AVLTree instance at 0x105933878> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
=> avl0 = <avlbug2.AVLTree instance at 0x1043e4ef0> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
==================================================
avl0.insert(int1)                                                       # STEP 25
ACTION: avl0.insert(int1) 
int1 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1043e4ef0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([17]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 26
ACTION: avl0.insert(int2) 
int2 = 2 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1043e4ef0> : <type 'instance'>
avl_REF0 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([17, 2]) : <type 'set'>
==================================================
result = avl0.find(int2)                                                # STEP 27
ACTION: result = avl0.find(int2) 
int2 = 2 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1043e4ef0> : <type 'instance'>
avl_REF0 = set([17, 2]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
int2 = 7                                                                # STEP 28
ACTION: int2 = 7 
int2 = 2 : <type 'int'>
=> int2 = 7 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 29
ACTION: avl0.delete(int2) 
int2 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1043e4ef0> : <type 'instance'>
avl_REF0 = set([17, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.delete(int0)                                                       # STEP 30
ACTION: avl0.delete(int0) 
int0 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1043e4ef0> : <type 'instance'>
avl_REF0 = set([17, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.insert(int2)                                                       # STEP 31
ACTION: avl0.insert(int2) 
int2 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1043e4ef0> : <type 'instance'>
avl_REF0 = set([17, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([17, 2, 7]) : <type 'set'>
==================================================
int3 = 12                                                               # STEP 32
ACTION: int3 = 12 
int3 = None : <type 'NoneType'>
=> int3 = 12 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 33
ACTION: avl0.delete(int0) 
int0 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1043e4ef0> : <type 'instance'>
avl_REF0 = set([17, 2, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.delete(int0)                                                       # STEP 34
ACTION: avl0.delete(int0) 
int0 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1043e4ef0> : <type 'instance'>
avl_REF0 = set([17, 2, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.insert(int2)                                                       # STEP 35
ACTION: avl0.insert(int2) 
int2 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1043e4ef0> : <type 'instance'>
avl_REF0 = set([17, 2, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl0.insert(int0)                                                       # STEP 36
ACTION: avl0.insert(int0) 
int0 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1043e4ef0> : <type 'instance'>
avl_REF0 = set([17, 2, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([17, 2, 1, 7]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 37
ACTION: avl0.insert(int2) 
int2 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1043e4ef0> : <type 'instance'>
avl_REF0 = set([17, 2, 1, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl0.delete(int0)                                                       # STEP 38
ACTION: avl0.delete(int0) 
int0 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1043e4ef0> : <type 'instance'>
avl_REF0 = set([17, 2, 1, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([17, 2, 7]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 39
ACTION: avl0.insert(int1) 
int1 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1043e4ef0> : <type 'instance'>
avl_REF0 = set([17, 2, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl0.delete(int2)                                                       # STEP 40
ACTION: avl0.delete(int2) 
int2 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1043e4ef0> : <type 'instance'>
avl_REF0 = set([17, 2, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([17, 2]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 41
ACTION: avl0.delete(int3) 
int3 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1043e4ef0> : <type 'instance'>
avl_REF0 = set([17, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
result = avl0.inorder()                                                 # STEP 42
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x1043e4ef0> : <type 'instance'>
avl_REF0 = set([17, 2]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int2)                                                       # STEP 43
ACTION: avl0.insert(int2) 
int2 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1043e4ef0> : <type 'instance'>
avl_REF0 = set([17, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([17, 2, 7]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 44
ACTION: avl0.insert(int1) 
int1 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1043e4ef0> : <type 'instance'>
avl_REF0 = set([17, 2, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl0.insert(int1)                                                       # STEP 45
ACTION: avl0.insert(int1) 
int1 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1043e4ef0> : <type 'instance'>
avl_REF0 = set([17, 2, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
int3 = 3                                                                # STEP 46
ACTION: int3 = 3 
int3 = 12 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 47
ACTION: avl0.delete(int2) 
int2 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1043e4ef0> : <type 'instance'>
avl_REF0 = set([17, 2, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([17, 2]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 48
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x1043e4ef0> : <type 'instance'>
avl_REF0 = set([17, 2]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int0 = 19                                                               # STEP 49
ACTION: int0 = 19 
int0 = 1 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 50
ACTION: avl0.insert(int0) 
int0 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1043e4ef0> : <type 'instance'>
avl_REF0 = set([17, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([17, 2, 19]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 51
ACTION: avl0.insert(int0) 
int0 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1043e4ef0> : <type 'instance'>
avl_REF0 = set([17, 2, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
avl0.insert(int3)                                                       # STEP 52
ACTION: avl0.insert(int3) 
int3 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1043e4ef0> : <type 'instance'>
avl_REF0 = set([17, 2, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([2, 3, 17, 19]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 53
ACTION: avl0.insert(int1) 
int1 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1043e4ef0> : <type 'instance'>
avl_REF0 = set([2, 3, 17, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl0.insert(int1)                                                       # STEP 54
ACTION: avl0.insert(int1) 
int1 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1043e4ef0> : <type 'instance'>
avl_REF0 = set([2, 3, 17, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
int2 = 19                                                               # STEP 55
ACTION: int2 = 19 
int2 = 7 : <type 'int'>
=> int2 = 19 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 56
ACTION: avl0.insert(int2) 
int2 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1043e4ef0> : <type 'instance'>
avl_REF0 = set([2, 3, 17, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
int3 = 7                                                                # STEP 57
ACTION: int3 = 7 
int3 = 3 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 58
ACTION: avl0.delete(int1) 
int1 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1043e4ef0> : <type 'instance'>
avl_REF0 = set([2, 3, 17, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([2, 3, 19]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1043daab8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 5 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 0
STOPPING TESTING DUE TO TIMEOUT
8.21242019733 PERCENT COVERED
64.4194328785 TOTAL RUNTIME
8 EXECUTED
415 TOTAL TEST OPERATIONS
21.0241439342 TIME SPENT EXECUTING TEST OPERATIONS
0.0486333370209 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
21.1568753719 TIME SPENT CHECKING PROPERTIES
42.1810193062 TOTAL TIME SPENT RUNNING SUT
0.00502228736877 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
5 FAILED
0 REPEATS OF FAILURES
5 ACTUAL DISTINCT FAILURES

FAILURE 0
int2 = 14                                                                # STEP 0
int1 = 1                                                                 # STEP 1
int3 = 4                                                                 # STEP 2
int0 = 10                                                                # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
avl1.delete(int0)                                                        # STEP 5
result = avl1.inorder()                                                  # STEP 6
avl1 == avl1                                                             # STEP 7
int0 = 4                                                                 # STEP 8
avl1 == avl1                                                             # STEP 9
result = avl1.inorder()                                                 # STEP 10
result = avl1.inorder()                                                 # STEP 11
avl1.insert(int2)                                                       # STEP 12
avl1.insert(int2)                                                       # STEP 13
avl1.delete(int1)                                                       # STEP 14
avl1.insert(int1)                                                       # STEP 15
avl1.insert(int1)                                                       # STEP 16
int1 = 3                                                                # STEP 17
avl1.delete(int0)                                                       # STEP 18
int0 = 2                                                                # STEP 19
avl1 == avl1                                                            # STEP 20
int2 = 4                                                                # STEP 21
avl1.delete(int0)                                                       # STEP 22
avl1.insert(int3)                                                       # STEP 23
avl1.insert(int0)                                                       # STEP 24
avl1.delete(int2)                                                       # STEP 25
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1041965f0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE 1
avl0 = avl.AVLTree()                                                     # STEP 0
result = avl0.inorder()                                                  # STEP 1
avl0 == avl0                                                             # STEP 2
int3 = 18                                                                # STEP 3
avl0.insert(int3)                                                        # STEP 4
result = avl0.inorder()                                                  # STEP 5
avl0.insert(int3)                                                        # STEP 6
avl0.insert(int3)                                                        # STEP 7
avl0.insert(int3)                                                        # STEP 8
int1 = 15                                                                # STEP 9
avl0.delete(int3)                                                       # STEP 10
avl0.insert(int3)                                                       # STEP 11
int0 = 19                                                               # STEP 12
avl0.delete(int0)                                                       # STEP 13
int3 = 4                                                                # STEP 14
avl0.insert(int3)                                                       # STEP 15
avl0.insert(int0)                                                       # STEP 16
int3 = 6                                                                # STEP 17
avl0.delete(int1)                                                       # STEP 18
avl0.insert(int1)                                                       # STEP 19
int2 = 20                                                               # STEP 20
avl0.delete(int0)                                                       # STEP 21
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1044fafc8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE 2
int2 = 14                                                                # STEP 0
int3 = 18                                                                # STEP 1
int1 = 18                                                                # STEP 2
int0 = 3                                                                 # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
avl2.insert(int3)                                                        # STEP 5
avl2.delete(int1)                                                        # STEP 6
avl2.delete(int3)                                                        # STEP 7
result = avl2.find(int2)                                                 # STEP 8
avl2.delete(int0)                                                        # STEP 9
int2 = 6                                                                # STEP 10
avl2 == avl2                                                            # STEP 11
avl2 == avl2                                                            # STEP 12
avl2.delete(int2)                                                       # STEP 13
avl0 = avl.AVLTree()                                                    # STEP 14
avl2.delete(int0)                                                       # STEP 15
result = avl0.find(int1)                                                # STEP 16
avl0.insert(int0)                                                       # STEP 17
avl2.insert(int1)                                                       # STEP 18
result = avl2.find(int2)                                                # STEP 19
int2 = 2                                                                # STEP 20
result = avl2.inorder()                                                 # STEP 21
avl0.insert(int1)                                                       # STEP 22
avl2.delete(int3)                                                       # STEP 23
int3 = 16                                                               # STEP 24
result = avl0.inorder()                                                 # STEP 25
result = avl0.find(int3)                                                # STEP 26
int3 = 6                                                                # STEP 27
int0 = 1                                                                # STEP 28
avl2.insert(int2)                                                       # STEP 29
avl2.insert(int0)                                                       # STEP 30
avl2.insert(int1)                                                       # STEP 31
avl0.insert(int1)                                                       # STEP 32
avl2.insert(int3)                                                       # STEP 33
avl0.delete(int2)                                                       # STEP 34
avl0.delete(int0)                                                       # STEP 35
int3 = 9                                                                # STEP 36
avl2.insert(int2)                                                       # STEP 37
result = avl2.inorder()                                                 # STEP 38
avl0.insert(int2)                                                       # STEP 39
avl0.insert(int0)                                                       # STEP 40
avl2.delete(int0)                                                       # STEP 41
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105972560>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE 3
int1 = 9                                                                 # STEP 0
int3 = 18                                                                # STEP 1
avl1 = avl.AVLTree()                                                     # STEP 2
avl1.insert(int1)                                                        # STEP 3
int1 = 7                                                                 # STEP 4
avl1 == avl1                                                             # STEP 5
result = avl1.inorder()                                                  # STEP 6
result = avl1.inorder()                                                  # STEP 7
int2 = 16                                                                # STEP 8
int0 = 4                                                                 # STEP 9
avl1.delete(int1)                                                       # STEP 10
avl1.delete(int1)                                                       # STEP 11
result = avl1.find(int2)                                                # STEP 12
avl1.insert(int3)                                                       # STEP 13
avl1.insert(int1)                                                       # STEP 14
avl1.insert(int2)                                                       # STEP 15
result = avl1.inorder()                                                 # STEP 16
int1 = 10                                                               # STEP 17
avl1.insert(int3)                                                       # STEP 18
avl1 == avl1                                                            # STEP 19
int2 = 8                                                                # STEP 20
avl1.insert(int0)                                                       # STEP 21
int3 = 7                                                                # STEP 22
int0 = 5                                                                # STEP 23
avl1.insert(int0)                                                       # STEP 24
avl1 == avl1                                                            # STEP 25
avl1.insert(int0)                                                       # STEP 26
avl1.insert(int2)                                                       # STEP 27
avl1.display()                                                          # STEP 28
avl1.insert(int1)                                                       # STEP 29
int1 = 4                                                                # STEP 30
avl1.delete(int3)                                                       # STEP 31
avl1.display()                                                          # STEP 32
result = avl1.find(int2)                                                # STEP 33
result = avl1.find(int3)                                                # STEP 34
avl1.insert(int0)                                                       # STEP 35
avl1.display()                                                          # STEP 36
avl1.insert(int1)                                                       # STEP 37
result = avl1.find(int1)                                                # STEP 38
int3 = 9                                                                # STEP 39
int1 = 8                                                                # STEP 40
int2 = 17                                                               # STEP 41
result = avl1.inorder()                                                 # STEP 42
avl1.insert(int1)                                                       # STEP 43
int0 = 20                                                               # STEP 44
avl1.delete(int3)                                                       # STEP 45
avl1.delete(int1)                                                       # STEP 46
result = avl1.inorder()                                                 # STEP 47
avl1.delete(int1)                                                       # STEP 48
avl1.delete(int1)                                                       # STEP 49
int1 = 2                                                                # STEP 50
avl1.delete(int2)                                                       # STEP 51
avl1.delete(int1)                                                       # STEP 52
avl1.insert(int3)                                                       # STEP 53
avl1.insert(int1)                                                       # STEP 54
avl1.insert(int2)                                                       # STEP 55
result = avl1.inorder()                                                 # STEP 56
int3 = 6                                                                # STEP 57
int1 = 2                                                                # STEP 58
result = avl1.inorder()                                                 # STEP 59
avl1.display()                                                          # STEP 60
int2 = 3                                                                # STEP 61
avl1.insert(int1)                                                       # STEP 62
avl1.insert(int0)                                                       # STEP 63
int1 = 10                                                               # STEP 64
avl1.delete(int1)                                                       # STEP 65
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1041113b0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE 4
int2 = 13                                                                # STEP 0
int1 = 17                                                                # STEP 1
int0 = 6                                                                 # STEP 2
avl0 = avl.AVLTree()                                                     # STEP 3
avl0.insert(int1)                                                        # STEP 4
avl0.insert(int1)                                                        # STEP 5
avl0.delete(int0)                                                        # STEP 6
int0 = 11                                                                # STEP 7
result = avl0.inorder()                                                  # STEP 8
avl0.delete(int1)                                                        # STEP 9
avl0.delete(int1)                                                       # STEP 10
avl0.insert(int2)                                                       # STEP 11
result = avl0.find(int1)                                                # STEP 12
avl0.delete(int2)                                                       # STEP 13
result = avl0.inorder()                                                 # STEP 14
result = avl0.inorder()                                                 # STEP 15
avl0.delete(int1)                                                       # STEP 16
avl0.delete(int0)                                                       # STEP 17
avl0.delete(int2)                                                       # STEP 18
int0 = 1                                                                # STEP 19
int2 = 2                                                                # STEP 20
avl0.delete(int2)                                                       # STEP 21
avl0.insert(int1)                                                       # STEP 22
avl0.delete(int1)                                                       # STEP 23
avl0 = avl.AVLTree()                                                    # STEP 24
avl0.insert(int1)                                                       # STEP 25
avl0.insert(int2)                                                       # STEP 26
result = avl0.find(int2)                                                # STEP 27
int2 = 7                                                                # STEP 28
avl0.delete(int2)                                                       # STEP 29
avl0.delete(int0)                                                       # STEP 30
avl0.insert(int2)                                                       # STEP 31
int3 = 12                                                               # STEP 32
avl0.delete(int0)                                                       # STEP 33
avl0.delete(int0)                                                       # STEP 34
avl0.insert(int2)                                                       # STEP 35
avl0.insert(int0)                                                       # STEP 36
avl0.insert(int2)                                                       # STEP 37
avl0.delete(int0)                                                       # STEP 38
avl0.insert(int1)                                                       # STEP 39
avl0.delete(int2)                                                       # STEP 40
avl0.delete(int3)                                                       # STEP 41
result = avl0.inorder()                                                 # STEP 42
avl0.insert(int2)                                                       # STEP 43
avl0.insert(int1)                                                       # STEP 44
avl0.insert(int1)                                                       # STEP 45
int3 = 3                                                                # STEP 46
avl0.delete(int2)                                                       # STEP 47
result = avl0.inorder()                                                 # STEP 48
int0 = 19                                                               # STEP 49
avl0.insert(int0)                                                       # STEP 50
avl0.insert(int0)                                                       # STEP 51
avl0.insert(int3)                                                       # STEP 52
avl0.insert(int1)                                                       # STEP 53
avl0.insert(int1)                                                       # STEP 54
int2 = 19                                                               # STEP 55
avl0.insert(int2)                                                       # STEP 56
int3 = 7                                                                # STEP 57
avl0.delete(int1)                                                       # STEP 58
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1043daab8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
214 BRANCHES COVERED
161 STATEMENTS COVERED

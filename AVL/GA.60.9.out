Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.13831.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
TEST #3 STEP #95 (0:00:30.060718) Sun Apr 30 02:39:40 2017 [ 129 stmts 172 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102b475a8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
Original test has 70 steps

SAVING TEST AS failure.13831.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 13                                                                # STEP 0
ACTION: int3 = 13 
int3 = None : <type 'NoneType'>
=> int3 = 13 : <type 'int'>
==================================================
int0 = 18                                                                # STEP 1
ACTION: int0 = 18 
int0 = None : <type 'NoneType'>
=> int0 = 18 : <type 'int'>
==================================================
int1 = 4                                                                 # STEP 2
ACTION: int1 = 4 
int1 = None : <type 'NoneType'>
=> int1 = 4 : <type 'int'>
==================================================
int2 = 9                                                                 # STEP 3
ACTION: int2 = 9 
int2 = None : <type 'NoneType'>
=> int2 = 9 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x102b8da70> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.delete(int0)                                                        # STEP 5
ACTION: avl1.delete(int0) 
int0 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102b8da70> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.insert(int2)                                                        # STEP 6
ACTION: avl1.insert(int2) 
int2 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102b8da70> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([9]) : <type 'set'>
==================================================
int2 = 7                                                                 # STEP 7
ACTION: int2 = 7 
int2 = 9 : <type 'int'>
=> int2 = 7 : <type 'int'>
==================================================
int0 = 18                                                                # STEP 8
ACTION: int0 = 18 
int0 = 18 : <type 'int'>
==================================================
avl1.insert(int3)                                                        # STEP 9
ACTION: avl1.insert(int3) 
int3 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102b8da70> : <type 'instance'>
avl_REF1 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([9, 13]) : <type 'set'>
==================================================
int3 = 10                                                               # STEP 10
ACTION: int3 = 10 
int3 = 13 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 11
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x102b8da70> : <type 'instance'>
avl_REF1 = set([9, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.delete(int2)                                                       # STEP 12
ACTION: avl1.delete(int2) 
int2 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102b8da70> : <type 'instance'>
avl_REF1 = set([9, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int2 = 17                                                               # STEP 13
ACTION: int2 = 17 
int2 = 7 : <type 'int'>
=> int2 = 17 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 14
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x102b8da70> : <type 'instance'>
avl_REF1 = set([9, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl2 = avl.AVLTree()                                                    # STEP 15
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x102b6fcf8> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 16
ACTION: avl1.insert(int3) 
int3 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102b8da70> : <type 'instance'>
avl_REF1 = set([9, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([9, 10, 13]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 17
ACTION: avl1.insert(int0) 
int0 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102b8da70> : <type 'instance'>
avl_REF1 = set([9, 10, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([9, 10, 18, 13]) : <type 'set'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 18
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x102b71200> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int3 = 9                                                                # STEP 19
ACTION: int3 = 9 
int3 = 10 : <type 'int'>
=> int3 = 9 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 20
ACTION: avl2.insert(int2) 
int2 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102b6fcf8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([17]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 21
ACTION: avl2.insert(int2) 
int2 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102b6fcf8> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
result = avl0.inorder()                                                 # STEP 22
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x102b71200> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int1)                                                       # STEP 23
ACTION: avl0.insert(int1) 
int1 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102b71200> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([4]) : <type 'set'>
==================================================
result = avl2.find(int2)                                                # STEP 24
ACTION: result = avl2.find(int2) 
int2 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102b6fcf8> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl0.insert(int3)                                                       # STEP 25
ACTION: avl0.insert(int3) 
int3 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102b71200> : <type 'instance'>
avl_REF0 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([9, 4]) : <type 'set'>
==================================================
int1 = 18                                                               # STEP 26
ACTION: int1 = 18 
int1 = 4 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 27
ACTION: avl2.delete(int1) 
int1 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102b6fcf8> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int2 = 18                                                               # STEP 28
ACTION: int2 = 18 
int2 = 17 : <type 'int'>
=> int2 = 18 : <type 'int'>
==================================================
int1 = 3                                                                # STEP 29
ACTION: int1 = 3 
int1 = 18 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
result = avl0.find(int0)                                                # STEP 30
ACTION: result = avl0.find(int0) 
int0 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102b71200> : <type 'instance'>
avl_REF0 = set([9, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
avl0.insert(int3)                                                       # STEP 31
ACTION: avl0.insert(int3) 
int3 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102b71200> : <type 'instance'>
avl_REF0 = set([9, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
result = avl0.find(int2)                                                # STEP 32
ACTION: result = avl0.find(int2) 
int2 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102b71200> : <type 'instance'>
avl_REF0 = set([9, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl1.insert(int3)                                                       # STEP 33
ACTION: avl1.insert(int3) 
int3 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102b8da70> : <type 'instance'>
avl_REF1 = set([9, 10, 18, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
avl2.delete(int0)                                                       # STEP 34
ACTION: avl2.delete(int0) 
int0 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102b6fcf8> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
result = avl1.inorder()                                                 # STEP 35
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x102b8da70> : <type 'instance'>
avl_REF1 = set([9, 10, 18, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int3 = 14                                                               # STEP 36
ACTION: int3 = 14 
int3 = 9 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
int2 = 11                                                               # STEP 37
ACTION: int2 = 11 
int2 = 18 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
int0 = 1                                                                # STEP 38
ACTION: int0 = 1 
int0 = 18 : <type 'int'>
=> int0 = 1 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 39
ACTION: avl1.delete(int3) 
int3 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102b8da70> : <type 'instance'>
avl_REF1 = set([9, 10, 18, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int3 = 10                                                               # STEP 40
ACTION: int3 = 10 
int3 = 14 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 41
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x102b8da70> : <type 'instance'>
avl_REF1 = set([9, 10, 18, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.insert(int1)                                                       # STEP 42
ACTION: avl1.insert(int1) 
int1 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102b8da70> : <type 'instance'>
avl_REF1 = set([9, 10, 18, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([3, 9, 10, 18, 13]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 43
ACTION: avl0.insert(int3) 
int3 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102b71200> : <type 'instance'>
avl_REF0 = set([9, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([9, 10, 4]) : <type 'set'>
==================================================
int3 = 7                                                                # STEP 44
ACTION: int3 = 7 
int3 = 10 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
result = avl0.find(int1)                                                # STEP 45
ACTION: result = avl0.find(int1) 
int1 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102b71200> : <type 'instance'>
avl_REF0 = set([9, 10, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
result = avl2.inorder()                                                 # STEP 46
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x102b6fcf8> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl0.find(int2)                                                # STEP 47
ACTION: result = avl0.find(int2) 
int2 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102b71200> : <type 'instance'>
avl_REF0 = set([9, 10, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl1 == avl2                                                            # STEP 48
ACTION: avl1 == avl2 
avl1 = <avlbug2.AVLTree instance at 0x102b8da70> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x102b6fcf8> : <type 'instance'>
avl_REF1 = set([3, 9, 10, 18, 13]) : <type 'set'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
int1 = 18                                                               # STEP 49
ACTION: int1 = 18 
int1 = 3 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 50
ACTION: avl1.delete(int1) 
int1 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102b8da70> : <type 'instance'>
avl_REF1 = set([3, 9, 10, 18, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([3, 9, 10, 13]) : <type 'set'>
==================================================
avl1 == avl1                                                            # STEP 51
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x102b8da70> : <type 'instance'>
avl_REF1 = set([3, 9, 10, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
result = avl2.find(int0)                                                # STEP 52
ACTION: result = avl2.find(int0) 
int0 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102b6fcf8> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
int1 = 10                                                               # STEP 53
ACTION: int1 = 10 
int1 = 18 : <type 'int'>
=> int1 = 10 : <type 'int'>
==================================================
int0 = 5                                                                # STEP 54
ACTION: int0 = 5 
int0 = 1 : <type 'int'>
=> int0 = 5 : <type 'int'>
==================================================
int2 = 3                                                                # STEP 55
ACTION: int2 = 3 
int2 = 11 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
result = avl2.find(int0)                                                # STEP 56
ACTION: result = avl2.find(int0) 
int0 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102b6fcf8> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
int0 = 6                                                                # STEP 57
ACTION: int0 = 6 
int0 = 5 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 58
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x102b6fcf8> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl1.insert(int0)                                                       # STEP 59
ACTION: avl1.insert(int0) 
int0 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102b8da70> : <type 'instance'>
avl_REF1 = set([3, 9, 10, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([3, 6, 9, 10, 13]) : <type 'set'>
==================================================
result = avl1.find(int2)                                                # STEP 60
ACTION: result = avl1.find(int2) 
int2 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102b8da70> : <type 'instance'>
avl_REF1 = set([3, 6, 9, 10, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int2 = 17                                                               # STEP 61
ACTION: int2 = 17 
int2 = 3 : <type 'int'>
=> int2 = 17 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 62
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x102b8da70> : <type 'instance'>
avl_REF1 = set([3, 6, 9, 10, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl0 == avl2                                                            # STEP 63
ACTION: avl0 == avl2 
avl0 = <avlbug2.AVLTree instance at 0x102b71200> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x102b6fcf8> : <type 'instance'>
avl_REF0 = set([9, 10, 4]) : <type 'set'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
int0 = 14                                                               # STEP 64
ACTION: int0 = 14 
int0 = 6 : <type 'int'>
=> int0 = 14 : <type 'int'>
==================================================
result = avl0.find(int1)                                                # STEP 65
ACTION: result = avl0.find(int1) 
int1 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102b71200> : <type 'instance'>
avl_REF0 = set([9, 10, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
int1 = 13                                                               # STEP 66
ACTION: int1 = 13 
int1 = 10 : <type 'int'>
=> int1 = 13 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 67
ACTION: avl2.insert(int3) 
int3 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102b6fcf8> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([17, 7]) : <type 'set'>
==================================================
int3 = 9                                                                # STEP 68
ACTION: int3 = 9 
int3 = 7 : <type 'int'>
=> int3 = 9 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 69
ACTION: avl1.delete(int1) 
int1 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102b8da70> : <type 'instance'>
avl_REF1 = set([3, 6, 9, 10, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([3, 6, 9, 10]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102b92488>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 48
STOPPING TESTING DUE TO TIMEOUT
7.34856007944 PERCENT COVERED
60.3045988083 TOTAL RUNTIME
6 EXECUTED
518 TOTAL TEST OPERATIONS
26.3660385609 TIME SPENT EXECUTING TEST OPERATIONS
0.0199658870697 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
26.4927725792 TIME SPENT CHECKING PROPERTIES
52.8588111401 TOTAL TIME SPENT RUNNING SUT
0.00478386878967 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int3 = 13                                                                # STEP 0
int0 = 18                                                                # STEP 1
int1 = 4                                                                 # STEP 2
int2 = 9                                                                 # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
avl1.delete(int0)                                                        # STEP 5
avl1.insert(int2)                                                        # STEP 6
int2 = 7                                                                 # STEP 7
int0 = 18                                                                # STEP 8
avl1.insert(int3)                                                        # STEP 9
int3 = 10                                                               # STEP 10
avl1 == avl1                                                            # STEP 11
avl1.delete(int2)                                                       # STEP 12
int2 = 17                                                               # STEP 13
avl1 == avl1                                                            # STEP 14
avl2 = avl.AVLTree()                                                    # STEP 15
avl1.insert(int3)                                                       # STEP 16
avl1.insert(int0)                                                       # STEP 17
avl0 = avl.AVLTree()                                                    # STEP 18
int3 = 9                                                                # STEP 19
avl2.insert(int2)                                                       # STEP 20
avl2.insert(int2)                                                       # STEP 21
result = avl0.inorder()                                                 # STEP 22
avl0.insert(int1)                                                       # STEP 23
result = avl2.find(int2)                                                # STEP 24
avl0.insert(int3)                                                       # STEP 25
int1 = 18                                                               # STEP 26
avl2.delete(int1)                                                       # STEP 27
int2 = 18                                                               # STEP 28
int1 = 3                                                                # STEP 29
result = avl0.find(int0)                                                # STEP 30
avl0.insert(int3)                                                       # STEP 31
result = avl0.find(int2)                                                # STEP 32
avl1.insert(int3)                                                       # STEP 33
avl2.delete(int0)                                                       # STEP 34
result = avl1.inorder()                                                 # STEP 35
int3 = 14                                                               # STEP 36
int2 = 11                                                               # STEP 37
int0 = 1                                                                # STEP 38
avl1.delete(int3)                                                       # STEP 39
int3 = 10                                                               # STEP 40
avl1 == avl1                                                            # STEP 41
avl1.insert(int1)                                                       # STEP 42
avl0.insert(int3)                                                       # STEP 43
int3 = 7                                                                # STEP 44
result = avl0.find(int1)                                                # STEP 45
result = avl2.inorder()                                                 # STEP 46
result = avl0.find(int2)                                                # STEP 47
avl1 == avl2                                                            # STEP 48
int1 = 18                                                               # STEP 49
avl1.delete(int1)                                                       # STEP 50
avl1 == avl1                                                            # STEP 51
result = avl2.find(int0)                                                # STEP 52
int1 = 10                                                               # STEP 53
int0 = 5                                                                # STEP 54
int2 = 3                                                                # STEP 55
result = avl2.find(int0)                                                # STEP 56
int0 = 6                                                                # STEP 57
result = avl2.inorder()                                                 # STEP 58
avl1.insert(int0)                                                       # STEP 59
result = avl1.find(int2)                                                # STEP 60
int2 = 17                                                               # STEP 61
result = avl1.inorder()                                                 # STEP 62
avl0 == avl2                                                            # STEP 63
int0 = 14                                                               # STEP 64
result = avl0.find(int1)                                                # STEP 65
int1 = 13                                                               # STEP 66
avl2.insert(int3)                                                       # STEP 67
int3 = 9                                                                # STEP 68
avl1.delete(int1)                                                       # STEP 69
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102b92488>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
183 BRANCHES COVERED
136 STATEMENTS COVERED

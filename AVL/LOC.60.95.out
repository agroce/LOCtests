Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.1041.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  6 [2:0]
-- < 5 [1:1]
---- < 3 [0:0] L
-- > 13 [1:0]
---- < 9 [0:0] L
---- > 20 [0:0] L
set([3, 5, 6, 9, 13, 20])
  6 [2:0]
-- < 5 [1:1]
---- < 3 [0:0] L
-- > 13 [1:0]
---- < 9 [0:0] L
---- > 20 [0:0] L
set([3, 5, 6, 9, 13, 20])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1047af680>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 63 steps

SAVING TEST AS failure.1041.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
avl1 = avl.AVLTree()                                                     # STEP 0
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x1040c9200> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int2 = 3                                                                 # STEP 1
ACTION: int2 = 3 
int2 = None : <type 'NoneType'>
=> int2 = 3 : <type 'int'>
==================================================
avl1.delete(int2)                                                        # STEP 2
ACTION: avl1.delete(int2) 
int2 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1040c9200> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.delete(int2)                                                        # STEP 3
ACTION: avl1.delete(int2) 
int2 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1040c9200> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int3 = 5                                                                 # STEP 4
ACTION: int3 = 5 
int3 = None : <type 'NoneType'>
=> int3 = 5 : <type 'int'>
==================================================
result = avl1.inorder()                                                  # STEP 5
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1040c9200> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int2)                                                        # STEP 6
ACTION: avl1.insert(int2) 
int2 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1040c9200> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([3]) : <type 'set'>
==================================================
int0 = 20                                                                # STEP 7
ACTION: int0 = 20 
int0 = None : <type 'NoneType'>
=> int0 = 20 : <type 'int'>
==================================================
result = avl1.inorder()                                                  # STEP 8
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1040c9200> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.delete(int3)                                                        # STEP 9
ACTION: avl1.delete(int3) 
int3 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1040c9200> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.insert(int3)                                                       # STEP 10
ACTION: avl1.insert(int3) 
int3 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1040c9200> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([3, 5]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 11
ACTION: avl1.delete(int0) 
int0 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1040c9200> : <type 'instance'>
avl_REF1 = set([3, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.delete(int3)                                                       # STEP 12
ACTION: avl1.delete(int3) 
int3 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1040c9200> : <type 'instance'>
avl_REF1 = set([3, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([3]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 13
ACTION: avl1.delete(int2) 
int2 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1040c9200> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 14
ACTION: avl1.insert(int2) 
int2 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1040c9200> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([3]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 15
ACTION: avl1.delete(int3) 
int3 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1040c9200> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.delete(int0)                                                       # STEP 16
ACTION: avl1.delete(int0) 
int0 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1040c9200> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.insert(int2)                                                       # STEP 17
ACTION: avl1.insert(int2) 
int2 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1040c9200> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
avl1.insert(int3)                                                       # STEP 18
ACTION: avl1.insert(int3) 
int3 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1040c9200> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([3, 5]) : <type 'set'>
==================================================
int2 = 15                                                               # STEP 19
ACTION: int2 = 15 
int2 = 3 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 20
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1040c9200> : <type 'instance'>
avl_REF1 = set([3, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int3)                                                       # STEP 21
ACTION: avl1.insert(int3) 
int3 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1040c9200> : <type 'instance'>
avl_REF1 = set([3, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
avl1.delete(int2)                                                       # STEP 22
ACTION: avl1.delete(int2) 
int2 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1040c9200> : <type 'instance'>
avl_REF1 = set([3, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int2 = 7                                                                # STEP 23
ACTION: int2 = 7 
int2 = 15 : <type 'int'>
=> int2 = 7 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 24
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1040c9200> : <type 'instance'>
avl_REF1 = set([3, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl2 = avl.AVLTree()                                                    # STEP 25
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x10595d7e8> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 26
ACTION: avl1.insert(int3) 
int3 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1040c9200> : <type 'instance'>
avl_REF1 = set([3, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
avl2.insert(int3)                                                       # STEP 27
ACTION: avl2.insert(int3) 
int3 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10595d7e8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([5]) : <type 'set'>
==================================================
result = avl1.find(int3)                                                # STEP 28
ACTION: result = avl1.find(int3) 
int3 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1040c9200> : <type 'instance'>
avl_REF1 = set([3, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl1.insert(int3)                                                       # STEP 29
ACTION: avl1.insert(int3) 
int3 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1040c9200> : <type 'instance'>
avl_REF1 = set([3, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
avl2.insert(int2)                                                       # STEP 30
ACTION: avl2.insert(int2) 
int2 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10595d7e8> : <type 'instance'>
avl_REF2 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([5, 7]) : <type 'set'>
==================================================
int1 = 6                                                                # STEP 31
ACTION: int1 = 6 
int1 = None : <type 'NoneType'>
=> int1 = 6 : <type 'int'>
==================================================
int2 = 13                                                               # STEP 32
ACTION: int2 = 13 
int2 = 7 : <type 'int'>
=> int2 = 13 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 33
ACTION: avl1.delete(int2) 
int2 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1040c9200> : <type 'instance'>
avl_REF1 = set([3, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.insert(int0)                                                       # STEP 34
ACTION: avl1.insert(int0) 
int0 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1040c9200> : <type 'instance'>
avl_REF1 = set([3, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([3, 20, 5]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 35
ACTION: avl2.delete(int1) 
int1 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10595d7e8> : <type 'instance'>
avl_REF2 = set([5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl1.insert(int1)                                                       # STEP 36
ACTION: avl1.insert(int1) 
int1 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1040c9200> : <type 'instance'>
avl_REF1 = set([3, 20, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([3, 20, 5, 6]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 37
ACTION: avl1.insert(int2) 
int2 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1040c9200> : <type 'instance'>
avl_REF1 = set([3, 20, 5, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([3, 20, 5, 6, 13]) : <type 'set'>
==================================================
int0 = 10                                                               # STEP 38
ACTION: int0 = 10 
int0 = 20 : <type 'int'>
=> int0 = 10 : <type 'int'>
==================================================
int3 = 7                                                                # STEP 39
ACTION: int3 = 7 
int3 = 5 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 40
ACTION: avl1.delete(int0) 
int0 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1040c9200> : <type 'instance'>
avl_REF1 = set([3, 20, 5, 6, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl2.delete(int1)                                                       # STEP 41
ACTION: avl2.delete(int1) 
int1 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10595d7e8> : <type 'instance'>
avl_REF2 = set([5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int1 = 9                                                                # STEP 42
ACTION: int1 = 9 
int1 = 6 : <type 'int'>
=> int1 = 9 : <type 'int'>
==================================================
int0 = 10                                                               # STEP 43
ACTION: int0 = 10 
int0 = 10 : <type 'int'>
==================================================
int2 = 16                                                               # STEP 44
ACTION: int2 = 16 
int2 = 13 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 45
ACTION: avl1.insert(int1) 
int1 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1040c9200> : <type 'instance'>
avl_REF1 = set([3, 20, 5, 6, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([3, 5, 6, 9, 13, 20]) : <type 'set'>
==================================================
avl1.display()                                                          # STEP 46
ACTION: avl1.display() 
avl1 = <avl.AVLTree instance at 0x1040c9200> : <type 'instance'>
avl_REF1 = set([3, 5, 6, 9, 13, 20]) : <type 'set'>
  6 [2:0]
-- < 5 [1:1]
---- < 3 [0:0] L
-- > 13 [1:0]
---- < 9 [0:0] L
---- > 20 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([3, 5, 6, 9, 13, 20])
==================================================
int1 = 11                                                               # STEP 47
ACTION: int1 = 11 
int1 = 9 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 48
ACTION: avl2.insert(int1) 
int1 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10595d7e8> : <type 'instance'>
avl_REF2 = set([5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([11, 5, 7]) : <type 'set'>
==================================================
int1 = 20                                                               # STEP 49
ACTION: int1 = 20 
int1 = 11 : <type 'int'>
=> int1 = 20 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 50
ACTION: avl1.insert(int0) 
int0 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1040c9200> : <type 'instance'>
avl_REF1 = set([3, 5, 6, 9, 13, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([3, 5, 6, 9, 10, 13, 20]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 51
ACTION: avl2.delete(int1) 
int1 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10595d7e8> : <type 'instance'>
avl_REF2 = set([11, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl1.delete(int0)                                                       # STEP 52
ACTION: avl1.delete(int0) 
int0 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1040c9200> : <type 'instance'>
avl_REF1 = set([3, 5, 6, 9, 10, 13, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([3, 5, 6, 9, 13, 20]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 53
ACTION: avl2.insert(int1) 
int1 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10595d7e8> : <type 'instance'>
avl_REF2 = set([11, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([11, 20, 5, 7]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 54
ACTION: avl1.delete(int3) 
int3 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1040c9200> : <type 'instance'>
avl_REF1 = set([3, 5, 6, 9, 13, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int3 = 5                                                                # STEP 55
ACTION: int3 = 5 
int3 = 7 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 56
ACTION: avl2.insert(int3) 
int3 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10595d7e8> : <type 'instance'>
avl_REF2 = set([11, 20, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
avl2.delete(int2)                                                       # STEP 57
ACTION: avl2.delete(int2) 
int2 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10595d7e8> : <type 'instance'>
avl_REF2 = set([11, 20, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int1 = 11                                                               # STEP 58
ACTION: int1 = 11 
int1 = 20 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
int0 = 5                                                                # STEP 59
ACTION: int0 = 5 
int0 = 10 : <type 'int'>
=> int0 = 5 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 60
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1040c9200> : <type 'instance'>
avl_REF1 = set([3, 5, 6, 9, 13, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.display()                                                          # STEP 61
ACTION: avl1.display() 
avl1 = <avl.AVLTree instance at 0x1040c9200> : <type 'instance'>
avl_REF1 = set([3, 5, 6, 9, 13, 20]) : <type 'set'>
  6 [2:0]
-- < 5 [1:1]
---- < 3 [0:0] L
-- > 13 [1:0]
---- < 9 [0:0] L
---- > 20 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([3, 5, 6, 9, 13, 20])
==================================================
avl2.delete(int3)                                                       # STEP 62
ACTION: avl2.delete(int3) 
int3 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10595d7e8> : <type 'instance'>
avl_REF2 = set([11, 20, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([11, 20, 7]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104323b00>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104584710>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 97 steps

SAVING TEST AS failure.1041.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
avl0 = avl.AVLTree()                                                     # STEP 0
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x104528d88> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int3 = 7                                                                 # STEP 1
ACTION: int3 = 7 
int3 = None : <type 'NoneType'>
=> int3 = 7 : <type 'int'>
==================================================
avl0.delete(int3)                                                        # STEP 2
ACTION: avl0.delete(int3) 
int3 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104528d88> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.delete(int3)                                                        # STEP 3
ACTION: avl0.delete(int3) 
int3 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104528d88> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.delete(int3)                                                        # STEP 4
ACTION: avl0.delete(int3) 
int3 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104528d88> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.delete(int3)                                                        # STEP 5
ACTION: avl0.delete(int3) 
int3 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104528d88> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.insert(int3)                                                        # STEP 6
ACTION: avl0.insert(int3) 
int3 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104528d88> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([7]) : <type 'set'>
==================================================
avl0.delete(int3)                                                        # STEP 7
ACTION: avl0.delete(int3) 
int3 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104528d88> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.delete(int3)                                                        # STEP 8
ACTION: avl0.delete(int3) 
int3 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104528d88> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0 == avl0                                                             # STEP 9
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x104528d88> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl1 = avl.AVLTree()                                                    # STEP 10
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x1042aff80> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 11
ACTION: avl1.insert(int3) 
int3 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042aff80> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([7]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 12
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104528d88> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int3)                                                       # STEP 13
ACTION: avl0.insert(int3) 
int3 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104528d88> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([7]) : <type 'set'>
==================================================
int1 = 1                                                                # STEP 14
ACTION: int1 = 1 
int1 = None : <type 'NoneType'>
=> int1 = 1 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 15
ACTION: avl0.delete(int3) 
int3 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104528d88> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 16
ACTION: avl0.insert(int1) 
int1 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104528d88> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([1]) : <type 'set'>
==================================================
int2 = 16                                                               # STEP 17
ACTION: int2 = 16 
int2 = None : <type 'NoneType'>
=> int2 = 16 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 18
ACTION: avl0.insert(int2) 
int2 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104528d88> : <type 'instance'>
avl_REF0 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([16, 1]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 19
ACTION: avl0.insert(int1) 
int1 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104528d88> : <type 'instance'>
avl_REF0 = set([16, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl0.insert(int1)                                                       # STEP 20
ACTION: avl0.insert(int1) 
int1 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104528d88> : <type 'instance'>
avl_REF0 = set([16, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl1.insert(int3)                                                       # STEP 21
ACTION: avl1.insert(int3) 
int3 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042aff80> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
int1 = 17                                                               # STEP 22
ACTION: int1 = 17 
int1 = 1 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
int3 = 14                                                               # STEP 23
ACTION: int3 = 14 
int3 = 7 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 24
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1042aff80> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int1)                                                       # STEP 25
ACTION: avl1.insert(int1) 
int1 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042aff80> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([17, 7]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 26
ACTION: avl1.delete(int1) 
int1 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042aff80> : <type 'instance'>
avl_REF1 = set([17, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([7]) : <type 'set'>
==================================================
result = avl1.find(int1)                                                # STEP 27
ACTION: result = avl1.find(int1) 
int1 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042aff80> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int2 = 1                                                                # STEP 28
ACTION: int2 = 1 
int2 = 16 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 29
ACTION: avl0.delete(int2) 
int2 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104528d88> : <type 'instance'>
avl_REF0 = set([16, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([16]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 30
ACTION: avl0.insert(int1) 
int1 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104528d88> : <type 'instance'>
avl_REF0 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([16, 17]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 31
ACTION: avl0.delete(int1) 
int1 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104528d88> : <type 'instance'>
avl_REF0 = set([16, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([16]) : <type 'set'>
==================================================
result = avl0.find(int3)                                                # STEP 32
ACTION: result = avl0.find(int3) 
int3 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104528d88> : <type 'instance'>
avl_REF0 = set([16]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
int0 = 12                                                               # STEP 33
ACTION: int0 = 12 
int0 = None : <type 'NoneType'>
=> int0 = 12 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 34
ACTION: avl1.delete(int3) 
int3 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042aff80> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl0.delete(int2)                                                       # STEP 35
ACTION: avl0.delete(int2) 
int2 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104528d88> : <type 'instance'>
avl_REF0 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.insert(int2)                                                       # STEP 36
ACTION: avl0.insert(int2) 
int2 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104528d88> : <type 'instance'>
avl_REF0 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([16, 1]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 37
ACTION: avl1.delete(int2) 
int2 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042aff80> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1 == avl1                                                            # STEP 38
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x1042aff80> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
result = avl0.inorder()                                                 # STEP 39
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104528d88> : <type 'instance'>
avl_REF0 = set([16, 1]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int2 = 8                                                                # STEP 40
ACTION: int2 = 8 
int2 = 1 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 41
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104528d88> : <type 'instance'>
avl_REF0 = set([16, 1]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl1.insert(int1)                                                       # STEP 42
ACTION: avl1.insert(int1) 
int1 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042aff80> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([17, 7]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 43
ACTION: avl0.delete(int0) 
int0 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104528d88> : <type 'instance'>
avl_REF0 = set([16, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl1.insert(int2)                                                       # STEP 44
ACTION: avl1.insert(int2) 
int2 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042aff80> : <type 'instance'>
avl_REF1 = set([17, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([8, 17, 7]) : <type 'set'>
==================================================
avl0 == avl1                                                            # STEP 45
ACTION: avl0 == avl1 
avl0 = <avl.AVLTree instance at 0x104528d88> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x1042aff80> : <type 'instance'>
avl_REF0 = set([16, 1]) : <type 'set'>
avl_REF1 = set([8, 17, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF1 
==================================================
avl1.delete(int0)                                                       # STEP 46
ACTION: avl1.delete(int0) 
int0 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042aff80> : <type 'instance'>
avl_REF1 = set([8, 17, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl0.insert(int0)                                                       # STEP 47
ACTION: avl0.insert(int0) 
int0 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104528d88> : <type 'instance'>
avl_REF0 = set([16, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([16, 1, 12]) : <type 'set'>
==================================================
int3 = 2                                                                # STEP 48
ACTION: int3 = 2 
int3 = 14 : <type 'int'>
=> int3 = 2 : <type 'int'>
==================================================
result = avl1.find(int3)                                                # STEP 49
ACTION: result = avl1.find(int3) 
int3 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042aff80> : <type 'instance'>
avl_REF1 = set([8, 17, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl1.insert(int0)                                                       # STEP 50
ACTION: avl1.insert(int0) 
int0 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042aff80> : <type 'instance'>
avl_REF1 = set([8, 17, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([8, 17, 12, 7]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 51
ACTION: avl0.insert(int1) 
int1 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104528d88> : <type 'instance'>
avl_REF0 = set([16, 1, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([16, 1, 12, 17]) : <type 'set'>
==================================================
int0 = 17                                                               # STEP 52
ACTION: int0 = 17 
int0 = 12 : <type 'int'>
=> int0 = 17 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 53
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x1058bcf38> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int1 = 11                                                               # STEP 54
ACTION: int1 = 11 
int1 = 17 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 55
ACTION: avl2.insert(int3) 
int3 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058bcf38> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([2]) : <type 'set'>
==================================================
avl0 == avl1                                                            # STEP 56
ACTION: avl0 == avl1 
avl0 = <avl.AVLTree instance at 0x104528d88> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x1042aff80> : <type 'instance'>
avl_REF0 = set([16, 1, 12, 17]) : <type 'set'>
avl_REF1 = set([8, 17, 12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF1 
==================================================
avl1.delete(int1)                                                       # STEP 57
ACTION: avl1.delete(int1) 
int1 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042aff80> : <type 'instance'>
avl_REF1 = set([8, 17, 12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
result = avl0.find(int3)                                                # STEP 58
ACTION: result = avl0.find(int3) 
int3 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104528d88> : <type 'instance'>
avl_REF0 = set([16, 1, 12, 17]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
avl2.delete(int3)                                                       # STEP 59
ACTION: avl2.delete(int3) 
int3 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058bcf38> : <type 'instance'>
avl_REF2 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int1 = 13                                                               # STEP 60
ACTION: int1 = 13 
int1 = 11 : <type 'int'>
=> int1 = 13 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 61
ACTION: avl2.insert(int2) 
int2 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058bcf38> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([8]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 62
ACTION: avl1.delete(int3) 
int3 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042aff80> : <type 'instance'>
avl_REF1 = set([8, 17, 12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int3 = 2                                                                # STEP 63
ACTION: int3 = 2 
int3 = 2 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 64
ACTION: avl2.insert(int1) 
int1 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058bcf38> : <type 'instance'>
avl_REF2 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([8, 13]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 65
ACTION: avl1.insert(int0) 
int0 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042aff80> : <type 'instance'>
avl_REF1 = set([8, 17, 12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.insert(int2)                                                       # STEP 66
ACTION: avl1.insert(int2) 
int2 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042aff80> : <type 'instance'>
avl_REF1 = set([8, 17, 12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
result = avl2.inorder()                                                 # STEP 67
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x1058bcf38> : <type 'instance'>
avl_REF2 = set([8, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl0.delete(int3)                                                       # STEP 68
ACTION: avl0.delete(int3) 
int3 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104528d88> : <type 'instance'>
avl_REF0 = set([16, 1, 12, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl2.insert(int2)                                                       # STEP 69
ACTION: avl2.insert(int2) 
int2 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058bcf38> : <type 'instance'>
avl_REF2 = set([8, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl1.insert(int0)                                                       # STEP 70
ACTION: avl1.insert(int0) 
int0 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042aff80> : <type 'instance'>
avl_REF1 = set([8, 17, 12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
int2 = 5                                                                # STEP 71
ACTION: int2 = 5 
int2 = 8 : <type 'int'>
=> int2 = 5 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 72
ACTION: avl1.delete(int1) 
int1 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042aff80> : <type 'instance'>
avl_REF1 = set([8, 17, 12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl2.delete(int2)                                                       # STEP 73
ACTION: avl2.delete(int2) 
int2 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058bcf38> : <type 'instance'>
avl_REF2 = set([8, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.delete(int3)                                                       # STEP 74
ACTION: avl2.delete(int3) 
int3 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058bcf38> : <type 'instance'>
avl_REF2 = set([8, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl0.delete(int0)                                                       # STEP 75
ACTION: avl0.delete(int0) 
int0 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104528d88> : <type 'instance'>
avl_REF0 = set([16, 1, 12, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([16, 1, 12]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 76
ACTION: avl2.delete(int0) 
int0 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058bcf38> : <type 'instance'>
avl_REF2 = set([8, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int1 = 15                                                               # STEP 77
ACTION: int1 = 15 
int1 = 13 : <type 'int'>
=> int1 = 15 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 78
ACTION: avl0.insert(int2) 
int2 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104528d88> : <type 'instance'>
avl_REF0 = set([16, 1, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([16, 1, 12, 5]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 79
ACTION: avl1.delete(int3) 
int3 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042aff80> : <type 'instance'>
avl_REF1 = set([8, 17, 12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int0 = 5                                                                # STEP 80
ACTION: int0 = 5 
int0 = 17 : <type 'int'>
=> int0 = 5 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 81
ACTION: avl1.delete(int1) 
int1 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042aff80> : <type 'instance'>
avl_REF1 = set([8, 17, 12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
result = avl2.inorder()                                                 # STEP 82
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x1058bcf38> : <type 'instance'>
avl_REF2 = set([8, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl0.insert(int2)                                                       # STEP 83
ACTION: avl0.insert(int2) 
int2 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104528d88> : <type 'instance'>
avl_REF0 = set([16, 1, 12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl1.insert(int0)                                                       # STEP 84
ACTION: avl1.insert(int0) 
int0 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042aff80> : <type 'instance'>
avl_REF1 = set([8, 17, 12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([8, 17, 12, 5, 7]) : <type 'set'>
==================================================
int3 = 1                                                                # STEP 85
ACTION: int3 = 1 
int3 = 2 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 86
ACTION: avl1.delete(int1) 
int1 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042aff80> : <type 'instance'>
avl_REF1 = set([8, 17, 12, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int2 = 13                                                               # STEP 87
ACTION: int2 = 13 
int2 = 5 : <type 'int'>
=> int2 = 13 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 88
ACTION: avl1.delete(int0) 
int0 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042aff80> : <type 'instance'>
avl_REF1 = set([8, 17, 12, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([8, 17, 12, 7]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 89
ACTION: avl0.delete(int0) 
int0 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104528d88> : <type 'instance'>
avl_REF0 = set([16, 1, 12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([16, 1, 12]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 90
ACTION: avl1.delete(int3) 
int3 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042aff80> : <type 'instance'>
avl_REF1 = set([8, 17, 12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl2.insert(int3)                                                       # STEP 91
ACTION: avl2.insert(int3) 
int3 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058bcf38> : <type 'instance'>
avl_REF2 = set([8, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([8, 1, 13]) : <type 'set'>
==================================================
int0 = 7                                                                # STEP 92
ACTION: int0 = 7 
int0 = 5 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 93
ACTION: avl0.insert(int3) 
int3 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104528d88> : <type 'instance'>
avl_REF0 = set([16, 1, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
avl2.delete(int0)                                                       # STEP 94
ACTION: avl2.delete(int0) 
int0 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058bcf38> : <type 'instance'>
avl_REF2 = set([8, 1, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl1.delete(int2)                                                       # STEP 95
ACTION: avl1.delete(int2) 
int2 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042aff80> : <type 'instance'>
avl_REF1 = set([8, 17, 12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.delete(int0)                                                       # STEP 96
ACTION: avl1.delete(int0) 
int0 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042aff80> : <type 'instance'>
avl_REF1 = set([8, 17, 12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([8, 17, 12]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1027f7128>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
TEST #3 STEP #41 (0:00:30.058115) Fri Apr 28 08:01:27 2017 [ 148 stmts 198 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1046ab950>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 45 steps

SAVING TEST AS failure.1041.test.2
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 8                                                                 # STEP 0
ACTION: int0 = 8 
int0 = None : <type 'NoneType'>
=> int0 = 8 : <type 'int'>
==================================================
int3 = 2                                                                 # STEP 1
ACTION: int3 = 2 
int3 = None : <type 'NoneType'>
=> int3 = 2 : <type 'int'>
==================================================
int1 = 12                                                                # STEP 2
ACTION: int1 = 12 
int1 = None : <type 'NoneType'>
=> int1 = 12 : <type 'int'>
==================================================
int2 = 4                                                                 # STEP 3
ACTION: int2 = 4 
int2 = None : <type 'NoneType'>
=> int2 = 4 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x1046ae0e0> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.delete(int2)                                                        # STEP 5
ACTION: avl1.delete(int2) 
int2 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1046ae0e0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.insert(int1)                                                        # STEP 6
ACTION: avl1.insert(int1) 
int1 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1046ae0e0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([12]) : <type 'set'>
==================================================
avl1.delete(int0)                                                        # STEP 7
ACTION: avl1.delete(int0) 
int0 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1046ae0e0> : <type 'instance'>
avl_REF1 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int0 = 8                                                                 # STEP 8
ACTION: int0 = 8 
int0 = 8 : <type 'int'>
==================================================
avl1.insert(int1)                                                        # STEP 9
ACTION: avl1.insert(int1) 
int1 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1046ae0e0> : <type 'instance'>
avl_REF1 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl1.insert(int0)                                                       # STEP 10
ACTION: avl1.insert(int0) 
int0 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1046ae0e0> : <type 'instance'>
avl_REF1 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([8, 12]) : <type 'set'>
==================================================
result = avl1.find(int3)                                                # STEP 11
ACTION: result = avl1.find(int3) 
int3 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1046ae0e0> : <type 'instance'>
avl_REF1 = set([8, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl1.insert(int1)                                                       # STEP 12
ACTION: avl1.insert(int1) 
int1 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1046ae0e0> : <type 'instance'>
avl_REF1 = set([8, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
result = avl1.inorder()                                                 # STEP 13
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1046ae0e0> : <type 'instance'>
avl_REF1 = set([8, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int0)                                                       # STEP 14
ACTION: avl1.insert(int0) 
int0 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1046ae0e0> : <type 'instance'>
avl_REF1 = set([8, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
result = avl1.find(int3)                                                # STEP 15
ACTION: result = avl1.find(int3) 
int3 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1046ae0e0> : <type 'instance'>
avl_REF1 = set([8, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
int1 = 13                                                               # STEP 16
ACTION: int1 = 13 
int1 = 12 : <type 'int'>
=> int1 = 13 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 17
ACTION: avl1.delete(int2) 
int2 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1046ae0e0> : <type 'instance'>
avl_REF1 = set([8, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.delete(int0)                                                       # STEP 18
ACTION: avl1.delete(int0) 
int0 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1046ae0e0> : <type 'instance'>
avl_REF1 = set([8, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([12]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 19
ACTION: avl1.insert(int3) 
int3 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1046ae0e0> : <type 'instance'>
avl_REF1 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([2, 12]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 20
ACTION: avl1.insert(int3) 
int3 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1046ae0e0> : <type 'instance'>
avl_REF1 = set([2, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
result = avl1.inorder()                                                 # STEP 21
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1046ae0e0> : <type 'instance'>
avl_REF1 = set([2, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.delete(int3)                                                       # STEP 22
ACTION: avl1.delete(int3) 
int3 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1046ae0e0> : <type 'instance'>
avl_REF1 = set([2, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([12]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 23
ACTION: avl1.delete(int0) 
int0 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1046ae0e0> : <type 'instance'>
avl_REF1 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int3 = 12                                                               # STEP 24
ACTION: int3 = 12 
int3 = 2 : <type 'int'>
=> int3 = 12 : <type 'int'>
==================================================
result = avl1.find(int1)                                                # STEP 25
ACTION: result = avl1.find(int1) 
int1 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1046ae0e0> : <type 'instance'>
avl_REF1 = set([12]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl1.delete(int0)                                                       # STEP 26
ACTION: avl1.delete(int0) 
int0 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1046ae0e0> : <type 'instance'>
avl_REF1 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
result = avl1.find(int3)                                                # STEP 27
ACTION: result = avl1.find(int3) 
int3 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1046ae0e0> : <type 'instance'>
avl_REF1 = set([12]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl1.insert(int0)                                                       # STEP 28
ACTION: avl1.insert(int0) 
int0 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1046ae0e0> : <type 'instance'>
avl_REF1 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([8, 12]) : <type 'set'>
==================================================
result = avl1.find(int1)                                                # STEP 29
ACTION: result = avl1.find(int1) 
int1 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1046ae0e0> : <type 'instance'>
avl_REF1 = set([8, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl1.delete(int0)                                                       # STEP 30
ACTION: avl1.delete(int0) 
int0 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1046ae0e0> : <type 'instance'>
avl_REF1 = set([8, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([12]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 31
ACTION: avl1.insert(int3) 
int3 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1046ae0e0> : <type 'instance'>
avl_REF1 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
result = avl1.find(int0)                                                # STEP 32
ACTION: result = avl1.find(int0) 
int0 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1046ae0e0> : <type 'instance'>
avl_REF1 = set([12]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl1.delete(int1)                                                       # STEP 33
ACTION: avl1.delete(int1) 
int1 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1046ae0e0> : <type 'instance'>
avl_REF1 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int1 = 7                                                                # STEP 34
ACTION: int1 = 7 
int1 = 13 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 35
ACTION: avl1.delete(int0) 
int0 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1046ae0e0> : <type 'instance'>
avl_REF1 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.delete(int3)                                                       # STEP 36
ACTION: avl1.delete(int3) 
int3 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1046ae0e0> : <type 'instance'>
avl_REF1 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 37
ACTION: avl1.insert(int0) 
int0 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1046ae0e0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([8]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 38
ACTION: avl1.insert(int2) 
int2 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1046ae0e0> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([8, 4]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 39
ACTION: avl1.insert(int3) 
int3 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1046ae0e0> : <type 'instance'>
avl_REF1 = set([8, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([8, 12, 4]) : <type 'set'>
==================================================
int3 = 5                                                                # STEP 40
ACTION: int3 = 5 
int3 = 12 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 41
ACTION: avl1.insert(int3) 
int3 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1046ae0e0> : <type 'instance'>
avl_REF1 = set([8, 12, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([8, 12, 4, 5]) : <type 'set'>
==================================================
avl1 == avl1                                                            # STEP 42
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x1046ae0e0> : <type 'instance'>
avl_REF1 = set([8, 12, 4, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
int0 = 8                                                                # STEP 43
ACTION: int0 = 8 
int0 = 8 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 44
ACTION: avl1.delete(int0) 
int0 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1046ae0e0> : <type 'instance'>
avl_REF1 = set([8, 12, 4, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([12, 4, 5]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104686b90>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 3 DISTINCT FAILURES
  10 [2:0]
-- < 9 [1:1]
---- < 7 [0:0] L
-- > 17 [1:0]
---- < 13 [0:0] L
---- > 18 [0:0] L
set([7, 9, 10, 13, 17, 18])
  10 [3:-1]
-- < 9 [1:1]
---- < 7 [0:0] L
-- > 17 [2:1]
---- < 13 [1:1]
------ < 12 [0:0] L
---- > 18 [0:0] L
set([7, 9, 10, 12, 13, 17, 18])
  10 [3:-1]
-- < 9 [1:1]
---- < 7 [0:0] L
-- > 17 [2:1]
---- < 13 [1:1]
------ < 12 [0:0] L
---- > 18 [0:0] L
set([7, 9, 10, 12, 13, 17, 18])
  10 [3:-1]
-- < 7 [1:0]
---- < 4 [0:0] L
---- > 9 [0:0] L
-- > 17 [2:1]
---- < 13 [1:1]
------ < 12 [0:0] L
---- > 18 [0:0] L
set([4, 7, 9, 10, 12, 13, 17, 18])
  10 [3:-1]
-- < 7 [1:-1]
---- > 9 [0:0] L
-- > 17 [2:1]
---- < 13 [1:1]
------ < 12 [0:0] L
---- > 18 [0:0] L
set([7, 9, 10, 12, 13, 17, 18])
  10 [3:-1]
-- < 7 [1:-1]
---- > 9 [0:0] L
-- > 17 [2:1]
---- < 13 [1:1]
------ < 12 [0:0] L
---- > 18 [0:0] L
set([7, 9, 10, 12, 13, 17, 18])
  11 [2:0]
-- < 7 [1:0]
---- < 2 [0:0] L
---- > 10 [0:0] L
-- > 16 [1:-1]
---- > 20 [0:0] L
set([2, 7, 10, 11, 16, 20])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10466d1b8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 21 steps

SAVING TEST AS failure.1041.test.3
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 10                                                                # STEP 0
ACTION: int1 = 10 
int1 = None : <type 'NoneType'>
=> int1 = 10 : <type 'int'>
==================================================
int3 = 15                                                                # STEP 1
ACTION: int3 = 15 
int3 = None : <type 'NoneType'>
=> int3 = 15 : <type 'int'>
==================================================
int0 = 20                                                                # STEP 2
ACTION: int0 = 20 
int0 = None : <type 'NoneType'>
=> int0 = 20 : <type 'int'>
==================================================
int2 = 5                                                                 # STEP 3
ACTION: int2 = 5 
int2 = None : <type 'NoneType'>
=> int2 = 5 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x10466d908> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.delete(int3)                                                        # STEP 5
ACTION: avl1.delete(int3) 
int3 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10466d908> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int3 = 14                                                                # STEP 6
ACTION: int3 = 14 
int3 = 15 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
avl1.delete(int1)                                                        # STEP 7
ACTION: avl1.delete(int1) 
int1 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10466d908> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.insert(int0)                                                        # STEP 8
ACTION: avl1.insert(int0) 
int0 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10466d908> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([20]) : <type 'set'>
==================================================
int1 = 19                                                                # STEP 9
ACTION: int1 = 19 
int1 = 10 : <type 'int'>
=> int1 = 19 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 10
ACTION: avl1.insert(int3) 
int3 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10466d908> : <type 'instance'>
avl_REF1 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([20, 14]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 11
ACTION: avl1.delete(int2) 
int2 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10466d908> : <type 'instance'>
avl_REF1 = set([20, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int2 = 4                                                                # STEP 12
ACTION: int2 = 4 
int2 = 5 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 13
ACTION: avl1.insert(int0) 
int0 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10466d908> : <type 'instance'>
avl_REF1 = set([20, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.insert(int3)                                                       # STEP 14
ACTION: avl1.insert(int3) 
int3 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10466d908> : <type 'instance'>
avl_REF1 = set([20, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
int0 = 17                                                               # STEP 15
ACTION: int0 = 17 
int0 = 20 : <type 'int'>
=> int0 = 17 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 16
ACTION: avl1.delete(int0) 
int0 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10466d908> : <type 'instance'>
avl_REF1 = set([20, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.insert(int0)                                                       # STEP 17
ACTION: avl1.insert(int0) 
int0 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10466d908> : <type 'instance'>
avl_REF1 = set([20, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([17, 20, 14]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 18
ACTION: avl1.insert(int3) 
int3 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10466d908> : <type 'instance'>
avl_REF1 = set([17, 20, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
avl1.insert(int1)                                                       # STEP 19
ACTION: avl1.insert(int1) 
int1 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10466d908> : <type 'instance'>
avl_REF1 = set([17, 20, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([17, 19, 20, 14]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 20
ACTION: avl1.delete(int3) 
int3 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10466d908> : <type 'instance'>
avl_REF1 = set([17, 19, 20, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([17, 19, 20]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1045b26c8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 4 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 59
STOPPING TESTING DUE TO TIMEOUT
8.58500169664 PERCENT COVERED
60.2278690338 TOTAL RUNTIME
7 EXECUTED
485 TOTAL TEST OPERATIONS
20.5729694366 TIME SPENT EXECUTING TEST OPERATIONS
0.0543069839478 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
20.70687747 TIME SPENT CHECKING PROPERTIES
41.2798469067 TOTAL TIME SPENT RUNNING SUT
0.00402164459229 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
4 FAILED
0 REPEATS OF FAILURES
4 ACTUAL DISTINCT FAILURES

FAILURE 0
avl1 = avl.AVLTree()                                                     # STEP 0
int2 = 3                                                                 # STEP 1
avl1.delete(int2)                                                        # STEP 2
avl1.delete(int2)                                                        # STEP 3
int3 = 5                                                                 # STEP 4
result = avl1.inorder()                                                  # STEP 5
avl1.insert(int2)                                                        # STEP 6
int0 = 20                                                                # STEP 7
result = avl1.inorder()                                                  # STEP 8
avl1.delete(int3)                                                        # STEP 9
avl1.insert(int3)                                                       # STEP 10
avl1.delete(int0)                                                       # STEP 11
avl1.delete(int3)                                                       # STEP 12
avl1.delete(int2)                                                       # STEP 13
avl1.insert(int2)                                                       # STEP 14
avl1.delete(int3)                                                       # STEP 15
avl1.delete(int0)                                                       # STEP 16
avl1.insert(int2)                                                       # STEP 17
avl1.insert(int3)                                                       # STEP 18
int2 = 15                                                               # STEP 19
result = avl1.inorder()                                                 # STEP 20
avl1.insert(int3)                                                       # STEP 21
avl1.delete(int2)                                                       # STEP 22
int2 = 7                                                                # STEP 23
result = avl1.inorder()                                                 # STEP 24
avl2 = avl.AVLTree()                                                    # STEP 25
avl1.insert(int3)                                                       # STEP 26
avl2.insert(int3)                                                       # STEP 27
result = avl1.find(int3)                                                # STEP 28
avl1.insert(int3)                                                       # STEP 29
avl2.insert(int2)                                                       # STEP 30
int1 = 6                                                                # STEP 31
int2 = 13                                                               # STEP 32
avl1.delete(int2)                                                       # STEP 33
avl1.insert(int0)                                                       # STEP 34
avl2.delete(int1)                                                       # STEP 35
avl1.insert(int1)                                                       # STEP 36
avl1.insert(int2)                                                       # STEP 37
int0 = 10                                                               # STEP 38
int3 = 7                                                                # STEP 39
avl1.delete(int0)                                                       # STEP 40
avl2.delete(int1)                                                       # STEP 41
int1 = 9                                                                # STEP 42
int0 = 10                                                               # STEP 43
int2 = 16                                                               # STEP 44
avl1.insert(int1)                                                       # STEP 45
avl1.display()                                                          # STEP 46
int1 = 11                                                               # STEP 47
avl2.insert(int1)                                                       # STEP 48
int1 = 20                                                               # STEP 49
avl1.insert(int0)                                                       # STEP 50
avl2.delete(int1)                                                       # STEP 51
avl1.delete(int0)                                                       # STEP 52
avl2.insert(int1)                                                       # STEP 53
avl1.delete(int3)                                                       # STEP 54
int3 = 5                                                                # STEP 55
avl2.insert(int3)                                                       # STEP 56
avl2.delete(int2)                                                       # STEP 57
int1 = 11                                                               # STEP 58
int0 = 5                                                                # STEP 59
result = avl1.inorder()                                                 # STEP 60
avl1.display()                                                          # STEP 61
avl2.delete(int3)                                                       # STEP 62
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104323b00>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE 1
avl0 = avl.AVLTree()                                                     # STEP 0
int3 = 7                                                                 # STEP 1
avl0.delete(int3)                                                        # STEP 2
avl0.delete(int3)                                                        # STEP 3
avl0.delete(int3)                                                        # STEP 4
avl0.delete(int3)                                                        # STEP 5
avl0.insert(int3)                                                        # STEP 6
avl0.delete(int3)                                                        # STEP 7
avl0.delete(int3)                                                        # STEP 8
avl0 == avl0                                                             # STEP 9
avl1 = avl.AVLTree()                                                    # STEP 10
avl1.insert(int3)                                                       # STEP 11
result = avl0.inorder()                                                 # STEP 12
avl0.insert(int3)                                                       # STEP 13
int1 = 1                                                                # STEP 14
avl0.delete(int3)                                                       # STEP 15
avl0.insert(int1)                                                       # STEP 16
int2 = 16                                                               # STEP 17
avl0.insert(int2)                                                       # STEP 18
avl0.insert(int1)                                                       # STEP 19
avl0.insert(int1)                                                       # STEP 20
avl1.insert(int3)                                                       # STEP 21
int1 = 17                                                               # STEP 22
int3 = 14                                                               # STEP 23
result = avl1.inorder()                                                 # STEP 24
avl1.insert(int1)                                                       # STEP 25
avl1.delete(int1)                                                       # STEP 26
result = avl1.find(int1)                                                # STEP 27
int2 = 1                                                                # STEP 28
avl0.delete(int2)                                                       # STEP 29
avl0.insert(int1)                                                       # STEP 30
avl0.delete(int1)                                                       # STEP 31
result = avl0.find(int3)                                                # STEP 32
int0 = 12                                                               # STEP 33
avl1.delete(int3)                                                       # STEP 34
avl0.delete(int2)                                                       # STEP 35
avl0.insert(int2)                                                       # STEP 36
avl1.delete(int2)                                                       # STEP 37
avl1 == avl1                                                            # STEP 38
result = avl0.inorder()                                                 # STEP 39
int2 = 8                                                                # STEP 40
result = avl0.inorder()                                                 # STEP 41
avl1.insert(int1)                                                       # STEP 42
avl0.delete(int0)                                                       # STEP 43
avl1.insert(int2)                                                       # STEP 44
avl0 == avl1                                                            # STEP 45
avl1.delete(int0)                                                       # STEP 46
avl0.insert(int0)                                                       # STEP 47
int3 = 2                                                                # STEP 48
result = avl1.find(int3)                                                # STEP 49
avl1.insert(int0)                                                       # STEP 50
avl0.insert(int1)                                                       # STEP 51
int0 = 17                                                               # STEP 52
avl2 = avl.AVLTree()                                                    # STEP 53
int1 = 11                                                               # STEP 54
avl2.insert(int3)                                                       # STEP 55
avl0 == avl1                                                            # STEP 56
avl1.delete(int1)                                                       # STEP 57
result = avl0.find(int3)                                                # STEP 58
avl2.delete(int3)                                                       # STEP 59
int1 = 13                                                               # STEP 60
avl2.insert(int2)                                                       # STEP 61
avl1.delete(int3)                                                       # STEP 62
int3 = 2                                                                # STEP 63
avl2.insert(int1)                                                       # STEP 64
avl1.insert(int0)                                                       # STEP 65
avl1.insert(int2)                                                       # STEP 66
result = avl2.inorder()                                                 # STEP 67
avl0.delete(int3)                                                       # STEP 68
avl2.insert(int2)                                                       # STEP 69
avl1.insert(int0)                                                       # STEP 70
int2 = 5                                                                # STEP 71
avl1.delete(int1)                                                       # STEP 72
avl2.delete(int2)                                                       # STEP 73
avl2.delete(int3)                                                       # STEP 74
avl0.delete(int0)                                                       # STEP 75
avl2.delete(int0)                                                       # STEP 76
int1 = 15                                                               # STEP 77
avl0.insert(int2)                                                       # STEP 78
avl1.delete(int3)                                                       # STEP 79
int0 = 5                                                                # STEP 80
avl1.delete(int1)                                                       # STEP 81
result = avl2.inorder()                                                 # STEP 82
avl0.insert(int2)                                                       # STEP 83
avl1.insert(int0)                                                       # STEP 84
int3 = 1                                                                # STEP 85
avl1.delete(int1)                                                       # STEP 86
int2 = 13                                                               # STEP 87
avl1.delete(int0)                                                       # STEP 88
avl0.delete(int0)                                                       # STEP 89
avl1.delete(int3)                                                       # STEP 90
avl2.insert(int3)                                                       # STEP 91
int0 = 7                                                                # STEP 92
avl0.insert(int3)                                                       # STEP 93
avl2.delete(int0)                                                       # STEP 94
avl1.delete(int2)                                                       # STEP 95
avl1.delete(int0)                                                       # STEP 96
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1027f7128>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE 2
int0 = 8                                                                 # STEP 0
int3 = 2                                                                 # STEP 1
int1 = 12                                                                # STEP 2
int2 = 4                                                                 # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
avl1.delete(int2)                                                        # STEP 5
avl1.insert(int1)                                                        # STEP 6
avl1.delete(int0)                                                        # STEP 7
int0 = 8                                                                 # STEP 8
avl1.insert(int1)                                                        # STEP 9
avl1.insert(int0)                                                       # STEP 10
result = avl1.find(int3)                                                # STEP 11
avl1.insert(int1)                                                       # STEP 12
result = avl1.inorder()                                                 # STEP 13
avl1.insert(int0)                                                       # STEP 14
result = avl1.find(int3)                                                # STEP 15
int1 = 13                                                               # STEP 16
avl1.delete(int2)                                                       # STEP 17
avl1.delete(int0)                                                       # STEP 18
avl1.insert(int3)                                                       # STEP 19
avl1.insert(int3)                                                       # STEP 20
result = avl1.inorder()                                                 # STEP 21
avl1.delete(int3)                                                       # STEP 22
avl1.delete(int0)                                                       # STEP 23
int3 = 12                                                               # STEP 24
result = avl1.find(int1)                                                # STEP 25
avl1.delete(int0)                                                       # STEP 26
result = avl1.find(int3)                                                # STEP 27
avl1.insert(int0)                                                       # STEP 28
result = avl1.find(int1)                                                # STEP 29
avl1.delete(int0)                                                       # STEP 30
avl1.insert(int3)                                                       # STEP 31
result = avl1.find(int0)                                                # STEP 32
avl1.delete(int1)                                                       # STEP 33
int1 = 7                                                                # STEP 34
avl1.delete(int0)                                                       # STEP 35
avl1.delete(int3)                                                       # STEP 36
avl1.insert(int0)                                                       # STEP 37
avl1.insert(int2)                                                       # STEP 38
avl1.insert(int3)                                                       # STEP 39
int3 = 5                                                                # STEP 40
avl1.insert(int3)                                                       # STEP 41
avl1 == avl1                                                            # STEP 42
int0 = 8                                                                # STEP 43
avl1.delete(int0)                                                       # STEP 44
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104686b90>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE 3
int1 = 10                                                                # STEP 0
int3 = 15                                                                # STEP 1
int0 = 20                                                                # STEP 2
int2 = 5                                                                 # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
avl1.delete(int3)                                                        # STEP 5
int3 = 14                                                                # STEP 6
avl1.delete(int1)                                                        # STEP 7
avl1.insert(int0)                                                        # STEP 8
int1 = 19                                                                # STEP 9
avl1.insert(int3)                                                       # STEP 10
avl1.delete(int2)                                                       # STEP 11
int2 = 4                                                                # STEP 12
avl1.insert(int0)                                                       # STEP 13
avl1.insert(int3)                                                       # STEP 14
int0 = 17                                                               # STEP 15
avl1.delete(int0)                                                       # STEP 16
avl1.insert(int0)                                                       # STEP 17
avl1.insert(int3)                                                       # STEP 18
avl1.insert(int1)                                                       # STEP 19
avl1.delete(int3)                                                       # STEP 20
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1045b26c8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
216 BRANCHES COVERED
162 STATEMENTS COVERED

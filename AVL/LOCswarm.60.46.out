Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=True, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.40669.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  7 [2:0]
-- < 6 [1:1]
---- < 3 [0:0] L
-- > 13 [1:0]
---- < 11 [0:0] L
---- > 20 [0:0] L
set([3, 6, 7, 11, 13, 20])
  7 [3:-1]
-- < 6 [1:1]
---- < 3 [0:0] L
-- > 13 [2:-1]
---- < 11 [0:0] L
---- > 20 [1:1]
------ < 18 [0:0] L
set([3, 6, 7, 11, 13, 18, 20])
  4 [2:0]
-- < 3 [1:1]
---- < 2 [0:0] L
-- > 15 [1:0]
---- < 13 [0:0] L
---- > 20 [0:0] L
set([2, 3, 4, 13, 15, 20])
  14 [2:0]
-- < 8 [1:0]
---- < 2 [0:0] L
---- > 9 [0:0] L
-- > 15 [1:-1]
---- > 17 [0:0] L
set([2, 8, 9, 14, 15, 17])
  14 [2:0]
-- < 8 [1:0]
---- < 2 [0:0] L
---- > 9 [0:0] L
-- > 15 [1:-1]
---- > 17 [0:0] L
set([2, 8, 9, 14, 15, 17])
  14 [2:0]
-- < 8 [1:0]
---- < 2 [0:0] L
---- > 9 [0:0] L
-- > 15 [1:-1]
---- > 17 [0:0] L
set([2, 8, 9, 14, 15, 17])
  14 [2:0]
-- < 6 [1:0]
---- < 2 [0:0] L
---- > 8 [0:0] L
-- > 20 [1:1]
---- < 15 [0:0] L
set([2, 6, 8, 14, 15, 20])
  14 [2:0]
-- < 6 [1:0]
---- < 2 [0:0] L
---- > 8 [0:0] L
-- > 20 [1:1]
---- < 15 [0:0] L
set([2, 6, 8, 14, 15, 20])
  14 [2:0]
-- < 6 [1:0]
---- < 2 [0:0] L
---- > 8 [0:0] L
-- > 20 [1:1]
---- < 15 [0:0] L
set([2, 6, 8, 14, 15, 20])
  14 [3:1]
-- < 6 [2:-1]
---- < 2 [0:0] L
---- > 8 [1:-1]
------ > 9 [0:0] L
-- > 20 [1:1]
---- < 15 [0:0] L
set([2, 6, 8, 9, 14, 15, 20])
  14 [3:1]
-- < 6 [2:-1]
---- < 2 [0:0] L
---- > 8 [1:-1]
------ > 9 [0:0] L
-- > 20 [1:1]
---- < 15 [0:0] L
set([2, 6, 8, 9, 14, 15, 20])
TEST #4 STEP #36 (0:00:30.023079) Mon May  1 02:35:17 2017 [ 125 stmts 167 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1025ec950>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
Original test has 67 steps

SAVING TEST AS failure.40669.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
avl0 = avl.AVLTree()                                                     # STEP 0
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x103c3a128> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int0 = 13                                                                # STEP 1
ACTION: int0 = 13 
int0 = None : <type 'NoneType'>
=> int0 = 13 : <type 'int'>
==================================================
int1 = 11                                                                # STEP 2
ACTION: int1 = 11 
int1 = None : <type 'NoneType'>
=> int1 = 11 : <type 'int'>
==================================================
avl0.insert(int1)                                                        # STEP 3
ACTION: avl0.insert(int1) 
int1 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c3a128> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([11]) : <type 'set'>
==================================================
int3 = 10                                                                # STEP 4
ACTION: int3 = 10 
int3 = None : <type 'NoneType'>
=> int3 = 10 : <type 'int'>
==================================================
avl0.delete(int3)                                                        # STEP 5
ACTION: avl0.delete(int3) 
int3 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c3a128> : <type 'instance'>
avl_REF0 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.insert(int3)                                                        # STEP 6
ACTION: avl0.insert(int3) 
int3 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c3a128> : <type 'instance'>
avl_REF0 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([10, 11]) : <type 'set'>
==================================================
avl0.insert(int0)                                                        # STEP 7
ACTION: avl0.insert(int0) 
int0 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c3a128> : <type 'instance'>
avl_REF0 = set([10, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([10, 11, 13]) : <type 'set'>
==================================================
result = avl0.inorder()                                                  # STEP 8
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x103c3a128> : <type 'instance'>
avl_REF0 = set([10, 11, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.delete(int1)                                                        # STEP 9
ACTION: avl0.delete(int1) 
int1 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c3a128> : <type 'instance'>
avl_REF0 = set([10, 11, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([10, 13]) : <type 'set'>
==================================================
int3 = 10                                                               # STEP 10
ACTION: int3 = 10 
int3 = 10 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 11
ACTION: avl0.delete(int1) 
int1 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c3a128> : <type 'instance'>
avl_REF0 = set([10, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int0 = 14                                                               # STEP 12
ACTION: int0 = 14 
int0 = 13 : <type 'int'>
=> int0 = 14 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 13
ACTION: avl0 = avl.AVLTree() 
avl0 = <avlbug2.AVLTree instance at 0x103c3a128> : <type 'instance'>
avl_REF0 = set([10, 13]) : <type 'set'>
=> avl0 = <avlbug2.AVLTree instance at 0x103ad9170> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 14
ACTION: avl0.delete(int1) 
int1 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103ad9170> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.insert(int1)                                                       # STEP 15
ACTION: avl0.insert(int1) 
int1 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103ad9170> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([11]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 16
ACTION: avl0.delete(int1) 
int1 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103ad9170> : <type 'instance'>
avl_REF0 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 17
ACTION: avl0.delete(int1) 
int1 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103ad9170> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.insert(int3)                                                       # STEP 18
ACTION: avl0.insert(int3) 
int3 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103ad9170> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([10]) : <type 'set'>
==================================================
int1 = 14                                                               # STEP 19
ACTION: int1 = 14 
int1 = 11 : <type 'int'>
=> int1 = 14 : <type 'int'>
==================================================
int3 = 5                                                                # STEP 20
ACTION: int3 = 5 
int3 = 10 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
int2 = 18                                                               # STEP 21
ACTION: int2 = 18 
int2 = None : <type 'NoneType'>
=> int2 = 18 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 22
ACTION: avl0.insert(int3) 
int3 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103ad9170> : <type 'instance'>
avl_REF0 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([10, 5]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 23
ACTION: avl0.insert(int2) 
int2 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103ad9170> : <type 'instance'>
avl_REF0 = set([10, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([10, 18, 5]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 24
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x103ad9170> : <type 'instance'>
avl_REF0 = set([10, 18, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.delete(int0)                                                       # STEP 25
ACTION: avl0.delete(int0) 
int0 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103ad9170> : <type 'instance'>
avl_REF0 = set([10, 18, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int3 = 15                                                               # STEP 26
ACTION: int3 = 15 
int3 = 5 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 27
ACTION: avl0.delete(int1) 
int1 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103ad9170> : <type 'instance'>
avl_REF0 = set([10, 18, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
result = avl0.inorder()                                                 # STEP 28
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x103ad9170> : <type 'instance'>
avl_REF0 = set([10, 18, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int2)                                                       # STEP 29
ACTION: avl0.insert(int2) 
int2 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103ad9170> : <type 'instance'>
avl_REF0 = set([10, 18, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl0.delete(int1)                                                       # STEP 30
ACTION: avl0.delete(int1) 
int1 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103ad9170> : <type 'instance'>
avl_REF0 = set([10, 18, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.delete(int2)                                                       # STEP 31
ACTION: avl0.delete(int2) 
int2 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103ad9170> : <type 'instance'>
avl_REF0 = set([10, 18, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([10, 5]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 32
ACTION: avl0.insert(int0) 
int0 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103ad9170> : <type 'instance'>
avl_REF0 = set([10, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([10, 5, 14]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 33
ACTION: avl0.insert(int0) 
int0 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103ad9170> : <type 'instance'>
avl_REF0 = set([10, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
avl0 == avl0                                                            # STEP 34
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x103ad9170> : <type 'instance'>
avl_REF0 = set([10, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl0.delete(int1)                                                       # STEP 35
ACTION: avl0.delete(int1) 
int1 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103ad9170> : <type 'instance'>
avl_REF0 = set([10, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([10, 5]) : <type 'set'>
==================================================
int0 = 17                                                               # STEP 36
ACTION: int0 = 17 
int0 = 14 : <type 'int'>
=> int0 = 17 : <type 'int'>
==================================================
int1 = 12                                                               # STEP 37
ACTION: int1 = 12 
int1 = 14 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 38
ACTION: avl0.delete(int1) 
int1 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103ad9170> : <type 'instance'>
avl_REF0 = set([10, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int1 = 13                                                               # STEP 39
ACTION: int1 = 13 
int1 = 12 : <type 'int'>
=> int1 = 13 : <type 'int'>
==================================================
int2 = 17                                                               # STEP 40
ACTION: int2 = 17 
int2 = 18 : <type 'int'>
=> int2 = 17 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 41
ACTION: avl0.delete(int1) 
int1 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103ad9170> : <type 'instance'>
avl_REF0 = set([10, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.delete(int0)                                                       # STEP 42
ACTION: avl0.delete(int0) 
int0 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103ad9170> : <type 'instance'>
avl_REF0 = set([10, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.delete(int1)                                                       # STEP 43
ACTION: avl0.delete(int1) 
int1 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103ad9170> : <type 'instance'>
avl_REF0 = set([10, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.insert(int0)                                                       # STEP 44
ACTION: avl0.insert(int0) 
int0 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103ad9170> : <type 'instance'>
avl_REF0 = set([10, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([17, 10, 5]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 45
ACTION: avl0.insert(int1) 
int1 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103ad9170> : <type 'instance'>
avl_REF0 = set([17, 10, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([5, 10, 13, 17]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 46
ACTION: avl0.insert(int3) 
int3 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103ad9170> : <type 'instance'>
avl_REF0 = set([5, 10, 13, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([5, 10, 13, 15, 17]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 47
ACTION: avl0.insert(int3) 
int3 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103ad9170> : <type 'instance'>
avl_REF0 = set([5, 10, 13, 15, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
avl0.insert(int2)                                                       # STEP 48
ACTION: avl0.insert(int2) 
int2 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103ad9170> : <type 'instance'>
avl_REF0 = set([5, 10, 13, 15, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl0.insert(int0)                                                       # STEP 49
ACTION: avl0.insert(int0) 
int0 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103ad9170> : <type 'instance'>
avl_REF0 = set([5, 10, 13, 15, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
avl0.delete(int2)                                                       # STEP 50
ACTION: avl0.delete(int2) 
int2 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103ad9170> : <type 'instance'>
avl_REF0 = set([5, 10, 13, 15, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([5, 10, 13, 15]) : <type 'set'>
==================================================
int2 = 18                                                               # STEP 51
ACTION: int2 = 18 
int2 = 17 : <type 'int'>
=> int2 = 18 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 52
ACTION: avl0.insert(int1) 
int1 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103ad9170> : <type 'instance'>
avl_REF0 = set([5, 10, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl0.insert(int3)                                                       # STEP 53
ACTION: avl0.insert(int3) 
int3 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103ad9170> : <type 'instance'>
avl_REF0 = set([5, 10, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
int0 = 13                                                               # STEP 54
ACTION: int0 = 13 
int0 = 17 : <type 'int'>
=> int0 = 13 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 55
ACTION: avl0.delete(int1) 
int1 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103ad9170> : <type 'instance'>
avl_REF0 = set([5, 10, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([5, 10, 15]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 56
ACTION: avl0.delete(int1) 
int1 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103ad9170> : <type 'instance'>
avl_REF0 = set([5, 10, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int1 = 8                                                                # STEP 57
ACTION: int1 = 8 
int1 = 13 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 58
ACTION: avl0.delete(int2) 
int2 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103ad9170> : <type 'instance'>
avl_REF0 = set([5, 10, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.delete(int3)                                                       # STEP 59
ACTION: avl0.delete(int3) 
int3 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103ad9170> : <type 'instance'>
avl_REF0 = set([5, 10, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([5, 10]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 60
ACTION: avl0.insert(int0) 
int0 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103ad9170> : <type 'instance'>
avl_REF0 = set([5, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([5, 10, 13]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 61
ACTION: avl0.insert(int2) 
int2 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103ad9170> : <type 'instance'>
avl_REF0 = set([5, 10, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([5, 10, 13, 18]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 62
ACTION: avl0.delete(int1) 
int1 = 8 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103ad9170> : <type 'instance'>
avl_REF0 = set([5, 10, 13, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.delete(int2)                                                       # STEP 63
ACTION: avl0.delete(int2) 
int2 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103ad9170> : <type 'instance'>
avl_REF0 = set([5, 10, 13, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([5, 10, 13]) : <type 'set'>
==================================================
int1 = 2                                                                # STEP 64
ACTION: int1 = 2 
int1 = 8 : <type 'int'>
=> int1 = 2 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 65
ACTION: avl0.insert(int1) 
int1 = 2 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103ad9170> : <type 'instance'>
avl_REF0 = set([5, 10, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([2, 5, 10, 13]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 66
ACTION: avl0.delete(int0) 
int0 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103ad9170> : <type 'instance'>
avl_REF0 = set([2, 5, 10, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([2, 5, 10]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103c10b00>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 0
STOPPING TESTING DUE TO TIMEOUT
8.50925625203 PERCENT COVERED
64.9840128422 TOTAL RUNTIME
8 EXECUTED
667 TOTAL TEST OPERATIONS
29.2398831844 TIME SPENT EXECUTING TEST OPERATIONS
0.075754404068 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
29.4325294495 TIME SPENT CHECKING PROPERTIES
58.6724126339 TOTAL TIME SPENT RUNNING SUT
0.00424194335938 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
avl0 = avl.AVLTree()                                                     # STEP 0
int0 = 13                                                                # STEP 1
int1 = 11                                                                # STEP 2
avl0.insert(int1)                                                        # STEP 3
int3 = 10                                                                # STEP 4
avl0.delete(int3)                                                        # STEP 5
avl0.insert(int3)                                                        # STEP 6
avl0.insert(int0)                                                        # STEP 7
result = avl0.inorder()                                                  # STEP 8
avl0.delete(int1)                                                        # STEP 9
int3 = 10                                                               # STEP 10
avl0.delete(int1)                                                       # STEP 11
int0 = 14                                                               # STEP 12
avl0 = avl.AVLTree()                                                    # STEP 13
avl0.delete(int1)                                                       # STEP 14
avl0.insert(int1)                                                       # STEP 15
avl0.delete(int1)                                                       # STEP 16
avl0.delete(int1)                                                       # STEP 17
avl0.insert(int3)                                                       # STEP 18
int1 = 14                                                               # STEP 19
int3 = 5                                                                # STEP 20
int2 = 18                                                               # STEP 21
avl0.insert(int3)                                                       # STEP 22
avl0.insert(int2)                                                       # STEP 23
result = avl0.inorder()                                                 # STEP 24
avl0.delete(int0)                                                       # STEP 25
int3 = 15                                                               # STEP 26
avl0.delete(int1)                                                       # STEP 27
result = avl0.inorder()                                                 # STEP 28
avl0.insert(int2)                                                       # STEP 29
avl0.delete(int1)                                                       # STEP 30
avl0.delete(int2)                                                       # STEP 31
avl0.insert(int0)                                                       # STEP 32
avl0.insert(int0)                                                       # STEP 33
avl0 == avl0                                                            # STEP 34
avl0.delete(int1)                                                       # STEP 35
int0 = 17                                                               # STEP 36
int1 = 12                                                               # STEP 37
avl0.delete(int1)                                                       # STEP 38
int1 = 13                                                               # STEP 39
int2 = 17                                                               # STEP 40
avl0.delete(int1)                                                       # STEP 41
avl0.delete(int0)                                                       # STEP 42
avl0.delete(int1)                                                       # STEP 43
avl0.insert(int0)                                                       # STEP 44
avl0.insert(int1)                                                       # STEP 45
avl0.insert(int3)                                                       # STEP 46
avl0.insert(int3)                                                       # STEP 47
avl0.insert(int2)                                                       # STEP 48
avl0.insert(int0)                                                       # STEP 49
avl0.delete(int2)                                                       # STEP 50
int2 = 18                                                               # STEP 51
avl0.insert(int1)                                                       # STEP 52
avl0.insert(int3)                                                       # STEP 53
int0 = 13                                                               # STEP 54
avl0.delete(int1)                                                       # STEP 55
avl0.delete(int1)                                                       # STEP 56
int1 = 8                                                                # STEP 57
avl0.delete(int2)                                                       # STEP 58
avl0.delete(int3)                                                       # STEP 59
avl0.insert(int0)                                                       # STEP 60
avl0.insert(int2)                                                       # STEP 61
avl0.delete(int1)                                                       # STEP 62
avl0.delete(int2)                                                       # STEP 63
int1 = 2                                                                # STEP 64
avl0.insert(int1)                                                       # STEP 65
avl0.delete(int0)                                                       # STEP 66
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103c10b00>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
205 BRANCHES COVERED
157 STATEMENTS COVERED

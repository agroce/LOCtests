Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.310.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104aaa2d8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 88 steps

SAVING TEST AS failure.310.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 12                                                                # STEP 0
ACTION: int0 = 12 
int0 = None : <type 'NoneType'>
=> int0 = 12 : <type 'int'>
==================================================
int2 = 20                                                                # STEP 1
ACTION: int2 = 20 
int2 = None : <type 'NoneType'>
=> int2 = 20 : <type 'int'>
==================================================
int1 = 17                                                                # STEP 2
ACTION: int1 = 17 
int1 = None : <type 'NoneType'>
=> int1 = 17 : <type 'int'>
==================================================
int3 = 20                                                                # STEP 3
ACTION: int3 = 20 
int3 = None : <type 'NoneType'>
=> int3 = 20 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x104e4bab8> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.delete(int2)                                                        # STEP 5
ACTION: avl2.delete(int2) 
int2 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e4bab8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.insert(int1)                                                        # STEP 6
ACTION: avl2.insert(int1) 
int1 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e4bab8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([17]) : <type 'set'>
==================================================
avl2.insert(int2)                                                        # STEP 7
ACTION: avl2.insert(int2) 
int2 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e4bab8> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([17, 20]) : <type 'set'>
==================================================
int1 = 19                                                                # STEP 8
ACTION: int1 = 19 
int1 = 17 : <type 'int'>
=> int1 = 19 : <type 'int'>
==================================================
int2 = 3                                                                 # STEP 9
ACTION: int2 = 3 
int2 = 20 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
avl2 == avl2                                                            # STEP 10
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x104e4bab8> : <type 'instance'>
avl_REF2 = set([17, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
result = avl2.find(int0)                                                # STEP 11
ACTION: result = avl2.find(int0) 
int0 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e4bab8> : <type 'instance'>
avl_REF2 = set([17, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl2.insert(int1)                                                       # STEP 12
ACTION: avl2.insert(int1) 
int1 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e4bab8> : <type 'instance'>
avl_REF2 = set([17, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([17, 19, 20]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 13
ACTION: avl2.insert(int3) 
int3 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e4bab8> : <type 'instance'>
avl_REF2 = set([17, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
int0 = 11                                                               # STEP 14
ACTION: int0 = 11 
int0 = 12 : <type 'int'>
=> int0 = 11 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 15
ACTION: avl2.insert(int3) 
int3 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e4bab8> : <type 'instance'>
avl_REF2 = set([17, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
int3 = 14                                                               # STEP 16
ACTION: int3 = 14 
int3 = 20 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 17
ACTION: avl2.delete(int2) 
int2 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e4bab8> : <type 'instance'>
avl_REF2 = set([17, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.delete(int3)                                                       # STEP 18
ACTION: avl2.delete(int3) 
int3 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e4bab8> : <type 'instance'>
avl_REF2 = set([17, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
result = avl2.find(int0)                                                # STEP 19
ACTION: result = avl2.find(int0) 
int0 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e4bab8> : <type 'instance'>
avl_REF2 = set([17, 19, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl2.delete(int1)                                                       # STEP 20
ACTION: avl2.delete(int1) 
int1 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e4bab8> : <type 'instance'>
avl_REF2 = set([17, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([17, 20]) : <type 'set'>
==================================================
int0 = 10                                                               # STEP 21
ACTION: int0 = 10 
int0 = 11 : <type 'int'>
=> int0 = 10 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 22
ACTION: avl2.insert(int1) 
int1 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e4bab8> : <type 'instance'>
avl_REF2 = set([17, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([17, 19, 20]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 23
ACTION: avl2.delete(int0) 
int0 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e4bab8> : <type 'instance'>
avl_REF2 = set([17, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.delete(int2)                                                       # STEP 24
ACTION: avl2.delete(int2) 
int2 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e4bab8> : <type 'instance'>
avl_REF2 = set([17, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int2 = 19                                                               # STEP 25
ACTION: int2 = 19 
int2 = 3 : <type 'int'>
=> int2 = 19 : <type 'int'>
==================================================
int1 = 13                                                               # STEP 26
ACTION: int1 = 13 
int1 = 19 : <type 'int'>
=> int1 = 13 : <type 'int'>
==================================================
avl2 == avl2                                                            # STEP 27
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x104e4bab8> : <type 'instance'>
avl_REF2 = set([17, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
int3 = 3                                                                # STEP 28
ACTION: int3 = 3 
int3 = 14 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 29
ACTION: avl2.insert(int2) 
int2 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e4bab8> : <type 'instance'>
avl_REF2 = set([17, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl2.delete(int3)                                                       # STEP 30
ACTION: avl2.delete(int3) 
int3 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e4bab8> : <type 'instance'>
avl_REF2 = set([17, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl1 = avl.AVLTree()                                                    # STEP 31
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x104aba248> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 32
ACTION: avl1.delete(int0) 
int0 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104aba248> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl2.insert(int0)                                                       # STEP 33
ACTION: avl2.insert(int0) 
int0 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e4bab8> : <type 'instance'>
avl_REF2 = set([17, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([17, 10, 19, 20]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 34
ACTION: avl2.delete(int3) 
int3 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e4bab8> : <type 'instance'>
avl_REF2 = set([17, 10, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int2 = 1                                                                # STEP 35
ACTION: int2 = 1 
int2 = 19 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 36
ACTION: avl2.delete(int1) 
int1 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e4bab8> : <type 'instance'>
avl_REF2 = set([17, 10, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
result = avl2.find(int2)                                                # STEP 37
ACTION: result = avl2.find(int2) 
int2 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e4bab8> : <type 'instance'>
avl_REF2 = set([17, 10, 19, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
result = avl1.find(int2)                                                # STEP 38
ACTION: result = avl1.find(int2) 
int2 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104aba248> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
result = avl1.inorder()                                                 # STEP 39
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104aba248> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl2.delete(int2)                                                       # STEP 40
ACTION: avl2.delete(int2) 
int2 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e4bab8> : <type 'instance'>
avl_REF2 = set([17, 10, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl1.insert(int1)                                                       # STEP 41
ACTION: avl1.insert(int1) 
int1 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104aba248> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([13]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 42
ACTION: avl2.delete(int1) 
int1 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e4bab8> : <type 'instance'>
avl_REF2 = set([17, 10, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.delete(int0)                                                       # STEP 43
ACTION: avl2.delete(int0) 
int0 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e4bab8> : <type 'instance'>
avl_REF2 = set([17, 10, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([17, 19, 20]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 44
ACTION: avl1.delete(int1) 
int1 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104aba248> : <type 'instance'>
avl_REF1 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 45
ACTION: avl1.delete(int1) 
int1 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104aba248> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
result = avl2.inorder()                                                 # STEP 46
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104e4bab8> : <type 'instance'>
avl_REF2 = set([17, 19, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int0 = 6                                                                # STEP 47
ACTION: int0 = 6 
int0 = 10 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 48
ACTION: avl1.delete(int1) 
int1 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104aba248> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.delete(int1)                                                       # STEP 49
ACTION: avl1.delete(int1) 
int1 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104aba248> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl2.insert(int0)                                                       # STEP 50
ACTION: avl2.insert(int0) 
int0 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e4bab8> : <type 'instance'>
avl_REF2 = set([17, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([17, 19, 20, 6]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 51
ACTION: avl2.delete(int3) 
int3 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e4bab8> : <type 'instance'>
avl_REF2 = set([17, 19, 20, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
result = avl2.find(int1)                                                # STEP 52
ACTION: result = avl2.find(int1) 
int1 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e4bab8> : <type 'instance'>
avl_REF2 = set([17, 19, 20, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl1.insert(int2)                                                       # STEP 53
ACTION: avl1.insert(int2) 
int2 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104aba248> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([1]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 54
ACTION: avl1.delete(int1) 
int1 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104aba248> : <type 'instance'>
avl_REF1 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl2.insert(int1)                                                       # STEP 55
ACTION: avl2.insert(int1) 
int1 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e4bab8> : <type 'instance'>
avl_REF2 = set([17, 19, 20, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([6, 13, 17, 19, 20]) : <type 'set'>
==================================================
result = avl1.find(int3)                                                # STEP 56
ACTION: result = avl1.find(int3) 
int3 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104aba248> : <type 'instance'>
avl_REF1 = set([1]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl2.delete(int1)                                                       # STEP 57
ACTION: avl2.delete(int1) 
int1 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e4bab8> : <type 'instance'>
avl_REF2 = set([6, 13, 17, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([6, 17, 19, 20]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 58
ACTION: avl2.insert(int0) 
int0 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e4bab8> : <type 'instance'>
avl_REF2 = set([6, 17, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl2.insert(int1)                                                       # STEP 59
ACTION: avl2.insert(int1) 
int1 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e4bab8> : <type 'instance'>
avl_REF2 = set([6, 17, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([6, 13, 17, 19, 20]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 60
ACTION: avl1.insert(int0) 
int0 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104aba248> : <type 'instance'>
avl_REF1 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([1, 6]) : <type 'set'>
==================================================
int3 = 19                                                               # STEP 61
ACTION: int3 = 19 
int3 = 3 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 62
ACTION: avl1.insert(int2) 
int2 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104aba248> : <type 'instance'>
avl_REF1 = set([1, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
avl2.insert(int0)                                                       # STEP 63
ACTION: avl2.insert(int0) 
int0 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e4bab8> : <type 'instance'>
avl_REF2 = set([6, 13, 17, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
int2 = 14                                                               # STEP 64
ACTION: int2 = 14 
int2 = 1 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 65
ACTION: avl2.delete(int2) 
int2 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e4bab8> : <type 'instance'>
avl_REF2 = set([6, 13, 17, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl1.insert(int2)                                                       # STEP 66
ACTION: avl1.insert(int2) 
int2 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104aba248> : <type 'instance'>
avl_REF1 = set([1, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([1, 14, 6]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 67
ACTION: avl1.delete(int3) 
int3 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104aba248> : <type 'instance'>
avl_REF1 = set([1, 14, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl2.insert(int0)                                                       # STEP 68
ACTION: avl2.insert(int0) 
int0 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e4bab8> : <type 'instance'>
avl_REF2 = set([6, 13, 17, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl1.delete(int2)                                                       # STEP 69
ACTION: avl1.delete(int2) 
int2 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104aba248> : <type 'instance'>
avl_REF1 = set([1, 14, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([1, 6]) : <type 'set'>
==================================================
int1 = 16                                                               # STEP 70
ACTION: int1 = 16 
int1 = 13 : <type 'int'>
=> int1 = 16 : <type 'int'>
==================================================
int2 = 4                                                                # STEP 71
ACTION: int2 = 4 
int2 = 14 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 72
ACTION: avl2.delete(int0) 
int0 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e4bab8> : <type 'instance'>
avl_REF2 = set([6, 13, 17, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([13, 17, 19, 20]) : <type 'set'>
==================================================
result = avl2.find(int3)                                                # STEP 73
ACTION: result = avl2.find(int3) 
int3 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e4bab8> : <type 'instance'>
avl_REF2 = set([13, 17, 19, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl2.insert(int2)                                                       # STEP 74
ACTION: avl2.insert(int2) 
int2 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e4bab8> : <type 'instance'>
avl_REF2 = set([13, 17, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([4, 13, 17, 19, 20]) : <type 'set'>
==================================================
result = avl1.find(int0)                                                # STEP 75
ACTION: result = avl1.find(int0) 
int0 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104aba248> : <type 'instance'>
avl_REF1 = set([1, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
int3 = 5                                                                # STEP 76
ACTION: int3 = 5 
int3 = 19 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 77
ACTION: avl1.insert(int1) 
int1 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104aba248> : <type 'instance'>
avl_REF1 = set([1, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([16, 1, 6]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 78
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104aba248> : <type 'instance'>
avl_REF1 = set([16, 1, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int0 = 11                                                               # STEP 79
ACTION: int0 = 11 
int0 = 6 : <type 'int'>
=> int0 = 11 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 80
ACTION: avl2.delete(int3) 
int3 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e4bab8> : <type 'instance'>
avl_REF2 = set([4, 13, 17, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.delete(int2)                                                       # STEP 81
ACTION: avl2.delete(int2) 
int2 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e4bab8> : <type 'instance'>
avl_REF2 = set([4, 13, 17, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([13, 17, 19, 20]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 82
ACTION: avl2.insert(int2) 
int2 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e4bab8> : <type 'instance'>
avl_REF2 = set([13, 17, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([4, 13, 17, 19, 20]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 83
ACTION: avl1.insert(int3) 
int3 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104aba248> : <type 'instance'>
avl_REF1 = set([16, 1, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([16, 1, 5, 6]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 84
ACTION: avl1.delete(int0) 
int0 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104aba248> : <type 'instance'>
avl_REF1 = set([16, 1, 5, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl2.delete(int3)                                                       # STEP 85
ACTION: avl2.delete(int3) 
int3 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e4bab8> : <type 'instance'>
avl_REF2 = set([4, 13, 17, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2 == avl1                                                            # STEP 86
ACTION: avl2 == avl1 
avl2 = <avl.AVLTree instance at 0x104e4bab8> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x104aba248> : <type 'instance'>
avl_REF2 = set([4, 13, 17, 19, 20]) : <type 'set'>
avl_REF1 = set([16, 1, 5, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
avl1.delete(int1)                                                       # STEP 87
ACTION: avl1.delete(int1) 
int1 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104aba248> : <type 'instance'>
avl_REF1 = set([16, 1, 5, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([1, 5, 6]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104ab1908>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #5 STEP #0 (0:00:34.968251) Fri Apr 28 06:02:15 2017 [ 150 stmts 200 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104dab320>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
Original test has 50 steps

SAVING TEST AS failure.310.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 19                                                                # STEP 0
ACTION: int2 = 19 
int2 = None : <type 'NoneType'>
=> int2 = 19 : <type 'int'>
==================================================
int3 = 7                                                                 # STEP 1
ACTION: int3 = 7 
int3 = None : <type 'NoneType'>
=> int3 = 7 : <type 'int'>
==================================================
int0 = 15                                                                # STEP 2
ACTION: int0 = 15 
int0 = None : <type 'NoneType'>
=> int0 = 15 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 3
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x104dab5a8> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.delete(int3)                                                        # STEP 4
ACTION: avl0.delete(int3) 
int3 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104dab5a8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.insert(int3)                                                        # STEP 5
ACTION: avl0.insert(int3) 
int3 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104dab5a8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([7]) : <type 'set'>
==================================================
result = avl0.find(int0)                                                 # STEP 6
ACTION: result = avl0.find(int0) 
int0 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104dab5a8> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
result = avl0.inorder()                                                  # STEP 7
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104dab5a8> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.delete(int0)                                                        # STEP 8
ACTION: avl0.delete(int0) 
int0 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104dab5a8> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int1 = 11                                                                # STEP 9
ACTION: int1 = 11 
int1 = None : <type 'NoneType'>
=> int1 = 11 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 10
ACTION: avl0.delete(int1) 
int1 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104dab5a8> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.insert(int2)                                                       # STEP 11
ACTION: avl0.insert(int2) 
int2 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104dab5a8> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([19, 7]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 12
ACTION: avl0.delete(int2) 
int2 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104dab5a8> : <type 'instance'>
avl_REF0 = set([19, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([7]) : <type 'set'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 13
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x104dba0e0> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 14
ACTION: avl0.insert(int3) 
int3 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104dab5a8> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
avl1.insert(int2)                                                       # STEP 15
ACTION: avl1.insert(int2) 
int2 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104dba0e0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([19]) : <type 'set'>
==================================================
int3 = 9                                                                # STEP 16
ACTION: int3 = 9 
int3 = 7 : <type 'int'>
=> int3 = 9 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 17
ACTION: avl0.insert(int2) 
int2 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104dab5a8> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([19, 7]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 18
ACTION: avl0.insert(int0) 
int0 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104dab5a8> : <type 'instance'>
avl_REF0 = set([19, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([15, 19, 7]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 19
ACTION: avl1.delete(int2) 
int2 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104dba0e0> : <type 'instance'>
avl_REF1 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 20
ACTION: avl1.delete(int0) 
int0 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104dba0e0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl0.insert(int1)                                                       # STEP 21
ACTION: avl0.insert(int1) 
int1 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104dab5a8> : <type 'instance'>
avl_REF0 = set([15, 19, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([15, 11, 19, 7]) : <type 'set'>
==================================================
int0 = 12                                                               # STEP 22
ACTION: int0 = 12 
int0 = 15 : <type 'int'>
=> int0 = 12 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 23
ACTION: avl0.insert(int2) 
int2 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104dab5a8> : <type 'instance'>
avl_REF0 = set([15, 11, 19, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl1.insert(int3)                                                       # STEP 24
ACTION: avl1.insert(int3) 
int3 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104dba0e0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([9]) : <type 'set'>
==================================================
int3 = 6                                                                # STEP 25
ACTION: int3 = 6 
int3 = 9 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 26
ACTION: avl1.insert(int1) 
int1 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104dba0e0> : <type 'instance'>
avl_REF1 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([9, 11]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 27
ACTION: avl1.delete(int3) 
int3 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104dba0e0> : <type 'instance'>
avl_REF1 = set([9, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl0.insert(int1)                                                       # STEP 28
ACTION: avl0.insert(int1) 
int1 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104dab5a8> : <type 'instance'>
avl_REF0 = set([15, 11, 19, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
result = avl0.inorder()                                                 # STEP 29
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104dab5a8> : <type 'instance'>
avl_REF0 = set([15, 11, 19, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl1.delete(int0)                                                       # STEP 30
ACTION: avl1.delete(int0) 
int0 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104dba0e0> : <type 'instance'>
avl_REF1 = set([9, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl0.insert(int0)                                                       # STEP 31
ACTION: avl0.insert(int0) 
int0 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104dab5a8> : <type 'instance'>
avl_REF0 = set([15, 11, 19, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([15, 11, 19, 12, 7]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 32
ACTION: avl1.insert(int0) 
int0 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104dba0e0> : <type 'instance'>
avl_REF1 = set([9, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([9, 11, 12]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 33
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104dab5a8> : <type 'instance'>
avl_REF0 = set([15, 11, 19, 12, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl1.delete(int1)                                                       # STEP 34
ACTION: avl1.delete(int1) 
int1 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104dba0e0> : <type 'instance'>
avl_REF1 = set([9, 11, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([9, 12]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 35
ACTION: avl1.delete(int2) 
int2 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104dba0e0> : <type 'instance'>
avl_REF1 = set([9, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl0.delete(int1)                                                       # STEP 36
ACTION: avl0.delete(int1) 
int1 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104dab5a8> : <type 'instance'>
avl_REF0 = set([15, 11, 19, 12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([15, 19, 12, 7]) : <type 'set'>
==================================================
int2 = 4                                                                # STEP 37
ACTION: int2 = 4 
int2 = 19 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 38
ACTION: avl0.insert(int3) 
int3 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104dab5a8> : <type 'instance'>
avl_REF0 = set([15, 19, 12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([6, 7, 12, 15, 19]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 39
ACTION: avl1.insert(int1) 
int1 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104dba0e0> : <type 'instance'>
avl_REF1 = set([9, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([9, 11, 12]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 40
ACTION: avl0.insert(int2) 
int2 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104dab5a8> : <type 'instance'>
avl_REF0 = set([6, 7, 12, 15, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([4, 6, 7, 12, 15, 19]) : <type 'set'>
==================================================
int0 = 15                                                               # STEP 41
ACTION: int0 = 15 
int0 = 12 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 42
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104dba0e0> : <type 'instance'>
avl_REF1 = set([9, 11, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.delete(int1)                                                       # STEP 43
ACTION: avl1.delete(int1) 
int1 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104dba0e0> : <type 'instance'>
avl_REF1 = set([9, 11, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([9, 12]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 44
ACTION: avl1.delete(int2) 
int2 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104dba0e0> : <type 'instance'>
avl_REF1 = set([9, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.delete(int0)                                                       # STEP 45
ACTION: avl1.delete(int0) 
int0 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104dba0e0> : <type 'instance'>
avl_REF1 = set([9, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1 = avl.AVLTree()                                                    # STEP 46
ACTION: avl1 = avl.AVLTree() 
avl1 = <avl.AVLTree instance at 0x104dba0e0> : <type 'instance'>
avl_REF1 = set([9, 12]) : <type 'set'>
=> avl1 = <avl.AVLTree instance at 0x105803c20> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int3 = 20                                                               # STEP 47
ACTION: int3 = 20 
int3 = 6 : <type 'int'>
=> int3 = 20 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 48
ACTION: avl0.insert(int1) 
int1 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104dab5a8> : <type 'instance'>
avl_REF0 = set([4, 6, 7, 12, 15, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([4, 6, 7, 11, 12, 15, 19]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 49
ACTION: avl0.delete(int2) 
int2 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104dab5a8> : <type 'instance'>
avl_REF0 = set([4, 6, 7, 11, 12, 15, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([6, 7, 11, 12, 15, 19]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104ed9c20>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
  16 [2:0]
-- < 12 [1:0]
---- < 3 [0:0] L
---- > 13 [0:0] L
-- > 17 [1:-1]
---- > 20 [0:0] L
set([3, 12, 13, 16, 17, 20])
  6 [2:0]
-- < 1 [1:-1]
---- > 4 [0:0] L
-- > 15 [1:0]
---- < 12 [0:0] L
---- > 17 [0:0] L
set([1, 4, 6, 12, 15, 17])
  6 [2:0]
-- < 1 [1:-1]
---- > 4 [0:0] L
-- > 15 [1:0]
---- < 12 [0:0] L
---- > 17 [0:0] L
set([1, 4, 6, 12, 15, 17])
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 41
STOPPING TESTING DUE TO TIMEOUT
8.6528673227 PERCENT COVERED
60.2135500908 TOTAL RUNTIME
8 EXECUTED
679 TOTAL TEST OPERATIONS
24.8278779984 TIME SPENT EXECUTING TEST OPERATIONS
0.0692610740662 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
24.9978201389 TIME SPENT CHECKING PROPERTIES
49.8256981373 TOTAL TIME SPENT RUNNING SUT
0.00432300567627 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
2 FAILED
0 REPEATS OF FAILURES
2 ACTUAL DISTINCT FAILURES

FAILURE 0
int0 = 12                                                                # STEP 0
int2 = 20                                                                # STEP 1
int1 = 17                                                                # STEP 2
int3 = 20                                                                # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
avl2.delete(int2)                                                        # STEP 5
avl2.insert(int1)                                                        # STEP 6
avl2.insert(int2)                                                        # STEP 7
int1 = 19                                                                # STEP 8
int2 = 3                                                                 # STEP 9
avl2 == avl2                                                            # STEP 10
result = avl2.find(int0)                                                # STEP 11
avl2.insert(int1)                                                       # STEP 12
avl2.insert(int3)                                                       # STEP 13
int0 = 11                                                               # STEP 14
avl2.insert(int3)                                                       # STEP 15
int3 = 14                                                               # STEP 16
avl2.delete(int2)                                                       # STEP 17
avl2.delete(int3)                                                       # STEP 18
result = avl2.find(int0)                                                # STEP 19
avl2.delete(int1)                                                       # STEP 20
int0 = 10                                                               # STEP 21
avl2.insert(int1)                                                       # STEP 22
avl2.delete(int0)                                                       # STEP 23
avl2.delete(int2)                                                       # STEP 24
int2 = 19                                                               # STEP 25
int1 = 13                                                               # STEP 26
avl2 == avl2                                                            # STEP 27
int3 = 3                                                                # STEP 28
avl2.insert(int2)                                                       # STEP 29
avl2.delete(int3)                                                       # STEP 30
avl1 = avl.AVLTree()                                                    # STEP 31
avl1.delete(int0)                                                       # STEP 32
avl2.insert(int0)                                                       # STEP 33
avl2.delete(int3)                                                       # STEP 34
int2 = 1                                                                # STEP 35
avl2.delete(int1)                                                       # STEP 36
result = avl2.find(int2)                                                # STEP 37
result = avl1.find(int2)                                                # STEP 38
result = avl1.inorder()                                                 # STEP 39
avl2.delete(int2)                                                       # STEP 40
avl1.insert(int1)                                                       # STEP 41
avl2.delete(int1)                                                       # STEP 42
avl2.delete(int0)                                                       # STEP 43
avl1.delete(int1)                                                       # STEP 44
avl1.delete(int1)                                                       # STEP 45
result = avl2.inorder()                                                 # STEP 46
int0 = 6                                                                # STEP 47
avl1.delete(int1)                                                       # STEP 48
avl1.delete(int1)                                                       # STEP 49
avl2.insert(int0)                                                       # STEP 50
avl2.delete(int3)                                                       # STEP 51
result = avl2.find(int1)                                                # STEP 52
avl1.insert(int2)                                                       # STEP 53
avl1.delete(int1)                                                       # STEP 54
avl2.insert(int1)                                                       # STEP 55
result = avl1.find(int3)                                                # STEP 56
avl2.delete(int1)                                                       # STEP 57
avl2.insert(int0)                                                       # STEP 58
avl2.insert(int1)                                                       # STEP 59
avl1.insert(int0)                                                       # STEP 60
int3 = 19                                                               # STEP 61
avl1.insert(int2)                                                       # STEP 62
avl2.insert(int0)                                                       # STEP 63
int2 = 14                                                               # STEP 64
avl2.delete(int2)                                                       # STEP 65
avl1.insert(int2)                                                       # STEP 66
avl1.delete(int3)                                                       # STEP 67
avl2.insert(int0)                                                       # STEP 68
avl1.delete(int2)                                                       # STEP 69
int1 = 16                                                               # STEP 70
int2 = 4                                                                # STEP 71
avl2.delete(int0)                                                       # STEP 72
result = avl2.find(int3)                                                # STEP 73
avl2.insert(int2)                                                       # STEP 74
result = avl1.find(int0)                                                # STEP 75
int3 = 5                                                                # STEP 76
avl1.insert(int1)                                                       # STEP 77
result = avl1.inorder()                                                 # STEP 78
int0 = 11                                                               # STEP 79
avl2.delete(int3)                                                       # STEP 80
avl2.delete(int2)                                                       # STEP 81
avl2.insert(int2)                                                       # STEP 82
avl1.insert(int3)                                                       # STEP 83
avl1.delete(int0)                                                       # STEP 84
avl2.delete(int3)                                                       # STEP 85
avl2 == avl1                                                            # STEP 86
avl1.delete(int1)                                                       # STEP 87
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104ab1908>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE 1
int2 = 19                                                                # STEP 0
int3 = 7                                                                 # STEP 1
int0 = 15                                                                # STEP 2
avl0 = avl.AVLTree()                                                     # STEP 3
avl0.delete(int3)                                                        # STEP 4
avl0.insert(int3)                                                        # STEP 5
result = avl0.find(int0)                                                 # STEP 6
result = avl0.inorder()                                                  # STEP 7
avl0.delete(int0)                                                        # STEP 8
int1 = 11                                                                # STEP 9
avl0.delete(int1)                                                       # STEP 10
avl0.insert(int2)                                                       # STEP 11
avl0.delete(int2)                                                       # STEP 12
avl1 = avl.AVLTree()                                                    # STEP 13
avl0.insert(int3)                                                       # STEP 14
avl1.insert(int2)                                                       # STEP 15
int3 = 9                                                                # STEP 16
avl0.insert(int2)                                                       # STEP 17
avl0.insert(int0)                                                       # STEP 18
avl1.delete(int2)                                                       # STEP 19
avl1.delete(int0)                                                       # STEP 20
avl0.insert(int1)                                                       # STEP 21
int0 = 12                                                               # STEP 22
avl0.insert(int2)                                                       # STEP 23
avl1.insert(int3)                                                       # STEP 24
int3 = 6                                                                # STEP 25
avl1.insert(int1)                                                       # STEP 26
avl1.delete(int3)                                                       # STEP 27
avl0.insert(int1)                                                       # STEP 28
result = avl0.inorder()                                                 # STEP 29
avl1.delete(int0)                                                       # STEP 30
avl0.insert(int0)                                                       # STEP 31
avl1.insert(int0)                                                       # STEP 32
result = avl0.inorder()                                                 # STEP 33
avl1.delete(int1)                                                       # STEP 34
avl1.delete(int2)                                                       # STEP 35
avl0.delete(int1)                                                       # STEP 36
int2 = 4                                                                # STEP 37
avl0.insert(int3)                                                       # STEP 38
avl1.insert(int1)                                                       # STEP 39
avl0.insert(int2)                                                       # STEP 40
int0 = 15                                                               # STEP 41
result = avl1.inorder()                                                 # STEP 42
avl1.delete(int1)                                                       # STEP 43
avl1.delete(int2)                                                       # STEP 44
avl1.delete(int0)                                                       # STEP 45
avl1 = avl.AVLTree()                                                    # STEP 46
int3 = 20                                                               # STEP 47
avl0.insert(int1)                                                       # STEP 48
avl0.delete(int2)                                                       # STEP 49
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104ed9c20>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
218 BRANCHES COVERED
163 STATEMENTS COVERED

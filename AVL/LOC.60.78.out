Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.742.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  8 [2:0]
-- < 5 [1:0]
---- < 3 [0:0] L
---- > 6 [0:0] L
-- > 14 [1:0]
---- < 9 [0:0] L
---- > 15 [0:0] L
set([3, 5, 6, 8, 9, 14, 15])
  8 [2:0]
-- < 5 [1:0]
---- < 3 [0:0] L
---- > 6 [0:0] L
-- > 14 [1:-1]
---- > 15 [0:0] L
set([3, 5, 6, 8, 14, 15])
  8 [2:0]
-- < 5 [1:0]
---- < 3 [0:0] L
---- > 6 [0:0] L
-- > 14 [1:-1]
---- > 15 [0:0] L
set([3, 5, 6, 8, 14, 15])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1045aaab8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 69 steps

SAVING TEST AS failure.742.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 2                                                                 # STEP 0
ACTION: int2 = 2 
int2 = None : <type 'NoneType'>
=> int2 = 2 : <type 'int'>
==================================================
int0 = 12                                                                # STEP 1
ACTION: int0 = 12 
int0 = None : <type 'NoneType'>
=> int0 = 12 : <type 'int'>
==================================================
int3 = 12                                                                # STEP 2
ACTION: int3 = 12 
int3 = None : <type 'NoneType'>
=> int3 = 12 : <type 'int'>
==================================================
int1 = 20                                                                # STEP 3
ACTION: int1 = 20 
int1 = None : <type 'NoneType'>
=> int1 = 20 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x1042565a8> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int3)                                                        # STEP 5
ACTION: avl2.insert(int3) 
int3 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042565a8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([12]) : <type 'set'>
==================================================
result = avl2.inorder()                                                  # STEP 6
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x1042565a8> : <type 'instance'>
avl_REF2 = set([12]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int0)                                                        # STEP 7
ACTION: avl2.insert(int0) 
int0 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042565a8> : <type 'instance'>
avl_REF2 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl2.insert(int2)                                                        # STEP 8
ACTION: avl2.insert(int2) 
int2 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042565a8> : <type 'instance'>
avl_REF2 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([2, 12]) : <type 'set'>
==================================================
avl2.delete(int2)                                                        # STEP 9
ACTION: avl2.delete(int2) 
int2 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042565a8> : <type 'instance'>
avl_REF2 = set([2, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([12]) : <type 'set'>
==================================================
int3 = 20                                                               # STEP 10
ACTION: int3 = 20 
int3 = 12 : <type 'int'>
=> int3 = 20 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 11
ACTION: avl2.insert(int3) 
int3 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042565a8> : <type 'instance'>
avl_REF2 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([20, 12]) : <type 'set'>
==================================================
int3 = 10                                                               # STEP 12
ACTION: int3 = 10 
int3 = 20 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 13
ACTION: avl2.delete(int3) 
int3 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042565a8> : <type 'instance'>
avl_REF2 = set([20, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int0 = 6                                                                # STEP 14
ACTION: int0 = 6 
int0 = 12 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 15
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x1042565a8> : <type 'instance'>
avl_REF2 = set([20, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int0)                                                       # STEP 16
ACTION: avl2.delete(int0) 
int0 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042565a8> : <type 'instance'>
avl_REF2 = set([20, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int3 = 5                                                                # STEP 17
ACTION: int3 = 5 
int3 = 10 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 18
ACTION: avl2.delete(int0) 
int0 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042565a8> : <type 'instance'>
avl_REF2 = set([20, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int2 = 5                                                                # STEP 19
ACTION: int2 = 5 
int2 = 2 : <type 'int'>
=> int2 = 5 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 20
ACTION: avl2.insert(int3) 
int3 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042565a8> : <type 'instance'>
avl_REF2 = set([20, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([20, 12, 5]) : <type 'set'>
==================================================
result = avl2.find(int0)                                                # STEP 21
ACTION: result = avl2.find(int0) 
int0 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042565a8> : <type 'instance'>
avl_REF2 = set([20, 12, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl2.delete(int1)                                                       # STEP 22
ACTION: avl2.delete(int1) 
int1 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042565a8> : <type 'instance'>
avl_REF2 = set([20, 12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([12, 5]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 23
ACTION: avl2.delete(int0) 
int0 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042565a8> : <type 'instance'>
avl_REF2 = set([12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.delete(int2)                                                       # STEP 24
ACTION: avl2.delete(int2) 
int2 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042565a8> : <type 'instance'>
avl_REF2 = set([12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([12]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 25
ACTION: avl2.insert(int2) 
int2 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042565a8> : <type 'instance'>
avl_REF2 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([12, 5]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 26
ACTION: avl2.delete(int0) 
int0 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042565a8> : <type 'instance'>
avl_REF2 = set([12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int0 = 7                                                                # STEP 27
ACTION: int0 = 7 
int0 = 6 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 28
ACTION: avl2.insert(int0) 
int0 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042565a8> : <type 'instance'>
avl_REF2 = set([12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([12, 5, 7]) : <type 'set'>
==================================================
int0 = 9                                                                # STEP 29
ACTION: int0 = 9 
int0 = 7 : <type 'int'>
=> int0 = 9 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 30
ACTION: avl2.insert(int0) 
int0 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042565a8> : <type 'instance'>
avl_REF2 = set([12, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([9, 12, 5, 7]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 31
ACTION: avl2.insert(int1) 
int1 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042565a8> : <type 'instance'>
avl_REF2 = set([9, 12, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([5, 7, 9, 12, 20]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 32
ACTION: avl2.delete(int0) 
int0 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042565a8> : <type 'instance'>
avl_REF2 = set([5, 7, 9, 12, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([5, 7, 12, 20]) : <type 'set'>
==================================================
int0 = 16                                                               # STEP 33
ACTION: int0 = 16 
int0 = 9 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
result = avl2.find(int2)                                                # STEP 34
ACTION: result = avl2.find(int2) 
int2 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042565a8> : <type 'instance'>
avl_REF2 = set([5, 7, 12, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl2.insert(int1)                                                       # STEP 35
ACTION: avl2.insert(int1) 
int1 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042565a8> : <type 'instance'>
avl_REF2 = set([5, 7, 12, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl2.insert(int0)                                                       # STEP 36
ACTION: avl2.insert(int0) 
int0 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042565a8> : <type 'instance'>
avl_REF2 = set([5, 7, 12, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([5, 7, 12, 16, 20]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 37
ACTION: avl2.delete(int1) 
int1 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042565a8> : <type 'instance'>
avl_REF2 = set([5, 7, 12, 16, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([5, 7, 12, 16]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 38
ACTION: avl2.insert(int0) 
int0 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042565a8> : <type 'instance'>
avl_REF2 = set([5, 7, 12, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl2.delete(int1)                                                       # STEP 39
ACTION: avl2.delete(int1) 
int1 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042565a8> : <type 'instance'>
avl_REF2 = set([5, 7, 12, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int1 = 11                                                               # STEP 40
ACTION: int1 = 11 
int1 = 20 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 41
ACTION: avl2.delete(int1) 
int1 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042565a8> : <type 'instance'>
avl_REF2 = set([5, 7, 12, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int0)                                                       # STEP 42
ACTION: avl2.insert(int0) 
int0 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042565a8> : <type 'instance'>
avl_REF2 = set([5, 7, 12, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl2.insert(int1)                                                       # STEP 43
ACTION: avl2.insert(int1) 
int1 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042565a8> : <type 'instance'>
avl_REF2 = set([5, 7, 12, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([5, 7, 11, 12, 16]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 44
ACTION: avl2.insert(int1) 
int1 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042565a8> : <type 'instance'>
avl_REF2 = set([5, 7, 11, 12, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl2.delete(int1)                                                       # STEP 45
ACTION: avl2.delete(int1) 
int1 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042565a8> : <type 'instance'>
avl_REF2 = set([5, 7, 11, 12, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([5, 7, 12, 16]) : <type 'set'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 46
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x10599c638> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 47
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x1042565a8> : <type 'instance'>
avl_REF2 = set([5, 7, 12, 16]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int0 = 9                                                                # STEP 48
ACTION: int0 = 9 
int0 = 16 : <type 'int'>
=> int0 = 9 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 49
ACTION: avl1.insert(int1) 
int1 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10599c638> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([11]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 50
ACTION: avl1.delete(int0) 
int0 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10599c638> : <type 'instance'>
avl_REF1 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.delete(int3)                                                       # STEP 51
ACTION: avl1.delete(int3) 
int3 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10599c638> : <type 'instance'>
avl_REF1 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl2 = avl.AVLTree()                                                    # STEP 52
ACTION: avl2 = avl.AVLTree() 
avl2 = <avl.AVLTree instance at 0x1042565a8> : <type 'instance'>
avl_REF2 = set([5, 7, 12, 16]) : <type 'set'>
=> avl2 = <avl.AVLTree instance at 0x1059bd710> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 53
ACTION: avl2.insert(int0) 
int0 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1059bd710> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([9]) : <type 'set'>
==================================================
int0 = 13                                                               # STEP 54
ACTION: int0 = 13 
int0 = 9 : <type 'int'>
=> int0 = 13 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 55
ACTION: avl2.delete(int0) 
int0 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1059bd710> : <type 'instance'>
avl_REF2 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.delete(int3)                                                       # STEP 56
ACTION: avl2.delete(int3) 
int3 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1059bd710> : <type 'instance'>
avl_REF2 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int3 = 4                                                                # STEP 57
ACTION: int3 = 4 
int3 = 5 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
int1 = 13                                                               # STEP 58
ACTION: int1 = 13 
int1 = 11 : <type 'int'>
=> int1 = 13 : <type 'int'>
==================================================
result = avl1.find(int2)                                                # STEP 59
ACTION: result = avl1.find(int2) 
int2 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10599c638> : <type 'instance'>
avl_REF1 = set([11]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl1.insert(int0)                                                       # STEP 60
ACTION: avl1.insert(int0) 
int0 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10599c638> : <type 'instance'>
avl_REF1 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([11, 13]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 61
ACTION: avl2.insert(int3) 
int3 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1059bd710> : <type 'instance'>
avl_REF2 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([9, 4]) : <type 'set'>
==================================================
int0 = 14                                                               # STEP 62
ACTION: int0 = 14 
int0 = 13 : <type 'int'>
=> int0 = 14 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 63
ACTION: avl2.delete(int1) 
int1 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1059bd710> : <type 'instance'>
avl_REF2 = set([9, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int1)                                                       # STEP 64
ACTION: avl2.insert(int1) 
int1 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1059bd710> : <type 'instance'>
avl_REF2 = set([9, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([9, 4, 13]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 65
ACTION: avl1.insert(int1) 
int1 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10599c638> : <type 'instance'>
avl_REF1 = set([11, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
int3 = 16                                                               # STEP 66
ACTION: int3 = 16 
int3 = 4 : <type 'int'>
=> int3 = 16 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 67
ACTION: avl2.insert(int2) 
int2 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1059bd710> : <type 'instance'>
avl_REF2 = set([9, 4, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([9, 4, 13, 5]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 68
ACTION: avl2.delete(int1) 
int1 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1059bd710> : <type 'instance'>
avl_REF2 = set([9, 4, 13, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([9, 4, 5]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105965200>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105904290>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 15 steps

SAVING TEST AS failure.742.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 7                                                                 # STEP 0
ACTION: int3 = 7 
int3 = None : <type 'NoneType'>
=> int3 = 7 : <type 'int'>
==================================================
int2 = 15                                                                # STEP 1
ACTION: int2 = 15 
int2 = None : <type 'NoneType'>
=> int2 = 15 : <type 'int'>
==================================================
int1 = 18                                                                # STEP 2
ACTION: int1 = 18 
int1 = None : <type 'NoneType'>
=> int1 = 18 : <type 'int'>
==================================================
int0 = 4                                                                 # STEP 3
ACTION: int0 = 4 
int0 = None : <type 'NoneType'>
=> int0 = 4 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x1059049e0> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int1)                                                        # STEP 5
ACTION: avl2.insert(int1) 
int1 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1059049e0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([18]) : <type 'set'>
==================================================
avl2.insert(int3)                                                        # STEP 6
ACTION: avl2.insert(int3) 
int3 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1059049e0> : <type 'instance'>
avl_REF2 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([18, 7]) : <type 'set'>
==================================================
avl2.insert(int0)                                                        # STEP 7
ACTION: avl2.insert(int0) 
int0 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1059049e0> : <type 'instance'>
avl_REF2 = set([18, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([18, 4, 7]) : <type 'set'>
==================================================
int3 = 5                                                                 # STEP 8
ACTION: int3 = 5 
int3 = 7 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
avl2.delete(int0)                                                        # STEP 9
ACTION: avl2.delete(int0) 
int0 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1059049e0> : <type 'instance'>
avl_REF2 = set([18, 4, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([18, 7]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 10
ACTION: avl2.insert(int1) 
int1 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1059049e0> : <type 'instance'>
avl_REF2 = set([18, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl2.delete(int2)                                                       # STEP 11
ACTION: avl2.delete(int2) 
int2 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1059049e0> : <type 'instance'>
avl_REF2 = set([18, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.insert(int2)                                                       # STEP 12
ACTION: avl2.insert(int2) 
int2 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1059049e0> : <type 'instance'>
avl_REF2 = set([18, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([18, 15, 7]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 13
ACTION: avl2.insert(int0) 
int0 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1059049e0> : <type 'instance'>
avl_REF2 = set([18, 15, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([18, 15, 4, 7]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 14
ACTION: avl2.delete(int2) 
int2 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1059049e0> : <type 'instance'>
avl_REF2 = set([18, 15, 4, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([18, 4, 7]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105930830>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
TEST #4 STEP #89 (0:00:30.036961) Fri Apr 28 07:09:25 2017 [ 161 stmts 214 branches ]
  11 [2:0]
-- < 7 [1:1]
---- < 6 [0:0] L
-- > 15 [1:0]
---- < 13 [0:0] L
---- > 20 [0:0] L
set([6, 7, 11, 13, 15, 20])
  9 [2:0]
-- < 5 [1:0]
---- < 3 [0:0] L
---- > 6 [0:0] L
-- > 18 [1:1]
---- < 16 [0:0] L
set([3, 5, 6, 9, 16, 18])
  9 [2:0]
-- < 5 [1:0]
---- < 3 [0:0] L
---- > 6 [0:0] L
-- > 18 [1:1]
---- < 16 [0:0] L
set([3, 5, 6, 9, 16, 18])
  9 [2:0]
-- < 5 [1:0]
---- < 3 [0:0] L
---- > 6 [0:0] L
-- > 18 [1:1]
---- < 16 [0:0] L
set([3, 5, 6, 9, 16, 18])
  9 [2:0]
-- < 5 [1:0]
---- < 3 [0:0] L
---- > 6 [0:0] L
-- > 18 [1:1]
---- < 16 [0:0] L
set([3, 5, 6, 9, 16, 18])
  11 [2:0]
-- < 3 [1:0]
---- < 1 [0:0] L
---- > 6 [0:0] L
-- > 15 [1:0]
---- < 13 [0:0] L
---- > 20 [0:0] L
set([1, 3, 6, 11, 13, 15, 20])
  11 [2:0]
-- < 3 [1:0]
---- < 1 [0:0] L
---- > 6 [0:0] L
-- > 15 [1:0]
---- < 13 [0:0] L
---- > 20 [0:0] L
set([1, 3, 6, 11, 13, 15, 20])
  11 [2:0]
-- < 3 [1:0]
---- < 1 [0:0] L
---- > 6 [0:0] L
-- > 15 [1:0]
---- < 13 [0:0] L
---- > 20 [0:0] L
set([1, 3, 6, 11, 13, 15, 20])
  11 [2:0]
-- < 3 [1:0]
---- < 1 [0:0] L
---- > 6 [0:0] L
-- > 15 [1:0]
---- < 13 [0:0] L
---- > 20 [0:0] L
set([1, 3, 6, 11, 13, 15, 20])
  11 [3:1]
-- < 3 [2:-1]
---- < 1 [0:0] L
---- > 6 [1:-1]
------ > 7 [0:0] L
-- > 15 [1:0]
---- < 13 [0:0] L
---- > 20 [0:0] L
set([1, 3, 6, 7, 11, 13, 15, 20])
  11 [3:1]
-- < 3 [2:-1]
---- < 1 [0:0] L
---- > 6 [1:-1]
------ > 7 [0:0] L
-- > 15 [1:0]
---- < 13 [0:0] L
---- > 20 [0:0] L
set([1, 3, 6, 7, 11, 13, 15, 20])
  12 [2:0]
-- < 1 [1:-1]
---- > 9 [0:0] L
-- > 17 [1:0]
---- < 15 [0:0] L
---- > 19 [0:0] L
set([1, 9, 12, 15, 17, 19])
  12 [2:0]
-- < 3 [1:-1]
---- > 5 [0:0] L
-- > 17 [1:0]
---- < 15 [0:0] L
---- > 20 [0:0] L
set([3, 5, 12, 15, 17, 20])
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 41
STOPPING TESTING DUE TO TIMEOUT
8.72073294876 PERCENT COVERED
60.2469220161 TOTAL RUNTIME
8 EXECUTED
625 TOTAL TEST OPERATIONS
26.4151277542 TIME SPENT EXECUTING TEST OPERATIONS
0.069993019104 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
26.7099130154 TIME SPENT CHECKING PROPERTIES
53.1250407696 TOTAL TIME SPENT RUNNING SUT
0.00490069389343 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
2 FAILED
0 REPEATS OF FAILURES
2 ACTUAL DISTINCT FAILURES

FAILURE 0
int2 = 2                                                                 # STEP 0
int0 = 12                                                                # STEP 1
int3 = 12                                                                # STEP 2
int1 = 20                                                                # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
avl2.insert(int3)                                                        # STEP 5
result = avl2.inorder()                                                  # STEP 6
avl2.insert(int0)                                                        # STEP 7
avl2.insert(int2)                                                        # STEP 8
avl2.delete(int2)                                                        # STEP 9
int3 = 20                                                               # STEP 10
avl2.insert(int3)                                                       # STEP 11
int3 = 10                                                               # STEP 12
avl2.delete(int3)                                                       # STEP 13
int0 = 6                                                                # STEP 14
result = avl2.inorder()                                                 # STEP 15
avl2.delete(int0)                                                       # STEP 16
int3 = 5                                                                # STEP 17
avl2.delete(int0)                                                       # STEP 18
int2 = 5                                                                # STEP 19
avl2.insert(int3)                                                       # STEP 20
result = avl2.find(int0)                                                # STEP 21
avl2.delete(int1)                                                       # STEP 22
avl2.delete(int0)                                                       # STEP 23
avl2.delete(int2)                                                       # STEP 24
avl2.insert(int2)                                                       # STEP 25
avl2.delete(int0)                                                       # STEP 26
int0 = 7                                                                # STEP 27
avl2.insert(int0)                                                       # STEP 28
int0 = 9                                                                # STEP 29
avl2.insert(int0)                                                       # STEP 30
avl2.insert(int1)                                                       # STEP 31
avl2.delete(int0)                                                       # STEP 32
int0 = 16                                                               # STEP 33
result = avl2.find(int2)                                                # STEP 34
avl2.insert(int1)                                                       # STEP 35
avl2.insert(int0)                                                       # STEP 36
avl2.delete(int1)                                                       # STEP 37
avl2.insert(int0)                                                       # STEP 38
avl2.delete(int1)                                                       # STEP 39
int1 = 11                                                               # STEP 40
avl2.delete(int1)                                                       # STEP 41
avl2.insert(int0)                                                       # STEP 42
avl2.insert(int1)                                                       # STEP 43
avl2.insert(int1)                                                       # STEP 44
avl2.delete(int1)                                                       # STEP 45
avl1 = avl.AVLTree()                                                    # STEP 46
result = avl2.inorder()                                                 # STEP 47
int0 = 9                                                                # STEP 48
avl1.insert(int1)                                                       # STEP 49
avl1.delete(int0)                                                       # STEP 50
avl1.delete(int3)                                                       # STEP 51
avl2 = avl.AVLTree()                                                    # STEP 52
avl2.insert(int0)                                                       # STEP 53
int0 = 13                                                               # STEP 54
avl2.delete(int0)                                                       # STEP 55
avl2.delete(int3)                                                       # STEP 56
int3 = 4                                                                # STEP 57
int1 = 13                                                               # STEP 58
result = avl1.find(int2)                                                # STEP 59
avl1.insert(int0)                                                       # STEP 60
avl2.insert(int3)                                                       # STEP 61
int0 = 14                                                               # STEP 62
avl2.delete(int1)                                                       # STEP 63
avl2.insert(int1)                                                       # STEP 64
avl1.insert(int1)                                                       # STEP 65
int3 = 16                                                               # STEP 66
avl2.insert(int2)                                                       # STEP 67
avl2.delete(int1)                                                       # STEP 68
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105965200>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE 1
int3 = 7                                                                 # STEP 0
int2 = 15                                                                # STEP 1
int1 = 18                                                                # STEP 2
int0 = 4                                                                 # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
avl2.insert(int1)                                                        # STEP 5
avl2.insert(int3)                                                        # STEP 6
avl2.insert(int0)                                                        # STEP 7
int3 = 5                                                                 # STEP 8
avl2.delete(int0)                                                        # STEP 9
avl2.insert(int1)                                                       # STEP 10
avl2.delete(int2)                                                       # STEP 11
avl2.insert(int2)                                                       # STEP 12
avl2.insert(int0)                                                       # STEP 13
avl2.delete(int2)                                                       # STEP 14
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105930830>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
220 BRANCHES COVERED
164 STATEMENTS COVERED

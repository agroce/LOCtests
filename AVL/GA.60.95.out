Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.15042.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
TEST #3 STEP #67 (0:00:30.001279) Sun Apr 30 05:35:17 2017 [ 145 stmts 192 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10200de18>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
Original test has 90 steps

SAVING TEST AS failure.15042.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 12                                                                # STEP 0
ACTION: int1 = 12 
int1 = None : <type 'NoneType'>
=> int1 = 12 : <type 'int'>
==================================================
int0 = 18                                                                # STEP 1
ACTION: int0 = 18 
int0 = None : <type 'NoneType'>
=> int0 = 18 : <type 'int'>
==================================================
int3 = 4                                                                 # STEP 2
ACTION: int3 = 4 
int3 = None : <type 'NoneType'>
=> int3 = 4 : <type 'int'>
==================================================
int2 = 7                                                                 # STEP 3
ACTION: int2 = 7 
int2 = None : <type 'NoneType'>
=> int2 = 7 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x1021d3320> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.delete(int1)                                                        # STEP 5
ACTION: avl2.delete(int1) 
int1 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1021d3320> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int1 = 14                                                                # STEP 6
ACTION: int1 = 14 
int1 = 12 : <type 'int'>
=> int1 = 14 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 7
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x1015712d8> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl2 == avl2                                                             # STEP 8
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x1021d3320> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
result = avl2.find(int0)                                                 # STEP 9
ACTION: result = avl2.find(int0) 
int0 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1021d3320> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
result = avl0.find(int0)                                                # STEP 10
ACTION: result = avl0.find(int0) 
int0 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1015712d8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
avl2.insert(int3)                                                       # STEP 11
ACTION: avl2.insert(int3) 
int3 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1021d3320> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([4]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 12
ACTION: avl2.insert(int0) 
int0 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1021d3320> : <type 'instance'>
avl_REF2 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([18, 4]) : <type 'set'>
==================================================
int0 = 10                                                               # STEP 13
ACTION: int0 = 10 
int0 = 18 : <type 'int'>
=> int0 = 10 : <type 'int'>
==================================================
result = avl2.find(int1)                                                # STEP 14
ACTION: result = avl2.find(int1) 
int1 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1021d3320> : <type 'instance'>
avl_REF2 = set([18, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
result = avl0.find(int2)                                                # STEP 15
ACTION: result = avl0.find(int2) 
int2 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1015712d8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
int1 = 1                                                                # STEP 16
ACTION: int1 = 1 
int1 = 14 : <type 'int'>
=> int1 = 1 : <type 'int'>
==================================================
int3 = 19                                                               # STEP 17
ACTION: int3 = 19 
int3 = 4 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
int2 = 3                                                                # STEP 18
ACTION: int2 = 3 
int2 = 7 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 19
ACTION: avl0.insert(int3) 
int3 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1015712d8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([19]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 20
ACTION: avl0.delete(int2) 
int2 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1015712d8> : <type 'instance'>
avl_REF0 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl1 = avl.AVLTree()                                                    # STEP 21
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x1021f5950> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int2 = 5                                                                # STEP 22
ACTION: int2 = 5 
int2 = 3 : <type 'int'>
=> int2 = 5 : <type 'int'>
==================================================
int3 = 3                                                                # STEP 23
ACTION: int3 = 3 
int3 = 19 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
avl0 == avl1                                                            # STEP 24
ACTION: avl0 == avl1 
avl0 = <avlbug2.AVLTree instance at 0x1015712d8> : <type 'instance'>
avl1 = <avlbug2.AVLTree instance at 0x1021f5950> : <type 'instance'>
avl_REF0 = set([19]) : <type 'set'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF1 
==================================================
result = avl1.find(int2)                                                # STEP 25
ACTION: result = avl1.find(int2) 
int2 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1021f5950> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int2 = 17                                                               # STEP 26
ACTION: int2 = 17 
int2 = 5 : <type 'int'>
=> int2 = 17 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 27
ACTION: avl0.insert(int1) 
int1 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1015712d8> : <type 'instance'>
avl_REF0 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([1, 19]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 28
ACTION: avl0.insert(int3) 
int3 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1015712d8> : <type 'instance'>
avl_REF0 = set([1, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([3, 1, 19]) : <type 'set'>
==================================================
int3 = 10                                                               # STEP 29
ACTION: int3 = 10 
int3 = 3 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
int1 = 7                                                                # STEP 30
ACTION: int1 = 7 
int1 = 1 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
avl0 == avl2                                                            # STEP 31
ACTION: avl0 == avl2 
avl0 = <avlbug2.AVLTree instance at 0x1015712d8> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x1021d3320> : <type 'instance'>
avl_REF0 = set([3, 1, 19]) : <type 'set'>
avl_REF2 = set([18, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
avl1.delete(int1)                                                       # STEP 32
ACTION: avl1.delete(int1) 
int1 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1021f5950> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl2 == avl1                                                            # STEP 33
ACTION: avl2 == avl1 
avl2 = <avlbug2.AVLTree instance at 0x1021d3320> : <type 'instance'>
avl1 = <avlbug2.AVLTree instance at 0x1021f5950> : <type 'instance'>
avl_REF2 = set([18, 4]) : <type 'set'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
avl1.delete(int3)                                                       # STEP 34
ACTION: avl1.delete(int3) 
int3 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1021f5950> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl2 == avl1                                                            # STEP 35
ACTION: avl2 == avl1 
avl2 = <avlbug2.AVLTree instance at 0x1021d3320> : <type 'instance'>
avl1 = <avlbug2.AVLTree instance at 0x1021f5950> : <type 'instance'>
avl_REF2 = set([18, 4]) : <type 'set'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
int1 = 2                                                                # STEP 36
ACTION: int1 = 2 
int1 = 7 : <type 'int'>
=> int1 = 2 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 37
ACTION: avl2.delete(int3) 
int3 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1021d3320> : <type 'instance'>
avl_REF2 = set([18, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int3 = 20                                                               # STEP 38
ACTION: int3 = 20 
int3 = 10 : <type 'int'>
=> int3 = 20 : <type 'int'>
==================================================
avl0 == avl0                                                            # STEP 39
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x1015712d8> : <type 'instance'>
avl_REF0 = set([3, 1, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl0 == avl2                                                            # STEP 40
ACTION: avl0 == avl2 
avl0 = <avlbug2.AVLTree instance at 0x1015712d8> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x1021d3320> : <type 'instance'>
avl_REF0 = set([3, 1, 19]) : <type 'set'>
avl_REF2 = set([18, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
avl2.delete(int1)                                                       # STEP 41
ACTION: avl2.delete(int1) 
int1 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1021d3320> : <type 'instance'>
avl_REF2 = set([18, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int2)                                                       # STEP 42
ACTION: avl2.insert(int2) 
int2 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1021d3320> : <type 'instance'>
avl_REF2 = set([18, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([17, 18, 4]) : <type 'set'>
==================================================
int1 = 14                                                               # STEP 43
ACTION: int1 = 14 
int1 = 2 : <type 'int'>
=> int1 = 14 : <type 'int'>
==================================================
result = avl0.find(int0)                                                # STEP 44
ACTION: result = avl0.find(int0) 
int0 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1015712d8> : <type 'instance'>
avl_REF0 = set([3, 1, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
int0 = 13                                                               # STEP 45
ACTION: int0 = 13 
int0 = 10 : <type 'int'>
=> int0 = 13 : <type 'int'>
==================================================
avl1 == avl2                                                            # STEP 46
ACTION: avl1 == avl2 
avl1 = <avlbug2.AVLTree instance at 0x1021f5950> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x1021d3320> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
avl_REF2 = set([17, 18, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
int2 = 7                                                                # STEP 47
ACTION: int2 = 7 
int2 = 17 : <type 'int'>
=> int2 = 7 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 48
ACTION: avl0.insert(int1) 
int1 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1015712d8> : <type 'instance'>
avl_REF0 = set([3, 1, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([3, 1, 19, 14]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 49
ACTION: avl2.insert(int1) 
int1 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1021d3320> : <type 'instance'>
avl_REF2 = set([17, 18, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([17, 18, 4, 14]) : <type 'set'>
==================================================
result = avl0.find(int1)                                                # STEP 50
ACTION: result = avl0.find(int1) 
int1 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1015712d8> : <type 'instance'>
avl_REF0 = set([3, 1, 19, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl2.insert(int0)                                                       # STEP 51
ACTION: avl2.insert(int0) 
int0 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1021d3320> : <type 'instance'>
avl_REF2 = set([17, 18, 4, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([17, 18, 4, 13, 14]) : <type 'set'>
==================================================
int0 = 4                                                                # STEP 52
ACTION: int0 = 4 
int0 = 13 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 53
ACTION: avl2.insert(int2) 
int2 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1021d3320> : <type 'instance'>
avl_REF2 = set([17, 18, 4, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([4, 7, 13, 14, 17, 18]) : <type 'set'>
==================================================
avl2 == avl0                                                            # STEP 54
ACTION: avl2 == avl0 
avl2 = <avlbug2.AVLTree instance at 0x1021d3320> : <type 'instance'>
avl0 = <avlbug2.AVLTree instance at 0x1015712d8> : <type 'instance'>
avl_REF2 = set([4, 7, 13, 14, 17, 18]) : <type 'set'>
avl_REF0 = set([3, 1, 19, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF0 
==================================================
int1 = 11                                                               # STEP 55
ACTION: int1 = 11 
int1 = 14 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 56
ACTION: avl2.delete(int2) 
int2 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1021d3320> : <type 'instance'>
avl_REF2 = set([4, 7, 13, 14, 17, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([4, 13, 14, 17, 18]) : <type 'set'>
==================================================
int2 = 14                                                               # STEP 57
ACTION: int2 = 14 
int2 = 7 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
avl0 == avl2                                                            # STEP 58
ACTION: avl0 == avl2 
avl0 = <avlbug2.AVLTree instance at 0x1015712d8> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x1021d3320> : <type 'instance'>
avl_REF0 = set([3, 1, 19, 14]) : <type 'set'>
avl_REF2 = set([4, 13, 14, 17, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
result = avl1.find(int3)                                                # STEP 59
ACTION: result = avl1.find(int3) 
int3 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1021f5950> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
int3 = 10                                                               # STEP 60
ACTION: int3 = 10 
int3 = 20 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 61
ACTION: avl1.delete(int0) 
int0 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1021f5950> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl0.insert(int2)                                                       # STEP 62
ACTION: avl0.insert(int2) 
int2 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1015712d8> : <type 'instance'>
avl_REF0 = set([3, 1, 19, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
int0 = 6                                                                # STEP 63
ACTION: int0 = 6 
int0 = 4 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 64
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x1021f5950> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
result = avl1.find(int0)                                                # STEP 65
ACTION: result = avl1.find(int0) 
int0 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1021f5950> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl0.delete(int1)                                                       # STEP 66
ACTION: avl0.delete(int1) 
int1 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1015712d8> : <type 'instance'>
avl_REF0 = set([3, 1, 19, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int1 = 9                                                                # STEP 67
ACTION: int1 = 9 
int1 = 11 : <type 'int'>
=> int1 = 9 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 68
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x1021f5950> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
result = avl1.find(int1)                                                # STEP 69
ACTION: result = avl1.find(int1) 
int1 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1021f5950> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl0.delete(int3)                                                       # STEP 70
ACTION: avl0.delete(int3) 
int3 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1015712d8> : <type 'instance'>
avl_REF0 = set([3, 1, 19, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int3 = 3                                                                # STEP 71
ACTION: int3 = 3 
int3 = 10 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
int0 = 1                                                                # STEP 72
ACTION: int0 = 1 
int0 = 6 : <type 'int'>
=> int0 = 1 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 73
ACTION: avl0.insert(int0) 
int0 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1015712d8> : <type 'instance'>
avl_REF0 = set([3, 1, 19, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
avl1 == avl0                                                            # STEP 74
ACTION: avl1 == avl0 
avl1 = <avlbug2.AVLTree instance at 0x1021f5950> : <type 'instance'>
avl0 = <avlbug2.AVLTree instance at 0x1015712d8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
avl_REF0 = set([3, 1, 19, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
int2 = 15                                                               # STEP 75
ACTION: int2 = 15 
int2 = 14 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
int0 = 4                                                                # STEP 76
ACTION: int0 = 4 
int0 = 1 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
avl0 == avl2                                                            # STEP 77
ACTION: avl0 == avl2 
avl0 = <avlbug2.AVLTree instance at 0x1015712d8> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x1021d3320> : <type 'instance'>
avl_REF0 = set([3, 1, 19, 14]) : <type 'set'>
avl_REF2 = set([4, 13, 14, 17, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
avl2.delete(int1)                                                       # STEP 78
ACTION: avl2.delete(int1) 
int1 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1021d3320> : <type 'instance'>
avl_REF2 = set([4, 13, 14, 17, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl1.insert(int1)                                                       # STEP 79
ACTION: avl1.insert(int1) 
int1 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1021f5950> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([9]) : <type 'set'>
==================================================
avl2 == avl0                                                            # STEP 80
ACTION: avl2 == avl0 
avl2 = <avlbug2.AVLTree instance at 0x1021d3320> : <type 'instance'>
avl0 = <avlbug2.AVLTree instance at 0x1015712d8> : <type 'instance'>
avl_REF2 = set([4, 13, 14, 17, 18]) : <type 'set'>
avl_REF0 = set([3, 1, 19, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF0 
==================================================
int1 = 3                                                                # STEP 81
ACTION: int1 = 3 
int1 = 9 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 82
ACTION: avl0.insert(int3) 
int3 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1015712d8> : <type 'instance'>
avl_REF0 = set([3, 1, 19, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
result = avl2.inorder()                                                 # STEP 83
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x1021d3320> : <type 'instance'>
avl_REF2 = set([4, 13, 14, 17, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl0.find(int1)                                                # STEP 84
ACTION: result = avl0.find(int1) 
int1 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1015712d8> : <type 'instance'>
avl_REF0 = set([3, 1, 19, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl0.insert(int2)                                                       # STEP 85
ACTION: avl0.insert(int2) 
int2 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1015712d8> : <type 'instance'>
avl_REF0 = set([3, 1, 19, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([3, 1, 19, 14, 15]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 86
ACTION: avl0.delete(int1) 
int1 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1015712d8> : <type 'instance'>
avl_REF0 = set([3, 1, 19, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([1, 19, 14, 15]) : <type 'set'>
==================================================
int3 = 15                                                               # STEP 87
ACTION: int3 = 15 
int3 = 3 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
int1 = 9                                                                # STEP 88
ACTION: int1 = 9 
int1 = 3 : <type 'int'>
=> int1 = 9 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 89
ACTION: avl2.delete(int0) 
int0 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1021d3320> : <type 'instance'>
avl_REF2 = set([4, 13, 14, 17, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([13, 14, 17, 18]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1021d55f0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 57
STOPPING TESTING DUE TO TIMEOUT
8.10989738497 PERCENT COVERED
60.292470932 TOTAL RUNTIME
5 EXECUTED
447 TOTAL TEST OPERATIONS
24.9082932472 TIME SPENT EXECUTING TEST OPERATIONS
0.0189290046692 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
25.1162829399 TIME SPENT CHECKING PROPERTIES
50.0245761871 TOTAL TIME SPENT RUNNING SUT
0.00413513183594 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int1 = 12                                                                # STEP 0
int0 = 18                                                                # STEP 1
int3 = 4                                                                 # STEP 2
int2 = 7                                                                 # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
avl2.delete(int1)                                                        # STEP 5
int1 = 14                                                                # STEP 6
avl0 = avl.AVLTree()                                                     # STEP 7
avl2 == avl2                                                             # STEP 8
result = avl2.find(int0)                                                 # STEP 9
result = avl0.find(int0)                                                # STEP 10
avl2.insert(int3)                                                       # STEP 11
avl2.insert(int0)                                                       # STEP 12
int0 = 10                                                               # STEP 13
result = avl2.find(int1)                                                # STEP 14
result = avl0.find(int2)                                                # STEP 15
int1 = 1                                                                # STEP 16
int3 = 19                                                               # STEP 17
int2 = 3                                                                # STEP 18
avl0.insert(int3)                                                       # STEP 19
avl0.delete(int2)                                                       # STEP 20
avl1 = avl.AVLTree()                                                    # STEP 21
int2 = 5                                                                # STEP 22
int3 = 3                                                                # STEP 23
avl0 == avl1                                                            # STEP 24
result = avl1.find(int2)                                                # STEP 25
int2 = 17                                                               # STEP 26
avl0.insert(int1)                                                       # STEP 27
avl0.insert(int3)                                                       # STEP 28
int3 = 10                                                               # STEP 29
int1 = 7                                                                # STEP 30
avl0 == avl2                                                            # STEP 31
avl1.delete(int1)                                                       # STEP 32
avl2 == avl1                                                            # STEP 33
avl1.delete(int3)                                                       # STEP 34
avl2 == avl1                                                            # STEP 35
int1 = 2                                                                # STEP 36
avl2.delete(int3)                                                       # STEP 37
int3 = 20                                                               # STEP 38
avl0 == avl0                                                            # STEP 39
avl0 == avl2                                                            # STEP 40
avl2.delete(int1)                                                       # STEP 41
avl2.insert(int2)                                                       # STEP 42
int1 = 14                                                               # STEP 43
result = avl0.find(int0)                                                # STEP 44
int0 = 13                                                               # STEP 45
avl1 == avl2                                                            # STEP 46
int2 = 7                                                                # STEP 47
avl0.insert(int1)                                                       # STEP 48
avl2.insert(int1)                                                       # STEP 49
result = avl0.find(int1)                                                # STEP 50
avl2.insert(int0)                                                       # STEP 51
int0 = 4                                                                # STEP 52
avl2.insert(int2)                                                       # STEP 53
avl2 == avl0                                                            # STEP 54
int1 = 11                                                               # STEP 55
avl2.delete(int2)                                                       # STEP 56
int2 = 14                                                               # STEP 57
avl0 == avl2                                                            # STEP 58
result = avl1.find(int3)                                                # STEP 59
int3 = 10                                                               # STEP 60
avl1.delete(int0)                                                       # STEP 61
avl0.insert(int2)                                                       # STEP 62
int0 = 6                                                                # STEP 63
avl1 == avl1                                                            # STEP 64
result = avl1.find(int0)                                                # STEP 65
avl0.delete(int1)                                                       # STEP 66
int1 = 9                                                                # STEP 67
avl1 == avl1                                                            # STEP 68
result = avl1.find(int1)                                                # STEP 69
avl0.delete(int3)                                                       # STEP 70
int3 = 3                                                                # STEP 71
int0 = 1                                                                # STEP 72
avl0.insert(int0)                                                       # STEP 73
avl1 == avl0                                                            # STEP 74
int2 = 15                                                               # STEP 75
int0 = 4                                                                # STEP 76
avl0 == avl2                                                            # STEP 77
avl2.delete(int1)                                                       # STEP 78
avl1.insert(int1)                                                       # STEP 79
avl2 == avl0                                                            # STEP 80
int1 = 3                                                                # STEP 81
avl0.insert(int3)                                                       # STEP 82
result = avl2.inorder()                                                 # STEP 83
result = avl0.find(int1)                                                # STEP 84
avl0.insert(int2)                                                       # STEP 85
avl0.delete(int1)                                                       # STEP 86
int3 = 15                                                               # STEP 87
int1 = 9                                                                # STEP 88
avl2.delete(int0)                                                       # STEP 89
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1021d55f0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
202 BRANCHES COVERED
151 STATEMENTS COVERED

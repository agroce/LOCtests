Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=True, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.39889.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  15 [2:0]
-- < 6 [1:0]
---- < 2 [0:0] L
---- > 8 [0:0] L
-- > 17 [1:-1]
---- > 19 [0:0] L
set([2, 6, 8, 15, 17, 19])
  15 [2:0]
-- < 6 [1:0]
---- < 2 [0:0] L
---- > 8 [0:0] L
-- > 17 [1:-1]
---- > 19 [0:0] L
set([2, 6, 8, 15, 17, 19])
  15 [2:0]
-- < 6 [1:0]
---- < 2 [0:0] L
---- > 8 [0:0] L
-- > 17 [1:-1]
---- > 19 [0:0] L
set([2, 6, 8, 15, 17, 19])
  15 [2:0]
-- < 6 [1:0]
---- < 2 [0:0] L
---- > 8 [0:0] L
-- > 19 [1:0]
---- < 17 [0:0] L
---- > 20 [0:0] L
set([2, 6, 8, 15, 17, 19, 20])
  15 [2:0]
-- < 6 [1:0]
---- < 2 [0:0] L
---- > 8 [0:0] L
-- > 19 [1:0]
---- < 17 [0:0] L
---- > 20 [0:0] L
set([2, 6, 8, 15, 17, 19, 20])
  15 [2:0]
-- < 6 [1:0]
---- < 2 [0:0] L
---- > 8 [0:0] L
-- > 19 [1:0]
---- < 17 [0:0] L
---- > 20 [0:0] L
set([2, 6, 8, 15, 17, 19, 20])
  15 [2:0]
-- < 6 [1:0]
---- < 2 [0:0] L
---- > 8 [0:0] L
-- > 19 [1:0]
---- < 17 [0:0] L
---- > 20 [0:0] L
set([2, 6, 8, 15, 17, 19, 20])
  7 [2:0]
-- < 5 [1:1]
---- < 4 [0:0] L
-- > 19 [1:0]
---- < 12 [0:0] L
---- > 20 [0:0] L
set([4, 5, 7, 12, 19, 20])
  12 [2:0]
-- < 4 [1:0]
---- < 2 [0:0] L
---- > 5 [0:0] L
-- > 19 [1:-1]
---- > 20 [0:0] L
set([2, 4, 5, 12, 19, 20])
  12 [2:0]
-- < 4 [1:0]
---- < 2 [0:0] L
---- > 5 [0:0] L
-- > 19 [1:-1]
---- > 20 [0:0] L
set([2, 4, 5, 12, 19, 20])
  7 [2:0]
-- < 5 [1:1]
---- < 4 [0:0] L
-- > 19 [1:0]
---- < 12 [0:0] L
---- > 20 [0:0] L
set([4, 5, 7, 12, 19, 20])
  7 [2:0]
-- < 5 [1:1]
---- < 4 [0:0] L
-- > 19 [1:0]
---- < 12 [0:0] L
---- > 20 [0:0] L
set([4, 5, 7, 12, 19, 20])
  12 [2:0]
-- < 4 [1:0]
---- < 2 [0:0] L
---- > 5 [0:0] L
-- > 19 [1:-1]
---- > 20 [0:0] L
set([2, 4, 5, 12, 19, 20])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1058463b0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
Original test has 38 steps

SAVING TEST AS failure.39889.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 9                                                                 # STEP 0
ACTION: int0 = 9 
int0 = None : <type 'NoneType'>
=> int0 = 9 : <type 'int'>
==================================================
int2 = 15                                                                # STEP 1
ACTION: int2 = 15 
int2 = None : <type 'NoneType'>
=> int2 = 15 : <type 'int'>
==================================================
int3 = 18                                                                # STEP 2
ACTION: int3 = 18 
int3 = None : <type 'NoneType'>
=> int3 = 18 : <type 'int'>
==================================================
int1 = 4                                                                 # STEP 3
ACTION: int1 = 4 
int1 = None : <type 'NoneType'>
=> int1 = 4 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x1048a0998> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.delete(int2)                                                        # STEP 5
ACTION: avl2.delete(int2) 
int2 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1048a0998> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.delete(int0)                                                        # STEP 6
ACTION: avl2.delete(int0) 
int0 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1048a0998> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.delete(int2)                                                        # STEP 7
ACTION: avl2.delete(int2) 
int2 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1048a0998> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int2 = 17                                                                # STEP 8
ACTION: int2 = 17 
int2 = 15 : <type 'int'>
=> int2 = 17 : <type 'int'>
==================================================
avl2.delete(int2)                                                        # STEP 9
ACTION: avl2.delete(int2) 
int2 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1048a0998> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
result = avl2.find(int3)                                                # STEP 10
ACTION: result = avl2.find(int3) 
int3 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1048a0998> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
int0 = 2                                                                # STEP 11
ACTION: int0 = 2 
int0 = 9 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
result = avl2.find(int2)                                                # STEP 12
ACTION: result = avl2.find(int2) 
int2 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1048a0998> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl2.insert(int1)                                                       # STEP 13
ACTION: avl2.insert(int1) 
int1 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1048a0998> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([4]) : <type 'set'>
==================================================
int3 = 19                                                               # STEP 14
ACTION: int3 = 19 
int3 = 18 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 15
ACTION: avl2.delete(int0) 
int0 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1048a0998> : <type 'instance'>
avl_REF2 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.insert(int0)                                                       # STEP 16
ACTION: avl2.insert(int0) 
int0 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1048a0998> : <type 'instance'>
avl_REF2 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([2, 4]) : <type 'set'>
==================================================
int1 = 4                                                                # STEP 17
ACTION: int1 = 4 
int1 = 4 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 18
ACTION: avl2.insert(int2) 
int2 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1048a0998> : <type 'instance'>
avl_REF2 = set([2, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([17, 2, 4]) : <type 'set'>
==================================================
int0 = 14                                                               # STEP 19
ACTION: int0 = 14 
int0 = 2 : <type 'int'>
=> int0 = 14 : <type 'int'>
==================================================
result = avl2.find(int2)                                                # STEP 20
ACTION: result = avl2.find(int2) 
int2 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1048a0998> : <type 'instance'>
avl_REF2 = set([17, 2, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl2.insert(int1)                                                       # STEP 21
ACTION: avl2.insert(int1) 
int1 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1048a0998> : <type 'instance'>
avl_REF2 = set([17, 2, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl2.insert(int1)                                                       # STEP 22
ACTION: avl2.insert(int1) 
int1 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1048a0998> : <type 'instance'>
avl_REF2 = set([17, 2, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl2.delete(int0)                                                       # STEP 23
ACTION: avl2.delete(int0) 
int0 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1048a0998> : <type 'instance'>
avl_REF2 = set([17, 2, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.insert(int2)                                                       # STEP 24
ACTION: avl2.insert(int2) 
int2 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1048a0998> : <type 'instance'>
avl_REF2 = set([17, 2, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl2.insert(int0)                                                       # STEP 25
ACTION: avl2.insert(int0) 
int0 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1048a0998> : <type 'instance'>
avl_REF2 = set([17, 2, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([17, 2, 4, 14]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 26
ACTION: avl2.insert(int3) 
int3 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1048a0998> : <type 'instance'>
avl_REF2 = set([17, 2, 4, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([17, 2, 19, 4, 14]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 27
ACTION: avl2.delete(int1) 
int1 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1048a0998> : <type 'instance'>
avl_REF2 = set([17, 2, 19, 4, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([17, 2, 19, 14]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 28
ACTION: avl2.insert(int3) 
int3 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1048a0998> : <type 'instance'>
avl_REF2 = set([17, 2, 19, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
avl2.insert(int3)                                                       # STEP 29
ACTION: avl2.insert(int3) 
int3 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1048a0998> : <type 'instance'>
avl_REF2 = set([17, 2, 19, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
avl2.insert(int1)                                                       # STEP 30
ACTION: avl2.insert(int1) 
int1 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1048a0998> : <type 'instance'>
avl_REF2 = set([17, 2, 19, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([17, 2, 19, 4, 14]) : <type 'set'>
==================================================
result = avl2.find(int0)                                                # STEP 31
ACTION: result = avl2.find(int0) 
int0 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1048a0998> : <type 'instance'>
avl_REF2 = set([17, 2, 19, 4, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl2.insert(int2)                                                       # STEP 32
ACTION: avl2.insert(int2) 
int2 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1048a0998> : <type 'instance'>
avl_REF2 = set([17, 2, 19, 4, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl2.delete(int3)                                                       # STEP 33
ACTION: avl2.delete(int3) 
int3 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1048a0998> : <type 'instance'>
avl_REF2 = set([17, 2, 19, 4, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([17, 2, 4, 14]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 34
ACTION: avl2.delete(int3) 
int3 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1048a0998> : <type 'instance'>
avl_REF2 = set([17, 2, 4, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.insert(int2)                                                       # STEP 35
ACTION: avl2.insert(int2) 
int2 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1048a0998> : <type 'instance'>
avl_REF2 = set([17, 2, 4, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
int2 = 1                                                                # STEP 36
ACTION: int2 = 1 
int2 = 17 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 37
ACTION: avl2.delete(int0) 
int0 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1048a0998> : <type 'instance'>
avl_REF2 = set([17, 2, 4, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([17, 2, 4]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104c5e248>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105988fc8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
Original test has 30 steps

SAVING TEST AS failure.39889.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
avl0 = avl.AVLTree()                                                     # STEP 0
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x105a98dd0> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int3 = 6                                                                 # STEP 1
ACTION: int3 = 6 
int3 = None : <type 'NoneType'>
=> int3 = 6 : <type 'int'>
==================================================
avl0.insert(int3)                                                        # STEP 2
ACTION: avl0.insert(int3) 
int3 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x105a98dd0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([6]) : <type 'set'>
==================================================
avl0.delete(int3)                                                        # STEP 3
ACTION: avl0.delete(int3) 
int3 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x105a98dd0> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.insert(int3)                                                        # STEP 4
ACTION: avl0.insert(int3) 
int3 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x105a98dd0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([6]) : <type 'set'>
==================================================
avl0.delete(int3)                                                        # STEP 5
ACTION: avl0.delete(int3) 
int3 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x105a98dd0> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int3 = 9                                                                 # STEP 6
ACTION: int3 = 9 
int3 = 6 : <type 'int'>
=> int3 = 9 : <type 'int'>
==================================================
avl0.delete(int3)                                                        # STEP 7
ACTION: avl0.delete(int3) 
int3 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x105a98dd0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int1 = 2                                                                 # STEP 8
ACTION: int1 = 2 
int1 = None : <type 'NoneType'>
=> int1 = 2 : <type 'int'>
==================================================
avl0.insert(int1)                                                        # STEP 9
ACTION: avl0.insert(int1) 
int1 = 2 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x105a98dd0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([2]) : <type 'set'>
==================================================
int2 = 11                                                               # STEP 10
ACTION: int2 = 11 
int2 = None : <type 'NoneType'>
=> int2 = 11 : <type 'int'>
==================================================
int3 = 6                                                                # STEP 11
ACTION: int3 = 6 
int3 = 9 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 12
ACTION: avl0.delete(int3) 
int3 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x105a98dd0> : <type 'instance'>
avl_REF0 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.insert(int1)                                                       # STEP 13
ACTION: avl0.insert(int1) 
int1 = 2 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x105a98dd0> : <type 'instance'>
avl_REF0 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
int1 = 20                                                               # STEP 14
ACTION: int1 = 20 
int1 = 2 : <type 'int'>
=> int1 = 20 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 15
ACTION: avl0.insert(int1) 
int1 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x105a98dd0> : <type 'instance'>
avl_REF0 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([2, 20]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 16
ACTION: avl0.insert(int3) 
int3 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x105a98dd0> : <type 'instance'>
avl_REF0 = set([2, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([2, 20, 6]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 17
ACTION: avl0.insert(int2) 
int2 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x105a98dd0> : <type 'instance'>
avl_REF0 = set([2, 20, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([2, 11, 20, 6]) : <type 'set'>
==================================================
int0 = 12                                                               # STEP 18
ACTION: int0 = 12 
int0 = None : <type 'NoneType'>
=> int0 = 12 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 19
ACTION: avl0.insert(int3) 
int3 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x105a98dd0> : <type 'instance'>
avl_REF0 = set([2, 11, 20, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
int1 = 3                                                                # STEP 20
ACTION: int1 = 3 
int1 = 20 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 21
ACTION: avl0.delete(int2) 
int2 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x105a98dd0> : <type 'instance'>
avl_REF0 = set([2, 11, 20, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([2, 20, 6]) : <type 'set'>
==================================================
int2 = 19                                                               # STEP 22
ACTION: int2 = 19 
int2 = 11 : <type 'int'>
=> int2 = 19 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 23
ACTION: avl0.insert(int1) 
int1 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x105a98dd0> : <type 'instance'>
avl_REF0 = set([2, 20, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([2, 3, 20, 6]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 24
ACTION: avl0.delete(int2) 
int2 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x105a98dd0> : <type 'instance'>
avl_REF0 = set([2, 3, 20, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.delete(int2)                                                       # STEP 25
ACTION: avl0.delete(int2) 
int2 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x105a98dd0> : <type 'instance'>
avl_REF0 = set([2, 3, 20, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int2 = 20                                                               # STEP 26
ACTION: int2 = 20 
int2 = 19 : <type 'int'>
=> int2 = 20 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 27
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x104d74488> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 28
ACTION: avl1.delete(int1) 
int1 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x104d74488> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl0.delete(int3)                                                       # STEP 29
ACTION: avl0.delete(int3) 
int3 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x105a98dd0> : <type 'instance'>
avl_REF0 = set([2, 3, 20, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([2, 3, 20]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104d74ab8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
TEST #5 STEP #0 (0:00:31.739723) Mon May  1 01:56:32 2017 [ 146 stmts 194 branches ]
  13 [2:0]
-- < 4 [1:0]
---- < 2 [0:0] L
---- > 12 [0:0] L
-- > 17 [1:0]
---- < 15 [0:0] L
---- > 20 [0:0] L
set([2, 4, 12, 13, 15, 17, 20])
  13 [3:-1]
-- < 4 [1:0]
---- < 2 [0:0] L
---- > 12 [0:0] L
-- > 17 [2:-1]
---- < 15 [0:0] L
---- > 20 [1:1]
------ < 18 [0:0] L
set([2, 4, 12, 13, 15, 17, 18, 20])
  13 [3:-1]
-- < 4 [1:0]
---- < 2 [0:0] L
---- > 12 [0:0] L
-- > 17 [2:-1]
---- < 15 [0:0] L
---- > 20 [1:1]
------ < 18 [0:0] L
set([2, 4, 12, 13, 15, 17, 18, 20])
  13 [3:-1]
-- < 4 [1:0]
---- < 2 [0:0] L
---- > 12 [0:0] L
-- > 17 [2:-1]
---- < 15 [0:0] L
---- > 20 [1:1]
------ < 18 [0:0] L
set([2, 4, 12, 13, 15, 17, 18, 20])
  13 [3:0]
-- < 4 [2:-1]
---- < 2 [0:0] L
---- > 11 [1:0]
------ < 9 [0:0] L
------ > 12 [0:0] L
-- > 17 [2:-1]
---- < 15 [0:0] L
---- > 20 [1:1]
------ < 18 [0:0] L
set([2, 4, 9, 11, 12, 13, 15, 17, 18, 20])
  13 [3:0]
-- < 9 [2:0]
---- < 4 [1:1]
------ < 2 [0:0] L
---- > 11 [1:0]
------ < 10 [0:0] L
------ > 12 [0:0] L
-- > 17 [2:-1]
---- < 15 [0:0] L
---- > 20 [1:1]
------ < 18 [0:0] L
set([2, 4, 9, 10, 11, 12, 13, 15, 17, 18, 20])
  13 [3:0]
-- < 9 [2:0]
---- < 4 [1:1]
------ < 2 [0:0] L
---- > 11 [1:0]
------ < 10 [0:0] L
------ > 12 [0:0] L
-- > 17 [2:-1]
---- < 15 [0:0] L
---- > 20 [1:1]
------ < 18 [0:0] L
set([2, 4, 9, 10, 11, 12, 13, 15, 17, 18, 20])
  13 [3:0]
-- < 9 [2:0]
---- < 4 [1:1]
------ < 2 [0:0] L
---- > 11 [1:0]
------ < 10 [0:0] L
------ > 12 [0:0] L
-- > 17 [2:-1]
---- < 15 [0:0] L
---- > 20 [1:1]
------ < 18 [0:0] L
set([2, 4, 9, 10, 11, 12, 13, 15, 17, 18, 20])
  13 [3:0]
-- < 9 [2:0]
---- < 4 [1:0]
------ < 2 [0:0] L
------ > 6 [0:0] L
---- > 11 [1:0]
------ < 10 [0:0] L
------ > 12 [0:0] L
-- > 17 [2:-1]
---- < 15 [0:0] L
---- > 20 [1:1]
------ < 18 [0:0] L
set([2, 4, 6, 9, 10, 11, 12, 13, 15, 17, 18, 20])
  13 [3:0]
-- < 9 [2:0]
---- < 4 [1:0]
------ < 2 [0:0] L
------ > 6 [0:0] L
---- > 11 [1:0]
------ < 10 [0:0] L
------ > 12 [0:0] L
-- > 17 [2:-1]
---- < 15 [0:0] L
---- > 20 [1:1]
------ < 18 [0:0] L
set([2, 4, 6, 9, 10, 11, 12, 13, 15, 17, 18, 20])
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 7
STOPPING TESTING DUE TO TIMEOUT
8.62068965517 PERCENT COVERED
60.2116751671 TOTAL RUNTIME
8 EXECUTED
575 TOTAL TEST OPERATIONS
26.6869800091 TIME SPENT EXECUTING TEST OPERATIONS
0.0797955989838 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
26.8328359127 TIME SPENT CHECKING PROPERTIES
53.5198159218 TOTAL TIME SPENT RUNNING SUT
0.00482416152954 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
2 FAILED
0 REPEATS OF FAILURES
2 ACTUAL DISTINCT FAILURES

FAILURE 0
int0 = 9                                                                 # STEP 0
int2 = 15                                                                # STEP 1
int3 = 18                                                                # STEP 2
int1 = 4                                                                 # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
avl2.delete(int2)                                                        # STEP 5
avl2.delete(int0)                                                        # STEP 6
avl2.delete(int2)                                                        # STEP 7
int2 = 17                                                                # STEP 8
avl2.delete(int2)                                                        # STEP 9
result = avl2.find(int3)                                                # STEP 10
int0 = 2                                                                # STEP 11
result = avl2.find(int2)                                                # STEP 12
avl2.insert(int1)                                                       # STEP 13
int3 = 19                                                               # STEP 14
avl2.delete(int0)                                                       # STEP 15
avl2.insert(int0)                                                       # STEP 16
int1 = 4                                                                # STEP 17
avl2.insert(int2)                                                       # STEP 18
int0 = 14                                                               # STEP 19
result = avl2.find(int2)                                                # STEP 20
avl2.insert(int1)                                                       # STEP 21
avl2.insert(int1)                                                       # STEP 22
avl2.delete(int0)                                                       # STEP 23
avl2.insert(int2)                                                       # STEP 24
avl2.insert(int0)                                                       # STEP 25
avl2.insert(int3)                                                       # STEP 26
avl2.delete(int1)                                                       # STEP 27
avl2.insert(int3)                                                       # STEP 28
avl2.insert(int3)                                                       # STEP 29
avl2.insert(int1)                                                       # STEP 30
result = avl2.find(int0)                                                # STEP 31
avl2.insert(int2)                                                       # STEP 32
avl2.delete(int3)                                                       # STEP 33
avl2.delete(int3)                                                       # STEP 34
avl2.insert(int2)                                                       # STEP 35
int2 = 1                                                                # STEP 36
avl2.delete(int0)                                                       # STEP 37
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104c5e248>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE 1
avl0 = avl.AVLTree()                                                     # STEP 0
int3 = 6                                                                 # STEP 1
avl0.insert(int3)                                                        # STEP 2
avl0.delete(int3)                                                        # STEP 3
avl0.insert(int3)                                                        # STEP 4
avl0.delete(int3)                                                        # STEP 5
int3 = 9                                                                 # STEP 6
avl0.delete(int3)                                                        # STEP 7
int1 = 2                                                                 # STEP 8
avl0.insert(int1)                                                        # STEP 9
int2 = 11                                                               # STEP 10
int3 = 6                                                                # STEP 11
avl0.delete(int3)                                                       # STEP 12
avl0.insert(int1)                                                       # STEP 13
int1 = 20                                                               # STEP 14
avl0.insert(int1)                                                       # STEP 15
avl0.insert(int3)                                                       # STEP 16
avl0.insert(int2)                                                       # STEP 17
int0 = 12                                                               # STEP 18
avl0.insert(int3)                                                       # STEP 19
int1 = 3                                                                # STEP 20
avl0.delete(int2)                                                       # STEP 21
int2 = 19                                                               # STEP 22
avl0.insert(int1)                                                       # STEP 23
avl0.delete(int2)                                                       # STEP 24
avl0.delete(int2)                                                       # STEP 25
int2 = 20                                                               # STEP 26
avl1 = avl.AVLTree()                                                    # STEP 27
avl1.delete(int1)                                                       # STEP 28
avl0.delete(int3)                                                       # STEP 29
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104d74ab8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
208 BRANCHES COVERED
158 STATEMENTS COVERED

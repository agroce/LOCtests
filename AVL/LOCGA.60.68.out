Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.62399.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  16 [3:1]
-- < 3 [2:-1]
---- < 1 [0:0] L
---- > 6 [1:1]
------ < 4 [0:0] L
-- > 18 [1:-1]
---- > 19 [0:0] L
set([1, 3, 4, 6, 16, 18, 19])
  16 [3:1]
-- < 3 [2:-1]
---- < 1 [0:0] L
---- > 6 [1:1]
------ < 4 [0:0] L
-- > 18 [1:0]
---- < 17 [0:0] L
---- > 19 [0:0] L
set([1, 3, 4, 6, 16, 17, 18, 19])
  16 [3:1]
-- < 3 [2:-1]
---- < 1 [0:0] L
---- > 6 [1:1]
------ < 4 [0:0] L
-- > 18 [1:0]
---- < 17 [0:0] L
---- > 19 [0:0] L
set([1, 3, 4, 6, 16, 17, 18, 19])
  16 [3:1]
-- < 3 [2:-1]
---- < 1 [0:0] L
---- > 6 [1:1]
------ < 4 [0:0] L
-- > 18 [1:-1]
---- > 19 [0:0] L
set([1, 3, 4, 6, 16, 18, 19])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x101d54a70>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
Original test has 80 steps

SAVING TEST AS failure.62399.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
avl0 = avl.AVLTree()                                                     # STEP 0
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x102404e18> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
result = avl0.inorder()                                                  # STEP 1
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x102404e18> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int2 = 9                                                                 # STEP 2
ACTION: int2 = 9 
int2 = None : <type 'NoneType'>
=> int2 = 9 : <type 'int'>
==================================================
int0 = 11                                                                # STEP 3
ACTION: int0 = 11 
int0 = None : <type 'NoneType'>
=> int0 = 11 : <type 'int'>
==================================================
result = avl0.inorder()                                                  # STEP 4
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x102404e18> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.delete(int0)                                                        # STEP 5
ACTION: avl0.delete(int0) 
int0 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102404e18> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.insert(int2)                                                        # STEP 6
ACTION: avl0.insert(int2) 
int2 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102404e18> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([9]) : <type 'set'>
==================================================
int0 = 8                                                                 # STEP 7
ACTION: int0 = 8 
int0 = 11 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
avl0.delete(int2)                                                        # STEP 8
ACTION: avl0.delete(int2) 
int2 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102404e18> : <type 'instance'>
avl_REF0 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.insert(int2)                                                        # STEP 9
ACTION: avl0.insert(int2) 
int2 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102404e18> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([9]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 10
ACTION: avl0.delete(int2) 
int2 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102404e18> : <type 'instance'>
avl_REF0 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int1 = 9                                                                # STEP 11
ACTION: int1 = 9 
int1 = None : <type 'NoneType'>
=> int1 = 9 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 12
ACTION: avl0.delete(int2) 
int2 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102404e18> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.delete(int0)                                                       # STEP 13
ACTION: avl0.delete(int0) 
int0 = 8 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102404e18> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.insert(int2)                                                       # STEP 14
ACTION: avl0.insert(int2) 
int2 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102404e18> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([9]) : <type 'set'>
==================================================
result = avl0.find(int2)                                                # STEP 15
ACTION: result = avl0.find(int2) 
int2 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102404e18> : <type 'instance'>
avl_REF0 = set([9]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl0.delete(int1)                                                       # STEP 16
ACTION: avl0.delete(int1) 
int1 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102404e18> : <type 'instance'>
avl_REF0 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 17
ACTION: avl0.delete(int2) 
int2 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102404e18> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
result = avl0.find(int1)                                                # STEP 18
ACTION: result = avl0.find(int1) 
int1 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102404e18> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl0.insert(int0)                                                       # STEP 19
ACTION: avl0.insert(int0) 
int0 = 8 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102404e18> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([8]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 20
ACTION: avl0.delete(int1) 
int1 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102404e18> : <type 'instance'>
avl_REF0 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.insert(int2)                                                       # STEP 21
ACTION: avl0.insert(int2) 
int2 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102404e18> : <type 'instance'>
avl_REF0 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([8, 9]) : <type 'set'>
==================================================
int3 = 14                                                               # STEP 22
ACTION: int3 = 14 
int3 = None : <type 'NoneType'>
=> int3 = 14 : <type 'int'>
==================================================
int1 = 20                                                               # STEP 23
ACTION: int1 = 20 
int1 = 9 : <type 'int'>
=> int1 = 20 : <type 'int'>
==================================================
result = avl0.find(int2)                                                # STEP 24
ACTION: result = avl0.find(int2) 
int2 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102404e18> : <type 'instance'>
avl_REF0 = set([8, 9]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
int0 = 20                                                               # STEP 25
ACTION: int0 = 20 
int0 = 8 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 26
ACTION: avl0.insert(int3) 
int3 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102404e18> : <type 'instance'>
avl_REF0 = set([8, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([8, 9, 14]) : <type 'set'>
==================================================
result = avl0.find(int1)                                                # STEP 27
ACTION: result = avl0.find(int1) 
int1 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102404e18> : <type 'instance'>
avl_REF0 = set([8, 9, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
int3 = 18                                                               # STEP 28
ACTION: int3 = 18 
int3 = 14 : <type 'int'>
=> int3 = 18 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 29
ACTION: avl0.delete(int0) 
int0 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102404e18> : <type 'instance'>
avl_REF0 = set([8, 9, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.insert(int2)                                                       # STEP 30
ACTION: avl0.insert(int2) 
int2 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102404e18> : <type 'instance'>
avl_REF0 = set([8, 9, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl0.delete(int3)                                                       # STEP 31
ACTION: avl0.delete(int3) 
int3 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102404e18> : <type 'instance'>
avl_REF0 = set([8, 9, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.delete(int3)                                                       # STEP 32
ACTION: avl0.delete(int3) 
int3 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102404e18> : <type 'instance'>
avl_REF0 = set([8, 9, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl1 = avl.AVLTree()                                                    # STEP 33
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x1023ba5f0> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 34
ACTION: avl0.insert(int1) 
int1 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102404e18> : <type 'instance'>
avl_REF0 = set([8, 9, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([8, 9, 20, 14]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 35
ACTION: avl0.insert(int3) 
int3 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102404e18> : <type 'instance'>
avl_REF0 = set([8, 9, 20, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([8, 9, 18, 20, 14]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 36
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x102404e18> : <type 'instance'>
avl_REF0 = set([8, 9, 18, 20, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl1.delete(int2)                                                       # STEP 37
ACTION: avl1.delete(int2) 
int2 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1023ba5f0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1 == avl1                                                            # STEP 38
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x1023ba5f0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.insert(int3)                                                       # STEP 39
ACTION: avl1.insert(int3) 
int3 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1023ba5f0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([18]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 40
ACTION: avl0.delete(int1) 
int1 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102404e18> : <type 'instance'>
avl_REF0 = set([8, 9, 18, 20, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([8, 9, 18, 14]) : <type 'set'>
==================================================
int2 = 14                                                               # STEP 41
ACTION: int2 = 14 
int2 = 9 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 42
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x1023ba5f0> : <type 'instance'>
avl_REF1 = set([18]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int0)                                                       # STEP 43
ACTION: avl1.insert(int0) 
int0 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1023ba5f0> : <type 'instance'>
avl_REF1 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([18, 20]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 44
ACTION: avl1.delete(int0) 
int0 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1023ba5f0> : <type 'instance'>
avl_REF1 = set([18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([18]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 45
ACTION: avl0.insert(int3) 
int3 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102404e18> : <type 'instance'>
avl_REF0 = set([8, 9, 18, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
avl0.insert(int0)                                                       # STEP 46
ACTION: avl0.insert(int0) 
int0 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102404e18> : <type 'instance'>
avl_REF0 = set([8, 9, 18, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([8, 9, 18, 20, 14]) : <type 'set'>
==================================================
int1 = 1                                                                # STEP 47
ACTION: int1 = 1 
int1 = 20 : <type 'int'>
=> int1 = 1 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 48
ACTION: avl0.delete(int3) 
int3 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102404e18> : <type 'instance'>
avl_REF0 = set([8, 9, 18, 20, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([8, 9, 20, 14]) : <type 'set'>
==================================================
result = avl0.find(int1)                                                # STEP 49
ACTION: result = avl0.find(int1) 
int1 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102404e18> : <type 'instance'>
avl_REF0 = set([8, 9, 20, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
result = avl0.inorder()                                                 # STEP 50
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x102404e18> : <type 'instance'>
avl_REF0 = set([8, 9, 20, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
result = avl1.inorder()                                                 # STEP 51
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x1023ba5f0> : <type 'instance'>
avl_REF1 = set([18]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl0.insert(int1)                                                       # STEP 52
ACTION: avl0.insert(int1) 
int1 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102404e18> : <type 'instance'>
avl_REF0 = set([8, 9, 20, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([1, 8, 9, 14, 20]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 53
ACTION: avl1.insert(int3) 
int3 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1023ba5f0> : <type 'instance'>
avl_REF1 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
avl0.insert(int1)                                                       # STEP 54
ACTION: avl0.insert(int1) 
int1 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102404e18> : <type 'instance'>
avl_REF0 = set([1, 8, 9, 14, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl0.insert(int0)                                                       # STEP 55
ACTION: avl0.insert(int0) 
int0 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102404e18> : <type 'instance'>
avl_REF0 = set([1, 8, 9, 14, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
avl1 == avl0                                                            # STEP 56
ACTION: avl1 == avl0 
avl1 = <avlbug2.AVLTree instance at 0x1023ba5f0> : <type 'instance'>
avl0 = <avlbug2.AVLTree instance at 0x102404e18> : <type 'instance'>
avl_REF1 = set([18]) : <type 'set'>
avl_REF0 = set([1, 8, 9, 14, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
avl0.insert(int0)                                                       # STEP 57
ACTION: avl0.insert(int0) 
int0 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102404e18> : <type 'instance'>
avl_REF0 = set([1, 8, 9, 14, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
result = avl0.inorder()                                                 # STEP 58
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x102404e18> : <type 'instance'>
avl_REF0 = set([1, 8, 9, 14, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.delete(int1)                                                       # STEP 59
ACTION: avl0.delete(int1) 
int1 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102404e18> : <type 'instance'>
avl_REF0 = set([1, 8, 9, 14, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([8, 9, 14, 20]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 60
ACTION: avl0.insert(int2) 
int2 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102404e18> : <type 'instance'>
avl_REF0 = set([8, 9, 14, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl1.delete(int0)                                                       # STEP 61
ACTION: avl1.delete(int0) 
int0 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1023ba5f0> : <type 'instance'>
avl_REF1 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int3 = 6                                                                # STEP 62
ACTION: int3 = 6 
int3 = 18 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 63
ACTION: avl0.delete(int0) 
int0 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102404e18> : <type 'instance'>
avl_REF0 = set([8, 9, 14, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([8, 9, 14]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 64
ACTION: avl0.delete(int0) 
int0 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102404e18> : <type 'instance'>
avl_REF0 = set([8, 9, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
result = avl0.find(int3)                                                # STEP 65
ACTION: result = avl0.find(int3) 
int3 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102404e18> : <type 'instance'>
avl_REF0 = set([8, 9, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
avl0.delete(int2)                                                       # STEP 66
ACTION: avl0.delete(int2) 
int2 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102404e18> : <type 'instance'>
avl_REF0 = set([8, 9, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([8, 9]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 67
ACTION: avl1.insert(int3) 
int3 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1023ba5f0> : <type 'instance'>
avl_REF1 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([18, 6]) : <type 'set'>
==================================================
int3 = 3                                                                # STEP 68
ACTION: int3 = 3 
int3 = 6 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
result = avl1.find(int2)                                                # STEP 69
ACTION: result = avl1.find(int2) 
int2 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1023ba5f0> : <type 'instance'>
avl_REF1 = set([18, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
result = avl1.inorder()                                                 # STEP 70
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x1023ba5f0> : <type 'instance'>
avl_REF1 = set([18, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.delete(int1)                                                       # STEP 71
ACTION: avl1.delete(int1) 
int1 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1023ba5f0> : <type 'instance'>
avl_REF1 = set([18, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int1 = 14                                                               # STEP 72
ACTION: int1 = 14 
int1 = 1 : <type 'int'>
=> int1 = 14 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 73
ACTION: avl1.insert(int2) 
int2 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1023ba5f0> : <type 'instance'>
avl_REF1 = set([18, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([18, 14, 6]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 74
ACTION: avl1.delete(int1) 
int1 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1023ba5f0> : <type 'instance'>
avl_REF1 = set([18, 14, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([18, 6]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 75
ACTION: avl0.insert(int3) 
int3 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102404e18> : <type 'instance'>
avl_REF0 = set([8, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([3, 8, 9]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 76
ACTION: avl1.insert(int3) 
int3 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1023ba5f0> : <type 'instance'>
avl_REF1 = set([18, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([18, 3, 6]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 77
ACTION: avl0.insert(int2) 
int2 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102404e18> : <type 'instance'>
avl_REF0 = set([3, 8, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([3, 8, 9, 14]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 78
ACTION: avl1.delete(int1) 
int1 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1023ba5f0> : <type 'instance'>
avl_REF1 = set([18, 3, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl0.delete(int3)                                                       # STEP 79
ACTION: avl0.delete(int3) 
int3 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102404e18> : <type 'instance'>
avl_REF0 = set([3, 8, 9, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([8, 9, 14]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x101cd6290>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102318d40>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
Original test has 25 steps

SAVING TEST AS failure.62399.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 6                                                                 # STEP 0
ACTION: int2 = 6 
int2 = None : <type 'NoneType'>
=> int2 = 6 : <type 'int'>
==================================================
int0 = 13                                                                # STEP 1
ACTION: int0 = 13 
int0 = None : <type 'NoneType'>
=> int0 = 13 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 2
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x1023120e0> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
result = avl0.inorder()                                                  # STEP 3
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x1023120e0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.delete(int2)                                                        # STEP 4
ACTION: avl0.delete(int2) 
int2 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1023120e0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.delete(int2)                                                        # STEP 5
ACTION: avl0.delete(int2) 
int2 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1023120e0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0 = avl.AVLTree()                                                     # STEP 6
ACTION: avl0 = avl.AVLTree() 
avl0 = <avlbug2.AVLTree instance at 0x1023120e0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
=> avl0 = <avlbug2.AVLTree instance at 0x102312b90> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
==================================================
avl0.insert(int2)                                                        # STEP 7
ACTION: avl0.insert(int2) 
int2 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102312b90> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([6]) : <type 'set'>
==================================================
int3 = 12                                                                # STEP 8
ACTION: int3 = 12 
int3 = None : <type 'NoneType'>
=> int3 = 12 : <type 'int'>
==================================================
avl0.insert(int2)                                                        # STEP 9
ACTION: avl0.insert(int2) 
int2 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102312b90> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl0.delete(int2)                                                       # STEP 10
ACTION: avl0.delete(int2) 
int2 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102312b90> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int1 = 15                                                               # STEP 11
ACTION: int1 = 15 
int1 = None : <type 'NoneType'>
=> int1 = 15 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 12
ACTION: avl0.insert(int2) 
int2 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102312b90> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([6]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 13
ACTION: avl0.insert(int2) 
int2 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102312b90> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
int2 = 13                                                               # STEP 14
ACTION: int2 = 13 
int2 = 6 : <type 'int'>
=> int2 = 13 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 15
ACTION: avl0.insert(int1) 
int1 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102312b90> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([6, 15]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 16
ACTION: avl0.insert(int3) 
int3 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102312b90> : <type 'instance'>
avl_REF0 = set([6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([12, 6, 15]) : <type 'set'>
==================================================
result = avl0.find(int3)                                                # STEP 17
ACTION: result = avl0.find(int3) 
int3 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102312b90> : <type 'instance'>
avl_REF0 = set([12, 6, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
avl0.insert(int1)                                                       # STEP 18
ACTION: avl0.insert(int1) 
int1 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102312b90> : <type 'instance'>
avl_REF0 = set([12, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
int3 = 4                                                                # STEP 19
ACTION: int3 = 4 
int3 = 12 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 20
ACTION: avl0.insert(int3) 
int3 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102312b90> : <type 'instance'>
avl_REF0 = set([12, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([4, 12, 6, 15]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 21
ACTION: avl0.insert(int3) 
int3 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102312b90> : <type 'instance'>
avl_REF0 = set([4, 12, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
result = avl0.find(int1)                                                # STEP 22
ACTION: result = avl0.find(int1) 
int1 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102312b90> : <type 'instance'>
avl_REF0 = set([4, 12, 6, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
result = avl0.inorder()                                                 # STEP 23
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x102312b90> : <type 'instance'>
avl_REF0 = set([4, 12, 6, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.delete(int1)                                                       # STEP 24
ACTION: avl0.delete(int1) 
int1 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102312b90> : <type 'instance'>
avl_REF0 = set([4, 12, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([4, 12, 6]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1024f0e18>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
TEST #4 STEP #0 (0:00:32.487126) Mon May  1 18:25:43 2017 [ 160 stmts 212 branches ]
  6 [2:0]
-- < 4 [1:1]
---- < 3 [0:0] L
-- > 12 [1:0]
---- < 10 [0:0] L
---- > 16 [0:0] L
set([3, 4, 6, 10, 12, 16])
  6 [2:0]
-- < 5 [1:1]
---- < 3 [0:0] L
-- > 12 [1:0]
---- < 10 [0:0] L
---- > 16 [0:0] L
set([3, 5, 6, 10, 12, 16])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1024ca560>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
Original test has 62 steps

SAVING TEST AS failure.62399.test.2
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 3                                                                 # STEP 0
ACTION: int2 = 3 
int2 = None : <type 'NoneType'>
=> int2 = 3 : <type 'int'>
==================================================
int1 = 4                                                                 # STEP 1
ACTION: int1 = 4 
int1 = None : <type 'NoneType'>
=> int1 = 4 : <type 'int'>
==================================================
int3 = 6                                                                 # STEP 2
ACTION: int3 = 6 
int3 = None : <type 'NoneType'>
=> int3 = 6 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 3
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x1024ca830> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int0 = 4                                                                 # STEP 4
ACTION: int0 = 4 
int0 = None : <type 'NoneType'>
=> int0 = 4 : <type 'int'>
==================================================
avl0.insert(int1)                                                        # STEP 5
ACTION: avl0.insert(int1) 
int1 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1024ca830> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([4]) : <type 'set'>
==================================================
avl0.insert(int3)                                                        # STEP 6
ACTION: avl0.insert(int3) 
int3 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1024ca830> : <type 'instance'>
avl_REF0 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([4, 6]) : <type 'set'>
==================================================
int1 = 12                                                                # STEP 7
ACTION: int1 = 12 
int1 = 4 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
avl0.delete(int3)                                                        # STEP 8
ACTION: avl0.delete(int3) 
int3 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1024ca830> : <type 'instance'>
avl_REF0 = set([4, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([4]) : <type 'set'>
==================================================
avl0.insert(int2)                                                        # STEP 9
ACTION: avl0.insert(int2) 
int2 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1024ca830> : <type 'instance'>
avl_REF0 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([3, 4]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 10
ACTION: avl0.insert(int3) 
int3 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1024ca830> : <type 'instance'>
avl_REF0 = set([3, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([3, 4, 6]) : <type 'set'>
==================================================
result = avl0.find(int2)                                                # STEP 11
ACTION: result = avl0.find(int2) 
int2 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1024ca830> : <type 'instance'>
avl_REF0 = set([3, 4, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl0.delete(int1)                                                       # STEP 12
ACTION: avl0.delete(int1) 
int1 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1024ca830> : <type 'instance'>
avl_REF0 = set([3, 4, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0 == avl0                                                            # STEP 13
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x1024ca830> : <type 'instance'>
avl_REF0 = set([3, 4, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
result = avl0.inorder()                                                 # STEP 14
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x1024ca830> : <type 'instance'>
avl_REF0 = set([3, 4, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
result = avl0.find(int3)                                                # STEP 15
ACTION: result = avl0.find(int3) 
int3 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1024ca830> : <type 'instance'>
avl_REF0 = set([3, 4, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
avl0.insert(int1)                                                       # STEP 16
ACTION: avl0.insert(int1) 
int1 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1024ca830> : <type 'instance'>
avl_REF0 = set([3, 4, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([12, 3, 4, 6]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 17
ACTION: avl0.delete(int0) 
int0 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1024ca830> : <type 'instance'>
avl_REF0 = set([12, 3, 4, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([12, 3, 6]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 18
ACTION: avl0.delete(int3) 
int3 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1024ca830> : <type 'instance'>
avl_REF0 = set([12, 3, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([12, 3]) : <type 'set'>
==================================================
avl0 == avl0                                                            # STEP 19
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x1024ca830> : <type 'instance'>
avl_REF0 = set([12, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
result = avl0.find(int2)                                                # STEP 20
ACTION: result = avl0.find(int2) 
int2 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1024ca830> : <type 'instance'>
avl_REF0 = set([12, 3]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl0.insert(int0)                                                       # STEP 21
ACTION: avl0.insert(int0) 
int0 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1024ca830> : <type 'instance'>
avl_REF0 = set([12, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([12, 3, 4]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 22
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x1024ca830> : <type 'instance'>
avl_REF0 = set([12, 3, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int0 = 20                                                               # STEP 23
ACTION: int0 = 20 
int0 = 4 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 24
ACTION: avl0.insert(int3) 
int3 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1024ca830> : <type 'instance'>
avl_REF0 = set([12, 3, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([12, 3, 4, 6]) : <type 'set'>
==================================================
int1 = 16                                                               # STEP 25
ACTION: int1 = 16 
int1 = 12 : <type 'int'>
=> int1 = 16 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 26
ACTION: avl0.insert(int1) 
int1 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1024ca830> : <type 'instance'>
avl_REF0 = set([12, 3, 4, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([16, 12, 3, 4, 6]) : <type 'set'>
==================================================
int1 = 19                                                               # STEP 27
ACTION: int1 = 19 
int1 = 16 : <type 'int'>
=> int1 = 19 : <type 'int'>
==================================================
int2 = 10                                                               # STEP 28
ACTION: int2 = 10 
int2 = 3 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
avl0 == avl0                                                            # STEP 29
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x1024ca830> : <type 'instance'>
avl_REF0 = set([16, 12, 3, 4, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl0.delete(int0)                                                       # STEP 30
ACTION: avl0.delete(int0) 
int0 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1024ca830> : <type 'instance'>
avl_REF0 = set([16, 12, 3, 4, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.delete(int1)                                                       # STEP 31
ACTION: avl0.delete(int1) 
int1 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1024ca830> : <type 'instance'>
avl_REF0 = set([16, 12, 3, 4, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int0 = 4                                                                # STEP 32
ACTION: int0 = 4 
int0 = 20 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
int3 = 14                                                               # STEP 33
ACTION: int3 = 14 
int3 = 6 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
int1 = 5                                                                # STEP 34
ACTION: int1 = 5 
int1 = 19 : <type 'int'>
=> int1 = 5 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 35
ACTION: avl0.insert(int2) 
int2 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1024ca830> : <type 'instance'>
avl_REF0 = set([16, 12, 3, 4, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([3, 4, 6, 10, 12, 16]) : <type 'set'>
==================================================
avl0.display()                                                          # STEP 36
ACTION: avl0.display() 
avl0 = <avlbug2.AVLTree instance at 0x1024ca830> : <type 'instance'>
avl_REF0 = set([3, 4, 6, 10, 12, 16]) : <type 'set'>
  6 [2:0]
-- < 4 [1:1]
---- < 3 [0:0] L
-- > 12 [1:0]
---- < 10 [0:0] L
---- > 16 [0:0] L
REFERENCE ACTION: print(avl_REF0) 
set([3, 4, 6, 10, 12, 16])
==================================================
avl0.insert(int1)                                                       # STEP 37
ACTION: avl0.insert(int1) 
int1 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1024ca830> : <type 'instance'>
avl_REF0 = set([3, 4, 6, 10, 12, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([3, 4, 5, 6, 10, 12, 16]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 38
ACTION: avl0.delete(int0) 
int0 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1024ca830> : <type 'instance'>
avl_REF0 = set([3, 4, 5, 6, 10, 12, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([3, 5, 6, 10, 12, 16]) : <type 'set'>
==================================================
avl0.display()                                                          # STEP 39
ACTION: avl0.display() 
avl0 = <avlbug2.AVLTree instance at 0x1024ca830> : <type 'instance'>
avl_REF0 = set([3, 5, 6, 10, 12, 16]) : <type 'set'>
  6 [2:0]
-- < 5 [1:1]
---- < 3 [0:0] L
-- > 12 [1:0]
---- < 10 [0:0] L
---- > 16 [0:0] L
REFERENCE ACTION: print(avl_REF0) 
set([3, 5, 6, 10, 12, 16])
==================================================
result = avl0.inorder()                                                 # STEP 40
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x1024ca830> : <type 'instance'>
avl_REF0 = set([3, 5, 6, 10, 12, 16]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
result = avl0.find(int2)                                                # STEP 41
ACTION: result = avl0.find(int2) 
int2 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1024ca830> : <type 'instance'>
avl_REF0 = set([3, 5, 6, 10, 12, 16]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl0.delete(int2)                                                       # STEP 42
ACTION: avl0.delete(int2) 
int2 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1024ca830> : <type 'instance'>
avl_REF0 = set([3, 5, 6, 10, 12, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([3, 5, 6, 12, 16]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 43
ACTION: avl0.delete(int1) 
int1 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1024ca830> : <type 'instance'>
avl_REF0 = set([3, 5, 6, 12, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([3, 6, 12, 16]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 44
ACTION: avl0.insert(int0) 
int0 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1024ca830> : <type 'instance'>
avl_REF0 = set([3, 6, 12, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([3, 4, 6, 12, 16]) : <type 'set'>
==================================================
int2 = 4                                                                # STEP 45
ACTION: int2 = 4 
int2 = 10 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 46
ACTION: avl0.insert(int0) 
int0 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1024ca830> : <type 'instance'>
avl_REF0 = set([3, 4, 6, 12, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
avl0.delete(int0)                                                       # STEP 47
ACTION: avl0.delete(int0) 
int0 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1024ca830> : <type 'instance'>
avl_REF0 = set([3, 4, 6, 12, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([3, 6, 12, 16]) : <type 'set'>
==================================================
int0 = 15                                                               # STEP 48
ACTION: int0 = 15 
int0 = 4 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
int1 = 11                                                               # STEP 49
ACTION: int1 = 11 
int1 = 5 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 50
ACTION: avl0.delete(int1) 
int1 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1024ca830> : <type 'instance'>
avl_REF0 = set([3, 6, 12, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.insert(int2)                                                       # STEP 51
ACTION: avl0.insert(int2) 
int2 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1024ca830> : <type 'instance'>
avl_REF0 = set([3, 6, 12, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([3, 4, 6, 12, 16]) : <type 'set'>
==================================================
int1 = 1                                                                # STEP 52
ACTION: int1 = 1 
int1 = 11 : <type 'int'>
=> int1 = 1 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 53
ACTION: avl0.insert(int1) 
int1 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1024ca830> : <type 'instance'>
avl_REF0 = set([3, 4, 6, 12, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([1, 3, 4, 6, 12, 16]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 54
ACTION: avl0.delete(int2) 
int2 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1024ca830> : <type 'instance'>
avl_REF0 = set([1, 3, 4, 6, 12, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([1, 3, 6, 12, 16]) : <type 'set'>
==================================================
int2 = 15                                                               # STEP 55
ACTION: int2 = 15 
int2 = 4 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
int1 = 14                                                               # STEP 56
ACTION: int1 = 14 
int1 = 1 : <type 'int'>
=> int1 = 14 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 57
ACTION: avl0.insert(int0) 
int0 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1024ca830> : <type 'instance'>
avl_REF0 = set([1, 3, 6, 12, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([1, 3, 6, 12, 15, 16]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 58
ACTION: avl0.insert(int3) 
int3 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1024ca830> : <type 'instance'>
avl_REF0 = set([1, 3, 6, 12, 15, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([1, 3, 6, 12, 14, 15, 16]) : <type 'set'>
==================================================
int3 = 15                                                               # STEP 59
ACTION: int3 = 15 
int3 = 14 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 60
ACTION: avl0.insert(int2) 
int2 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1024ca830> : <type 'instance'>
avl_REF0 = set([1, 3, 6, 12, 14, 15, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl0.delete(int0)                                                       # STEP 61
ACTION: avl0.delete(int0) 
int0 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1024ca830> : <type 'instance'>
avl_REF0 = set([1, 3, 6, 12, 14, 15, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([1, 3, 6, 12, 14, 16]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x101e02758>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 3 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 39
STOPPING TESTING DUE TO TIMEOUT
8.21242019733 PERCENT COVERED
60.307254076 TOTAL RUNTIME
6 EXECUTED
406 TOTAL TEST OPERATIONS
21.1749572754 TIME SPENT EXECUTING TEST OPERATIONS
0.0456848144531 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
21.3019618988 TIME SPENT CHECKING PROPERTIES
42.4769191742 TOTAL TIME SPENT RUNNING SUT
0.00398898124695 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
3 FAILED
0 REPEATS OF FAILURES
3 ACTUAL DISTINCT FAILURES

FAILURE 0
avl0 = avl.AVLTree()                                                     # STEP 0
result = avl0.inorder()                                                  # STEP 1
int2 = 9                                                                 # STEP 2
int0 = 11                                                                # STEP 3
result = avl0.inorder()                                                  # STEP 4
avl0.delete(int0)                                                        # STEP 5
avl0.insert(int2)                                                        # STEP 6
int0 = 8                                                                 # STEP 7
avl0.delete(int2)                                                        # STEP 8
avl0.insert(int2)                                                        # STEP 9
avl0.delete(int2)                                                       # STEP 10
int1 = 9                                                                # STEP 11
avl0.delete(int2)                                                       # STEP 12
avl0.delete(int0)                                                       # STEP 13
avl0.insert(int2)                                                       # STEP 14
result = avl0.find(int2)                                                # STEP 15
avl0.delete(int1)                                                       # STEP 16
avl0.delete(int2)                                                       # STEP 17
result = avl0.find(int1)                                                # STEP 18
avl0.insert(int0)                                                       # STEP 19
avl0.delete(int1)                                                       # STEP 20
avl0.insert(int2)                                                       # STEP 21
int3 = 14                                                               # STEP 22
int1 = 20                                                               # STEP 23
result = avl0.find(int2)                                                # STEP 24
int0 = 20                                                               # STEP 25
avl0.insert(int3)                                                       # STEP 26
result = avl0.find(int1)                                                # STEP 27
int3 = 18                                                               # STEP 28
avl0.delete(int0)                                                       # STEP 29
avl0.insert(int2)                                                       # STEP 30
avl0.delete(int3)                                                       # STEP 31
avl0.delete(int3)                                                       # STEP 32
avl1 = avl.AVLTree()                                                    # STEP 33
avl0.insert(int1)                                                       # STEP 34
avl0.insert(int3)                                                       # STEP 35
result = avl0.inorder()                                                 # STEP 36
avl1.delete(int2)                                                       # STEP 37
avl1 == avl1                                                            # STEP 38
avl1.insert(int3)                                                       # STEP 39
avl0.delete(int1)                                                       # STEP 40
int2 = 14                                                               # STEP 41
result = avl1.inorder()                                                 # STEP 42
avl1.insert(int0)                                                       # STEP 43
avl1.delete(int0)                                                       # STEP 44
avl0.insert(int3)                                                       # STEP 45
avl0.insert(int0)                                                       # STEP 46
int1 = 1                                                                # STEP 47
avl0.delete(int3)                                                       # STEP 48
result = avl0.find(int1)                                                # STEP 49
result = avl0.inorder()                                                 # STEP 50
result = avl1.inorder()                                                 # STEP 51
avl0.insert(int1)                                                       # STEP 52
avl1.insert(int3)                                                       # STEP 53
avl0.insert(int1)                                                       # STEP 54
avl0.insert(int0)                                                       # STEP 55
avl1 == avl0                                                            # STEP 56
avl0.insert(int0)                                                       # STEP 57
result = avl0.inorder()                                                 # STEP 58
avl0.delete(int1)                                                       # STEP 59
avl0.insert(int2)                                                       # STEP 60
avl1.delete(int0)                                                       # STEP 61
int3 = 6                                                                # STEP 62
avl0.delete(int0)                                                       # STEP 63
avl0.delete(int0)                                                       # STEP 64
result = avl0.find(int3)                                                # STEP 65
avl0.delete(int2)                                                       # STEP 66
avl1.insert(int3)                                                       # STEP 67
int3 = 3                                                                # STEP 68
result = avl1.find(int2)                                                # STEP 69
result = avl1.inorder()                                                 # STEP 70
avl1.delete(int1)                                                       # STEP 71
int1 = 14                                                               # STEP 72
avl1.insert(int2)                                                       # STEP 73
avl1.delete(int1)                                                       # STEP 74
avl0.insert(int3)                                                       # STEP 75
avl1.insert(int3)                                                       # STEP 76
avl0.insert(int2)                                                       # STEP 77
avl1.delete(int1)                                                       # STEP 78
avl0.delete(int3)                                                       # STEP 79
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x101cd6290>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE 1
int2 = 6                                                                 # STEP 0
int0 = 13                                                                # STEP 1
avl0 = avl.AVLTree()                                                     # STEP 2
result = avl0.inorder()                                                  # STEP 3
avl0.delete(int2)                                                        # STEP 4
avl0.delete(int2)                                                        # STEP 5
avl0 = avl.AVLTree()                                                     # STEP 6
avl0.insert(int2)                                                        # STEP 7
int3 = 12                                                                # STEP 8
avl0.insert(int2)                                                        # STEP 9
avl0.delete(int2)                                                       # STEP 10
int1 = 15                                                               # STEP 11
avl0.insert(int2)                                                       # STEP 12
avl0.insert(int2)                                                       # STEP 13
int2 = 13                                                               # STEP 14
avl0.insert(int1)                                                       # STEP 15
avl0.insert(int3)                                                       # STEP 16
result = avl0.find(int3)                                                # STEP 17
avl0.insert(int1)                                                       # STEP 18
int3 = 4                                                                # STEP 19
avl0.insert(int3)                                                       # STEP 20
avl0.insert(int3)                                                       # STEP 21
result = avl0.find(int1)                                                # STEP 22
result = avl0.inorder()                                                 # STEP 23
avl0.delete(int1)                                                       # STEP 24
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1024f0e18>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE 2
int2 = 3                                                                 # STEP 0
int1 = 4                                                                 # STEP 1
int3 = 6                                                                 # STEP 2
avl0 = avl.AVLTree()                                                     # STEP 3
int0 = 4                                                                 # STEP 4
avl0.insert(int1)                                                        # STEP 5
avl0.insert(int3)                                                        # STEP 6
int1 = 12                                                                # STEP 7
avl0.delete(int3)                                                        # STEP 8
avl0.insert(int2)                                                        # STEP 9
avl0.insert(int3)                                                       # STEP 10
result = avl0.find(int2)                                                # STEP 11
avl0.delete(int1)                                                       # STEP 12
avl0 == avl0                                                            # STEP 13
result = avl0.inorder()                                                 # STEP 14
result = avl0.find(int3)                                                # STEP 15
avl0.insert(int1)                                                       # STEP 16
avl0.delete(int0)                                                       # STEP 17
avl0.delete(int3)                                                       # STEP 18
avl0 == avl0                                                            # STEP 19
result = avl0.find(int2)                                                # STEP 20
avl0.insert(int0)                                                       # STEP 21
result = avl0.inorder()                                                 # STEP 22
int0 = 20                                                               # STEP 23
avl0.insert(int3)                                                       # STEP 24
int1 = 16                                                               # STEP 25
avl0.insert(int1)                                                       # STEP 26
int1 = 19                                                               # STEP 27
int2 = 10                                                               # STEP 28
avl0 == avl0                                                            # STEP 29
avl0.delete(int0)                                                       # STEP 30
avl0.delete(int1)                                                       # STEP 31
int0 = 4                                                                # STEP 32
int3 = 14                                                               # STEP 33
int1 = 5                                                                # STEP 34
avl0.insert(int2)                                                       # STEP 35
avl0.display()                                                          # STEP 36
avl0.insert(int1)                                                       # STEP 37
avl0.delete(int0)                                                       # STEP 38
avl0.display()                                                          # STEP 39
result = avl0.inorder()                                                 # STEP 40
result = avl0.find(int2)                                                # STEP 41
avl0.delete(int2)                                                       # STEP 42
avl0.delete(int1)                                                       # STEP 43
avl0.insert(int0)                                                       # STEP 44
int2 = 4                                                                # STEP 45
avl0.insert(int0)                                                       # STEP 46
avl0.delete(int0)                                                       # STEP 47
int0 = 15                                                               # STEP 48
int1 = 11                                                               # STEP 49
avl0.delete(int1)                                                       # STEP 50
avl0.insert(int2)                                                       # STEP 51
int1 = 1                                                                # STEP 52
avl0.insert(int1)                                                       # STEP 53
avl0.delete(int2)                                                       # STEP 54
int2 = 15                                                               # STEP 55
int1 = 14                                                               # STEP 56
avl0.insert(int0)                                                       # STEP 57
avl0.insert(int3)                                                       # STEP 58
int3 = 15                                                               # STEP 59
avl0.insert(int2)                                                       # STEP 60
avl0.delete(int0)                                                       # STEP 61
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x101e02758>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
214 BRANCHES COVERED
161 STATEMENTS COVERED

Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.14790.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1035be998>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
Original test has 96 steps

SAVING TEST AS failure.14790.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 17                                                                # STEP 0
ACTION: int2 = 17 
int2 = None : <type 'NoneType'>
=> int2 = 17 : <type 'int'>
==================================================
int0 = 7                                                                 # STEP 1
ACTION: int0 = 7 
int0 = None : <type 'NoneType'>
=> int0 = 7 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 2
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x10336c200> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.insert(int0)                                                        # STEP 3
ACTION: avl1.insert(int0) 
int0 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10336c200> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([7]) : <type 'set'>
==================================================
int1 = 6                                                                 # STEP 4
ACTION: int1 = 6 
int1 = None : <type 'NoneType'>
=> int1 = 6 : <type 'int'>
==================================================
int3 = 7                                                                 # STEP 5
ACTION: int3 = 7 
int3 = None : <type 'NoneType'>
=> int3 = 7 : <type 'int'>
==================================================
int0 = 9                                                                 # STEP 6
ACTION: int0 = 9 
int0 = 7 : <type 'int'>
=> int0 = 9 : <type 'int'>
==================================================
result = avl1.find(int3)                                                 # STEP 7
ACTION: result = avl1.find(int3) 
int3 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10336c200> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
int3 = 17                                                                # STEP 8
ACTION: int3 = 17 
int3 = 7 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
result = avl1.find(int0)                                                 # STEP 9
ACTION: result = avl1.find(int0) 
int0 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10336c200> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl1.delete(int2)                                                       # STEP 10
ACTION: avl1.delete(int2) 
int2 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10336c200> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int2 = 1                                                                # STEP 11
ACTION: int2 = 1 
int2 = 17 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
int0 = 20                                                               # STEP 12
ACTION: int0 = 20 
int0 = 9 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 13
ACTION: avl1.insert(int2) 
int2 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10336c200> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([1, 7]) : <type 'set'>
==================================================
int2 = 3                                                                # STEP 14
ACTION: int2 = 3 
int2 = 1 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 15
ACTION: avl1.delete(int3) 
int3 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10336c200> : <type 'instance'>
avl_REF1 = set([1, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int3 = 6                                                                # STEP 16
ACTION: int3 = 6 
int3 = 17 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 17
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x10336c200> : <type 'instance'>
avl_REF1 = set([1, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.delete(int2)                                                       # STEP 18
ACTION: avl1.delete(int2) 
int2 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10336c200> : <type 'instance'>
avl_REF1 = set([1, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
result = avl1.find(int2)                                                # STEP 19
ACTION: result = avl1.find(int2) 
int2 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10336c200> : <type 'instance'>
avl_REF1 = set([1, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int2 = 9                                                                # STEP 20
ACTION: int2 = 9 
int2 = 3 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 21
ACTION: avl1.insert(int3) 
int3 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10336c200> : <type 'instance'>
avl_REF1 = set([1, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([1, 6, 7]) : <type 'set'>
==================================================
result = avl1.find(int1)                                                # STEP 22
ACTION: result = avl1.find(int1) 
int1 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10336c200> : <type 'instance'>
avl_REF1 = set([1, 6, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int1 = 11                                                               # STEP 23
ACTION: int1 = 11 
int1 = 6 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
result = avl1.find(int2)                                                # STEP 24
ACTION: result = avl1.find(int2) 
int2 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10336c200> : <type 'instance'>
avl_REF1 = set([1, 6, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int2 = 12                                                               # STEP 25
ACTION: int2 = 12 
int2 = 9 : <type 'int'>
=> int2 = 12 : <type 'int'>
==================================================
int3 = 1                                                                # STEP 26
ACTION: int3 = 1 
int3 = 6 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 27
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x1032fb488> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 28
ACTION: avl0.delete(int1) 
int1 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1032fb488> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
result = avl0.find(int2)                                                # STEP 29
ACTION: result = avl0.find(int2) 
int2 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1032fb488> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
result = avl1.find(int0)                                                # STEP 30
ACTION: result = avl1.find(int0) 
int0 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10336c200> : <type 'instance'>
avl_REF1 = set([1, 6, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
result = avl0.find(int0)                                                # STEP 31
ACTION: result = avl0.find(int0) 
int0 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1032fb488> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
avl0 == avl0                                                            # STEP 32
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x1032fb488> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
int0 = 15                                                               # STEP 33
ACTION: int0 = 15 
int0 = 20 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
int2 = 11                                                               # STEP 34
ACTION: int2 = 11 
int2 = 12 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 35
ACTION: avl0.delete(int2) 
int2 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1032fb488> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int2 = 10                                                               # STEP 36
ACTION: int2 = 10 
int2 = 11 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 37
ACTION: avl0.insert(int2) 
int2 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1032fb488> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([10]) : <type 'set'>
==================================================
avl1 == avl0                                                            # STEP 38
ACTION: avl1 == avl0 
avl1 = <avlbug2.AVLTree instance at 0x10336c200> : <type 'instance'>
avl0 = <avlbug2.AVLTree instance at 0x1032fb488> : <type 'instance'>
avl_REF1 = set([1, 6, 7]) : <type 'set'>
avl_REF0 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
result = avl0.find(int3)                                                # STEP 39
ACTION: result = avl0.find(int3) 
int3 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1032fb488> : <type 'instance'>
avl_REF0 = set([10]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
avl0.delete(int1)                                                       # STEP 40
ACTION: avl0.delete(int1) 
int1 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1032fb488> : <type 'instance'>
avl_REF0 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.delete(int3)                                                       # STEP 41
ACTION: avl0.delete(int3) 
int3 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1032fb488> : <type 'instance'>
avl_REF0 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int2 = 16                                                               # STEP 42
ACTION: int2 = 16 
int2 = 10 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 43
ACTION: avl1.delete(int1) 
int1 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10336c200> : <type 'instance'>
avl_REF1 = set([1, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int1 = 2                                                                # STEP 44
ACTION: int1 = 2 
int1 = 11 : <type 'int'>
=> int1 = 2 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 45
ACTION: avl1.delete(int3) 
int3 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10336c200> : <type 'instance'>
avl_REF1 = set([1, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([6, 7]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 46
ACTION: avl0.insert(int0) 
int0 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1032fb488> : <type 'instance'>
avl_REF0 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([10, 15]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 47
ACTION: avl1.delete(int0) 
int0 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10336c200> : <type 'instance'>
avl_REF1 = set([6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
result = avl0.find(int0)                                                # STEP 48
ACTION: result = avl0.find(int0) 
int0 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1032fb488> : <type 'instance'>
avl_REF0 = set([10, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
result = avl0.find(int3)                                                # STEP 49
ACTION: result = avl0.find(int3) 
int3 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1032fb488> : <type 'instance'>
avl_REF0 = set([10, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
avl1.delete(int2)                                                       # STEP 50
ACTION: avl1.delete(int2) 
int2 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10336c200> : <type 'instance'>
avl_REF1 = set([6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int0 = 1                                                                # STEP 51
ACTION: int0 = 1 
int0 = 15 : <type 'int'>
=> int0 = 1 : <type 'int'>
==================================================
int2 = 19                                                               # STEP 52
ACTION: int2 = 19 
int2 = 16 : <type 'int'>
=> int2 = 19 : <type 'int'>
==================================================
int3 = 8                                                                # STEP 53
ACTION: int3 = 8 
int3 = 1 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 54
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x1032fb488> : <type 'instance'>
avl_REF0 = set([10, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int1)                                                       # STEP 55
ACTION: avl0.insert(int1) 
int1 = 2 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1032fb488> : <type 'instance'>
avl_REF0 = set([10, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([10, 2, 15]) : <type 'set'>
==================================================
int1 = 20                                                               # STEP 56
ACTION: int1 = 20 
int1 = 2 : <type 'int'>
=> int1 = 20 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 57
ACTION: avl1.delete(int3) 
int3 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10336c200> : <type 'instance'>
avl_REF1 = set([6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int3 = 6                                                                # STEP 58
ACTION: int3 = 6 
int3 = 8 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 59
ACTION: avl1.insert(int2) 
int2 = 19 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10336c200> : <type 'instance'>
avl_REF1 = set([6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([19, 6, 7]) : <type 'set'>
==================================================
int2 = 6                                                                # STEP 60
ACTION: int2 = 6 
int2 = 19 : <type 'int'>
=> int2 = 6 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 61
ACTION: avl0.delete(int2) 
int2 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1032fb488> : <type 'instance'>
avl_REF0 = set([10, 2, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int2 = 13                                                               # STEP 62
ACTION: int2 = 13 
int2 = 6 : <type 'int'>
=> int2 = 13 : <type 'int'>
==================================================
result = avl0.find(int2)                                                # STEP 63
ACTION: result = avl0.find(int2) 
int2 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1032fb488> : <type 'instance'>
avl_REF0 = set([10, 2, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl1.insert(int0)                                                       # STEP 64
ACTION: avl1.insert(int0) 
int0 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10336c200> : <type 'instance'>
avl_REF1 = set([19, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([1, 19, 6, 7]) : <type 'set'>
==================================================
int2 = 4                                                                # STEP 65
ACTION: int2 = 4 
int2 = 13 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
int0 = 16                                                               # STEP 66
ACTION: int0 = 16 
int0 = 1 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 67
ACTION: avl0.insert(int2) 
int2 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1032fb488> : <type 'instance'>
avl_REF0 = set([10, 2, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([10, 4, 2, 15]) : <type 'set'>
==================================================
int2 = 16                                                               # STEP 68
ACTION: int2 = 16 
int2 = 4 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 69
ACTION: avl0.insert(int3) 
int3 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1032fb488> : <type 'instance'>
avl_REF0 = set([10, 4, 2, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([10, 4, 2, 6, 15]) : <type 'set'>
==================================================
result = avl0.find(int0)                                                # STEP 70
ACTION: result = avl0.find(int0) 
int0 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1032fb488> : <type 'instance'>
avl_REF0 = set([10, 4, 2, 6, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
avl0.insert(int0)                                                       # STEP 71
ACTION: avl0.insert(int0) 
int0 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1032fb488> : <type 'instance'>
avl_REF0 = set([10, 4, 2, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([2, 4, 6, 10, 15, 16]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 72
ACTION: avl0.insert(int3) 
int3 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1032fb488> : <type 'instance'>
avl_REF0 = set([2, 4, 6, 10, 15, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
avl0.delete(int2)                                                       # STEP 73
ACTION: avl0.delete(int2) 
int2 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1032fb488> : <type 'instance'>
avl_REF0 = set([2, 4, 6, 10, 15, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([2, 4, 6, 10, 15]) : <type 'set'>
==================================================
int2 = 11                                                               # STEP 74
ACTION: int2 = 11 
int2 = 16 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
result = avl1.find(int1)                                                # STEP 75
ACTION: result = avl1.find(int1) 
int1 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10336c200> : <type 'instance'>
avl_REF1 = set([1, 19, 6, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl1.delete(int1)                                                       # STEP 76
ACTION: avl1.delete(int1) 
int1 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10336c200> : <type 'instance'>
avl_REF1 = set([1, 19, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int1 = 2                                                                # STEP 77
ACTION: int1 = 2 
int1 = 20 : <type 'int'>
=> int1 = 2 : <type 'int'>
==================================================
int3 = 17                                                               # STEP 78
ACTION: int3 = 17 
int3 = 6 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
int0 = 15                                                               # STEP 79
ACTION: int0 = 15 
int0 = 16 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 80
ACTION: avl0.insert(int1) 
int1 = 2 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1032fb488> : <type 'instance'>
avl_REF0 = set([2, 4, 6, 10, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl1.insert(int2)                                                       # STEP 81
ACTION: avl1.insert(int2) 
int2 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10336c200> : <type 'instance'>
avl_REF1 = set([1, 19, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([11, 1, 19, 6, 7]) : <type 'set'>
==================================================
int1 = 7                                                                # STEP 82
ACTION: int1 = 7 
int1 = 2 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 83
ACTION: avl0.delete(int1) 
int1 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1032fb488> : <type 'instance'>
avl_REF0 = set([2, 4, 6, 10, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl1 == avl1                                                            # STEP 84
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x10336c200> : <type 'instance'>
avl_REF1 = set([11, 1, 19, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1 == avl0                                                            # STEP 85
ACTION: avl1 == avl0 
avl1 = <avlbug2.AVLTree instance at 0x10336c200> : <type 'instance'>
avl0 = <avlbug2.AVLTree instance at 0x1032fb488> : <type 'instance'>
avl_REF1 = set([11, 1, 19, 6, 7]) : <type 'set'>
avl_REF0 = set([2, 4, 6, 10, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
int2 = 6                                                                # STEP 86
ACTION: int2 = 6 
int2 = 11 : <type 'int'>
=> int2 = 6 : <type 'int'>
==================================================
int1 = 12                                                               # STEP 87
ACTION: int1 = 12 
int1 = 7 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
result = avl0.find(int0)                                                # STEP 88
ACTION: result = avl0.find(int0) 
int0 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1032fb488> : <type 'instance'>
avl_REF0 = set([2, 4, 6, 10, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
int0 = 11                                                               # STEP 89
ACTION: int0 = 11 
int0 = 15 : <type 'int'>
=> int0 = 11 : <type 'int'>
==================================================
result = avl0.find(int3)                                                # STEP 90
ACTION: result = avl0.find(int3) 
int3 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1032fb488> : <type 'instance'>
avl_REF0 = set([2, 4, 6, 10, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
avl1.insert(int3)                                                       # STEP 91
ACTION: avl1.insert(int3) 
int3 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10336c200> : <type 'instance'>
avl_REF1 = set([11, 1, 19, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([1, 6, 7, 11, 17, 19]) : <type 'set'>
==================================================
int3 = 10                                                               # STEP 92
ACTION: int3 = 10 
int3 = 17 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 93
ACTION: avl0.insert(int3) 
int3 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1032fb488> : <type 'instance'>
avl_REF0 = set([2, 4, 6, 10, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
avl1.delete(int0)                                                       # STEP 94
ACTION: avl1.delete(int0) 
int0 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10336c200> : <type 'instance'>
avl_REF1 = set([1, 6, 7, 11, 17, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([1, 6, 7, 17, 19]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 95
ACTION: avl0.delete(int3) 
int3 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1032fb488> : <type 'instance'>
avl_REF0 = set([2, 4, 6, 10, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([2, 4, 6, 15]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1031d2ab8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #2 STEP #86 (0:00:30.016399) Sun Apr 30 05:00:39 2017 [ 148 stmts 195 branches ]
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 66
STOPPING TESTING DUE TO TIMEOUT
8.10989738497 PERCENT COVERED
60.2561500072 TOTAL RUNTIME
5 EXECUTED
462 TOTAL TEST OPERATIONS
24.7372732162 TIME SPENT EXECUTING TEST OPERATIONS
0.0186867713928 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
24.8922252655 TIME SPENT CHECKING PROPERTIES
49.6294984818 TOTAL TIME SPENT RUNNING SUT
0.00407290458679 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int2 = 17                                                                # STEP 0
int0 = 7                                                                 # STEP 1
avl1 = avl.AVLTree()                                                     # STEP 2
avl1.insert(int0)                                                        # STEP 3
int1 = 6                                                                 # STEP 4
int3 = 7                                                                 # STEP 5
int0 = 9                                                                 # STEP 6
result = avl1.find(int3)                                                 # STEP 7
int3 = 17                                                                # STEP 8
result = avl1.find(int0)                                                 # STEP 9
avl1.delete(int2)                                                       # STEP 10
int2 = 1                                                                # STEP 11
int0 = 20                                                               # STEP 12
avl1.insert(int2)                                                       # STEP 13
int2 = 3                                                                # STEP 14
avl1.delete(int3)                                                       # STEP 15
int3 = 6                                                                # STEP 16
result = avl1.inorder()                                                 # STEP 17
avl1.delete(int2)                                                       # STEP 18
result = avl1.find(int2)                                                # STEP 19
int2 = 9                                                                # STEP 20
avl1.insert(int3)                                                       # STEP 21
result = avl1.find(int1)                                                # STEP 22
int1 = 11                                                               # STEP 23
result = avl1.find(int2)                                                # STEP 24
int2 = 12                                                               # STEP 25
int3 = 1                                                                # STEP 26
avl0 = avl.AVLTree()                                                    # STEP 27
avl0.delete(int1)                                                       # STEP 28
result = avl0.find(int2)                                                # STEP 29
result = avl1.find(int0)                                                # STEP 30
result = avl0.find(int0)                                                # STEP 31
avl0 == avl0                                                            # STEP 32
int0 = 15                                                               # STEP 33
int2 = 11                                                               # STEP 34
avl0.delete(int2)                                                       # STEP 35
int2 = 10                                                               # STEP 36
avl0.insert(int2)                                                       # STEP 37
avl1 == avl0                                                            # STEP 38
result = avl0.find(int3)                                                # STEP 39
avl0.delete(int1)                                                       # STEP 40
avl0.delete(int3)                                                       # STEP 41
int2 = 16                                                               # STEP 42
avl1.delete(int1)                                                       # STEP 43
int1 = 2                                                                # STEP 44
avl1.delete(int3)                                                       # STEP 45
avl0.insert(int0)                                                       # STEP 46
avl1.delete(int0)                                                       # STEP 47
result = avl0.find(int0)                                                # STEP 48
result = avl0.find(int3)                                                # STEP 49
avl1.delete(int2)                                                       # STEP 50
int0 = 1                                                                # STEP 51
int2 = 19                                                               # STEP 52
int3 = 8                                                                # STEP 53
result = avl0.inorder()                                                 # STEP 54
avl0.insert(int1)                                                       # STEP 55
int1 = 20                                                               # STEP 56
avl1.delete(int3)                                                       # STEP 57
int3 = 6                                                                # STEP 58
avl1.insert(int2)                                                       # STEP 59
int2 = 6                                                                # STEP 60
avl0.delete(int2)                                                       # STEP 61
int2 = 13                                                               # STEP 62
result = avl0.find(int2)                                                # STEP 63
avl1.insert(int0)                                                       # STEP 64
int2 = 4                                                                # STEP 65
int0 = 16                                                               # STEP 66
avl0.insert(int2)                                                       # STEP 67
int2 = 16                                                               # STEP 68
avl0.insert(int3)                                                       # STEP 69
result = avl0.find(int0)                                                # STEP 70
avl0.insert(int0)                                                       # STEP 71
avl0.insert(int3)                                                       # STEP 72
avl0.delete(int2)                                                       # STEP 73
int2 = 11                                                               # STEP 74
result = avl1.find(int1)                                                # STEP 75
avl1.delete(int1)                                                       # STEP 76
int1 = 2                                                                # STEP 77
int3 = 17                                                               # STEP 78
int0 = 15                                                               # STEP 79
avl0.insert(int1)                                                       # STEP 80
avl1.insert(int2)                                                       # STEP 81
int1 = 7                                                                # STEP 82
avl0.delete(int1)                                                       # STEP 83
avl1 == avl1                                                            # STEP 84
avl1 == avl0                                                            # STEP 85
int2 = 6                                                                # STEP 86
int1 = 12                                                               # STEP 87
result = avl0.find(int0)                                                # STEP 88
int0 = 11                                                               # STEP 89
result = avl0.find(int3)                                                # STEP 90
avl1.insert(int3)                                                       # STEP 91
int3 = 10                                                               # STEP 92
avl0.insert(int3)                                                       # STEP 93
avl1.delete(int0)                                                       # STEP 94
avl0.delete(int3)                                                       # STEP 95
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1031d2ab8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
202 BRANCHES COVERED
151 STATEMENTS COVERED

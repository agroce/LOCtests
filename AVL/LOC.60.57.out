Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.332.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  11 [2:0]
-- < 2 [1:0]
---- < 1 [0:0] L
---- > 6 [0:0] L
-- > 16 [1:-1]
---- > 19 [0:0] L
set([1, 2, 6, 11, 16, 19])
  11 [2:0]
-- < 2 [1:0]
---- < 1 [0:0] L
---- > 6 [0:0] L
-- > 16 [1:-1]
---- > 19 [0:0] L
set([1, 2, 6, 11, 16, 19])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104236ab8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 59 steps

SAVING TEST AS failure.332.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 3                                                                 # STEP 0
ACTION: int0 = 3 
int0 = None : <type 'NoneType'>
=> int0 = 3 : <type 'int'>
==================================================
int1 = 4                                                                 # STEP 1
ACTION: int1 = 4 
int1 = None : <type 'NoneType'>
=> int1 = 4 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 2
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x1043a2200> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int2 = 15                                                                # STEP 3
ACTION: int2 = 15 
int2 = None : <type 'NoneType'>
=> int2 = 15 : <type 'int'>
==================================================
avl2.delete(int2)                                                        # STEP 4
ACTION: avl2.delete(int2) 
int2 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1043a2200> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.insert(int2)                                                        # STEP 5
ACTION: avl2.insert(int2) 
int2 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1043a2200> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([15]) : <type 'set'>
==================================================
avl2 == avl2                                                             # STEP 6
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x1043a2200> : <type 'instance'>
avl_REF2 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl2.delete(int0)                                                        # STEP 7
ACTION: avl2.delete(int0) 
int0 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1043a2200> : <type 'instance'>
avl_REF2 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.insert(int0)                                                        # STEP 8
ACTION: avl2.insert(int0) 
int0 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1043a2200> : <type 'instance'>
avl_REF2 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([3, 15]) : <type 'set'>
==================================================
avl2.insert(int0)                                                        # STEP 9
ACTION: avl2.insert(int0) 
int0 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1043a2200> : <type 'instance'>
avl_REF2 = set([3, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl2.insert(int1)                                                       # STEP 10
ACTION: avl2.insert(int1) 
int1 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1043a2200> : <type 'instance'>
avl_REF2 = set([3, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([3, 4, 15]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 11
ACTION: avl2.insert(int0) 
int0 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1043a2200> : <type 'instance'>
avl_REF2 = set([3, 4, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
int1 = 7                                                                # STEP 12
ACTION: int1 = 7 
int1 = 4 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 13
ACTION: avl2.delete(int2) 
int2 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1043a2200> : <type 'instance'>
avl_REF2 = set([3, 4, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([3, 4]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 14
ACTION: avl2.delete(int1) 
int1 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1043a2200> : <type 'instance'>
avl_REF2 = set([3, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int2)                                                       # STEP 15
ACTION: avl2.insert(int2) 
int2 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1043a2200> : <type 'instance'>
avl_REF2 = set([3, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([3, 4, 15]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 16
ACTION: avl2.delete(int0) 
int0 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1043a2200> : <type 'instance'>
avl_REF2 = set([3, 4, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([4, 15]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 17
ACTION: avl2.delete(int0) 
int0 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1043a2200> : <type 'instance'>
avl_REF2 = set([4, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.delete(int2)                                                       # STEP 18
ACTION: avl2.delete(int2) 
int2 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1043a2200> : <type 'instance'>
avl_REF2 = set([4, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([4]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 19
ACTION: avl2.insert(int1) 
int1 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1043a2200> : <type 'instance'>
avl_REF2 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([4, 7]) : <type 'set'>
==================================================
int3 = 2                                                                # STEP 20
ACTION: int3 = 2 
int3 = None : <type 'NoneType'>
=> int3 = 2 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 21
ACTION: avl2.insert(int3) 
int3 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1043a2200> : <type 'instance'>
avl_REF2 = set([4, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([2, 4, 7]) : <type 'set'>
==================================================
int2 = 7                                                                # STEP 22
ACTION: int2 = 7 
int2 = 15 : <type 'int'>
=> int2 = 7 : <type 'int'>
==================================================
avl2 == avl2                                                            # STEP 23
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x1043a2200> : <type 'instance'>
avl_REF2 = set([2, 4, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl2.insert(int2)                                                       # STEP 24
ACTION: avl2.insert(int2) 
int2 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1043a2200> : <type 'instance'>
avl_REF2 = set([2, 4, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl2.delete(int0)                                                       # STEP 25
ACTION: avl2.delete(int0) 
int0 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1043a2200> : <type 'instance'>
avl_REF2 = set([2, 4, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
result = avl2.find(int3)                                                # STEP 26
ACTION: result = avl2.find(int3) 
int3 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1043a2200> : <type 'instance'>
avl_REF2 = set([2, 4, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl2.delete(int3)                                                       # STEP 27
ACTION: avl2.delete(int3) 
int3 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1043a2200> : <type 'instance'>
avl_REF2 = set([2, 4, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([4, 7]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 28
ACTION: avl2.delete(int1) 
int1 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1043a2200> : <type 'instance'>
avl_REF2 = set([4, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([4]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 29
ACTION: avl2.insert(int1) 
int1 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1043a2200> : <type 'instance'>
avl_REF2 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([4, 7]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 30
ACTION: avl2.insert(int0) 
int0 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1043a2200> : <type 'instance'>
avl_REF2 = set([4, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([3, 4, 7]) : <type 'set'>
==================================================
int1 = 17                                                               # STEP 31
ACTION: int1 = 17 
int1 = 7 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 32
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x1043a2200> : <type 'instance'>
avl_REF2 = set([3, 4, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int0)                                                       # STEP 33
ACTION: avl2.delete(int0) 
int0 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1043a2200> : <type 'instance'>
avl_REF2 = set([3, 4, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([4, 7]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 34
ACTION: avl2.insert(int3) 
int3 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1043a2200> : <type 'instance'>
avl_REF2 = set([4, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([2, 4, 7]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 35
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x1043a2200> : <type 'instance'>
avl_REF2 = set([2, 4, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int2)                                                       # STEP 36
ACTION: avl2.delete(int2) 
int2 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1043a2200> : <type 'instance'>
avl_REF2 = set([2, 4, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([2, 4]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 37
ACTION: avl2.delete(int3) 
int3 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1043a2200> : <type 'instance'>
avl_REF2 = set([2, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([4]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 38
ACTION: avl2.delete(int0) 
int0 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1043a2200> : <type 'instance'>
avl_REF2 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.delete(int2)                                                       # STEP 39
ACTION: avl2.delete(int2) 
int2 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1043a2200> : <type 'instance'>
avl_REF2 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.insert(int3)                                                       # STEP 40
ACTION: avl2.insert(int3) 
int3 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1043a2200> : <type 'instance'>
avl_REF2 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([2, 4]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 41
ACTION: avl2.delete(int2) 
int2 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1043a2200> : <type 'instance'>
avl_REF2 = set([2, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int2 = 16                                                               # STEP 42
ACTION: int2 = 16 
int2 = 7 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 43
ACTION: avl2.delete(int1) 
int1 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1043a2200> : <type 'instance'>
avl_REF2 = set([2, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.delete(int1)                                                       # STEP 44
ACTION: avl2.delete(int1) 
int1 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1043a2200> : <type 'instance'>
avl_REF2 = set([2, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int1)                                                       # STEP 45
ACTION: avl2.insert(int1) 
int1 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1043a2200> : <type 'instance'>
avl_REF2 = set([2, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([17, 2, 4]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 46
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x1043a2200> : <type 'instance'>
avl_REF2 = set([17, 2, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl1 = avl.AVLTree()                                                    # STEP 47
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x10593a8c0> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 48
ACTION: avl1.delete(int1) 
int1 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10593a8c0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.delete(int1)                                                       # STEP 49
ACTION: avl1.delete(int1) 
int1 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10593a8c0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl2.insert(int1)                                                       # STEP 50
ACTION: avl2.insert(int1) 
int1 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1043a2200> : <type 'instance'>
avl_REF2 = set([17, 2, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
int3 = 10                                                               # STEP 51
ACTION: int3 = 10 
int3 = 2 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 52
ACTION: avl1.delete(int2) 
int2 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10593a8c0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl2.delete(int3)                                                       # STEP 53
ACTION: avl2.delete(int3) 
int3 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1043a2200> : <type 'instance'>
avl_REF2 = set([17, 2, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
result = avl1.inorder()                                                 # STEP 54
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x10593a8c0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.delete(int2)                                                       # STEP 55
ACTION: avl1.delete(int2) 
int2 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10593a8c0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int3 = 19                                                               # STEP 56
ACTION: int3 = 19 
int3 = 10 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 57
ACTION: avl2.insert(int0) 
int0 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1043a2200> : <type 'instance'>
avl_REF2 = set([17, 2, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([17, 2, 3, 4]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 58
ACTION: avl2.delete(int1) 
int1 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1043a2200> : <type 'instance'>
avl_REF2 = set([17, 2, 3, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([2, 3, 4]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105907710>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
  17 [2:0]
-- < 5 [1:0]
---- < 1 [0:0] L
---- > 7 [0:0] L
-- > 18 [1:-1]
---- > 20 [0:0] L
set([1, 5, 7, 17, 18, 20])
TEST #4 STEP #47 (0:00:30.024184) Fri Apr 28 06:05:12 2017 [ 160 stmts 212 branches ]
  11 [2:0]
-- < 8 [1:1]
---- < 5 [0:0] L
-- > 18 [1:0]
---- < 16 [0:0] L
---- > 20 [0:0] L
set([5, 8, 11, 16, 18, 20])
  9 [2:0]
-- < 4 [1:1]
---- < 1 [0:0] L
-- > 12 [1:0]
---- < 10 [0:0] L
---- > 19 [0:0] L
set([1, 4, 9, 10, 12, 19])
  9 [2:0]
-- < 4 [1:1]
---- < 1 [0:0] L
-- > 12 [1:0]
---- < 10 [0:0] L
---- > 19 [0:0] L
set([1, 4, 9, 10, 12, 19])
  13 [2:0]
-- < 4 [1:0]
---- < 1 [0:0] L
---- > 7 [0:0] L
-- > 16 [1:1]
---- < 15 [0:0] L
set([1, 4, 7, 13, 15, 16])
  12 [3:1]
-- < 2 [2:-1]
---- < 1 [0:0] L
---- > 7 [1:1]
------ < 4 [0:0] L
-- > 16 [1:1]
---- < 15 [0:0] L
set([1, 2, 4, 7, 12, 15, 16])
  12 [2:0]
-- < 9 [1:0]
---- < 3 [0:0] L
---- > 11 [0:0] L
-- > 15 [1:-1]
---- > 18 [0:0] L
set([3, 9, 11, 12, 15, 18])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1047364d0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 33 steps

SAVING TEST AS failure.332.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 3                                                                 # STEP 0
ACTION: int2 = 3 
int2 = None : <type 'NoneType'>
=> int2 = 3 : <type 'int'>
==================================================
int3 = 9                                                                 # STEP 1
ACTION: int3 = 9 
int3 = None : <type 'NoneType'>
=> int3 = 9 : <type 'int'>
==================================================
int0 = 15                                                                # STEP 2
ACTION: int0 = 15 
int0 = None : <type 'NoneType'>
=> int0 = 15 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 3
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x1047367a0> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1 == avl1                                                             # STEP 4
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x1047367a0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.insert(int3)                                                        # STEP 5
ACTION: avl1.insert(int3) 
int3 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1047367a0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([9]) : <type 'set'>
==================================================
avl1.insert(int0)                                                        # STEP 6
ACTION: avl1.insert(int0) 
int0 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1047367a0> : <type 'instance'>
avl_REF1 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([9, 15]) : <type 'set'>
==================================================
int0 = 18                                                                # STEP 7
ACTION: int0 = 18 
int0 = 15 : <type 'int'>
=> int0 = 18 : <type 'int'>
==================================================
int1 = 12                                                                # STEP 8
ACTION: int1 = 12 
int1 = None : <type 'NoneType'>
=> int1 = 12 : <type 'int'>
==================================================
avl1.insert(int0)                                                        # STEP 9
ACTION: avl1.insert(int0) 
int0 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1047367a0> : <type 'instance'>
avl_REF1 = set([9, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([9, 18, 15]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 10
ACTION: avl1.delete(int2) 
int2 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1047367a0> : <type 'instance'>
avl_REF1 = set([9, 18, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.insert(int0)                                                       # STEP 11
ACTION: avl1.insert(int0) 
int0 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1047367a0> : <type 'instance'>
avl_REF1 = set([9, 18, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
result = avl1.find(int0)                                                # STEP 12
ACTION: result = avl1.find(int0) 
int0 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1047367a0> : <type 'instance'>
avl_REF1 = set([9, 18, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl1.insert(int1)                                                       # STEP 13
ACTION: avl1.insert(int1) 
int1 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1047367a0> : <type 'instance'>
avl_REF1 = set([9, 18, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([9, 18, 12, 15]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 14
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1047367a0> : <type 'instance'>
avl_REF1 = set([9, 18, 12, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
result = avl1.inorder()                                                 # STEP 15
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1047367a0> : <type 'instance'>
avl_REF1 = set([9, 18, 12, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int0)                                                       # STEP 16
ACTION: avl1.insert(int0) 
int0 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1047367a0> : <type 'instance'>
avl_REF1 = set([9, 18, 12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1 == avl1                                                            # STEP 17
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x1047367a0> : <type 'instance'>
avl_REF1 = set([9, 18, 12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.insert(int2)                                                       # STEP 18
ACTION: avl1.insert(int2) 
int2 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1047367a0> : <type 'instance'>
avl_REF1 = set([9, 18, 12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([9, 18, 3, 12, 15]) : <type 'set'>
==================================================
result = avl1.find(int0)                                                # STEP 19
ACTION: result = avl1.find(int0) 
int0 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1047367a0> : <type 'instance'>
avl_REF1 = set([9, 18, 3, 12, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
int1 = 7                                                                # STEP 20
ACTION: int1 = 7 
int1 = 12 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
int3 = 14                                                               # STEP 21
ACTION: int3 = 14 
int3 = 9 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 22
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1047367a0> : <type 'instance'>
avl_REF1 = set([9, 18, 3, 12, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int2 = 1                                                                # STEP 23
ACTION: int2 = 1 
int2 = 3 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
int0 = 11                                                               # STEP 24
ACTION: int0 = 11 
int0 = 18 : <type 'int'>
=> int0 = 11 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 25
ACTION: avl1.insert(int0) 
int0 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1047367a0> : <type 'instance'>
avl_REF1 = set([9, 18, 3, 12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([3, 9, 11, 12, 15, 18]) : <type 'set'>
==================================================
avl1.display()                                                          # STEP 26
ACTION: avl1.display() 
avl1 = <avl.AVLTree instance at 0x1047367a0> : <type 'instance'>
avl_REF1 = set([3, 9, 11, 12, 15, 18]) : <type 'set'>
  12 [2:0]
-- < 9 [1:0]
---- < 3 [0:0] L
---- > 11 [0:0] L
-- > 15 [1:-1]
---- > 18 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([3, 9, 11, 12, 15, 18])
==================================================
avl1.insert(int2)                                                       # STEP 27
ACTION: avl1.insert(int2) 
int2 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1047367a0> : <type 'instance'>
avl_REF1 = set([3, 9, 11, 12, 15, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([1, 3, 9, 11, 12, 15, 18]) : <type 'set'>
==================================================
result = avl1.find(int1)                                                # STEP 28
ACTION: result = avl1.find(int1) 
int1 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1047367a0> : <type 'instance'>
avl_REF1 = set([1, 3, 9, 11, 12, 15, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
result = avl1.find(int1)                                                # STEP 29
ACTION: result = avl1.find(int1) 
int1 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1047367a0> : <type 'instance'>
avl_REF1 = set([1, 3, 9, 11, 12, 15, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int2 = 14                                                               # STEP 30
ACTION: int2 = 14 
int2 = 1 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
result = avl1.find(int1)                                                # STEP 31
ACTION: result = avl1.find(int1) 
int1 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1047367a0> : <type 'instance'>
avl_REF1 = set([1, 3, 9, 11, 12, 15, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl1.delete(int0)                                                       # STEP 32
ACTION: avl1.delete(int0) 
int0 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1047367a0> : <type 'instance'>
avl_REF1 = set([1, 3, 9, 11, 12, 15, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([1, 3, 9, 12, 15, 18]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104346f38>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 0
STOPPING TESTING DUE TO TIMEOUT
8.51713607058 PERCENT COVERED
61.5226130486 TOTAL RUNTIME
9 EXECUTED
692 TOTAL TEST OPERATIONS
26.8838472366 TIME SPENT EXECUTING TEST OPERATIONS
0.0761377811432 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
27.0529046059 TIME SPENT CHECKING PROPERTIES
53.9367518425 TOTAL TIME SPENT RUNNING SUT
0.00488424301147 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
2 FAILED
0 REPEATS OF FAILURES
2 ACTUAL DISTINCT FAILURES

FAILURE 0
int0 = 3                                                                 # STEP 0
int1 = 4                                                                 # STEP 1
avl2 = avl.AVLTree()                                                     # STEP 2
int2 = 15                                                                # STEP 3
avl2.delete(int2)                                                        # STEP 4
avl2.insert(int2)                                                        # STEP 5
avl2 == avl2                                                             # STEP 6
avl2.delete(int0)                                                        # STEP 7
avl2.insert(int0)                                                        # STEP 8
avl2.insert(int0)                                                        # STEP 9
avl2.insert(int1)                                                       # STEP 10
avl2.insert(int0)                                                       # STEP 11
int1 = 7                                                                # STEP 12
avl2.delete(int2)                                                       # STEP 13
avl2.delete(int1)                                                       # STEP 14
avl2.insert(int2)                                                       # STEP 15
avl2.delete(int0)                                                       # STEP 16
avl2.delete(int0)                                                       # STEP 17
avl2.delete(int2)                                                       # STEP 18
avl2.insert(int1)                                                       # STEP 19
int3 = 2                                                                # STEP 20
avl2.insert(int3)                                                       # STEP 21
int2 = 7                                                                # STEP 22
avl2 == avl2                                                            # STEP 23
avl2.insert(int2)                                                       # STEP 24
avl2.delete(int0)                                                       # STEP 25
result = avl2.find(int3)                                                # STEP 26
avl2.delete(int3)                                                       # STEP 27
avl2.delete(int1)                                                       # STEP 28
avl2.insert(int1)                                                       # STEP 29
avl2.insert(int0)                                                       # STEP 30
int1 = 17                                                               # STEP 31
result = avl2.inorder()                                                 # STEP 32
avl2.delete(int0)                                                       # STEP 33
avl2.insert(int3)                                                       # STEP 34
result = avl2.inorder()                                                 # STEP 35
avl2.delete(int2)                                                       # STEP 36
avl2.delete(int3)                                                       # STEP 37
avl2.delete(int0)                                                       # STEP 38
avl2.delete(int2)                                                       # STEP 39
avl2.insert(int3)                                                       # STEP 40
avl2.delete(int2)                                                       # STEP 41
int2 = 16                                                               # STEP 42
avl2.delete(int1)                                                       # STEP 43
avl2.delete(int1)                                                       # STEP 44
avl2.insert(int1)                                                       # STEP 45
result = avl2.inorder()                                                 # STEP 46
avl1 = avl.AVLTree()                                                    # STEP 47
avl1.delete(int1)                                                       # STEP 48
avl1.delete(int1)                                                       # STEP 49
avl2.insert(int1)                                                       # STEP 50
int3 = 10                                                               # STEP 51
avl1.delete(int2)                                                       # STEP 52
avl2.delete(int3)                                                       # STEP 53
result = avl1.inorder()                                                 # STEP 54
avl1.delete(int2)                                                       # STEP 55
int3 = 19                                                               # STEP 56
avl2.insert(int0)                                                       # STEP 57
avl2.delete(int1)                                                       # STEP 58
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105907710>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE 1
int2 = 3                                                                 # STEP 0
int3 = 9                                                                 # STEP 1
int0 = 15                                                                # STEP 2
avl1 = avl.AVLTree()                                                     # STEP 3
avl1 == avl1                                                             # STEP 4
avl1.insert(int3)                                                        # STEP 5
avl1.insert(int0)                                                        # STEP 6
int0 = 18                                                                # STEP 7
int1 = 12                                                                # STEP 8
avl1.insert(int0)                                                        # STEP 9
avl1.delete(int2)                                                       # STEP 10
avl1.insert(int0)                                                       # STEP 11
result = avl1.find(int0)                                                # STEP 12
avl1.insert(int1)                                                       # STEP 13
result = avl1.inorder()                                                 # STEP 14
result = avl1.inorder()                                                 # STEP 15
avl1.insert(int0)                                                       # STEP 16
avl1 == avl1                                                            # STEP 17
avl1.insert(int2)                                                       # STEP 18
result = avl1.find(int0)                                                # STEP 19
int1 = 7                                                                # STEP 20
int3 = 14                                                               # STEP 21
result = avl1.inorder()                                                 # STEP 22
int2 = 1                                                                # STEP 23
int0 = 11                                                               # STEP 24
avl1.insert(int0)                                                       # STEP 25
avl1.display()                                                          # STEP 26
avl1.insert(int2)                                                       # STEP 27
result = avl1.find(int1)                                                # STEP 28
result = avl1.find(int1)                                                # STEP 29
int2 = 14                                                               # STEP 30
result = avl1.find(int1)                                                # STEP 31
avl1.delete(int0)                                                       # STEP 32
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104346f38>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
214 BRANCHES COVERED
161 STATEMENTS COVERED

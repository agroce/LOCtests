Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.649.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104dec5f0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 83 steps

SAVING TEST AS failure.649.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 7                                                                 # STEP 0
ACTION: int1 = 7 
int1 = None : <type 'NoneType'>
=> int1 = 7 : <type 'int'>
==================================================
int3 = 7                                                                 # STEP 1
ACTION: int3 = 7 
int3 = None : <type 'NoneType'>
=> int3 = 7 : <type 'int'>
==================================================
int0 = 12                                                                # STEP 2
ACTION: int0 = 12 
int0 = None : <type 'NoneType'>
=> int0 = 12 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 3
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x104dc2d88> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int2 = 8                                                                 # STEP 4
ACTION: int2 = 8 
int2 = None : <type 'NoneType'>
=> int2 = 8 : <type 'int'>
==================================================
avl1.delete(int0)                                                        # STEP 5
ACTION: avl1.delete(int0) 
int0 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104dc2d88> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
result = avl1.find(int1)                                                 # STEP 6
ACTION: result = avl1.find(int1) 
int1 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104dc2d88> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl2 = avl.AVLTree()                                                     # STEP 7
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x104fcdc20> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int1 = 7                                                                 # STEP 8
ACTION: int1 = 7 
int1 = 7 : <type 'int'>
==================================================
int0 = 4                                                                 # STEP 9
ACTION: int0 = 4 
int0 = 12 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
result = avl1.find(int1)                                                # STEP 10
ACTION: result = avl1.find(int1) 
int1 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104dc2d88> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl1.delete(int2)                                                       # STEP 11
ACTION: avl1.delete(int2) 
int2 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104dc2d88> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int1 = 1                                                                # STEP 12
ACTION: int1 = 1 
int1 = 7 : <type 'int'>
=> int1 = 1 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 13
ACTION: avl2.delete(int1) 
int1 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104fcdc20> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
result = avl2.find(int1)                                                # STEP 14
ACTION: result = avl2.find(int1) 
int1 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104fcdc20> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int1 = 3                                                                # STEP 15
ACTION: int1 = 3 
int1 = 1 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
int2 = 3                                                                # STEP 16
ACTION: int2 = 3 
int2 = 8 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 17
ACTION: avl1.delete(int3) 
int3 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104dc2d88> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int3 = 6                                                                # STEP 18
ACTION: int3 = 6 
int3 = 7 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 19
ACTION: avl2.insert(int3) 
int3 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104fcdc20> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([6]) : <type 'set'>
==================================================
avl1 == avl2                                                            # STEP 20
ACTION: avl1 == avl2 
avl1 = <avl.AVLTree instance at 0x104dc2d88> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x104fcdc20> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
avl2 == avl2                                                            # STEP 21
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x104fcdc20> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
int3 = 5                                                                # STEP 22
ACTION: int3 = 5 
int3 = 6 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 23
ACTION: avl1.insert(int1) 
int1 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104dc2d88> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([3]) : <type 'set'>
==================================================
int1 = 18                                                               # STEP 24
ACTION: int1 = 18 
int1 = 3 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 25
ACTION: avl1.insert(int2) 
int2 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104dc2d88> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
result = avl1.find(int0)                                                # STEP 26
ACTION: result = avl1.find(int0) 
int0 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104dc2d88> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl1.delete(int1)                                                       # STEP 27
ACTION: avl1.delete(int1) 
int1 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104dc2d88> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
result = avl2.find(int1)                                                # STEP 28
ACTION: result = avl2.find(int1) 
int1 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104fcdc20> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
result = avl1.find(int0)                                                # STEP 29
ACTION: result = avl1.find(int0) 
int0 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104dc2d88> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
int1 = 13                                                               # STEP 30
ACTION: int1 = 13 
int1 = 18 : <type 'int'>
=> int1 = 13 : <type 'int'>
==================================================
int2 = 11                                                               # STEP 31
ACTION: int2 = 11 
int2 = 3 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 32
ACTION: avl1.insert(int1) 
int1 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104dc2d88> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([3, 13]) : <type 'set'>
==================================================
int1 = 7                                                                # STEP 33
ACTION: int1 = 7 
int1 = 13 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 34
ACTION: avl1.insert(int3) 
int3 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104dc2d88> : <type 'instance'>
avl_REF1 = set([3, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([3, 13, 5]) : <type 'set'>
==================================================
int0 = 14                                                               # STEP 35
ACTION: int0 = 14 
int0 = 4 : <type 'int'>
=> int0 = 14 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 36
ACTION: avl1.insert(int1) 
int1 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104dc2d88> : <type 'instance'>
avl_REF1 = set([3, 13, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([7, 3, 13, 5]) : <type 'set'>
==================================================
int3 = 13                                                               # STEP 37
ACTION: int3 = 13 
int3 = 5 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
result = avl1.find(int1)                                                # STEP 38
ACTION: result = avl1.find(int1) 
int1 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104dc2d88> : <type 'instance'>
avl_REF1 = set([7, 3, 13, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl2 == avl1                                                            # STEP 39
ACTION: avl2 == avl1 
avl2 = <avl.AVLTree instance at 0x104fcdc20> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x104dc2d88> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
avl_REF1 = set([7, 3, 13, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
avl1.insert(int3)                                                       # STEP 40
ACTION: avl1.insert(int3) 
int3 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104dc2d88> : <type 'instance'>
avl_REF1 = set([7, 3, 13, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
int3 = 14                                                               # STEP 41
ACTION: int3 = 14 
int3 = 13 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
avl2 == avl1                                                            # STEP 42
ACTION: avl2 == avl1 
avl2 = <avl.AVLTree instance at 0x104fcdc20> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x104dc2d88> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
avl_REF1 = set([7, 3, 13, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
result = avl2.find(int0)                                                # STEP 43
ACTION: result = avl2.find(int0) 
int0 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104fcdc20> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
result = avl1.find(int1)                                                # STEP 44
ACTION: result = avl1.find(int1) 
int1 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104dc2d88> : <type 'instance'>
avl_REF1 = set([7, 3, 13, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int1 = 7                                                                # STEP 45
ACTION: int1 = 7 
int1 = 7 : <type 'int'>
==================================================
int0 = 3                                                                # STEP 46
ACTION: int0 = 3 
int0 = 14 : <type 'int'>
=> int0 = 3 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 47
ACTION: avl2.delete(int3) 
int3 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104fcdc20> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl1.delete(int3)                                                       # STEP 48
ACTION: avl1.delete(int3) 
int3 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104dc2d88> : <type 'instance'>
avl_REF1 = set([7, 3, 13, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl2.insert(int3)                                                       # STEP 49
ACTION: avl2.insert(int3) 
int3 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104fcdc20> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([14, 6]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 50
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104fcdc20> : <type 'instance'>
avl_REF2 = set([14, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl2.find(int0)                                                # STEP 51
ACTION: result = avl2.find(int0) 
int0 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104fcdc20> : <type 'instance'>
avl_REF2 = set([14, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
int0 = 18                                                               # STEP 52
ACTION: int0 = 18 
int0 = 3 : <type 'int'>
=> int0 = 18 : <type 'int'>
==================================================
int3 = 4                                                                # STEP 53
ACTION: int3 = 4 
int3 = 14 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 54
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x104dc2d88> : <type 'instance'>
avl_REF1 = set([7, 3, 13, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl2 = avl.AVLTree()                                                    # STEP 55
ACTION: avl2 = avl.AVLTree() 
avl2 = <avl.AVLTree instance at 0x104fcdc20> : <type 'instance'>
avl_REF2 = set([14, 6]) : <type 'set'>
=> avl2 = <avl.AVLTree instance at 0x104856cb0> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 56
ACTION: avl1.insert(int2) 
int2 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104dc2d88> : <type 'instance'>
avl_REF1 = set([7, 3, 13, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([7, 11, 3, 13, 5]) : <type 'set'>
==================================================
avl2 == avl1                                                            # STEP 57
ACTION: avl2 == avl1 
avl2 = <avl.AVLTree instance at 0x104856cb0> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x104dc2d88> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
avl_REF1 = set([7, 11, 3, 13, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
avl2.insert(int3)                                                       # STEP 58
ACTION: avl2.insert(int3) 
int3 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104856cb0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([4]) : <type 'set'>
==================================================
int2 = 16                                                               # STEP 59
ACTION: int2 = 16 
int2 = 11 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
avl2 == avl2                                                            # STEP 60
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x104856cb0> : <type 'instance'>
avl_REF2 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl1.delete(int0)                                                       # STEP 61
ACTION: avl1.delete(int0) 
int0 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104dc2d88> : <type 'instance'>
avl_REF1 = set([7, 11, 3, 13, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int3 = 19                                                               # STEP 62
ACTION: int3 = 19 
int3 = 4 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 63
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x104dc2d88> : <type 'instance'>
avl_REF1 = set([7, 11, 3, 13, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.insert(int2)                                                       # STEP 64
ACTION: avl1.insert(int2) 
int2 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104dc2d88> : <type 'instance'>
avl_REF1 = set([7, 11, 3, 13, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([3, 5, 7, 11, 13, 16]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 65
ACTION: avl2.delete(int1) 
int1 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104856cb0> : <type 'instance'>
avl_REF2 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int0 = 20                                                               # STEP 66
ACTION: int0 = 20 
int0 = 18 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
int1 = 3                                                                # STEP 67
ACTION: int1 = 3 
int1 = 7 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 68
ACTION: avl2.delete(int3) 
int3 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104856cb0> : <type 'instance'>
avl_REF2 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int3 = 16                                                               # STEP 69
ACTION: int3 = 16 
int3 = 19 : <type 'int'>
=> int3 = 16 : <type 'int'>
==================================================
int2 = 5                                                                # STEP 70
ACTION: int2 = 5 
int2 = 16 : <type 'int'>
=> int2 = 5 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 71
ACTION: avl2.delete(int2) 
int2 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104856cb0> : <type 'instance'>
avl_REF2 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int2 = 4                                                                # STEP 72
ACTION: int2 = 4 
int2 = 5 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
avl1 == avl2                                                            # STEP 73
ACTION: avl1 == avl2 
avl1 = <avl.AVLTree instance at 0x104dc2d88> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x104856cb0> : <type 'instance'>
avl_REF1 = set([3, 5, 7, 11, 13, 16]) : <type 'set'>
avl_REF2 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
avl1.insert(int2)                                                       # STEP 74
ACTION: avl1.insert(int2) 
int2 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104dc2d88> : <type 'instance'>
avl_REF1 = set([3, 5, 7, 11, 13, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([3, 4, 5, 7, 11, 13, 16]) : <type 'set'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 75
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x105913b48> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl1 == avl0                                                            # STEP 76
ACTION: avl1 == avl0 
avl1 = <avl.AVLTree instance at 0x104dc2d88> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x105913b48> : <type 'instance'>
avl_REF1 = set([3, 4, 5, 7, 11, 13, 16]) : <type 'set'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
avl1 == avl2                                                            # STEP 77
ACTION: avl1 == avl2 
avl1 = <avl.AVLTree instance at 0x104dc2d88> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x104856cb0> : <type 'instance'>
avl_REF1 = set([3, 4, 5, 7, 11, 13, 16]) : <type 'set'>
avl_REF2 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
int2 = 16                                                               # STEP 78
ACTION: int2 = 16 
int2 = 4 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
avl2 == avl2                                                            # STEP 79
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x104856cb0> : <type 'instance'>
avl_REF2 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl1 == avl2                                                            # STEP 80
ACTION: avl1 == avl2 
avl1 = <avl.AVLTree instance at 0x104dc2d88> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x104856cb0> : <type 'instance'>
avl_REF1 = set([3, 4, 5, 7, 11, 13, 16]) : <type 'set'>
avl_REF2 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
result = avl2.inorder()                                                 # STEP 81
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104856cb0> : <type 'instance'>
avl_REF2 = set([4]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl1.delete(int3)                                                       # STEP 82
ACTION: avl1.delete(int3) 
int3 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104dc2d88> : <type 'instance'>
avl_REF1 = set([3, 4, 5, 7, 11, 13, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([3, 4, 5, 7, 11, 13]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104b849e0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
  15 [2:0]
-- < 9 [1:0]
---- < 2 [0:0] L
---- > 13 [0:0] L
-- > 20 [1:1]
---- < 19 [0:0] L
set([2, 9, 13, 15, 19, 20])
TEST #3 STEP #87 (0:00:30.065668) Fri Apr 28 06:55:06 2017 [ 161 stmts 214 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104bb7fc8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 47 steps

SAVING TEST AS failure.649.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
avl2 = avl.AVLTree()                                                     # STEP 0
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x1059005a8> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int3 = 5                                                                 # STEP 1
ACTION: int3 = 5 
int3 = None : <type 'NoneType'>
=> int3 = 5 : <type 'int'>
==================================================
avl2.insert(int3)                                                        # STEP 2
ACTION: avl2.insert(int3) 
int3 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1059005a8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([5]) : <type 'set'>
==================================================
int0 = 17                                                                # STEP 3
ACTION: int0 = 17 
int0 = None : <type 'NoneType'>
=> int0 = 17 : <type 'int'>
==================================================
int1 = 20                                                                # STEP 4
ACTION: int1 = 20 
int1 = None : <type 'NoneType'>
=> int1 = 20 : <type 'int'>
==================================================
int3 = 5                                                                 # STEP 5
ACTION: int3 = 5 
int3 = 5 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 6
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x104fefbd8> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
result = avl0.find(int1)                                                 # STEP 7
ACTION: result = avl0.find(int1) 
int1 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104fefbd8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl2.delete(int3)                                                        # STEP 8
ACTION: avl2.delete(int3) 
int3 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1059005a8> : <type 'instance'>
avl_REF2 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.delete(int0)                                                        # STEP 9
ACTION: avl2.delete(int0) 
int0 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1059005a8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int1 = 16                                                               # STEP 10
ACTION: int1 = 16 
int1 = 20 : <type 'int'>
=> int1 = 16 : <type 'int'>
==================================================
int0 = 16                                                               # STEP 11
ACTION: int0 = 16 
int0 = 17 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
int2 = 2                                                                # STEP 12
ACTION: int2 = 2 
int2 = None : <type 'NoneType'>
=> int2 = 2 : <type 'int'>
==================================================
result = avl2.find(int2)                                                # STEP 13
ACTION: result = avl2.find(int2) 
int2 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1059005a8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int3 = 19                                                               # STEP 14
ACTION: int3 = 19 
int3 = 5 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
int2 = 7                                                                # STEP 15
ACTION: int2 = 7 
int2 = 2 : <type 'int'>
=> int2 = 7 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 16
ACTION: avl2.delete(int0) 
int0 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1059005a8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int0 = 2                                                                # STEP 17
ACTION: int0 = 2 
int0 = 16 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
result = avl2.find(int0)                                                # STEP 18
ACTION: result = avl2.find(int0) 
int0 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1059005a8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
int0 = 6                                                                # STEP 19
ACTION: int0 = 6 
int0 = 2 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 20
ACTION: avl0.insert(int3) 
int3 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104fefbd8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([19]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 21
ACTION: avl2.insert(int3) 
int3 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1059005a8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([19]) : <type 'set'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 22
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x104b83680> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 23
ACTION: avl2.insert(int1) 
int1 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1059005a8> : <type 'instance'>
avl_REF2 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([16, 19]) : <type 'set'>
==================================================
int1 = 10                                                               # STEP 24
ACTION: int1 = 10 
int1 = 16 : <type 'int'>
=> int1 = 10 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 25
ACTION: avl1.insert(int3) 
int3 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104b83680> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([19]) : <type 'set'>
==================================================
avl0 == avl1                                                            # STEP 26
ACTION: avl0 == avl1 
avl0 = <avl.AVLTree instance at 0x104fefbd8> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x104b83680> : <type 'instance'>
avl_REF0 = set([19]) : <type 'set'>
avl_REF1 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF1 
==================================================
int3 = 3                                                                # STEP 27
ACTION: int3 = 3 
int3 = 19 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 28
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104b83680> : <type 'instance'>
avl_REF1 = set([19]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl0.insert(int0)                                                       # STEP 29
ACTION: avl0.insert(int0) 
int0 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104fefbd8> : <type 'instance'>
avl_REF0 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([19, 6]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 30
ACTION: avl2.insert(int0) 
int0 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1059005a8> : <type 'instance'>
avl_REF2 = set([16, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([16, 19, 6]) : <type 'set'>
==================================================
avl0 == avl1                                                            # STEP 31
ACTION: avl0 == avl1 
avl0 = <avl.AVLTree instance at 0x104fefbd8> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x104b83680> : <type 'instance'>
avl_REF0 = set([19, 6]) : <type 'set'>
avl_REF1 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF1 
==================================================
result = avl2.find(int2)                                                # STEP 32
ACTION: result = avl2.find(int2) 
int2 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1059005a8> : <type 'instance'>
avl_REF2 = set([16, 19, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl1.insert(int1)                                                       # STEP 33
ACTION: avl1.insert(int1) 
int1 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104b83680> : <type 'instance'>
avl_REF1 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([10, 19]) : <type 'set'>
==================================================
int2 = 2                                                                # STEP 34
ACTION: int2 = 2 
int2 = 7 : <type 'int'>
=> int2 = 2 : <type 'int'>
==================================================
int1 = 16                                                               # STEP 35
ACTION: int1 = 16 
int1 = 10 : <type 'int'>
=> int1 = 16 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 36
ACTION: avl0.delete(int0) 
int0 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104fefbd8> : <type 'instance'>
avl_REF0 = set([19, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([19]) : <type 'set'>
==================================================
avl2 == avl0                                                            # STEP 37
ACTION: avl2 == avl0 
avl2 = <avl.AVLTree instance at 0x1059005a8> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x104fefbd8> : <type 'instance'>
avl_REF2 = set([16, 19, 6]) : <type 'set'>
avl_REF0 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF0 
==================================================
result = avl2.find(int1)                                                # STEP 38
ACTION: result = avl2.find(int1) 
int1 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1059005a8> : <type 'instance'>
avl_REF2 = set([16, 19, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl1.insert(int2)                                                       # STEP 39
ACTION: avl1.insert(int2) 
int2 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104b83680> : <type 'instance'>
avl_REF1 = set([10, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([10, 19, 2]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 40
ACTION: avl0.delete(int0) 
int0 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104fefbd8> : <type 'instance'>
avl_REF0 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl2 == avl2                                                            # STEP 41
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x1059005a8> : <type 'instance'>
avl_REF2 = set([16, 19, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
int0 = 14                                                               # STEP 42
ACTION: int0 = 14 
int0 = 6 : <type 'int'>
=> int0 = 14 : <type 'int'>
==================================================
int2 = 12                                                               # STEP 43
ACTION: int2 = 12 
int2 = 2 : <type 'int'>
=> int2 = 12 : <type 'int'>
==================================================
result = avl0.find(int1)                                                # STEP 44
ACTION: result = avl0.find(int1) 
int1 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104fefbd8> : <type 'instance'>
avl_REF0 = set([19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl2.insert(int3)                                                       # STEP 45
ACTION: avl2.insert(int3) 
int3 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1059005a8> : <type 'instance'>
avl_REF2 = set([16, 19, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([16, 3, 19, 6]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 46
ACTION: avl2.delete(int1) 
int1 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1059005a8> : <type 'instance'>
avl_REF2 = set([16, 3, 19, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([3, 19, 6]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104ffca70>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
  5 [2:0]
-- < 3 [1:0]
---- < 1 [0:0] L
---- > 4 [0:0] L
-- > 10 [1:0]
---- < 9 [0:0] L
---- > 20 [0:0] L
set([1, 3, 4, 5, 9, 10, 20])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104b8f1b8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 57 steps

SAVING TEST AS failure.649.test.2
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 18                                                                # STEP 0
ACTION: int1 = 18 
int1 = None : <type 'NoneType'>
=> int1 = 18 : <type 'int'>
==================================================
int3 = 20                                                                # STEP 1
ACTION: int3 = 20 
int3 = None : <type 'NoneType'>
=> int3 = 20 : <type 'int'>
==================================================
int0 = 8                                                                 # STEP 2
ACTION: int0 = 8 
int0 = None : <type 'NoneType'>
=> int0 = 8 : <type 'int'>
==================================================
int2 = 14                                                                # STEP 3
ACTION: int2 = 14 
int2 = None : <type 'NoneType'>
=> int2 = 14 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x104b8f710> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int0)                                                        # STEP 5
ACTION: avl2.insert(int0) 
int0 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b8f710> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([8]) : <type 'set'>
==================================================
int0 = 15                                                                # STEP 6
ACTION: int0 = 15 
int0 = 8 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 7
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x104b88050> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl2.delete(int1)                                                        # STEP 8
ACTION: avl2.delete(int1) 
int1 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b8f710> : <type 'instance'>
avl_REF2 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int1 = 5                                                                 # STEP 9
ACTION: int1 = 5 
int1 = 18 : <type 'int'>
=> int1 = 5 : <type 'int'>
==================================================
result = avl0.find(int2)                                                # STEP 10
ACTION: result = avl0.find(int2) 
int2 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104b88050> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
int2 = 16                                                               # STEP 11
ACTION: int2 = 16 
int2 = 14 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
avl2 == avl0                                                            # STEP 12
ACTION: avl2 == avl0 
avl2 = <avl.AVLTree instance at 0x104b8f710> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x104b88050> : <type 'instance'>
avl_REF2 = set([8]) : <type 'set'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF0 
==================================================
avl0 == avl2                                                            # STEP 13
ACTION: avl0 == avl2 
avl0 = <avl.AVLTree instance at 0x104b88050> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x104b8f710> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
avl_REF2 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
result = avl0.find(int1)                                                # STEP 14
ACTION: result = avl0.find(int1) 
int1 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104b88050> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
result = avl0.find(int2)                                                # STEP 15
ACTION: result = avl0.find(int2) 
int2 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104b88050> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
int1 = 16                                                               # STEP 16
ACTION: int1 = 16 
int1 = 5 : <type 'int'>
=> int1 = 16 : <type 'int'>
==================================================
result = avl0.find(int0)                                                # STEP 17
ACTION: result = avl0.find(int0) 
int0 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104b88050> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
int0 = 13                                                               # STEP 18
ACTION: int0 = 13 
int0 = 15 : <type 'int'>
=> int0 = 13 : <type 'int'>
==================================================
int2 = 19                                                               # STEP 19
ACTION: int2 = 19 
int2 = 16 : <type 'int'>
=> int2 = 19 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 20
ACTION: avl0.insert(int2) 
int2 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104b88050> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([19]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 21
ACTION: avl2.insert(int0) 
int0 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b8f710> : <type 'instance'>
avl_REF2 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([8, 13]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 22
ACTION: avl0.insert(int2) 
int2 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104b88050> : <type 'instance'>
avl_REF0 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl2.insert(int0)                                                       # STEP 23
ACTION: avl2.insert(int0) 
int0 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b8f710> : <type 'instance'>
avl_REF2 = set([8, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl0.insert(int0)                                                       # STEP 24
ACTION: avl0.insert(int0) 
int0 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104b88050> : <type 'instance'>
avl_REF0 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([19, 13]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 25
ACTION: avl0.delete(int2) 
int2 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104b88050> : <type 'instance'>
avl_REF0 = set([19, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([13]) : <type 'set'>
==================================================
int0 = 17                                                               # STEP 26
ACTION: int0 = 17 
int0 = 13 : <type 'int'>
=> int0 = 17 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 27
ACTION: avl2.delete(int3) 
int3 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b8f710> : <type 'instance'>
avl_REF2 = set([8, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
result = avl2.find(int0)                                                # STEP 28
ACTION: result = avl2.find(int0) 
int0 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b8f710> : <type 'instance'>
avl_REF2 = set([8, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
int2 = 18                                                               # STEP 29
ACTION: int2 = 18 
int2 = 19 : <type 'int'>
=> int2 = 18 : <type 'int'>
==================================================
int3 = 8                                                                # STEP 30
ACTION: int3 = 8 
int3 = 20 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
avl2 == avl2                                                            # STEP 31
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x104b8f710> : <type 'instance'>
avl_REF2 = set([8, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl0 == avl2                                                            # STEP 32
ACTION: avl0 == avl2 
avl0 = <avl.AVLTree instance at 0x104b88050> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x104b8f710> : <type 'instance'>
avl_REF0 = set([13]) : <type 'set'>
avl_REF2 = set([8, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
int0 = 5                                                                # STEP 33
ACTION: int0 = 5 
int0 = 17 : <type 'int'>
=> int0 = 5 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 34
ACTION: avl0.insert(int0) 
int0 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104b88050> : <type 'instance'>
avl_REF0 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([13, 5]) : <type 'set'>
==================================================
int0 = 9                                                                # STEP 35
ACTION: int0 = 9 
int0 = 5 : <type 'int'>
=> int0 = 9 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 36
ACTION: avl2.delete(int1) 
int1 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b8f710> : <type 'instance'>
avl_REF2 = set([8, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int1 = 15                                                               # STEP 37
ACTION: int1 = 15 
int1 = 16 : <type 'int'>
=> int1 = 15 : <type 'int'>
==================================================
result = avl2.find(int0)                                                # STEP 38
ACTION: result = avl2.find(int0) 
int0 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b8f710> : <type 'instance'>
avl_REF2 = set([8, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
int0 = 7                                                                # STEP 39
ACTION: int0 = 7 
int0 = 9 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
result = avl0.find(int0)                                                # STEP 40
ACTION: result = avl0.find(int0) 
int0 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104b88050> : <type 'instance'>
avl_REF0 = set([13, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
avl0.delete(int2)                                                       # STEP 41
ACTION: avl0.delete(int2) 
int2 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104b88050> : <type 'instance'>
avl_REF0 = set([13, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
result = avl2.find(int2)                                                # STEP 42
ACTION: result = avl2.find(int2) 
int2 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b8f710> : <type 'instance'>
avl_REF2 = set([8, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int2 = 15                                                               # STEP 43
ACTION: int2 = 15 
int2 = 18 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
int0 = 20                                                               # STEP 44
ACTION: int0 = 20 
int0 = 7 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 45
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104b88050> : <type 'instance'>
avl_REF0 = set([13, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl2.insert(int3)                                                       # STEP 46
ACTION: avl2.insert(int3) 
int3 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b8f710> : <type 'instance'>
avl_REF2 = set([8, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
result = avl2.find(int3)                                                # STEP 47
ACTION: result = avl2.find(int3) 
int3 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b8f710> : <type 'instance'>
avl_REF2 = set([8, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
int3 = 4                                                                # STEP 48
ACTION: int3 = 4 
int3 = 8 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 49
ACTION: avl2.insert(int1) 
int1 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b8f710> : <type 'instance'>
avl_REF2 = set([8, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([8, 13, 15]) : <type 'set'>
==================================================
int1 = 15                                                               # STEP 50
ACTION: int1 = 15 
int1 = 15 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 51
ACTION: avl2.insert(int2) 
int2 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b8f710> : <type 'instance'>
avl_REF2 = set([8, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl2.insert(int3)                                                       # STEP 52
ACTION: avl2.insert(int3) 
int3 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b8f710> : <type 'instance'>
avl_REF2 = set([8, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([8, 4, 13, 15]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 53
ACTION: avl0.delete(int0) 
int0 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104b88050> : <type 'instance'>
avl_REF0 = set([13, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int2 = 12                                                               # STEP 54
ACTION: int2 = 12 
int2 = 15 : <type 'int'>
=> int2 = 12 : <type 'int'>
==================================================
int3 = 6                                                                # STEP 55
ACTION: int3 = 6 
int3 = 4 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 56
ACTION: avl2.delete(int1) 
int1 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b8f710> : <type 'instance'>
avl_REF2 = set([8, 4, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([8, 4, 13]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104ba7368>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 3 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 55
STOPPING TESTING DUE TO TIMEOUT
8.58500169664 PERCENT COVERED
60.1721200943 TOTAL RUNTIME
7 EXECUTED
542 TOTAL TEST OPERATIONS
22.2536244392 TIME SPENT EXECUTING TEST OPERATIONS
0.020271062851 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
22.355799675 TIME SPENT CHECKING PROPERTIES
44.6094241142 TOTAL TIME SPENT RUNNING SUT
0.00408291816711 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
3 FAILED
0 REPEATS OF FAILURES
3 ACTUAL DISTINCT FAILURES

FAILURE 0
int1 = 7                                                                 # STEP 0
int3 = 7                                                                 # STEP 1
int0 = 12                                                                # STEP 2
avl1 = avl.AVLTree()                                                     # STEP 3
int2 = 8                                                                 # STEP 4
avl1.delete(int0)                                                        # STEP 5
result = avl1.find(int1)                                                 # STEP 6
avl2 = avl.AVLTree()                                                     # STEP 7
int1 = 7                                                                 # STEP 8
int0 = 4                                                                 # STEP 9
result = avl1.find(int1)                                                # STEP 10
avl1.delete(int2)                                                       # STEP 11
int1 = 1                                                                # STEP 12
avl2.delete(int1)                                                       # STEP 13
result = avl2.find(int1)                                                # STEP 14
int1 = 3                                                                # STEP 15
int2 = 3                                                                # STEP 16
avl1.delete(int3)                                                       # STEP 17
int3 = 6                                                                # STEP 18
avl2.insert(int3)                                                       # STEP 19
avl1 == avl2                                                            # STEP 20
avl2 == avl2                                                            # STEP 21
int3 = 5                                                                # STEP 22
avl1.insert(int1)                                                       # STEP 23
int1 = 18                                                               # STEP 24
avl1.insert(int2)                                                       # STEP 25
result = avl1.find(int0)                                                # STEP 26
avl1.delete(int1)                                                       # STEP 27
result = avl2.find(int1)                                                # STEP 28
result = avl1.find(int0)                                                # STEP 29
int1 = 13                                                               # STEP 30
int2 = 11                                                               # STEP 31
avl1.insert(int1)                                                       # STEP 32
int1 = 7                                                                # STEP 33
avl1.insert(int3)                                                       # STEP 34
int0 = 14                                                               # STEP 35
avl1.insert(int1)                                                       # STEP 36
int3 = 13                                                               # STEP 37
result = avl1.find(int1)                                                # STEP 38
avl2 == avl1                                                            # STEP 39
avl1.insert(int3)                                                       # STEP 40
int3 = 14                                                               # STEP 41
avl2 == avl1                                                            # STEP 42
result = avl2.find(int0)                                                # STEP 43
result = avl1.find(int1)                                                # STEP 44
int1 = 7                                                                # STEP 45
int0 = 3                                                                # STEP 46
avl2.delete(int3)                                                       # STEP 47
avl1.delete(int3)                                                       # STEP 48
avl2.insert(int3)                                                       # STEP 49
result = avl2.inorder()                                                 # STEP 50
result = avl2.find(int0)                                                # STEP 51
int0 = 18                                                               # STEP 52
int3 = 4                                                                # STEP 53
avl1 == avl1                                                            # STEP 54
avl2 = avl.AVLTree()                                                    # STEP 55
avl1.insert(int2)                                                       # STEP 56
avl2 == avl1                                                            # STEP 57
avl2.insert(int3)                                                       # STEP 58
int2 = 16                                                               # STEP 59
avl2 == avl2                                                            # STEP 60
avl1.delete(int0)                                                       # STEP 61
int3 = 19                                                               # STEP 62
avl1 == avl1                                                            # STEP 63
avl1.insert(int2)                                                       # STEP 64
avl2.delete(int1)                                                       # STEP 65
int0 = 20                                                               # STEP 66
int1 = 3                                                                # STEP 67
avl2.delete(int3)                                                       # STEP 68
int3 = 16                                                               # STEP 69
int2 = 5                                                                # STEP 70
avl2.delete(int2)                                                       # STEP 71
int2 = 4                                                                # STEP 72
avl1 == avl2                                                            # STEP 73
avl1.insert(int2)                                                       # STEP 74
avl0 = avl.AVLTree()                                                    # STEP 75
avl1 == avl0                                                            # STEP 76
avl1 == avl2                                                            # STEP 77
int2 = 16                                                               # STEP 78
avl2 == avl2                                                            # STEP 79
avl1 == avl2                                                            # STEP 80
result = avl2.inorder()                                                 # STEP 81
avl1.delete(int3)                                                       # STEP 82
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104b849e0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE 1
avl2 = avl.AVLTree()                                                     # STEP 0
int3 = 5                                                                 # STEP 1
avl2.insert(int3)                                                        # STEP 2
int0 = 17                                                                # STEP 3
int1 = 20                                                                # STEP 4
int3 = 5                                                                 # STEP 5
avl0 = avl.AVLTree()                                                     # STEP 6
result = avl0.find(int1)                                                 # STEP 7
avl2.delete(int3)                                                        # STEP 8
avl2.delete(int0)                                                        # STEP 9
int1 = 16                                                               # STEP 10
int0 = 16                                                               # STEP 11
int2 = 2                                                                # STEP 12
result = avl2.find(int2)                                                # STEP 13
int3 = 19                                                               # STEP 14
int2 = 7                                                                # STEP 15
avl2.delete(int0)                                                       # STEP 16
int0 = 2                                                                # STEP 17
result = avl2.find(int0)                                                # STEP 18
int0 = 6                                                                # STEP 19
avl0.insert(int3)                                                       # STEP 20
avl2.insert(int3)                                                       # STEP 21
avl1 = avl.AVLTree()                                                    # STEP 22
avl2.insert(int1)                                                       # STEP 23
int1 = 10                                                               # STEP 24
avl1.insert(int3)                                                       # STEP 25
avl0 == avl1                                                            # STEP 26
int3 = 3                                                                # STEP 27
result = avl1.inorder()                                                 # STEP 28
avl0.insert(int0)                                                       # STEP 29
avl2.insert(int0)                                                       # STEP 30
avl0 == avl1                                                            # STEP 31
result = avl2.find(int2)                                                # STEP 32
avl1.insert(int1)                                                       # STEP 33
int2 = 2                                                                # STEP 34
int1 = 16                                                               # STEP 35
avl0.delete(int0)                                                       # STEP 36
avl2 == avl0                                                            # STEP 37
result = avl2.find(int1)                                                # STEP 38
avl1.insert(int2)                                                       # STEP 39
avl0.delete(int0)                                                       # STEP 40
avl2 == avl2                                                            # STEP 41
int0 = 14                                                               # STEP 42
int2 = 12                                                               # STEP 43
result = avl0.find(int1)                                                # STEP 44
avl2.insert(int3)                                                       # STEP 45
avl2.delete(int1)                                                       # STEP 46
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104ffca70>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE 2
int1 = 18                                                                # STEP 0
int3 = 20                                                                # STEP 1
int0 = 8                                                                 # STEP 2
int2 = 14                                                                # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
avl2.insert(int0)                                                        # STEP 5
int0 = 15                                                                # STEP 6
avl0 = avl.AVLTree()                                                     # STEP 7
avl2.delete(int1)                                                        # STEP 8
int1 = 5                                                                 # STEP 9
result = avl0.find(int2)                                                # STEP 10
int2 = 16                                                               # STEP 11
avl2 == avl0                                                            # STEP 12
avl0 == avl2                                                            # STEP 13
result = avl0.find(int1)                                                # STEP 14
result = avl0.find(int2)                                                # STEP 15
int1 = 16                                                               # STEP 16
result = avl0.find(int0)                                                # STEP 17
int0 = 13                                                               # STEP 18
int2 = 19                                                               # STEP 19
avl0.insert(int2)                                                       # STEP 20
avl2.insert(int0)                                                       # STEP 21
avl0.insert(int2)                                                       # STEP 22
avl2.insert(int0)                                                       # STEP 23
avl0.insert(int0)                                                       # STEP 24
avl0.delete(int2)                                                       # STEP 25
int0 = 17                                                               # STEP 26
avl2.delete(int3)                                                       # STEP 27
result = avl2.find(int0)                                                # STEP 28
int2 = 18                                                               # STEP 29
int3 = 8                                                                # STEP 30
avl2 == avl2                                                            # STEP 31
avl0 == avl2                                                            # STEP 32
int0 = 5                                                                # STEP 33
avl0.insert(int0)                                                       # STEP 34
int0 = 9                                                                # STEP 35
avl2.delete(int1)                                                       # STEP 36
int1 = 15                                                               # STEP 37
result = avl2.find(int0)                                                # STEP 38
int0 = 7                                                                # STEP 39
result = avl0.find(int0)                                                # STEP 40
avl0.delete(int2)                                                       # STEP 41
result = avl2.find(int2)                                                # STEP 42
int2 = 15                                                               # STEP 43
int0 = 20                                                               # STEP 44
result = avl0.inorder()                                                 # STEP 45
avl2.insert(int3)                                                       # STEP 46
result = avl2.find(int3)                                                # STEP 47
int3 = 4                                                                # STEP 48
avl2.insert(int1)                                                       # STEP 49
int1 = 15                                                               # STEP 50
avl2.insert(int2)                                                       # STEP 51
avl2.insert(int3)                                                       # STEP 52
avl0.delete(int0)                                                       # STEP 53
int2 = 12                                                               # STEP 54
int3 = 6                                                                # STEP 55
avl2.delete(int1)                                                       # STEP 56
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104ba7368>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
216 BRANCHES COVERED
162 STATEMENTS COVERED

Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.13897.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103ea3a70>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
Original test has 87 steps

SAVING TEST AS failure.13897.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 1                                                                 # STEP 0
ACTION: int1 = 1 
int1 = None : <type 'NoneType'>
=> int1 = 1 : <type 'int'>
==================================================
int2 = 10                                                                # STEP 1
ACTION: int2 = 10 
int2 = None : <type 'NoneType'>
=> int2 = 10 : <type 'int'>
==================================================
int3 = 6                                                                 # STEP 2
ACTION: int3 = 6 
int3 = None : <type 'NoneType'>
=> int3 = 6 : <type 'int'>
==================================================
int0 = 11                                                                # STEP 3
ACTION: int0 = 11 
int0 = None : <type 'NoneType'>
=> int0 = 11 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x103ea38c0> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.insert(int0)                                                        # STEP 5
ACTION: avl1.insert(int0) 
int0 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103ea38c0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([11]) : <type 'set'>
==================================================
int0 = 17                                                                # STEP 6
ACTION: int0 = 17 
int0 = 11 : <type 'int'>
=> int0 = 17 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 7
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x103ab7c20> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl1.delete(int1)                                                        # STEP 8
ACTION: avl1.delete(int1) 
int1 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103ea38c0> : <type 'instance'>
avl_REF1 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
result = avl2.inorder()                                                  # STEP 9
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x103ab7c20> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int1)                                                       # STEP 10
ACTION: avl2.insert(int1) 
int1 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103ab7c20> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([1]) : <type 'set'>
==================================================
int1 = 4                                                                # STEP 11
ACTION: int1 = 4 
int1 = 1 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
result = avl2.find(int1)                                                # STEP 12
ACTION: result = avl2.find(int1) 
int1 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103ab7c20> : <type 'instance'>
avl_REF2 = set([1]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl1.insert(int1)                                                       # STEP 13
ACTION: avl1.insert(int1) 
int1 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103ea38c0> : <type 'instance'>
avl_REF1 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([11, 4]) : <type 'set'>
==================================================
avl1 == avl2                                                            # STEP 14
ACTION: avl1 == avl2 
avl1 = <avlbug2.AVLTree instance at 0x103ea38c0> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x103ab7c20> : <type 'instance'>
avl_REF1 = set([11, 4]) : <type 'set'>
avl_REF2 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
int1 = 13                                                               # STEP 15
ACTION: int1 = 13 
int1 = 4 : <type 'int'>
=> int1 = 13 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 16
ACTION: avl1.insert(int3) 
int3 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103ea38c0> : <type 'instance'>
avl_REF1 = set([11, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([11, 4, 6]) : <type 'set'>
==================================================
int3 = 7                                                                # STEP 17
ACTION: int3 = 7 
int3 = 6 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 18
ACTION: avl1.delete(int3) 
int3 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103ea38c0> : <type 'instance'>
avl_REF1 = set([11, 4, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.insert(int1)                                                       # STEP 19
ACTION: avl1.insert(int1) 
int1 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103ea38c0> : <type 'instance'>
avl_REF1 = set([11, 4, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([11, 4, 13, 6]) : <type 'set'>
==================================================
result = avl2.find(int1)                                                # STEP 20
ACTION: result = avl2.find(int1) 
int1 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103ab7c20> : <type 'instance'>
avl_REF2 = set([1]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int1 = 12                                                               # STEP 21
ACTION: int1 = 12 
int1 = 13 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 22
ACTION: avl1.insert(int2) 
int2 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103ea38c0> : <type 'instance'>
avl_REF1 = set([11, 4, 13, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([10, 11, 4, 13, 6]) : <type 'set'>
==================================================
avl1 == avl2                                                            # STEP 23
ACTION: avl1 == avl2 
avl1 = <avlbug2.AVLTree instance at 0x103ea38c0> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x103ab7c20> : <type 'instance'>
avl_REF1 = set([10, 11, 4, 13, 6]) : <type 'set'>
avl_REF2 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
result = avl1.find(int1)                                                # STEP 24
ACTION: result = avl1.find(int1) 
int1 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103ea38c0> : <type 'instance'>
avl_REF1 = set([10, 11, 4, 13, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int3 = 8                                                                # STEP 25
ACTION: int3 = 8 
int3 = 7 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
int1 = 18                                                               # STEP 26
ACTION: int1 = 18 
int1 = 12 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
int2 = 3                                                                # STEP 27
ACTION: int2 = 3 
int2 = 10 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
result = avl1.find(int3)                                                # STEP 28
ACTION: result = avl1.find(int3) 
int3 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103ea38c0> : <type 'instance'>
avl_REF1 = set([10, 11, 4, 13, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
int3 = 13                                                               # STEP 29
ACTION: int3 = 13 
int3 = 8 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
result = avl2.find(int0)                                                # STEP 30
ACTION: result = avl2.find(int0) 
int0 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103ab7c20> : <type 'instance'>
avl_REF2 = set([1]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl1 == avl1                                                            # STEP 31
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x103ea38c0> : <type 'instance'>
avl_REF1 = set([10, 11, 4, 13, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
int0 = 16                                                               # STEP 32
ACTION: int0 = 16 
int0 = 17 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 33
ACTION: avl2 = avl.AVLTree() 
avl2 = <avlbug2.AVLTree instance at 0x103ab7c20> : <type 'instance'>
avl_REF2 = set([1]) : <type 'set'>
=> avl2 = <avlbug2.AVLTree instance at 0x102d95710> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl2.find(int3)                                                # STEP 34
ACTION: result = avl2.find(int3) 
int3 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102d95710> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
int3 = 10                                                               # STEP 35
ACTION: int3 = 10 
int3 = 13 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 36
ACTION: avl2.insert(int1) 
int1 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102d95710> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([18]) : <type 'set'>
==================================================
result = avl2.find(int1)                                                # STEP 37
ACTION: result = avl2.find(int1) 
int1 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102d95710> : <type 'instance'>
avl_REF2 = set([18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int1 = 4                                                                # STEP 38
ACTION: int1 = 4 
int1 = 18 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 39
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x103ea38c0> : <type 'instance'>
avl_REF1 = set([10, 11, 4, 13, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl2.insert(int2)                                                       # STEP 40
ACTION: avl2.insert(int2) 
int2 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102d95710> : <type 'instance'>
avl_REF2 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([18, 3]) : <type 'set'>
==================================================
int2 = 1                                                                # STEP 41
ACTION: int2 = 1 
int2 = 3 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
avl1 == avl2                                                            # STEP 42
ACTION: avl1 == avl2 
avl1 = <avlbug2.AVLTree instance at 0x103ea38c0> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x102d95710> : <type 'instance'>
avl_REF1 = set([10, 11, 4, 13, 6]) : <type 'set'>
avl_REF2 = set([18, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
avl1.delete(int0)                                                       # STEP 43
ACTION: avl1.delete(int0) 
int0 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103ea38c0> : <type 'instance'>
avl_REF1 = set([10, 11, 4, 13, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int0 = 19                                                               # STEP 44
ACTION: int0 = 19 
int0 = 16 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 45
ACTION: avl2.insert(int2) 
int2 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102d95710> : <type 'instance'>
avl_REF2 = set([18, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([1, 18, 3]) : <type 'set'>
==================================================
int2 = 2                                                                # STEP 46
ACTION: int2 = 2 
int2 = 1 : <type 'int'>
=> int2 = 2 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 47
ACTION: avl2.delete(int2) 
int2 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102d95710> : <type 'instance'>
avl_REF2 = set([1, 18, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int2 = 8                                                                # STEP 48
ACTION: int2 = 8 
int2 = 2 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
result = avl2.find(int3)                                                # STEP 49
ACTION: result = avl2.find(int3) 
int3 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102d95710> : <type 'instance'>
avl_REF2 = set([1, 18, 3]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
int3 = 19                                                               # STEP 50
ACTION: int3 = 19 
int3 = 10 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 51
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x102d95710> : <type 'instance'>
avl_REF2 = set([1, 18, 3]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl2.find(int2)                                                # STEP 52
ACTION: result = avl2.find(int2) 
int2 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102d95710> : <type 'instance'>
avl_REF2 = set([1, 18, 3]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
result = avl2.inorder()                                                 # STEP 53
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x102d95710> : <type 'instance'>
avl_REF2 = set([1, 18, 3]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl1.find(int2)                                                # STEP 54
ACTION: result = avl1.find(int2) 
int2 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103ea38c0> : <type 'instance'>
avl_REF1 = set([10, 11, 4, 13, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int2 = 15                                                               # STEP 55
ACTION: int2 = 15 
int2 = 8 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 56
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x1038fc050> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 57
ACTION: avl1.delete(int0) 
int0 = 19 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103ea38c0> : <type 'instance'>
avl_REF1 = set([10, 11, 4, 13, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
result = avl1.find(int0)                                                # STEP 58
ACTION: result = avl1.find(int0) 
int0 = 19 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103ea38c0> : <type 'instance'>
avl_REF1 = set([10, 11, 4, 13, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
result = avl2.find(int2)                                                # STEP 59
ACTION: result = avl2.find(int2) 
int2 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102d95710> : <type 'instance'>
avl_REF2 = set([1, 18, 3]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int2 = 12                                                               # STEP 60
ACTION: int2 = 12 
int2 = 15 : <type 'int'>
=> int2 = 12 : <type 'int'>
==================================================
avl2 == avl0                                                            # STEP 61
ACTION: avl2 == avl0 
avl2 = <avlbug2.AVLTree instance at 0x102d95710> : <type 'instance'>
avl0 = <avlbug2.AVLTree instance at 0x1038fc050> : <type 'instance'>
avl_REF2 = set([1, 18, 3]) : <type 'set'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF0 
==================================================
avl0.delete(int1)                                                       # STEP 62
ACTION: avl0.delete(int1) 
int1 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1038fc050> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl2.insert(int0)                                                       # STEP 63
ACTION: avl2.insert(int0) 
int0 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102d95710> : <type 'instance'>
avl_REF2 = set([1, 18, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([19, 1, 18, 3]) : <type 'set'>
==================================================
avl2 == avl0                                                            # STEP 64
ACTION: avl2 == avl0 
avl2 = <avlbug2.AVLTree instance at 0x102d95710> : <type 'instance'>
avl0 = <avlbug2.AVLTree instance at 0x1038fc050> : <type 'instance'>
avl_REF2 = set([19, 1, 18, 3]) : <type 'set'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF0 
==================================================
result = avl2.inorder()                                                 # STEP 65
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x102d95710> : <type 'instance'>
avl_REF2 = set([19, 1, 18, 3]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int1 = 7                                                                # STEP 66
ACTION: int1 = 7 
int1 = 4 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 67
ACTION: avl0.insert(int1) 
int1 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1038fc050> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([7]) : <type 'set'>
==================================================
int1 = 19                                                               # STEP 68
ACTION: int1 = 19 
int1 = 7 : <type 'int'>
=> int1 = 19 : <type 'int'>
==================================================
result = avl1.find(int0)                                                # STEP 69
ACTION: result = avl1.find(int0) 
int0 = 19 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103ea38c0> : <type 'instance'>
avl_REF1 = set([10, 11, 4, 13, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl0 == avl0                                                            # STEP 70
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x1038fc050> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl2 == avl1                                                            # STEP 71
ACTION: avl2 == avl1 
avl2 = <avlbug2.AVLTree instance at 0x102d95710> : <type 'instance'>
avl1 = <avlbug2.AVLTree instance at 0x103ea38c0> : <type 'instance'>
avl_REF2 = set([19, 1, 18, 3]) : <type 'set'>
avl_REF1 = set([10, 11, 4, 13, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
result = avl0.find(int0)                                                # STEP 72
ACTION: result = avl0.find(int0) 
int0 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1038fc050> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
avl1.delete(int1)                                                       # STEP 73
ACTION: avl1.delete(int1) 
int1 = 19 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103ea38c0> : <type 'instance'>
avl_REF1 = set([10, 11, 4, 13, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
result = avl0.inorder()                                                 # STEP 74
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x1038fc050> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
result = avl1.find(int2)                                                # STEP 75
ACTION: result = avl1.find(int2) 
int2 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103ea38c0> : <type 'instance'>
avl_REF1 = set([10, 11, 4, 13, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int0 = 4                                                                # STEP 76
ACTION: int0 = 4 
int0 = 19 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
int2 = 2                                                                # STEP 77
ACTION: int2 = 2 
int2 = 12 : <type 'int'>
=> int2 = 2 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 78
ACTION: avl2.insert(int2) 
int2 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102d95710> : <type 'instance'>
avl_REF2 = set([19, 1, 18, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([19, 1, 18, 3, 2]) : <type 'set'>
==================================================
int2 = 17                                                               # STEP 79
ACTION: int2 = 17 
int2 = 2 : <type 'int'>
=> int2 = 17 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 80
ACTION: avl2.delete(int2) 
int2 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102d95710> : <type 'instance'>
avl_REF2 = set([19, 1, 18, 3, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int1 = 14                                                               # STEP 81
ACTION: int1 = 14 
int1 = 19 : <type 'int'>
=> int1 = 14 : <type 'int'>
==================================================
result = avl2.find(int0)                                                # STEP 82
ACTION: result = avl2.find(int0) 
int0 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102d95710> : <type 'instance'>
avl_REF2 = set([19, 1, 18, 3, 2]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl0 == avl1                                                            # STEP 83
ACTION: avl0 == avl1 
avl0 = <avlbug2.AVLTree instance at 0x1038fc050> : <type 'instance'>
avl1 = <avlbug2.AVLTree instance at 0x103ea38c0> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
avl_REF1 = set([10, 11, 4, 13, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF1 
==================================================
avl1.delete(int2)                                                       # STEP 84
ACTION: avl1.delete(int2) 
int2 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103ea38c0> : <type 'instance'>
avl_REF1 = set([10, 11, 4, 13, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int2 = 3                                                                # STEP 85
ACTION: int2 = 3 
int2 = 17 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 86
ACTION: avl1.delete(int0) 
int0 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103ea38c0> : <type 'instance'>
avl_REF1 = set([10, 11, 4, 13, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([10, 11, 13, 6]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103d4e830>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #3 STEP #16 (0:00:30.023917) Sun Apr 30 02:49:50 2017 [ 147 stmts 196 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103ec1b00>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
Original test has 31 steps

SAVING TEST AS failure.13897.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 12                                                                # STEP 0
ACTION: int2 = 12 
int2 = None : <type 'NoneType'>
=> int2 = 12 : <type 'int'>
==================================================
int1 = 20                                                                # STEP 1
ACTION: int1 = 20 
int1 = None : <type 'NoneType'>
=> int1 = 20 : <type 'int'>
==================================================
int0 = 14                                                                # STEP 2
ACTION: int0 = 14 
int0 = None : <type 'NoneType'>
=> int0 = 14 : <type 'int'>
==================================================
int3 = 10                                                                # STEP 3
ACTION: int3 = 10 
int3 = None : <type 'NoneType'>
=> int3 = 10 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x1038b21b8> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 5
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x1038b24d0> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0 == avl1                                                             # STEP 6
ACTION: avl0 == avl1 
avl0 = <avlbug2.AVLTree instance at 0x1038b24d0> : <type 'instance'>
avl1 = <avlbug2.AVLTree instance at 0x1038b21b8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF1 
==================================================
result = avl1.find(int3)                                                 # STEP 7
ACTION: result = avl1.find(int3) 
int3 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1038b21b8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
int3 = 8                                                                 # STEP 8
ACTION: int3 = 8 
int3 = 10 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
avl1.insert(int1)                                                        # STEP 9
ACTION: avl1.insert(int1) 
int1 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1038b21b8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([20]) : <type 'set'>
==================================================
result = avl0.find(int1)                                                # STEP 10
ACTION: result = avl0.find(int1) 
int1 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1038b24d0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
int1 = 19                                                               # STEP 11
ACTION: int1 = 19 
int1 = 20 : <type 'int'>
=> int1 = 19 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 12
ACTION: avl0.insert(int2) 
int2 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1038b24d0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([12]) : <type 'set'>
==================================================
int2 = 7                                                                # STEP 13
ACTION: int2 = 7 
int2 = 12 : <type 'int'>
=> int2 = 7 : <type 'int'>
==================================================
result = avl1.find(int2)                                                # STEP 14
ACTION: result = avl1.find(int2) 
int2 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1038b21b8> : <type 'instance'>
avl_REF1 = set([20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int2 = 4                                                                # STEP 15
ACTION: int2 = 4 
int2 = 7 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 16
ACTION: avl0.delete(int3) 
int3 = 8 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1038b24d0> : <type 'instance'>
avl_REF0 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
result = avl0.find(int1)                                                # STEP 17
ACTION: result = avl0.find(int1) 
int1 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1038b24d0> : <type 'instance'>
avl_REF0 = set([12]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
int1 = 6                                                                # STEP 18
ACTION: int1 = 6 
int1 = 19 : <type 'int'>
=> int1 = 6 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 19
ACTION: avl0.insert(int3) 
int3 = 8 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1038b24d0> : <type 'instance'>
avl_REF0 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([8, 12]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 20
ACTION: avl0.insert(int0) 
int0 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1038b24d0> : <type 'instance'>
avl_REF0 = set([8, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([8, 12, 14]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 21
ACTION: avl0.delete(int3) 
int3 = 8 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1038b24d0> : <type 'instance'>
avl_REF0 = set([8, 12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([12, 14]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 22
ACTION: avl0.insert(int2) 
int2 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1038b24d0> : <type 'instance'>
avl_REF0 = set([12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([4, 12, 14]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 23
ACTION: avl0.insert(int2) 
int2 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1038b24d0> : <type 'instance'>
avl_REF0 = set([4, 12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
int3 = 5                                                                # STEP 24
ACTION: int3 = 5 
int3 = 8 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
int2 = 12                                                               # STEP 25
ACTION: int2 = 12 
int2 = 4 : <type 'int'>
=> int2 = 12 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 26
ACTION: avl0.insert(int1) 
int1 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1038b24d0> : <type 'instance'>
avl_REF0 = set([4, 12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([4, 12, 6, 14]) : <type 'set'>
==================================================
int1 = 18                                                               # STEP 27
ACTION: int1 = 18 
int1 = 6 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
int0 = 3                                                                # STEP 28
ACTION: int0 = 3 
int0 = 14 : <type 'int'>
=> int0 = 3 : <type 'int'>
==================================================
avl0 == avl1                                                            # STEP 29
ACTION: avl0 == avl1 
avl0 = <avlbug2.AVLTree instance at 0x1038b24d0> : <type 'instance'>
avl1 = <avlbug2.AVLTree instance at 0x1038b21b8> : <type 'instance'>
avl_REF0 = set([4, 12, 6, 14]) : <type 'set'>
avl_REF1 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF1 
==================================================
avl0.delete(int2)                                                       # STEP 30
ACTION: avl0.delete(int2) 
int2 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1038b24d0> : <type 'instance'>
avl_REF0 = set([4, 12, 6, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([4, 6, 14]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103eaca70>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103eb0a28>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
Original test has 67 steps

SAVING TEST AS failure.13897.test.2
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 6                                                                 # STEP 0
ACTION: int2 = 6 
int2 = None : <type 'NoneType'>
=> int2 = 6 : <type 'int'>
==================================================
int3 = 17                                                                # STEP 1
ACTION: int3 = 17 
int3 = None : <type 'NoneType'>
=> int3 = 17 : <type 'int'>
==================================================
int1 = 4                                                                 # STEP 2
ACTION: int1 = 4 
int1 = None : <type 'NoneType'>
=> int1 = 4 : <type 'int'>
==================================================
int0 = 5                                                                 # STEP 3
ACTION: int0 = 5 
int0 = None : <type 'NoneType'>
=> int0 = 5 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x103eb0e60> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int0)                                                        # STEP 5
ACTION: avl2.insert(int0) 
int0 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103eb0e60> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([5]) : <type 'set'>
==================================================
int0 = 14                                                                # STEP 6
ACTION: int0 = 14 
int0 = 5 : <type 'int'>
=> int0 = 14 : <type 'int'>
==================================================
avl2 == avl2                                                             # STEP 7
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x103eb0e60> : <type 'instance'>
avl_REF2 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
result = avl2.find(int2)                                                 # STEP 8
ACTION: result = avl2.find(int2) 
int2 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103eb0e60> : <type 'instance'>
avl_REF2 = set([5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int2 = 1                                                                 # STEP 9
ACTION: int2 = 1 
int2 = 6 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
result = avl2.find(int3)                                                # STEP 10
ACTION: result = avl2.find(int3) 
int3 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103eb0e60> : <type 'instance'>
avl_REF2 = set([5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
int3 = 12                                                               # STEP 11
ACTION: int3 = 12 
int3 = 17 : <type 'int'>
=> int3 = 12 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 12
ACTION: avl2.insert(int3) 
int3 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103eb0e60> : <type 'instance'>
avl_REF2 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([12, 5]) : <type 'set'>
==================================================
int3 = 9                                                                # STEP 13
ACTION: int3 = 9 
int3 = 12 : <type 'int'>
=> int3 = 9 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 14
ACTION: avl2.insert(int3) 
int3 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103eb0e60> : <type 'instance'>
avl_REF2 = set([12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([9, 12, 5]) : <type 'set'>
==================================================
int3 = 11                                                               # STEP 15
ACTION: int3 = 11 
int3 = 9 : <type 'int'>
=> int3 = 11 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 16
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x103e9e098> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 17
ACTION: avl1.delete(int2) 
int2 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103e9e098> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.insert(int0)                                                       # STEP 18
ACTION: avl1.insert(int0) 
int0 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103e9e098> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([14]) : <type 'set'>
==================================================
int0 = 10                                                               # STEP 19
ACTION: int0 = 10 
int0 = 14 : <type 'int'>
=> int0 = 10 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 20
ACTION: avl1.delete(int0) 
int0 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103e9e098> : <type 'instance'>
avl_REF1 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int2 = 8                                                                # STEP 21
ACTION: int2 = 8 
int2 = 1 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 22
ACTION: avl2.insert(int0) 
int0 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103eb0e60> : <type 'instance'>
avl_REF2 = set([9, 12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([9, 10, 12, 5]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 23
ACTION: avl2.delete(int0) 
int0 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103eb0e60> : <type 'instance'>
avl_REF2 = set([9, 10, 12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([9, 12, 5]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 24
ACTION: avl1.insert(int0) 
int0 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103e9e098> : <type 'instance'>
avl_REF1 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([10, 14]) : <type 'set'>
==================================================
int0 = 16                                                               # STEP 25
ACTION: int0 = 16 
int0 = 10 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
result = avl2.find(int1)                                                # STEP 26
ACTION: result = avl2.find(int1) 
int1 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103eb0e60> : <type 'instance'>
avl_REF2 = set([9, 12, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl2.insert(int0)                                                       # STEP 27
ACTION: avl2.insert(int0) 
int0 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103eb0e60> : <type 'instance'>
avl_REF2 = set([9, 12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([16, 9, 12, 5]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 28
ACTION: avl1.delete(int2) 
int2 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103e9e098> : <type 'instance'>
avl_REF1 = set([10, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int0 = 14                                                               # STEP 29
ACTION: int0 = 14 
int0 = 16 : <type 'int'>
=> int0 = 14 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 30
ACTION: avl1.insert(int2) 
int2 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103e9e098> : <type 'instance'>
avl_REF1 = set([10, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([8, 10, 14]) : <type 'set'>
==================================================
int2 = 6                                                                # STEP 31
ACTION: int2 = 6 
int2 = 8 : <type 'int'>
=> int2 = 6 : <type 'int'>
==================================================
int1 = 17                                                               # STEP 32
ACTION: int1 = 17 
int1 = 4 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 33
ACTION: avl2.delete(int2) 
int2 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103eb0e60> : <type 'instance'>
avl_REF2 = set([16, 9, 12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl1.delete(int0)                                                       # STEP 34
ACTION: avl1.delete(int0) 
int0 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103e9e098> : <type 'instance'>
avl_REF1 = set([8, 10, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([8, 10]) : <type 'set'>
==================================================
result = avl1.find(int2)                                                # STEP 35
ACTION: result = avl1.find(int2) 
int2 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103e9e098> : <type 'instance'>
avl_REF1 = set([8, 10]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl2.insert(int3)                                                       # STEP 36
ACTION: avl2.insert(int3) 
int3 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103eb0e60> : <type 'instance'>
avl_REF2 = set([16, 9, 12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([5, 9, 11, 12, 16]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 37
ACTION: avl1.delete(int0) 
int0 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103e9e098> : <type 'instance'>
avl_REF1 = set([8, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int3 = 7                                                                # STEP 38
ACTION: int3 = 7 
int3 = 11 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
int0 = 14                                                               # STEP 39
ACTION: int0 = 14 
int0 = 14 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 40
ACTION: avl1.insert(int1) 
int1 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103e9e098> : <type 'instance'>
avl_REF1 = set([8, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([8, 17, 10]) : <type 'set'>
==================================================
result = avl1.find(int0)                                                # STEP 41
ACTION: result = avl1.find(int0) 
int0 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103e9e098> : <type 'instance'>
avl_REF1 = set([8, 17, 10]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
result = avl1.inorder()                                                 # STEP 42
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x103e9e098> : <type 'instance'>
avl_REF1 = set([8, 17, 10]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int2 = 7                                                                # STEP 43
ACTION: int2 = 7 
int2 = 6 : <type 'int'>
=> int2 = 7 : <type 'int'>
==================================================
result = avl2.find(int1)                                                # STEP 44
ACTION: result = avl2.find(int1) 
int1 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103eb0e60> : <type 'instance'>
avl_REF2 = set([5, 9, 11, 12, 16]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int0 = 1                                                                # STEP 45
ACTION: int0 = 1 
int0 = 14 : <type 'int'>
=> int0 = 1 : <type 'int'>
==================================================
int1 = 5                                                                # STEP 46
ACTION: int1 = 5 
int1 = 17 : <type 'int'>
=> int1 = 5 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 47
ACTION: avl2.delete(int2) 
int2 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103eb0e60> : <type 'instance'>
avl_REF2 = set([5, 9, 11, 12, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int2 = 19                                                               # STEP 48
ACTION: int2 = 19 
int2 = 7 : <type 'int'>
=> int2 = 19 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 49
ACTION: avl1 = avl.AVLTree() 
avl1 = <avlbug2.AVLTree instance at 0x103e9e098> : <type 'instance'>
avl_REF1 = set([8, 17, 10]) : <type 'set'>
=> avl1 = <avlbug2.AVLTree instance at 0x103e9b9e0> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
result = avl1.find(int2)                                                # STEP 50
ACTION: result = avl1.find(int2) 
int2 = 19 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103e9b9e0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl2.delete(int2)                                                       # STEP 51
ACTION: avl2.delete(int2) 
int2 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103eb0e60> : <type 'instance'>
avl_REF2 = set([5, 9, 11, 12, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int2 = 4                                                                # STEP 52
ACTION: int2 = 4 
int2 = 19 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
result = avl2.find(int1)                                                # STEP 53
ACTION: result = avl2.find(int1) 
int1 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103eb0e60> : <type 'instance'>
avl_REF2 = set([5, 9, 11, 12, 16]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int1 = 18                                                               # STEP 54
ACTION: int1 = 18 
int1 = 5 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 55
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x103a0b710> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 56
ACTION: avl0.delete(int1) 
int1 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103a0b710> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl1.insert(int0)                                                       # STEP 57
ACTION: avl1.insert(int0) 
int0 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103e9b9e0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([1]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 58
ACTION: avl0.insert(int3) 
int3 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103a0b710> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([7]) : <type 'set'>
==================================================
int1 = 10                                                               # STEP 59
ACTION: int1 = 10 
int1 = 18 : <type 'int'>
=> int1 = 10 : <type 'int'>
==================================================
int3 = 2                                                                # STEP 60
ACTION: int3 = 2 
int3 = 7 : <type 'int'>
=> int3 = 2 : <type 'int'>
==================================================
result = avl0.find(int2)                                                # STEP 61
ACTION: result = avl0.find(int2) 
int2 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103a0b710> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
int0 = 5                                                                # STEP 62
ACTION: int0 = 5 
int0 = 1 : <type 'int'>
=> int0 = 5 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 63
ACTION: avl2.delete(int1) 
int1 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103eb0e60> : <type 'instance'>
avl_REF2 = set([5, 9, 11, 12, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int1 = 8                                                                # STEP 64
ACTION: int1 = 8 
int1 = 10 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 65
ACTION: avl0.delete(int0) 
int0 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103a0b710> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl2.delete(int0)                                                       # STEP 66
ACTION: avl2.delete(int0) 
int0 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103eb0e60> : <type 'instance'>
avl_REF2 = set([5, 9, 11, 12, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([9, 11, 12, 16]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103e8c638>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 3 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 8
STOPPING TESTING DUE TO TIMEOUT
8.04369414101 PERCENT COVERED
60.255065918 TOTAL RUNTIME
6 EXECUTED
393 TOTAL TEST OPERATIONS
20.3253941536 TIME SPENT EXECUTING TEST OPERATIONS
0.0163111686707 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
20.5504937172 TIME SPENT CHECKING PROPERTIES
40.8758878708 TOTAL TIME SPENT RUNNING SUT
0.00455927848816 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
3 FAILED
0 REPEATS OF FAILURES
3 ACTUAL DISTINCT FAILURES

FAILURE 0
int1 = 1                                                                 # STEP 0
int2 = 10                                                                # STEP 1
int3 = 6                                                                 # STEP 2
int0 = 11                                                                # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
avl1.insert(int0)                                                        # STEP 5
int0 = 17                                                                # STEP 6
avl2 = avl.AVLTree()                                                     # STEP 7
avl1.delete(int1)                                                        # STEP 8
result = avl2.inorder()                                                  # STEP 9
avl2.insert(int1)                                                       # STEP 10
int1 = 4                                                                # STEP 11
result = avl2.find(int1)                                                # STEP 12
avl1.insert(int1)                                                       # STEP 13
avl1 == avl2                                                            # STEP 14
int1 = 13                                                               # STEP 15
avl1.insert(int3)                                                       # STEP 16
int3 = 7                                                                # STEP 17
avl1.delete(int3)                                                       # STEP 18
avl1.insert(int1)                                                       # STEP 19
result = avl2.find(int1)                                                # STEP 20
int1 = 12                                                               # STEP 21
avl1.insert(int2)                                                       # STEP 22
avl1 == avl2                                                            # STEP 23
result = avl1.find(int1)                                                # STEP 24
int3 = 8                                                                # STEP 25
int1 = 18                                                               # STEP 26
int2 = 3                                                                # STEP 27
result = avl1.find(int3)                                                # STEP 28
int3 = 13                                                               # STEP 29
result = avl2.find(int0)                                                # STEP 30
avl1 == avl1                                                            # STEP 31
int0 = 16                                                               # STEP 32
avl2 = avl.AVLTree()                                                    # STEP 33
result = avl2.find(int3)                                                # STEP 34
int3 = 10                                                               # STEP 35
avl2.insert(int1)                                                       # STEP 36
result = avl2.find(int1)                                                # STEP 37
int1 = 4                                                                # STEP 38
avl1 == avl1                                                            # STEP 39
avl2.insert(int2)                                                       # STEP 40
int2 = 1                                                                # STEP 41
avl1 == avl2                                                            # STEP 42
avl1.delete(int0)                                                       # STEP 43
int0 = 19                                                               # STEP 44
avl2.insert(int2)                                                       # STEP 45
int2 = 2                                                                # STEP 46
avl2.delete(int2)                                                       # STEP 47
int2 = 8                                                                # STEP 48
result = avl2.find(int3)                                                # STEP 49
int3 = 19                                                               # STEP 50
result = avl2.inorder()                                                 # STEP 51
result = avl2.find(int2)                                                # STEP 52
result = avl2.inorder()                                                 # STEP 53
result = avl1.find(int2)                                                # STEP 54
int2 = 15                                                               # STEP 55
avl0 = avl.AVLTree()                                                    # STEP 56
avl1.delete(int0)                                                       # STEP 57
result = avl1.find(int0)                                                # STEP 58
result = avl2.find(int2)                                                # STEP 59
int2 = 12                                                               # STEP 60
avl2 == avl0                                                            # STEP 61
avl0.delete(int1)                                                       # STEP 62
avl2.insert(int0)                                                       # STEP 63
avl2 == avl0                                                            # STEP 64
result = avl2.inorder()                                                 # STEP 65
int1 = 7                                                                # STEP 66
avl0.insert(int1)                                                       # STEP 67
int1 = 19                                                               # STEP 68
result = avl1.find(int0)                                                # STEP 69
avl0 == avl0                                                            # STEP 70
avl2 == avl1                                                            # STEP 71
result = avl0.find(int0)                                                # STEP 72
avl1.delete(int1)                                                       # STEP 73
result = avl0.inorder()                                                 # STEP 74
result = avl1.find(int2)                                                # STEP 75
int0 = 4                                                                # STEP 76
int2 = 2                                                                # STEP 77
avl2.insert(int2)                                                       # STEP 78
int2 = 17                                                               # STEP 79
avl2.delete(int2)                                                       # STEP 80
int1 = 14                                                               # STEP 81
result = avl2.find(int0)                                                # STEP 82
avl0 == avl1                                                            # STEP 83
avl1.delete(int2)                                                       # STEP 84
int2 = 3                                                                # STEP 85
avl1.delete(int0)                                                       # STEP 86
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103d4e830>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE 1
int2 = 12                                                                # STEP 0
int1 = 20                                                                # STEP 1
int0 = 14                                                                # STEP 2
int3 = 10                                                                # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
avl0 = avl.AVLTree()                                                     # STEP 5
avl0 == avl1                                                             # STEP 6
result = avl1.find(int3)                                                 # STEP 7
int3 = 8                                                                 # STEP 8
avl1.insert(int1)                                                        # STEP 9
result = avl0.find(int1)                                                # STEP 10
int1 = 19                                                               # STEP 11
avl0.insert(int2)                                                       # STEP 12
int2 = 7                                                                # STEP 13
result = avl1.find(int2)                                                # STEP 14
int2 = 4                                                                # STEP 15
avl0.delete(int3)                                                       # STEP 16
result = avl0.find(int1)                                                # STEP 17
int1 = 6                                                                # STEP 18
avl0.insert(int3)                                                       # STEP 19
avl0.insert(int0)                                                       # STEP 20
avl0.delete(int3)                                                       # STEP 21
avl0.insert(int2)                                                       # STEP 22
avl0.insert(int2)                                                       # STEP 23
int3 = 5                                                                # STEP 24
int2 = 12                                                               # STEP 25
avl0.insert(int1)                                                       # STEP 26
int1 = 18                                                               # STEP 27
int0 = 3                                                                # STEP 28
avl0 == avl1                                                            # STEP 29
avl0.delete(int2)                                                       # STEP 30
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103eaca70>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE 2
int2 = 6                                                                 # STEP 0
int3 = 17                                                                # STEP 1
int1 = 4                                                                 # STEP 2
int0 = 5                                                                 # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
avl2.insert(int0)                                                        # STEP 5
int0 = 14                                                                # STEP 6
avl2 == avl2                                                             # STEP 7
result = avl2.find(int2)                                                 # STEP 8
int2 = 1                                                                 # STEP 9
result = avl2.find(int3)                                                # STEP 10
int3 = 12                                                               # STEP 11
avl2.insert(int3)                                                       # STEP 12
int3 = 9                                                                # STEP 13
avl2.insert(int3)                                                       # STEP 14
int3 = 11                                                               # STEP 15
avl1 = avl.AVLTree()                                                    # STEP 16
avl1.delete(int2)                                                       # STEP 17
avl1.insert(int0)                                                       # STEP 18
int0 = 10                                                               # STEP 19
avl1.delete(int0)                                                       # STEP 20
int2 = 8                                                                # STEP 21
avl2.insert(int0)                                                       # STEP 22
avl2.delete(int0)                                                       # STEP 23
avl1.insert(int0)                                                       # STEP 24
int0 = 16                                                               # STEP 25
result = avl2.find(int1)                                                # STEP 26
avl2.insert(int0)                                                       # STEP 27
avl1.delete(int2)                                                       # STEP 28
int0 = 14                                                               # STEP 29
avl1.insert(int2)                                                       # STEP 30
int2 = 6                                                                # STEP 31
int1 = 17                                                               # STEP 32
avl2.delete(int2)                                                       # STEP 33
avl1.delete(int0)                                                       # STEP 34
result = avl1.find(int2)                                                # STEP 35
avl2.insert(int3)                                                       # STEP 36
avl1.delete(int0)                                                       # STEP 37
int3 = 7                                                                # STEP 38
int0 = 14                                                               # STEP 39
avl1.insert(int1)                                                       # STEP 40
result = avl1.find(int0)                                                # STEP 41
result = avl1.inorder()                                                 # STEP 42
int2 = 7                                                                # STEP 43
result = avl2.find(int1)                                                # STEP 44
int0 = 1                                                                # STEP 45
int1 = 5                                                                # STEP 46
avl2.delete(int2)                                                       # STEP 47
int2 = 19                                                               # STEP 48
avl1 = avl.AVLTree()                                                    # STEP 49
result = avl1.find(int2)                                                # STEP 50
avl2.delete(int2)                                                       # STEP 51
int2 = 4                                                                # STEP 52
result = avl2.find(int1)                                                # STEP 53
int1 = 18                                                               # STEP 54
avl0 = avl.AVLTree()                                                    # STEP 55
avl0.delete(int1)                                                       # STEP 56
avl1.insert(int0)                                                       # STEP 57
avl0.insert(int3)                                                       # STEP 58
int1 = 10                                                               # STEP 59
int3 = 2                                                                # STEP 60
result = avl0.find(int2)                                                # STEP 61
int0 = 5                                                                # STEP 62
avl2.delete(int1)                                                       # STEP 63
int1 = 8                                                                # STEP 64
avl0.delete(int0)                                                       # STEP 65
avl2.delete(int0)                                                       # STEP 66
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103e8c638>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
200 BRANCHES COVERED
150 STATEMENTS COVERED

Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.13994.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x101c9c518>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
Original test has 73 steps

SAVING TEST AS failure.13994.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 11                                                                # STEP 0
ACTION: int2 = 11 
int2 = None : <type 'NoneType'>
=> int2 = 11 : <type 'int'>
==================================================
int3 = 4                                                                 # STEP 1
ACTION: int3 = 4 
int3 = None : <type 'NoneType'>
=> int3 = 4 : <type 'int'>
==================================================
int0 = 11                                                                # STEP 2
ACTION: int0 = 11 
int0 = None : <type 'NoneType'>
=> int0 = 11 : <type 'int'>
==================================================
int1 = 5                                                                 # STEP 3
ACTION: int1 = 5 
int1 = None : <type 'NoneType'>
=> int1 = 5 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x1020af290> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.delete(int2)                                                        # STEP 5
ACTION: avl2.delete(int2) 
int2 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1020af290> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int2 = 4                                                                 # STEP 6
ACTION: int2 = 4 
int2 = 11 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
avl2 == avl2                                                             # STEP 7
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x1020af290> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
result = avl2.find(int3)                                                 # STEP 8
ACTION: result = avl2.find(int3) 
int3 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1020af290> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
result = avl2.find(int2)                                                 # STEP 9
ACTION: result = avl2.find(int2) 
int2 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1020af290> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int3 = 14                                                               # STEP 10
ACTION: int3 = 14 
int3 = 4 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
int2 = 4                                                                # STEP 11
ACTION: int2 = 4 
int2 = 4 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 12
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x101de44d0> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
result = avl2.find(int3)                                                # STEP 13
ACTION: result = avl2.find(int3) 
int3 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1020af290> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl2.delete(int3)                                                       # STEP 14
ACTION: avl2.delete(int3) 
int3 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1020af290> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int3 = 12                                                               # STEP 15
ACTION: int3 = 12 
int3 = 14 : <type 'int'>
=> int3 = 12 : <type 'int'>
==================================================
result = avl2.find(int3)                                                # STEP 16
ACTION: result = avl2.find(int3) 
int3 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1020af290> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
result = avl2.find(int1)                                                # STEP 17
ACTION: result = avl2.find(int1) 
int1 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1020af290> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl0.delete(int3)                                                       # STEP 18
ACTION: avl0.delete(int3) 
int3 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101de44d0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int3 = 6                                                                # STEP 19
ACTION: int3 = 6 
int3 = 12 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
result = avl2.find(int3)                                                # STEP 20
ACTION: result = avl2.find(int3) 
int3 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1020af290> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
result = avl0.find(int2)                                                # STEP 21
ACTION: result = avl0.find(int2) 
int2 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101de44d0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
int3 = 18                                                               # STEP 22
ACTION: int3 = 18 
int3 = 6 : <type 'int'>
=> int3 = 18 : <type 'int'>
==================================================
int1 = 4                                                                # STEP 23
ACTION: int1 = 4 
int1 = 5 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
int2 = 9                                                                # STEP 24
ACTION: int2 = 9 
int2 = 4 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 25
ACTION: avl0.insert(int0) 
int0 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101de44d0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([11]) : <type 'set'>
==================================================
int0 = 2                                                                # STEP 26
ACTION: int0 = 2 
int0 = 11 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 27
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x1020af290> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl0.find(int2)                                                # STEP 28
ACTION: result = avl0.find(int2) 
int2 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101de44d0> : <type 'instance'>
avl_REF0 = set([11]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
int2 = 19                                                               # STEP 29
ACTION: int2 = 19 
int2 = 9 : <type 'int'>
=> int2 = 19 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 30
ACTION: avl0.delete(int3) 
int3 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101de44d0> : <type 'instance'>
avl_REF0 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int3 = 1                                                                # STEP 31
ACTION: int3 = 1 
int3 = 18 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 32
ACTION: avl0.delete(int0) 
int0 = 2 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101de44d0> : <type 'instance'>
avl_REF0 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
result = avl2.find(int1)                                                # STEP 33
ACTION: result = avl2.find(int1) 
int1 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1020af290> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int1 = 6                                                                # STEP 34
ACTION: int1 = 6 
int1 = 4 : <type 'int'>
=> int1 = 6 : <type 'int'>
==================================================
int0 = 10                                                               # STEP 35
ACTION: int0 = 10 
int0 = 2 : <type 'int'>
=> int0 = 10 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 36
ACTION: avl2.delete(int3) 
int3 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1020af290> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
result = avl2.find(int1)                                                # STEP 37
ACTION: result = avl2.find(int1) 
int1 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1020af290> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl2 = avl.AVLTree()                                                    # STEP 38
ACTION: avl2 = avl.AVLTree() 
avl2 = <avlbug2.AVLTree instance at 0x1020af290> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
=> avl2 = <avlbug2.AVLTree instance at 0x1024ee1b8> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
==================================================
avl2.delete(int2)                                                       # STEP 39
ACTION: avl2.delete(int2) 
int2 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1024ee1b8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl0.insert(int2)                                                       # STEP 40
ACTION: avl0.insert(int2) 
int2 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101de44d0> : <type 'instance'>
avl_REF0 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([19, 11]) : <type 'set'>
==================================================
int1 = 20                                                               # STEP 41
ACTION: int1 = 20 
int1 = 6 : <type 'int'>
=> int1 = 20 : <type 'int'>
==================================================
int3 = 13                                                               # STEP 42
ACTION: int3 = 13 
int3 = 1 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
int2 = 20                                                               # STEP 43
ACTION: int2 = 20 
int2 = 19 : <type 'int'>
=> int2 = 20 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 44
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x101e15a70> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 45
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x101de44d0> : <type 'instance'>
avl_REF0 = set([19, 11]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl2.insert(int2)                                                       # STEP 46
ACTION: avl2.insert(int2) 
int2 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1024ee1b8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([20]) : <type 'set'>
==================================================
avl1 == avl1                                                            # STEP 47
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x101e15a70> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl2 == avl1                                                            # STEP 48
ACTION: avl2 == avl1 
avl2 = <avlbug2.AVLTree instance at 0x1024ee1b8> : <type 'instance'>
avl1 = <avlbug2.AVLTree instance at 0x101e15a70> : <type 'instance'>
avl_REF2 = set([20]) : <type 'set'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
int2 = 4                                                                # STEP 49
ACTION: int2 = 4 
int2 = 20 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
result = avl2.find(int3)                                                # STEP 50
ACTION: result = avl2.find(int3) 
int3 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1024ee1b8> : <type 'instance'>
avl_REF2 = set([20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl1 == avl2                                                            # STEP 51
ACTION: avl1 == avl2 
avl1 = <avlbug2.AVLTree instance at 0x101e15a70> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x1024ee1b8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
avl_REF2 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
int3 = 5                                                                # STEP 52
ACTION: int3 = 5 
int3 = 13 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 53
ACTION: avl0.insert(int1) 
int1 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101de44d0> : <type 'instance'>
avl_REF0 = set([19, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([19, 11, 20]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 54
ACTION: avl1.insert(int0) 
int0 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101e15a70> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([10]) : <type 'set'>
==================================================
int1 = 8                                                                # STEP 55
ACTION: int1 = 8 
int1 = 20 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 56
ACTION: avl2.delete(int1) 
int1 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1024ee1b8> : <type 'instance'>
avl_REF2 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl1.insert(int0)                                                       # STEP 57
ACTION: avl1.insert(int0) 
int0 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101e15a70> : <type 'instance'>
avl_REF1 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl2.delete(int3)                                                       # STEP 58
ACTION: avl2.delete(int3) 
int3 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1024ee1b8> : <type 'instance'>
avl_REF2 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int3 = 13                                                               # STEP 59
ACTION: int3 = 13 
int3 = 5 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
result = avl2.find(int1)                                                # STEP 60
ACTION: result = avl2.find(int1) 
int1 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1024ee1b8> : <type 'instance'>
avl_REF2 = set([20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl0.insert(int0)                                                       # STEP 61
ACTION: avl0.insert(int0) 
int0 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101de44d0> : <type 'instance'>
avl_REF0 = set([19, 11, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([19, 10, 11, 20]) : <type 'set'>
==================================================
int0 = 12                                                               # STEP 62
ACTION: int0 = 12 
int0 = 10 : <type 'int'>
=> int0 = 12 : <type 'int'>
==================================================
int1 = 12                                                               # STEP 63
ACTION: int1 = 12 
int1 = 8 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 64
ACTION: avl2.insert(int1) 
int1 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1024ee1b8> : <type 'instance'>
avl_REF2 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([12, 20]) : <type 'set'>
==================================================
result = avl0.find(int3)                                                # STEP 65
ACTION: result = avl0.find(int3) 
int3 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101de44d0> : <type 'instance'>
avl_REF0 = set([19, 10, 11, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
result = avl1.find(int0)                                                # STEP 66
ACTION: result = avl1.find(int0) 
int0 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101e15a70> : <type 'instance'>
avl_REF1 = set([10]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
int1 = 20                                                               # STEP 67
ACTION: int1 = 20 
int1 = 12 : <type 'int'>
=> int1 = 20 : <type 'int'>
==================================================
int3 = 3                                                                # STEP 68
ACTION: int3 = 3 
int3 = 13 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 69
ACTION: avl0.insert(int3) 
int3 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101de44d0> : <type 'instance'>
avl_REF0 = set([19, 10, 11, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([19, 3, 10, 11, 20]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 70
ACTION: avl0.delete(int2) 
int2 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101de44d0> : <type 'instance'>
avl_REF0 = set([19, 3, 10, 11, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.insert(int1)                                                       # STEP 71
ACTION: avl0.insert(int1) 
int1 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101de44d0> : <type 'instance'>
avl_REF0 = set([19, 3, 10, 11, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl0.delete(int1)                                                       # STEP 72
ACTION: avl0.delete(int1) 
int1 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101de44d0> : <type 'instance'>
avl_REF0 = set([19, 3, 10, 11, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([19, 3, 10, 11]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10241bb90>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #3 STEP #94 (0:00:30.032755) Sun Apr 30 03:04:04 2017 [ 136 stmts 184 branches ]
  14 [3:1]
-- < 2 [2:-1]
---- < 1 [0:0] L
---- > 6 [1:1]
------ < 3 [0:0] L
-- > 17 [1:0]
---- < 16 [0:0] L
---- > 19 [0:0] L
set([1, 2, 3, 6, 14, 16, 17, 19])
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 29
STOPPING TESTING DUE TO TIMEOUT
7.94438927507 PERCENT COVERED
60.2408430576 TOTAL RUNTIME
7 EXECUTED
602 TOTAL TEST OPERATIONS
26.7548444271 TIME SPENT EXECUTING TEST OPERATIONS
0.022700548172 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
26.8770143986 TIME SPENT CHECKING PROPERTIES
53.6318588257 TOTAL TIME SPENT RUNNING SUT
0.0046751499176 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int2 = 11                                                                # STEP 0
int3 = 4                                                                 # STEP 1
int0 = 11                                                                # STEP 2
int1 = 5                                                                 # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
avl2.delete(int2)                                                        # STEP 5
int2 = 4                                                                 # STEP 6
avl2 == avl2                                                             # STEP 7
result = avl2.find(int3)                                                 # STEP 8
result = avl2.find(int2)                                                 # STEP 9
int3 = 14                                                               # STEP 10
int2 = 4                                                                # STEP 11
avl0 = avl.AVLTree()                                                    # STEP 12
result = avl2.find(int3)                                                # STEP 13
avl2.delete(int3)                                                       # STEP 14
int3 = 12                                                               # STEP 15
result = avl2.find(int3)                                                # STEP 16
result = avl2.find(int1)                                                # STEP 17
avl0.delete(int3)                                                       # STEP 18
int3 = 6                                                                # STEP 19
result = avl2.find(int3)                                                # STEP 20
result = avl0.find(int2)                                                # STEP 21
int3 = 18                                                               # STEP 22
int1 = 4                                                                # STEP 23
int2 = 9                                                                # STEP 24
avl0.insert(int0)                                                       # STEP 25
int0 = 2                                                                # STEP 26
result = avl2.inorder()                                                 # STEP 27
result = avl0.find(int2)                                                # STEP 28
int2 = 19                                                               # STEP 29
avl0.delete(int3)                                                       # STEP 30
int3 = 1                                                                # STEP 31
avl0.delete(int0)                                                       # STEP 32
result = avl2.find(int1)                                                # STEP 33
int1 = 6                                                                # STEP 34
int0 = 10                                                               # STEP 35
avl2.delete(int3)                                                       # STEP 36
result = avl2.find(int1)                                                # STEP 37
avl2 = avl.AVLTree()                                                    # STEP 38
avl2.delete(int2)                                                       # STEP 39
avl0.insert(int2)                                                       # STEP 40
int1 = 20                                                               # STEP 41
int3 = 13                                                               # STEP 42
int2 = 20                                                               # STEP 43
avl1 = avl.AVLTree()                                                    # STEP 44
result = avl0.inorder()                                                 # STEP 45
avl2.insert(int2)                                                       # STEP 46
avl1 == avl1                                                            # STEP 47
avl2 == avl1                                                            # STEP 48
int2 = 4                                                                # STEP 49
result = avl2.find(int3)                                                # STEP 50
avl1 == avl2                                                            # STEP 51
int3 = 5                                                                # STEP 52
avl0.insert(int1)                                                       # STEP 53
avl1.insert(int0)                                                       # STEP 54
int1 = 8                                                                # STEP 55
avl2.delete(int1)                                                       # STEP 56
avl1.insert(int0)                                                       # STEP 57
avl2.delete(int3)                                                       # STEP 58
int3 = 13                                                               # STEP 59
result = avl2.find(int1)                                                # STEP 60
avl0.insert(int0)                                                       # STEP 61
int0 = 12                                                               # STEP 62
int1 = 12                                                               # STEP 63
avl2.insert(int1)                                                       # STEP 64
result = avl0.find(int3)                                                # STEP 65
result = avl1.find(int0)                                                # STEP 66
int1 = 20                                                               # STEP 67
int3 = 3                                                                # STEP 68
avl0.insert(int3)                                                       # STEP 69
avl0.delete(int2)                                                       # STEP 70
avl0.insert(int1)                                                       # STEP 71
avl0.delete(int1)                                                       # STEP 72
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10241bb90>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
200 BRANCHES COVERED
148 STATEMENTS COVERED

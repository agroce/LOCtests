Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.99254.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1053665f0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 56 steps

SAVING TEST AS failure.99254.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 20                                                                # STEP 0
ACTION: int0 = 20 
int0 = None : <type 'NoneType'>
=> int0 = 20 : <type 'int'>
==================================================
int2 = 16                                                                # STEP 1
ACTION: int2 = 16 
int2 = None : <type 'NoneType'>
=> int2 = 16 : <type 'int'>
==================================================
int1 = 13                                                                # STEP 2
ACTION: int1 = 13 
int1 = None : <type 'NoneType'>
=> int1 = 13 : <type 'int'>
==================================================
int3 = 12                                                                # STEP 3
ACTION: int3 = 12 
int3 = None : <type 'NoneType'>
=> int3 = 12 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x1058b9320> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.delete(int3)                                                        # STEP 5
ACTION: avl1.delete(int3) 
int3 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058b9320> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int3 = 15                                                                # STEP 6
ACTION: int3 = 15 
int3 = 12 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
avl1.insert(int2)                                                        # STEP 7
ACTION: avl1.insert(int2) 
int2 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058b9320> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([16]) : <type 'set'>
==================================================
int2 = 10                                                                # STEP 8
ACTION: int2 = 10 
int2 = 16 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
avl1.insert(int1)                                                        # STEP 9
ACTION: avl1.insert(int1) 
int1 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058b9320> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([16, 13]) : <type 'set'>
==================================================
int1 = 14                                                               # STEP 10
ACTION: int1 = 14 
int1 = 13 : <type 'int'>
=> int1 = 14 : <type 'int'>
==================================================
result = avl1.find(int2)                                                # STEP 11
ACTION: result = avl1.find(int2) 
int2 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058b9320> : <type 'instance'>
avl_REF1 = set([16, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl1.insert(int1)                                                       # STEP 12
ACTION: avl1.insert(int1) 
int1 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058b9320> : <type 'instance'>
avl_REF1 = set([16, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([16, 13, 14]) : <type 'set'>
==================================================
int2 = 15                                                               # STEP 13
ACTION: int2 = 15 
int2 = 10 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
int1 = 11                                                               # STEP 14
ACTION: int1 = 11 
int1 = 14 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 15
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x1058b9320> : <type 'instance'>
avl_REF1 = set([16, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl2 = avl.AVLTree()                                                    # STEP 16
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x105390050> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 17
ACTION: avl2.delete(int1) 
int1 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105390050> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
result = avl1.find(int1)                                                # STEP 18
ACTION: result = avl1.find(int1) 
int1 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058b9320> : <type 'instance'>
avl_REF1 = set([16, 13, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int1 = 8                                                                # STEP 19
ACTION: int1 = 8 
int1 = 11 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 20
ACTION: avl1.insert(int3) 
int3 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058b9320> : <type 'instance'>
avl_REF1 = set([16, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([16, 13, 14, 15]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 21
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x105390050> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int3 = 17                                                               # STEP 22
ACTION: int3 = 17 
int3 = 15 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 23
ACTION: avl2.insert(int1) 
int1 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105390050> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([8]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 24
ACTION: avl1.delete(int3) 
int3 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058b9320> : <type 'instance'>
avl_REF1 = set([16, 13, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int3 = 9                                                                # STEP 25
ACTION: int3 = 9 
int3 = 17 : <type 'int'>
=> int3 = 9 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 26
ACTION: avl1.delete(int1) 
int1 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058b9320> : <type 'instance'>
avl_REF1 = set([16, 13, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl2.insert(int1)                                                       # STEP 27
ACTION: avl2.insert(int1) 
int1 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105390050> : <type 'instance'>
avl_REF2 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
int1 = 3                                                                # STEP 28
ACTION: int1 = 3 
int1 = 8 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 29
ACTION: avl2.delete(int2) 
int2 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105390050> : <type 'instance'>
avl_REF2 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.delete(int1)                                                       # STEP 30
ACTION: avl2.delete(int1) 
int1 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105390050> : <type 'instance'>
avl_REF2 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
result = avl1.find(int1)                                                # STEP 31
ACTION: result = avl1.find(int1) 
int1 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058b9320> : <type 'instance'>
avl_REF1 = set([16, 13, 14, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int2 = 16                                                               # STEP 32
ACTION: int2 = 16 
int2 = 15 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 33
ACTION: avl1.delete(int0) 
int0 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058b9320> : <type 'instance'>
avl_REF1 = set([16, 13, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int0 = 19                                                               # STEP 34
ACTION: int0 = 19 
int0 = 20 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 35
ACTION: avl2.delete(int0) 
int0 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105390050> : <type 'instance'>
avl_REF2 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int1 = 17                                                               # STEP 36
ACTION: int1 = 17 
int1 = 3 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
int0 = 15                                                               # STEP 37
ACTION: int0 = 15 
int0 = 19 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 38
ACTION: avl2.insert(int0) 
int0 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105390050> : <type 'instance'>
avl_REF2 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([8, 15]) : <type 'set'>
==================================================
int0 = 13                                                               # STEP 39
ACTION: int0 = 13 
int0 = 15 : <type 'int'>
=> int0 = 13 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 40
ACTION: avl1.delete(int3) 
int3 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058b9320> : <type 'instance'>
avl_REF1 = set([16, 13, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int3 = 12                                                               # STEP 41
ACTION: int3 = 12 
int3 = 9 : <type 'int'>
=> int3 = 12 : <type 'int'>
==================================================
result = avl2.find(int2)                                                # STEP 42
ACTION: result = avl2.find(int2) 
int2 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105390050> : <type 'instance'>
avl_REF2 = set([8, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl1.insert(int0)                                                       # STEP 43
ACTION: avl1.insert(int0) 
int0 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058b9320> : <type 'instance'>
avl_REF1 = set([16, 13, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
result = avl2.find(int2)                                                # STEP 44
ACTION: result = avl2.find(int2) 
int2 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105390050> : <type 'instance'>
avl_REF2 = set([8, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int0 = 13                                                               # STEP 45
ACTION: int0 = 13 
int0 = 13 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 46
ACTION: avl2.insert(int3) 
int3 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105390050> : <type 'instance'>
avl_REF2 = set([8, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([8, 12, 15]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 47
ACTION: avl1.delete(int3) 
int3 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058b9320> : <type 'instance'>
avl_REF1 = set([16, 13, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int2 = 2                                                                # STEP 48
ACTION: int2 = 2 
int2 = 16 : <type 'int'>
=> int2 = 2 : <type 'int'>
==================================================
int3 = 11                                                               # STEP 49
ACTION: int3 = 11 
int3 = 12 : <type 'int'>
=> int3 = 11 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 50
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1058b9320> : <type 'instance'>
avl_REF1 = set([16, 13, 14, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl0 = avl.AVLTree()                                                    # STEP 51
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x1053a5ea8> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
result = avl1.find(int2)                                                # STEP 52
ACTION: result = avl1.find(int2) 
int2 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058b9320> : <type 'instance'>
avl_REF1 = set([16, 13, 14, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int2 = 9                                                                # STEP 53
ACTION: int2 = 9 
int2 = 2 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
result = avl2.find(int0)                                                # STEP 54
ACTION: result = avl2.find(int0) 
int0 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105390050> : <type 'instance'>
avl_REF2 = set([8, 12, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl1.delete(int0)                                                       # STEP 55
ACTION: avl1.delete(int0) 
int0 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058b9320> : <type 'instance'>
avl_REF1 = set([16, 13, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([16, 14, 15]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105399a28>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
  9 [2:0]
-- < 1 [1:-1]
---- > 4 [0:0] L
-- > 14 [1:0]
---- < 13 [0:0] L
---- > 15 [0:0] L
set([1, 4, 9, 13, 14, 15])
TEST #5 STEP #25 (0:00:30.032430) Fri Apr 28 03:30:23 2017 [ 161 stmts 214 branches ]
  9 [2:0]
-- < 1 [1:-1]
---- > 8 [0:0] L
-- > 16 [1:0]
---- < 11 [0:0] L
---- > 18 [0:0] L
set([1, 8, 9, 11, 16, 18])
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 60
STOPPING TESTING DUE TO TIMEOUT
8.6528673227 PERCENT COVERED
60.2169561386 TOTAL RUNTIME
9 EXECUTED
816 TOTAL TEST OPERATIONS
27.9813187122 TIME SPENT EXECUTING TEST OPERATIONS
0.0260019302368 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
28.1620607376 TIME SPENT CHECKING PROPERTIES
56.1433794498 TOTAL TIME SPENT RUNNING SUT
0.00467371940613 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int0 = 20                                                                # STEP 0
int2 = 16                                                                # STEP 1
int1 = 13                                                                # STEP 2
int3 = 12                                                                # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
avl1.delete(int3)                                                        # STEP 5
int3 = 15                                                                # STEP 6
avl1.insert(int2)                                                        # STEP 7
int2 = 10                                                                # STEP 8
avl1.insert(int1)                                                        # STEP 9
int1 = 14                                                               # STEP 10
result = avl1.find(int2)                                                # STEP 11
avl1.insert(int1)                                                       # STEP 12
int2 = 15                                                               # STEP 13
int1 = 11                                                               # STEP 14
avl1 == avl1                                                            # STEP 15
avl2 = avl.AVLTree()                                                    # STEP 16
avl2.delete(int1)                                                       # STEP 17
result = avl1.find(int1)                                                # STEP 18
int1 = 8                                                                # STEP 19
avl1.insert(int3)                                                       # STEP 20
result = avl2.inorder()                                                 # STEP 21
int3 = 17                                                               # STEP 22
avl2.insert(int1)                                                       # STEP 23
avl1.delete(int3)                                                       # STEP 24
int3 = 9                                                                # STEP 25
avl1.delete(int1)                                                       # STEP 26
avl2.insert(int1)                                                       # STEP 27
int1 = 3                                                                # STEP 28
avl2.delete(int2)                                                       # STEP 29
avl2.delete(int1)                                                       # STEP 30
result = avl1.find(int1)                                                # STEP 31
int2 = 16                                                               # STEP 32
avl1.delete(int0)                                                       # STEP 33
int0 = 19                                                               # STEP 34
avl2.delete(int0)                                                       # STEP 35
int1 = 17                                                               # STEP 36
int0 = 15                                                               # STEP 37
avl2.insert(int0)                                                       # STEP 38
int0 = 13                                                               # STEP 39
avl1.delete(int3)                                                       # STEP 40
int3 = 12                                                               # STEP 41
result = avl2.find(int2)                                                # STEP 42
avl1.insert(int0)                                                       # STEP 43
result = avl2.find(int2)                                                # STEP 44
int0 = 13                                                               # STEP 45
avl2.insert(int3)                                                       # STEP 46
avl1.delete(int3)                                                       # STEP 47
int2 = 2                                                                # STEP 48
int3 = 11                                                               # STEP 49
result = avl1.inorder()                                                 # STEP 50
avl0 = avl.AVLTree()                                                    # STEP 51
result = avl1.find(int2)                                                # STEP 52
int2 = 9                                                                # STEP 53
result = avl2.find(int0)                                                # STEP 54
avl1.delete(int0)                                                       # STEP 55
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105399a28>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
218 BRANCHES COVERED
163 STATEMENTS COVERED

Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.555.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  13 [2:0]
-- < 7 [1:1]
---- < 3 [0:0] L
-- > 17 [1:0]
---- < 14 [0:0] L
---- > 19 [0:0] L
set([3, 7, 13, 14, 17, 19])
  5 [2:0]
-- < 3 [1:-1]
---- > 4 [0:0] L
-- > 13 [1:0]
---- < 8 [0:0] L
---- > 19 [0:0] L
set([3, 4, 5, 8, 13, 19])
  5 [2:0]
-- < 3 [1:-1]
---- > 4 [0:0] L
-- > 13 [1:0]
---- < 8 [0:0] L
---- > 19 [0:0] L
set([3, 4, 5, 8, 13, 19])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104ba8998>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
Original test has 81 steps

SAVING TEST AS failure.555.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
avl2 = avl.AVLTree()                                                     # STEP 0
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x104ade0e0> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl2.inorder()                                                  # STEP 1
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104ade0e0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int0 = 4                                                                 # STEP 2
ACTION: int0 = 4 
int0 = None : <type 'NoneType'>
=> int0 = 4 : <type 'int'>
==================================================
result = avl2.inorder()                                                  # STEP 3
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104ade0e0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int0)                                                        # STEP 4
ACTION: avl2.insert(int0) 
int0 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ade0e0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([4]) : <type 'set'>
==================================================
int2 = 6                                                                 # STEP 5
ACTION: int2 = 6 
int2 = None : <type 'NoneType'>
=> int2 = 6 : <type 'int'>
==================================================
result = avl2.inorder()                                                  # STEP 6
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104ade0e0> : <type 'instance'>
avl_REF2 = set([4]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int0)                                                        # STEP 7
ACTION: avl2.insert(int0) 
int0 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ade0e0> : <type 'instance'>
avl_REF2 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl2.delete(int0)                                                        # STEP 8
ACTION: avl2.delete(int0) 
int0 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ade0e0> : <type 'instance'>
avl_REF2 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int0)                                                        # STEP 9
ACTION: avl2.insert(int0) 
int0 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ade0e0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([4]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 10
ACTION: avl2.delete(int2) 
int2 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ade0e0> : <type 'instance'>
avl_REF2 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.insert(int0)                                                       # STEP 11
ACTION: avl2.insert(int0) 
int0 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ade0e0> : <type 'instance'>
avl_REF2 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl2.insert(int0)                                                       # STEP 12
ACTION: avl2.insert(int0) 
int0 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ade0e0> : <type 'instance'>
avl_REF2 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl2.delete(int2)                                                       # STEP 13
ACTION: avl2.delete(int2) 
int2 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ade0e0> : <type 'instance'>
avl_REF2 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.insert(int0)                                                       # STEP 14
ACTION: avl2.insert(int0) 
int0 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ade0e0> : <type 'instance'>
avl_REF2 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl2 = avl.AVLTree()                                                    # STEP 15
ACTION: avl2 = avl.AVLTree() 
avl2 = <avl.AVLTree instance at 0x104ade0e0> : <type 'instance'>
avl_REF2 = set([4]) : <type 'set'>
=> avl2 = <avl.AVLTree instance at 0x1058ad758> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int3 = 2                                                                # STEP 16
ACTION: int3 = 2 
int3 = None : <type 'NoneType'>
=> int3 = 2 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 17
ACTION: avl2.insert(int2) 
int2 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058ad758> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([6]) : <type 'set'>
==================================================
int2 = 16                                                               # STEP 18
ACTION: int2 = 16 
int2 = 6 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 19
ACTION: avl2.insert(int3) 
int3 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058ad758> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([2, 6]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 20
ACTION: avl2.delete(int3) 
int3 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058ad758> : <type 'instance'>
avl_REF2 = set([2, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([6]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 21
ACTION: avl2.insert(int3) 
int3 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058ad758> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([2, 6]) : <type 'set'>
==================================================
int1 = 15                                                               # STEP 22
ACTION: int1 = 15 
int1 = None : <type 'NoneType'>
=> int1 = 15 : <type 'int'>
==================================================
avl2 == avl2                                                            # STEP 23
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x1058ad758> : <type 'instance'>
avl_REF2 = set([2, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl2.insert(int3)                                                       # STEP 24
ACTION: avl2.insert(int3) 
int3 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058ad758> : <type 'instance'>
avl_REF2 = set([2, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
int3 = 6                                                                # STEP 25
ACTION: int3 = 6 
int3 = 2 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 26
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x1058ad758> : <type 'instance'>
avl_REF2 = set([2, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int1)                                                       # STEP 27
ACTION: avl2.delete(int1) 
int1 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058ad758> : <type 'instance'>
avl_REF2 = set([2, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int0 = 14                                                               # STEP 28
ACTION: int0 = 14 
int0 = 4 : <type 'int'>
=> int0 = 14 : <type 'int'>
==================================================
int1 = 11                                                               # STEP 29
ACTION: int1 = 11 
int1 = 15 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 30
ACTION: avl2.insert(int1) 
int1 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058ad758> : <type 'instance'>
avl_REF2 = set([2, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([2, 11, 6]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 31
ACTION: avl2.delete(int0) 
int0 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058ad758> : <type 'instance'>
avl_REF2 = set([2, 11, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.delete(int2)                                                       # STEP 32
ACTION: avl2.delete(int2) 
int2 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058ad758> : <type 'instance'>
avl_REF2 = set([2, 11, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.insert(int3)                                                       # STEP 33
ACTION: avl2.insert(int3) 
int3 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058ad758> : <type 'instance'>
avl_REF2 = set([2, 11, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
avl2.insert(int0)                                                       # STEP 34
ACTION: avl2.insert(int0) 
int0 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058ad758> : <type 'instance'>
avl_REF2 = set([2, 11, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([2, 11, 14, 6]) : <type 'set'>
==================================================
int3 = 10                                                               # STEP 35
ACTION: int3 = 10 
int3 = 6 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 36
ACTION: avl2.insert(int2) 
int2 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058ad758> : <type 'instance'>
avl_REF2 = set([2, 11, 14, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([16, 2, 11, 14, 6]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 37
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x1058ad758> : <type 'instance'>
avl_REF2 = set([16, 2, 11, 14, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int0)                                                       # STEP 38
ACTION: avl2.delete(int0) 
int0 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058ad758> : <type 'instance'>
avl_REF2 = set([16, 2, 11, 14, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([16, 2, 11, 6]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 39
ACTION: avl2.delete(int3) 
int3 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058ad758> : <type 'instance'>
avl_REF2 = set([16, 2, 11, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.delete(int0)                                                       # STEP 40
ACTION: avl2.delete(int0) 
int0 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058ad758> : <type 'instance'>
avl_REF2 = set([16, 2, 11, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.delete(int1)                                                       # STEP 41
ACTION: avl2.delete(int1) 
int1 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058ad758> : <type 'instance'>
avl_REF2 = set([16, 2, 11, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([16, 2, 6]) : <type 'set'>
==================================================
int3 = 1                                                                # STEP 42
ACTION: int3 = 1 
int3 = 10 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 43
ACTION: avl2.delete(int3) 
int3 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058ad758> : <type 'instance'>
avl_REF2 = set([16, 2, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.delete(int2)                                                       # STEP 44
ACTION: avl2.delete(int2) 
int2 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058ad758> : <type 'instance'>
avl_REF2 = set([16, 2, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([2, 6]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 45
ACTION: avl2.insert(int1) 
int1 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058ad758> : <type 'instance'>
avl_REF2 = set([2, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([2, 11, 6]) : <type 'set'>
==================================================
int0 = 20                                                               # STEP 46
ACTION: int0 = 20 
int0 = 14 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 47
ACTION: avl2.delete(int1) 
int1 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058ad758> : <type 'instance'>
avl_REF2 = set([2, 11, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([2, 6]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 48
ACTION: avl2.delete(int1) 
int1 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058ad758> : <type 'instance'>
avl_REF2 = set([2, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int2)                                                       # STEP 49
ACTION: avl2.insert(int2) 
int2 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058ad758> : <type 'instance'>
avl_REF2 = set([2, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([16, 2, 6]) : <type 'set'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 50
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x104a65368> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 51
ACTION: avl2.delete(int0) 
int0 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058ad758> : <type 'instance'>
avl_REF2 = set([16, 2, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.insert(int1)                                                       # STEP 52
ACTION: avl2.insert(int1) 
int1 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058ad758> : <type 'instance'>
avl_REF2 = set([16, 2, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([16, 2, 11, 6]) : <type 'set'>
==================================================
int3 = 8                                                                # STEP 53
ACTION: int3 = 8 
int3 = 1 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
int1 = 11                                                               # STEP 54
ACTION: int1 = 11 
int1 = 11 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 55
ACTION: avl2.delete(int2) 
int2 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058ad758> : <type 'instance'>
avl_REF2 = set([16, 2, 11, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([2, 11, 6]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 56
ACTION: avl0.insert(int3) 
int3 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104a65368> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([8]) : <type 'set'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 57
ACTION: avl2 = avl.AVLTree() 
avl2 = <avl.AVLTree instance at 0x1058ad758> : <type 'instance'>
avl_REF2 = set([2, 11, 6]) : <type 'set'>
=> avl2 = <avl.AVLTree instance at 0x104a60680> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 58
ACTION: avl2.insert(int2) 
int2 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a60680> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([16]) : <type 'set'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 59
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x104a60a28> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 60
ACTION: avl0.delete(int1) 
int1 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104a65368> : <type 'instance'>
avl_REF0 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl2.delete(int1)                                                       # STEP 61
ACTION: avl2.delete(int1) 
int1 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a60680> : <type 'instance'>
avl_REF2 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int2)                                                       # STEP 62
ACTION: avl2.insert(int2) 
int2 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a60680> : <type 'instance'>
avl_REF2 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl0.insert(int2)                                                       # STEP 63
ACTION: avl0.insert(int2) 
int2 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104a65368> : <type 'instance'>
avl_REF0 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([8, 16]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 64
ACTION: avl0.insert(int1) 
int1 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104a65368> : <type 'instance'>
avl_REF0 = set([8, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([8, 16, 11]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 65
ACTION: avl0.delete(int3) 
int3 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104a65368> : <type 'instance'>
avl_REF0 = set([8, 16, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([16, 11]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 66
ACTION: avl1.delete(int2) 
int2 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104a60a28> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl2.insert(int0)                                                       # STEP 67
ACTION: avl2.insert(int0) 
int0 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a60680> : <type 'instance'>
avl_REF2 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([16, 20]) : <type 'set'>
==================================================
int1 = 20                                                               # STEP 68
ACTION: int1 = 20 
int1 = 11 : <type 'int'>
=> int1 = 20 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 69
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104a65368> : <type 'instance'>
avl_REF0 = set([16, 11]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
result = avl2.inorder()                                                 # STEP 70
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104a60680> : <type 'instance'>
avl_REF2 = set([16, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int1)                                                       # STEP 71
ACTION: avl2.delete(int1) 
int1 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a60680> : <type 'instance'>
avl_REF2 = set([16, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([16]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 72
ACTION: avl0.insert(int1) 
int1 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104a65368> : <type 'instance'>
avl_REF0 = set([16, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([16, 11, 20]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 73
ACTION: avl0.delete(int0) 
int0 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104a65368> : <type 'instance'>
avl_REF0 = set([16, 11, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([16, 11]) : <type 'set'>
==================================================
int1 = 6                                                                # STEP 74
ACTION: int1 = 6 
int1 = 20 : <type 'int'>
=> int1 = 6 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 75
ACTION: avl2.insert(int1) 
int1 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a60680> : <type 'instance'>
avl_REF2 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([16, 6]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 76
ACTION: avl0.insert(int1) 
int1 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104a65368> : <type 'instance'>
avl_REF0 = set([16, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([16, 11, 6]) : <type 'set'>
==================================================
avl1 == avl1                                                            # STEP 77
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x104a60a28> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
result = avl2.find(int1)                                                # STEP 78
ACTION: result = avl2.find(int1) 
int1 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a60680> : <type 'instance'>
avl_REF2 = set([16, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl0.insert(int0)                                                       # STEP 79
ACTION: avl0.insert(int0) 
int0 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104a65368> : <type 'instance'>
avl_REF0 = set([16, 11, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([16, 11, 20, 6]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 80
ACTION: avl0.delete(int1) 
int1 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104a65368> : <type 'instance'>
avl_REF0 = set([16, 11, 20, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([16, 11, 20]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104f29830>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
  15 [3:1]
-- < 8 [2:1]
---- < 2 [1:-1]
------ > 3 [0:0] L
---- > 9 [0:0] L
-- > 18 [1:1]
---- < 16 [0:0] L
set([2, 3, 8, 9, 15, 16, 18])
  15 [3:1]
-- < 8 [2:1]
---- < 2 [1:-1]
------ > 3 [0:0] L
---- > 9 [0:0] L
-- > 18 [1:1]
---- < 16 [0:0] L
set([2, 3, 8, 9, 15, 16, 18])
  15 [3:1]
-- < 8 [2:1]
---- < 2 [1:-1]
------ > 3 [0:0] L
---- > 9 [0:0] L
-- > 18 [1:1]
---- < 16 [0:0] L
set([2, 3, 8, 9, 15, 16, 18])
  15 [3:1]
-- < 8 [2:1]
---- < 2 [1:-1]
------ > 3 [0:0] L
---- > 9 [0:0] L
-- > 18 [1:1]
---- < 16 [0:0] L
set([2, 3, 8, 9, 15, 16, 18])
  15 [3:1]
-- < 8 [2:1]
---- < 2 [1:-1]
------ > 3 [0:0] L
---- > 9 [0:0] L
-- > 18 [1:1]
---- < 16 [0:0] L
set([2, 3, 8, 9, 15, 16, 18])
  15 [3:1]
-- < 8 [2:1]
---- < 2 [1:-1]
------ > 3 [0:0] L
---- > 9 [0:0] L
-- > 18 [1:-1]
---- > 19 [0:0] L
set([2, 3, 8, 9, 15, 18, 19])
  15 [3:1]
-- < 8 [2:1]
---- < 2 [1:-1]
------ > 3 [0:0] L
---- > 9 [0:0] L
-- > 18 [1:1]
---- < 16 [0:0] L
set([2, 3, 8, 9, 15, 16, 18])
  15 [3:1]
-- < 8 [2:1]
---- < 2 [1:-1]
------ > 3 [0:0] L
---- > 9 [0:0] L
-- > 18 [1:1]
---- < 16 [0:0] L
set([2, 3, 8, 9, 15, 16, 18])
  15 [3:1]
-- < 8 [2:1]
---- < 2 [1:-1]
------ > 3 [0:0] L
---- > 9 [0:0] L
-- > 18 [1:1]
---- < 16 [0:0] L
set([2, 3, 8, 9, 15, 16, 18])
TEST #4 STEP #7 (0:00:30.074626) Fri Apr 28 06:38:48 2017 [ 160 stmts 212 branches ]
  5 [2:0]
-- < 4 [1:1]
---- < 1 [0:0] L
-- > 15 [1:0]
---- < 10 [0:0] L
---- > 19 [0:0] L
set([1, 4, 5, 10, 15, 19])
  9 [2:0]
-- < 1 [1:-1]
---- > 4 [0:0] L
-- > 11 [1:0]
---- < 10 [0:0] L
---- > 14 [0:0] L
set([1, 4, 9, 10, 11, 14])
  9 [2:0]
-- < 1 [1:-1]
---- > 4 [0:0] L
-- > 11 [1:0]
---- < 10 [0:0] L
---- > 14 [0:0] L
set([1, 4, 9, 10, 11, 14])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10581d8c0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 49 steps

SAVING TEST AS failure.555.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 1                                                                 # STEP 0
ACTION: int3 = 1 
int3 = None : <type 'NoneType'>
=> int3 = 1 : <type 'int'>
==================================================
int2 = 20                                                                # STEP 1
ACTION: int2 = 20 
int2 = None : <type 'NoneType'>
=> int2 = 20 : <type 'int'>
==================================================
int1 = 3                                                                 # STEP 2
ACTION: int1 = 3 
int1 = None : <type 'NoneType'>
=> int1 = 3 : <type 'int'>
==================================================
int0 = 4                                                                 # STEP 3
ACTION: int0 = 4 
int0 = None : <type 'NoneType'>
=> int0 = 4 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x10581def0> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.delete(int2)                                                        # STEP 5
ACTION: avl1.delete(int2) 
int2 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10581def0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int2 = 10                                                                # STEP 6
ACTION: int2 = 10 
int2 = 20 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
result = avl1.find(int1)                                                 # STEP 7
ACTION: result = avl1.find(int1) 
int1 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10581def0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl1.insert(int3)                                                        # STEP 8
ACTION: avl1.insert(int3) 
int3 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10581def0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([1]) : <type 'set'>
==================================================
int3 = 9                                                                 # STEP 9
ACTION: int3 = 9 
int3 = 1 : <type 'int'>
=> int3 = 9 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 10
ACTION: avl1.delete(int1) 
int1 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10581def0> : <type 'instance'>
avl_REF1 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int1 = 1                                                                # STEP 11
ACTION: int1 = 1 
int1 = 3 : <type 'int'>
=> int1 = 1 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 12
ACTION: avl1.delete(int3) 
int3 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10581def0> : <type 'instance'>
avl_REF1 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.insert(int3)                                                       # STEP 13
ACTION: avl1.insert(int3) 
int3 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10581def0> : <type 'instance'>
avl_REF1 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([1, 9]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 14
ACTION: avl1.insert(int1) 
int1 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10581def0> : <type 'instance'>
avl_REF1 = set([1, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl1.delete(int0)                                                       # STEP 15
ACTION: avl1.delete(int0) 
int0 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10581def0> : <type 'instance'>
avl_REF1 = set([1, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int3 = 14                                                               # STEP 16
ACTION: int3 = 14 
int3 = 9 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 17
ACTION: avl1.delete(int3) 
int3 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10581def0> : <type 'instance'>
avl_REF1 = set([1, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1 == avl1                                                            # STEP 18
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x10581def0> : <type 'instance'>
avl_REF1 = set([1, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.insert(int2)                                                       # STEP 19
ACTION: avl1.insert(int2) 
int2 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10581def0> : <type 'instance'>
avl_REF1 = set([1, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([1, 10, 9]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 20
ACTION: avl1.delete(int0) 
int0 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10581def0> : <type 'instance'>
avl_REF1 = set([1, 10, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
result = avl1.find(int3)                                                # STEP 21
ACTION: result = avl1.find(int3) 
int3 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10581def0> : <type 'instance'>
avl_REF1 = set([1, 10, 9]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl1.insert(int0)                                                       # STEP 22
ACTION: avl1.insert(int0) 
int0 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10581def0> : <type 'instance'>
avl_REF1 = set([1, 10, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([1, 10, 4, 9]) : <type 'set'>
==================================================
int0 = 11                                                               # STEP 23
ACTION: int0 = 11 
int0 = 4 : <type 'int'>
=> int0 = 11 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 24
ACTION: avl1.insert(int0) 
int0 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10581def0> : <type 'instance'>
avl_REF1 = set([1, 10, 4, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([1, 10, 11, 4, 9]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 25
ACTION: avl1.insert(int3) 
int3 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10581def0> : <type 'instance'>
avl_REF1 = set([1, 10, 11, 4, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([1, 4, 9, 10, 11, 14]) : <type 'set'>
==================================================
int1 = 1                                                                # STEP 26
ACTION: int1 = 1 
int1 = 1 : <type 'int'>
==================================================
avl1.display()                                                          # STEP 27
ACTION: avl1.display() 
avl1 = <avl.AVLTree instance at 0x10581def0> : <type 'instance'>
avl_REF1 = set([1, 4, 9, 10, 11, 14]) : <type 'set'>
  9 [2:0]
-- < 1 [1:-1]
---- > 4 [0:0] L
-- > 11 [1:0]
---- < 10 [0:0] L
---- > 14 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([1, 4, 9, 10, 11, 14])
==================================================
int3 = 4                                                                # STEP 28
ACTION: int3 = 4 
int3 = 14 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
int0 = 5                                                                # STEP 29
ACTION: int0 = 5 
int0 = 11 : <type 'int'>
=> int0 = 5 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 30
ACTION: avl1.insert(int2) 
int2 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10581def0> : <type 'instance'>
avl_REF1 = set([1, 4, 9, 10, 11, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
avl1.display()                                                          # STEP 31
ACTION: avl1.display() 
avl1 = <avl.AVLTree instance at 0x10581def0> : <type 'instance'>
avl_REF1 = set([1, 4, 9, 10, 11, 14]) : <type 'set'>
  9 [2:0]
-- < 1 [1:-1]
---- > 4 [0:0] L
-- > 11 [1:0]
---- < 10 [0:0] L
---- > 14 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([1, 4, 9, 10, 11, 14])
==================================================
avl1.delete(int3)                                                       # STEP 32
ACTION: avl1.delete(int3) 
int3 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10581def0> : <type 'instance'>
avl_REF1 = set([1, 4, 9, 10, 11, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([1, 9, 10, 11, 14]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 33
ACTION: avl1.insert(int2) 
int2 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10581def0> : <type 'instance'>
avl_REF1 = set([1, 9, 10, 11, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
avl1.insert(int1)                                                       # STEP 34
ACTION: avl1.insert(int1) 
int1 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10581def0> : <type 'instance'>
avl_REF1 = set([1, 9, 10, 11, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
result = avl1.find(int2)                                                # STEP 35
ACTION: result = avl1.find(int2) 
int2 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10581def0> : <type 'instance'>
avl_REF1 = set([1, 9, 10, 11, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
result = avl1.find(int0)                                                # STEP 36
ACTION: result = avl1.find(int0) 
int0 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10581def0> : <type 'instance'>
avl_REF1 = set([1, 9, 10, 11, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
int2 = 6                                                                # STEP 37
ACTION: int2 = 6 
int2 = 10 : <type 'int'>
=> int2 = 6 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 38
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x10581def0> : <type 'instance'>
avl_REF1 = set([1, 9, 10, 11, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.delete(int2)                                                       # STEP 39
ACTION: avl1.delete(int2) 
int2 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10581def0> : <type 'instance'>
avl_REF1 = set([1, 9, 10, 11, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1 == avl1                                                            # STEP 40
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x10581def0> : <type 'instance'>
avl_REF1 = set([1, 9, 10, 11, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
int2 = 2                                                                # STEP 41
ACTION: int2 = 2 
int2 = 6 : <type 'int'>
=> int2 = 2 : <type 'int'>
==================================================
int3 = 8                                                                # STEP 42
ACTION: int3 = 8 
int3 = 4 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 43
ACTION: avl1.delete(int0) 
int0 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10581def0> : <type 'instance'>
avl_REF1 = set([1, 9, 10, 11, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
result = avl1.inorder()                                                 # STEP 44
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x10581def0> : <type 'instance'>
avl_REF1 = set([1, 9, 10, 11, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl2 = avl.AVLTree()                                                    # STEP 45
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x105801cf8> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 46
ACTION: avl2.delete(int1) 
int1 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105801cf8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int0 = 1                                                                # STEP 47
ACTION: int0 = 1 
int0 = 5 : <type 'int'>
=> int0 = 1 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 48
ACTION: avl1.delete(int0) 
int0 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10581def0> : <type 'instance'>
avl_REF1 = set([1, 9, 10, 11, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([9, 10, 11, 14]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1058075f0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 0
STOPPING TESTING DUE TO TIMEOUT
8.44927044452 PERCENT COVERED
61.9786250591 TOTAL RUNTIME
8 EXECUTED
630 TOTAL TEST OPERATIONS
25.4770803452 TIME SPENT EXECUTING TEST OPERATIONS
0.0680756568909 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
25.6256787777 TIME SPENT CHECKING PROPERTIES
51.1027591228 TOTAL TIME SPENT RUNNING SUT
0.00453782081604 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
2 FAILED
0 REPEATS OF FAILURES
2 ACTUAL DISTINCT FAILURES

FAILURE 0
avl2 = avl.AVLTree()                                                     # STEP 0
result = avl2.inorder()                                                  # STEP 1
int0 = 4                                                                 # STEP 2
result = avl2.inorder()                                                  # STEP 3
avl2.insert(int0)                                                        # STEP 4
int2 = 6                                                                 # STEP 5
result = avl2.inorder()                                                  # STEP 6
avl2.insert(int0)                                                        # STEP 7
avl2.delete(int0)                                                        # STEP 8
avl2.insert(int0)                                                        # STEP 9
avl2.delete(int2)                                                       # STEP 10
avl2.insert(int0)                                                       # STEP 11
avl2.insert(int0)                                                       # STEP 12
avl2.delete(int2)                                                       # STEP 13
avl2.insert(int0)                                                       # STEP 14
avl2 = avl.AVLTree()                                                    # STEP 15
int3 = 2                                                                # STEP 16
avl2.insert(int2)                                                       # STEP 17
int2 = 16                                                               # STEP 18
avl2.insert(int3)                                                       # STEP 19
avl2.delete(int3)                                                       # STEP 20
avl2.insert(int3)                                                       # STEP 21
int1 = 15                                                               # STEP 22
avl2 == avl2                                                            # STEP 23
avl2.insert(int3)                                                       # STEP 24
int3 = 6                                                                # STEP 25
result = avl2.inorder()                                                 # STEP 26
avl2.delete(int1)                                                       # STEP 27
int0 = 14                                                               # STEP 28
int1 = 11                                                               # STEP 29
avl2.insert(int1)                                                       # STEP 30
avl2.delete(int0)                                                       # STEP 31
avl2.delete(int2)                                                       # STEP 32
avl2.insert(int3)                                                       # STEP 33
avl2.insert(int0)                                                       # STEP 34
int3 = 10                                                               # STEP 35
avl2.insert(int2)                                                       # STEP 36
result = avl2.inorder()                                                 # STEP 37
avl2.delete(int0)                                                       # STEP 38
avl2.delete(int3)                                                       # STEP 39
avl2.delete(int0)                                                       # STEP 40
avl2.delete(int1)                                                       # STEP 41
int3 = 1                                                                # STEP 42
avl2.delete(int3)                                                       # STEP 43
avl2.delete(int2)                                                       # STEP 44
avl2.insert(int1)                                                       # STEP 45
int0 = 20                                                               # STEP 46
avl2.delete(int1)                                                       # STEP 47
avl2.delete(int1)                                                       # STEP 48
avl2.insert(int2)                                                       # STEP 49
avl0 = avl.AVLTree()                                                    # STEP 50
avl2.delete(int0)                                                       # STEP 51
avl2.insert(int1)                                                       # STEP 52
int3 = 8                                                                # STEP 53
int1 = 11                                                               # STEP 54
avl2.delete(int2)                                                       # STEP 55
avl0.insert(int3)                                                       # STEP 56
avl2 = avl.AVLTree()                                                    # STEP 57
avl2.insert(int2)                                                       # STEP 58
avl1 = avl.AVLTree()                                                    # STEP 59
avl0.delete(int1)                                                       # STEP 60
avl2.delete(int1)                                                       # STEP 61
avl2.insert(int2)                                                       # STEP 62
avl0.insert(int2)                                                       # STEP 63
avl0.insert(int1)                                                       # STEP 64
avl0.delete(int3)                                                       # STEP 65
avl1.delete(int2)                                                       # STEP 66
avl2.insert(int0)                                                       # STEP 67
int1 = 20                                                               # STEP 68
result = avl0.inorder()                                                 # STEP 69
result = avl2.inorder()                                                 # STEP 70
avl2.delete(int1)                                                       # STEP 71
avl0.insert(int1)                                                       # STEP 72
avl0.delete(int0)                                                       # STEP 73
int1 = 6                                                                # STEP 74
avl2.insert(int1)                                                       # STEP 75
avl0.insert(int1)                                                       # STEP 76
avl1 == avl1                                                            # STEP 77
result = avl2.find(int1)                                                # STEP 78
avl0.insert(int0)                                                       # STEP 79
avl0.delete(int1)                                                       # STEP 80
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104f29830>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE 1
int3 = 1                                                                 # STEP 0
int2 = 20                                                                # STEP 1
int1 = 3                                                                 # STEP 2
int0 = 4                                                                 # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
avl1.delete(int2)                                                        # STEP 5
int2 = 10                                                                # STEP 6
result = avl1.find(int1)                                                 # STEP 7
avl1.insert(int3)                                                        # STEP 8
int3 = 9                                                                 # STEP 9
avl1.delete(int1)                                                       # STEP 10
int1 = 1                                                                # STEP 11
avl1.delete(int3)                                                       # STEP 12
avl1.insert(int3)                                                       # STEP 13
avl1.insert(int1)                                                       # STEP 14
avl1.delete(int0)                                                       # STEP 15
int3 = 14                                                               # STEP 16
avl1.delete(int3)                                                       # STEP 17
avl1 == avl1                                                            # STEP 18
avl1.insert(int2)                                                       # STEP 19
avl1.delete(int0)                                                       # STEP 20
result = avl1.find(int3)                                                # STEP 21
avl1.insert(int0)                                                       # STEP 22
int0 = 11                                                               # STEP 23
avl1.insert(int0)                                                       # STEP 24
avl1.insert(int3)                                                       # STEP 25
int1 = 1                                                                # STEP 26
avl1.display()                                                          # STEP 27
int3 = 4                                                                # STEP 28
int0 = 5                                                                # STEP 29
avl1.insert(int2)                                                       # STEP 30
avl1.display()                                                          # STEP 31
avl1.delete(int3)                                                       # STEP 32
avl1.insert(int2)                                                       # STEP 33
avl1.insert(int1)                                                       # STEP 34
result = avl1.find(int2)                                                # STEP 35
result = avl1.find(int0)                                                # STEP 36
int2 = 6                                                                # STEP 37
result = avl1.inorder()                                                 # STEP 38
avl1.delete(int2)                                                       # STEP 39
avl1 == avl1                                                            # STEP 40
int2 = 2                                                                # STEP 41
int3 = 8                                                                # STEP 42
avl1.delete(int0)                                                       # STEP 43
result = avl1.inorder()                                                 # STEP 44
avl2 = avl.AVLTree()                                                    # STEP 45
avl2.delete(int1)                                                       # STEP 46
int0 = 1                                                                # STEP 47
avl1.delete(int0)                                                       # STEP 48
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1058075f0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
212 BRANCHES COVERED
160 STATEMENTS COVERED

Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.62406.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x101f25a70>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
Original test has 85 steps

SAVING TEST AS failure.62406.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 18                                                                # STEP 0
ACTION: int1 = 18 
int1 = None : <type 'NoneType'>
=> int1 = 18 : <type 'int'>
==================================================
int2 = 16                                                                # STEP 1
ACTION: int2 = 16 
int2 = None : <type 'NoneType'>
=> int2 = 16 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 2
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x101f251b8> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.insert(int2)                                                        # STEP 3
ACTION: avl1.insert(int2) 
int2 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101f251b8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([16]) : <type 'set'>
==================================================
avl1.delete(int2)                                                        # STEP 4
ACTION: avl1.delete(int2) 
int2 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101f251b8> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
result = avl1.find(int1)                                                 # STEP 5
ACTION: result = avl1.find(int1) 
int1 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101f251b8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl1.insert(int2)                                                        # STEP 6
ACTION: avl1.insert(int2) 
int2 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101f251b8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([16]) : <type 'set'>
==================================================
avl1.delete(int2)                                                        # STEP 7
ACTION: avl1.delete(int2) 
int2 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101f251b8> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 8
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x102ac6248> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int2 = 12                                                                # STEP 9
ACTION: int2 = 12 
int2 = 16 : <type 'int'>
=> int2 = 12 : <type 'int'>
==================================================
int1 = 8                                                                # STEP 10
ACTION: int1 = 8 
int1 = 18 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
int0 = 6                                                                # STEP 11
ACTION: int0 = 6 
int0 = None : <type 'NoneType'>
=> int0 = 6 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 12
ACTION: avl1.insert(int0) 
int0 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101f251b8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([6]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 13
ACTION: avl0.insert(int2) 
int2 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102ac6248> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([12]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 14
ACTION: avl0.delete(int2) 
int2 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102ac6248> : <type 'instance'>
avl_REF0 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 15
ACTION: avl1.delete(int1) 
int1 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101f251b8> : <type 'instance'>
avl_REF1 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl0.delete(int1)                                                       # STEP 16
ACTION: avl0.delete(int1) 
int1 = 8 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102ac6248> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int2 = 9                                                                # STEP 17
ACTION: int2 = 9 
int2 = 12 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 18
ACTION: avl1.insert(int2) 
int2 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101f251b8> : <type 'instance'>
avl_REF1 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([9, 6]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 19
ACTION: avl1.delete(int2) 
int2 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101f251b8> : <type 'instance'>
avl_REF1 = set([9, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([6]) : <type 'set'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 20
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x101f53b48> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int1 = 7                                                                # STEP 21
ACTION: int1 = 7 
int1 = 8 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 22
ACTION: avl0.delete(int1) 
int1 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102ac6248> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl1.delete(int2)                                                       # STEP 23
ACTION: avl1.delete(int2) 
int2 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101f251b8> : <type 'instance'>
avl_REF1 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.insert(int2)                                                       # STEP 24
ACTION: avl1.insert(int2) 
int2 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101f251b8> : <type 'instance'>
avl_REF1 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([9, 6]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 25
ACTION: avl0.insert(int2) 
int2 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102ac6248> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([9]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 26
ACTION: avl1.delete(int2) 
int2 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101f251b8> : <type 'instance'>
avl_REF1 = set([9, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([6]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 27
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x101f53b48> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl1.insert(int1)                                                       # STEP 28
ACTION: avl1.insert(int1) 
int1 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101f251b8> : <type 'instance'>
avl_REF1 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([6, 7]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 29
ACTION: avl1.insert(int1) 
int1 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101f251b8> : <type 'instance'>
avl_REF1 = set([6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl0.insert(int2)                                                       # STEP 30
ACTION: avl0.insert(int2) 
int2 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102ac6248> : <type 'instance'>
avl_REF0 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
result = avl1.inorder()                                                 # STEP 31
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x101f251b8> : <type 'instance'>
avl_REF1 = set([6, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int0 = 7                                                                # STEP 32
ACTION: int0 = 7 
int0 = 6 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 33
ACTION: avl2.insert(int2) 
int2 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101f53b48> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([9]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 34
ACTION: avl0.delete(int2) 
int2 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102ac6248> : <type 'instance'>
avl_REF0 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 35
ACTION: avl0.insert(int0) 
int0 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102ac6248> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([7]) : <type 'set'>
==================================================
result = avl2.find(int0)                                                # STEP 36
ACTION: result = avl2.find(int0) 
int0 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101f53b48> : <type 'instance'>
avl_REF2 = set([9]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl1.delete(int1)                                                       # STEP 37
ACTION: avl1.delete(int1) 
int1 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101f251b8> : <type 'instance'>
avl_REF1 = set([6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([6]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 38
ACTION: avl1.delete(int1) 
int1 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101f251b8> : <type 'instance'>
avl_REF1 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl0.delete(int2)                                                       # STEP 39
ACTION: avl0.delete(int2) 
int2 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102ac6248> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int0 = 7                                                                # STEP 40
ACTION: int0 = 7 
int0 = 7 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 41
ACTION: avl0.insert(int2) 
int2 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102ac6248> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([9, 7]) : <type 'set'>
==================================================
int3 = 13                                                               # STEP 42
ACTION: int3 = 13 
int3 = None : <type 'NoneType'>
=> int3 = 13 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 43
ACTION: avl0.delete(int0) 
int0 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102ac6248> : <type 'instance'>
avl_REF0 = set([9, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([9]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 44
ACTION: avl1.insert(int2) 
int2 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101f251b8> : <type 'instance'>
avl_REF1 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([9, 6]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 45
ACTION: avl1.insert(int0) 
int0 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101f251b8> : <type 'instance'>
avl_REF1 = set([9, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([9, 6, 7]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 46
ACTION: avl2.insert(int0) 
int0 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101f53b48> : <type 'instance'>
avl_REF2 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([9, 7]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 47
ACTION: avl2.delete(int1) 
int1 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101f53b48> : <type 'instance'>
avl_REF2 = set([9, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([9]) : <type 'set'>
==================================================
result = avl1.find(int3)                                                # STEP 48
ACTION: result = avl1.find(int3) 
int3 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101f251b8> : <type 'instance'>
avl_REF1 = set([9, 6, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl1.delete(int2)                                                       # STEP 49
ACTION: avl1.delete(int2) 
int2 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101f251b8> : <type 'instance'>
avl_REF1 = set([9, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([6, 7]) : <type 'set'>
==================================================
int3 = 12                                                               # STEP 50
ACTION: int3 = 12 
int3 = 13 : <type 'int'>
=> int3 = 12 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 51
ACTION: avl0.delete(int3) 
int3 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102ac6248> : <type 'instance'>
avl_REF0 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
result = avl2.inorder()                                                 # STEP 52
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x101f53b48> : <type 'instance'>
avl_REF2 = set([9]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl0.insert(int2)                                                       # STEP 53
ACTION: avl0.insert(int2) 
int2 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102ac6248> : <type 'instance'>
avl_REF0 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
int2 = 4                                                                # STEP 54
ACTION: int2 = 4 
int2 = 9 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 55
ACTION: avl0.insert(int1) 
int1 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102ac6248> : <type 'instance'>
avl_REF0 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([9, 7]) : <type 'set'>
==================================================
result = avl1.find(int1)                                                # STEP 56
ACTION: result = avl1.find(int1) 
int1 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101f251b8> : <type 'instance'>
avl_REF1 = set([6, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl0.delete(int1)                                                       # STEP 57
ACTION: avl0.delete(int1) 
int1 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102ac6248> : <type 'instance'>
avl_REF0 = set([9, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([9]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 58
ACTION: avl1.delete(int3) 
int3 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101f251b8> : <type 'instance'>
avl_REF1 = set([6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.insert(int3)                                                       # STEP 59
ACTION: avl1.insert(int3) 
int3 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101f251b8> : <type 'instance'>
avl_REF1 = set([6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([12, 6, 7]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 60
ACTION: avl1.insert(int1) 
int1 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101f251b8> : <type 'instance'>
avl_REF1 = set([12, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl0.delete(int2)                                                       # STEP 61
ACTION: avl0.delete(int2) 
int2 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102ac6248> : <type 'instance'>
avl_REF0 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.delete(int2)                                                       # STEP 62
ACTION: avl0.delete(int2) 
int2 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102ac6248> : <type 'instance'>
avl_REF0 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.insert(int1)                                                       # STEP 63
ACTION: avl0.insert(int1) 
int1 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102ac6248> : <type 'instance'>
avl_REF0 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([9, 7]) : <type 'set'>
==================================================
int2 = 9                                                                # STEP 64
ACTION: int2 = 9 
int2 = 4 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 65
ACTION: avl2.insert(int3) 
int3 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101f53b48> : <type 'instance'>
avl_REF2 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([9, 12]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 66
ACTION: avl1.delete(int1) 
int1 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101f251b8> : <type 'instance'>
avl_REF1 = set([12, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([12, 6]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 67
ACTION: avl0.insert(int2) 
int2 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102ac6248> : <type 'instance'>
avl_REF0 = set([9, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
result = avl0.inorder()                                                 # STEP 68
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x102ac6248> : <type 'instance'>
avl_REF0 = set([9, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
result = avl0.find(int3)                                                # STEP 69
ACTION: result = avl0.find(int3) 
int3 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102ac6248> : <type 'instance'>
avl_REF0 = set([9, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
avl1.insert(int2)                                                       # STEP 70
ACTION: avl1.insert(int2) 
int2 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101f251b8> : <type 'instance'>
avl_REF1 = set([12, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([9, 12, 6]) : <type 'set'>
==================================================
int1 = 8                                                                # STEP 71
ACTION: int1 = 8 
int1 = 7 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 72
ACTION: avl2.insert(int0) 
int0 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101f53b48> : <type 'instance'>
avl_REF2 = set([9, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([9, 12, 7]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 73
ACTION: avl0.delete(int0) 
int0 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102ac6248> : <type 'instance'>
avl_REF0 = set([9, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([9]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 74
ACTION: avl2.insert(int3) 
int3 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101f53b48> : <type 'instance'>
avl_REF2 = set([9, 12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
avl1.delete(int0)                                                       # STEP 75
ACTION: avl1.delete(int0) 
int0 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101f251b8> : <type 'instance'>
avl_REF1 = set([9, 12, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.insert(int1)                                                       # STEP 76
ACTION: avl1.insert(int1) 
int1 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101f251b8> : <type 'instance'>
avl_REF1 = set([9, 12, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([8, 9, 12, 6]) : <type 'set'>
==================================================
int0 = 10                                                               # STEP 77
ACTION: int0 = 10 
int0 = 7 : <type 'int'>
=> int0 = 10 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 78
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x102ac6248> : <type 'instance'>
avl_REF0 = set([9]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl2 == avl2                                                            # STEP 79
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x101f53b48> : <type 'instance'>
avl_REF2 = set([9, 12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl2.delete(int3)                                                       # STEP 80
ACTION: avl2.delete(int3) 
int3 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101f53b48> : <type 'instance'>
avl_REF2 = set([9, 12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([9, 7]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 81
ACTION: avl2.insert(int3) 
int3 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101f53b48> : <type 'instance'>
avl_REF2 = set([9, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([9, 12, 7]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 82
ACTION: avl2.insert(int1) 
int1 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101f53b48> : <type 'instance'>
avl_REF2 = set([9, 12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([8, 9, 12, 7]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 83
ACTION: avl0.delete(int1) 
int1 = 8 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102ac6248> : <type 'instance'>
avl_REF0 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl1.delete(int2)                                                       # STEP 84
ACTION: avl1.delete(int2) 
int2 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101f251b8> : <type 'instance'>
avl_REF1 = set([8, 9, 12, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([8, 12, 6]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x101e75d40>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
  9 [2:0]
-- < 2 [1:0]
---- < 1 [0:0] L
---- > 7 [0:0] L
-- > 12 [1:-1]
---- > 18 [0:0] L
set([1, 2, 7, 9, 12, 18])
  9 [2:0]
-- < 7 [1:1]
---- < 1 [0:0] L
-- > 14 [1:0]
---- < 12 [0:0] L
---- > 18 [0:0] L
set([1, 7, 9, 12, 14, 18])
  9 [2:0]
-- < 7 [1:1]
---- < 1 [0:0] L
-- > 14 [1:0]
---- < 12 [0:0] L
---- > 18 [0:0] L
set([1, 7, 9, 12, 14, 18])
TEST #3 STEP #17 (0:00:30.109208) Mon May  1 18:26:41 2017 [ 159 stmts 209 branches ]
  8 [2:0]
-- < 3 [1:0]
---- < 2 [0:0] L
---- > 7 [0:0] L
-- > 20 [1:1]
---- < 9 [0:0] L
set([2, 3, 20, 7, 8, 9])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102a1ce60>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
Original test has 33 steps

SAVING TEST AS failure.62406.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 17                                                                # STEP 0
ACTION: int0 = 17 
int0 = None : <type 'NoneType'>
=> int0 = 17 : <type 'int'>
==================================================
int3 = 19                                                                # STEP 1
ACTION: int3 = 19 
int3 = None : <type 'NoneType'>
=> int3 = 19 : <type 'int'>
==================================================
int1 = 6                                                                 # STEP 2
ACTION: int1 = 6 
int1 = None : <type 'NoneType'>
=> int1 = 6 : <type 'int'>
==================================================
int2 = 4                                                                 # STEP 3
ACTION: int2 = 4 
int2 = None : <type 'NoneType'>
=> int2 = 4 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x102b3d638> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.delete(int0)                                                        # STEP 5
ACTION: avl2.delete(int0) 
int0 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102b3d638> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
result = avl2.find(int0)                                                 # STEP 6
ACTION: result = avl2.find(int0) 
int0 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102b3d638> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl2.delete(int3)                                                        # STEP 7
ACTION: avl2.delete(int3) 
int3 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102b3d638> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int3 = 10                                                                # STEP 8
ACTION: int3 = 10 
int3 = 19 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
avl2.insert(int0)                                                        # STEP 9
ACTION: avl2.insert(int0) 
int0 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102b3d638> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([17]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 10
ACTION: avl2.delete(int1) 
int1 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102b3d638> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int1 = 8                                                                # STEP 11
ACTION: int1 = 8 
int1 = 6 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 12
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x102b3d638> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int2)                                                       # STEP 13
ACTION: avl2.delete(int2) 
int2 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102b3d638> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.delete(int2)                                                       # STEP 14
ACTION: avl2.delete(int2) 
int2 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102b3d638> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
result = avl2.find(int0)                                                # STEP 15
ACTION: result = avl2.find(int0) 
int0 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102b3d638> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl2.delete(int1)                                                       # STEP 16
ACTION: avl2.delete(int1) 
int1 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102b3d638> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.delete(int3)                                                       # STEP 17
ACTION: avl2.delete(int3) 
int3 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102b3d638> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.insert(int2)                                                       # STEP 18
ACTION: avl2.insert(int2) 
int2 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102b3d638> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([17, 4]) : <type 'set'>
==================================================
int0 = 15                                                               # STEP 19
ACTION: int0 = 15 
int0 = 17 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 20
ACTION: avl2.delete(int0) 
int0 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102b3d638> : <type 'instance'>
avl_REF2 = set([17, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.insert(int2)                                                       # STEP 21
ACTION: avl2.insert(int2) 
int2 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102b3d638> : <type 'instance'>
avl_REF2 = set([17, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
int1 = 7                                                                # STEP 22
ACTION: int1 = 7 
int1 = 8 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 23
ACTION: avl2.delete(int1) 
int1 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102b3d638> : <type 'instance'>
avl_REF2 = set([17, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int3)                                                       # STEP 24
ACTION: avl2.insert(int3) 
int3 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102b3d638> : <type 'instance'>
avl_REF2 = set([17, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([17, 10, 4]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 25
ACTION: avl2.insert(int3) 
int3 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102b3d638> : <type 'instance'>
avl_REF2 = set([17, 10, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
avl2.delete(int0)                                                       # STEP 26
ACTION: avl2.delete(int0) 
int0 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102b3d638> : <type 'instance'>
avl_REF2 = set([17, 10, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
result = avl2.find(int1)                                                # STEP 27
ACTION: result = avl2.find(int1) 
int1 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102b3d638> : <type 'instance'>
avl_REF2 = set([17, 10, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int2 = 3                                                                # STEP 28
ACTION: int2 = 3 
int2 = 4 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 29
ACTION: avl2.delete(int0) 
int0 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102b3d638> : <type 'instance'>
avl_REF2 = set([17, 10, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int0 = 17                                                               # STEP 30
ACTION: int0 = 17 
int0 = 15 : <type 'int'>
=> int0 = 17 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 31
ACTION: avl2.insert(int2) 
int2 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102b3d638> : <type 'instance'>
avl_REF2 = set([17, 10, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([17, 10, 3, 4]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 32
ACTION: avl2.delete(int0) 
int0 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102b3d638> : <type 'instance'>
avl_REF2 = set([17, 10, 3, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([10, 3, 4]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x101f432d8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102a31ef0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
Original test has 57 steps

SAVING TEST AS failure.62406.test.2
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
avl1 = avl.AVLTree()                                                     # STEP 0
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x102b3e7a0> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 1
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x102a318c0> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl1.inorder()                                                  # STEP 2
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x102b3e7a0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int3 = 3                                                                 # STEP 3
ACTION: int3 = 3 
int3 = None : <type 'NoneType'>
=> int3 = 3 : <type 'int'>
==================================================
result = avl1.inorder()                                                  # STEP 4
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x102b3e7a0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl2.delete(int3)                                                        # STEP 5
ACTION: avl2.delete(int3) 
int3 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102a318c0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.insert(int3)                                                        # STEP 6
ACTION: avl2.insert(int3) 
int3 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102a318c0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([3]) : <type 'set'>
==================================================
avl1 == avl2                                                             # STEP 7
ACTION: avl1 == avl2 
avl1 = <avlbug2.AVLTree instance at 0x102b3e7a0> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x102a318c0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
avl_REF2 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
avl2.delete(int3)                                                        # STEP 8
ACTION: avl2.delete(int3) 
int3 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102a318c0> : <type 'instance'>
avl_REF2 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl1.insert(int3)                                                        # STEP 9
ACTION: avl1.insert(int3) 
int3 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102b3e7a0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([3]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 10
ACTION: avl1.insert(int3) 
int3 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102b3e7a0> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
avl1.delete(int3)                                                       # STEP 11
ACTION: avl1.delete(int3) 
int3 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102b3e7a0> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int1 = 17                                                               # STEP 12
ACTION: int1 = 17 
int1 = None : <type 'NoneType'>
=> int1 = 17 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 13
ACTION: avl2.delete(int1) 
int1 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102a318c0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.delete(int1)                                                       # STEP 14
ACTION: avl2.delete(int1) 
int1 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102a318c0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.delete(int1)                                                       # STEP 15
ACTION: avl2.delete(int1) 
int1 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102a318c0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
result = avl1.inorder()                                                 # STEP 16
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x102b3e7a0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl2.insert(int3)                                                       # STEP 17
ACTION: avl2.insert(int3) 
int3 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102a318c0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([3]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 18
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x102b3e7a0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.delete(int3)                                                       # STEP 19
ACTION: avl1.delete(int3) 
int3 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102b3e7a0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl2.insert(int3)                                                       # STEP 20
ACTION: avl2.insert(int3) 
int3 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102a318c0> : <type 'instance'>
avl_REF2 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
avl2.delete(int3)                                                       # STEP 21
ACTION: avl2.delete(int3) 
int3 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102a318c0> : <type 'instance'>
avl_REF2 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 22
ACTION: avl2.delete(int3) 
int3 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102a318c0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.delete(int1)                                                       # STEP 23
ACTION: avl2.delete(int1) 
int1 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102a318c0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int3 = 7                                                                # STEP 24
ACTION: int3 = 7 
int3 = 3 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
int1 = 3                                                                # STEP 25
ACTION: int1 = 3 
int1 = 17 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 26
ACTION: avl1.insert(int1) 
int1 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102b3e7a0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([3]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 27
ACTION: avl2.delete(int3) 
int3 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102a318c0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.insert(int3)                                                       # STEP 28
ACTION: avl2.insert(int3) 
int3 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102a318c0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([7]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 29
ACTION: avl2.insert(int1) 
int1 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102a318c0> : <type 'instance'>
avl_REF2 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([3, 7]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 30
ACTION: avl2.delete(int1) 
int1 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102a318c0> : <type 'instance'>
avl_REF2 = set([3, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([7]) : <type 'set'>
==================================================
avl2 == avl2                                                            # STEP 31
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x102a318c0> : <type 'instance'>
avl_REF2 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl1.delete(int3)                                                       # STEP 32
ACTION: avl1.delete(int3) 
int3 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102b3e7a0> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl2.insert(int1)                                                       # STEP 33
ACTION: avl2.insert(int1) 
int1 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102a318c0> : <type 'instance'>
avl_REF2 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([3, 7]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 34
ACTION: avl1.delete(int3) 
int3 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102b3e7a0> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int0 = 5                                                                # STEP 35
ACTION: int0 = 5 
int0 = None : <type 'NoneType'>
=> int0 = 5 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 36
ACTION: avl1.insert(int3) 
int3 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102b3e7a0> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([3, 7]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 37
ACTION: avl1.delete(int3) 
int3 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102b3e7a0> : <type 'instance'>
avl_REF1 = set([3, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([3]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 38
ACTION: avl1.insert(int0) 
int0 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102b3e7a0> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([3, 5]) : <type 'set'>
==================================================
avl2 == avl1                                                            # STEP 39
ACTION: avl2 == avl1 
avl2 = <avlbug2.AVLTree instance at 0x102a318c0> : <type 'instance'>
avl1 = <avlbug2.AVLTree instance at 0x102b3e7a0> : <type 'instance'>
avl_REF2 = set([3, 7]) : <type 'set'>
avl_REF1 = set([3, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
int2 = 17                                                               # STEP 40
ACTION: int2 = 17 
int2 = None : <type 'NoneType'>
=> int2 = 17 : <type 'int'>
==================================================
int3 = 16                                                               # STEP 41
ACTION: int3 = 16 
int3 = 7 : <type 'int'>
=> int3 = 16 : <type 'int'>
==================================================
int1 = 19                                                               # STEP 42
ACTION: int1 = 19 
int1 = 3 : <type 'int'>
=> int1 = 19 : <type 'int'>
==================================================
int0 = 1                                                                # STEP 43
ACTION: int0 = 1 
int0 = 5 : <type 'int'>
=> int0 = 1 : <type 'int'>
==================================================
result = avl2.find(int2)                                                # STEP 44
ACTION: result = avl2.find(int2) 
int2 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102a318c0> : <type 'instance'>
avl_REF2 = set([3, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int2 = 18                                                               # STEP 45
ACTION: int2 = 18 
int2 = 17 : <type 'int'>
=> int2 = 18 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 46
ACTION: avl1.insert(int3) 
int3 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102b3e7a0> : <type 'instance'>
avl_REF1 = set([3, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([16, 3, 5]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 47
ACTION: avl2.delete(int0) 
int0 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102a318c0> : <type 'instance'>
avl_REF2 = set([3, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl1.insert(int3)                                                       # STEP 48
ACTION: avl1.insert(int3) 
int3 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102b3e7a0> : <type 'instance'>
avl_REF1 = set([16, 3, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
avl2.insert(int2)                                                       # STEP 49
ACTION: avl2.insert(int2) 
int2 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102a318c0> : <type 'instance'>
avl_REF2 = set([3, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([18, 3, 7]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 50
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x102a318c0> : <type 'instance'>
avl_REF2 = set([18, 3, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int0)                                                       # STEP 51
ACTION: avl2.delete(int0) 
int0 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102a318c0> : <type 'instance'>
avl_REF2 = set([18, 3, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl1.insert(int0)                                                       # STEP 52
ACTION: avl1.insert(int0) 
int0 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102b3e7a0> : <type 'instance'>
avl_REF1 = set([16, 3, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([16, 1, 3, 5]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 53
ACTION: avl2.insert(int0) 
int0 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102a318c0> : <type 'instance'>
avl_REF2 = set([18, 3, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([1, 18, 3, 7]) : <type 'set'>
==================================================
int0 = 7                                                                # STEP 54
ACTION: int0 = 7 
int0 = 1 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 55
ACTION: avl2.insert(int2) 
int2 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102a318c0> : <type 'instance'>
avl_REF2 = set([1, 18, 3, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl1.delete(int3)                                                       # STEP 56
ACTION: avl1.delete(int3) 
int3 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102b3e7a0> : <type 'instance'>
avl_REF1 = set([16, 1, 3, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([1, 3, 5]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1028e3170>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 3 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 20
STOPPING TESTING DUE TO TIMEOUT
8.21242019733 PERCENT COVERED
60.2539520264 TOTAL RUNTIME
6 EXECUTED
395 TOTAL TEST OPERATIONS
20.7094581127 TIME SPENT EXECUTING TEST OPERATIONS
0.0438165664673 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
20.8396759033 TIME SPENT CHECKING PROPERTIES
41.549134016 TOTAL TIME SPENT RUNNING SUT
0.00376009941101 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
3 FAILED
0 REPEATS OF FAILURES
3 ACTUAL DISTINCT FAILURES

FAILURE 0
int1 = 18                                                                # STEP 0
int2 = 16                                                                # STEP 1
avl1 = avl.AVLTree()                                                     # STEP 2
avl1.insert(int2)                                                        # STEP 3
avl1.delete(int2)                                                        # STEP 4
result = avl1.find(int1)                                                 # STEP 5
avl1.insert(int2)                                                        # STEP 6
avl1.delete(int2)                                                        # STEP 7
avl0 = avl.AVLTree()                                                     # STEP 8
int2 = 12                                                                # STEP 9
int1 = 8                                                                # STEP 10
int0 = 6                                                                # STEP 11
avl1.insert(int0)                                                       # STEP 12
avl0.insert(int2)                                                       # STEP 13
avl0.delete(int2)                                                       # STEP 14
avl1.delete(int1)                                                       # STEP 15
avl0.delete(int1)                                                       # STEP 16
int2 = 9                                                                # STEP 17
avl1.insert(int2)                                                       # STEP 18
avl1.delete(int2)                                                       # STEP 19
avl2 = avl.AVLTree()                                                    # STEP 20
int1 = 7                                                                # STEP 21
avl0.delete(int1)                                                       # STEP 22
avl1.delete(int2)                                                       # STEP 23
avl1.insert(int2)                                                       # STEP 24
avl0.insert(int2)                                                       # STEP 25
avl1.delete(int2)                                                       # STEP 26
result = avl2.inorder()                                                 # STEP 27
avl1.insert(int1)                                                       # STEP 28
avl1.insert(int1)                                                       # STEP 29
avl0.insert(int2)                                                       # STEP 30
result = avl1.inorder()                                                 # STEP 31
int0 = 7                                                                # STEP 32
avl2.insert(int2)                                                       # STEP 33
avl0.delete(int2)                                                       # STEP 34
avl0.insert(int0)                                                       # STEP 35
result = avl2.find(int0)                                                # STEP 36
avl1.delete(int1)                                                       # STEP 37
avl1.delete(int1)                                                       # STEP 38
avl0.delete(int2)                                                       # STEP 39
int0 = 7                                                                # STEP 40
avl0.insert(int2)                                                       # STEP 41
int3 = 13                                                               # STEP 42
avl0.delete(int0)                                                       # STEP 43
avl1.insert(int2)                                                       # STEP 44
avl1.insert(int0)                                                       # STEP 45
avl2.insert(int0)                                                       # STEP 46
avl2.delete(int1)                                                       # STEP 47
result = avl1.find(int3)                                                # STEP 48
avl1.delete(int2)                                                       # STEP 49
int3 = 12                                                               # STEP 50
avl0.delete(int3)                                                       # STEP 51
result = avl2.inorder()                                                 # STEP 52
avl0.insert(int2)                                                       # STEP 53
int2 = 4                                                                # STEP 54
avl0.insert(int1)                                                       # STEP 55
result = avl1.find(int1)                                                # STEP 56
avl0.delete(int1)                                                       # STEP 57
avl1.delete(int3)                                                       # STEP 58
avl1.insert(int3)                                                       # STEP 59
avl1.insert(int1)                                                       # STEP 60
avl0.delete(int2)                                                       # STEP 61
avl0.delete(int2)                                                       # STEP 62
avl0.insert(int1)                                                       # STEP 63
int2 = 9                                                                # STEP 64
avl2.insert(int3)                                                       # STEP 65
avl1.delete(int1)                                                       # STEP 66
avl0.insert(int2)                                                       # STEP 67
result = avl0.inorder()                                                 # STEP 68
result = avl0.find(int3)                                                # STEP 69
avl1.insert(int2)                                                       # STEP 70
int1 = 8                                                                # STEP 71
avl2.insert(int0)                                                       # STEP 72
avl0.delete(int0)                                                       # STEP 73
avl2.insert(int3)                                                       # STEP 74
avl1.delete(int0)                                                       # STEP 75
avl1.insert(int1)                                                       # STEP 76
int0 = 10                                                               # STEP 77
result = avl0.inorder()                                                 # STEP 78
avl2 == avl2                                                            # STEP 79
avl2.delete(int3)                                                       # STEP 80
avl2.insert(int3)                                                       # STEP 81
avl2.insert(int1)                                                       # STEP 82
avl0.delete(int1)                                                       # STEP 83
avl1.delete(int2)                                                       # STEP 84
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x101e75d40>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE 1
int0 = 17                                                                # STEP 0
int3 = 19                                                                # STEP 1
int1 = 6                                                                 # STEP 2
int2 = 4                                                                 # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
avl2.delete(int0)                                                        # STEP 5
result = avl2.find(int0)                                                 # STEP 6
avl2.delete(int3)                                                        # STEP 7
int3 = 10                                                                # STEP 8
avl2.insert(int0)                                                        # STEP 9
avl2.delete(int1)                                                       # STEP 10
int1 = 8                                                                # STEP 11
result = avl2.inorder()                                                 # STEP 12
avl2.delete(int2)                                                       # STEP 13
avl2.delete(int2)                                                       # STEP 14
result = avl2.find(int0)                                                # STEP 15
avl2.delete(int1)                                                       # STEP 16
avl2.delete(int3)                                                       # STEP 17
avl2.insert(int2)                                                       # STEP 18
int0 = 15                                                               # STEP 19
avl2.delete(int0)                                                       # STEP 20
avl2.insert(int2)                                                       # STEP 21
int1 = 7                                                                # STEP 22
avl2.delete(int1)                                                       # STEP 23
avl2.insert(int3)                                                       # STEP 24
avl2.insert(int3)                                                       # STEP 25
avl2.delete(int0)                                                       # STEP 26
result = avl2.find(int1)                                                # STEP 27
int2 = 3                                                                # STEP 28
avl2.delete(int0)                                                       # STEP 29
int0 = 17                                                               # STEP 30
avl2.insert(int2)                                                       # STEP 31
avl2.delete(int0)                                                       # STEP 32
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x101f432d8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE 2
avl1 = avl.AVLTree()                                                     # STEP 0
avl2 = avl.AVLTree()                                                     # STEP 1
result = avl1.inorder()                                                  # STEP 2
int3 = 3                                                                 # STEP 3
result = avl1.inorder()                                                  # STEP 4
avl2.delete(int3)                                                        # STEP 5
avl2.insert(int3)                                                        # STEP 6
avl1 == avl2                                                             # STEP 7
avl2.delete(int3)                                                        # STEP 8
avl1.insert(int3)                                                        # STEP 9
avl1.insert(int3)                                                       # STEP 10
avl1.delete(int3)                                                       # STEP 11
int1 = 17                                                               # STEP 12
avl2.delete(int1)                                                       # STEP 13
avl2.delete(int1)                                                       # STEP 14
avl2.delete(int1)                                                       # STEP 15
result = avl1.inorder()                                                 # STEP 16
avl2.insert(int3)                                                       # STEP 17
result = avl1.inorder()                                                 # STEP 18
avl1.delete(int3)                                                       # STEP 19
avl2.insert(int3)                                                       # STEP 20
avl2.delete(int3)                                                       # STEP 21
avl2.delete(int3)                                                       # STEP 22
avl2.delete(int1)                                                       # STEP 23
int3 = 7                                                                # STEP 24
int1 = 3                                                                # STEP 25
avl1.insert(int1)                                                       # STEP 26
avl2.delete(int3)                                                       # STEP 27
avl2.insert(int3)                                                       # STEP 28
avl2.insert(int1)                                                       # STEP 29
avl2.delete(int1)                                                       # STEP 30
avl2 == avl2                                                            # STEP 31
avl1.delete(int3)                                                       # STEP 32
avl2.insert(int1)                                                       # STEP 33
avl1.delete(int3)                                                       # STEP 34
int0 = 5                                                                # STEP 35
avl1.insert(int3)                                                       # STEP 36
avl1.delete(int3)                                                       # STEP 37
avl1.insert(int0)                                                       # STEP 38
avl2 == avl1                                                            # STEP 39
int2 = 17                                                               # STEP 40
int3 = 16                                                               # STEP 41
int1 = 19                                                               # STEP 42
int0 = 1                                                                # STEP 43
result = avl2.find(int2)                                                # STEP 44
int2 = 18                                                               # STEP 45
avl1.insert(int3)                                                       # STEP 46
avl2.delete(int0)                                                       # STEP 47
avl1.insert(int3)                                                       # STEP 48
avl2.insert(int2)                                                       # STEP 49
result = avl2.inorder()                                                 # STEP 50
avl2.delete(int0)                                                       # STEP 51
avl1.insert(int0)                                                       # STEP 52
avl2.insert(int0)                                                       # STEP 53
int0 = 7                                                                # STEP 54
avl2.insert(int2)                                                       # STEP 55
avl1.delete(int3)                                                       # STEP 56
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1028e3170>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
214 BRANCHES COVERED
161 STATEMENTS COVERED

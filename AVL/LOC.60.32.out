Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.99747.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1043d6d40>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
Original test has 35 steps

SAVING TEST AS failure.99747.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 20                                                                # STEP 0
ACTION: int0 = 20 
int0 = None : <type 'NoneType'>
=> int0 = 20 : <type 'int'>
==================================================
int2 = 1                                                                 # STEP 1
ACTION: int2 = 1 
int2 = None : <type 'NoneType'>
=> int2 = 1 : <type 'int'>
==================================================
int1 = 18                                                                # STEP 2
ACTION: int1 = 18 
int1 = None : <type 'NoneType'>
=> int1 = 18 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 3
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x10422d878> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.delete(int2)                                                        # STEP 4
ACTION: avl0.delete(int2) 
int2 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10422d878> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int2 = 16                                                                # STEP 5
ACTION: int2 = 16 
int2 = 1 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
avl0.insert(int2)                                                        # STEP 6
ACTION: avl0.insert(int2) 
int2 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10422d878> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([16]) : <type 'set'>
==================================================
result = avl0.find(int0)                                                 # STEP 7
ACTION: result = avl0.find(int0) 
int0 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10422d878> : <type 'instance'>
avl_REF0 = set([16]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
avl0.delete(int0)                                                        # STEP 8
ACTION: avl0.delete(int0) 
int0 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10422d878> : <type 'instance'>
avl_REF0 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.delete(int2)                                                        # STEP 9
ACTION: avl0.delete(int2) 
int2 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10422d878> : <type 'instance'>
avl_REF0 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
result = avl0.find(int2)                                                # STEP 10
ACTION: result = avl0.find(int2) 
int2 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10422d878> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl0.delete(int1)                                                       # STEP 11
ACTION: avl0.delete(int1) 
int1 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10422d878> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.insert(int1)                                                       # STEP 12
ACTION: avl0.insert(int1) 
int1 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10422d878> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([18]) : <type 'set'>
==================================================
int1 = 5                                                                # STEP 13
ACTION: int1 = 5 
int1 = 18 : <type 'int'>
=> int1 = 5 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 14
ACTION: avl0.delete(int2) 
int2 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10422d878> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.insert(int2)                                                       # STEP 15
ACTION: avl0.insert(int2) 
int2 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10422d878> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([16, 18]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 16
ACTION: avl0.insert(int1) 
int1 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10422d878> : <type 'instance'>
avl_REF0 = set([16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([16, 18, 5]) : <type 'set'>
==================================================
int3 = 6                                                                # STEP 17
ACTION: int3 = 6 
int3 = None : <type 'NoneType'>
=> int3 = 6 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 18
ACTION: avl0.delete(int1) 
int1 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10422d878> : <type 'instance'>
avl_REF0 = set([16, 18, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([16, 18]) : <type 'set'>
==================================================
int1 = 13                                                               # STEP 19
ACTION: int1 = 13 
int1 = 5 : <type 'int'>
=> int1 = 13 : <type 'int'>
==================================================
int0 = 2                                                                # STEP 20
ACTION: int0 = 2 
int0 = 20 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 21
ACTION: avl0.delete(int3) 
int3 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10422d878> : <type 'instance'>
avl_REF0 = set([16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.insert(int2)                                                       # STEP 22
ACTION: avl0.insert(int2) 
int2 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10422d878> : <type 'instance'>
avl_REF0 = set([16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
int3 = 1                                                                # STEP 23
ACTION: int3 = 1 
int3 = 6 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
result = avl0.find(int1)                                                # STEP 24
ACTION: result = avl0.find(int1) 
int1 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10422d878> : <type 'instance'>
avl_REF0 = set([16, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
int2 = 6                                                                # STEP 25
ACTION: int2 = 6 
int2 = 16 : <type 'int'>
=> int2 = 6 : <type 'int'>
==================================================
int1 = 16                                                               # STEP 26
ACTION: int1 = 16 
int1 = 13 : <type 'int'>
=> int1 = 16 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 27
ACTION: avl0.delete(int1) 
int1 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10422d878> : <type 'instance'>
avl_REF0 = set([16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([18]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 28
ACTION: avl0.delete(int2) 
int2 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10422d878> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.insert(int2)                                                       # STEP 29
ACTION: avl0.insert(int2) 
int2 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10422d878> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([18, 6]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 30
ACTION: avl0.delete(int1) 
int1 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10422d878> : <type 'instance'>
avl_REF0 = set([18, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
result = avl0.find(int2)                                                # STEP 31
ACTION: result = avl0.find(int2) 
int2 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10422d878> : <type 'instance'>
avl_REF0 = set([18, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl0.insert(int0)                                                       # STEP 32
ACTION: avl0.insert(int0) 
int0 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10422d878> : <type 'instance'>
avl_REF0 = set([18, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([18, 2, 6]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 33
ACTION: avl0.insert(int1) 
int1 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10422d878> : <type 'instance'>
avl_REF0 = set([18, 2, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([16, 18, 2, 6]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 34
ACTION: avl0.delete(int0) 
int0 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10422d878> : <type 'instance'>
avl_REF0 = set([16, 18, 2, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([16, 18, 6]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10430b0e0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
  10 [2:0]
-- < 7 [1:-1]
---- > 8 [0:0] L
-- > 15 [1:0]
---- < 14 [0:0] L
---- > 16 [0:0] L
set([7, 8, 10, 14, 15, 16])
  10 [2:0]
-- < 7 [1:-1]
---- > 8 [0:0] L
-- > 15 [1:0]
---- < 14 [0:0] L
---- > 16 [0:0] L
set([7, 8, 10, 14, 15, 16])
  10 [3:-1]
-- < 7 [1:-1]
---- > 8 [0:0] L
-- > 15 [2:1]
---- < 14 [1:1]
------ < 12 [0:0] L
---- > 16 [0:0] L
set([7, 8, 10, 12, 14, 15, 16])
  10 [3:-1]
-- < 7 [1:-1]
---- > 8 [0:0] L
-- > 15 [2:1]
---- < 14 [1:1]
------ < 12 [0:0] L
---- > 16 [0:0] L
set([7, 8, 10, 12, 14, 15, 16])
  10 [3:-1]
-- < 7 [1:-1]
---- > 8 [0:0] L
-- > 15 [2:1]
---- < 14 [1:1]
------ < 12 [0:0] L
---- > 16 [0:0] L
set([7, 8, 10, 12, 14, 15, 16])
  10 [3:-1]
-- < 7 [1:-1]
---- > 8 [0:0] L
-- > 15 [2:1]
---- < 14 [1:1]
------ < 12 [0:0] L
---- > 16 [0:0] L
set([7, 8, 10, 12, 14, 15, 16])
  10 [3:-1]
-- < 7 [1:-1]
---- > 8 [0:0] L
-- > 15 [2:1]
---- < 14 [1:1]
------ < 12 [0:0] L
---- > 16 [0:0] L
set([7, 8, 10, 12, 14, 15, 16])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1042a7518>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 88 steps

SAVING TEST AS failure.99747.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
avl0 = avl.AVLTree()                                                     # STEP 0
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x1042a4fc8> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int1 = 1                                                                 # STEP 1
ACTION: int1 = 1 
int1 = None : <type 'NoneType'>
=> int1 = 1 : <type 'int'>
==================================================
avl0.insert(int1)                                                        # STEP 2
ACTION: avl0.insert(int1) 
int1 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1042a4fc8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([1]) : <type 'set'>
==================================================
result = avl0.find(int1)                                                 # STEP 3
ACTION: result = avl0.find(int1) 
int1 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1042a4fc8> : <type 'instance'>
avl_REF0 = set([1]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl0.delete(int1)                                                        # STEP 4
ACTION: avl0.delete(int1) 
int1 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1042a4fc8> : <type 'instance'>
avl_REF0 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.delete(int1)                                                        # STEP 5
ACTION: avl0.delete(int1) 
int1 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1042a4fc8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int1 = 9                                                                 # STEP 6
ACTION: int1 = 9 
int1 = 1 : <type 'int'>
=> int1 = 9 : <type 'int'>
==================================================
avl0.insert(int1)                                                        # STEP 7
ACTION: avl0.insert(int1) 
int1 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1042a4fc8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([9]) : <type 'set'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 8
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x1058d1248> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int0 = 16                                                                # STEP 9
ACTION: int0 = 16 
int0 = None : <type 'NoneType'>
=> int0 = 16 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 10
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x1042a4fc8> : <type 'instance'>
avl_REF0 = set([9]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int2 = 6                                                                # STEP 11
ACTION: int2 = 6 
int2 = None : <type 'NoneType'>
=> int2 = 6 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 12
ACTION: avl2.delete(int2) 
int2 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058d1248> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.insert(int1)                                                       # STEP 13
ACTION: avl2.insert(int1) 
int1 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058d1248> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([9]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 14
ACTION: avl2.delete(int1) 
int1 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058d1248> : <type 'instance'>
avl_REF2 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 15
ACTION: avl0.delete(int1) 
int1 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1042a4fc8> : <type 'instance'>
avl_REF0 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int1 = 6                                                                # STEP 16
ACTION: int1 = 6 
int1 = 9 : <type 'int'>
=> int1 = 6 : <type 'int'>
==================================================
int2 = 3                                                                # STEP 17
ACTION: int2 = 3 
int2 = 6 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 18
ACTION: avl2.delete(int1) 
int1 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058d1248> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int3 = 10                                                               # STEP 19
ACTION: int3 = 10 
int3 = None : <type 'NoneType'>
=> int3 = 10 : <type 'int'>
==================================================
int1 = 7                                                                # STEP 20
ACTION: int1 = 7 
int1 = 6 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 21
ACTION: avl2.delete(int0) 
int0 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058d1248> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
result = avl2.find(int1)                                                # STEP 22
ACTION: result = avl2.find(int1) 
int1 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058d1248> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl2.insert(int3)                                                       # STEP 23
ACTION: avl2.insert(int3) 
int3 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058d1248> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([10]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 24
ACTION: avl0.insert(int2) 
int2 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1042a4fc8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([3]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 25
ACTION: avl0.insert(int2) 
int2 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1042a4fc8> : <type 'instance'>
avl_REF0 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl0.delete(int3)                                                       # STEP 26
ACTION: avl0.delete(int3) 
int3 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1042a4fc8> : <type 'instance'>
avl_REF0 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl2.delete(int2)                                                       # STEP 27
ACTION: avl2.delete(int2) 
int2 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058d1248> : <type 'instance'>
avl_REF2 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
result = avl0.find(int0)                                                # STEP 28
ACTION: result = avl0.find(int0) 
int0 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1042a4fc8> : <type 'instance'>
avl_REF0 = set([3]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
result = avl0.find(int0)                                                # STEP 29
ACTION: result = avl0.find(int0) 
int0 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1042a4fc8> : <type 'instance'>
avl_REF0 = set([3]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
avl2.delete(int1)                                                       # STEP 30
ACTION: avl2.delete(int1) 
int1 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058d1248> : <type 'instance'>
avl_REF2 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
result = avl0.find(int0)                                                # STEP 31
ACTION: result = avl0.find(int0) 
int0 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1042a4fc8> : <type 'instance'>
avl_REF0 = set([3]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
avl0.delete(int0)                                                       # STEP 32
ACTION: avl0.delete(int0) 
int0 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1042a4fc8> : <type 'instance'>
avl_REF0 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl2.delete(int2)                                                       # STEP 33
ACTION: avl2.delete(int2) 
int2 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058d1248> : <type 'instance'>
avl_REF2 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int2 = 15                                                               # STEP 34
ACTION: int2 = 15 
int2 = 3 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 35
ACTION: avl0.delete(int0) 
int0 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1042a4fc8> : <type 'instance'>
avl_REF0 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl2.insert(int0)                                                       # STEP 36
ACTION: avl2.insert(int0) 
int0 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058d1248> : <type 'instance'>
avl_REF2 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([16, 10]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 37
ACTION: avl0.delete(int0) 
int0 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1042a4fc8> : <type 'instance'>
avl_REF0 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.delete(int3)                                                       # STEP 38
ACTION: avl0.delete(int3) 
int3 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1042a4fc8> : <type 'instance'>
avl_REF0 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
result = avl0.inorder()                                                 # STEP 39
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x1042a4fc8> : <type 'instance'>
avl_REF0 = set([3]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl1 = avl.AVLTree()                                                    # STEP 40
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x1058ed6c8> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 41
ACTION: avl2.insert(int3) 
int3 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058d1248> : <type 'instance'>
avl_REF2 = set([16, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
avl2.insert(int1)                                                       # STEP 42
ACTION: avl2.insert(int1) 
int1 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058d1248> : <type 'instance'>
avl_REF2 = set([16, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([16, 10, 7]) : <type 'set'>
==================================================
result = avl2.find(int2)                                                # STEP 43
ACTION: result = avl2.find(int2) 
int2 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058d1248> : <type 'instance'>
avl_REF2 = set([16, 10, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl0.insert(int2)                                                       # STEP 44
ACTION: avl0.insert(int2) 
int2 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1042a4fc8> : <type 'instance'>
avl_REF0 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([3, 15]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 45
ACTION: avl2.insert(int2) 
int2 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058d1248> : <type 'instance'>
avl_REF2 = set([16, 10, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([16, 10, 15, 7]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 46
ACTION: avl0.insert(int2) 
int2 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1042a4fc8> : <type 'instance'>
avl_REF0 = set([3, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl2.insert(int2)                                                       # STEP 47
ACTION: avl2.insert(int2) 
int2 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058d1248> : <type 'instance'>
avl_REF2 = set([16, 10, 15, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
int2 = 3                                                                # STEP 48
ACTION: int2 = 3 
int2 = 15 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
int3 = 14                                                               # STEP 49
ACTION: int3 = 14 
int3 = 10 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
int1 = 18                                                               # STEP 50
ACTION: int1 = 18 
int1 = 7 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
int0 = 10                                                               # STEP 51
ACTION: int0 = 10 
int0 = 16 : <type 'int'>
=> int0 = 10 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 52
ACTION: avl2.insert(int3) 
int3 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058d1248> : <type 'instance'>
avl_REF2 = set([16, 10, 15, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([7, 10, 14, 15, 16]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 53
ACTION: avl1.delete(int0) 
int0 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058ed6c8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
result = avl1.inorder()                                                 # STEP 54
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1058ed6c8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl0.insert(int1)                                                       # STEP 55
ACTION: avl0.insert(int1) 
int1 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1042a4fc8> : <type 'instance'>
avl_REF0 = set([3, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([18, 3, 15]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 56
ACTION: avl1.delete(int2) 
int2 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058ed6c8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.insert(int1)                                                       # STEP 57
ACTION: avl1.insert(int1) 
int1 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058ed6c8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([18]) : <type 'set'>
==================================================
int0 = 8                                                                # STEP 58
ACTION: int0 = 8 
int0 = 10 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 59
ACTION: avl0.delete(int3) 
int3 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1042a4fc8> : <type 'instance'>
avl_REF0 = set([18, 3, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int3 = 12                                                               # STEP 60
ACTION: int3 = 12 
int3 = 14 : <type 'int'>
=> int3 = 12 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 61
ACTION: avl2.delete(int2) 
int2 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058d1248> : <type 'instance'>
avl_REF2 = set([7, 10, 14, 15, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
result = avl2.inorder()                                                 # STEP 62
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x1058d1248> : <type 'instance'>
avl_REF2 = set([7, 10, 14, 15, 16]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int1)                                                       # STEP 63
ACTION: avl2.delete(int1) 
int1 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058d1248> : <type 'instance'>
avl_REF2 = set([7, 10, 14, 15, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int0)                                                       # STEP 64
ACTION: avl2.insert(int0) 
int0 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058d1248> : <type 'instance'>
avl_REF2 = set([7, 10, 14, 15, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([7, 8, 10, 14, 15, 16]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 65
ACTION: avl0.insert(int3) 
int3 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1042a4fc8> : <type 'instance'>
avl_REF0 = set([18, 3, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([18, 3, 12, 15]) : <type 'set'>
==================================================
int0 = 18                                                               # STEP 66
ACTION: int0 = 18 
int0 = 8 : <type 'int'>
=> int0 = 18 : <type 'int'>
==================================================
avl2.display()                                                          # STEP 67
ACTION: avl2.display() 
avl2 = <avl.AVLTree instance at 0x1058d1248> : <type 'instance'>
avl_REF2 = set([7, 8, 10, 14, 15, 16]) : <type 'set'>
  10 [2:0]
-- < 7 [1:-1]
---- > 8 [0:0] L
-- > 15 [1:0]
---- < 14 [0:0] L
---- > 16 [0:0] L
REFERENCE ACTION: print(avl_REF2) 
set([7, 8, 10, 14, 15, 16])
==================================================
avl2.display()                                                          # STEP 68
ACTION: avl2.display() 
avl2 = <avl.AVLTree instance at 0x1058d1248> : <type 'instance'>
avl_REF2 = set([7, 8, 10, 14, 15, 16]) : <type 'set'>
  10 [2:0]
-- < 7 [1:-1]
---- > 8 [0:0] L
-- > 15 [1:0]
---- < 14 [0:0] L
---- > 16 [0:0] L
REFERENCE ACTION: print(avl_REF2) 
set([7, 8, 10, 14, 15, 16])
==================================================
avl0.insert(int0)                                                       # STEP 69
ACTION: avl0.insert(int0) 
int0 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1042a4fc8> : <type 'instance'>
avl_REF0 = set([18, 3, 12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
int1 = 8                                                                # STEP 70
ACTION: int1 = 8 
int1 = 18 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
int2 = 9                                                                # STEP 71
ACTION: int2 = 9 
int2 = 3 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 72
ACTION: avl2.insert(int3) 
int3 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058d1248> : <type 'instance'>
avl_REF2 = set([7, 8, 10, 14, 15, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([7, 8, 10, 12, 14, 15, 16]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 73
ACTION: avl0.insert(int0) 
int0 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1042a4fc8> : <type 'instance'>
avl_REF0 = set([18, 3, 12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
result = avl2.find(int0)                                                # STEP 74
ACTION: result = avl2.find(int0) 
int0 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058d1248> : <type 'instance'>
avl_REF2 = set([7, 8, 10, 12, 14, 15, 16]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl2.display()                                                          # STEP 75
ACTION: avl2.display() 
avl2 = <avl.AVLTree instance at 0x1058d1248> : <type 'instance'>
avl_REF2 = set([7, 8, 10, 12, 14, 15, 16]) : <type 'set'>
  10 [3:-1]
-- < 7 [1:-1]
---- > 8 [0:0] L
-- > 15 [2:1]
---- < 14 [1:1]
------ < 12 [0:0] L
---- > 16 [0:0] L
REFERENCE ACTION: print(avl_REF2) 
set([7, 8, 10, 12, 14, 15, 16])
==================================================
int3 = 15                                                               # STEP 76
ACTION: int3 = 15 
int3 = 12 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 77
ACTION: avl1.delete(int1) 
int1 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058ed6c8> : <type 'instance'>
avl_REF1 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl2.display()                                                          # STEP 78
ACTION: avl2.display() 
avl2 = <avl.AVLTree instance at 0x1058d1248> : <type 'instance'>
avl_REF2 = set([7, 8, 10, 12, 14, 15, 16]) : <type 'set'>
  10 [3:-1]
-- < 7 [1:-1]
---- > 8 [0:0] L
-- > 15 [2:1]
---- < 14 [1:1]
------ < 12 [0:0] L
---- > 16 [0:0] L
REFERENCE ACTION: print(avl_REF2) 
set([7, 8, 10, 12, 14, 15, 16])
==================================================
avl2.display()                                                          # STEP 79
ACTION: avl2.display() 
avl2 = <avl.AVLTree instance at 0x1058d1248> : <type 'instance'>
avl_REF2 = set([7, 8, 10, 12, 14, 15, 16]) : <type 'set'>
  10 [3:-1]
-- < 7 [1:-1]
---- > 8 [0:0] L
-- > 15 [2:1]
---- < 14 [1:1]
------ < 12 [0:0] L
---- > 16 [0:0] L
REFERENCE ACTION: print(avl_REF2) 
set([7, 8, 10, 12, 14, 15, 16])
==================================================
int1 = 3                                                                # STEP 80
ACTION: int1 = 3 
int1 = 8 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 81
ACTION: avl1.insert(int2) 
int2 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058ed6c8> : <type 'instance'>
avl_REF1 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([9, 18]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 82
ACTION: avl0.delete(int2) 
int2 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1042a4fc8> : <type 'instance'>
avl_REF0 = set([18, 3, 12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl2.display()                                                          # STEP 83
ACTION: avl2.display() 
avl2 = <avl.AVLTree instance at 0x1058d1248> : <type 'instance'>
avl_REF2 = set([7, 8, 10, 12, 14, 15, 16]) : <type 'set'>
  10 [3:-1]
-- < 7 [1:-1]
---- > 8 [0:0] L
-- > 15 [2:1]
---- < 14 [1:1]
------ < 12 [0:0] L
---- > 16 [0:0] L
REFERENCE ACTION: print(avl_REF2) 
set([7, 8, 10, 12, 14, 15, 16])
==================================================
avl2.display()                                                          # STEP 84
ACTION: avl2.display() 
avl2 = <avl.AVLTree instance at 0x1058d1248> : <type 'instance'>
avl_REF2 = set([7, 8, 10, 12, 14, 15, 16]) : <type 'set'>
  10 [3:-1]
-- < 7 [1:-1]
---- > 8 [0:0] L
-- > 15 [2:1]
---- < 14 [1:1]
------ < 12 [0:0] L
---- > 16 [0:0] L
REFERENCE ACTION: print(avl_REF2) 
set([7, 8, 10, 12, 14, 15, 16])
==================================================
avl1.delete(int0)                                                       # STEP 85
ACTION: avl1.delete(int0) 
int0 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058ed6c8> : <type 'instance'>
avl_REF1 = set([9, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([9]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 86
ACTION: avl1.insert(int0) 
int0 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058ed6c8> : <type 'instance'>
avl_REF1 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([9, 18]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 87
ACTION: avl2.delete(int3) 
int3 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058d1248> : <type 'instance'>
avl_REF2 = set([7, 8, 10, 12, 14, 15, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([7, 8, 10, 12, 14, 16]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1058e95f0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
TEST #4 STEP #30 (0:00:30.070558) Fri Apr 28 04:48:48 2017 [ 160 stmts 212 branches ]
  6 [2:0]
-- < 1 [1:-1]
---- > 4 [0:0] L
-- > 13 [1:0]
---- < 7 [0:0] L
---- > 14 [0:0] L
set([1, 6, 7, 4, 13, 14])
  14 [2:0]
-- < 8 [1:0]
---- < 4 [0:0] L
---- > 10 [0:0] L
-- > 17 [1:0]
---- < 16 [0:0] L
---- > 18 [0:0] L
set([4, 8, 10, 14, 16, 17, 18])
  14 [3:1]
-- < 8 [2:1]
---- < 5 [1:1]
------ < 4 [0:0] L
---- > 9 [0:0] L
-- > 17 [1:1]
---- < 16 [0:0] L
set([4, 5, 8, 9, 14, 16, 17])
  7 [2:0]
-- < 2 [1:-1]
---- > 5 [0:0] L
-- > 13 [1:0]
---- < 10 [0:0] L
---- > 19 [0:0] L
set([2, 5, 7, 10, 13, 19])
  7 [2:0]
-- < 2 [1:-1]
---- > 5 [0:0] L
-- > 13 [1:0]
---- < 10 [0:0] L
---- > 19 [0:0] L
set([2, 5, 7, 10, 13, 19])
  7 [3:1]
-- < 5 [2:1]
---- < 2 [1:-1]
------ > 4 [0:0] L
---- > 6 [0:0] L
-- > 13 [1:0]
---- < 10 [0:0] L
---- > 19 [0:0] L
set([2, 4, 5, 6, 7, 10, 13, 19])
  7 [3:1]
-- < 5 [2:1]
---- < 2 [1:-1]
------ > 4 [0:0] L
---- > 6 [0:0] L
-- > 13 [1:0]
---- < 10 [0:0] L
---- > 19 [0:0] L
set([2, 4, 5, 6, 7, 10, 13, 19])
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 95
STOPPING TESTING DUE TO TIMEOUT
8.6528673227 PERCENT COVERED
60.2016420364 TOTAL RUNTIME
7 EXECUTED
618 TOTAL TEST OPERATIONS
24.9427595139 TIME SPENT EXECUTING TEST OPERATIONS
0.0718083381653 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
25.1474711895 TIME SPENT CHECKING PROPERTIES
50.0902307034 TOTAL TIME SPENT RUNNING SUT
0.00441312789917 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
2 FAILED
0 REPEATS OF FAILURES
2 ACTUAL DISTINCT FAILURES

FAILURE 0
int0 = 20                                                                # STEP 0
int2 = 1                                                                 # STEP 1
int1 = 18                                                                # STEP 2
avl0 = avl.AVLTree()                                                     # STEP 3
avl0.delete(int2)                                                        # STEP 4
int2 = 16                                                                # STEP 5
avl0.insert(int2)                                                        # STEP 6
result = avl0.find(int0)                                                 # STEP 7
avl0.delete(int0)                                                        # STEP 8
avl0.delete(int2)                                                        # STEP 9
result = avl0.find(int2)                                                # STEP 10
avl0.delete(int1)                                                       # STEP 11
avl0.insert(int1)                                                       # STEP 12
int1 = 5                                                                # STEP 13
avl0.delete(int2)                                                       # STEP 14
avl0.insert(int2)                                                       # STEP 15
avl0.insert(int1)                                                       # STEP 16
int3 = 6                                                                # STEP 17
avl0.delete(int1)                                                       # STEP 18
int1 = 13                                                               # STEP 19
int0 = 2                                                                # STEP 20
avl0.delete(int3)                                                       # STEP 21
avl0.insert(int2)                                                       # STEP 22
int3 = 1                                                                # STEP 23
result = avl0.find(int1)                                                # STEP 24
int2 = 6                                                                # STEP 25
int1 = 16                                                               # STEP 26
avl0.delete(int1)                                                       # STEP 27
avl0.delete(int2)                                                       # STEP 28
avl0.insert(int2)                                                       # STEP 29
avl0.delete(int1)                                                       # STEP 30
result = avl0.find(int2)                                                # STEP 31
avl0.insert(int0)                                                       # STEP 32
avl0.insert(int1)                                                       # STEP 33
avl0.delete(int0)                                                       # STEP 34
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10430b0e0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE 1
avl0 = avl.AVLTree()                                                     # STEP 0
int1 = 1                                                                 # STEP 1
avl0.insert(int1)                                                        # STEP 2
result = avl0.find(int1)                                                 # STEP 3
avl0.delete(int1)                                                        # STEP 4
avl0.delete(int1)                                                        # STEP 5
int1 = 9                                                                 # STEP 6
avl0.insert(int1)                                                        # STEP 7
avl2 = avl.AVLTree()                                                     # STEP 8
int0 = 16                                                                # STEP 9
result = avl0.inorder()                                                 # STEP 10
int2 = 6                                                                # STEP 11
avl2.delete(int2)                                                       # STEP 12
avl2.insert(int1)                                                       # STEP 13
avl2.delete(int1)                                                       # STEP 14
avl0.delete(int1)                                                       # STEP 15
int1 = 6                                                                # STEP 16
int2 = 3                                                                # STEP 17
avl2.delete(int1)                                                       # STEP 18
int3 = 10                                                               # STEP 19
int1 = 7                                                                # STEP 20
avl2.delete(int0)                                                       # STEP 21
result = avl2.find(int1)                                                # STEP 22
avl2.insert(int3)                                                       # STEP 23
avl0.insert(int2)                                                       # STEP 24
avl0.insert(int2)                                                       # STEP 25
avl0.delete(int3)                                                       # STEP 26
avl2.delete(int2)                                                       # STEP 27
result = avl0.find(int0)                                                # STEP 28
result = avl0.find(int0)                                                # STEP 29
avl2.delete(int1)                                                       # STEP 30
result = avl0.find(int0)                                                # STEP 31
avl0.delete(int0)                                                       # STEP 32
avl2.delete(int2)                                                       # STEP 33
int2 = 15                                                               # STEP 34
avl0.delete(int0)                                                       # STEP 35
avl2.insert(int0)                                                       # STEP 36
avl0.delete(int0)                                                       # STEP 37
avl0.delete(int3)                                                       # STEP 38
result = avl0.inorder()                                                 # STEP 39
avl1 = avl.AVLTree()                                                    # STEP 40
avl2.insert(int3)                                                       # STEP 41
avl2.insert(int1)                                                       # STEP 42
result = avl2.find(int2)                                                # STEP 43
avl0.insert(int2)                                                       # STEP 44
avl2.insert(int2)                                                       # STEP 45
avl0.insert(int2)                                                       # STEP 46
avl2.insert(int2)                                                       # STEP 47
int2 = 3                                                                # STEP 48
int3 = 14                                                               # STEP 49
int1 = 18                                                               # STEP 50
int0 = 10                                                               # STEP 51
avl2.insert(int3)                                                       # STEP 52
avl1.delete(int0)                                                       # STEP 53
result = avl1.inorder()                                                 # STEP 54
avl0.insert(int1)                                                       # STEP 55
avl1.delete(int2)                                                       # STEP 56
avl1.insert(int1)                                                       # STEP 57
int0 = 8                                                                # STEP 58
avl0.delete(int3)                                                       # STEP 59
int3 = 12                                                               # STEP 60
avl2.delete(int2)                                                       # STEP 61
result = avl2.inorder()                                                 # STEP 62
avl2.delete(int1)                                                       # STEP 63
avl2.insert(int0)                                                       # STEP 64
avl0.insert(int3)                                                       # STEP 65
int0 = 18                                                               # STEP 66
avl2.display()                                                          # STEP 67
avl2.display()                                                          # STEP 68
avl0.insert(int0)                                                       # STEP 69
int1 = 8                                                                # STEP 70
int2 = 9                                                                # STEP 71
avl2.insert(int3)                                                       # STEP 72
avl0.insert(int0)                                                       # STEP 73
result = avl2.find(int0)                                                # STEP 74
avl2.display()                                                          # STEP 75
int3 = 15                                                               # STEP 76
avl1.delete(int1)                                                       # STEP 77
avl2.display()                                                          # STEP 78
avl2.display()                                                          # STEP 79
int1 = 3                                                                # STEP 80
avl1.insert(int2)                                                       # STEP 81
avl0.delete(int2)                                                       # STEP 82
avl2.display()                                                          # STEP 83
avl2.display()                                                          # STEP 84
avl1.delete(int0)                                                       # STEP 85
avl1.insert(int0)                                                       # STEP 86
avl2.delete(int3)                                                       # STEP 87
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1058e95f0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
218 BRANCHES COVERED
163 STATEMENTS COVERED

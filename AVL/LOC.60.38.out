Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.99851.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  16 [3:1]
-- < 11 [2:1]
---- < 3 [1:-1]
------ > 6 [0:0] L
---- > 13 [0:0] L
-- > 18 [1:0]
---- < 17 [0:0] L
---- > 20 [0:0] L
set([3, 6, 11, 13, 16, 17, 18, 20])
  16 [3:1]
-- < 11 [2:1]
---- < 3 [1:-1]
------ > 6 [0:0] L
---- > 13 [0:0] L
-- > 18 [1:0]
---- < 17 [0:0] L
---- > 20 [0:0] L
set([3, 6, 11, 13, 16, 17, 18, 20])
  16 [3:1]
-- < 4 [2:0]
---- < 3 [1:1]
------ < 1 [0:0] L
---- > 11 [1:0]
------ < 6 [0:0] L
------ > 13 [0:0] L
-- > 18 [1:1]
---- < 17 [0:0] L
set([1, 3, 4, 6, 11, 13, 16, 17, 18])
  16 [3:1]
-- < 4 [2:0]
---- < 3 [1:1]
------ < 1 [0:0] L
---- > 11 [1:0]
------ < 6 [0:0] L
------ > 13 [0:0] L
-- > 18 [1:1]
---- < 17 [0:0] L
set([1, 3, 4, 6, 11, 13, 16, 17, 18])
  16 [3:1]
-- < 4 [2:0]
---- < 3 [1:1]
------ < 1 [0:0] L
---- > 11 [1:0]
------ < 6 [0:0] L
------ > 13 [0:0] L
-- > 18 [1:1]
---- < 17 [0:0] L
set([1, 3, 4, 6, 11, 13, 16, 17, 18])
  16 [3:1]
-- < 4 [2:0]
---- < 3 [1:1]
------ < 1 [0:0] L
---- > 11 [1:0]
------ < 6 [0:0] L
------ > 13 [0:0] L
-- > 18 [1:1]
---- < 17 [0:0] L
set([1, 3, 4, 6, 11, 13, 16, 17, 18])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104bcf3b0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 81 steps

SAVING TEST AS failure.99851.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 16                                                                # STEP 0
ACTION: int0 = 16 
int0 = None : <type 'NoneType'>
=> int0 = 16 : <type 'int'>
==================================================
int1 = 12                                                                # STEP 1
ACTION: int1 = 12 
int1 = None : <type 'NoneType'>
=> int1 = 12 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 2
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x1048c9a28> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int2 = 15                                                                # STEP 3
ACTION: int2 = 15 
int2 = None : <type 'NoneType'>
=> int2 = 15 : <type 'int'>
==================================================
avl1.insert(int0)                                                        # STEP 4
ACTION: avl1.insert(int0) 
int0 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1048c9a28> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([16]) : <type 'set'>
==================================================
avl1.delete(int2)                                                        # STEP 5
ACTION: avl1.delete(int2) 
int2 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1048c9a28> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int0 = 20                                                                # STEP 6
ACTION: int0 = 20 
int0 = 16 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
avl1.delete(int1)                                                        # STEP 7
ACTION: avl1.delete(int1) 
int1 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1048c9a28> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
result = avl1.inorder()                                                  # STEP 8
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1048c9a28> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
result = avl1.find(int2)                                                 # STEP 9
ACTION: result = avl1.find(int2) 
int2 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1048c9a28> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl1.insert(int1)                                                       # STEP 10
ACTION: avl1.insert(int1) 
int1 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1048c9a28> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([16, 12]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 11
ACTION: avl1.delete(int0) 
int0 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1048c9a28> : <type 'instance'>
avl_REF1 = set([16, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.delete(int1)                                                       # STEP 12
ACTION: avl1.delete(int1) 
int1 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1048c9a28> : <type 'instance'>
avl_REF1 = set([16, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([16]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 13
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1048c9a28> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
result = avl1.find(int2)                                                # STEP 14
ACTION: result = avl1.find(int2) 
int2 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1048c9a28> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl1.delete(int2)                                                       # STEP 15
ACTION: avl1.delete(int2) 
int2 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1048c9a28> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1 == avl1                                                            # STEP 16
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x1048c9a28> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
int3 = 9                                                                # STEP 17
ACTION: int3 = 9 
int3 = None : <type 'NoneType'>
=> int3 = 9 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 18
ACTION: avl1.insert(int3) 
int3 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1048c9a28> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([16, 9]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 19
ACTION: avl1.delete(int3) 
int3 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1048c9a28> : <type 'instance'>
avl_REF1 = set([16, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([16]) : <type 'set'>
==================================================
int1 = 13                                                               # STEP 20
ACTION: int1 = 13 
int1 = 12 : <type 'int'>
=> int1 = 13 : <type 'int'>
==================================================
result = avl1.find(int3)                                                # STEP 21
ACTION: result = avl1.find(int3) 
int3 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1048c9a28> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl1.delete(int3)                                                       # STEP 22
ACTION: avl1.delete(int3) 
int3 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1048c9a28> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.insert(int0)                                                       # STEP 23
ACTION: avl1.insert(int0) 
int0 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1048c9a28> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([16, 20]) : <type 'set'>
==================================================
int3 = 8                                                                # STEP 24
ACTION: int3 = 8 
int3 = 9 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
int0 = 11                                                               # STEP 25
ACTION: int0 = 11 
int0 = 20 : <type 'int'>
=> int0 = 11 : <type 'int'>
==================================================
int2 = 12                                                               # STEP 26
ACTION: int2 = 12 
int2 = 15 : <type 'int'>
=> int2 = 12 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 27
ACTION: avl1.delete(int0) 
int0 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1048c9a28> : <type 'instance'>
avl_REF1 = set([16, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.delete(int3)                                                       # STEP 28
ACTION: avl1.delete(int3) 
int3 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1048c9a28> : <type 'instance'>
avl_REF1 = set([16, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.delete(int3)                                                       # STEP 29
ACTION: avl1.delete(int3) 
int3 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1048c9a28> : <type 'instance'>
avl_REF1 = set([16, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
result = avl1.inorder()                                                 # STEP 30
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1048c9a28> : <type 'instance'>
avl_REF1 = set([16, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int3 = 9                                                                # STEP 31
ACTION: int3 = 9 
int3 = 8 : <type 'int'>
=> int3 = 9 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 32
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x1048c9a28> : <type 'instance'>
avl_REF1 = set([16, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.insert(int0)                                                       # STEP 33
ACTION: avl1.insert(int0) 
int0 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1048c9a28> : <type 'instance'>
avl_REF1 = set([16, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([16, 11, 20]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 34
ACTION: avl1.delete(int1) 
int1 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1048c9a28> : <type 'instance'>
avl_REF1 = set([16, 11, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
result = avl1.inorder()                                                 # STEP 35
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1048c9a28> : <type 'instance'>
avl_REF1 = set([16, 11, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int0 = 13                                                               # STEP 36
ACTION: int0 = 13 
int0 = 11 : <type 'int'>
=> int0 = 13 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 37
ACTION: avl1.insert(int3) 
int3 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1048c9a28> : <type 'instance'>
avl_REF1 = set([16, 11, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([16, 9, 11, 20]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 38
ACTION: avl1.delete(int3) 
int3 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1048c9a28> : <type 'instance'>
avl_REF1 = set([16, 9, 11, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([16, 11, 20]) : <type 'set'>
==================================================
int3 = 3                                                                # STEP 39
ACTION: int3 = 3 
int3 = 9 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 40
ACTION: avl1.insert(int0) 
int0 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1048c9a28> : <type 'instance'>
avl_REF1 = set([16, 11, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([16, 11, 20, 13]) : <type 'set'>
==================================================
int1 = 4                                                                # STEP 41
ACTION: int1 = 4 
int1 = 13 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 42
ACTION: avl1.delete(int2) 
int2 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1048c9a28> : <type 'instance'>
avl_REF1 = set([16, 11, 20, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int0 = 6                                                                # STEP 43
ACTION: int0 = 6 
int0 = 13 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
int2 = 17                                                               # STEP 44
ACTION: int2 = 17 
int2 = 12 : <type 'int'>
=> int2 = 17 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 45
ACTION: avl1.insert(int3) 
int3 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1048c9a28> : <type 'instance'>
avl_REF1 = set([16, 11, 20, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([16, 3, 11, 20, 13]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 46
ACTION: avl1.delete(int2) 
int2 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1048c9a28> : <type 'instance'>
avl_REF1 = set([16, 3, 11, 20, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int3 = 9                                                                # STEP 47
ACTION: int3 = 9 
int3 = 3 : <type 'int'>
=> int3 = 9 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 48
ACTION: avl1.insert(int2) 
int2 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1048c9a28> : <type 'instance'>
avl_REF1 = set([16, 3, 11, 20, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([3, 11, 13, 16, 17, 20]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 49
ACTION: avl1.insert(int0) 
int0 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1048c9a28> : <type 'instance'>
avl_REF1 = set([3, 11, 13, 16, 17, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([3, 6, 11, 13, 16, 17, 20]) : <type 'set'>
==================================================
int0 = 18                                                               # STEP 50
ACTION: int0 = 18 
int0 = 6 : <type 'int'>
=> int0 = 18 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 51
ACTION: avl1.insert(int0) 
int0 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1048c9a28> : <type 'instance'>
avl_REF1 = set([3, 6, 11, 13, 16, 17, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([3, 6, 11, 13, 16, 17, 18, 20]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 52
ACTION: avl1.delete(int1) 
int1 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1048c9a28> : <type 'instance'>
avl_REF1 = set([3, 6, 11, 13, 16, 17, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int0 = 15                                                               # STEP 53
ACTION: int0 = 15 
int0 = 18 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 54
ACTION: avl1.insert(int0) 
int0 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1048c9a28> : <type 'instance'>
avl_REF1 = set([3, 6, 11, 13, 16, 17, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([3, 6, 11, 13, 15, 16, 17, 18, 20]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 55
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1048c9a28> : <type 'instance'>
avl_REF1 = set([3, 6, 11, 13, 15, 16, 17, 18, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.delete(int0)                                                       # STEP 56
ACTION: avl1.delete(int0) 
int0 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1048c9a28> : <type 'instance'>
avl_REF1 = set([3, 6, 11, 13, 15, 16, 17, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([3, 6, 11, 13, 16, 17, 18, 20]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 57
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1048c9a28> : <type 'instance'>
avl_REF1 = set([3, 6, 11, 13, 16, 17, 18, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.display()                                                          # STEP 58
ACTION: avl1.display() 
avl1 = <avl.AVLTree instance at 0x1048c9a28> : <type 'instance'>
avl_REF1 = set([3, 6, 11, 13, 16, 17, 18, 20]) : <type 'set'>
  16 [3:1]
-- < 11 [2:1]
---- < 3 [1:-1]
------ > 6 [0:0] L
---- > 13 [0:0] L
-- > 18 [1:0]
---- < 17 [0:0] L
---- > 20 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([3, 6, 11, 13, 16, 17, 18, 20])
==================================================
int2 = 1                                                                # STEP 59
ACTION: int2 = 1 
int2 = 17 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
avl1.display()                                                          # STEP 60
ACTION: avl1.display() 
avl1 = <avl.AVLTree instance at 0x1048c9a28> : <type 'instance'>
avl_REF1 = set([3, 6, 11, 13, 16, 17, 18, 20]) : <type 'set'>
  16 [3:1]
-- < 11 [2:1]
---- < 3 [1:-1]
------ > 6 [0:0] L
---- > 13 [0:0] L
-- > 18 [1:0]
---- < 17 [0:0] L
---- > 20 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([3, 6, 11, 13, 16, 17, 18, 20])
==================================================
result = avl1.inorder()                                                 # STEP 61
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1048c9a28> : <type 'instance'>
avl_REF1 = set([3, 6, 11, 13, 16, 17, 18, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int1)                                                       # STEP 62
ACTION: avl1.insert(int1) 
int1 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1048c9a28> : <type 'instance'>
avl_REF1 = set([3, 6, 11, 13, 16, 17, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([3, 4, 6, 11, 13, 16, 17, 18, 20]) : <type 'set'>
==================================================
int0 = 20                                                               # STEP 63
ACTION: int0 = 20 
int0 = 15 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
result = avl1.find(int1)                                                # STEP 64
ACTION: result = avl1.find(int1) 
int1 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1048c9a28> : <type 'instance'>
avl_REF1 = set([3, 4, 6, 11, 13, 16, 17, 18, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl1.insert(int2)                                                       # STEP 65
ACTION: avl1.insert(int2) 
int2 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1048c9a28> : <type 'instance'>
avl_REF1 = set([3, 4, 6, 11, 13, 16, 17, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([1, 3, 4, 6, 11, 13, 16, 17, 18, 20]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 66
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1048c9a28> : <type 'instance'>
avl_REF1 = set([1, 3, 4, 6, 11, 13, 16, 17, 18, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.delete(int0)                                                       # STEP 67
ACTION: avl1.delete(int0) 
int0 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1048c9a28> : <type 'instance'>
avl_REF1 = set([1, 3, 4, 6, 11, 13, 16, 17, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([1, 3, 4, 6, 11, 13, 16, 17, 18]) : <type 'set'>
==================================================
avl1.display()                                                          # STEP 68
ACTION: avl1.display() 
avl1 = <avl.AVLTree instance at 0x1048c9a28> : <type 'instance'>
avl_REF1 = set([1, 3, 4, 6, 11, 13, 16, 17, 18]) : <type 'set'>
  16 [3:1]
-- < 4 [2:0]
---- < 3 [1:1]
------ < 1 [0:0] L
---- > 11 [1:0]
------ < 6 [0:0] L
------ > 13 [0:0] L
-- > 18 [1:1]
---- < 17 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([1, 3, 4, 6, 11, 13, 16, 17, 18])
==================================================
int0 = 16                                                               # STEP 69
ACTION: int0 = 16 
int0 = 20 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
int1 = 16                                                               # STEP 70
ACTION: int1 = 16 
int1 = 4 : <type 'int'>
=> int1 = 16 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 71
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x1048c9a28> : <type 'instance'>
avl_REF1 = set([1, 3, 4, 6, 11, 13, 16, 17, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
int2 = 3                                                                # STEP 72
ACTION: int2 = 3 
int2 = 1 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
avl1.display()                                                          # STEP 73
ACTION: avl1.display() 
avl1 = <avl.AVLTree instance at 0x1048c9a28> : <type 'instance'>
avl_REF1 = set([1, 3, 4, 6, 11, 13, 16, 17, 18]) : <type 'set'>
  16 [3:1]
-- < 4 [2:0]
---- < 3 [1:1]
------ < 1 [0:0] L
---- > 11 [1:0]
------ < 6 [0:0] L
------ > 13 [0:0] L
-- > 18 [1:1]
---- < 17 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([1, 3, 4, 6, 11, 13, 16, 17, 18])
==================================================
result = avl1.inorder()                                                 # STEP 74
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1048c9a28> : <type 'instance'>
avl_REF1 = set([1, 3, 4, 6, 11, 13, 16, 17, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.display()                                                          # STEP 75
ACTION: avl1.display() 
avl1 = <avl.AVLTree instance at 0x1048c9a28> : <type 'instance'>
avl_REF1 = set([1, 3, 4, 6, 11, 13, 16, 17, 18]) : <type 'set'>
  16 [3:1]
-- < 4 [2:0]
---- < 3 [1:1]
------ < 1 [0:0] L
---- > 11 [1:0]
------ < 6 [0:0] L
------ > 13 [0:0] L
-- > 18 [1:1]
---- < 17 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([1, 3, 4, 6, 11, 13, 16, 17, 18])
==================================================
result = avl1.find(int0)                                                # STEP 76
ACTION: result = avl1.find(int0) 
int0 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1048c9a28> : <type 'instance'>
avl_REF1 = set([1, 3, 4, 6, 11, 13, 16, 17, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl1.delete(int3)                                                       # STEP 77
ACTION: avl1.delete(int3) 
int3 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1048c9a28> : <type 'instance'>
avl_REF1 = set([1, 3, 4, 6, 11, 13, 16, 17, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.insert(int2)                                                       # STEP 78
ACTION: avl1.insert(int2) 
int2 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1048c9a28> : <type 'instance'>
avl_REF1 = set([1, 3, 4, 6, 11, 13, 16, 17, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
avl1.display()                                                          # STEP 79
ACTION: avl1.display() 
avl1 = <avl.AVLTree instance at 0x1048c9a28> : <type 'instance'>
avl_REF1 = set([1, 3, 4, 6, 11, 13, 16, 17, 18]) : <type 'set'>
  16 [3:1]
-- < 4 [2:0]
---- < 3 [1:1]
------ < 1 [0:0] L
---- > 11 [1:0]
------ < 6 [0:0] L
------ > 13 [0:0] L
-- > 18 [1:1]
---- < 17 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([1, 3, 4, 6, 11, 13, 16, 17, 18])
==================================================
avl1.delete(int0)                                                       # STEP 80
ACTION: avl1.delete(int0) 
int0 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1048c9a28> : <type 'instance'>
avl_REF1 = set([1, 3, 4, 6, 11, 13, 16, 17, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([1, 3, 4, 6, 11, 13, 17, 18]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10587cf38>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
  11 [3:1]
-- < 7 [2:1]
---- < 6 [1:1]
------ < 1 [0:0] L
---- > 9 [0:0] L
-- > 17 [1:-1]
---- > 18 [0:0] L
set([1, 6, 7, 9, 11, 17, 18])
  11 [3:1]
-- < 7 [2:1]
---- < 6 [1:1]
------ < 1 [0:0] L
---- > 9 [0:0] L
-- > 17 [1:-1]
---- > 18 [0:0] L
set([1, 6, 7, 9, 11, 17, 18])
  11 [3:-1]
-- < 7 [1:0]
---- < 1 [0:0] L
---- > 9 [0:0] L
-- > 18 [2:1]
---- < 17 [1:1]
------ < 13 [0:0] L
---- > 20 [0:0] L
set([1, 7, 9, 11, 13, 17, 18, 20])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104ab65f0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
Original test has 65 steps

SAVING TEST AS failure.99851.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 6                                                                 # STEP 0
ACTION: int1 = 6 
int1 = None : <type 'NoneType'>
=> int1 = 6 : <type 'int'>
==================================================
int3 = 20                                                                # STEP 1
ACTION: int3 = 20 
int3 = None : <type 'NoneType'>
=> int3 = 20 : <type 'int'>
==================================================
int2 = 6                                                                 # STEP 2
ACTION: int2 = 6 
int2 = None : <type 'NoneType'>
=> int2 = 6 : <type 'int'>
==================================================
int0 = 16                                                                # STEP 3
ACTION: int0 = 16 
int0 = None : <type 'NoneType'>
=> int0 = 16 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 4
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x104ab6c68> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
result = avl0.find(int0)                                                 # STEP 5
ACTION: result = avl0.find(int0) 
int0 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ab6c68> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
result = avl0.inorder()                                                  # STEP 6
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104ab6c68> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.delete(int0)                                                        # STEP 7
ACTION: avl0.delete(int0) 
int0 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ab6c68> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.insert(int1)                                                        # STEP 8
ACTION: avl0.insert(int1) 
int1 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ab6c68> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([6]) : <type 'set'>
==================================================
avl0.delete(int3)                                                        # STEP 9
ACTION: avl0.delete(int3) 
int3 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ab6c68> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int1 = 17                                                               # STEP 10
ACTION: int1 = 17 
int1 = 6 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 11
ACTION: avl0.delete(int1) 
int1 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ab6c68> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int1 = 14                                                               # STEP 12
ACTION: int1 = 14 
int1 = 17 : <type 'int'>
=> int1 = 14 : <type 'int'>
==================================================
int0 = 2                                                                # STEP 13
ACTION: int0 = 2 
int0 = 16 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 14
ACTION: avl0.delete(int0) 
int0 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ab6c68> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0 == avl0                                                            # STEP 15
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x104ab6c68> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl0.delete(int0)                                                       # STEP 16
ACTION: avl0.delete(int0) 
int0 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ab6c68> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int3 = 4                                                                # STEP 17
ACTION: int3 = 4 
int3 = 20 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
int0 = 11                                                               # STEP 18
ACTION: int0 = 11 
int0 = 2 : <type 'int'>
=> int0 = 11 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 19
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104ab6c68> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.delete(int2)                                                       # STEP 20
ACTION: avl0.delete(int2) 
int2 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ab6c68> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 21
ACTION: avl0 = avl.AVLTree() 
avl0 = <avl.AVLTree instance at 0x104ab6c68> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
=> avl0 = <avl.AVLTree instance at 0x104e7e8c0> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
==================================================
int2 = 7                                                                # STEP 22
ACTION: int2 = 7 
int2 = 6 : <type 'int'>
=> int2 = 7 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 23
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104e7e8c0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.delete(int2)                                                       # STEP 24
ACTION: avl0.delete(int2) 
int2 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e7e8c0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.insert(int0)                                                       # STEP 25
ACTION: avl0.insert(int0) 
int0 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e7e8c0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([11]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 26
ACTION: avl0.delete(int1) 
int1 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e7e8c0> : <type 'instance'>
avl_REF0 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int2 = 16                                                               # STEP 27
ACTION: int2 = 16 
int2 = 7 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 28
ACTION: avl0.delete(int3) 
int3 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e7e8c0> : <type 'instance'>
avl_REF0 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.insert(int1)                                                       # STEP 29
ACTION: avl0.insert(int1) 
int1 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e7e8c0> : <type 'instance'>
avl_REF0 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([11, 14]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 30
ACTION: avl0.insert(int3) 
int3 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e7e8c0> : <type 'instance'>
avl_REF0 = set([11, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([11, 4, 14]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 31
ACTION: avl0.insert(int1) 
int1 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e7e8c0> : <type 'instance'>
avl_REF0 = set([11, 4, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
result = avl0.find(int2)                                                # STEP 32
ACTION: result = avl0.find(int2) 
int2 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e7e8c0> : <type 'instance'>
avl_REF0 = set([11, 4, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl0.delete(int0)                                                       # STEP 33
ACTION: avl0.delete(int0) 
int0 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e7e8c0> : <type 'instance'>
avl_REF0 = set([11, 4, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([4, 14]) : <type 'set'>
==================================================
int1 = 16                                                               # STEP 34
ACTION: int1 = 16 
int1 = 14 : <type 'int'>
=> int1 = 16 : <type 'int'>
==================================================
avl0 == avl0                                                            # STEP 35
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x104e7e8c0> : <type 'instance'>
avl_REF0 = set([4, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
int0 = 11                                                               # STEP 36
ACTION: int0 = 11 
int0 = 11 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 37
ACTION: avl0.delete(int0) 
int0 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e7e8c0> : <type 'instance'>
avl_REF0 = set([4, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
result = avl0.find(int2)                                                # STEP 38
ACTION: result = avl0.find(int2) 
int2 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e7e8c0> : <type 'instance'>
avl_REF0 = set([4, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl0.delete(int1)                                                       # STEP 39
ACTION: avl0.delete(int1) 
int1 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e7e8c0> : <type 'instance'>
avl_REF0 = set([4, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.insert(int2)                                                       # STEP 40
ACTION: avl0.insert(int2) 
int2 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e7e8c0> : <type 'instance'>
avl_REF0 = set([4, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([16, 4, 14]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 41
ACTION: avl0.insert(int2) 
int2 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e7e8c0> : <type 'instance'>
avl_REF0 = set([16, 4, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl0.delete(int0)                                                       # STEP 42
ACTION: avl0.delete(int0) 
int0 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e7e8c0> : <type 'instance'>
avl_REF0 = set([16, 4, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.delete(int3)                                                       # STEP 43
ACTION: avl0.delete(int3) 
int3 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e7e8c0> : <type 'instance'>
avl_REF0 = set([16, 4, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([16, 14]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 44
ACTION: avl0.delete(int2) 
int2 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e7e8c0> : <type 'instance'>
avl_REF0 = set([16, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([14]) : <type 'set'>
==================================================
int0 = 10                                                               # STEP 45
ACTION: int0 = 10 
int0 = 11 : <type 'int'>
=> int0 = 10 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 46
ACTION: avl0.delete(int3) 
int3 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e7e8c0> : <type 'instance'>
avl_REF0 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.delete(int1)                                                       # STEP 47
ACTION: avl0.delete(int1) 
int1 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e7e8c0> : <type 'instance'>
avl_REF0 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
result = avl0.inorder()                                                 # STEP 48
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104e7e8c0> : <type 'instance'>
avl_REF0 = set([14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int0)                                                       # STEP 49
ACTION: avl0.insert(int0) 
int0 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e7e8c0> : <type 'instance'>
avl_REF0 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([10, 14]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 50
ACTION: avl0.insert(int3) 
int3 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e7e8c0> : <type 'instance'>
avl_REF0 = set([10, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([10, 4, 14]) : <type 'set'>
==================================================
int3 = 7                                                                # STEP 51
ACTION: int3 = 7 
int3 = 4 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 52
ACTION: avl0.delete(int3) 
int3 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e7e8c0> : <type 'instance'>
avl_REF0 = set([10, 4, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.insert(int2)                                                       # STEP 53
ACTION: avl0.insert(int2) 
int2 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e7e8c0> : <type 'instance'>
avl_REF0 = set([10, 4, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([16, 10, 4, 14]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 54
ACTION: avl0.delete(int1) 
int1 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e7e8c0> : <type 'instance'>
avl_REF0 = set([16, 10, 4, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([10, 4, 14]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 55
ACTION: avl0.delete(int0) 
int0 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e7e8c0> : <type 'instance'>
avl_REF0 = set([10, 4, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([4, 14]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 56
ACTION: avl0.insert(int2) 
int2 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e7e8c0> : <type 'instance'>
avl_REF0 = set([4, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([16, 4, 14]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 57
ACTION: avl0.insert(int0) 
int0 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e7e8c0> : <type 'instance'>
avl_REF0 = set([16, 4, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([16, 10, 4, 14]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 58
ACTION: avl0.insert(int3) 
int3 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e7e8c0> : <type 'instance'>
avl_REF0 = set([16, 10, 4, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([4, 7, 10, 14, 16]) : <type 'set'>
==================================================
int3 = 13                                                               # STEP 59
ACTION: int3 = 13 
int3 = 7 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 60
ACTION: avl0.insert(int1) 
int1 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e7e8c0> : <type 'instance'>
avl_REF0 = set([4, 7, 10, 14, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
result = avl0.inorder()                                                 # STEP 61
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104e7e8c0> : <type 'instance'>
avl_REF0 = set([4, 7, 10, 14, 16]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int0)                                                       # STEP 62
ACTION: avl0.insert(int0) 
int0 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e7e8c0> : <type 'instance'>
avl_REF0 = set([4, 7, 10, 14, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
avl0.insert(int2)                                                       # STEP 63
ACTION: avl0.insert(int2) 
int2 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e7e8c0> : <type 'instance'>
avl_REF0 = set([4, 7, 10, 14, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl0.delete(int1)                                                       # STEP 64
ACTION: avl0.delete(int1) 
int1 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e7e8c0> : <type 'instance'>
avl_REF0 = set([4, 7, 10, 14, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([4, 7, 10, 14]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104e5fc20>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
TEST #4 STEP #0 (0:00:31.061698) Fri Apr 28 05:07:11 2017 [ 159 stmts 210 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104e7f3b0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
Original test has 67 steps

SAVING TEST AS failure.99851.test.2
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 2                                                                 # STEP 0
ACTION: int1 = 2 
int1 = None : <type 'NoneType'>
=> int1 = 2 : <type 'int'>
==================================================
int3 = 11                                                                # STEP 1
ACTION: int3 = 11 
int3 = None : <type 'NoneType'>
=> int3 = 11 : <type 'int'>
==================================================
int2 = 1                                                                 # STEP 2
ACTION: int2 = 1 
int2 = None : <type 'NoneType'>
=> int2 = 1 : <type 'int'>
==================================================
int0 = 5                                                                 # STEP 3
ACTION: int0 = 5 
int0 = None : <type 'NoneType'>
=> int0 = 5 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x104e7f7e8> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.delete(int0)                                                        # STEP 5
ACTION: avl1.delete(int0) 
int0 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e7f7e8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
result = avl1.find(int3)                                                 # STEP 6
ACTION: result = avl1.find(int3) 
int3 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e7f7e8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl1.insert(int0)                                                        # STEP 7
ACTION: avl1.insert(int0) 
int0 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e7f7e8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([5]) : <type 'set'>
==================================================
int0 = 8                                                                 # STEP 8
ACTION: int0 = 8 
int0 = 5 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
avl1.insert(int2)                                                        # STEP 9
ACTION: avl1.insert(int2) 
int2 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e7f7e8> : <type 'instance'>
avl_REF1 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([1, 5]) : <type 'set'>
==================================================
int2 = 15                                                               # STEP 10
ACTION: int2 = 15 
int2 = 1 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 11
ACTION: avl1.delete(int1) 
int1 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e7f7e8> : <type 'instance'>
avl_REF1 = set([1, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
result = avl1.inorder()                                                 # STEP 12
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104e7f7e8> : <type 'instance'>
avl_REF1 = set([1, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int1)                                                       # STEP 13
ACTION: avl1.insert(int1) 
int1 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e7f7e8> : <type 'instance'>
avl_REF1 = set([1, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([1, 2, 5]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 14
ACTION: avl1.delete(int0) 
int0 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e7f7e8> : <type 'instance'>
avl_REF1 = set([1, 2, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.insert(int3)                                                       # STEP 15
ACTION: avl1.insert(int3) 
int3 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e7f7e8> : <type 'instance'>
avl_REF1 = set([1, 2, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([1, 2, 11, 5]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 16
ACTION: avl1.delete(int1) 
int1 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e7f7e8> : <type 'instance'>
avl_REF1 = set([1, 2, 11, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([1, 11, 5]) : <type 'set'>
==================================================
result = avl1.find(int1)                                                # STEP 17
ACTION: result = avl1.find(int1) 
int1 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e7f7e8> : <type 'instance'>
avl_REF1 = set([1, 11, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl1.delete(int3)                                                       # STEP 18
ACTION: avl1.delete(int3) 
int3 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e7f7e8> : <type 'instance'>
avl_REF1 = set([1, 11, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([1, 5]) : <type 'set'>
==================================================
int3 = 10                                                               # STEP 19
ACTION: int3 = 10 
int3 = 11 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
int0 = 12                                                               # STEP 20
ACTION: int0 = 12 
int0 = 8 : <type 'int'>
=> int0 = 12 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 21
ACTION: avl1.insert(int2) 
int2 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e7f7e8> : <type 'instance'>
avl_REF1 = set([1, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([1, 5, 15]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 22
ACTION: avl1.delete(int3) 
int3 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e7f7e8> : <type 'instance'>
avl_REF1 = set([1, 5, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.insert(int3)                                                       # STEP 23
ACTION: avl1.insert(int3) 
int3 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e7f7e8> : <type 'instance'>
avl_REF1 = set([1, 5, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([1, 10, 5, 15]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 24
ACTION: avl1.delete(int1) 
int1 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e7f7e8> : <type 'instance'>
avl_REF1 = set([1, 10, 5, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.insert(int2)                                                       # STEP 25
ACTION: avl1.insert(int2) 
int2 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e7f7e8> : <type 'instance'>
avl_REF1 = set([1, 10, 5, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
result = avl1.find(int1)                                                # STEP 26
ACTION: result = avl1.find(int1) 
int1 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e7f7e8> : <type 'instance'>
avl_REF1 = set([1, 10, 5, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl1.delete(int1)                                                       # STEP 27
ACTION: avl1.delete(int1) 
int1 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e7f7e8> : <type 'instance'>
avl_REF1 = set([1, 10, 5, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int1 = 11                                                               # STEP 28
ACTION: int1 = 11 
int1 = 2 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 29
ACTION: avl1.insert(int0) 
int0 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e7f7e8> : <type 'instance'>
avl_REF1 = set([1, 10, 5, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([1, 5, 10, 12, 15]) : <type 'set'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 30
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x104e4ef80> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int3 = 16                                                               # STEP 31
ACTION: int3 = 16 
int3 = 10 : <type 'int'>
=> int3 = 16 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 32
ACTION: avl0.insert(int2) 
int2 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e4ef80> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([15]) : <type 'set'>
==================================================
int0 = 12                                                               # STEP 33
ACTION: int0 = 12 
int0 = 12 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 34
ACTION: avl0.insert(int3) 
int3 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e4ef80> : <type 'instance'>
avl_REF0 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([16, 15]) : <type 'set'>
==================================================
result = avl0.find(int0)                                                # STEP 35
ACTION: result = avl0.find(int0) 
int0 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e4ef80> : <type 'instance'>
avl_REF0 = set([16, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
avl0 == avl1                                                            # STEP 36
ACTION: avl0 == avl1 
avl0 = <avl.AVLTree instance at 0x104e4ef80> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x104e7f7e8> : <type 'instance'>
avl_REF0 = set([16, 15]) : <type 'set'>
avl_REF1 = set([1, 5, 10, 12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF1 
==================================================
avl1.delete(int0)                                                       # STEP 37
ACTION: avl1.delete(int0) 
int0 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e7f7e8> : <type 'instance'>
avl_REF1 = set([1, 5, 10, 12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([1, 5, 10, 15]) : <type 'set'>
==================================================
int2 = 11                                                               # STEP 38
ACTION: int2 = 11 
int2 = 15 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 39
ACTION: avl1.delete(int0) 
int0 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e7f7e8> : <type 'instance'>
avl_REF1 = set([1, 5, 10, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl0.insert(int2)                                                       # STEP 40
ACTION: avl0.insert(int2) 
int2 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e4ef80> : <type 'instance'>
avl_REF0 = set([16, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([16, 11, 15]) : <type 'set'>
==================================================
int0 = 19                                                               # STEP 41
ACTION: int0 = 19 
int0 = 12 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 42
ACTION: avl0.delete(int0) 
int0 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e4ef80> : <type 'instance'>
avl_REF0 = set([16, 11, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl2 = avl.AVLTree()                                                    # STEP 43
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x104e6c320> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 44
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104e7f7e8> : <type 'instance'>
avl_REF1 = set([1, 5, 10, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int0 = 8                                                                # STEP 45
ACTION: int0 = 8 
int0 = 19 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 46
ACTION: avl1.insert(int2) 
int2 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e7f7e8> : <type 'instance'>
avl_REF1 = set([1, 5, 10, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([1, 5, 10, 11, 15]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 47
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104e7f7e8> : <type 'instance'>
avl_REF1 = set([1, 5, 10, 11, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1 = avl.AVLTree()                                                    # STEP 48
ACTION: avl1 = avl.AVLTree() 
avl1 = <avl.AVLTree instance at 0x104e7f7e8> : <type 'instance'>
avl_REF1 = set([1, 5, 10, 11, 15]) : <type 'set'>
=> avl1 = <avl.AVLTree instance at 0x104e75170> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 49
ACTION: avl1.insert(int0) 
int0 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e75170> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([8]) : <type 'set'>
==================================================
result = avl0.find(int0)                                                # STEP 50
ACTION: result = avl0.find(int0) 
int0 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e4ef80> : <type 'instance'>
avl_REF0 = set([16, 11, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
avl2.insert(int1)                                                       # STEP 51
ACTION: avl2.insert(int1) 
int1 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e6c320> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([11]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 52
ACTION: avl1.delete(int1) 
int1 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e75170> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
result = avl1.inorder()                                                 # STEP 53
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104e75170> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int1)                                                       # STEP 54
ACTION: avl1.insert(int1) 
int1 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e75170> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([8, 11]) : <type 'set'>
==================================================
int1 = 7                                                                # STEP 55
ACTION: int1 = 7 
int1 = 11 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 56
ACTION: avl0.insert(int2) 
int2 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e4ef80> : <type 'instance'>
avl_REF0 = set([16, 11, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl0.delete(int0)                                                       # STEP 57
ACTION: avl0.delete(int0) 
int0 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e4ef80> : <type 'instance'>
avl_REF0 = set([16, 11, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int0 = 15                                                               # STEP 58
ACTION: int0 = 15 
int0 = 8 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 59
ACTION: avl2.delete(int3) 
int3 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e6c320> : <type 'instance'>
avl_REF2 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl0.insert(int0)                                                       # STEP 60
ACTION: avl0.insert(int0) 
int0 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e4ef80> : <type 'instance'>
avl_REF0 = set([16, 11, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
result = avl1.find(int1)                                                # STEP 61
ACTION: result = avl1.find(int1) 
int1 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e75170> : <type 'instance'>
avl_REF1 = set([8, 11]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl0.insert(int3)                                                       # STEP 62
ACTION: avl0.insert(int3) 
int3 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e4ef80> : <type 'instance'>
avl_REF0 = set([16, 11, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
avl1.delete(int2)                                                       # STEP 63
ACTION: avl1.delete(int2) 
int2 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e75170> : <type 'instance'>
avl_REF1 = set([8, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([8]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 64
ACTION: avl1.insert(int0) 
int0 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e75170> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([8, 15]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 65
ACTION: avl0.insert(int1) 
int1 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e4ef80> : <type 'instance'>
avl_REF0 = set([16, 11, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([16, 7, 11, 15]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 66
ACTION: avl0.delete(int3) 
int3 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e4ef80> : <type 'instance'>
avl_REF0 = set([16, 7, 11, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([7, 11, 15]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104e54f80>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 3 DISTINCT FAILURES
  6 [2:0]
-- < 5 [1:1]
---- < 4 [0:0] L
-- > 14 [1:0]
---- < 10 [0:0] L
---- > 18 [0:0] L
set([4, 5, 6, 10, 14, 18])
  6 [3:-1]
-- < 5 [1:1]
---- < 4 [0:0] L
-- > 14 [2:1]
---- < 10 [1:1]
------ < 7 [0:0] L
---- > 18 [0:0] L
set([4, 5, 6, 7, 10, 14, 18])
  6 [3:-1]
-- < 5 [1:1]
---- < 4 [0:0] L
-- > 14 [2:1]
---- < 10 [1:1]
------ < 7 [0:0] L
---- > 18 [0:0] L
set([4, 5, 6, 7, 10, 14, 18])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104e51878>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 68 steps

SAVING TEST AS failure.99851.test.3
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
avl2 = avl.AVLTree()                                                     # STEP 0
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x104e837a0> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl2.inorder()                                                  # STEP 1
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104e837a0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl0 = avl.AVLTree()                                                     # STEP 2
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x104e54f38> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int0 = 18                                                                # STEP 3
ACTION: int0 = 18 
int0 = None : <type 'NoneType'>
=> int0 = 18 : <type 'int'>
==================================================
avl2.insert(int0)                                                        # STEP 4
ACTION: avl2.insert(int0) 
int0 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e837a0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([18]) : <type 'set'>
==================================================
int0 = 5                                                                 # STEP 5
ACTION: int0 = 5 
int0 = 18 : <type 'int'>
=> int0 = 5 : <type 'int'>
==================================================
result = avl0.inorder()                                                  # STEP 6
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104e54f38> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl1 = avl.AVLTree()                                                     # STEP 7
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x104e7d3b0> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl2.insert(int0)                                                        # STEP 8
ACTION: avl2.insert(int0) 
int0 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e837a0> : <type 'instance'>
avl_REF2 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([18, 5]) : <type 'set'>
==================================================
avl1.delete(int0)                                                        # STEP 9
ACTION: avl1.delete(int0) 
int0 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e7d3b0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl2.insert(int0)                                                       # STEP 10
ACTION: avl2.insert(int0) 
int0 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e837a0> : <type 'instance'>
avl_REF2 = set([18, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
int0 = 5                                                                # STEP 11
ACTION: int0 = 5 
int0 = 5 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 12
ACTION: avl0.delete(int0) 
int0 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e54f38> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.insert(int0)                                                       # STEP 13
ACTION: avl0.insert(int0) 
int0 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e54f38> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([5]) : <type 'set'>
==================================================
result = avl1.find(int0)                                                # STEP 14
ACTION: result = avl1.find(int0) 
int0 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e7d3b0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl0.delete(int0)                                                       # STEP 15
ACTION: avl0.delete(int0) 
int0 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e54f38> : <type 'instance'>
avl_REF0 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int1 = 14                                                               # STEP 16
ACTION: int1 = 14 
int1 = None : <type 'NoneType'>
=> int1 = 14 : <type 'int'>
==================================================
int0 = 6                                                                # STEP 17
ACTION: int0 = 6 
int0 = 5 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 18
ACTION: avl2.insert(int0) 
int0 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e837a0> : <type 'instance'>
avl_REF2 = set([18, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([18, 5, 6]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 19
ACTION: avl0.delete(int0) 
int0 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e54f38> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int0 = 10                                                               # STEP 20
ACTION: int0 = 10 
int0 = 6 : <type 'int'>
=> int0 = 10 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 21
ACTION: avl2.insert(int0) 
int0 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e837a0> : <type 'instance'>
avl_REF2 = set([18, 5, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([18, 10, 5, 6]) : <type 'set'>
==================================================
result = avl0.find(int0)                                                # STEP 22
ACTION: result = avl0.find(int0) 
int0 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e54f38> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
avl0.insert(int1)                                                       # STEP 23
ACTION: avl0.insert(int1) 
int1 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e54f38> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([14]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 24
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104e54f38> : <type 'instance'>
avl_REF0 = set([14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int0 = 4                                                                # STEP 25
ACTION: int0 = 4 
int0 = 10 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
result = avl2.find(int1)                                                # STEP 26
ACTION: result = avl2.find(int1) 
int1 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e837a0> : <type 'instance'>
avl_REF2 = set([18, 10, 5, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int2 = 7                                                                # STEP 27
ACTION: int2 = 7 
int2 = None : <type 'NoneType'>
=> int2 = 7 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 28
ACTION: avl2.delete(int0) 
int0 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e837a0> : <type 'instance'>
avl_REF2 = set([18, 10, 5, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int3 = 20                                                               # STEP 29
ACTION: int3 = 20 
int3 = None : <type 'NoneType'>
=> int3 = 20 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 30
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x104e7d3b0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl2.insert(int0)                                                       # STEP 31
ACTION: avl2.insert(int0) 
int0 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e837a0> : <type 'instance'>
avl_REF2 = set([18, 10, 5, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([18, 10, 4, 5, 6]) : <type 'set'>
==================================================
int1 = 4                                                                # STEP 32
ACTION: int1 = 4 
int1 = 14 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 33
ACTION: avl0.insert(int3) 
int3 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e54f38> : <type 'instance'>
avl_REF0 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([20, 14]) : <type 'set'>
==================================================
int0 = 14                                                               # STEP 34
ACTION: int0 = 14 
int0 = 4 : <type 'int'>
=> int0 = 14 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 35
ACTION: avl1.delete(int0) 
int0 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e7d3b0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl0.insert(int2)                                                       # STEP 36
ACTION: avl0.insert(int2) 
int2 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e54f38> : <type 'instance'>
avl_REF0 = set([20, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([20, 14, 7]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 37
ACTION: avl1.insert(int2) 
int2 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e7d3b0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([7]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 38
ACTION: avl1.insert(int0) 
int0 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e7d3b0> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([14, 7]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 39
ACTION: avl1.delete(int2) 
int2 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e7d3b0> : <type 'instance'>
avl_REF1 = set([14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([14]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 40
ACTION: avl1.insert(int1) 
int1 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e7d3b0> : <type 'instance'>
avl_REF1 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([4, 14]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 41
ACTION: avl2.insert(int0) 
int0 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e837a0> : <type 'instance'>
avl_REF2 = set([18, 10, 4, 5, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([4, 5, 6, 10, 14, 18]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 42
ACTION: avl0.delete(int3) 
int3 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e54f38> : <type 'instance'>
avl_REF0 = set([20, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([14, 7]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 43
ACTION: avl0.delete(int3) 
int3 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e54f38> : <type 'instance'>
avl_REF0 = set([14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl2.display()                                                          # STEP 44
ACTION: avl2.display() 
avl2 = <avl.AVLTree instance at 0x104e837a0> : <type 'instance'>
avl_REF2 = set([4, 5, 6, 10, 14, 18]) : <type 'set'>
  6 [2:0]
-- < 5 [1:1]
---- < 4 [0:0] L
-- > 14 [1:0]
---- < 10 [0:0] L
---- > 18 [0:0] L
REFERENCE ACTION: print(avl_REF2) 
set([4, 5, 6, 10, 14, 18])
==================================================
avl0.insert(int2)                                                       # STEP 45
ACTION: avl0.insert(int2) 
int2 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e54f38> : <type 'instance'>
avl_REF0 = set([14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl0.insert(int1)                                                       # STEP 46
ACTION: avl0.insert(int1) 
int1 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e54f38> : <type 'instance'>
avl_REF0 = set([14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([4, 14, 7]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 47
ACTION: avl1.delete(int1) 
int1 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e7d3b0> : <type 'instance'>
avl_REF1 = set([4, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([14]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 48
ACTION: avl2.insert(int2) 
int2 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e837a0> : <type 'instance'>
avl_REF2 = set([4, 5, 6, 10, 14, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([4, 5, 6, 7, 10, 14, 18]) : <type 'set'>
==================================================
int1 = 15                                                               # STEP 49
ACTION: int1 = 15 
int1 = 4 : <type 'int'>
=> int1 = 15 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 50
ACTION: avl0.delete(int1) 
int1 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e54f38> : <type 'instance'>
avl_REF0 = set([4, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl1.insert(int1)                                                       # STEP 51
ACTION: avl1.insert(int1) 
int1 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e7d3b0> : <type 'instance'>
avl_REF1 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([14, 15]) : <type 'set'>
==================================================
int2 = 6                                                                # STEP 52
ACTION: int2 = 6 
int2 = 7 : <type 'int'>
=> int2 = 6 : <type 'int'>
==================================================
result = avl2.find(int3)                                                # STEP 53
ACTION: result = avl2.find(int3) 
int3 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e837a0> : <type 'instance'>
avl_REF2 = set([4, 5, 6, 7, 10, 14, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl0.insert(int0)                                                       # STEP 54
ACTION: avl0.insert(int0) 
int0 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e54f38> : <type 'instance'>
avl_REF0 = set([4, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
result = avl0.inorder()                                                 # STEP 55
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104e54f38> : <type 'instance'>
avl_REF0 = set([4, 14, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl2.insert(int1)                                                       # STEP 56
ACTION: avl2.insert(int1) 
int1 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e837a0> : <type 'instance'>
avl_REF2 = set([4, 5, 6, 7, 10, 14, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([4, 5, 6, 7, 10, 14, 15, 18]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 57
ACTION: avl2.delete(int1) 
int1 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e837a0> : <type 'instance'>
avl_REF2 = set([4, 5, 6, 7, 10, 14, 15, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([4, 5, 6, 7, 10, 14, 18]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 58
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104e7d3b0> : <type 'instance'>
avl_REF1 = set([14, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
result = avl1.find(int2)                                                # STEP 59
ACTION: result = avl1.find(int2) 
int2 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e7d3b0> : <type 'instance'>
avl_REF1 = set([14, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl1.delete(int3)                                                       # STEP 60
ACTION: avl1.delete(int3) 
int3 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e7d3b0> : <type 'instance'>
avl_REF1 = set([14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.delete(int2)                                                       # STEP 61
ACTION: avl1.delete(int2) 
int2 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e7d3b0> : <type 'instance'>
avl_REF1 = set([14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.insert(int3)                                                       # STEP 62
ACTION: avl1.insert(int3) 
int3 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e7d3b0> : <type 'instance'>
avl_REF1 = set([14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([20, 14, 15]) : <type 'set'>
==================================================
int2 = 6                                                                # STEP 63
ACTION: int2 = 6 
int2 = 6 : <type 'int'>
==================================================
avl2.display()                                                          # STEP 64
ACTION: avl2.display() 
avl2 = <avl.AVLTree instance at 0x104e837a0> : <type 'instance'>
avl_REF2 = set([4, 5, 6, 7, 10, 14, 18]) : <type 'set'>
  6 [3:-1]
-- < 5 [1:1]
---- < 4 [0:0] L
-- > 14 [2:1]
---- < 10 [1:1]
------ < 7 [0:0] L
---- > 18 [0:0] L
REFERENCE ACTION: print(avl_REF2) 
set([4, 5, 6, 7, 10, 14, 18])
==================================================
avl2.display()                                                          # STEP 65
ACTION: avl2.display() 
avl2 = <avl.AVLTree instance at 0x104e837a0> : <type 'instance'>
avl_REF2 = set([4, 5, 6, 7, 10, 14, 18]) : <type 'set'>
  6 [3:-1]
-- < 5 [1:1]
---- < 4 [0:0] L
-- > 14 [2:1]
---- < 10 [1:1]
------ < 7 [0:0] L
---- > 18 [0:0] L
REFERENCE ACTION: print(avl_REF2) 
set([4, 5, 6, 7, 10, 14, 18])
==================================================
int1 = 9                                                                # STEP 66
ACTION: int1 = 9 
int1 = 15 : <type 'int'>
=> int1 = 9 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 67
ACTION: avl2.delete(int0) 
int0 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e837a0> : <type 'instance'>
avl_REF2 = set([4, 5, 6, 7, 10, 14, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([4, 5, 6, 7, 10, 18]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104ab1680>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 4 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 14
STOPPING TESTING DUE TO TIMEOUT
8.51713607058 PERCENT COVERED
60.184014082 TOTAL RUNTIME
7 EXECUTED
495 TOTAL TEST OPERATIONS
19.1198070049 TIME SPENT EXECUTING TEST OPERATIONS
0.0524663925171 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
19.2795829773 TIME SPENT CHECKING PROPERTIES
38.3993899822 TOTAL TIME SPENT RUNNING SUT
0.00401401519775 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
4 FAILED
0 REPEATS OF FAILURES
4 ACTUAL DISTINCT FAILURES

FAILURE 0
int0 = 16                                                                # STEP 0
int1 = 12                                                                # STEP 1
avl1 = avl.AVLTree()                                                     # STEP 2
int2 = 15                                                                # STEP 3
avl1.insert(int0)                                                        # STEP 4
avl1.delete(int2)                                                        # STEP 5
int0 = 20                                                                # STEP 6
avl1.delete(int1)                                                        # STEP 7
result = avl1.inorder()                                                  # STEP 8
result = avl1.find(int2)                                                 # STEP 9
avl1.insert(int1)                                                       # STEP 10
avl1.delete(int0)                                                       # STEP 11
avl1.delete(int1)                                                       # STEP 12
result = avl1.inorder()                                                 # STEP 13
result = avl1.find(int2)                                                # STEP 14
avl1.delete(int2)                                                       # STEP 15
avl1 == avl1                                                            # STEP 16
int3 = 9                                                                # STEP 17
avl1.insert(int3)                                                       # STEP 18
avl1.delete(int3)                                                       # STEP 19
int1 = 13                                                               # STEP 20
result = avl1.find(int3)                                                # STEP 21
avl1.delete(int3)                                                       # STEP 22
avl1.insert(int0)                                                       # STEP 23
int3 = 8                                                                # STEP 24
int0 = 11                                                               # STEP 25
int2 = 12                                                               # STEP 26
avl1.delete(int0)                                                       # STEP 27
avl1.delete(int3)                                                       # STEP 28
avl1.delete(int3)                                                       # STEP 29
result = avl1.inorder()                                                 # STEP 30
int3 = 9                                                                # STEP 31
avl1 == avl1                                                            # STEP 32
avl1.insert(int0)                                                       # STEP 33
avl1.delete(int1)                                                       # STEP 34
result = avl1.inorder()                                                 # STEP 35
int0 = 13                                                               # STEP 36
avl1.insert(int3)                                                       # STEP 37
avl1.delete(int3)                                                       # STEP 38
int3 = 3                                                                # STEP 39
avl1.insert(int0)                                                       # STEP 40
int1 = 4                                                                # STEP 41
avl1.delete(int2)                                                       # STEP 42
int0 = 6                                                                # STEP 43
int2 = 17                                                               # STEP 44
avl1.insert(int3)                                                       # STEP 45
avl1.delete(int2)                                                       # STEP 46
int3 = 9                                                                # STEP 47
avl1.insert(int2)                                                       # STEP 48
avl1.insert(int0)                                                       # STEP 49
int0 = 18                                                               # STEP 50
avl1.insert(int0)                                                       # STEP 51
avl1.delete(int1)                                                       # STEP 52
int0 = 15                                                               # STEP 53
avl1.insert(int0)                                                       # STEP 54
result = avl1.inorder()                                                 # STEP 55
avl1.delete(int0)                                                       # STEP 56
result = avl1.inorder()                                                 # STEP 57
avl1.display()                                                          # STEP 58
int2 = 1                                                                # STEP 59
avl1.display()                                                          # STEP 60
result = avl1.inorder()                                                 # STEP 61
avl1.insert(int1)                                                       # STEP 62
int0 = 20                                                               # STEP 63
result = avl1.find(int1)                                                # STEP 64
avl1.insert(int2)                                                       # STEP 65
result = avl1.inorder()                                                 # STEP 66
avl1.delete(int0)                                                       # STEP 67
avl1.display()                                                          # STEP 68
int0 = 16                                                               # STEP 69
int1 = 16                                                               # STEP 70
avl1 == avl1                                                            # STEP 71
int2 = 3                                                                # STEP 72
avl1.display()                                                          # STEP 73
result = avl1.inorder()                                                 # STEP 74
avl1.display()                                                          # STEP 75
result = avl1.find(int0)                                                # STEP 76
avl1.delete(int3)                                                       # STEP 77
avl1.insert(int2)                                                       # STEP 78
avl1.display()                                                          # STEP 79
avl1.delete(int0)                                                       # STEP 80
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10587cf38>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE 1
int1 = 6                                                                 # STEP 0
int3 = 20                                                                # STEP 1
int2 = 6                                                                 # STEP 2
int0 = 16                                                                # STEP 3
avl0 = avl.AVLTree()                                                     # STEP 4
result = avl0.find(int0)                                                 # STEP 5
result = avl0.inorder()                                                  # STEP 6
avl0.delete(int0)                                                        # STEP 7
avl0.insert(int1)                                                        # STEP 8
avl0.delete(int3)                                                        # STEP 9
int1 = 17                                                               # STEP 10
avl0.delete(int1)                                                       # STEP 11
int1 = 14                                                               # STEP 12
int0 = 2                                                                # STEP 13
avl0.delete(int0)                                                       # STEP 14
avl0 == avl0                                                            # STEP 15
avl0.delete(int0)                                                       # STEP 16
int3 = 4                                                                # STEP 17
int0 = 11                                                               # STEP 18
result = avl0.inorder()                                                 # STEP 19
avl0.delete(int2)                                                       # STEP 20
avl0 = avl.AVLTree()                                                    # STEP 21
int2 = 7                                                                # STEP 22
result = avl0.inorder()                                                 # STEP 23
avl0.delete(int2)                                                       # STEP 24
avl0.insert(int0)                                                       # STEP 25
avl0.delete(int1)                                                       # STEP 26
int2 = 16                                                               # STEP 27
avl0.delete(int3)                                                       # STEP 28
avl0.insert(int1)                                                       # STEP 29
avl0.insert(int3)                                                       # STEP 30
avl0.insert(int1)                                                       # STEP 31
result = avl0.find(int2)                                                # STEP 32
avl0.delete(int0)                                                       # STEP 33
int1 = 16                                                               # STEP 34
avl0 == avl0                                                            # STEP 35
int0 = 11                                                               # STEP 36
avl0.delete(int0)                                                       # STEP 37
result = avl0.find(int2)                                                # STEP 38
avl0.delete(int1)                                                       # STEP 39
avl0.insert(int2)                                                       # STEP 40
avl0.insert(int2)                                                       # STEP 41
avl0.delete(int0)                                                       # STEP 42
avl0.delete(int3)                                                       # STEP 43
avl0.delete(int2)                                                       # STEP 44
int0 = 10                                                               # STEP 45
avl0.delete(int3)                                                       # STEP 46
avl0.delete(int1)                                                       # STEP 47
result = avl0.inorder()                                                 # STEP 48
avl0.insert(int0)                                                       # STEP 49
avl0.insert(int3)                                                       # STEP 50
int3 = 7                                                                # STEP 51
avl0.delete(int3)                                                       # STEP 52
avl0.insert(int2)                                                       # STEP 53
avl0.delete(int1)                                                       # STEP 54
avl0.delete(int0)                                                       # STEP 55
avl0.insert(int2)                                                       # STEP 56
avl0.insert(int0)                                                       # STEP 57
avl0.insert(int3)                                                       # STEP 58
int3 = 13                                                               # STEP 59
avl0.insert(int1)                                                       # STEP 60
result = avl0.inorder()                                                 # STEP 61
avl0.insert(int0)                                                       # STEP 62
avl0.insert(int2)                                                       # STEP 63
avl0.delete(int1)                                                       # STEP 64
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104e5fc20>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE 2
int1 = 2                                                                 # STEP 0
int3 = 11                                                                # STEP 1
int2 = 1                                                                 # STEP 2
int0 = 5                                                                 # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
avl1.delete(int0)                                                        # STEP 5
result = avl1.find(int3)                                                 # STEP 6
avl1.insert(int0)                                                        # STEP 7
int0 = 8                                                                 # STEP 8
avl1.insert(int2)                                                        # STEP 9
int2 = 15                                                               # STEP 10
avl1.delete(int1)                                                       # STEP 11
result = avl1.inorder()                                                 # STEP 12
avl1.insert(int1)                                                       # STEP 13
avl1.delete(int0)                                                       # STEP 14
avl1.insert(int3)                                                       # STEP 15
avl1.delete(int1)                                                       # STEP 16
result = avl1.find(int1)                                                # STEP 17
avl1.delete(int3)                                                       # STEP 18
int3 = 10                                                               # STEP 19
int0 = 12                                                               # STEP 20
avl1.insert(int2)                                                       # STEP 21
avl1.delete(int3)                                                       # STEP 22
avl1.insert(int3)                                                       # STEP 23
avl1.delete(int1)                                                       # STEP 24
avl1.insert(int2)                                                       # STEP 25
result = avl1.find(int1)                                                # STEP 26
avl1.delete(int1)                                                       # STEP 27
int1 = 11                                                               # STEP 28
avl1.insert(int0)                                                       # STEP 29
avl0 = avl.AVLTree()                                                    # STEP 30
int3 = 16                                                               # STEP 31
avl0.insert(int2)                                                       # STEP 32
int0 = 12                                                               # STEP 33
avl0.insert(int3)                                                       # STEP 34
result = avl0.find(int0)                                                # STEP 35
avl0 == avl1                                                            # STEP 36
avl1.delete(int0)                                                       # STEP 37
int2 = 11                                                               # STEP 38
avl1.delete(int0)                                                       # STEP 39
avl0.insert(int2)                                                       # STEP 40
int0 = 19                                                               # STEP 41
avl0.delete(int0)                                                       # STEP 42
avl2 = avl.AVLTree()                                                    # STEP 43
result = avl1.inorder()                                                 # STEP 44
int0 = 8                                                                # STEP 45
avl1.insert(int2)                                                       # STEP 46
result = avl1.inorder()                                                 # STEP 47
avl1 = avl.AVLTree()                                                    # STEP 48
avl1.insert(int0)                                                       # STEP 49
result = avl0.find(int0)                                                # STEP 50
avl2.insert(int1)                                                       # STEP 51
avl1.delete(int1)                                                       # STEP 52
result = avl1.inorder()                                                 # STEP 53
avl1.insert(int1)                                                       # STEP 54
int1 = 7                                                                # STEP 55
avl0.insert(int2)                                                       # STEP 56
avl0.delete(int0)                                                       # STEP 57
int0 = 15                                                               # STEP 58
avl2.delete(int3)                                                       # STEP 59
avl0.insert(int0)                                                       # STEP 60
result = avl1.find(int1)                                                # STEP 61
avl0.insert(int3)                                                       # STEP 62
avl1.delete(int2)                                                       # STEP 63
avl1.insert(int0)                                                       # STEP 64
avl0.insert(int1)                                                       # STEP 65
avl0.delete(int3)                                                       # STEP 66
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104e54f80>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE 3
avl2 = avl.AVLTree()                                                     # STEP 0
result = avl2.inorder()                                                  # STEP 1
avl0 = avl.AVLTree()                                                     # STEP 2
int0 = 18                                                                # STEP 3
avl2.insert(int0)                                                        # STEP 4
int0 = 5                                                                 # STEP 5
result = avl0.inorder()                                                  # STEP 6
avl1 = avl.AVLTree()                                                     # STEP 7
avl2.insert(int0)                                                        # STEP 8
avl1.delete(int0)                                                        # STEP 9
avl2.insert(int0)                                                       # STEP 10
int0 = 5                                                                # STEP 11
avl0.delete(int0)                                                       # STEP 12
avl0.insert(int0)                                                       # STEP 13
result = avl1.find(int0)                                                # STEP 14
avl0.delete(int0)                                                       # STEP 15
int1 = 14                                                               # STEP 16
int0 = 6                                                                # STEP 17
avl2.insert(int0)                                                       # STEP 18
avl0.delete(int0)                                                       # STEP 19
int0 = 10                                                               # STEP 20
avl2.insert(int0)                                                       # STEP 21
result = avl0.find(int0)                                                # STEP 22
avl0.insert(int1)                                                       # STEP 23
result = avl0.inorder()                                                 # STEP 24
int0 = 4                                                                # STEP 25
result = avl2.find(int1)                                                # STEP 26
int2 = 7                                                                # STEP 27
avl2.delete(int0)                                                       # STEP 28
int3 = 20                                                               # STEP 29
avl1 == avl1                                                            # STEP 30
avl2.insert(int0)                                                       # STEP 31
int1 = 4                                                                # STEP 32
avl0.insert(int3)                                                       # STEP 33
int0 = 14                                                               # STEP 34
avl1.delete(int0)                                                       # STEP 35
avl0.insert(int2)                                                       # STEP 36
avl1.insert(int2)                                                       # STEP 37
avl1.insert(int0)                                                       # STEP 38
avl1.delete(int2)                                                       # STEP 39
avl1.insert(int1)                                                       # STEP 40
avl2.insert(int0)                                                       # STEP 41
avl0.delete(int3)                                                       # STEP 42
avl0.delete(int3)                                                       # STEP 43
avl2.display()                                                          # STEP 44
avl0.insert(int2)                                                       # STEP 45
avl0.insert(int1)                                                       # STEP 46
avl1.delete(int1)                                                       # STEP 47
avl2.insert(int2)                                                       # STEP 48
int1 = 15                                                               # STEP 49
avl0.delete(int1)                                                       # STEP 50
avl1.insert(int1)                                                       # STEP 51
int2 = 6                                                                # STEP 52
result = avl2.find(int3)                                                # STEP 53
avl0.insert(int0)                                                       # STEP 54
result = avl0.inorder()                                                 # STEP 55
avl2.insert(int1)                                                       # STEP 56
avl2.delete(int1)                                                       # STEP 57
result = avl1.inorder()                                                 # STEP 58
result = avl1.find(int2)                                                # STEP 59
avl1.delete(int3)                                                       # STEP 60
avl1.delete(int2)                                                       # STEP 61
avl1.insert(int3)                                                       # STEP 62
int2 = 6                                                                # STEP 63
avl2.display()                                                          # STEP 64
avl2.display()                                                          # STEP 65
int1 = 9                                                                # STEP 66
avl2.delete(int0)                                                       # STEP 67
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104ab1680>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
214 BRANCHES COVERED
161 STATEMENTS COVERED

Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.182.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  9 [3:-1]
-- < 2 [1:-1]
---- > 4 [0:0] L
-- > 17 [2:1]
---- < 10 [1:-1]
------ > 15 [0:0] L
---- > 19 [0:0] L
set([2, 4, 9, 10, 15, 17, 19])
  9 [3:-1]
-- < 2 [1:-1]
---- > 4 [0:0] L
-- > 17 [2:1]
---- < 15 [1:0]
------ < 10 [0:0] L
------ > 16 [0:0] L
---- > 19 [0:0] L
set([2, 4, 9, 10, 15, 16, 17, 19])
  9 [3:-1]
-- < 2 [1:-1]
---- > 4 [0:0] L
-- > 17 [2:1]
---- < 15 [1:0]
------ < 10 [0:0] L
------ > 16 [0:0] L
---- > 19 [0:0] L
set([2, 4, 9, 10, 15, 16, 17, 19])
  9 [2:0]
-- < 7 [1:1]
---- < 2 [0:0] L
-- > 17 [1:0]
---- < 10 [0:0] L
---- > 20 [0:0] L
set([2, 7, 9, 10, 17, 20])
  8 [2:0]
-- < 5 [1:1]
---- < 2 [0:0] L
-- > 14 [1:0]
---- < 13 [0:0] L
---- > 15 [0:0] L
set([2, 5, 8, 13, 14, 15])
  8 [2:0]
-- < 5 [1:1]
---- < 2 [0:0] L
-- > 13 [1:0]
---- < 10 [0:0] L
---- > 15 [0:0] L
set([2, 5, 8, 10, 13, 15])
  8 [2:0]
-- < 5 [1:1]
---- < 2 [0:0] L
-- > 13 [1:0]
---- < 10 [0:0] L
---- > 15 [0:0] L
set([2, 5, 8, 10, 13, 15])
  8 [2:0]
-- < 5 [1:1]
---- < 2 [0:0] L
-- > 13 [1:0]
---- < 10 [0:0] L
---- > 15 [0:0] L
set([2, 5, 8, 10, 13, 15])
TEST #4 STEP #88 (0:00:30.031910) Fri Apr 28 05:43:50 2017 [ 161 stmts 214 branches ]
  5 [2:0]
-- < 3 [1:0]
---- < 1 [0:0] L
---- > 4 [0:0] L
-- > 10 [1:-1]
---- > 13 [0:0] L
set([1, 3, 4, 5, 10, 13])
  5 [2:0]
-- < 3 [1:0]
---- < 1 [0:0] L
---- > 4 [0:0] L
-- > 10 [1:-1]
---- > 13 [0:0] L
set([1, 3, 4, 5, 10, 13])
  5 [2:0]
-- < 3 [1:0]
---- < 1 [0:0] L
---- > 4 [0:0] L
-- > 10 [1:-1]
---- > 13 [0:0] L
set([1, 3, 4, 5, 10, 13])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104b60050>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 51 steps

SAVING TEST AS failure.182.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
avl2 = avl.AVLTree()                                                     # STEP 0
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x104b5fcf8> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int1 = 19                                                                # STEP 1
ACTION: int1 = 19 
int1 = None : <type 'NoneType'>
=> int1 = 19 : <type 'int'>
==================================================
avl2.delete(int1)                                                        # STEP 2
ACTION: avl2.delete(int1) 
int1 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b5fcf8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int0 = 7                                                                 # STEP 3
ACTION: int0 = 7 
int0 = None : <type 'NoneType'>
=> int0 = 7 : <type 'int'>
==================================================
avl2.insert(int1)                                                        # STEP 4
ACTION: avl2.insert(int1) 
int1 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b5fcf8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([19]) : <type 'set'>
==================================================
avl2.insert(int1)                                                        # STEP 5
ACTION: avl2.insert(int1) 
int1 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b5fcf8> : <type 'instance'>
avl_REF2 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl2.delete(int1)                                                        # STEP 6
ACTION: avl2.delete(int1) 
int1 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b5fcf8> : <type 'instance'>
avl_REF2 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.delete(int1)                                                        # STEP 7
ACTION: avl2.delete(int1) 
int1 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b5fcf8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int0)                                                        # STEP 8
ACTION: avl2.insert(int0) 
int0 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b5fcf8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([7]) : <type 'set'>
==================================================
avl2.insert(int0)                                                        # STEP 9
ACTION: avl2.insert(int0) 
int0 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b5fcf8> : <type 'instance'>
avl_REF2 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl2.insert(int1)                                                       # STEP 10
ACTION: avl2.insert(int1) 
int1 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b5fcf8> : <type 'instance'>
avl_REF2 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([19, 7]) : <type 'set'>
==================================================
result = avl2.find(int1)                                                # STEP 11
ACTION: result = avl2.find(int1) 
int1 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b5fcf8> : <type 'instance'>
avl_REF2 = set([19, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl2.delete(int0)                                                       # STEP 12
ACTION: avl2.delete(int0) 
int0 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b5fcf8> : <type 'instance'>
avl_REF2 = set([19, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([19]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 13
ACTION: avl2.insert(int1) 
int1 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b5fcf8> : <type 'instance'>
avl_REF2 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
result = avl2.find(int1)                                                # STEP 14
ACTION: result = avl2.find(int1) 
int1 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b5fcf8> : <type 'instance'>
avl_REF2 = set([19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl2.insert(int0)                                                       # STEP 15
ACTION: avl2.insert(int0) 
int0 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b5fcf8> : <type 'instance'>
avl_REF2 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([19, 7]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 16
ACTION: avl2.delete(int0) 
int0 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b5fcf8> : <type 'instance'>
avl_REF2 = set([19, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([19]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 17
ACTION: avl2.insert(int1) 
int1 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b5fcf8> : <type 'instance'>
avl_REF2 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
int2 = 15                                                               # STEP 18
ACTION: int2 = 15 
int2 = None : <type 'NoneType'>
=> int2 = 15 : <type 'int'>
==================================================
result = avl2.find(int0)                                                # STEP 19
ACTION: result = avl2.find(int0) 
int0 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b5fcf8> : <type 'instance'>
avl_REF2 = set([19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
result = avl2.inorder()                                                 # STEP 20
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104b5fcf8> : <type 'instance'>
avl_REF2 = set([19]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int1)                                                       # STEP 21
ACTION: avl2.delete(int1) 
int1 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b5fcf8> : <type 'instance'>
avl_REF2 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int1 = 16                                                               # STEP 22
ACTION: int1 = 16 
int1 = 19 : <type 'int'>
=> int1 = 16 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 23
ACTION: avl2.insert(int2) 
int2 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b5fcf8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([15]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 24
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104b5fcf8> : <type 'instance'>
avl_REF2 = set([15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int2)                                                       # STEP 25
ACTION: avl2.delete(int2) 
int2 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b5fcf8> : <type 'instance'>
avl_REF2 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 26
ACTION: avl2.delete(int0) 
int0 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b5fcf8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.insert(int1)                                                       # STEP 27
ACTION: avl2.insert(int1) 
int1 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b5fcf8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([16]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 28
ACTION: avl2.insert(int1) 
int1 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b5fcf8> : <type 'instance'>
avl_REF2 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
result = avl2.find(int0)                                                # STEP 29
ACTION: result = avl2.find(int0) 
int0 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b5fcf8> : <type 'instance'>
avl_REF2 = set([16]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
result = avl2.inorder()                                                 # STEP 30
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104b5fcf8> : <type 'instance'>
avl_REF2 = set([16]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl2.inorder()                                                 # STEP 31
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104b5fcf8> : <type 'instance'>
avl_REF2 = set([16]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int2)                                                       # STEP 32
ACTION: avl2.delete(int2) 
int2 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b5fcf8> : <type 'instance'>
avl_REF2 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int0 = 6                                                                # STEP 33
ACTION: int0 = 6 
int0 = 7 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 34
ACTION: avl2 = avl.AVLTree() 
avl2 = <avl.AVLTree instance at 0x104b5fcf8> : <type 'instance'>
avl_REF2 = set([16]) : <type 'set'>
=> avl2 = <avl.AVLTree instance at 0x1049b2c68> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 35
ACTION: avl2.insert(int1) 
int1 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1049b2c68> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([16]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 36
ACTION: avl2.delete(int0) 
int0 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1049b2c68> : <type 'instance'>
avl_REF2 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.insert(int0)                                                       # STEP 37
ACTION: avl2.insert(int0) 
int0 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1049b2c68> : <type 'instance'>
avl_REF2 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([16, 6]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 38
ACTION: avl2.insert(int1) 
int1 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1049b2c68> : <type 'instance'>
avl_REF2 = set([16, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
int2 = 18                                                               # STEP 39
ACTION: int2 = 18 
int2 = 15 : <type 'int'>
=> int2 = 18 : <type 'int'>
==================================================
avl2 == avl2                                                            # STEP 40
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x1049b2c68> : <type 'instance'>
avl_REF2 = set([16, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
int3 = 1                                                                # STEP 41
ACTION: int3 = 1 
int3 = None : <type 'NoneType'>
=> int3 = 1 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 42
ACTION: avl2.insert(int1) 
int1 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1049b2c68> : <type 'instance'>
avl_REF2 = set([16, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
int1 = 15                                                               # STEP 43
ACTION: int1 = 15 
int1 = 16 : <type 'int'>
=> int1 = 15 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 44
ACTION: avl2.insert(int0) 
int0 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1049b2c68> : <type 'instance'>
avl_REF2 = set([16, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl2.insert(int3)                                                       # STEP 45
ACTION: avl2.insert(int3) 
int3 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1049b2c68> : <type 'instance'>
avl_REF2 = set([16, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([16, 1, 6]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 46
ACTION: avl2.insert(int0) 
int0 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1049b2c68> : <type 'instance'>
avl_REF2 = set([16, 1, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
result = avl2.inorder()                                                 # STEP 47
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x1049b2c68> : <type 'instance'>
avl_REF2 = set([16, 1, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int1)                                                       # STEP 48
ACTION: avl2.insert(int1) 
int1 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1049b2c68> : <type 'instance'>
avl_REF2 = set([16, 1, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([16, 1, 6, 15]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 49
ACTION: avl2.insert(int1) 
int1 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1049b2c68> : <type 'instance'>
avl_REF2 = set([16, 1, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl2.delete(int3)                                                       # STEP 50
ACTION: avl2.delete(int3) 
int3 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1049b2c68> : <type 'instance'>
avl_REF2 = set([16, 1, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([16, 6, 15]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104988908>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104d9dcb0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 88 steps

SAVING TEST AS failure.182.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
avl2 = avl.AVLTree()                                                     # STEP 0
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x104ee3e60> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int0 = 14                                                                # STEP 1
ACTION: int0 = 14 
int0 = None : <type 'NoneType'>
=> int0 = 14 : <type 'int'>
==================================================
avl2.insert(int0)                                                        # STEP 2
ACTION: avl2.insert(int0) 
int0 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ee3e60> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([14]) : <type 'set'>
==================================================
avl2.delete(int0)                                                        # STEP 3
ACTION: avl2.delete(int0) 
int0 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ee3e60> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int0)                                                        # STEP 4
ACTION: avl2.insert(int0) 
int0 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ee3e60> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([14]) : <type 'set'>
==================================================
int2 = 13                                                                # STEP 5
ACTION: int2 = 13 
int2 = None : <type 'NoneType'>
=> int2 = 13 : <type 'int'>
==================================================
avl2.insert(int2)                                                        # STEP 6
ACTION: avl2.insert(int2) 
int2 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ee3e60> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([13, 14]) : <type 'set'>
==================================================
int3 = 15                                                                # STEP 7
ACTION: int3 = 15 
int3 = None : <type 'NoneType'>
=> int3 = 15 : <type 'int'>
==================================================
int2 = 19                                                                # STEP 8
ACTION: int2 = 19 
int2 = 13 : <type 'int'>
=> int2 = 19 : <type 'int'>
==================================================
int0 = 4                                                                 # STEP 9
ACTION: int0 = 4 
int0 = 14 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
int1 = 15                                                               # STEP 10
ACTION: int1 = 15 
int1 = None : <type 'NoneType'>
=> int1 = 15 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 11
ACTION: avl2.delete(int2) 
int2 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ee3e60> : <type 'instance'>
avl_REF2 = set([13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
result = avl2.inorder()                                                 # STEP 12
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104ee3e60> : <type 'instance'>
avl_REF2 = set([13, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int2 = 1                                                                # STEP 13
ACTION: int2 = 1 
int2 = 19 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 14
ACTION: avl2.insert(int0) 
int0 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ee3e60> : <type 'instance'>
avl_REF2 = set([13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([4, 13, 14]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 15
ACTION: avl2.delete(int3) 
int3 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ee3e60> : <type 'instance'>
avl_REF2 = set([4, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.delete(int2)                                                       # STEP 16
ACTION: avl2.delete(int2) 
int2 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ee3e60> : <type 'instance'>
avl_REF2 = set([4, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.insert(int0)                                                       # STEP 17
ACTION: avl2.insert(int0) 
int0 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ee3e60> : <type 'instance'>
avl_REF2 = set([4, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
int0 = 19                                                               # STEP 18
ACTION: int0 = 19 
int0 = 4 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 19
ACTION: avl2.insert(int0) 
int0 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ee3e60> : <type 'instance'>
avl_REF2 = set([4, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([19, 4, 13, 14]) : <type 'set'>
==================================================
int2 = 4                                                                # STEP 20
ACTION: int2 = 4 
int2 = 1 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 21
ACTION: avl2.insert(int3) 
int3 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ee3e60> : <type 'instance'>
avl_REF2 = set([19, 4, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([19, 4, 13, 14, 15]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 22
ACTION: avl2.insert(int0) 
int0 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ee3e60> : <type 'instance'>
avl_REF2 = set([19, 4, 13, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
result = avl2.find(int0)                                                # STEP 23
ACTION: result = avl2.find(int0) 
int0 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ee3e60> : <type 'instance'>
avl_REF2 = set([19, 4, 13, 14, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl2.insert(int1)                                                       # STEP 24
ACTION: avl2.insert(int1) 
int1 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ee3e60> : <type 'instance'>
avl_REF2 = set([19, 4, 13, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl2.delete(int3)                                                       # STEP 25
ACTION: avl2.delete(int3) 
int3 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ee3e60> : <type 'instance'>
avl_REF2 = set([19, 4, 13, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([19, 4, 13, 14]) : <type 'set'>
==================================================
result = avl2.find(int3)                                                # STEP 26
ACTION: result = avl2.find(int3) 
int3 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ee3e60> : <type 'instance'>
avl_REF2 = set([19, 4, 13, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl2.delete(int3)                                                       # STEP 27
ACTION: avl2.delete(int3) 
int3 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ee3e60> : <type 'instance'>
avl_REF2 = set([19, 4, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.delete(int3)                                                       # STEP 28
ACTION: avl2.delete(int3) 
int3 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ee3e60> : <type 'instance'>
avl_REF2 = set([19, 4, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.delete(int1)                                                       # STEP 29
ACTION: avl2.delete(int1) 
int1 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ee3e60> : <type 'instance'>
avl_REF2 = set([19, 4, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int1 = 4                                                                # STEP 30
ACTION: int1 = 4 
int1 = 15 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
avl2 == avl2                                                            # STEP 31
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x104ee3e60> : <type 'instance'>
avl_REF2 = set([19, 4, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl2.delete(int0)                                                       # STEP 32
ACTION: avl2.delete(int0) 
int0 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ee3e60> : <type 'instance'>
avl_REF2 = set([19, 4, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([4, 13, 14]) : <type 'set'>
==================================================
int0 = 18                                                               # STEP 33
ACTION: int0 = 18 
int0 = 19 : <type 'int'>
=> int0 = 18 : <type 'int'>
==================================================
int3 = 17                                                               # STEP 34
ACTION: int3 = 17 
int3 = 15 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 35
ACTION: avl2.delete(int3) 
int3 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ee3e60> : <type 'instance'>
avl_REF2 = set([4, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.delete(int0)                                                       # STEP 36
ACTION: avl2.delete(int0) 
int0 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ee3e60> : <type 'instance'>
avl_REF2 = set([4, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int3 = 20                                                               # STEP 37
ACTION: int3 = 20 
int3 = 17 : <type 'int'>
=> int3 = 20 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 38
ACTION: avl2.delete(int3) 
int3 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ee3e60> : <type 'instance'>
avl_REF2 = set([4, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.delete(int2)                                                       # STEP 39
ACTION: avl2.delete(int2) 
int2 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ee3e60> : <type 'instance'>
avl_REF2 = set([4, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([13, 14]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 40
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104ee3e60> : <type 'instance'>
avl_REF2 = set([13, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int1)                                                       # STEP 41
ACTION: avl2.delete(int1) 
int1 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ee3e60> : <type 'instance'>
avl_REF2 = set([13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int3)                                                       # STEP 42
ACTION: avl2.insert(int3) 
int3 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ee3e60> : <type 'instance'>
avl_REF2 = set([13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([20, 13, 14]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 43
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104ee3e60> : <type 'instance'>
avl_REF2 = set([20, 13, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int2)                                                       # STEP 44
ACTION: avl2.insert(int2) 
int2 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ee3e60> : <type 'instance'>
avl_REF2 = set([20, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([4, 13, 14, 20]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 45
ACTION: avl2.delete(int1) 
int1 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ee3e60> : <type 'instance'>
avl_REF2 = set([4, 13, 14, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([13, 14, 20]) : <type 'set'>
==================================================
result = avl2.find(int1)                                                # STEP 46
ACTION: result = avl2.find(int1) 
int1 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ee3e60> : <type 'instance'>
avl_REF2 = set([13, 14, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int1 = 17                                                               # STEP 47
ACTION: int1 = 17 
int1 = 4 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 48
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104ee3e60> : <type 'instance'>
avl_REF2 = set([13, 14, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int2)                                                       # STEP 49
ACTION: avl2.delete(int2) 
int2 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ee3e60> : <type 'instance'>
avl_REF2 = set([13, 14, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
result = avl2.inorder()                                                 # STEP 50
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104ee3e60> : <type 'instance'>
avl_REF2 = set([13, 14, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int3)                                                       # STEP 51
ACTION: avl2.delete(int3) 
int3 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ee3e60> : <type 'instance'>
avl_REF2 = set([13, 14, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([13, 14]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 52
ACTION: avl2.delete(int0) 
int0 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ee3e60> : <type 'instance'>
avl_REF2 = set([13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int2 = 1                                                                # STEP 53
ACTION: int2 = 1 
int2 = 4 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 54
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104ee3e60> : <type 'instance'>
avl_REF2 = set([13, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int1)                                                       # STEP 55
ACTION: avl2.insert(int1) 
int1 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ee3e60> : <type 'instance'>
avl_REF2 = set([13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([13, 14, 17]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 56
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104ee3e60> : <type 'instance'>
avl_REF2 = set([13, 14, 17]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl2.inorder()                                                 # STEP 57
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104ee3e60> : <type 'instance'>
avl_REF2 = set([13, 14, 17]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int3)                                                       # STEP 58
ACTION: avl2.insert(int3) 
int3 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ee3e60> : <type 'instance'>
avl_REF2 = set([13, 14, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([13, 14, 17, 20]) : <type 'set'>
==================================================
int0 = 12                                                               # STEP 59
ACTION: int0 = 12 
int0 = 18 : <type 'int'>
=> int0 = 12 : <type 'int'>
==================================================
int3 = 1                                                                # STEP 60
ACTION: int3 = 1 
int3 = 20 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 61
ACTION: avl2.insert(int0) 
int0 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ee3e60> : <type 'instance'>
avl_REF2 = set([13, 14, 17, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([12, 13, 14, 17, 20]) : <type 'set'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 62
ACTION: avl2 = avl.AVLTree() 
avl2 = <avl.AVLTree instance at 0x104ee3e60> : <type 'instance'>
avl_REF2 = set([12, 13, 14, 17, 20]) : <type 'set'>
=> avl2 = <avl.AVLTree instance at 0x104db6098> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl2.find(int2)                                                # STEP 63
ACTION: result = avl2.find(int2) 
int2 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104db6098> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl2.insert(int3)                                                       # STEP 64
ACTION: avl2.insert(int3) 
int3 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104db6098> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([1]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 65
ACTION: avl2.delete(int2) 
int2 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104db6098> : <type 'instance'>
avl_REF2 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 66
ACTION: avl2.insert(int1) 
int1 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104db6098> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([17]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 67
ACTION: avl2.insert(int0) 
int0 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104db6098> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([17, 12]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 68
ACTION: avl2.insert(int0) 
int0 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104db6098> : <type 'instance'>
avl_REF2 = set([17, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl2.insert(int3)                                                       # STEP 69
ACTION: avl2.insert(int3) 
int3 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104db6098> : <type 'instance'>
avl_REF2 = set([17, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([17, 12, 1]) : <type 'set'>
==================================================
int0 = 9                                                                # STEP 70
ACTION: int0 = 9 
int0 = 12 : <type 'int'>
=> int0 = 9 : <type 'int'>
==================================================
int3 = 14                                                               # STEP 71
ACTION: int3 = 14 
int3 = 1 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 72
ACTION: avl2.insert(int2) 
int2 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104db6098> : <type 'instance'>
avl_REF2 = set([17, 12, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl2.insert(int2)                                                       # STEP 73
ACTION: avl2.insert(int2) 
int2 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104db6098> : <type 'instance'>
avl_REF2 = set([17, 12, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
result = avl2.find(int3)                                                # STEP 74
ACTION: result = avl2.find(int3) 
int3 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104db6098> : <type 'instance'>
avl_REF2 = set([17, 12, 1]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl2.insert(int0)                                                       # STEP 75
ACTION: avl2.insert(int0) 
int0 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104db6098> : <type 'instance'>
avl_REF2 = set([17, 12, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([17, 12, 9, 1]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 76
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104db6098> : <type 'instance'>
avl_REF2 = set([17, 12, 9, 1]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int2 = 16                                                               # STEP 77
ACTION: int2 = 16 
int2 = 1 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 78
ACTION: avl2.insert(int2) 
int2 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104db6098> : <type 'instance'>
avl_REF2 = set([17, 12, 9, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([16, 17, 12, 9, 1]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 79
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104db6098> : <type 'instance'>
avl_REF2 = set([16, 17, 12, 9, 1]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int2)                                                       # STEP 80
ACTION: avl2.insert(int2) 
int2 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104db6098> : <type 'instance'>
avl_REF2 = set([16, 17, 12, 9, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl2.delete(int3)                                                       # STEP 81
ACTION: avl2.delete(int3) 
int3 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104db6098> : <type 'instance'>
avl_REF2 = set([16, 17, 12, 9, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.delete(int1)                                                       # STEP 82
ACTION: avl2.delete(int1) 
int1 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104db6098> : <type 'instance'>
avl_REF2 = set([16, 17, 12, 9, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([16, 12, 9, 1]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 83
ACTION: avl2.delete(int3) 
int3 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104db6098> : <type 'instance'>
avl_REF2 = set([16, 12, 9, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
result = avl2.inorder()                                                 # STEP 84
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104db6098> : <type 'instance'>
avl_REF2 = set([16, 12, 9, 1]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int0)                                                       # STEP 85
ACTION: avl2.insert(int0) 
int0 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104db6098> : <type 'instance'>
avl_REF2 = set([16, 12, 9, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
int0 = 14                                                               # STEP 86
ACTION: int0 = 14 
int0 = 9 : <type 'int'>
=> int0 = 14 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 87
ACTION: avl2.delete(int2) 
int2 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104db6098> : <type 'instance'>
avl_REF2 = set([16, 12, 9, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([12, 9, 1]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104dac0e0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 0
STOPPING TESTING DUE TO TIMEOUT
8.58500169664 PERCENT COVERED
61.8972260952 TOTAL RUNTIME
8 EXECUTED
639 TOTAL TEST OPERATIONS
25.146446228 TIME SPENT EXECUTING TEST OPERATIONS
0.0702710151672 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
25.2493467331 TIME SPENT CHECKING PROPERTIES
50.3957929611 TOTAL TIME SPENT RUNNING SUT
0.00512790679932 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
2 FAILED
0 REPEATS OF FAILURES
2 ACTUAL DISTINCT FAILURES

FAILURE 0
avl2 = avl.AVLTree()                                                     # STEP 0
int1 = 19                                                                # STEP 1
avl2.delete(int1)                                                        # STEP 2
int0 = 7                                                                 # STEP 3
avl2.insert(int1)                                                        # STEP 4
avl2.insert(int1)                                                        # STEP 5
avl2.delete(int1)                                                        # STEP 6
avl2.delete(int1)                                                        # STEP 7
avl2.insert(int0)                                                        # STEP 8
avl2.insert(int0)                                                        # STEP 9
avl2.insert(int1)                                                       # STEP 10
result = avl2.find(int1)                                                # STEP 11
avl2.delete(int0)                                                       # STEP 12
avl2.insert(int1)                                                       # STEP 13
result = avl2.find(int1)                                                # STEP 14
avl2.insert(int0)                                                       # STEP 15
avl2.delete(int0)                                                       # STEP 16
avl2.insert(int1)                                                       # STEP 17
int2 = 15                                                               # STEP 18
result = avl2.find(int0)                                                # STEP 19
result = avl2.inorder()                                                 # STEP 20
avl2.delete(int1)                                                       # STEP 21
int1 = 16                                                               # STEP 22
avl2.insert(int2)                                                       # STEP 23
result = avl2.inorder()                                                 # STEP 24
avl2.delete(int2)                                                       # STEP 25
avl2.delete(int0)                                                       # STEP 26
avl2.insert(int1)                                                       # STEP 27
avl2.insert(int1)                                                       # STEP 28
result = avl2.find(int0)                                                # STEP 29
result = avl2.inorder()                                                 # STEP 30
result = avl2.inorder()                                                 # STEP 31
avl2.delete(int2)                                                       # STEP 32
int0 = 6                                                                # STEP 33
avl2 = avl.AVLTree()                                                    # STEP 34
avl2.insert(int1)                                                       # STEP 35
avl2.delete(int0)                                                       # STEP 36
avl2.insert(int0)                                                       # STEP 37
avl2.insert(int1)                                                       # STEP 38
int2 = 18                                                               # STEP 39
avl2 == avl2                                                            # STEP 40
int3 = 1                                                                # STEP 41
avl2.insert(int1)                                                       # STEP 42
int1 = 15                                                               # STEP 43
avl2.insert(int0)                                                       # STEP 44
avl2.insert(int3)                                                       # STEP 45
avl2.insert(int0)                                                       # STEP 46
result = avl2.inorder()                                                 # STEP 47
avl2.insert(int1)                                                       # STEP 48
avl2.insert(int1)                                                       # STEP 49
avl2.delete(int3)                                                       # STEP 50
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104988908>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE 1
avl2 = avl.AVLTree()                                                     # STEP 0
int0 = 14                                                                # STEP 1
avl2.insert(int0)                                                        # STEP 2
avl2.delete(int0)                                                        # STEP 3
avl2.insert(int0)                                                        # STEP 4
int2 = 13                                                                # STEP 5
avl2.insert(int2)                                                        # STEP 6
int3 = 15                                                                # STEP 7
int2 = 19                                                                # STEP 8
int0 = 4                                                                 # STEP 9
int1 = 15                                                               # STEP 10
avl2.delete(int2)                                                       # STEP 11
result = avl2.inorder()                                                 # STEP 12
int2 = 1                                                                # STEP 13
avl2.insert(int0)                                                       # STEP 14
avl2.delete(int3)                                                       # STEP 15
avl2.delete(int2)                                                       # STEP 16
avl2.insert(int0)                                                       # STEP 17
int0 = 19                                                               # STEP 18
avl2.insert(int0)                                                       # STEP 19
int2 = 4                                                                # STEP 20
avl2.insert(int3)                                                       # STEP 21
avl2.insert(int0)                                                       # STEP 22
result = avl2.find(int0)                                                # STEP 23
avl2.insert(int1)                                                       # STEP 24
avl2.delete(int3)                                                       # STEP 25
result = avl2.find(int3)                                                # STEP 26
avl2.delete(int3)                                                       # STEP 27
avl2.delete(int3)                                                       # STEP 28
avl2.delete(int1)                                                       # STEP 29
int1 = 4                                                                # STEP 30
avl2 == avl2                                                            # STEP 31
avl2.delete(int0)                                                       # STEP 32
int0 = 18                                                               # STEP 33
int3 = 17                                                               # STEP 34
avl2.delete(int3)                                                       # STEP 35
avl2.delete(int0)                                                       # STEP 36
int3 = 20                                                               # STEP 37
avl2.delete(int3)                                                       # STEP 38
avl2.delete(int2)                                                       # STEP 39
result = avl2.inorder()                                                 # STEP 40
avl2.delete(int1)                                                       # STEP 41
avl2.insert(int3)                                                       # STEP 42
result = avl2.inorder()                                                 # STEP 43
avl2.insert(int2)                                                       # STEP 44
avl2.delete(int1)                                                       # STEP 45
result = avl2.find(int1)                                                # STEP 46
int1 = 17                                                               # STEP 47
result = avl2.inorder()                                                 # STEP 48
avl2.delete(int2)                                                       # STEP 49
result = avl2.inorder()                                                 # STEP 50
avl2.delete(int3)                                                       # STEP 51
avl2.delete(int0)                                                       # STEP 52
int2 = 1                                                                # STEP 53
result = avl2.inorder()                                                 # STEP 54
avl2.insert(int1)                                                       # STEP 55
result = avl2.inorder()                                                 # STEP 56
result = avl2.inorder()                                                 # STEP 57
avl2.insert(int3)                                                       # STEP 58
int0 = 12                                                               # STEP 59
int3 = 1                                                                # STEP 60
avl2.insert(int0)                                                       # STEP 61
avl2 = avl.AVLTree()                                                    # STEP 62
result = avl2.find(int2)                                                # STEP 63
avl2.insert(int3)                                                       # STEP 64
avl2.delete(int2)                                                       # STEP 65
avl2.insert(int1)                                                       # STEP 66
avl2.insert(int0)                                                       # STEP 67
avl2.insert(int0)                                                       # STEP 68
avl2.insert(int3)                                                       # STEP 69
int0 = 9                                                                # STEP 70
int3 = 14                                                               # STEP 71
avl2.insert(int2)                                                       # STEP 72
avl2.insert(int2)                                                       # STEP 73
result = avl2.find(int3)                                                # STEP 74
avl2.insert(int0)                                                       # STEP 75
result = avl2.inorder()                                                 # STEP 76
int2 = 16                                                               # STEP 77
avl2.insert(int2)                                                       # STEP 78
result = avl2.inorder()                                                 # STEP 79
avl2.insert(int2)                                                       # STEP 80
avl2.delete(int3)                                                       # STEP 81
avl2.delete(int1)                                                       # STEP 82
avl2.delete(int3)                                                       # STEP 83
result = avl2.inorder()                                                 # STEP 84
avl2.insert(int0)                                                       # STEP 85
int0 = 14                                                               # STEP 86
avl2.delete(int2)                                                       # STEP 87
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104dac0e0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
216 BRANCHES COVERED
162 STATEMENTS COVERED

Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.61945.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105275440>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
Original test has 43 steps

SAVING TEST AS failure.61945.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 14                                                                # STEP 0
ACTION: int0 = 14 
int0 = None : <type 'NoneType'>
=> int0 = 14 : <type 'int'>
==================================================
int2 = 18                                                                # STEP 1
ACTION: int2 = 18 
int2 = None : <type 'NoneType'>
=> int2 = 18 : <type 'int'>
==================================================
int3 = 8                                                                 # STEP 2
ACTION: int3 = 8 
int3 = None : <type 'NoneType'>
=> int3 = 8 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 3
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x105a57170> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.insert(int0)                                                        # STEP 4
ACTION: avl0.insert(int0) 
int0 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x105a57170> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([14]) : <type 'set'>
==================================================
result = avl0.inorder()                                                  # STEP 5
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x105a57170> : <type 'instance'>
avl_REF0 = set([14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.delete(int2)                                                        # STEP 6
ACTION: avl0.delete(int2) 
int2 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x105a57170> : <type 'instance'>
avl_REF0 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int2 = 7                                                                 # STEP 7
ACTION: int2 = 7 
int2 = 18 : <type 'int'>
=> int2 = 7 : <type 'int'>
==================================================
int0 = 2                                                                 # STEP 8
ACTION: int0 = 2 
int0 = 14 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
avl0 == avl0                                                             # STEP 9
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x105a57170> : <type 'instance'>
avl_REF0 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
result = avl0.inorder()                                                 # STEP 10
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x105a57170> : <type 'instance'>
avl_REF0 = set([14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int1 = 18                                                               # STEP 11
ACTION: int1 = 18 
int1 = None : <type 'NoneType'>
=> int1 = 18 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 12
ACTION: avl0.delete(int0) 
int0 = 2 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x105a57170> : <type 'instance'>
avl_REF0 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int0 = 10                                                               # STEP 13
ACTION: int0 = 10 
int0 = 2 : <type 'int'>
=> int0 = 10 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 14
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x105a57170> : <type 'instance'>
avl_REF0 = set([14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.delete(int1)                                                       # STEP 15
ACTION: avl0.delete(int1) 
int1 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x105a57170> : <type 'instance'>
avl_REF0 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
result = avl0.find(int1)                                                # STEP 16
ACTION: result = avl0.find(int1) 
int1 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x105a57170> : <type 'instance'>
avl_REF0 = set([14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
int1 = 4                                                                # STEP 17
ACTION: int1 = 4 
int1 = 18 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 18
ACTION: avl0.delete(int3) 
int3 = 8 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x105a57170> : <type 'instance'>
avl_REF0 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int3 = 19                                                               # STEP 19
ACTION: int3 = 19 
int3 = 8 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 20
ACTION: avl0.insert(int3) 
int3 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x105a57170> : <type 'instance'>
avl_REF0 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([19, 14]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 21
ACTION: avl0.insert(int0) 
int0 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x105a57170> : <type 'instance'>
avl_REF0 = set([19, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([10, 19, 14]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 22
ACTION: avl0.delete(int1) 
int1 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x105a57170> : <type 'instance'>
avl_REF0 = set([10, 19, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0 == avl0                                                            # STEP 23
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x105a57170> : <type 'instance'>
avl_REF0 = set([10, 19, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
int0 = 14                                                               # STEP 24
ACTION: int0 = 14 
int0 = 10 : <type 'int'>
=> int0 = 14 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 25
ACTION: avl0.insert(int3) 
int3 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x105a57170> : <type 'instance'>
avl_REF0 = set([10, 19, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
avl0.delete(int2)                                                       # STEP 26
ACTION: avl0.delete(int2) 
int2 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x105a57170> : <type 'instance'>
avl_REF0 = set([10, 19, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
result = avl0.inorder()                                                 # STEP 27
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x105a57170> : <type 'instance'>
avl_REF0 = set([10, 19, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int3)                                                       # STEP 28
ACTION: avl0.insert(int3) 
int3 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x105a57170> : <type 'instance'>
avl_REF0 = set([10, 19, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
avl0.delete(int1)                                                       # STEP 29
ACTION: avl0.delete(int1) 
int1 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x105a57170> : <type 'instance'>
avl_REF0 = set([10, 19, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int1 = 12                                                               # STEP 30
ACTION: int1 = 12 
int1 = 4 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 31
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x105a57170> : <type 'instance'>
avl_REF0 = set([10, 19, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
result = avl0.find(int1)                                                # STEP 32
ACTION: result = avl0.find(int1) 
int1 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x105a57170> : <type 'instance'>
avl_REF0 = set([10, 19, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
int1 = 14                                                               # STEP 33
ACTION: int1 = 14 
int1 = 12 : <type 'int'>
=> int1 = 14 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 34
ACTION: avl0.insert(int2) 
int2 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x105a57170> : <type 'instance'>
avl_REF0 = set([10, 19, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([10, 19, 14, 7]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 35
ACTION: avl0.delete(int2) 
int2 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x105a57170> : <type 'instance'>
avl_REF0 = set([10, 19, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([10, 19, 14]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 36
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x105a57170> : <type 'instance'>
avl_REF0 = set([10, 19, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int2)                                                       # STEP 37
ACTION: avl0.insert(int2) 
int2 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x105a57170> : <type 'instance'>
avl_REF0 = set([10, 19, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([10, 19, 14, 7]) : <type 'set'>
==================================================
result = avl0.find(int3)                                                # STEP 38
ACTION: result = avl0.find(int3) 
int3 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x105a57170> : <type 'instance'>
avl_REF0 = set([10, 19, 14, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
avl0.insert(int2)                                                       # STEP 39
ACTION: avl0.insert(int2) 
int2 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x105a57170> : <type 'instance'>
avl_REF0 = set([10, 19, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
result = avl0.inorder()                                                 # STEP 40
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x105a57170> : <type 'instance'>
avl_REF0 = set([10, 19, 14, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int3 = 19                                                               # STEP 41
ACTION: int3 = 19 
int3 = 19 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 42
ACTION: avl0.delete(int1) 
int1 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x105a57170> : <type 'instance'>
avl_REF0 = set([10, 19, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([10, 19, 7]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1051f2cb0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #4 STEP #11 (0:00:30.039415) Mon May  1 17:21:54 2017 [ 148 stmts 195 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1059d4bd8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
Original test has 40 steps

SAVING TEST AS failure.61945.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 1                                                                 # STEP 0
ACTION: int3 = 1 
int3 = None : <type 'NoneType'>
=> int3 = 1 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 1
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x1059d44d0> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.delete(int3)                                                        # STEP 2
ACTION: avl1.delete(int3) 
int3 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1059d44d0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.insert(int3)                                                        # STEP 3
ACTION: avl1.insert(int3) 
int3 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1059d44d0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([1]) : <type 'set'>
==================================================
result = avl1.inorder()                                                  # STEP 4
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x1059d44d0> : <type 'instance'>
avl_REF1 = set([1]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.delete(int3)                                                        # STEP 5
ACTION: avl1.delete(int3) 
int3 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1059d44d0> : <type 'instance'>
avl_REF1 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.delete(int3)                                                        # STEP 6
ACTION: avl1.delete(int3) 
int3 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1059d44d0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.delete(int3)                                                        # STEP 7
ACTION: avl1.delete(int3) 
int3 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1059d44d0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int0 = 6                                                                 # STEP 8
ACTION: int0 = 6 
int0 = None : <type 'NoneType'>
=> int0 = 6 : <type 'int'>
==================================================
avl1.delete(int0)                                                        # STEP 9
ACTION: avl1.delete(int0) 
int0 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1059d44d0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
result = avl1.find(int0)                                                # STEP 10
ACTION: result = avl1.find(int0) 
int0 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1059d44d0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl1.delete(int3)                                                       # STEP 11
ACTION: avl1.delete(int3) 
int3 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1059d44d0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
result = avl1.find(int3)                                                # STEP 12
ACTION: result = avl1.find(int3) 
int3 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1059d44d0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
int2 = 1                                                                # STEP 13
ACTION: int2 = 1 
int2 = None : <type 'NoneType'>
=> int2 = 1 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 14
ACTION: avl1.insert(int0) 
int0 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1059d44d0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([6]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 15
ACTION: avl1.insert(int2) 
int2 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1059d44d0> : <type 'instance'>
avl_REF1 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([1, 6]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 16
ACTION: avl1.delete(int3) 
int3 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1059d44d0> : <type 'instance'>
avl_REF1 = set([1, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([6]) : <type 'set'>
==================================================
result = avl1.find(int2)                                                # STEP 17
ACTION: result = avl1.find(int2) 
int2 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1059d44d0> : <type 'instance'>
avl_REF1 = set([6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl1.insert(int0)                                                       # STEP 18
ACTION: avl1.insert(int0) 
int0 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1059d44d0> : <type 'instance'>
avl_REF1 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
int0 = 19                                                               # STEP 19
ACTION: int0 = 19 
int0 = 6 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 20
ACTION: avl1.delete(int0) 
int0 = 19 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1059d44d0> : <type 'instance'>
avl_REF1 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.delete(int3)                                                       # STEP 21
ACTION: avl1.delete(int3) 
int3 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1059d44d0> : <type 'instance'>
avl_REF1 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int3 = 3                                                                # STEP 22
ACTION: int3 = 3 
int3 = 1 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 23
ACTION: avl1.insert(int2) 
int2 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1059d44d0> : <type 'instance'>
avl_REF1 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([1, 6]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 24
ACTION: avl1.insert(int3) 
int3 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1059d44d0> : <type 'instance'>
avl_REF1 = set([1, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([1, 3, 6]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 25
ACTION: avl1.delete(int3) 
int3 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1059d44d0> : <type 'instance'>
avl_REF1 = set([1, 3, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([1, 6]) : <type 'set'>
==================================================
int2 = 1                                                                # STEP 26
ACTION: int2 = 1 
int2 = 1 : <type 'int'>
==================================================
int3 = 4                                                                # STEP 27
ACTION: int3 = 4 
int3 = 3 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
int0 = 2                                                                # STEP 28
ACTION: int0 = 2 
int0 = 19 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 29
ACTION: avl1.insert(int0) 
int0 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1059d44d0> : <type 'instance'>
avl_REF1 = set([1, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([1, 2, 6]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 30
ACTION: avl1.insert(int3) 
int3 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1059d44d0> : <type 'instance'>
avl_REF1 = set([1, 2, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([1, 2, 4, 6]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 31
ACTION: avl1.insert(int2) 
int2 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1059d44d0> : <type 'instance'>
avl_REF1 = set([1, 2, 4, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
result = avl1.find(int0)                                                # STEP 32
ACTION: result = avl1.find(int0) 
int0 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1059d44d0> : <type 'instance'>
avl_REF1 = set([1, 2, 4, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl1.delete(int3)                                                       # STEP 33
ACTION: avl1.delete(int3) 
int3 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1059d44d0> : <type 'instance'>
avl_REF1 = set([1, 2, 4, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([1, 2, 6]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 34
ACTION: avl1.insert(int0) 
int0 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1059d44d0> : <type 'instance'>
avl_REF1 = set([1, 2, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.insert(int2)                                                       # STEP 35
ACTION: avl1.insert(int2) 
int2 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1059d44d0> : <type 'instance'>
avl_REF1 = set([1, 2, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
avl1.insert(int3)                                                       # STEP 36
ACTION: avl1.insert(int3) 
int3 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1059d44d0> : <type 'instance'>
avl_REF1 = set([1, 2, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([1, 2, 4, 6]) : <type 'set'>
==================================================
int0 = 13                                                               # STEP 37
ACTION: int0 = 13 
int0 = 2 : <type 'int'>
=> int0 = 13 : <type 'int'>
==================================================
int3 = 15                                                               # STEP 38
ACTION: int3 = 15 
int3 = 4 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 39
ACTION: avl1.delete(int2) 
int2 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1059d44d0> : <type 'instance'>
avl_REF1 = set([1, 2, 4, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([2, 4, 6]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1056ef368>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1056c3710>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
Original test has 90 steps

SAVING TEST AS failure.61945.test.2
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 1                                                                 # STEP 0
ACTION: int1 = 1 
int1 = None : <type 'NoneType'>
=> int1 = 1 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 1
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x1059d4560> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.delete(int1)                                                        # STEP 2
ACTION: avl1.delete(int1) 
int1 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1059d4560> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.insert(int1)                                                        # STEP 3
ACTION: avl1.insert(int1) 
int1 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1059d4560> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([1]) : <type 'set'>
==================================================
avl1.delete(int1)                                                        # STEP 4
ACTION: avl1.delete(int1) 
int1 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1059d4560> : <type 'instance'>
avl_REF1 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 5
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x105992290> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl1.insert(int1)                                                        # STEP 6
ACTION: avl1.insert(int1) 
int1 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1059d4560> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([1]) : <type 'set'>
==================================================
int1 = 8                                                                 # STEP 7
ACTION: int1 = 8 
int1 = 1 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
avl1.insert(int1)                                                        # STEP 8
ACTION: avl1.insert(int1) 
int1 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1059d4560> : <type 'instance'>
avl_REF1 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([8, 1]) : <type 'set'>
==================================================
int2 = 3                                                                 # STEP 9
ACTION: int2 = 3 
int2 = None : <type 'NoneType'>
=> int2 = 3 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 10
ACTION: avl1.delete(int1) 
int1 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1059d4560> : <type 'instance'>
avl_REF1 = set([8, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([1]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 11
ACTION: avl2.delete(int1) 
int1 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105992290> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl1.insert(int2)                                                       # STEP 12
ACTION: avl1.insert(int2) 
int2 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1059d4560> : <type 'instance'>
avl_REF1 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([1, 3]) : <type 'set'>
==================================================
avl1 == avl1                                                            # STEP 13
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x1059d4560> : <type 'instance'>
avl_REF1 = set([1, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
result = avl1.find(int2)                                                # STEP 14
ACTION: result = avl1.find(int2) 
int2 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1059d4560> : <type 'instance'>
avl_REF1 = set([1, 3]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl1.delete(int2)                                                       # STEP 15
ACTION: avl1.delete(int2) 
int2 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1059d4560> : <type 'instance'>
avl_REF1 = set([1, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([1]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 16
ACTION: avl2.delete(int2) 
int2 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105992290> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.insert(int2)                                                       # STEP 17
ACTION: avl2.insert(int2) 
int2 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105992290> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([3]) : <type 'set'>
==================================================
int0 = 14                                                               # STEP 18
ACTION: int0 = 14 
int0 = None : <type 'NoneType'>
=> int0 = 14 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 19
ACTION: avl2.delete(int1) 
int1 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105992290> : <type 'instance'>
avl_REF2 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl1.delete(int1)                                                       # STEP 20
ACTION: avl1.delete(int1) 
int1 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1059d4560> : <type 'instance'>
avl_REF1 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
result = avl2.inorder()                                                 # STEP 21
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x105992290> : <type 'instance'>
avl_REF2 = set([3]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int1 = 16                                                               # STEP 22
ACTION: int1 = 16 
int1 = 8 : <type 'int'>
=> int1 = 16 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 23
ACTION: avl2.insert(int0) 
int0 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105992290> : <type 'instance'>
avl_REF2 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([3, 14]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 24
ACTION: avl2.delete(int0) 
int0 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105992290> : <type 'instance'>
avl_REF2 = set([3, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([3]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 25
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x105992290> : <type 'instance'>
avl_REF2 = set([3]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl1.delete(int1)                                                       # STEP 26
ACTION: avl1.delete(int1) 
int1 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1059d4560> : <type 'instance'>
avl_REF1 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.delete(int2)                                                       # STEP 27
ACTION: avl1.delete(int2) 
int2 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1059d4560> : <type 'instance'>
avl_REF1 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl2.delete(int1)                                                       # STEP 28
ACTION: avl2.delete(int1) 
int1 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105992290> : <type 'instance'>
avl_REF2 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl1.insert(int2)                                                       # STEP 29
ACTION: avl1.insert(int2) 
int2 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1059d4560> : <type 'instance'>
avl_REF1 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([1, 3]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 30
ACTION: avl2.insert(int0) 
int0 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105992290> : <type 'instance'>
avl_REF2 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([3, 14]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 31
ACTION: avl2.delete(int0) 
int0 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105992290> : <type 'instance'>
avl_REF2 = set([3, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([3]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 32
ACTION: avl2.insert(int0) 
int0 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105992290> : <type 'instance'>
avl_REF2 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([3, 14]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 33
ACTION: avl2.insert(int2) 
int2 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105992290> : <type 'instance'>
avl_REF2 = set([3, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl2.delete(int2)                                                       # STEP 34
ACTION: avl2.delete(int2) 
int2 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105992290> : <type 'instance'>
avl_REF2 = set([3, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([14]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 35
ACTION: avl2.delete(int2) 
int2 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105992290> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
result = avl1.inorder()                                                 # STEP 36
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x1059d4560> : <type 'instance'>
avl_REF1 = set([1, 3]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl2.delete(int1)                                                       # STEP 37
ACTION: avl2.delete(int1) 
int1 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105992290> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl1.insert(int2)                                                       # STEP 38
ACTION: avl1.insert(int2) 
int2 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1059d4560> : <type 'instance'>
avl_REF1 = set([1, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
avl2.delete(int2)                                                       # STEP 39
ACTION: avl2.delete(int2) 
int2 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105992290> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int1 = 18                                                               # STEP 40
ACTION: int1 = 18 
int1 = 16 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
int3 = 1                                                                # STEP 41
ACTION: int3 = 1 
int3 = None : <type 'NoneType'>
=> int3 = 1 : <type 'int'>
==================================================
result = avl2.find(int0)                                                # STEP 42
ACTION: result = avl2.find(int0) 
int0 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105992290> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl1.delete(int2)                                                       # STEP 43
ACTION: avl1.delete(int2) 
int2 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1059d4560> : <type 'instance'>
avl_REF1 = set([1, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([1]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 44
ACTION: avl2.delete(int1) 
int1 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105992290> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
result = avl1.find(int0)                                                # STEP 45
ACTION: result = avl1.find(int0) 
int0 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1059d4560> : <type 'instance'>
avl_REF1 = set([1]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
int1 = 3                                                                # STEP 46
ACTION: int1 = 3 
int1 = 18 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 47
ACTION: avl1.delete(int3) 
int3 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1059d4560> : <type 'instance'>
avl_REF1 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int2 = 17                                                               # STEP 48
ACTION: int2 = 17 
int2 = 3 : <type 'int'>
=> int2 = 17 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 49
ACTION: avl1.insert(int1) 
int1 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1059d4560> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([3]) : <type 'set'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 50
ACTION: avl2 = avl.AVLTree() 
avl2 = <avlbug2.AVLTree instance at 0x105992290> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
=> avl2 = <avlbug2.AVLTree instance at 0x10538e200> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int3 = 15                                                               # STEP 51
ACTION: int3 = 15 
int3 = 1 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
result = avl1.find(int3)                                                # STEP 52
ACTION: result = avl1.find(int3) 
int3 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1059d4560> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl2.insert(int1)                                                       # STEP 53
ACTION: avl2.insert(int1) 
int1 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10538e200> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([3]) : <type 'set'>
==================================================
int3 = 7                                                                # STEP 54
ACTION: int3 = 7 
int3 = 15 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 55
ACTION: avl1.insert(int3) 
int3 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1059d4560> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([3, 7]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 56
ACTION: avl1.delete(int0) 
int0 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1059d4560> : <type 'instance'>
avl_REF1 = set([3, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
result = avl2.inorder()                                                 # STEP 57
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x10538e200> : <type 'instance'>
avl_REF2 = set([3]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl1.delete(int3)                                                       # STEP 58
ACTION: avl1.delete(int3) 
int3 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1059d4560> : <type 'instance'>
avl_REF1 = set([3, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([3]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 59
ACTION: avl1.insert(int2) 
int2 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1059d4560> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([17, 3]) : <type 'set'>
==================================================
result = avl2.find(int1)                                                # STEP 60
ACTION: result = avl2.find(int1) 
int1 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10538e200> : <type 'instance'>
avl_REF2 = set([3]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl1.delete(int0)                                                       # STEP 61
ACTION: avl1.delete(int0) 
int0 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1059d4560> : <type 'instance'>
avl_REF1 = set([17, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1 == avl1                                                            # STEP 62
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x1059d4560> : <type 'instance'>
avl_REF1 = set([17, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
result = avl2.find(int2)                                                # STEP 63
ACTION: result = avl2.find(int2) 
int2 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10538e200> : <type 'instance'>
avl_REF2 = set([3]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl1.insert(int0)                                                       # STEP 64
ACTION: avl1.insert(int0) 
int0 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1059d4560> : <type 'instance'>
avl_REF1 = set([17, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([17, 3, 14]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 65
ACTION: avl2.delete(int0) 
int0 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10538e200> : <type 'instance'>
avl_REF2 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int3 = 10                                                               # STEP 66
ACTION: int3 = 10 
int3 = 7 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
int2 = 8                                                                # STEP 67
ACTION: int2 = 8 
int2 = 17 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
result = avl1.find(int2)                                                # STEP 68
ACTION: result = avl1.find(int2) 
int2 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1059d4560> : <type 'instance'>
avl_REF1 = set([17, 3, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl2.delete(int3)                                                       # STEP 69
ACTION: avl2.delete(int3) 
int3 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10538e200> : <type 'instance'>
avl_REF2 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl1.insert(int2)                                                       # STEP 70
ACTION: avl1.insert(int2) 
int2 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1059d4560> : <type 'instance'>
avl_REF1 = set([17, 3, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([8, 17, 3, 14]) : <type 'set'>
==================================================
result = avl2.find(int3)                                                # STEP 71
ACTION: result = avl2.find(int3) 
int3 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10538e200> : <type 'instance'>
avl_REF2 = set([3]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl1.insert(int2)                                                       # STEP 72
ACTION: avl1.insert(int2) 
int2 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1059d4560> : <type 'instance'>
avl_REF1 = set([8, 17, 3, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
int1 = 9                                                                # STEP 73
ACTION: int1 = 9 
int1 = 3 : <type 'int'>
=> int1 = 9 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 74
ACTION: avl1.delete(int1) 
int1 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1059d4560> : <type 'instance'>
avl_REF1 = set([8, 17, 3, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.insert(int2)                                                       # STEP 75
ACTION: avl1.insert(int2) 
int2 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1059d4560> : <type 'instance'>
avl_REF1 = set([8, 17, 3, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
avl2.insert(int2)                                                       # STEP 76
ACTION: avl2.insert(int2) 
int2 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10538e200> : <type 'instance'>
avl_REF2 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([8, 3]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 77
ACTION: avl2.insert(int3) 
int3 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10538e200> : <type 'instance'>
avl_REF2 = set([8, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([8, 10, 3]) : <type 'set'>
==================================================
result = avl1.find(int2)                                                # STEP 78
ACTION: result = avl1.find(int2) 
int2 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1059d4560> : <type 'instance'>
avl_REF1 = set([8, 17, 3, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl2.insert(int3)                                                       # STEP 79
ACTION: avl2.insert(int3) 
int3 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10538e200> : <type 'instance'>
avl_REF2 = set([8, 10, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
avl2.insert(int1)                                                       # STEP 80
ACTION: avl2.insert(int1) 
int1 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10538e200> : <type 'instance'>
avl_REF2 = set([8, 10, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([8, 9, 10, 3]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 81
ACTION: avl2.delete(int2) 
int2 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10538e200> : <type 'instance'>
avl_REF2 = set([8, 9, 10, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([9, 10, 3]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 82
ACTION: avl2.insert(int0) 
int0 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10538e200> : <type 'instance'>
avl_REF2 = set([9, 10, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([9, 10, 3, 14]) : <type 'set'>
==================================================
int2 = 13                                                               # STEP 83
ACTION: int2 = 13 
int2 = 8 : <type 'int'>
=> int2 = 13 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 84
ACTION: avl2.insert(int1) 
int1 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10538e200> : <type 'instance'>
avl_REF2 = set([9, 10, 3, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl0 = avl.AVLTree()                                                    # STEP 85
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x1053c2a28> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 86
ACTION: avl2.delete(int0) 
int0 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10538e200> : <type 'instance'>
avl_REF2 = set([9, 10, 3, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([9, 10, 3]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 87
ACTION: avl0.insert(int1) 
int1 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1053c2a28> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([9]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 88
ACTION: avl1.insert(int2) 
int2 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1059d4560> : <type 'instance'>
avl_REF1 = set([8, 17, 3, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([3, 8, 13, 14, 17]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 89
ACTION: avl1.delete(int0) 
int0 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1059d4560> : <type 'instance'>
avl_REF1 = set([3, 8, 13, 14, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([3, 8, 13, 17]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105b6b170>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 3 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 49
STOPPING TESTING DUE TO TIMEOUT
7.80615206036 PERCENT COVERED
60.3097429276 TOTAL RUNTIME
6 EXECUTED
422 TOTAL TEST OPERATIONS
21.2144143581 TIME SPENT EXECUTING TEST OPERATIONS
0.0468034744263 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
21.3329591751 TIME SPENT CHECKING PROPERTIES
42.5473735332 TOTAL TIME SPENT RUNNING SUT
0.00431394577026 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
3 FAILED
0 REPEATS OF FAILURES
3 ACTUAL DISTINCT FAILURES

FAILURE 0
int0 = 14                                                                # STEP 0
int2 = 18                                                                # STEP 1
int3 = 8                                                                 # STEP 2
avl0 = avl.AVLTree()                                                     # STEP 3
avl0.insert(int0)                                                        # STEP 4
result = avl0.inorder()                                                  # STEP 5
avl0.delete(int2)                                                        # STEP 6
int2 = 7                                                                 # STEP 7
int0 = 2                                                                 # STEP 8
avl0 == avl0                                                             # STEP 9
result = avl0.inorder()                                                 # STEP 10
int1 = 18                                                               # STEP 11
avl0.delete(int0)                                                       # STEP 12
int0 = 10                                                               # STEP 13
result = avl0.inorder()                                                 # STEP 14
avl0.delete(int1)                                                       # STEP 15
result = avl0.find(int1)                                                # STEP 16
int1 = 4                                                                # STEP 17
avl0.delete(int3)                                                       # STEP 18
int3 = 19                                                               # STEP 19
avl0.insert(int3)                                                       # STEP 20
avl0.insert(int0)                                                       # STEP 21
avl0.delete(int1)                                                       # STEP 22
avl0 == avl0                                                            # STEP 23
int0 = 14                                                               # STEP 24
avl0.insert(int3)                                                       # STEP 25
avl0.delete(int2)                                                       # STEP 26
result = avl0.inorder()                                                 # STEP 27
avl0.insert(int3)                                                       # STEP 28
avl0.delete(int1)                                                       # STEP 29
int1 = 12                                                               # STEP 30
result = avl0.inorder()                                                 # STEP 31
result = avl0.find(int1)                                                # STEP 32
int1 = 14                                                               # STEP 33
avl0.insert(int2)                                                       # STEP 34
avl0.delete(int2)                                                       # STEP 35
result = avl0.inorder()                                                 # STEP 36
avl0.insert(int2)                                                       # STEP 37
result = avl0.find(int3)                                                # STEP 38
avl0.insert(int2)                                                       # STEP 39
result = avl0.inorder()                                                 # STEP 40
int3 = 19                                                               # STEP 41
avl0.delete(int1)                                                       # STEP 42
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1051f2cb0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE 1
int3 = 1                                                                 # STEP 0
avl1 = avl.AVLTree()                                                     # STEP 1
avl1.delete(int3)                                                        # STEP 2
avl1.insert(int3)                                                        # STEP 3
result = avl1.inorder()                                                  # STEP 4
avl1.delete(int3)                                                        # STEP 5
avl1.delete(int3)                                                        # STEP 6
avl1.delete(int3)                                                        # STEP 7
int0 = 6                                                                 # STEP 8
avl1.delete(int0)                                                        # STEP 9
result = avl1.find(int0)                                                # STEP 10
avl1.delete(int3)                                                       # STEP 11
result = avl1.find(int3)                                                # STEP 12
int2 = 1                                                                # STEP 13
avl1.insert(int0)                                                       # STEP 14
avl1.insert(int2)                                                       # STEP 15
avl1.delete(int3)                                                       # STEP 16
result = avl1.find(int2)                                                # STEP 17
avl1.insert(int0)                                                       # STEP 18
int0 = 19                                                               # STEP 19
avl1.delete(int0)                                                       # STEP 20
avl1.delete(int3)                                                       # STEP 21
int3 = 3                                                                # STEP 22
avl1.insert(int2)                                                       # STEP 23
avl1.insert(int3)                                                       # STEP 24
avl1.delete(int3)                                                       # STEP 25
int2 = 1                                                                # STEP 26
int3 = 4                                                                # STEP 27
int0 = 2                                                                # STEP 28
avl1.insert(int0)                                                       # STEP 29
avl1.insert(int3)                                                       # STEP 30
avl1.insert(int2)                                                       # STEP 31
result = avl1.find(int0)                                                # STEP 32
avl1.delete(int3)                                                       # STEP 33
avl1.insert(int0)                                                       # STEP 34
avl1.insert(int2)                                                       # STEP 35
avl1.insert(int3)                                                       # STEP 36
int0 = 13                                                               # STEP 37
int3 = 15                                                               # STEP 38
avl1.delete(int2)                                                       # STEP 39
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1056ef368>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE 2
int1 = 1                                                                 # STEP 0
avl1 = avl.AVLTree()                                                     # STEP 1
avl1.delete(int1)                                                        # STEP 2
avl1.insert(int1)                                                        # STEP 3
avl1.delete(int1)                                                        # STEP 4
avl2 = avl.AVLTree()                                                     # STEP 5
avl1.insert(int1)                                                        # STEP 6
int1 = 8                                                                 # STEP 7
avl1.insert(int1)                                                        # STEP 8
int2 = 3                                                                 # STEP 9
avl1.delete(int1)                                                       # STEP 10
avl2.delete(int1)                                                       # STEP 11
avl1.insert(int2)                                                       # STEP 12
avl1 == avl1                                                            # STEP 13
result = avl1.find(int2)                                                # STEP 14
avl1.delete(int2)                                                       # STEP 15
avl2.delete(int2)                                                       # STEP 16
avl2.insert(int2)                                                       # STEP 17
int0 = 14                                                               # STEP 18
avl2.delete(int1)                                                       # STEP 19
avl1.delete(int1)                                                       # STEP 20
result = avl2.inorder()                                                 # STEP 21
int1 = 16                                                               # STEP 22
avl2.insert(int0)                                                       # STEP 23
avl2.delete(int0)                                                       # STEP 24
result = avl2.inorder()                                                 # STEP 25
avl1.delete(int1)                                                       # STEP 26
avl1.delete(int2)                                                       # STEP 27
avl2.delete(int1)                                                       # STEP 28
avl1.insert(int2)                                                       # STEP 29
avl2.insert(int0)                                                       # STEP 30
avl2.delete(int0)                                                       # STEP 31
avl2.insert(int0)                                                       # STEP 32
avl2.insert(int2)                                                       # STEP 33
avl2.delete(int2)                                                       # STEP 34
avl2.delete(int2)                                                       # STEP 35
result = avl1.inorder()                                                 # STEP 36
avl2.delete(int1)                                                       # STEP 37
avl1.insert(int2)                                                       # STEP 38
avl2.delete(int2)                                                       # STEP 39
int1 = 18                                                               # STEP 40
int3 = 1                                                                # STEP 41
result = avl2.find(int0)                                                # STEP 42
avl1.delete(int2)                                                       # STEP 43
avl2.delete(int1)                                                       # STEP 44
result = avl1.find(int0)                                                # STEP 45
int1 = 3                                                                # STEP 46
avl1.delete(int3)                                                       # STEP 47
int2 = 17                                                               # STEP 48
avl1.insert(int1)                                                       # STEP 49
avl2 = avl.AVLTree()                                                    # STEP 50
int3 = 15                                                               # STEP 51
result = avl1.find(int3)                                                # STEP 52
avl2.insert(int1)                                                       # STEP 53
int3 = 7                                                                # STEP 54
avl1.insert(int3)                                                       # STEP 55
avl1.delete(int0)                                                       # STEP 56
result = avl2.inorder()                                                 # STEP 57
avl1.delete(int3)                                                       # STEP 58
avl1.insert(int2)                                                       # STEP 59
result = avl2.find(int1)                                                # STEP 60
avl1.delete(int0)                                                       # STEP 61
avl1 == avl1                                                            # STEP 62
result = avl2.find(int2)                                                # STEP 63
avl1.insert(int0)                                                       # STEP 64
avl2.delete(int0)                                                       # STEP 65
int3 = 10                                                               # STEP 66
int2 = 8                                                                # STEP 67
result = avl1.find(int2)                                                # STEP 68
avl2.delete(int3)                                                       # STEP 69
avl1.insert(int2)                                                       # STEP 70
result = avl2.find(int3)                                                # STEP 71
avl1.insert(int2)                                                       # STEP 72
int1 = 9                                                                # STEP 73
avl1.delete(int1)                                                       # STEP 74
avl1.insert(int2)                                                       # STEP 75
avl2.insert(int2)                                                       # STEP 76
avl2.insert(int3)                                                       # STEP 77
result = avl1.find(int2)                                                # STEP 78
avl2.insert(int3)                                                       # STEP 79
avl2.insert(int1)                                                       # STEP 80
avl2.delete(int2)                                                       # STEP 81
avl2.insert(int0)                                                       # STEP 82
int2 = 13                                                               # STEP 83
avl2.insert(int1)                                                       # STEP 84
avl0 = avl.AVLTree()                                                    # STEP 85
avl2.delete(int0)                                                       # STEP 86
avl0.insert(int1)                                                       # STEP 87
avl1.insert(int2)                                                       # STEP 88
avl1.delete(int0)                                                       # STEP 89
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105b6b170>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
202 BRANCHES COVERED
151 STATEMENTS COVERED

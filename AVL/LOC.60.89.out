Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.935.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  12 [3:1]
-- < 6 [2:1]
---- < 5 [1:1]
------ < 4 [0:0] L
---- > 9 [0:0] L
-- > 15 [1:-1]
---- > 16 [0:0] L
set([4, 5, 6, 9, 12, 15, 16])
  9 [2:0]
-- < 3 [1:1]
---- < 1 [0:0] L
-- > 17 [1:0]
---- < 10 [0:0] L
---- > 19 [0:0] L
set([1, 3, 9, 10, 17, 19])
  9 [2:0]
-- < 3 [1:0]
---- < 1 [0:0] L
---- > 5 [0:0] L
-- > 10 [1:-1]
---- > 17 [0:0] L
set([1, 3, 5, 9, 10, 17])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104d74ab8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 68 steps

SAVING TEST AS failure.935.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 15                                                                # STEP 0
ACTION: int2 = 15 
int2 = None : <type 'NoneType'>
=> int2 = 15 : <type 'int'>
==================================================
int1 = 5                                                                 # STEP 1
ACTION: int1 = 5 
int1 = None : <type 'NoneType'>
=> int1 = 5 : <type 'int'>
==================================================
int3 = 8                                                                 # STEP 2
ACTION: int3 = 8 
int3 = None : <type 'NoneType'>
=> int3 = 8 : <type 'int'>
==================================================
int0 = 15                                                                # STEP 3
ACTION: int0 = 15 
int0 = None : <type 'NoneType'>
=> int0 = 15 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x105818680> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl2.find(int1)                                                 # STEP 5
ACTION: result = avl2.find(int1) 
int1 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105818680> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
result = avl2.inorder()                                                  # STEP 6
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x105818680> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int3)                                                        # STEP 7
ACTION: avl2.insert(int3) 
int3 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105818680> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([8]) : <type 'set'>
==================================================
avl2.insert(int3)                                                        # STEP 8
ACTION: avl2.insert(int3) 
int3 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105818680> : <type 'instance'>
avl_REF2 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
avl2.insert(int1)                                                        # STEP 9
ACTION: avl2.insert(int1) 
int1 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105818680> : <type 'instance'>
avl_REF2 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([8, 5]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 10
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x105818680> : <type 'instance'>
avl_REF2 = set([8, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl2.find(int1)                                                # STEP 11
ACTION: result = avl2.find(int1) 
int1 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105818680> : <type 'instance'>
avl_REF2 = set([8, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int3 = 12                                                               # STEP 12
ACTION: int3 = 12 
int3 = 8 : <type 'int'>
=> int3 = 12 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 13
ACTION: avl2.insert(int0) 
int0 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105818680> : <type 'instance'>
avl_REF2 = set([8, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([8, 5, 15]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 14
ACTION: avl2.insert(int1) 
int1 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105818680> : <type 'instance'>
avl_REF2 = set([8, 5, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl2.insert(int2)                                                       # STEP 15
ACTION: avl2.insert(int2) 
int2 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105818680> : <type 'instance'>
avl_REF2 = set([8, 5, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
int1 = 18                                                               # STEP 16
ACTION: int1 = 18 
int1 = 5 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 17
ACTION: avl2.insert(int1) 
int1 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105818680> : <type 'instance'>
avl_REF2 = set([8, 5, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([8, 18, 5, 15]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 18
ACTION: avl2.insert(int1) 
int1 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105818680> : <type 'instance'>
avl_REF2 = set([8, 18, 5, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl2.insert(int3)                                                       # STEP 19
ACTION: avl2.insert(int3) 
int3 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105818680> : <type 'instance'>
avl_REF2 = set([8, 18, 5, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([8, 18, 12, 5, 15]) : <type 'set'>
==================================================
int2 = 10                                                               # STEP 20
ACTION: int2 = 10 
int2 = 15 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 21
ACTION: avl2.delete(int0) 
int0 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105818680> : <type 'instance'>
avl_REF2 = set([8, 18, 12, 5, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([8, 18, 12, 5]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 22
ACTION: avl2.delete(int2) 
int2 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105818680> : <type 'instance'>
avl_REF2 = set([8, 18, 12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.delete(int1)                                                       # STEP 23
ACTION: avl2.delete(int1) 
int1 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105818680> : <type 'instance'>
avl_REF2 = set([8, 18, 12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([8, 12, 5]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 24
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x105818680> : <type 'instance'>
avl_REF2 = set([8, 12, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int2)                                                       # STEP 25
ACTION: avl2.delete(int2) 
int2 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105818680> : <type 'instance'>
avl_REF2 = set([8, 12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
result = avl2.inorder()                                                 # STEP 26
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x105818680> : <type 'instance'>
avl_REF2 = set([8, 12, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int3)                                                       # STEP 27
ACTION: avl2.delete(int3) 
int3 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105818680> : <type 'instance'>
avl_REF2 = set([8, 12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([8, 5]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 28
ACTION: avl2.insert(int3) 
int3 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105818680> : <type 'instance'>
avl_REF2 = set([8, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([8, 12, 5]) : <type 'set'>
==================================================
int3 = 12                                                               # STEP 29
ACTION: int3 = 12 
int3 = 12 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 30
ACTION: avl2.insert(int1) 
int1 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105818680> : <type 'instance'>
avl_REF2 = set([8, 12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([8, 18, 12, 5]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 31
ACTION: avl2.delete(int3) 
int3 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105818680> : <type 'instance'>
avl_REF2 = set([8, 18, 12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([8, 18, 5]) : <type 'set'>
==================================================
int2 = 3                                                                # STEP 32
ACTION: int2 = 3 
int2 = 10 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
int0 = 14                                                               # STEP 33
ACTION: int0 = 14 
int0 = 15 : <type 'int'>
=> int0 = 14 : <type 'int'>
==================================================
result = avl2.find(int1)                                                # STEP 34
ACTION: result = avl2.find(int1) 
int1 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105818680> : <type 'instance'>
avl_REF2 = set([8, 18, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl1 = avl.AVLTree()                                                    # STEP 35
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x104f15908> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 36
ACTION: avl1.delete(int1) 
int1 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f15908> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.delete(int2)                                                       # STEP 37
ACTION: avl1.delete(int2) 
int2 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f15908> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
result = avl2.inorder()                                                 # STEP 38
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x105818680> : <type 'instance'>
avl_REF2 = set([8, 18, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int2 = 8                                                                # STEP 39
ACTION: int2 = 8 
int2 = 3 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 40
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104f15908> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl2.insert(int3)                                                       # STEP 41
ACTION: avl2.insert(int3) 
int3 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105818680> : <type 'instance'>
avl_REF2 = set([8, 18, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([8, 18, 12, 5]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 42
ACTION: avl1.insert(int0) 
int0 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f15908> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([14]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 43
ACTION: avl2.insert(int1) 
int1 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105818680> : <type 'instance'>
avl_REF2 = set([8, 18, 12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl1.insert(int0)                                                       # STEP 44
ACTION: avl1.insert(int0) 
int0 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f15908> : <type 'instance'>
avl_REF1 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.delete(int3)                                                       # STEP 45
ACTION: avl1.delete(int3) 
int3 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f15908> : <type 'instance'>
avl_REF1 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl2.insert(int3)                                                       # STEP 46
ACTION: avl2.insert(int3) 
int3 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105818680> : <type 'instance'>
avl_REF2 = set([8, 18, 12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
avl2.delete(int1)                                                       # STEP 47
ACTION: avl2.delete(int1) 
int1 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105818680> : <type 'instance'>
avl_REF2 = set([8, 18, 12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([8, 12, 5]) : <type 'set'>
==================================================
avl1 == avl1                                                            # STEP 48
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x104f15908> : <type 'instance'>
avl_REF1 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
int1 = 16                                                               # STEP 49
ACTION: int1 = 16 
int1 = 18 : <type 'int'>
=> int1 = 16 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 50
ACTION: avl2.delete(int2) 
int2 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105818680> : <type 'instance'>
avl_REF2 = set([8, 12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([12, 5]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 51
ACTION: avl1.insert(int2) 
int2 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f15908> : <type 'instance'>
avl_REF1 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([8, 14]) : <type 'set'>
==================================================
int2 = 14                                                               # STEP 52
ACTION: int2 = 14 
int2 = 8 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
int0 = 6                                                                # STEP 53
ACTION: int0 = 6 
int0 = 14 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
int3 = 8                                                                # STEP 54
ACTION: int3 = 8 
int3 = 12 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 55
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x105818680> : <type 'instance'>
avl_REF2 = set([12, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl1.insert(int1)                                                       # STEP 56
ACTION: avl1.insert(int1) 
int1 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f15908> : <type 'instance'>
avl_REF1 = set([8, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([8, 16, 14]) : <type 'set'>
==================================================
int1 = 11                                                               # STEP 57
ACTION: int1 = 11 
int1 = 16 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 58
ACTION: avl1.delete(int2) 
int2 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f15908> : <type 'instance'>
avl_REF1 = set([8, 16, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([8, 16]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 59
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x105818680> : <type 'instance'>
avl_REF2 = set([12, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl2.inorder()                                                 # STEP 60
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x105818680> : <type 'instance'>
avl_REF2 = set([12, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int2 = 1                                                                # STEP 61
ACTION: int2 = 1 
int2 = 14 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 62
ACTION: avl1.delete(int2) 
int2 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f15908> : <type 'instance'>
avl_REF1 = set([8, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl2.delete(int2)                                                       # STEP 63
ACTION: avl2.delete(int2) 
int2 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105818680> : <type 'instance'>
avl_REF2 = set([12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl1.delete(int2)                                                       # STEP 64
ACTION: avl1.delete(int2) 
int2 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f15908> : <type 'instance'>
avl_REF1 = set([8, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl2.insert(int2)                                                       # STEP 65
ACTION: avl2.insert(int2) 
int2 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105818680> : <type 'instance'>
avl_REF2 = set([12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([1, 5, 12]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 66
ACTION: avl2.insert(int1) 
int1 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105818680> : <type 'instance'>
avl_REF2 = set([1, 5, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([1, 5, 11, 12]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 67
ACTION: avl2.delete(int2) 
int2 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105818680> : <type 'instance'>
avl_REF2 = set([1, 5, 11, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([5, 11, 12]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104f264d0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #4 STEP #5 (0:00:30.006739) Fri Apr 28 07:42:59 2017 [ 159 stmts 210 branches ]
  11 [2:0]
-- < 8 [1:1]
---- < 1 [0:0] L
-- > 16 [1:0]
---- < 12 [0:0] L
---- > 19 [0:0] L
set([1, 8, 11, 12, 16, 19])
  11 [2:0]
-- < 5 [1:0]
---- < 1 [0:0] L
---- > 8 [0:0] L
-- > 16 [1:0]
---- < 12 [0:0] L
---- > 19 [0:0] L
set([1, 5, 8, 11, 12, 16, 19])
  11 [3:0]
-- < 5 [2:-1]
---- < 1 [0:0] L
---- > 8 [1:-1]
------ > 10 [0:0] L
-- > 16 [2:-1]
---- < 12 [0:0] L
---- > 19 [1:1]
------ < 17 [0:0] L
set([1, 5, 8, 10, 11, 12, 16, 17, 19])
  11 [3:0]
-- < 5 [2:-1]
---- < 1 [0:0] L
---- > 8 [1:-1]
------ > 10 [0:0] L
-- > 16 [2:-1]
---- < 12 [0:0] L
---- > 19 [1:1]
------ < 17 [0:0] L
set([1, 5, 8, 10, 11, 12, 16, 17, 19])
  11 [3:-1]
-- < 5 [1:0]
---- < 1 [0:0] L
---- > 8 [0:0] L
-- > 16 [2:-1]
---- < 12 [0:0] L
---- > 19 [1:1]
------ < 17 [0:0] L
set([1, 5, 8, 11, 12, 16, 17, 19])
  11 [3:-1]
-- < 5 [1:0]
---- < 1 [0:0] L
---- > 8 [0:0] L
-- > 16 [2:-1]
---- < 12 [0:0] L
---- > 19 [1:1]
------ < 17 [0:0] L
set([1, 5, 8, 11, 12, 16, 17, 19])
  11 [2:0]
-- < 5 [1:0]
---- < 1 [0:0] L
---- > 8 [0:0] L
-- > 17 [1:-1]
---- > 19 [0:0] L
set([1, 5, 8, 11, 17, 19])
  11 [2:0]
-- < 5 [1:0]
---- < 1 [0:0] L
---- > 8 [0:0] L
-- > 17 [1:0]
---- < 16 [0:0] L
---- > 19 [0:0] L
set([1, 5, 8, 11, 16, 17, 19])
  11 [2:0]
-- < 1 [1:-1]
---- > 7 [0:0] L
-- > 16 [1:0]
---- < 13 [0:0] L
---- > 19 [0:0] L
set([1, 7, 11, 13, 16, 19])
  11 [2:0]
-- < 1 [1:-1]
---- > 7 [0:0] L
-- > 16 [1:0]
---- < 13 [0:0] L
---- > 19 [0:0] L
set([1, 7, 11, 13, 16, 19])
  10 [2:0]
-- < 2 [1:0]
---- < 1 [0:0] L
---- > 9 [0:0] L
-- > 15 [1:1]
---- < 12 [0:0] L
set([1, 2, 9, 10, 12, 15])
  11 [3:1]
-- < 2 [2:-1]
---- < 1 [0:0] L
---- > 9 [1:-1]
------ > 10 [0:0] L
-- > 12 [1:-1]
---- > 15 [0:0] L
set([1, 2, 9, 10, 11, 12, 15])
  11 [3:1]
-- < 4 [2:0]
---- < 2 [1:1]
------ < 1 [0:0] L
---- > 9 [1:-1]
------ > 10 [0:0] L
-- > 15 [1:0]
---- < 12 [0:0] L
---- > 20 [0:0] L
set([1, 2, 4, 9, 10, 11, 12, 15, 20])
  11 [3:0]
-- < 4 [2:1]
---- < 2 [1:1]
------ < 1 [0:0] L
---- > 9 [0:0] L
-- > 15 [2:0]
---- < 12 [1:-1]
------ > 13 [0:0] L
---- > 18 [1:0]
------ < 17 [0:0] L
------ > 20 [0:0] L
set([1, 2, 4, 9, 11, 12, 13, 15, 17, 18, 20])
  11 [3:0]
-- < 4 [2:-1]
---- < 1 [0:0] L
---- > 9 [1:1]
------ < 8 [0:0] L
-- > 15 [2:0]
---- < 12 [1:-1]
------ > 13 [0:0] L
---- > 18 [1:0]
------ < 17 [0:0] L
------ > 20 [0:0] L
set([1, 4, 8, 9, 11, 12, 13, 15, 17, 18, 20])
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 62
STOPPING TESTING DUE TO TIMEOUT
8.51713607058 PERCENT COVERED
60.222053051 TOTAL RUNTIME
7 EXECUTED
630 TOTAL TEST OPERATIONS
26.9311430454 TIME SPENT EXECUTING TEST OPERATIONS
0.0674405097961 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
27.0780210495 TIME SPENT CHECKING PROPERTIES
54.0091640949 TOTAL TIME SPENT RUNNING SUT
0.00433683395386 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int2 = 15                                                                # STEP 0
int1 = 5                                                                 # STEP 1
int3 = 8                                                                 # STEP 2
int0 = 15                                                                # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
result = avl2.find(int1)                                                 # STEP 5
result = avl2.inorder()                                                  # STEP 6
avl2.insert(int3)                                                        # STEP 7
avl2.insert(int3)                                                        # STEP 8
avl2.insert(int1)                                                        # STEP 9
result = avl2.inorder()                                                 # STEP 10
result = avl2.find(int1)                                                # STEP 11
int3 = 12                                                               # STEP 12
avl2.insert(int0)                                                       # STEP 13
avl2.insert(int1)                                                       # STEP 14
avl2.insert(int2)                                                       # STEP 15
int1 = 18                                                               # STEP 16
avl2.insert(int1)                                                       # STEP 17
avl2.insert(int1)                                                       # STEP 18
avl2.insert(int3)                                                       # STEP 19
int2 = 10                                                               # STEP 20
avl2.delete(int0)                                                       # STEP 21
avl2.delete(int2)                                                       # STEP 22
avl2.delete(int1)                                                       # STEP 23
result = avl2.inorder()                                                 # STEP 24
avl2.delete(int2)                                                       # STEP 25
result = avl2.inorder()                                                 # STEP 26
avl2.delete(int3)                                                       # STEP 27
avl2.insert(int3)                                                       # STEP 28
int3 = 12                                                               # STEP 29
avl2.insert(int1)                                                       # STEP 30
avl2.delete(int3)                                                       # STEP 31
int2 = 3                                                                # STEP 32
int0 = 14                                                               # STEP 33
result = avl2.find(int1)                                                # STEP 34
avl1 = avl.AVLTree()                                                    # STEP 35
avl1.delete(int1)                                                       # STEP 36
avl1.delete(int2)                                                       # STEP 37
result = avl2.inorder()                                                 # STEP 38
int2 = 8                                                                # STEP 39
result = avl1.inorder()                                                 # STEP 40
avl2.insert(int3)                                                       # STEP 41
avl1.insert(int0)                                                       # STEP 42
avl2.insert(int1)                                                       # STEP 43
avl1.insert(int0)                                                       # STEP 44
avl1.delete(int3)                                                       # STEP 45
avl2.insert(int3)                                                       # STEP 46
avl2.delete(int1)                                                       # STEP 47
avl1 == avl1                                                            # STEP 48
int1 = 16                                                               # STEP 49
avl2.delete(int2)                                                       # STEP 50
avl1.insert(int2)                                                       # STEP 51
int2 = 14                                                               # STEP 52
int0 = 6                                                                # STEP 53
int3 = 8                                                                # STEP 54
result = avl2.inorder()                                                 # STEP 55
avl1.insert(int1)                                                       # STEP 56
int1 = 11                                                               # STEP 57
avl1.delete(int2)                                                       # STEP 58
result = avl2.inorder()                                                 # STEP 59
result = avl2.inorder()                                                 # STEP 60
int2 = 1                                                                # STEP 61
avl1.delete(int2)                                                       # STEP 62
avl2.delete(int2)                                                       # STEP 63
avl1.delete(int2)                                                       # STEP 64
avl2.insert(int2)                                                       # STEP 65
avl2.insert(int1)                                                       # STEP 66
avl2.delete(int2)                                                       # STEP 67
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104f264d0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
214 BRANCHES COVERED
161 STATEMENTS COVERED

Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.62250.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  10 [2:0]
-- < 8 [1:1]
---- < 3 [0:0] L
-- > 19 [1:0]
---- < 11 [0:0] L
---- > 20 [0:0] L
set([3, 8, 10, 11, 19, 20])
  10 [3:-1]
-- < 8 [1:1]
---- < 3 [0:0] L
-- > 19 [2:1]
---- < 11 [1:-1]
------ > 18 [0:0] L
---- > 20 [0:0] L
set([3, 8, 10, 11, 18, 19, 20])
  10 [3:-1]
-- < 8 [1:1]
---- < 3 [0:0] L
-- > 19 [2:1]
---- < 11 [1:-1]
------ > 18 [0:0] L
---- > 20 [0:0] L
set([3, 8, 10, 11, 18, 19, 20])
  10 [3:-1]
-- < 8 [1:1]
---- < 3 [0:0] L
-- > 19 [2:1]
---- < 11 [1:-1]
------ > 18 [0:0] L
---- > 20 [0:0] L
set([3, 8, 10, 11, 18, 19, 20])
  10 [3:-1]
-- < 3 [1:0]
---- < 1 [0:0] L
---- > 8 [0:0] L
-- > 19 [2:1]
---- < 12 [1:0]
------ < 11 [0:0] L
------ > 18 [0:0] L
---- > 20 [0:0] L
set([1, 3, 8, 10, 11, 12, 18, 19, 20])
  9 [2:0]
-- < 4 [1:0]
---- < 1 [0:0] L
---- > 5 [0:0] L
-- > 10 [1:-1]
---- > 19 [0:0] L
set([1, 4, 5, 9, 10, 19])
  9 [2:0]
-- < 4 [1:0]
---- < 1 [0:0] L
---- > 5 [0:0] L
-- > 10 [1:-1]
---- > 19 [0:0] L
set([1, 4, 5, 9, 10, 19])
  9 [2:0]
-- < 4 [1:0]
---- < 1 [0:0] L
---- > 5 [0:0] L
-- > 10 [1:-1]
---- > 19 [0:0] L
set([1, 4, 5, 9, 10, 19])
  9 [2:0]
-- < 4 [1:0]
---- < 1 [0:0] L
---- > 5 [0:0] L
-- > 10 [1:-1]
---- > 19 [0:0] L
set([1, 4, 5, 9, 10, 19])
  9 [2:0]
-- < 4 [1:0]
---- < 1 [0:0] L
---- > 5 [0:0] L
-- > 15 [1:0]
---- < 10 [0:0] L
---- > 19 [0:0] L
set([1, 4, 5, 9, 10, 15, 19])
  9 [2:0]
-- < 4 [1:0]
---- < 1 [0:0] L
---- > 5 [0:0] L
-- > 15 [1:0]
---- < 10 [0:0] L
---- > 19 [0:0] L
set([1, 4, 5, 9, 10, 15, 19])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102e8b908>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
Original test has 38 steps

SAVING TEST AS failure.62250.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 13                                                                # STEP 0
ACTION: int1 = 13 
int1 = None : <type 'NoneType'>
=> int1 = 13 : <type 'int'>
==================================================
int2 = 11                                                                # STEP 1
ACTION: int2 = 11 
int2 = None : <type 'NoneType'>
=> int2 = 11 : <type 'int'>
==================================================
int3 = 3                                                                 # STEP 2
ACTION: int3 = 3 
int3 = None : <type 'NoneType'>
=> int3 = 3 : <type 'int'>
==================================================
int0 = 5                                                                 # STEP 3
ACTION: int0 = 5 
int0 = None : <type 'NoneType'>
=> int0 = 5 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x102e323b0> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.delete(int3)                                                        # STEP 5
ACTION: avl1.delete(int3) 
int3 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102e323b0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int3 = 13                                                                # STEP 6
ACTION: int3 = 13 
int3 = 3 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
avl1.insert(int1)                                                        # STEP 7
ACTION: avl1.insert(int1) 
int1 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102e323b0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([13]) : <type 'set'>
==================================================
int1 = 17                                                                # STEP 8
ACTION: int1 = 17 
int1 = 13 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
avl1.delete(int1)                                                        # STEP 9
ACTION: avl1.delete(int1) 
int1 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102e323b0> : <type 'instance'>
avl_REF1 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.insert(int1)                                                       # STEP 10
ACTION: avl1.insert(int1) 
int1 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102e323b0> : <type 'instance'>
avl_REF1 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([17, 13]) : <type 'set'>
==================================================
int1 = 13                                                               # STEP 11
ACTION: int1 = 13 
int1 = 17 : <type 'int'>
=> int1 = 13 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 12
ACTION: avl1.insert(int0) 
int0 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102e323b0> : <type 'instance'>
avl_REF1 = set([17, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([17, 13, 5]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 13
ACTION: avl1.insert(int2) 
int2 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102e323b0> : <type 'instance'>
avl_REF1 = set([17, 13, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([17, 11, 13, 5]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 14
ACTION: avl1.insert(int0) 
int0 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102e323b0> : <type 'instance'>
avl_REF1 = set([17, 11, 13, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1 == avl1                                                            # STEP 15
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x102e323b0> : <type 'instance'>
avl_REF1 = set([17, 11, 13, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.delete(int2)                                                       # STEP 16
ACTION: avl1.delete(int2) 
int2 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102e323b0> : <type 'instance'>
avl_REF1 = set([17, 11, 13, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([17, 13, 5]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 17
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x102e323b0> : <type 'instance'>
avl_REF1 = set([17, 13, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int0 = 8                                                                # STEP 18
ACTION: int0 = 8 
int0 = 5 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 19
ACTION: avl1.insert(int3) 
int3 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102e323b0> : <type 'instance'>
avl_REF1 = set([17, 13, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
avl1.insert(int1)                                                       # STEP 20
ACTION: avl1.insert(int1) 
int1 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102e323b0> : <type 'instance'>
avl_REF1 = set([17, 13, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl1.delete(int1)                                                       # STEP 21
ACTION: avl1.delete(int1) 
int1 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102e323b0> : <type 'instance'>
avl_REF1 = set([17, 13, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([17, 5]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 22
ACTION: avl1.delete(int2) 
int2 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102e323b0> : <type 'instance'>
avl_REF1 = set([17, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int1 = 13                                                               # STEP 23
ACTION: int1 = 13 
int1 = 13 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 24
ACTION: avl1.delete(int3) 
int3 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102e323b0> : <type 'instance'>
avl_REF1 = set([17, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.insert(int3)                                                       # STEP 25
ACTION: avl1.insert(int3) 
int3 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102e323b0> : <type 'instance'>
avl_REF1 = set([17, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([17, 13, 5]) : <type 'set'>
==================================================
int3 = 4                                                                # STEP 26
ACTION: int3 = 4 
int3 = 13 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
int2 = 9                                                                # STEP 27
ACTION: int2 = 9 
int2 = 11 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
result = avl1.find(int3)                                                # STEP 28
ACTION: result = avl1.find(int3) 
int3 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102e323b0> : <type 'instance'>
avl_REF1 = set([17, 13, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
int3 = 20                                                               # STEP 29
ACTION: int3 = 20 
int3 = 4 : <type 'int'>
=> int3 = 20 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 30
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x102e323b0> : <type 'instance'>
avl_REF1 = set([17, 13, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int0)                                                       # STEP 31
ACTION: avl1.insert(int0) 
int0 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102e323b0> : <type 'instance'>
avl_REF1 = set([17, 13, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([8, 17, 13, 5]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 32
ACTION: avl1.insert(int2) 
int2 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102e323b0> : <type 'instance'>
avl_REF1 = set([8, 17, 13, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([5, 8, 9, 13, 17]) : <type 'set'>
==================================================
int2 = 15                                                               # STEP 33
ACTION: int2 = 15 
int2 = 9 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
result = avl1.find(int1)                                                # STEP 34
ACTION: result = avl1.find(int1) 
int1 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102e323b0> : <type 'instance'>
avl_REF1 = set([5, 8, 9, 13, 17]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int0 = 16                                                               # STEP 35
ACTION: int0 = 16 
int0 = 8 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 36
ACTION: avl1.delete(int0) 
int0 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102e323b0> : <type 'instance'>
avl_REF1 = set([5, 8, 9, 13, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.delete(int1)                                                       # STEP 37
ACTION: avl1.delete(int1) 
int1 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102e323b0> : <type 'instance'>
avl_REF1 = set([5, 8, 9, 13, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([5, 8, 9, 17]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102e16d88>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #4 STEP #15 (0:00:30.044645) Mon May  1 18:03:03 2017 [ 161 stmts 214 branches ]
  12 [3:1]
-- < 6 [2:-1]
---- < 3 [0:0] L
---- > 11 [1:1]
------ < 9 [0:0] L
-- > 15 [1:1]
---- < 14 [0:0] L
set([3, 6, 9, 11, 12, 14, 15])
  12 [3:1]
-- < 6 [2:-1]
---- < 3 [0:0] L
---- > 11 [1:1]
------ < 9 [0:0] L
-- > 15 [1:1]
---- < 14 [0:0] L
set([3, 6, 9, 11, 12, 14, 15])
  12 [3:1]
-- < 6 [2:-1]
---- < 3 [0:0] L
---- > 11 [1:1]
------ < 9 [0:0] L
-- > 15 [1:1]
---- < 14 [0:0] L
set([3, 6, 9, 11, 12, 14, 15])
  12 [3:1]
-- < 6 [2:0]
---- < 3 [1:1]
------ < 1 [0:0] L
---- > 11 [1:1]
------ < 9 [0:0] L
-- > 15 [1:1]
---- < 14 [0:0] L
set([1, 3, 6, 9, 11, 12, 14, 15])
  12 [3:1]
-- < 6 [2:0]
---- < 3 [1:1]
------ < 1 [0:0] L
---- > 11 [1:1]
------ < 9 [0:0] L
-- > 15 [1:0]
---- < 14 [0:0] L
---- > 20 [0:0] L
set([1, 3, 6, 9, 11, 12, 14, 15, 20])
  12 [3:1]
-- < 6 [2:0]
---- < 3 [1:1]
------ < 1 [0:0] L
---- > 11 [1:1]
------ < 9 [0:0] L
-- > 15 [1:0]
---- < 14 [0:0] L
---- > 20 [0:0] L
set([1, 3, 6, 9, 11, 12, 14, 15, 20])
  12 [3:1]
-- < 6 [2:0]
---- < 3 [1:1]
------ < 1 [0:0] L
---- > 11 [1:1]
------ < 9 [0:0] L
-- > 15 [1:0]
---- < 14 [0:0] L
---- > 20 [0:0] L
set([1, 3, 6, 9, 11, 12, 14, 15, 20])
  10 [2:0]
-- < 6 [1:0]
---- < 5 [0:0] L
---- > 9 [0:0] L
-- > 11 [1:-1]
---- > 18 [0:0] L
set([5, 6, 9, 10, 11, 18])
  10 [2:0]
-- < 6 [1:0]
---- < 5 [0:0] L
---- > 9 [0:0] L
-- > 11 [1:-1]
---- > 18 [0:0] L
set([5, 6, 9, 10, 11, 18])
  10 [2:0]
-- < 6 [1:0]
---- < 5 [0:0] L
---- > 9 [0:0] L
-- > 11 [1:-1]
---- > 18 [0:0] L
set([5, 6, 9, 10, 11, 18])
  10 [2:0]
-- < 6 [1:0]
---- < 5 [0:0] L
---- > 9 [0:0] L
-- > 11 [1:-1]
---- > 18 [0:0] L
set([5, 6, 9, 10, 11, 18])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10293f1b8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
Original test has 38 steps

SAVING TEST AS failure.62250.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 13                                                                # STEP 0
ACTION: int3 = 13 
int3 = None : <type 'NoneType'>
=> int3 = 13 : <type 'int'>
==================================================
int1 = 1                                                                 # STEP 1
ACTION: int1 = 1 
int1 = None : <type 'NoneType'>
=> int1 = 1 : <type 'int'>
==================================================
int2 = 18                                                                # STEP 2
ACTION: int2 = 18 
int2 = None : <type 'NoneType'>
=> int2 = 18 : <type 'int'>
==================================================
int0 = 12                                                                # STEP 3
ACTION: int0 = 12 
int0 = None : <type 'NoneType'>
=> int0 = 12 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 4
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x10293f7e8> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
result = avl0.find(int2)                                                 # STEP 5
ACTION: result = avl0.find(int2) 
int2 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10293f7e8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl0.insert(int3)                                                        # STEP 6
ACTION: avl0.insert(int3) 
int3 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10293f7e8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([13]) : <type 'set'>
==================================================
avl0.delete(int2)                                                        # STEP 7
ACTION: avl0.delete(int2) 
int2 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10293f7e8> : <type 'instance'>
avl_REF0 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl1 = avl.AVLTree()                                                     # STEP 8
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x102ee33b0> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.insert(int1)                                                        # STEP 9
ACTION: avl1.insert(int1) 
int1 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102ee33b0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([1]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 10
ACTION: avl0.insert(int1) 
int1 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10293f7e8> : <type 'instance'>
avl_REF0 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([1, 13]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 11
ACTION: avl1.delete(int3) 
int3 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102ee33b0> : <type 'instance'>
avl_REF1 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int1 = 12                                                               # STEP 12
ACTION: int1 = 12 
int1 = 1 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
int3 = 9                                                                # STEP 13
ACTION: int3 = 9 
int3 = 13 : <type 'int'>
=> int3 = 9 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 14
ACTION: avl0.delete(int1) 
int1 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10293f7e8> : <type 'instance'>
avl_REF0 = set([1, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
result = avl1.inorder()                                                 # STEP 15
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x102ee33b0> : <type 'instance'>
avl_REF1 = set([1]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl0.delete(int0)                                                       # STEP 16
ACTION: avl0.delete(int0) 
int0 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10293f7e8> : <type 'instance'>
avl_REF0 = set([1, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl1.delete(int0)                                                       # STEP 17
ACTION: avl1.delete(int0) 
int0 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102ee33b0> : <type 'instance'>
avl_REF1 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl0.insert(int1)                                                       # STEP 18
ACTION: avl0.insert(int1) 
int1 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10293f7e8> : <type 'instance'>
avl_REF0 = set([1, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([1, 12, 13]) : <type 'set'>
==================================================
result = avl1.find(int3)                                                # STEP 19
ACTION: result = avl1.find(int3) 
int3 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102ee33b0> : <type 'instance'>
avl_REF1 = set([1]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
int0 = 9                                                                # STEP 20
ACTION: int0 = 9 
int0 = 12 : <type 'int'>
=> int0 = 9 : <type 'int'>
==================================================
int1 = 17                                                               # STEP 21
ACTION: int1 = 17 
int1 = 12 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 22
ACTION: avl1.delete(int3) 
int3 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102ee33b0> : <type 'instance'>
avl_REF1 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
result = avl1.inorder()                                                 # STEP 23
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x102ee33b0> : <type 'instance'>
avl_REF1 = set([1]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl0.delete(int2)                                                       # STEP 24
ACTION: avl0.delete(int2) 
int2 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10293f7e8> : <type 'instance'>
avl_REF0 = set([1, 12, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int2 = 16                                                               # STEP 25
ACTION: int2 = 16 
int2 = 18 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
int3 = 8                                                                # STEP 26
ACTION: int3 = 8 
int3 = 9 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 27
ACTION: avl0.insert(int1) 
int1 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10293f7e8> : <type 'instance'>
avl_REF0 = set([1, 12, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([1, 12, 13, 17]) : <type 'set'>
==================================================
int1 = 1                                                                # STEP 28
ACTION: int1 = 1 
int1 = 17 : <type 'int'>
=> int1 = 1 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 29
ACTION: avl0.delete(int2) 
int2 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10293f7e8> : <type 'instance'>
avl_REF0 = set([1, 12, 13, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int2 = 2                                                                # STEP 30
ACTION: int2 = 2 
int2 = 16 : <type 'int'>
=> int2 = 2 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 31
ACTION: avl0.insert(int1) 
int1 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10293f7e8> : <type 'instance'>
avl_REF0 = set([1, 12, 13, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
result = avl0.inorder()                                                 # STEP 32
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x10293f7e8> : <type 'instance'>
avl_REF0 = set([1, 12, 13, 17]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
result = avl0.find(int1)                                                # STEP 33
ACTION: result = avl0.find(int1) 
int1 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10293f7e8> : <type 'instance'>
avl_REF0 = set([1, 12, 13, 17]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl1.delete(int1)                                                       # STEP 34
ACTION: avl1.delete(int1) 
int1 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102ee33b0> : <type 'instance'>
avl_REF1 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl0 == avl0                                                            # STEP 35
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x10293f7e8> : <type 'instance'>
avl_REF0 = set([1, 12, 13, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl1.insert(int3)                                                       # STEP 36
ACTION: avl1.insert(int3) 
int3 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102ee33b0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([8]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 37
ACTION: avl0.delete(int1) 
int1 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10293f7e8> : <type 'instance'>
avl_REF0 = set([1, 12, 13, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([12, 13, 17]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102f762d8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 29
STOPPING TESTING DUE TO TIMEOUT
8.21242019733 PERCENT COVERED
60.2266049385 TOTAL RUNTIME
7 EXECUTED
505 TOTAL TEST OPERATIONS
26.0077574253 TIME SPENT EXECUTING TEST OPERATIONS
0.0596716403961 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
26.1322798729 TIME SPENT CHECKING PROPERTIES
52.1400372982 TOTAL TIME SPENT RUNNING SUT
0.00465321540833 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
2 FAILED
0 REPEATS OF FAILURES
2 ACTUAL DISTINCT FAILURES

FAILURE 0
int1 = 13                                                                # STEP 0
int2 = 11                                                                # STEP 1
int3 = 3                                                                 # STEP 2
int0 = 5                                                                 # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
avl1.delete(int3)                                                        # STEP 5
int3 = 13                                                                # STEP 6
avl1.insert(int1)                                                        # STEP 7
int1 = 17                                                                # STEP 8
avl1.delete(int1)                                                        # STEP 9
avl1.insert(int1)                                                       # STEP 10
int1 = 13                                                               # STEP 11
avl1.insert(int0)                                                       # STEP 12
avl1.insert(int2)                                                       # STEP 13
avl1.insert(int0)                                                       # STEP 14
avl1 == avl1                                                            # STEP 15
avl1.delete(int2)                                                       # STEP 16
result = avl1.inorder()                                                 # STEP 17
int0 = 8                                                                # STEP 18
avl1.insert(int3)                                                       # STEP 19
avl1.insert(int1)                                                       # STEP 20
avl1.delete(int1)                                                       # STEP 21
avl1.delete(int2)                                                       # STEP 22
int1 = 13                                                               # STEP 23
avl1.delete(int3)                                                       # STEP 24
avl1.insert(int3)                                                       # STEP 25
int3 = 4                                                                # STEP 26
int2 = 9                                                                # STEP 27
result = avl1.find(int3)                                                # STEP 28
int3 = 20                                                               # STEP 29
result = avl1.inorder()                                                 # STEP 30
avl1.insert(int0)                                                       # STEP 31
avl1.insert(int2)                                                       # STEP 32
int2 = 15                                                               # STEP 33
result = avl1.find(int1)                                                # STEP 34
int0 = 16                                                               # STEP 35
avl1.delete(int0)                                                       # STEP 36
avl1.delete(int1)                                                       # STEP 37
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102e16d88>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE 1
int3 = 13                                                                # STEP 0
int1 = 1                                                                 # STEP 1
int2 = 18                                                                # STEP 2
int0 = 12                                                                # STEP 3
avl0 = avl.AVLTree()                                                     # STEP 4
result = avl0.find(int2)                                                 # STEP 5
avl0.insert(int3)                                                        # STEP 6
avl0.delete(int2)                                                        # STEP 7
avl1 = avl.AVLTree()                                                     # STEP 8
avl1.insert(int1)                                                        # STEP 9
avl0.insert(int1)                                                       # STEP 10
avl1.delete(int3)                                                       # STEP 11
int1 = 12                                                               # STEP 12
int3 = 9                                                                # STEP 13
avl0.delete(int1)                                                       # STEP 14
result = avl1.inorder()                                                 # STEP 15
avl0.delete(int0)                                                       # STEP 16
avl1.delete(int0)                                                       # STEP 17
avl0.insert(int1)                                                       # STEP 18
result = avl1.find(int3)                                                # STEP 19
int0 = 9                                                                # STEP 20
int1 = 17                                                               # STEP 21
avl1.delete(int3)                                                       # STEP 22
result = avl1.inorder()                                                 # STEP 23
avl0.delete(int2)                                                       # STEP 24
int2 = 16                                                               # STEP 25
int3 = 8                                                                # STEP 26
avl0.insert(int1)                                                       # STEP 27
int1 = 1                                                                # STEP 28
avl0.delete(int2)                                                       # STEP 29
int2 = 2                                                                # STEP 30
avl0.insert(int1)                                                       # STEP 31
result = avl0.inorder()                                                 # STEP 32
result = avl0.find(int1)                                                # STEP 33
avl1.delete(int1)                                                       # STEP 34
avl0 == avl0                                                            # STEP 35
avl1.insert(int3)                                                       # STEP 36
avl0.delete(int1)                                                       # STEP 37
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102f762d8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
214 BRANCHES COVERED
161 STATEMENTS COVERED

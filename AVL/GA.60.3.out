Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.13740.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  6 [3:-1]
-- < 4 [1:0]
---- < 2 [0:0] L
---- > 5 [0:0] L
-- > 18 [2:1]
---- < 10 [1:1]
------ < 9 [0:0] L
---- > 20 [0:0] L
set([2, 4, 5, 6, 9, 10, 18, 20])
  6 [3:-1]
-- < 4 [1:0]
---- < 2 [0:0] L
---- > 5 [0:0] L
-- > 18 [2:1]
---- < 10 [1:1]
------ < 9 [0:0] L
---- > 20 [0:0] L
set([2, 4, 5, 6, 9, 10, 18, 20])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103914b00>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
Original test has 99 steps

SAVING TEST AS failure.13740.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 18                                                                # STEP 0
ACTION: int3 = 18 
int3 = None : <type 'NoneType'>
=> int3 = 18 : <type 'int'>
==================================================
int1 = 15                                                                # STEP 1
ACTION: int1 = 15 
int1 = None : <type 'NoneType'>
=> int1 = 15 : <type 'int'>
==================================================
int0 = 18                                                                # STEP 2
ACTION: int0 = 18 
int0 = None : <type 'NoneType'>
=> int0 = 18 : <type 'int'>
==================================================
int2 = 18                                                                # STEP 3
ACTION: int2 = 18 
int2 = None : <type 'NoneType'>
=> int2 = 18 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 4
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x1038f45f0> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 5
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x103d30518> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl0.insert(int0)                                                        # STEP 6
ACTION: avl0.insert(int0) 
int0 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1038f45f0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([18]) : <type 'set'>
==================================================
int0 = 5                                                                 # STEP 7
ACTION: int0 = 5 
int0 = 18 : <type 'int'>
=> int0 = 5 : <type 'int'>
==================================================
avl0.insert(int3)                                                        # STEP 8
ACTION: avl0.insert(int3) 
int3 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1038f45f0> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
result = avl1.find(int1)                                                 # STEP 9
ACTION: result = avl1.find(int1) 
int1 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103d30518> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int3 = 16                                                               # STEP 10
ACTION: int3 = 16 
int3 = 18 : <type 'int'>
=> int3 = 16 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 11
ACTION: avl0.delete(int1) 
int1 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1038f45f0> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int1 = 8                                                                # STEP 12
ACTION: int1 = 8 
int1 = 15 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
avl1 == avl0                                                            # STEP 13
ACTION: avl1 == avl0 
avl1 = <avlbug2.AVLTree instance at 0x103d30518> : <type 'instance'>
avl0 = <avlbug2.AVLTree instance at 0x1038f45f0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
result = avl1.inorder()                                                 # STEP 14
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x103d30518> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
result = avl1.find(int2)                                                # STEP 15
ACTION: result = avl1.find(int2) 
int2 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103d30518> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
result = avl0.find(int2)                                                # STEP 16
ACTION: result = avl0.find(int2) 
int2 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1038f45f0> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl1.insert(int1)                                                       # STEP 17
ACTION: avl1.insert(int1) 
int1 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103d30518> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([8]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 18
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x103d30518> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
result = avl1.find(int1)                                                # STEP 19
ACTION: result = avl1.find(int1) 
int1 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103d30518> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl0.delete(int3)                                                       # STEP 20
ACTION: avl0.delete(int3) 
int3 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1038f45f0> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int2 = 6                                                                # STEP 21
ACTION: int2 = 6 
int2 = 18 : <type 'int'>
=> int2 = 6 : <type 'int'>
==================================================
int3 = 14                                                               # STEP 22
ACTION: int3 = 14 
int3 = 16 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
int1 = 16                                                               # STEP 23
ACTION: int1 = 16 
int1 = 8 : <type 'int'>
=> int1 = 16 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 24
ACTION: avl0.insert(int2) 
int2 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1038f45f0> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([18, 6]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 25
ACTION: avl1.delete(int2) 
int2 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103d30518> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int2 = 20                                                               # STEP 26
ACTION: int2 = 20 
int2 = 6 : <type 'int'>
=> int2 = 20 : <type 'int'>
==================================================
avl0 == avl0                                                            # STEP 27
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x1038f45f0> : <type 'instance'>
avl_REF0 = set([18, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
result = avl1.find(int1)                                                # STEP 28
ACTION: result = avl1.find(int1) 
int1 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103d30518> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int1 = 20                                                               # STEP 29
ACTION: int1 = 20 
int1 = 16 : <type 'int'>
=> int1 = 20 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 30
ACTION: avl0.insert(int2) 
int2 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1038f45f0> : <type 'instance'>
avl_REF0 = set([18, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([18, 20, 6]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 31
ACTION: avl0.delete(int0) 
int0 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1038f45f0> : <type 'instance'>
avl_REF0 = set([18, 20, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int0 = 4                                                                # STEP 32
ACTION: int0 = 4 
int0 = 5 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
result = avl0.find(int1)                                                # STEP 33
ACTION: result = avl0.find(int1) 
int1 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1038f45f0> : <type 'instance'>
avl_REF0 = set([18, 20, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
int2 = 18                                                               # STEP 34
ACTION: int2 = 18 
int2 = 20 : <type 'int'>
=> int2 = 18 : <type 'int'>
==================================================
int1 = 7                                                                # STEP 35
ACTION: int1 = 7 
int1 = 20 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 36
ACTION: avl0.delete(int0) 
int0 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1038f45f0> : <type 'instance'>
avl_REF0 = set([18, 20, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.delete(int1)                                                       # STEP 37
ACTION: avl0.delete(int1) 
int1 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1038f45f0> : <type 'instance'>
avl_REF0 = set([18, 20, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.insert(int0)                                                       # STEP 38
ACTION: avl0.insert(int0) 
int0 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1038f45f0> : <type 'instance'>
avl_REF0 = set([18, 20, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([4, 18, 20, 6]) : <type 'set'>
==================================================
int0 = 12                                                               # STEP 39
ACTION: int0 = 12 
int0 = 4 : <type 'int'>
=> int0 = 12 : <type 'int'>
==================================================
int1 = 20                                                               # STEP 40
ACTION: int1 = 20 
int1 = 7 : <type 'int'>
=> int1 = 20 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 41
ACTION: avl1.delete(int2) 
int2 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103d30518> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.delete(int1)                                                       # STEP 42
ACTION: avl1.delete(int1) 
int1 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103d30518> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int1 = 11                                                               # STEP 43
ACTION: int1 = 11 
int1 = 20 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
int2 = 5                                                                # STEP 44
ACTION: int2 = 5 
int2 = 18 : <type 'int'>
=> int2 = 5 : <type 'int'>
==================================================
avl0 == avl0                                                            # STEP 45
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x1038f45f0> : <type 'instance'>
avl_REF0 = set([4, 18, 20, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
result = avl0.find(int1)                                                # STEP 46
ACTION: result = avl0.find(int1) 
int1 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1038f45f0> : <type 'instance'>
avl_REF0 = set([4, 18, 20, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
int1 = 2                                                                # STEP 47
ACTION: int1 = 2 
int1 = 11 : <type 'int'>
=> int1 = 2 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 48
ACTION: avl0.insert(int0) 
int0 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1038f45f0> : <type 'instance'>
avl_REF0 = set([4, 18, 20, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([4, 18, 20, 6, 12]) : <type 'set'>
==================================================
int0 = 5                                                                # STEP 49
ACTION: int0 = 5 
int0 = 12 : <type 'int'>
=> int0 = 5 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 50
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x1038f45f0> : <type 'instance'>
avl_REF0 = set([4, 18, 20, 6, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
result = avl0.find(int0)                                                # STEP 51
ACTION: result = avl0.find(int0) 
int0 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1038f45f0> : <type 'instance'>
avl_REF0 = set([4, 18, 20, 6, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
avl0.insert(int0)                                                       # STEP 52
ACTION: avl0.insert(int0) 
int0 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1038f45f0> : <type 'instance'>
avl_REF0 = set([4, 18, 20, 6, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([4, 5, 6, 12, 18, 20]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 53
ACTION: avl0.insert(int1) 
int1 = 2 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1038f45f0> : <type 'instance'>
avl_REF0 = set([4, 5, 6, 12, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([2, 4, 5, 6, 12, 18, 20]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 54
ACTION: avl0.insert(int2) 
int2 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1038f45f0> : <type 'instance'>
avl_REF0 = set([2, 4, 5, 6, 12, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
int0 = 14                                                               # STEP 55
ACTION: int0 = 14 
int0 = 5 : <type 'int'>
=> int0 = 14 : <type 'int'>
==================================================
int1 = 20                                                               # STEP 56
ACTION: int1 = 20 
int1 = 2 : <type 'int'>
=> int1 = 20 : <type 'int'>
==================================================
int2 = 13                                                               # STEP 57
ACTION: int2 = 13 
int2 = 5 : <type 'int'>
=> int2 = 13 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 58
ACTION: avl1 = avl.AVLTree() 
avl1 = <avlbug2.AVLTree instance at 0x103d30518> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
=> avl1 = <avlbug2.AVLTree instance at 0x103c720e0> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
result = avl1.find(int0)                                                # STEP 59
ACTION: result = avl1.find(int0) 
int0 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103c720e0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
int0 = 16                                                               # STEP 60
ACTION: int0 = 16 
int0 = 14 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
result = avl0.find(int1)                                                # STEP 61
ACTION: result = avl0.find(int1) 
int1 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1038f45f0> : <type 'instance'>
avl_REF0 = set([2, 4, 5, 6, 12, 18, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl1.insert(int3)                                                       # STEP 62
ACTION: avl1.insert(int3) 
int3 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103c720e0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([14]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 63
ACTION: avl1.delete(int1) 
int1 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103c720e0> : <type 'instance'>
avl_REF1 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int3 = 20                                                               # STEP 64
ACTION: int3 = 20 
int3 = 14 : <type 'int'>
=> int3 = 20 : <type 'int'>
==================================================
int1 = 8                                                                # STEP 65
ACTION: int1 = 8 
int1 = 20 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
result = avl0.find(int2)                                                # STEP 66
ACTION: result = avl0.find(int2) 
int2 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1038f45f0> : <type 'instance'>
avl_REF0 = set([2, 4, 5, 6, 12, 18, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
int2 = 10                                                               # STEP 67
ACTION: int2 = 10 
int2 = 13 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 68
ACTION: avl0.insert(int2) 
int2 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1038f45f0> : <type 'instance'>
avl_REF0 = set([2, 4, 5, 6, 12, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([2, 4, 5, 6, 10, 12, 18, 20]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 69
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x103c720e0> : <type 'instance'>
avl_REF1 = set([14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int2 = 8                                                                # STEP 70
ACTION: int2 = 8 
int2 = 10 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 71
ACTION: avl1.insert(int3) 
int3 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103c720e0> : <type 'instance'>
avl_REF1 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([20, 14]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 72
ACTION: avl1.delete(int2) 
int2 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103c720e0> : <type 'instance'>
avl_REF1 = set([20, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.insert(int1)                                                       # STEP 73
ACTION: avl1.insert(int1) 
int1 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103c720e0> : <type 'instance'>
avl_REF1 = set([20, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([8, 20, 14]) : <type 'set'>
==================================================
int3 = 10                                                               # STEP 74
ACTION: int3 = 10 
int3 = 20 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
int2 = 12                                                               # STEP 75
ACTION: int2 = 12 
int2 = 8 : <type 'int'>
=> int2 = 12 : <type 'int'>
==================================================
int1 = 17                                                               # STEP 76
ACTION: int1 = 17 
int1 = 8 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
result = avl1.find(int0)                                                # STEP 77
ACTION: result = avl1.find(int0) 
int0 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103c720e0> : <type 'instance'>
avl_REF1 = set([8, 20, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl0.delete(int2)                                                       # STEP 78
ACTION: avl0.delete(int2) 
int2 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1038f45f0> : <type 'instance'>
avl_REF0 = set([2, 4, 5, 6, 10, 12, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([2, 4, 5, 6, 10, 18, 20]) : <type 'set'>
==================================================
avl1 == avl1                                                            # STEP 79
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x103c720e0> : <type 'instance'>
avl_REF1 = set([8, 20, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
result = avl0.inorder()                                                 # STEP 80
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x1038f45f0> : <type 'instance'>
avl_REF0 = set([2, 4, 5, 6, 10, 18, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int2 = 9                                                                # STEP 81
ACTION: int2 = 9 
int2 = 12 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
int0 = 10                                                               # STEP 82
ACTION: int0 = 10 
int0 = 16 : <type 'int'>
=> int0 = 10 : <type 'int'>
==================================================
avl0 == avl1                                                            # STEP 83
ACTION: avl0 == avl1 
avl0 = <avlbug2.AVLTree instance at 0x1038f45f0> : <type 'instance'>
avl1 = <avlbug2.AVLTree instance at 0x103c720e0> : <type 'instance'>
avl_REF0 = set([2, 4, 5, 6, 10, 18, 20]) : <type 'set'>
avl_REF1 = set([8, 20, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF1 
==================================================
result = avl0.find(int1)                                                # STEP 84
ACTION: result = avl0.find(int1) 
int1 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1038f45f0> : <type 'instance'>
avl_REF0 = set([2, 4, 5, 6, 10, 18, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl1.insert(int1)                                                       # STEP 85
ACTION: avl1.insert(int1) 
int1 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103c720e0> : <type 'instance'>
avl_REF1 = set([8, 20, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([8, 17, 20, 14]) : <type 'set'>
==================================================
int1 = 7                                                                # STEP 86
ACTION: int1 = 7 
int1 = 17 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 87
ACTION: avl0.insert(int2) 
int2 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1038f45f0> : <type 'instance'>
avl_REF0 = set([2, 4, 5, 6, 10, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([2, 4, 5, 6, 9, 10, 18, 20]) : <type 'set'>
==================================================
int2 = 18                                                               # STEP 88
ACTION: int2 = 18 
int2 = 9 : <type 'int'>
=> int2 = 18 : <type 'int'>
==================================================
avl1 == avl0                                                            # STEP 89
ACTION: avl1 == avl0 
avl1 = <avlbug2.AVLTree instance at 0x103c720e0> : <type 'instance'>
avl0 = <avlbug2.AVLTree instance at 0x1038f45f0> : <type 'instance'>
avl_REF1 = set([8, 17, 20, 14]) : <type 'set'>
avl_REF0 = set([2, 4, 5, 6, 9, 10, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
avl0.display()                                                          # STEP 90
ACTION: avl0.display() 
avl0 = <avlbug2.AVLTree instance at 0x1038f45f0> : <type 'instance'>
avl_REF0 = set([2, 4, 5, 6, 9, 10, 18, 20]) : <type 'set'>
  6 [3:-1]
-- < 4 [1:0]
---- < 2 [0:0] L
---- > 5 [0:0] L
-- > 18 [2:1]
---- < 10 [1:1]
------ < 9 [0:0] L
---- > 20 [0:0] L
REFERENCE ACTION: print(avl_REF0) 
set([2, 4, 5, 6, 9, 10, 18, 20])
==================================================
result = avl0.inorder()                                                 # STEP 91
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x1038f45f0> : <type 'instance'>
avl_REF0 = set([2, 4, 5, 6, 9, 10, 18, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.display()                                                          # STEP 92
ACTION: avl0.display() 
avl0 = <avlbug2.AVLTree instance at 0x1038f45f0> : <type 'instance'>
avl_REF0 = set([2, 4, 5, 6, 9, 10, 18, 20]) : <type 'set'>
  6 [3:-1]
-- < 4 [1:0]
---- < 2 [0:0] L
---- > 5 [0:0] L
-- > 18 [2:1]
---- < 10 [1:1]
------ < 9 [0:0] L
---- > 20 [0:0] L
REFERENCE ACTION: print(avl_REF0) 
set([2, 4, 5, 6, 9, 10, 18, 20])
==================================================
avl1 == avl0                                                            # STEP 93
ACTION: avl1 == avl0 
avl1 = <avlbug2.AVLTree instance at 0x103c720e0> : <type 'instance'>
avl0 = <avlbug2.AVLTree instance at 0x1038f45f0> : <type 'instance'>
avl_REF1 = set([8, 17, 20, 14]) : <type 'set'>
avl_REF0 = set([2, 4, 5, 6, 9, 10, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
result = avl0.find(int3)                                                # STEP 94
ACTION: result = avl0.find(int3) 
int3 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1038f45f0> : <type 'instance'>
avl_REF0 = set([2, 4, 5, 6, 9, 10, 18, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
avl0.delete(int1)                                                       # STEP 95
ACTION: avl0.delete(int1) 
int1 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1038f45f0> : <type 'instance'>
avl_REF0 = set([2, 4, 5, 6, 9, 10, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int3 = 18                                                               # STEP 96
ACTION: int3 = 18 
int3 = 10 : <type 'int'>
=> int3 = 18 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 97
ACTION: avl1.delete(int1) 
int1 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103c720e0> : <type 'instance'>
avl_REF1 = set([8, 17, 20, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl0.delete(int3)                                                       # STEP 98
ACTION: avl0.delete(int3) 
int3 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1038f45f0> : <type 'instance'>
avl_REF0 = set([2, 4, 5, 6, 9, 10, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([2, 4, 5, 6, 9, 10, 20]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1038f03f8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x101fa2638>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
Original test has 66 steps

SAVING TEST AS failure.13740.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 19                                                                # STEP 0
ACTION: int2 = 19 
int2 = None : <type 'NoneType'>
=> int2 = 19 : <type 'int'>
==================================================
int3 = 4                                                                 # STEP 1
ACTION: int3 = 4 
int3 = None : <type 'NoneType'>
=> int3 = 4 : <type 'int'>
==================================================
int1 = 20                                                                # STEP 2
ACTION: int1 = 20 
int1 = None : <type 'NoneType'>
=> int1 = 20 : <type 'int'>
==================================================
int0 = 11                                                                # STEP 3
ACTION: int0 = 11 
int0 = None : <type 'NoneType'>
=> int0 = 11 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 4
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x101f922d8> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
result = avl0.inorder()                                                  # STEP 5
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x101f922d8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
result = avl0.find(int1)                                                 # STEP 6
ACTION: result = avl0.find(int1) 
int1 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101f922d8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl0.delete(int3)                                                        # STEP 7
ACTION: avl0.delete(int3) 
int3 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101f922d8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
result = avl0.find(int3)                                                 # STEP 8
ACTION: result = avl0.find(int3) 
int3 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101f922d8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
result = avl0.find(int0)                                                 # STEP 9
ACTION: result = avl0.find(int0) 
int0 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101f922d8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
avl0 = avl.AVLTree()                                                    # STEP 10
ACTION: avl0 = avl.AVLTree() 
avl0 = <avlbug2.AVLTree instance at 0x101f922d8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
=> avl0 = <avlbug2.AVLTree instance at 0x101df5cf8> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
==================================================
int3 = 18                                                               # STEP 11
ACTION: int3 = 18 
int3 = 4 : <type 'int'>
=> int3 = 18 : <type 'int'>
==================================================
int1 = 15                                                               # STEP 12
ACTION: int1 = 15 
int1 = 20 : <type 'int'>
=> int1 = 15 : <type 'int'>
==================================================
int0 = 8                                                                # STEP 13
ACTION: int0 = 8 
int0 = 11 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 14
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x103f656c8> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl0.find(int1)                                                # STEP 15
ACTION: result = avl0.find(int1) 
int1 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101df5cf8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
result = avl0.inorder()                                                 # STEP 16
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x101df5cf8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0 == avl2                                                            # STEP 17
ACTION: avl0 == avl2 
avl0 = <avlbug2.AVLTree instance at 0x101df5cf8> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x103f656c8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
avl0 == avl0                                                            # STEP 18
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x101df5cf8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
result = avl2.find(int3)                                                # STEP 19
ACTION: result = avl2.find(int3) 
int3 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103f656c8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
int1 = 1                                                                # STEP 20
ACTION: int1 = 1 
int1 = 15 : <type 'int'>
=> int1 = 1 : <type 'int'>
==================================================
result = avl0.find(int3)                                                # STEP 21
ACTION: result = avl0.find(int3) 
int3 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101df5cf8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
avl0 == avl2                                                            # STEP 22
ACTION: avl0 == avl2 
avl0 = <avlbug2.AVLTree instance at 0x101df5cf8> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x103f656c8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
result = avl2.find(int1)                                                # STEP 23
ACTION: result = avl2.find(int1) 
int1 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103f656c8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int1 = 4                                                                # STEP 24
ACTION: int1 = 4 
int1 = 1 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
result = avl0.find(int2)                                                # STEP 25
ACTION: result = avl0.find(int2) 
int2 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101df5cf8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
int2 = 15                                                               # STEP 26
ACTION: int2 = 15 
int2 = 19 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
int3 = 14                                                               # STEP 27
ACTION: int3 = 14 
int3 = 18 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
result = avl2.find(int2)                                                # STEP 28
ACTION: result = avl2.find(int2) 
int2 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103f656c8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl0.insert(int1)                                                       # STEP 29
ACTION: avl0.insert(int1) 
int1 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101df5cf8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([4]) : <type 'set'>
==================================================
int1 = 10                                                               # STEP 30
ACTION: int1 = 10 
int1 = 4 : <type 'int'>
=> int1 = 10 : <type 'int'>
==================================================
int2 = 2                                                                # STEP 31
ACTION: int2 = 2 
int2 = 15 : <type 'int'>
=> int2 = 2 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 32
ACTION: avl0.insert(int0) 
int0 = 8 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101df5cf8> : <type 'instance'>
avl_REF0 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([8, 4]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 33
ACTION: avl2.delete(int0) 
int0 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103f656c8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int0 = 7                                                                # STEP 34
ACTION: int0 = 7 
int0 = 8 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 35
ACTION: avl2.delete(int2) 
int2 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103f656c8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2 == avl2                                                            # STEP 36
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x103f656c8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
int2 = 11                                                               # STEP 37
ACTION: int2 = 11 
int2 = 2 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
result = avl0.find(int2)                                                # STEP 38
ACTION: result = avl0.find(int2) 
int2 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101df5cf8> : <type 'instance'>
avl_REF0 = set([8, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl0.insert(int3)                                                       # STEP 39
ACTION: avl0.insert(int3) 
int3 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101df5cf8> : <type 'instance'>
avl_REF0 = set([8, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([8, 4, 14]) : <type 'set'>
==================================================
int2 = 19                                                               # STEP 40
ACTION: int2 = 19 
int2 = 11 : <type 'int'>
=> int2 = 19 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 41
ACTION: avl2.insert(int3) 
int3 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103f656c8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([14]) : <type 'set'>
==================================================
result = avl0.find(int0)                                                # STEP 42
ACTION: result = avl0.find(int0) 
int0 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101df5cf8> : <type 'instance'>
avl_REF0 = set([8, 4, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
result = avl0.inorder()                                                 # STEP 43
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x101df5cf8> : <type 'instance'>
avl_REF0 = set([8, 4, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
result = avl2.find(int1)                                                # STEP 44
ACTION: result = avl2.find(int1) 
int1 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103f656c8> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int3 = 7                                                                # STEP 45
ACTION: int3 = 7 
int3 = 14 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
int0 = 9                                                                # STEP 46
ACTION: int0 = 9 
int0 = 7 : <type 'int'>
=> int0 = 9 : <type 'int'>
==================================================
int1 = 1                                                                # STEP 47
ACTION: int1 = 1 
int1 = 10 : <type 'int'>
=> int1 = 1 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 48
ACTION: avl0.delete(int0) 
int0 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101df5cf8> : <type 'instance'>
avl_REF0 = set([8, 4, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int0 = 18                                                               # STEP 49
ACTION: int0 = 18 
int0 = 9 : <type 'int'>
=> int0 = 18 : <type 'int'>
==================================================
result = avl0.find(int3)                                                # STEP 50
ACTION: result = avl0.find(int3) 
int3 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101df5cf8> : <type 'instance'>
avl_REF0 = set([8, 4, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
avl2.insert(int2)                                                       # STEP 51
ACTION: avl2.insert(int2) 
int2 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103f656c8> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([19, 14]) : <type 'set'>
==================================================
int2 = 10                                                               # STEP 52
ACTION: int2 = 10 
int2 = 19 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 53
ACTION: avl2.insert(int2) 
int2 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103f656c8> : <type 'instance'>
avl_REF2 = set([19, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([10, 19, 14]) : <type 'set'>
==================================================
int2 = 8                                                                # STEP 54
ACTION: int2 = 8 
int2 = 10 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 55
ACTION: avl0.insert(int3) 
int3 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101df5cf8> : <type 'instance'>
avl_REF0 = set([8, 4, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([8, 4, 14, 7]) : <type 'set'>
==================================================
int3 = 9                                                                # STEP 56
ACTION: int3 = 9 
int3 = 7 : <type 'int'>
=> int3 = 9 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 57
ACTION: avl2.insert(int2) 
int2 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103f656c8> : <type 'instance'>
avl_REF2 = set([10, 19, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([8, 10, 19, 14]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 58
ACTION: avl0.delete(int0) 
int0 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101df5cf8> : <type 'instance'>
avl_REF0 = set([8, 4, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int2 = 3                                                                # STEP 59
ACTION: int2 = 3 
int2 = 8 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
result = avl2.find(int2)                                                # STEP 60
ACTION: result = avl2.find(int2) 
int2 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103f656c8> : <type 'instance'>
avl_REF2 = set([8, 10, 19, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int0 = 20                                                               # STEP 61
ACTION: int0 = 20 
int0 = 18 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
result = avl0.find(int0)                                                # STEP 62
ACTION: result = avl0.find(int0) 
int0 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101df5cf8> : <type 'instance'>
avl_REF0 = set([8, 4, 14, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
int0 = 19                                                               # STEP 63
ACTION: int0 = 19 
int0 = 20 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
int2 = 20                                                               # STEP 64
ACTION: int2 = 20 
int2 = 3 : <type 'int'>
=> int2 = 20 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 65
ACTION: avl2.delete(int0) 
int0 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103f656c8> : <type 'instance'>
avl_REF2 = set([8, 10, 19, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([8, 10, 14]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10398f098>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
TEST #3 STEP #0 (0:00:33.560512) Sun Apr 30 02:27:23 2017 [ 153 stmts 202 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1039aae18>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
Original test has 41 steps

SAVING TEST AS failure.13740.test.2
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 2                                                                 # STEP 0
ACTION: int3 = 2 
int3 = None : <type 'NoneType'>
=> int3 = 2 : <type 'int'>
==================================================
int2 = 11                                                                # STEP 1
ACTION: int2 = 11 
int2 = None : <type 'NoneType'>
=> int2 = 11 : <type 'int'>
==================================================
int0 = 12                                                                # STEP 2
ACTION: int0 = 12 
int0 = None : <type 'NoneType'>
=> int0 = 12 : <type 'int'>
==================================================
int1 = 1                                                                 # STEP 3
ACTION: int1 = 1 
int1 = None : <type 'NoneType'>
=> int1 = 1 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 4
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x1039a32d8> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.delete(int1)                                                        # STEP 5
ACTION: avl0.delete(int1) 
int1 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1039a32d8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int1 = 9                                                                 # STEP 6
ACTION: int1 = 9 
int1 = 1 : <type 'int'>
=> int1 = 9 : <type 'int'>
==================================================
avl0.delete(int0)                                                        # STEP 7
ACTION: avl0.delete(int0) 
int0 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1039a32d8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int0 = 15                                                                # STEP 8
ACTION: int0 = 15 
int0 = 12 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
avl0.insert(int3)                                                        # STEP 9
ACTION: avl0.insert(int3) 
int3 = 2 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1039a32d8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([2]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 10
ACTION: avl0.insert(int1) 
int1 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1039a32d8> : <type 'instance'>
avl_REF0 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([9, 2]) : <type 'set'>
==================================================
int3 = 10                                                               # STEP 11
ACTION: int3 = 10 
int3 = 2 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
result = avl0.find(int1)                                                # STEP 12
ACTION: result = avl0.find(int1) 
int1 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1039a32d8> : <type 'instance'>
avl_REF0 = set([9, 2]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
result = avl0.find(int2)                                                # STEP 13
ACTION: result = avl0.find(int2) 
int2 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1039a32d8> : <type 'instance'>
avl_REF0 = set([9, 2]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl0.delete(int2)                                                       # STEP 14
ACTION: avl0.delete(int2) 
int2 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1039a32d8> : <type 'instance'>
avl_REF0 = set([9, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int1 = 1                                                                # STEP 15
ACTION: int1 = 1 
int1 = 9 : <type 'int'>
=> int1 = 1 : <type 'int'>
==================================================
int2 = 5                                                                # STEP 16
ACTION: int2 = 5 
int2 = 11 : <type 'int'>
=> int2 = 5 : <type 'int'>
==================================================
result = avl0.find(int0)                                                # STEP 17
ACTION: result = avl0.find(int0) 
int0 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1039a32d8> : <type 'instance'>
avl_REF0 = set([9, 2]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
avl0.insert(int2)                                                       # STEP 18
ACTION: avl0.insert(int2) 
int2 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1039a32d8> : <type 'instance'>
avl_REF0 = set([9, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([9, 2, 5]) : <type 'set'>
==================================================
int0 = 2                                                                # STEP 19
ACTION: int0 = 2 
int0 = 15 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 20
ACTION: avl0.delete(int0) 
int0 = 2 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1039a32d8> : <type 'instance'>
avl_REF0 = set([9, 2, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([9, 5]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 21
ACTION: avl0.insert(int3) 
int3 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1039a32d8> : <type 'instance'>
avl_REF0 = set([9, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([9, 10, 5]) : <type 'set'>
==================================================
int0 = 2                                                                # STEP 22
ACTION: int0 = 2 
int0 = 2 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 23
ACTION: avl0.insert(int0) 
int0 = 2 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1039a32d8> : <type 'instance'>
avl_REF0 = set([9, 10, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([9, 10, 2, 5]) : <type 'set'>
==================================================
int0 = 11                                                               # STEP 24
ACTION: int0 = 11 
int0 = 2 : <type 'int'>
=> int0 = 11 : <type 'int'>
==================================================
int2 = 4                                                                # STEP 25
ACTION: int2 = 4 
int2 = 5 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
int3 = 3                                                                # STEP 26
ACTION: int3 = 3 
int3 = 10 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
result = avl0.find(int3)                                                # STEP 27
ACTION: result = avl0.find(int3) 
int3 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1039a32d8> : <type 'instance'>
avl_REF0 = set([9, 10, 2, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
avl0.insert(int1)                                                       # STEP 28
ACTION: avl0.insert(int1) 
int1 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1039a32d8> : <type 'instance'>
avl_REF0 = set([9, 10, 2, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([9, 10, 2, 5, 1]) : <type 'set'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 29
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x1039155f0> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
result = avl1.find(int0)                                                # STEP 30
ACTION: result = avl1.find(int0) 
int0 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1039155f0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
int1 = 3                                                                # STEP 31
ACTION: int1 = 3 
int1 = 1 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
result = avl1.find(int2)                                                # STEP 32
ACTION: result = avl1.find(int2) 
int2 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1039155f0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int3 = 10                                                               # STEP 33
ACTION: int3 = 10 
int3 = 3 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 34
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x1039155f0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int2 = 10                                                               # STEP 35
ACTION: int2 = 10 
int2 = 4 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 36
ACTION: avl1.insert(int1) 
int1 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1039155f0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([3]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 37
ACTION: avl1.insert(int3) 
int3 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1039155f0> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([10, 3]) : <type 'set'>
==================================================
int1 = 6                                                                # STEP 38
ACTION: int1 = 6 
int1 = 3 : <type 'int'>
=> int1 = 6 : <type 'int'>
==================================================
result = avl0.find(int3)                                                # STEP 39
ACTION: result = avl0.find(int3) 
int3 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1039a32d8> : <type 'instance'>
avl_REF0 = set([9, 10, 2, 5, 1]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
avl0.delete(int3)                                                       # STEP 40
ACTION: avl0.delete(int3) 
int3 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1039a32d8> : <type 'instance'>
avl_REF0 = set([9, 10, 2, 5, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([9, 2, 5, 1]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103845518>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 3 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103928cb0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
Original test has 48 steps

SAVING TEST AS failure.13740.test.3
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 6                                                                 # STEP 0
ACTION: int3 = 6 
int3 = None : <type 'NoneType'>
=> int3 = 6 : <type 'int'>
==================================================
int2 = 16                                                                # STEP 1
ACTION: int2 = 16 
int2 = None : <type 'NoneType'>
=> int2 = 16 : <type 'int'>
==================================================
int0 = 2                                                                 # STEP 2
ACTION: int0 = 2 
int0 = None : <type 'NoneType'>
=> int0 = 2 : <type 'int'>
==================================================
int1 = 5                                                                 # STEP 3
ACTION: int1 = 5 
int1 = None : <type 'NoneType'>
=> int1 = 5 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x103928bd8> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
result = avl1.find(int2)                                                 # STEP 5
ACTION: result = avl1.find(int2) 
int2 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103928bd8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int2 = 2                                                                 # STEP 6
ACTION: int2 = 2 
int2 = 16 : <type 'int'>
=> int2 = 2 : <type 'int'>
==================================================
avl1.insert(int2)                                                        # STEP 7
ACTION: avl1.insert(int2) 
int2 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103928bd8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([2]) : <type 'set'>
==================================================
avl1.insert(int3)                                                        # STEP 8
ACTION: avl1.insert(int3) 
int3 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103928bd8> : <type 'instance'>
avl_REF1 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([2, 6]) : <type 'set'>
==================================================
int2 = 3                                                                 # STEP 9
ACTION: int2 = 3 
int2 = 2 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 10
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x103928bd8> : <type 'instance'>
avl_REF1 = set([2, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int3 = 18                                                               # STEP 11
ACTION: int3 = 18 
int3 = 6 : <type 'int'>
=> int3 = 18 : <type 'int'>
==================================================
result = avl1.find(int0)                                                # STEP 12
ACTION: result = avl1.find(int0) 
int0 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103928bd8> : <type 'instance'>
avl_REF1 = set([2, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl1.insert(int1)                                                       # STEP 13
ACTION: avl1.insert(int1) 
int1 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103928bd8> : <type 'instance'>
avl_REF1 = set([2, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([2, 5, 6]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 14
ACTION: avl1.delete(int3) 
int3 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103928bd8> : <type 'instance'>
avl_REF1 = set([2, 5, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
result = avl1.inorder()                                                 # STEP 15
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x103928bd8> : <type 'instance'>
avl_REF1 = set([2, 5, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int1 = 11                                                               # STEP 16
ACTION: int1 = 11 
int1 = 5 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
int3 = 11                                                               # STEP 17
ACTION: int3 = 11 
int3 = 18 : <type 'int'>
=> int3 = 11 : <type 'int'>
==================================================
int0 = 7                                                                # STEP 18
ACTION: int0 = 7 
int0 = 2 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
result = avl1.find(int1)                                                # STEP 19
ACTION: result = avl1.find(int1) 
int1 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103928bd8> : <type 'instance'>
avl_REF1 = set([2, 5, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int1 = 11                                                               # STEP 20
ACTION: int1 = 11 
int1 = 11 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 21
ACTION: avl1.insert(int3) 
int3 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103928bd8> : <type 'instance'>
avl_REF1 = set([2, 5, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([2, 11, 5, 6]) : <type 'set'>
==================================================
int3 = 19                                                               # STEP 22
ACTION: int3 = 19 
int3 = 11 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
result = avl1.find(int2)                                                # STEP 23
ACTION: result = avl1.find(int2) 
int2 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103928bd8> : <type 'instance'>
avl_REF1 = set([2, 11, 5, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl1.insert(int2)                                                       # STEP 24
ACTION: avl1.insert(int2) 
int2 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103928bd8> : <type 'instance'>
avl_REF1 = set([2, 11, 5, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([3, 2, 11, 5, 6]) : <type 'set'>
==================================================
int2 = 10                                                               # STEP 25
ACTION: int2 = 10 
int2 = 3 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
result = avl1.find(int2)                                                # STEP 26
ACTION: result = avl1.find(int2) 
int2 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103928bd8> : <type 'instance'>
avl_REF1 = set([3, 2, 11, 5, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int2 = 17                                                               # STEP 27
ACTION: int2 = 17 
int2 = 10 : <type 'int'>
=> int2 = 17 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 28
ACTION: avl1.delete(int2) 
int2 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103928bd8> : <type 'instance'>
avl_REF1 = set([3, 2, 11, 5, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.insert(int0)                                                       # STEP 29
ACTION: avl1.insert(int0) 
int0 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103928bd8> : <type 'instance'>
avl_REF1 = set([3, 2, 11, 5, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([2, 3, 5, 6, 7, 11]) : <type 'set'>
==================================================
result = avl1.find(int0)                                                # STEP 30
ACTION: result = avl1.find(int0) 
int0 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103928bd8> : <type 'instance'>
avl_REF1 = set([2, 3, 5, 6, 7, 11]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
int0 = 8                                                                # STEP 31
ACTION: int0 = 8 
int0 = 7 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 32
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x103ce2c20> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 33
ACTION: avl1.insert(int1) 
int1 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103928bd8> : <type 'instance'>
avl_REF1 = set([2, 3, 5, 6, 7, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl1.insert(int1)                                                       # STEP 34
ACTION: avl1.insert(int1) 
int1 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103928bd8> : <type 'instance'>
avl_REF1 = set([2, 3, 5, 6, 7, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
result = avl2.find(int1)                                                # STEP 35
ACTION: result = avl2.find(int1) 
int1 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103ce2c20> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int2 = 18                                                               # STEP 36
ACTION: int2 = 18 
int2 = 17 : <type 'int'>
=> int2 = 18 : <type 'int'>
==================================================
int1 = 3                                                                # STEP 37
ACTION: int1 = 3 
int1 = 11 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 38
ACTION: avl1.insert(int2) 
int2 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103928bd8> : <type 'instance'>
avl_REF1 = set([2, 3, 5, 6, 7, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([2, 3, 5, 6, 7, 11, 18]) : <type 'set'>
==================================================
int2 = 6                                                                # STEP 39
ACTION: int2 = 6 
int2 = 18 : <type 'int'>
=> int2 = 6 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 40
ACTION: avl1.insert(int0) 
int0 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103928bd8> : <type 'instance'>
avl_REF1 = set([2, 3, 5, 6, 7, 11, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([2, 3, 5, 6, 7, 8, 11, 18]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 41
ACTION: avl2.insert(int1) 
int1 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103ce2c20> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([3]) : <type 'set'>
==================================================
int0 = 12                                                               # STEP 42
ACTION: int0 = 12 
int0 = 8 : <type 'int'>
=> int0 = 12 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 43
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x103928bd8> : <type 'instance'>
avl_REF1 = set([2, 3, 5, 6, 7, 8, 11, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl2.insert(int0)                                                       # STEP 44
ACTION: avl2.insert(int0) 
int0 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103ce2c20> : <type 'instance'>
avl_REF2 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([3, 12]) : <type 'set'>
==================================================
int0 = 18                                                               # STEP 45
ACTION: int0 = 18 
int0 = 12 : <type 'int'>
=> int0 = 18 : <type 'int'>
==================================================
int1 = 13                                                               # STEP 46
ACTION: int1 = 13 
int1 = 3 : <type 'int'>
=> int1 = 13 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 47
ACTION: avl1.delete(int2) 
int2 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103928bd8> : <type 'instance'>
avl_REF1 = set([2, 3, 5, 6, 7, 8, 11, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([2, 3, 5, 7, 8, 11, 18]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103cc7290>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 4 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 81
STOPPING TESTING DUE TO TIMEOUT
8.44091360477 PERCENT COVERED
60.2177419662 TOTAL RUNTIME
5 EXECUTED
335 TOTAL TEST OPERATIONS
17.0257966518 TIME SPENT EXECUTING TEST OPERATIONS
0.0141298770905 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
17.1629714966 TIME SPENT CHECKING PROPERTIES
34.1887681484 TOTAL TIME SPENT RUNNING SUT
0.00408554077148 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
4 FAILED
0 REPEATS OF FAILURES
4 ACTUAL DISTINCT FAILURES

FAILURE 0
int3 = 18                                                                # STEP 0
int1 = 15                                                                # STEP 1
int0 = 18                                                                # STEP 2
int2 = 18                                                                # STEP 3
avl0 = avl.AVLTree()                                                     # STEP 4
avl1 = avl.AVLTree()                                                     # STEP 5
avl0.insert(int0)                                                        # STEP 6
int0 = 5                                                                 # STEP 7
avl0.insert(int3)                                                        # STEP 8
result = avl1.find(int1)                                                 # STEP 9
int3 = 16                                                               # STEP 10
avl0.delete(int1)                                                       # STEP 11
int1 = 8                                                                # STEP 12
avl1 == avl0                                                            # STEP 13
result = avl1.inorder()                                                 # STEP 14
result = avl1.find(int2)                                                # STEP 15
result = avl0.find(int2)                                                # STEP 16
avl1.insert(int1)                                                       # STEP 17
result = avl1.inorder()                                                 # STEP 18
result = avl1.find(int1)                                                # STEP 19
avl0.delete(int3)                                                       # STEP 20
int2 = 6                                                                # STEP 21
int3 = 14                                                               # STEP 22
int1 = 16                                                               # STEP 23
avl0.insert(int2)                                                       # STEP 24
avl1.delete(int2)                                                       # STEP 25
int2 = 20                                                               # STEP 26
avl0 == avl0                                                            # STEP 27
result = avl1.find(int1)                                                # STEP 28
int1 = 20                                                               # STEP 29
avl0.insert(int2)                                                       # STEP 30
avl0.delete(int0)                                                       # STEP 31
int0 = 4                                                                # STEP 32
result = avl0.find(int1)                                                # STEP 33
int2 = 18                                                               # STEP 34
int1 = 7                                                                # STEP 35
avl0.delete(int0)                                                       # STEP 36
avl0.delete(int1)                                                       # STEP 37
avl0.insert(int0)                                                       # STEP 38
int0 = 12                                                               # STEP 39
int1 = 20                                                               # STEP 40
avl1.delete(int2)                                                       # STEP 41
avl1.delete(int1)                                                       # STEP 42
int1 = 11                                                               # STEP 43
int2 = 5                                                                # STEP 44
avl0 == avl0                                                            # STEP 45
result = avl0.find(int1)                                                # STEP 46
int1 = 2                                                                # STEP 47
avl0.insert(int0)                                                       # STEP 48
int0 = 5                                                                # STEP 49
result = avl0.inorder()                                                 # STEP 50
result = avl0.find(int0)                                                # STEP 51
avl0.insert(int0)                                                       # STEP 52
avl0.insert(int1)                                                       # STEP 53
avl0.insert(int2)                                                       # STEP 54
int0 = 14                                                               # STEP 55
int1 = 20                                                               # STEP 56
int2 = 13                                                               # STEP 57
avl1 = avl.AVLTree()                                                    # STEP 58
result = avl1.find(int0)                                                # STEP 59
int0 = 16                                                               # STEP 60
result = avl0.find(int1)                                                # STEP 61
avl1.insert(int3)                                                       # STEP 62
avl1.delete(int1)                                                       # STEP 63
int3 = 20                                                               # STEP 64
int1 = 8                                                                # STEP 65
result = avl0.find(int2)                                                # STEP 66
int2 = 10                                                               # STEP 67
avl0.insert(int2)                                                       # STEP 68
result = avl1.inorder()                                                 # STEP 69
int2 = 8                                                                # STEP 70
avl1.insert(int3)                                                       # STEP 71
avl1.delete(int2)                                                       # STEP 72
avl1.insert(int1)                                                       # STEP 73
int3 = 10                                                               # STEP 74
int2 = 12                                                               # STEP 75
int1 = 17                                                               # STEP 76
result = avl1.find(int0)                                                # STEP 77
avl0.delete(int2)                                                       # STEP 78
avl1 == avl1                                                            # STEP 79
result = avl0.inorder()                                                 # STEP 80
int2 = 9                                                                # STEP 81
int0 = 10                                                               # STEP 82
avl0 == avl1                                                            # STEP 83
result = avl0.find(int1)                                                # STEP 84
avl1.insert(int1)                                                       # STEP 85
int1 = 7                                                                # STEP 86
avl0.insert(int2)                                                       # STEP 87
int2 = 18                                                               # STEP 88
avl1 == avl0                                                            # STEP 89
avl0.display()                                                          # STEP 90
result = avl0.inorder()                                                 # STEP 91
avl0.display()                                                          # STEP 92
avl1 == avl0                                                            # STEP 93
result = avl0.find(int3)                                                # STEP 94
avl0.delete(int1)                                                       # STEP 95
int3 = 18                                                               # STEP 96
avl1.delete(int1)                                                       # STEP 97
avl0.delete(int3)                                                       # STEP 98
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1038f03f8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE 1
int2 = 19                                                                # STEP 0
int3 = 4                                                                 # STEP 1
int1 = 20                                                                # STEP 2
int0 = 11                                                                # STEP 3
avl0 = avl.AVLTree()                                                     # STEP 4
result = avl0.inorder()                                                  # STEP 5
result = avl0.find(int1)                                                 # STEP 6
avl0.delete(int3)                                                        # STEP 7
result = avl0.find(int3)                                                 # STEP 8
result = avl0.find(int0)                                                 # STEP 9
avl0 = avl.AVLTree()                                                    # STEP 10
int3 = 18                                                               # STEP 11
int1 = 15                                                               # STEP 12
int0 = 8                                                                # STEP 13
avl2 = avl.AVLTree()                                                    # STEP 14
result = avl0.find(int1)                                                # STEP 15
result = avl0.inorder()                                                 # STEP 16
avl0 == avl2                                                            # STEP 17
avl0 == avl0                                                            # STEP 18
result = avl2.find(int3)                                                # STEP 19
int1 = 1                                                                # STEP 20
result = avl0.find(int3)                                                # STEP 21
avl0 == avl2                                                            # STEP 22
result = avl2.find(int1)                                                # STEP 23
int1 = 4                                                                # STEP 24
result = avl0.find(int2)                                                # STEP 25
int2 = 15                                                               # STEP 26
int3 = 14                                                               # STEP 27
result = avl2.find(int2)                                                # STEP 28
avl0.insert(int1)                                                       # STEP 29
int1 = 10                                                               # STEP 30
int2 = 2                                                                # STEP 31
avl0.insert(int0)                                                       # STEP 32
avl2.delete(int0)                                                       # STEP 33
int0 = 7                                                                # STEP 34
avl2.delete(int2)                                                       # STEP 35
avl2 == avl2                                                            # STEP 36
int2 = 11                                                               # STEP 37
result = avl0.find(int2)                                                # STEP 38
avl0.insert(int3)                                                       # STEP 39
int2 = 19                                                               # STEP 40
avl2.insert(int3)                                                       # STEP 41
result = avl0.find(int0)                                                # STEP 42
result = avl0.inorder()                                                 # STEP 43
result = avl2.find(int1)                                                # STEP 44
int3 = 7                                                                # STEP 45
int0 = 9                                                                # STEP 46
int1 = 1                                                                # STEP 47
avl0.delete(int0)                                                       # STEP 48
int0 = 18                                                               # STEP 49
result = avl0.find(int3)                                                # STEP 50
avl2.insert(int2)                                                       # STEP 51
int2 = 10                                                               # STEP 52
avl2.insert(int2)                                                       # STEP 53
int2 = 8                                                                # STEP 54
avl0.insert(int3)                                                       # STEP 55
int3 = 9                                                                # STEP 56
avl2.insert(int2)                                                       # STEP 57
avl0.delete(int0)                                                       # STEP 58
int2 = 3                                                                # STEP 59
result = avl2.find(int2)                                                # STEP 60
int0 = 20                                                               # STEP 61
result = avl0.find(int0)                                                # STEP 62
int0 = 19                                                               # STEP 63
int2 = 20                                                               # STEP 64
avl2.delete(int0)                                                       # STEP 65
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10398f098>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE 2
int3 = 2                                                                 # STEP 0
int2 = 11                                                                # STEP 1
int0 = 12                                                                # STEP 2
int1 = 1                                                                 # STEP 3
avl0 = avl.AVLTree()                                                     # STEP 4
avl0.delete(int1)                                                        # STEP 5
int1 = 9                                                                 # STEP 6
avl0.delete(int0)                                                        # STEP 7
int0 = 15                                                                # STEP 8
avl0.insert(int3)                                                        # STEP 9
avl0.insert(int1)                                                       # STEP 10
int3 = 10                                                               # STEP 11
result = avl0.find(int1)                                                # STEP 12
result = avl0.find(int2)                                                # STEP 13
avl0.delete(int2)                                                       # STEP 14
int1 = 1                                                                # STEP 15
int2 = 5                                                                # STEP 16
result = avl0.find(int0)                                                # STEP 17
avl0.insert(int2)                                                       # STEP 18
int0 = 2                                                                # STEP 19
avl0.delete(int0)                                                       # STEP 20
avl0.insert(int3)                                                       # STEP 21
int0 = 2                                                                # STEP 22
avl0.insert(int0)                                                       # STEP 23
int0 = 11                                                               # STEP 24
int2 = 4                                                                # STEP 25
int3 = 3                                                                # STEP 26
result = avl0.find(int3)                                                # STEP 27
avl0.insert(int1)                                                       # STEP 28
avl1 = avl.AVLTree()                                                    # STEP 29
result = avl1.find(int0)                                                # STEP 30
int1 = 3                                                                # STEP 31
result = avl1.find(int2)                                                # STEP 32
int3 = 10                                                               # STEP 33
result = avl1.inorder()                                                 # STEP 34
int2 = 10                                                               # STEP 35
avl1.insert(int1)                                                       # STEP 36
avl1.insert(int3)                                                       # STEP 37
int1 = 6                                                                # STEP 38
result = avl0.find(int3)                                                # STEP 39
avl0.delete(int3)                                                       # STEP 40
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103845518>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE 3
int3 = 6                                                                 # STEP 0
int2 = 16                                                                # STEP 1
int0 = 2                                                                 # STEP 2
int1 = 5                                                                 # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
result = avl1.find(int2)                                                 # STEP 5
int2 = 2                                                                 # STEP 6
avl1.insert(int2)                                                        # STEP 7
avl1.insert(int3)                                                        # STEP 8
int2 = 3                                                                 # STEP 9
result = avl1.inorder()                                                 # STEP 10
int3 = 18                                                               # STEP 11
result = avl1.find(int0)                                                # STEP 12
avl1.insert(int1)                                                       # STEP 13
avl1.delete(int3)                                                       # STEP 14
result = avl1.inorder()                                                 # STEP 15
int1 = 11                                                               # STEP 16
int3 = 11                                                               # STEP 17
int0 = 7                                                                # STEP 18
result = avl1.find(int1)                                                # STEP 19
int1 = 11                                                               # STEP 20
avl1.insert(int3)                                                       # STEP 21
int3 = 19                                                               # STEP 22
result = avl1.find(int2)                                                # STEP 23
avl1.insert(int2)                                                       # STEP 24
int2 = 10                                                               # STEP 25
result = avl1.find(int2)                                                # STEP 26
int2 = 17                                                               # STEP 27
avl1.delete(int2)                                                       # STEP 28
avl1.insert(int0)                                                       # STEP 29
result = avl1.find(int0)                                                # STEP 30
int0 = 8                                                                # STEP 31
avl2 = avl.AVLTree()                                                    # STEP 32
avl1.insert(int1)                                                       # STEP 33
avl1.insert(int1)                                                       # STEP 34
result = avl2.find(int1)                                                # STEP 35
int2 = 18                                                               # STEP 36
int1 = 3                                                                # STEP 37
avl1.insert(int2)                                                       # STEP 38
int2 = 6                                                                # STEP 39
avl1.insert(int0)                                                       # STEP 40
avl2.insert(int1)                                                       # STEP 41
int0 = 12                                                               # STEP 42
result = avl1.inorder()                                                 # STEP 43
avl2.insert(int0)                                                       # STEP 44
int0 = 18                                                               # STEP 45
int1 = 13                                                               # STEP 46
avl1.delete(int2)                                                       # STEP 47
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103cc7290>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
210 BRANCHES COVERED
159 STATEMENTS COVERED

Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.98975.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  9 [3:-1]
-- < 4 [1:-1]
---- > 8 [0:0] L
-- > 19 [2:1]
---- < 12 [1:-1]
------ > 13 [0:0] L
---- > 20 [0:0] L
set([4, 8, 9, 12, 13, 19, 20])
  9 [3:-1]
-- < 7 [1:0]
---- < 6 [0:0] L
---- > 8 [0:0] L
-- > 14 [2:-1]
---- < 13 [0:0] L
---- > 19 [1:1]
------ < 16 [0:0] L
set([6, 7, 8, 9, 13, 14, 16, 19])
  12 [2:0]
-- < 4 [1:0]
---- < 3 [0:0] L
---- > 7 [0:0] L
-- > 16 [1:0]
---- < 14 [0:0] L
---- > 17 [0:0] L
set([3, 4, 7, 12, 14, 16, 17])
  7 [2:0]
-- < 4 [1:1]
---- < 3 [0:0] L
-- > 16 [1:0]
---- < 12 [0:0] L
---- > 17 [0:0] L
set([3, 4, 7, 12, 16, 17])
  7 [2:0]
-- < 4 [1:0]
---- < 3 [0:0] L
---- > 6 [0:0] L
-- > 16 [1:-1]
---- > 17 [0:0] L
set([3, 4, 6, 7, 16, 17])
  5 [3:-1]
-- < 2 [1:-1]
---- > 4 [0:0] L
-- > 8 [2:-1]
---- < 7 [0:0] L
---- > 19 [1:1]
------ < 15 [0:0] L
set([2, 4, 5, 7, 8, 15, 19])
  5 [3:-1]
-- < 2 [1:-1]
---- > 4 [0:0] L
-- > 8 [2:-1]
---- < 7 [0:0] L
---- > 19 [1:1]
------ < 15 [0:0] L
set([2, 4, 5, 7, 8, 15, 19])
  5 [3:-1]
-- < 2 [1:-1]
---- > 4 [0:0] L
-- > 8 [2:-1]
---- < 7 [0:0] L
---- > 19 [1:1]
------ < 15 [0:0] L
set([2, 4, 5, 7, 8, 15, 19])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102b0bc20>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
Original test has 92 steps

SAVING TEST AS failure.98975.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 6                                                                 # STEP 0
ACTION: int1 = 6 
int1 = None : <type 'NoneType'>
=> int1 = 6 : <type 'int'>
==================================================
int3 = 3                                                                 # STEP 1
ACTION: int3 = 3 
int3 = None : <type 'NoneType'>
=> int3 = 3 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 2
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x102dd8ea8> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int2 = 5                                                                 # STEP 3
ACTION: int2 = 5 
int2 = None : <type 'NoneType'>
=> int2 = 5 : <type 'int'>
==================================================
avl1.insert(int1)                                                        # STEP 4
ACTION: avl1.insert(int1) 
int1 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102dd8ea8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([6]) : <type 'set'>
==================================================
avl1.delete(int2)                                                        # STEP 5
ACTION: avl1.delete(int2) 
int2 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102dd8ea8> : <type 'instance'>
avl_REF1 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.insert(int2)                                                        # STEP 6
ACTION: avl1.insert(int2) 
int2 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102dd8ea8> : <type 'instance'>
avl_REF1 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([5, 6]) : <type 'set'>
==================================================
avl1.insert(int3)                                                        # STEP 7
ACTION: avl1.insert(int3) 
int3 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102dd8ea8> : <type 'instance'>
avl_REF1 = set([5, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([3, 5, 6]) : <type 'set'>
==================================================
result = avl1.inorder()                                                  # STEP 8
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x102dd8ea8> : <type 'instance'>
avl_REF1 = set([3, 5, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int2)                                                        # STEP 9
ACTION: avl1.insert(int2) 
int2 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102dd8ea8> : <type 'instance'>
avl_REF1 = set([3, 5, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
avl1.insert(int3)                                                       # STEP 10
ACTION: avl1.insert(int3) 
int3 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102dd8ea8> : <type 'instance'>
avl_REF1 = set([3, 5, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
avl1.delete(int3)                                                       # STEP 11
ACTION: avl1.delete(int3) 
int3 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102dd8ea8> : <type 'instance'>
avl_REF1 = set([3, 5, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([5, 6]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 12
ACTION: avl1.insert(int2) 
int2 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102dd8ea8> : <type 'instance'>
avl_REF1 = set([5, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
avl1.insert(int1)                                                       # STEP 13
ACTION: avl1.insert(int1) 
int1 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102dd8ea8> : <type 'instance'>
avl_REF1 = set([5, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
int1 = 19                                                               # STEP 14
ACTION: int1 = 19 
int1 = 6 : <type 'int'>
=> int1 = 19 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 15
ACTION: avl1.insert(int3) 
int3 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102dd8ea8> : <type 'instance'>
avl_REF1 = set([5, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([3, 5, 6]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 16
ACTION: avl1.insert(int1) 
int1 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102dd8ea8> : <type 'instance'>
avl_REF1 = set([3, 5, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([19, 3, 5, 6]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 17
ACTION: avl1.insert(int3) 
int3 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102dd8ea8> : <type 'instance'>
avl_REF1 = set([19, 3, 5, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
avl0 = avl.AVLTree()                                                    # STEP 18
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x105872998> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int3 = 15                                                               # STEP 19
ACTION: int3 = 15 
int3 = 3 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 20
ACTION: avl1 = avl.AVLTree() 
avl1 = <avl.AVLTree instance at 0x102dd8ea8> : <type 'instance'>
avl_REF1 = set([19, 3, 5, 6]) : <type 'set'>
=> avl1 = <avl.AVLTree instance at 0x105872f38> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 21
ACTION: avl0.delete(int3) 
int3 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105872998> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl1.insert(int2)                                                       # STEP 22
ACTION: avl1.insert(int2) 
int2 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105872f38> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([5]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 23
ACTION: avl1.delete(int1) 
int1 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105872f38> : <type 'instance'>
avl_REF1 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int2 = 19                                                               # STEP 24
ACTION: int2 = 19 
int2 = 5 : <type 'int'>
=> int2 = 19 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 25
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x105872998> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl1.delete(int3)                                                       # STEP 26
ACTION: avl1.delete(int3) 
int3 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105872f38> : <type 'instance'>
avl_REF1 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.insert(int1)                                                       # STEP 27
ACTION: avl1.insert(int1) 
int1 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105872f38> : <type 'instance'>
avl_REF1 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([19, 5]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 28
ACTION: avl1.insert(int2) 
int2 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105872f38> : <type 'instance'>
avl_REF1 = set([19, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
int1 = 4                                                                # STEP 29
ACTION: int1 = 4 
int1 = 19 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 30
ACTION: avl1.delete(int3) 
int3 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105872f38> : <type 'instance'>
avl_REF1 = set([19, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.delete(int1)                                                       # STEP 31
ACTION: avl1.delete(int1) 
int1 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105872f38> : <type 'instance'>
avl_REF1 = set([19, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl0.delete(int2)                                                       # STEP 32
ACTION: avl0.delete(int2) 
int2 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105872998> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl1.insert(int2)                                                       # STEP 33
ACTION: avl1.insert(int2) 
int2 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105872f38> : <type 'instance'>
avl_REF1 = set([19, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
result = avl0.inorder()                                                 # STEP 34
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x105872998> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.delete(int3)                                                       # STEP 35
ACTION: avl0.delete(int3) 
int3 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105872998> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.delete(int1)                                                       # STEP 36
ACTION: avl0.delete(int1) 
int1 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105872998> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int0 = 10                                                               # STEP 37
ACTION: int0 = 10 
int0 = None : <type 'NoneType'>
=> int0 = 10 : <type 'int'>
==================================================
result = avl1.find(int2)                                                # STEP 38
ACTION: result = avl1.find(int2) 
int2 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105872f38> : <type 'instance'>
avl_REF1 = set([19, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl0.insert(int0)                                                       # STEP 39
ACTION: avl0.insert(int0) 
int0 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105872998> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([10]) : <type 'set'>
==================================================
int0 = 2                                                                # STEP 40
ACTION: int0 = 2 
int0 = 10 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
int3 = 5                                                                # STEP 41
ACTION: int3 = 5 
int3 = 15 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 42
ACTION: avl0.delete(int2) 
int2 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105872998> : <type 'instance'>
avl_REF0 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.delete(int3)                                                       # STEP 43
ACTION: avl0.delete(int3) 
int3 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105872998> : <type 'instance'>
avl_REF0 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int1 = 4                                                                # STEP 44
ACTION: int1 = 4 
int1 = 4 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 45
ACTION: avl0.delete(int2) 
int2 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105872998> : <type 'instance'>
avl_REF0 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int2 = 8                                                                # STEP 46
ACTION: int2 = 8 
int2 = 19 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 47
ACTION: avl1.insert(int0) 
int0 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105872f38> : <type 'instance'>
avl_REF1 = set([19, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([2, 19, 5]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 48
ACTION: avl1.delete(int3) 
int3 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105872f38> : <type 'instance'>
avl_REF1 = set([2, 19, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([2, 19]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 49
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x105872f38> : <type 'instance'>
avl_REF1 = set([2, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int3)                                                       # STEP 50
ACTION: avl1.insert(int3) 
int3 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105872f38> : <type 'instance'>
avl_REF1 = set([2, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([2, 19, 5]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 51
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x105872998> : <type 'instance'>
avl_REF0 = set([10]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.delete(int2)                                                       # STEP 52
ACTION: avl0.delete(int2) 
int2 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105872998> : <type 'instance'>
avl_REF0 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl1.delete(int1)                                                       # STEP 53
ACTION: avl1.delete(int1) 
int1 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105872f38> : <type 'instance'>
avl_REF1 = set([2, 19, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl0.insert(int1)                                                       # STEP 54
ACTION: avl0.insert(int1) 
int1 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105872998> : <type 'instance'>
avl_REF0 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([10, 4]) : <type 'set'>
==================================================
int0 = 7                                                                # STEP 55
ACTION: int0 = 7 
int0 = 2 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 56
ACTION: avl0.insert(int3) 
int3 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105872998> : <type 'instance'>
avl_REF0 = set([10, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([10, 4, 5]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 57
ACTION: avl1.insert(int1) 
int1 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105872f38> : <type 'instance'>
avl_REF1 = set([2, 19, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([2, 19, 4, 5]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 58
ACTION: avl1.delete(int0) 
int0 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105872f38> : <type 'instance'>
avl_REF1 = set([2, 19, 4, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.insert(int0)                                                       # STEP 59
ACTION: avl1.insert(int0) 
int0 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105872f38> : <type 'instance'>
avl_REF1 = set([2, 19, 4, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([2, 19, 4, 5, 7]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 60
ACTION: avl0.delete(int2) 
int2 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105872998> : <type 'instance'>
avl_REF0 = set([10, 4, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
result = avl0.inorder()                                                 # STEP 61
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x105872998> : <type 'instance'>
avl_REF0 = set([10, 4, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl1.insert(int3)                                                       # STEP 62
ACTION: avl1.insert(int3) 
int3 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105872f38> : <type 'instance'>
avl_REF1 = set([2, 19, 4, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
avl0.insert(int0)                                                       # STEP 63
ACTION: avl0.insert(int0) 
int0 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105872998> : <type 'instance'>
avl_REF0 = set([10, 4, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([10, 4, 5, 7]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 64
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x105872998> : <type 'instance'>
avl_REF0 = set([10, 4, 5, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl1.delete(int2)                                                       # STEP 65
ACTION: avl1.delete(int2) 
int2 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105872f38> : <type 'instance'>
avl_REF1 = set([2, 19, 4, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int0 = 9                                                                # STEP 66
ACTION: int0 = 9 
int0 = 7 : <type 'int'>
=> int0 = 9 : <type 'int'>
==================================================
int1 = 15                                                               # STEP 67
ACTION: int1 = 15 
int1 = 4 : <type 'int'>
=> int1 = 15 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 68
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x105872998> : <type 'instance'>
avl_REF0 = set([10, 4, 5, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int2)                                                       # STEP 69
ACTION: avl0.insert(int2) 
int2 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105872998> : <type 'instance'>
avl_REF0 = set([10, 4, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([8, 10, 4, 5, 7]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 70
ACTION: avl1.insert(int3) 
int3 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105872f38> : <type 'instance'>
avl_REF1 = set([2, 19, 4, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
int3 = 8                                                                # STEP 71
ACTION: int3 = 8 
int3 = 5 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
result = avl0.find(int3)                                                # STEP 72
ACTION: result = avl0.find(int3) 
int3 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105872998> : <type 'instance'>
avl_REF0 = set([8, 10, 4, 5, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
int3 = 8                                                                # STEP 73
ACTION: int3 = 8 
int3 = 8 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 74
ACTION: avl0.insert(int3) 
int3 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105872998> : <type 'instance'>
avl_REF0 = set([8, 10, 4, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
avl1.insert(int3)                                                       # STEP 75
ACTION: avl1.insert(int3) 
int3 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105872f38> : <type 'instance'>
avl_REF1 = set([2, 19, 4, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([2, 4, 5, 7, 8, 19]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 76
ACTION: avl1.insert(int1) 
int1 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105872f38> : <type 'instance'>
avl_REF1 = set([2, 4, 5, 7, 8, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([2, 4, 5, 7, 8, 15, 19]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 77
ACTION: avl0.insert(int3) 
int3 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105872998> : <type 'instance'>
avl_REF0 = set([8, 10, 4, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
int3 = 9                                                                # STEP 78
ACTION: int3 = 9 
int3 = 8 : <type 'int'>
=> int3 = 9 : <type 'int'>
==================================================
avl1.display()                                                          # STEP 79
ACTION: avl1.display() 
avl1 = <avl.AVLTree instance at 0x105872f38> : <type 'instance'>
avl_REF1 = set([2, 4, 5, 7, 8, 15, 19]) : <type 'set'>
  5 [3:-1]
-- < 2 [1:-1]
---- > 4 [0:0] L
-- > 8 [2:-1]
---- < 7 [0:0] L
---- > 19 [1:1]
------ < 15 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([2, 4, 5, 7, 8, 15, 19])
==================================================
avl1.display()                                                          # STEP 80
ACTION: avl1.display() 
avl1 = <avl.AVLTree instance at 0x105872f38> : <type 'instance'>
avl_REF1 = set([2, 4, 5, 7, 8, 15, 19]) : <type 'set'>
  5 [3:-1]
-- < 2 [1:-1]
---- > 4 [0:0] L
-- > 8 [2:-1]
---- < 7 [0:0] L
---- > 19 [1:1]
------ < 15 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([2, 4, 5, 7, 8, 15, 19])
==================================================
avl1.delete(int0)                                                       # STEP 81
ACTION: avl1.delete(int0) 
int0 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105872f38> : <type 'instance'>
avl_REF1 = set([2, 4, 5, 7, 8, 15, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl0.insert(int1)                                                       # STEP 82
ACTION: avl0.insert(int1) 
int1 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105872998> : <type 'instance'>
avl_REF0 = set([8, 10, 4, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([4, 5, 7, 8, 10, 15]) : <type 'set'>
==================================================
avl1.display()                                                          # STEP 83
ACTION: avl1.display() 
avl1 = <avl.AVLTree instance at 0x105872f38> : <type 'instance'>
avl_REF1 = set([2, 4, 5, 7, 8, 15, 19]) : <type 'set'>
  5 [3:-1]
-- < 2 [1:-1]
---- > 4 [0:0] L
-- > 8 [2:-1]
---- < 7 [0:0] L
---- > 19 [1:1]
------ < 15 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([2, 4, 5, 7, 8, 15, 19])
==================================================
int2 = 19                                                               # STEP 84
ACTION: int2 = 19 
int2 = 8 : <type 'int'>
=> int2 = 19 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 85
ACTION: avl0.delete(int1) 
int1 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105872998> : <type 'instance'>
avl_REF0 = set([4, 5, 7, 8, 10, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([4, 5, 7, 8, 10]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 86
ACTION: avl1.delete(int0) 
int0 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105872f38> : <type 'instance'>
avl_REF1 = set([2, 4, 5, 7, 8, 15, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl0.delete(int3)                                                       # STEP 87
ACTION: avl0.delete(int3) 
int3 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105872998> : <type 'instance'>
avl_REF0 = set([4, 5, 7, 8, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0 == avl0                                                            # STEP 88
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x105872998> : <type 'instance'>
avl_REF0 = set([4, 5, 7, 8, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
int1 = 8                                                                # STEP 89
ACTION: int1 = 8 
int1 = 15 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 90
ACTION: avl0.delete(int0) 
int0 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105872998> : <type 'instance'>
avl_REF0 = set([4, 5, 7, 8, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.delete(int1)                                                       # STEP 91
ACTION: avl0.delete(int1) 
int1 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105872998> : <type 'instance'>
avl_REF0 = set([4, 5, 7, 8, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([4, 5, 7, 10]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105834cf8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #4 STEP #0 (0:00:33.130648) Fri Apr 28 03:17:16 2017 [ 160 stmts 212 branches ]
  18 [2:0]
-- < 12 [1:0]
---- < 10 [0:0] L
---- > 13 [0:0] L
-- > 19 [1:-1]
---- > 20 [0:0] L
set([10, 12, 13, 18, 19, 20])
  10 [2:0]
-- < 3 [1:0]
---- < 1 [0:0] L
---- > 7 [0:0] L
-- > 16 [1:1]
---- < 12 [0:0] L
set([16, 1, 3, 7, 10, 12])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1058edb00>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 58 steps

SAVING TEST AS failure.98975.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 16                                                                # STEP 0
ACTION: int3 = 16 
int3 = None : <type 'NoneType'>
=> int3 = 16 : <type 'int'>
==================================================
int0 = 8                                                                 # STEP 1
ACTION: int0 = 8 
int0 = None : <type 'NoneType'>
=> int0 = 8 : <type 'int'>
==================================================
int2 = 15                                                                # STEP 2
ACTION: int2 = 15 
int2 = None : <type 'NoneType'>
=> int2 = 15 : <type 'int'>
==================================================
int1 = 2                                                                 # STEP 3
ACTION: int1 = 2 
int1 = None : <type 'NoneType'>
=> int1 = 2 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x1058271b8> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl2.inorder()                                                  # STEP 5
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x1058271b8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int2)                                                        # STEP 6
ACTION: avl2.insert(int2) 
int2 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058271b8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([15]) : <type 'set'>
==================================================
avl2.delete(int3)                                                        # STEP 7
ACTION: avl2.delete(int3) 
int3 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058271b8> : <type 'instance'>
avl_REF2 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int3 = 5                                                                 # STEP 8
ACTION: int3 = 5 
int3 = 16 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
avl2.delete(int0)                                                        # STEP 9
ACTION: avl2.delete(int0) 
int0 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058271b8> : <type 'instance'>
avl_REF2 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.delete(int3)                                                       # STEP 10
ACTION: avl2.delete(int3) 
int3 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058271b8> : <type 'instance'>
avl_REF2 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.insert(int2)                                                       # STEP 11
ACTION: avl2.insert(int2) 
int2 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058271b8> : <type 'instance'>
avl_REF2 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
result = avl2.inorder()                                                 # STEP 12
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x1058271b8> : <type 'instance'>
avl_REF2 = set([15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int1)                                                       # STEP 13
ACTION: avl2.insert(int1) 
int1 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058271b8> : <type 'instance'>
avl_REF2 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([2, 15]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 14
ACTION: avl2.insert(int1) 
int1 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058271b8> : <type 'instance'>
avl_REF2 = set([2, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl2.delete(int1)                                                       # STEP 15
ACTION: avl2.delete(int1) 
int1 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058271b8> : <type 'instance'>
avl_REF2 = set([2, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([15]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 16
ACTION: avl2.delete(int1) 
int1 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058271b8> : <type 'instance'>
avl_REF2 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int1 = 12                                                               # STEP 17
ACTION: int1 = 12 
int1 = 2 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 18
ACTION: avl2.insert(int0) 
int0 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058271b8> : <type 'instance'>
avl_REF2 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([8, 15]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 19
ACTION: avl2.delete(int2) 
int2 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058271b8> : <type 'instance'>
avl_REF2 = set([8, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([8]) : <type 'set'>
==================================================
avl2 == avl2                                                            # STEP 20
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x1058271b8> : <type 'instance'>
avl_REF2 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
result = avl2.find(int2)                                                # STEP 21
ACTION: result = avl2.find(int2) 
int2 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058271b8> : <type 'instance'>
avl_REF2 = set([8]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl2.insert(int0)                                                       # STEP 22
ACTION: avl2.insert(int0) 
int0 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058271b8> : <type 'instance'>
avl_REF2 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl2.insert(int2)                                                       # STEP 23
ACTION: avl2.insert(int2) 
int2 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058271b8> : <type 'instance'>
avl_REF2 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([8, 15]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 24
ACTION: avl2.delete(int1) 
int1 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058271b8> : <type 'instance'>
avl_REF2 = set([8, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int0)                                                       # STEP 25
ACTION: avl2.insert(int0) 
int0 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058271b8> : <type 'instance'>
avl_REF2 = set([8, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
int1 = 2                                                                # STEP 26
ACTION: int1 = 2 
int1 = 12 : <type 'int'>
=> int1 = 2 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 27
ACTION: avl2.insert(int1) 
int1 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058271b8> : <type 'instance'>
avl_REF2 = set([8, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([8, 2, 15]) : <type 'set'>
==================================================
int2 = 20                                                               # STEP 28
ACTION: int2 = 20 
int2 = 15 : <type 'int'>
=> int2 = 20 : <type 'int'>
==================================================
int1 = 8                                                                # STEP 29
ACTION: int1 = 8 
int1 = 2 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 30
ACTION: avl2.insert(int1) 
int1 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058271b8> : <type 'instance'>
avl_REF2 = set([8, 2, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl2.delete(int2)                                                       # STEP 31
ACTION: avl2.delete(int2) 
int2 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058271b8> : <type 'instance'>
avl_REF2 = set([8, 2, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.insert(int1)                                                       # STEP 32
ACTION: avl2.insert(int1) 
int1 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058271b8> : <type 'instance'>
avl_REF2 = set([8, 2, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl2.delete(int1)                                                       # STEP 33
ACTION: avl2.delete(int1) 
int1 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058271b8> : <type 'instance'>
avl_REF2 = set([8, 2, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([2, 15]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 34
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x1058271b8> : <type 'instance'>
avl_REF2 = set([2, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int0 = 1                                                                # STEP 35
ACTION: int0 = 1 
int0 = 8 : <type 'int'>
=> int0 = 1 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 36
ACTION: avl2.insert(int0) 
int0 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058271b8> : <type 'instance'>
avl_REF2 = set([2, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([1, 2, 15]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 37
ACTION: avl2.insert(int0) 
int0 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058271b8> : <type 'instance'>
avl_REF2 = set([1, 2, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
result = avl2.inorder()                                                 # STEP 38
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x1058271b8> : <type 'instance'>
avl_REF2 = set([1, 2, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int3)                                                       # STEP 39
ACTION: avl2.insert(int3) 
int3 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058271b8> : <type 'instance'>
avl_REF2 = set([1, 2, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([1, 2, 5, 15]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 40
ACTION: avl2.insert(int0) 
int0 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058271b8> : <type 'instance'>
avl_REF2 = set([1, 2, 5, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
int1 = 19                                                               # STEP 41
ACTION: int1 = 19 
int1 = 8 : <type 'int'>
=> int1 = 19 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 42
ACTION: avl2.insert(int2) 
int2 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058271b8> : <type 'instance'>
avl_REF2 = set([1, 2, 5, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([1, 2, 5, 15, 20]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 43
ACTION: avl2.delete(int1) 
int1 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058271b8> : <type 'instance'>
avl_REF2 = set([1, 2, 5, 15, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int1 = 18                                                               # STEP 44
ACTION: int1 = 18 
int1 = 19 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 45
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x1058271b8> : <type 'instance'>
avl_REF2 = set([1, 2, 5, 15, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int1)                                                       # STEP 46
ACTION: avl2.insert(int1) 
int1 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058271b8> : <type 'instance'>
avl_REF2 = set([1, 2, 5, 15, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([1, 2, 5, 15, 18, 20]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 47
ACTION: avl2.delete(int2) 
int2 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058271b8> : <type 'instance'>
avl_REF2 = set([1, 2, 5, 15, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([1, 2, 5, 15, 18]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 48
ACTION: avl2.insert(int0) 
int0 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058271b8> : <type 'instance'>
avl_REF2 = set([1, 2, 5, 15, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl2.insert(int2)                                                       # STEP 49
ACTION: avl2.insert(int2) 
int2 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058271b8> : <type 'instance'>
avl_REF2 = set([1, 2, 5, 15, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([1, 2, 5, 15, 18, 20]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 50
ACTION: avl2.insert(int1) 
int1 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058271b8> : <type 'instance'>
avl_REF2 = set([1, 2, 5, 15, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl2.delete(int2)                                                       # STEP 51
ACTION: avl2.delete(int2) 
int2 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058271b8> : <type 'instance'>
avl_REF2 = set([1, 2, 5, 15, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([1, 2, 5, 15, 18]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 52
ACTION: avl2.insert(int2) 
int2 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058271b8> : <type 'instance'>
avl_REF2 = set([1, 2, 5, 15, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([1, 2, 5, 15, 18, 20]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 53
ACTION: avl2.insert(int3) 
int3 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058271b8> : <type 'instance'>
avl_REF2 = set([1, 2, 5, 15, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
avl2.delete(int1)                                                       # STEP 54
ACTION: avl2.delete(int1) 
int1 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058271b8> : <type 'instance'>
avl_REF2 = set([1, 2, 5, 15, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([1, 2, 5, 15, 20]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 55
ACTION: avl2.insert(int3) 
int3 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058271b8> : <type 'instance'>
avl_REF2 = set([1, 2, 5, 15, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
avl2.insert(int3)                                                       # STEP 56
ACTION: avl2.insert(int3) 
int3 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058271b8> : <type 'instance'>
avl_REF2 = set([1, 2, 5, 15, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
avl2.delete(int2)                                                       # STEP 57
ACTION: avl2.delete(int2) 
int2 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058271b8> : <type 'instance'>
avl_REF2 = set([1, 2, 5, 15, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([1, 2, 5, 15]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102ed5f38>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 0
STOPPING TESTING DUE TO TIMEOUT
8.45213849287 PERCENT COVERED
60.2140209675 TOTAL RUNTIME
7 EXECUTED
550 TOTAL TEST OPERATIONS
23.3218827248 TIME SPENT EXECUTING TEST OPERATIONS
0.0647878646851 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
23.3647758961 TIME SPENT CHECKING PROPERTIES
46.6866586208 TOTAL TIME SPENT RUNNING SUT
0.00510025024414 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
2 FAILED
0 REPEATS OF FAILURES
2 ACTUAL DISTINCT FAILURES

FAILURE 0
int1 = 6                                                                 # STEP 0
int3 = 3                                                                 # STEP 1
avl1 = avl.AVLTree()                                                     # STEP 2
int2 = 5                                                                 # STEP 3
avl1.insert(int1)                                                        # STEP 4
avl1.delete(int2)                                                        # STEP 5
avl1.insert(int2)                                                        # STEP 6
avl1.insert(int3)                                                        # STEP 7
result = avl1.inorder()                                                  # STEP 8
avl1.insert(int2)                                                        # STEP 9
avl1.insert(int3)                                                       # STEP 10
avl1.delete(int3)                                                       # STEP 11
avl1.insert(int2)                                                       # STEP 12
avl1.insert(int1)                                                       # STEP 13
int1 = 19                                                               # STEP 14
avl1.insert(int3)                                                       # STEP 15
avl1.insert(int1)                                                       # STEP 16
avl1.insert(int3)                                                       # STEP 17
avl0 = avl.AVLTree()                                                    # STEP 18
int3 = 15                                                               # STEP 19
avl1 = avl.AVLTree()                                                    # STEP 20
avl0.delete(int3)                                                       # STEP 21
avl1.insert(int2)                                                       # STEP 22
avl1.delete(int1)                                                       # STEP 23
int2 = 19                                                               # STEP 24
result = avl0.inorder()                                                 # STEP 25
avl1.delete(int3)                                                       # STEP 26
avl1.insert(int1)                                                       # STEP 27
avl1.insert(int2)                                                       # STEP 28
int1 = 4                                                                # STEP 29
avl1.delete(int3)                                                       # STEP 30
avl1.delete(int1)                                                       # STEP 31
avl0.delete(int2)                                                       # STEP 32
avl1.insert(int2)                                                       # STEP 33
result = avl0.inorder()                                                 # STEP 34
avl0.delete(int3)                                                       # STEP 35
avl0.delete(int1)                                                       # STEP 36
int0 = 10                                                               # STEP 37
result = avl1.find(int2)                                                # STEP 38
avl0.insert(int0)                                                       # STEP 39
int0 = 2                                                                # STEP 40
int3 = 5                                                                # STEP 41
avl0.delete(int2)                                                       # STEP 42
avl0.delete(int3)                                                       # STEP 43
int1 = 4                                                                # STEP 44
avl0.delete(int2)                                                       # STEP 45
int2 = 8                                                                # STEP 46
avl1.insert(int0)                                                       # STEP 47
avl1.delete(int3)                                                       # STEP 48
result = avl1.inorder()                                                 # STEP 49
avl1.insert(int3)                                                       # STEP 50
result = avl0.inorder()                                                 # STEP 51
avl0.delete(int2)                                                       # STEP 52
avl1.delete(int1)                                                       # STEP 53
avl0.insert(int1)                                                       # STEP 54
int0 = 7                                                                # STEP 55
avl0.insert(int3)                                                       # STEP 56
avl1.insert(int1)                                                       # STEP 57
avl1.delete(int0)                                                       # STEP 58
avl1.insert(int0)                                                       # STEP 59
avl0.delete(int2)                                                       # STEP 60
result = avl0.inorder()                                                 # STEP 61
avl1.insert(int3)                                                       # STEP 62
avl0.insert(int0)                                                       # STEP 63
result = avl0.inorder()                                                 # STEP 64
avl1.delete(int2)                                                       # STEP 65
int0 = 9                                                                # STEP 66
int1 = 15                                                               # STEP 67
result = avl0.inorder()                                                 # STEP 68
avl0.insert(int2)                                                       # STEP 69
avl1.insert(int3)                                                       # STEP 70
int3 = 8                                                                # STEP 71
result = avl0.find(int3)                                                # STEP 72
int3 = 8                                                                # STEP 73
avl0.insert(int3)                                                       # STEP 74
avl1.insert(int3)                                                       # STEP 75
avl1.insert(int1)                                                       # STEP 76
avl0.insert(int3)                                                       # STEP 77
int3 = 9                                                                # STEP 78
avl1.display()                                                          # STEP 79
avl1.display()                                                          # STEP 80
avl1.delete(int0)                                                       # STEP 81
avl0.insert(int1)                                                       # STEP 82
avl1.display()                                                          # STEP 83
int2 = 19                                                               # STEP 84
avl0.delete(int1)                                                       # STEP 85
avl1.delete(int0)                                                       # STEP 86
avl0.delete(int3)                                                       # STEP 87
avl0 == avl0                                                            # STEP 88
int1 = 8                                                                # STEP 89
avl0.delete(int0)                                                       # STEP 90
avl0.delete(int1)                                                       # STEP 91
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105834cf8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE 1
int3 = 16                                                                # STEP 0
int0 = 8                                                                 # STEP 1
int2 = 15                                                                # STEP 2
int1 = 2                                                                 # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
result = avl2.inorder()                                                  # STEP 5
avl2.insert(int2)                                                        # STEP 6
avl2.delete(int3)                                                        # STEP 7
int3 = 5                                                                 # STEP 8
avl2.delete(int0)                                                        # STEP 9
avl2.delete(int3)                                                       # STEP 10
avl2.insert(int2)                                                       # STEP 11
result = avl2.inorder()                                                 # STEP 12
avl2.insert(int1)                                                       # STEP 13
avl2.insert(int1)                                                       # STEP 14
avl2.delete(int1)                                                       # STEP 15
avl2.delete(int1)                                                       # STEP 16
int1 = 12                                                               # STEP 17
avl2.insert(int0)                                                       # STEP 18
avl2.delete(int2)                                                       # STEP 19
avl2 == avl2                                                            # STEP 20
result = avl2.find(int2)                                                # STEP 21
avl2.insert(int0)                                                       # STEP 22
avl2.insert(int2)                                                       # STEP 23
avl2.delete(int1)                                                       # STEP 24
avl2.insert(int0)                                                       # STEP 25
int1 = 2                                                                # STEP 26
avl2.insert(int1)                                                       # STEP 27
int2 = 20                                                               # STEP 28
int1 = 8                                                                # STEP 29
avl2.insert(int1)                                                       # STEP 30
avl2.delete(int2)                                                       # STEP 31
avl2.insert(int1)                                                       # STEP 32
avl2.delete(int1)                                                       # STEP 33
result = avl2.inorder()                                                 # STEP 34
int0 = 1                                                                # STEP 35
avl2.insert(int0)                                                       # STEP 36
avl2.insert(int0)                                                       # STEP 37
result = avl2.inorder()                                                 # STEP 38
avl2.insert(int3)                                                       # STEP 39
avl2.insert(int0)                                                       # STEP 40
int1 = 19                                                               # STEP 41
avl2.insert(int2)                                                       # STEP 42
avl2.delete(int1)                                                       # STEP 43
int1 = 18                                                               # STEP 44
result = avl2.inorder()                                                 # STEP 45
avl2.insert(int1)                                                       # STEP 46
avl2.delete(int2)                                                       # STEP 47
avl2.insert(int0)                                                       # STEP 48
avl2.insert(int2)                                                       # STEP 49
avl2.insert(int1)                                                       # STEP 50
avl2.delete(int2)                                                       # STEP 51
avl2.insert(int2)                                                       # STEP 52
avl2.insert(int3)                                                       # STEP 53
avl2.delete(int1)                                                       # STEP 54
avl2.insert(int3)                                                       # STEP 55
avl2.insert(int3)                                                       # STEP 56
avl2.delete(int2)                                                       # STEP 57
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102ed5f38>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
212 BRANCHES COVERED
160 STATEMENTS COVERED

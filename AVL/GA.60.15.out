Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.13910.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x101dc6050>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
Original test has 86 steps

SAVING TEST AS failure.13910.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 16                                                                # STEP 0
ACTION: int0 = 16 
int0 = None : <type 'NoneType'>
=> int0 = 16 : <type 'int'>
==================================================
int1 = 15                                                                # STEP 1
ACTION: int1 = 15 
int1 = None : <type 'NoneType'>
=> int1 = 15 : <type 'int'>
==================================================
int2 = 19                                                                # STEP 2
ACTION: int2 = 19 
int2 = None : <type 'NoneType'>
=> int2 = 19 : <type 'int'>
==================================================
int3 = 9                                                                 # STEP 3
ACTION: int3 = 9 
int3 = None : <type 'NoneType'>
=> int3 = 9 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x102ff0128> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 5
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x102fdaab8> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
result = avl1.find(int0)                                                 # STEP 6
ACTION: result = avl1.find(int0) 
int0 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102ff0128> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
result = avl1.find(int3)                                                 # STEP 7
ACTION: result = avl1.find(int3) 
int3 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102ff0128> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl0 == avl0                                                             # STEP 8
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x102fdaab8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
int3 = 8                                                                 # STEP 9
ACTION: int3 = 8 
int3 = 9 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
avl1 == avl0                                                            # STEP 10
ACTION: avl1 == avl0 
avl1 = <avlbug2.AVLTree instance at 0x102ff0128> : <type 'instance'>
avl0 = <avlbug2.AVLTree instance at 0x102fdaab8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
avl0 == avl1                                                            # STEP 11
ACTION: avl0 == avl1 
avl0 = <avlbug2.AVLTree instance at 0x102fdaab8> : <type 'instance'>
avl1 = <avlbug2.AVLTree instance at 0x102ff0128> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF1 
==================================================
avl1.delete(int1)                                                       # STEP 12
ACTION: avl1.delete(int1) 
int1 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102ff0128> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int0 = 13                                                               # STEP 13
ACTION: int0 = 13 
int0 = 16 : <type 'int'>
=> int0 = 13 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 14
ACTION: avl0.delete(int1) 
int1 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102fdaab8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
result = avl1.find(int0)                                                # STEP 15
ACTION: result = avl1.find(int0) 
int0 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102ff0128> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
int0 = 20                                                               # STEP 16
ACTION: int0 = 20 
int0 = 13 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 17
ACTION: avl1.insert(int1) 
int1 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102ff0128> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([15]) : <type 'set'>
==================================================
int1 = 13                                                               # STEP 18
ACTION: int1 = 13 
int1 = 15 : <type 'int'>
=> int1 = 13 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 19
ACTION: avl1.delete(int1) 
int1 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102ff0128> : <type 'instance'>
avl_REF1 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
result = avl1.find(int0)                                                # STEP 20
ACTION: result = avl1.find(int0) 
int0 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102ff0128> : <type 'instance'>
avl_REF1 = set([15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl1.insert(int0)                                                       # STEP 21
ACTION: avl1.insert(int0) 
int0 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102ff0128> : <type 'instance'>
avl_REF1 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([20, 15]) : <type 'set'>
==================================================
result = avl1.find(int2)                                                # STEP 22
ACTION: result = avl1.find(int2) 
int2 = 19 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102ff0128> : <type 'instance'>
avl_REF1 = set([20, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int1 = 19                                                               # STEP 23
ACTION: int1 = 19 
int1 = 13 : <type 'int'>
=> int1 = 19 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 24
ACTION: avl0.insert(int0) 
int0 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102fdaab8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([20]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 25
ACTION: avl0.insert(int2) 
int2 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102fdaab8> : <type 'instance'>
avl_REF0 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([19, 20]) : <type 'set'>
==================================================
int0 = 12                                                               # STEP 26
ACTION: int0 = 12 
int0 = 20 : <type 'int'>
=> int0 = 12 : <type 'int'>
==================================================
result = avl0.find(int0)                                                # STEP 27
ACTION: result = avl0.find(int0) 
int0 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102fdaab8> : <type 'instance'>
avl_REF0 = set([19, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
int0 = 11                                                               # STEP 28
ACTION: int0 = 11 
int0 = 12 : <type 'int'>
=> int0 = 11 : <type 'int'>
==================================================
int2 = 17                                                               # STEP 29
ACTION: int2 = 17 
int2 = 19 : <type 'int'>
=> int2 = 17 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 30
ACTION: avl0.delete(int2) 
int2 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102fdaab8> : <type 'instance'>
avl_REF0 = set([19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
result = avl1.find(int1)                                                # STEP 31
ACTION: result = avl1.find(int1) 
int1 = 19 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102ff0128> : <type 'instance'>
avl_REF1 = set([20, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int2 = 19                                                               # STEP 32
ACTION: int2 = 19 
int2 = 17 : <type 'int'>
=> int2 = 19 : <type 'int'>
==================================================
int1 = 1                                                                # STEP 33
ACTION: int1 = 1 
int1 = 19 : <type 'int'>
=> int1 = 1 : <type 'int'>
==================================================
avl0 == avl1                                                            # STEP 34
ACTION: avl0 == avl1 
avl0 = <avlbug2.AVLTree instance at 0x102fdaab8> : <type 'instance'>
avl1 = <avlbug2.AVLTree instance at 0x102ff0128> : <type 'instance'>
avl_REF0 = set([19, 20]) : <type 'set'>
avl_REF1 = set([20, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF1 
==================================================
avl2 = avl.AVLTree()                                                    # STEP 35
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x1029c87e8> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl0 == avl1                                                            # STEP 36
ACTION: avl0 == avl1 
avl0 = <avlbug2.AVLTree instance at 0x102fdaab8> : <type 'instance'>
avl1 = <avlbug2.AVLTree instance at 0x102ff0128> : <type 'instance'>
avl_REF0 = set([19, 20]) : <type 'set'>
avl_REF1 = set([20, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF1 
==================================================
result = avl0.inorder()                                                 # STEP 37
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x102fdaab8> : <type 'instance'>
avl_REF0 = set([19, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
result = avl1.find(int0)                                                # STEP 38
ACTION: result = avl1.find(int0) 
int0 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102ff0128> : <type 'instance'>
avl_REF1 = set([20, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl2.delete(int0)                                                       # STEP 39
ACTION: avl2.delete(int0) 
int0 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1029c87e8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.delete(int0)                                                       # STEP 40
ACTION: avl2.delete(int0) 
int0 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1029c87e8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl0.delete(int1)                                                       # STEP 41
ACTION: avl0.delete(int1) 
int1 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102fdaab8> : <type 'instance'>
avl_REF0 = set([19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int1 = 17                                                               # STEP 42
ACTION: int1 = 17 
int1 = 1 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 43
ACTION: avl2.delete(int0) 
int0 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1029c87e8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int0 = 1                                                                # STEP 44
ACTION: int0 = 1 
int0 = 11 : <type 'int'>
=> int0 = 1 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 45
ACTION: avl0 = avl.AVLTree() 
avl0 = <avlbug2.AVLTree instance at 0x102fdaab8> : <type 'instance'>
avl_REF0 = set([19, 20]) : <type 'set'>
=> avl0 = <avlbug2.AVLTree instance at 0x102987f38> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
result = avl1.find(int2)                                                # STEP 46
ACTION: result = avl1.find(int2) 
int2 = 19 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102ff0128> : <type 'instance'>
avl_REF1 = set([20, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int2 = 16                                                               # STEP 47
ACTION: int2 = 16 
int2 = 19 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 48
ACTION: avl1.insert(int1) 
int1 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102ff0128> : <type 'instance'>
avl_REF1 = set([20, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([17, 20, 15]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 49
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x1029c87e8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl1.delete(int3)                                                       # STEP 50
ACTION: avl1.delete(int3) 
int3 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102ff0128> : <type 'instance'>
avl_REF1 = set([17, 20, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int3 = 19                                                               # STEP 51
ACTION: int3 = 19 
int3 = 8 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
result = avl2.find(int2)                                                # STEP 52
ACTION: result = avl2.find(int2) 
int2 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1029c87e8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int2 = 7                                                                # STEP 53
ACTION: int2 = 7 
int2 = 16 : <type 'int'>
=> int2 = 7 : <type 'int'>
==================================================
int1 = 3                                                                # STEP 54
ACTION: int1 = 3 
int1 = 17 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
result = avl0.find(int3)                                                # STEP 55
ACTION: result = avl0.find(int3) 
int3 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102987f38> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
result = avl0.find(int1)                                                # STEP 56
ACTION: result = avl0.find(int1) 
int1 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102987f38> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
int3 = 6                                                                # STEP 57
ACTION: int3 = 6 
int3 = 19 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 58
ACTION: avl0.insert(int0) 
int0 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102987f38> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([1]) : <type 'set'>
==================================================
int1 = 10                                                               # STEP 59
ACTION: int1 = 10 
int1 = 3 : <type 'int'>
=> int1 = 10 : <type 'int'>
==================================================
int0 = 14                                                               # STEP 60
ACTION: int0 = 14 
int0 = 1 : <type 'int'>
=> int0 = 14 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 61
ACTION: avl0.insert(int1) 
int1 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102987f38> : <type 'instance'>
avl_REF0 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([1, 10]) : <type 'set'>
==================================================
avl2 == avl2                                                            # STEP 62
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x1029c87e8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl1 == avl0                                                            # STEP 63
ACTION: avl1 == avl0 
avl1 = <avlbug2.AVLTree instance at 0x102ff0128> : <type 'instance'>
avl0 = <avlbug2.AVLTree instance at 0x102987f38> : <type 'instance'>
avl_REF1 = set([17, 20, 15]) : <type 'set'>
avl_REF0 = set([1, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
result = avl2.inorder()                                                 # STEP 64
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x1029c87e8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl1.insert(int0)                                                       # STEP 65
ACTION: avl1.insert(int0) 
int0 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102ff0128> : <type 'instance'>
avl_REF1 = set([17, 20, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([17, 20, 14, 15]) : <type 'set'>
==================================================
result = avl0.find(int3)                                                # STEP 66
ACTION: result = avl0.find(int3) 
int3 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102987f38> : <type 'instance'>
avl_REF0 = set([1, 10]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
int1 = 4                                                                # STEP 67
ACTION: int1 = 4 
int1 = 10 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
int3 = 7                                                                # STEP 68
ACTION: int3 = 7 
int3 = 6 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
avl2 == avl1                                                            # STEP 69
ACTION: avl2 == avl1 
avl2 = <avlbug2.AVLTree instance at 0x1029c87e8> : <type 'instance'>
avl1 = <avlbug2.AVLTree instance at 0x102ff0128> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
avl_REF1 = set([17, 20, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
avl2.delete(int0)                                                       # STEP 70
ACTION: avl2.delete(int0) 
int0 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1029c87e8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl0.delete(int0)                                                       # STEP 71
ACTION: avl0.delete(int0) 
int0 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102987f38> : <type 'instance'>
avl_REF0 = set([1, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl2.insert(int2)                                                       # STEP 72
ACTION: avl2.insert(int2) 
int2 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1029c87e8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([7]) : <type 'set'>
==================================================
avl1 == avl2                                                            # STEP 73
ACTION: avl1 == avl2 
avl1 = <avlbug2.AVLTree instance at 0x102ff0128> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x1029c87e8> : <type 'instance'>
avl_REF1 = set([17, 20, 14, 15]) : <type 'set'>
avl_REF2 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
int2 = 17                                                               # STEP 74
ACTION: int2 = 17 
int2 = 7 : <type 'int'>
=> int2 = 17 : <type 'int'>
==================================================
int0 = 5                                                                # STEP 75
ACTION: int0 = 5 
int0 = 14 : <type 'int'>
=> int0 = 5 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 76
ACTION: avl0.delete(int0) 
int0 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102987f38> : <type 'instance'>
avl_REF0 = set([1, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl1.delete(int1)                                                       # STEP 77
ACTION: avl1.delete(int1) 
int1 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102ff0128> : <type 'instance'>
avl_REF1 = set([17, 20, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
result = avl2.find(int1)                                                # STEP 78
ACTION: result = avl2.find(int1) 
int1 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1029c87e8> : <type 'instance'>
avl_REF2 = set([7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int1 = 17                                                               # STEP 79
ACTION: int1 = 17 
int1 = 4 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
int0 = 6                                                                # STEP 80
ACTION: int0 = 6 
int0 = 5 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
result = avl2.find(int2)                                                # STEP 81
ACTION: result = avl2.find(int2) 
int2 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1029c87e8> : <type 'instance'>
avl_REF2 = set([7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int2 = 2                                                                # STEP 82
ACTION: int2 = 2 
int2 = 17 : <type 'int'>
=> int2 = 2 : <type 'int'>
==================================================
avl0 == avl1                                                            # STEP 83
ACTION: avl0 == avl1 
avl0 = <avlbug2.AVLTree instance at 0x102987f38> : <type 'instance'>
avl1 = <avlbug2.AVLTree instance at 0x102ff0128> : <type 'instance'>
avl_REF0 = set([1, 10]) : <type 'set'>
avl_REF1 = set([17, 20, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF1 
==================================================
result = avl0.find(int1)                                                # STEP 84
ACTION: result = avl0.find(int1) 
int1 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102987f38> : <type 'instance'>
avl_REF0 = set([1, 10]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl1.delete(int1)                                                       # STEP 85
ACTION: avl1.delete(int1) 
int1 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102ff0128> : <type 'instance'>
avl_REF1 = set([17, 20, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([20, 14, 15]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10296f6c8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #3 STEP #21 (0:00:30.091453) Sun Apr 30 02:51:52 2017 [ 132 stmts 174 branches ]
  13 [2:0]
-- < 8 [1:0]
---- < 1 [0:0] L
---- > 11 [0:0] L
-- > 20 [1:1]
---- < 19 [0:0] L
set([1, 8, 11, 13, 19, 20])
  13 [2:0]
-- < 8 [1:0]
---- < 1 [0:0] L
---- > 11 [0:0] L
-- > 20 [1:1]
---- < 19 [0:0] L
set([1, 8, 11, 13, 19, 20])
  10 [2:0]
-- < 9 [1:1]
---- < 1 [0:0] L
-- > 16 [1:0]
---- < 11 [0:0] L
---- > 18 [0:0] L
set([1, 9, 10, 11, 16, 18])
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 10
STOPPING TESTING DUE TO TIMEOUT
8.30850711685 PERCENT COVERED
60.2519750595 TOTAL RUNTIME
6 EXECUTED
496 TOTAL TEST OPERATIONS
25.5567905903 TIME SPENT EXECUTING TEST OPERATIONS
0.0196759700775 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
25.7876019478 TIME SPENT CHECKING PROPERTIES
51.3443925381 TOTAL TIME SPENT RUNNING SUT
0.00469994544983 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int0 = 16                                                                # STEP 0
int1 = 15                                                                # STEP 1
int2 = 19                                                                # STEP 2
int3 = 9                                                                 # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
avl0 = avl.AVLTree()                                                     # STEP 5
result = avl1.find(int0)                                                 # STEP 6
result = avl1.find(int3)                                                 # STEP 7
avl0 == avl0                                                             # STEP 8
int3 = 8                                                                 # STEP 9
avl1 == avl0                                                            # STEP 10
avl0 == avl1                                                            # STEP 11
avl1.delete(int1)                                                       # STEP 12
int0 = 13                                                               # STEP 13
avl0.delete(int1)                                                       # STEP 14
result = avl1.find(int0)                                                # STEP 15
int0 = 20                                                               # STEP 16
avl1.insert(int1)                                                       # STEP 17
int1 = 13                                                               # STEP 18
avl1.delete(int1)                                                       # STEP 19
result = avl1.find(int0)                                                # STEP 20
avl1.insert(int0)                                                       # STEP 21
result = avl1.find(int2)                                                # STEP 22
int1 = 19                                                               # STEP 23
avl0.insert(int0)                                                       # STEP 24
avl0.insert(int2)                                                       # STEP 25
int0 = 12                                                               # STEP 26
result = avl0.find(int0)                                                # STEP 27
int0 = 11                                                               # STEP 28
int2 = 17                                                               # STEP 29
avl0.delete(int2)                                                       # STEP 30
result = avl1.find(int1)                                                # STEP 31
int2 = 19                                                               # STEP 32
int1 = 1                                                                # STEP 33
avl0 == avl1                                                            # STEP 34
avl2 = avl.AVLTree()                                                    # STEP 35
avl0 == avl1                                                            # STEP 36
result = avl0.inorder()                                                 # STEP 37
result = avl1.find(int0)                                                # STEP 38
avl2.delete(int0)                                                       # STEP 39
avl2.delete(int0)                                                       # STEP 40
avl0.delete(int1)                                                       # STEP 41
int1 = 17                                                               # STEP 42
avl2.delete(int0)                                                       # STEP 43
int0 = 1                                                                # STEP 44
avl0 = avl.AVLTree()                                                    # STEP 45
result = avl1.find(int2)                                                # STEP 46
int2 = 16                                                               # STEP 47
avl1.insert(int1)                                                       # STEP 48
result = avl2.inorder()                                                 # STEP 49
avl1.delete(int3)                                                       # STEP 50
int3 = 19                                                               # STEP 51
result = avl2.find(int2)                                                # STEP 52
int2 = 7                                                                # STEP 53
int1 = 3                                                                # STEP 54
result = avl0.find(int3)                                                # STEP 55
result = avl0.find(int1)                                                # STEP 56
int3 = 6                                                                # STEP 57
avl0.insert(int0)                                                       # STEP 58
int1 = 10                                                               # STEP 59
int0 = 14                                                               # STEP 60
avl0.insert(int1)                                                       # STEP 61
avl2 == avl2                                                            # STEP 62
avl1 == avl0                                                            # STEP 63
result = avl2.inorder()                                                 # STEP 64
avl1.insert(int0)                                                       # STEP 65
result = avl0.find(int3)                                                # STEP 66
int1 = 4                                                                # STEP 67
int3 = 7                                                                # STEP 68
avl2 == avl1                                                            # STEP 69
avl2.delete(int0)                                                       # STEP 70
avl0.delete(int0)                                                       # STEP 71
avl2.insert(int2)                                                       # STEP 72
avl1 == avl2                                                            # STEP 73
int2 = 17                                                               # STEP 74
int0 = 5                                                                # STEP 75
avl0.delete(int0)                                                       # STEP 76
avl1.delete(int1)                                                       # STEP 77
result = avl2.find(int1)                                                # STEP 78
int1 = 17                                                               # STEP 79
int0 = 6                                                                # STEP 80
result = avl2.find(int2)                                                # STEP 81
int2 = 2                                                                # STEP 82
avl0 == avl1                                                            # STEP 83
result = avl0.find(int1)                                                # STEP 84
avl1.delete(int1)                                                       # STEP 85
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10296f6c8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
206 BRANCHES COVERED
156 STATEMENTS COVERED

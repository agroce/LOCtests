Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.99639.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  17 [3:1]
-- < 12 [2:1]
---- < 4 [1:-1]
------ > 5 [0:0] L
---- > 13 [0:0] L
-- > 20 [1:1]
---- < 18 [0:0] L
set([4, 5, 12, 13, 17, 18, 20])
  17 [3:1]
-- < 12 [2:1]
---- < 4 [1:-1]
------ > 5 [0:0] L
---- > 13 [0:0] L
-- > 20 [1:1]
---- < 18 [0:0] L
set([4, 5, 12, 13, 17, 18, 20])
  17 [3:1]
-- < 12 [2:1]
---- < 4 [1:-1]
------ > 5 [0:0] L
---- > 13 [0:0] L
-- > 20 [1:1]
---- < 18 [0:0] L
set([4, 5, 12, 13, 17, 18, 20])
  17 [3:1]
-- < 12 [2:1]
---- < 4 [1:-1]
------ > 5 [0:0] L
---- > 13 [0:0] L
-- > 20 [1:1]
---- < 18 [0:0] L
set([4, 5, 12, 13, 17, 18, 20])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104337f80>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 91 steps

SAVING TEST AS failure.99639.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 13                                                                # STEP 0
ACTION: int2 = 13 
int2 = None : <type 'NoneType'>
=> int2 = 13 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 1
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x1043b5758> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.insert(int2)                                                        # STEP 2
ACTION: avl1.insert(int2) 
int2 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1043b5758> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([13]) : <type 'set'>
==================================================
avl1.delete(int2)                                                        # STEP 3
ACTION: avl1.delete(int2) 
int2 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1043b5758> : <type 'instance'>
avl_REF1 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.delete(int2)                                                        # STEP 4
ACTION: avl1.delete(int2) 
int2 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1043b5758> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.delete(int2)                                                        # STEP 5
ACTION: avl1.delete(int2) 
int2 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1043b5758> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int2 = 15                                                                # STEP 6
ACTION: int2 = 15 
int2 = 13 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
avl1.insert(int2)                                                        # STEP 7
ACTION: avl1.insert(int2) 
int2 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1043b5758> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([15]) : <type 'set'>
==================================================
avl1.delete(int2)                                                        # STEP 8
ACTION: avl1.delete(int2) 
int2 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1043b5758> : <type 'instance'>
avl_REF1 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 9
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x10437a3b0> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 10
ACTION: avl1.delete(int2) 
int2 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1043b5758> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.delete(int2)                                                       # STEP 11
ACTION: avl1.delete(int2) 
int2 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1043b5758> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.delete(int2)                                                       # STEP 12
ACTION: avl1.delete(int2) 
int2 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1043b5758> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl0.delete(int2)                                                       # STEP 13
ACTION: avl0.delete(int2) 
int2 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10437a3b0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.insert(int2)                                                       # STEP 14
ACTION: avl0.insert(int2) 
int2 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10437a3b0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([15]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 15
ACTION: avl0.delete(int2) 
int2 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10437a3b0> : <type 'instance'>
avl_REF0 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 16
ACTION: avl0.delete(int2) 
int2 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10437a3b0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl1.insert(int2)                                                       # STEP 17
ACTION: avl1.insert(int2) 
int2 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1043b5758> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([15]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 18
ACTION: avl1.delete(int2) 
int2 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1043b5758> : <type 'instance'>
avl_REF1 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 19
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x10437a3b0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl1.delete(int2)                                                       # STEP 20
ACTION: avl1.delete(int2) 
int2 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1043b5758> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl0.insert(int2)                                                       # STEP 21
ACTION: avl0.insert(int2) 
int2 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10437a3b0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([15]) : <type 'set'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 22
ACTION: avl0 = avl.AVLTree() 
avl0 = <avl.AVLTree instance at 0x10437a3b0> : <type 'instance'>
avl_REF0 = set([15]) : <type 'set'>
=> avl0 = <avl.AVLTree instance at 0x104371680> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int2 = 11                                                               # STEP 23
ACTION: int2 = 11 
int2 = 15 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 24
ACTION: avl0.insert(int2) 
int2 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104371680> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([11]) : <type 'set'>
==================================================
int3 = 3                                                                # STEP 25
ACTION: int3 = 3 
int3 = None : <type 'NoneType'>
=> int3 = 3 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 26
ACTION: avl1.delete(int2) 
int2 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1043b5758> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl0.delete(int3)                                                       # STEP 27
ACTION: avl0.delete(int3) 
int3 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104371680> : <type 'instance'>
avl_REF0 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.insert(int2)                                                       # STEP 28
ACTION: avl0.insert(int2) 
int2 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104371680> : <type 'instance'>
avl_REF0 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl0 == avl1                                                            # STEP 29
ACTION: avl0 == avl1 
avl0 = <avl.AVLTree instance at 0x104371680> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x1043b5758> : <type 'instance'>
avl_REF0 = set([11]) : <type 'set'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF1 
==================================================
int1 = 20                                                               # STEP 30
ACTION: int1 = 20 
int1 = None : <type 'NoneType'>
=> int1 = 20 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 31
ACTION: avl0.insert(int1) 
int1 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104371680> : <type 'instance'>
avl_REF0 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([11, 20]) : <type 'set'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 32
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x104360170> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int3 = 3                                                                # STEP 33
ACTION: int3 = 3 
int3 = 3 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 34
ACTION: avl1.insert(int2) 
int2 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1043b5758> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([11]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 35
ACTION: avl0.insert(int2) 
int2 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104371680> : <type 'instance'>
avl_REF0 = set([11, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
result = avl0.inorder()                                                 # STEP 36
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104371680> : <type 'instance'>
avl_REF0 = set([11, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
result = avl2.inorder()                                                 # STEP 37
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104360170> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl0.insert(int1)                                                       # STEP 38
ACTION: avl0.insert(int1) 
int1 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104371680> : <type 'instance'>
avl_REF0 = set([11, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl0.delete(int1)                                                       # STEP 39
ACTION: avl0.delete(int1) 
int1 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104371680> : <type 'instance'>
avl_REF0 = set([11, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([11]) : <type 'set'>
==================================================
int0 = 15                                                               # STEP 40
ACTION: int0 = 15 
int0 = None : <type 'NoneType'>
=> int0 = 15 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 41
ACTION: avl1.delete(int2) 
int2 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1043b5758> : <type 'instance'>
avl_REF1 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 42
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104360170> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl0.inorder()                                                 # STEP 43
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104371680> : <type 'instance'>
avl_REF0 = set([11]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int2 = 1                                                                # STEP 44
ACTION: int2 = 1 
int2 = 11 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
int1 = 10                                                               # STEP 45
ACTION: int1 = 10 
int1 = 20 : <type 'int'>
=> int1 = 10 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 46
ACTION: avl0.insert(int1) 
int1 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104371680> : <type 'instance'>
avl_REF0 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([10, 11]) : <type 'set'>
==================================================
int1 = 17                                                               # STEP 47
ACTION: int1 = 17 
int1 = 10 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 48
ACTION: avl1.delete(int0) 
int0 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1043b5758> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
result = avl1.find(int1)                                                # STEP 49
ACTION: result = avl1.find(int1) 
int1 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1043b5758> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl2.delete(int3)                                                       # STEP 50
ACTION: avl2.delete(int3) 
int3 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104360170> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int3 = 20                                                               # STEP 51
ACTION: int3 = 20 
int3 = 3 : <type 'int'>
=> int3 = 20 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 52
ACTION: avl0.insert(int2) 
int2 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104371680> : <type 'instance'>
avl_REF0 = set([10, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([1, 10, 11]) : <type 'set'>
==================================================
avl0 == avl1                                                            # STEP 53
ACTION: avl0 == avl1 
avl0 = <avl.AVLTree instance at 0x104371680> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x1043b5758> : <type 'instance'>
avl_REF0 = set([1, 10, 11]) : <type 'set'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF1 
==================================================
avl0 == avl2                                                            # STEP 54
ACTION: avl0 == avl2 
avl0 = <avl.AVLTree instance at 0x104371680> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x104360170> : <type 'instance'>
avl_REF0 = set([1, 10, 11]) : <type 'set'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
avl1.insert(int2)                                                       # STEP 55
ACTION: avl1.insert(int2) 
int2 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1043b5758> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([1]) : <type 'set'>
==================================================
int2 = 2                                                                # STEP 56
ACTION: int2 = 2 
int2 = 1 : <type 'int'>
=> int2 = 2 : <type 'int'>
==================================================
result = avl1.find(int0)                                                # STEP 57
ACTION: result = avl1.find(int0) 
int0 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1043b5758> : <type 'instance'>
avl_REF1 = set([1]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl0.insert(int1)                                                       # STEP 58
ACTION: avl0.insert(int1) 
int1 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104371680> : <type 'instance'>
avl_REF0 = set([1, 10, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([1, 10, 11, 17]) : <type 'set'>
==================================================
result = avl1.find(int1)                                                # STEP 59
ACTION: result = avl1.find(int1) 
int1 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1043b5758> : <type 'instance'>
avl_REF1 = set([1]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl0.insert(int3)                                                       # STEP 60
ACTION: avl0.insert(int3) 
int3 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104371680> : <type 'instance'>
avl_REF0 = set([1, 10, 11, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([1, 10, 11, 20, 17]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 61
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104371680> : <type 'instance'>
avl_REF0 = set([1, 10, 11, 20, 17]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl1.insert(int0)                                                       # STEP 62
ACTION: avl1.insert(int0) 
int0 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1043b5758> : <type 'instance'>
avl_REF1 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([1, 15]) : <type 'set'>
==================================================
result = avl0.find(int1)                                                # STEP 63
ACTION: result = avl0.find(int1) 
int1 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104371680> : <type 'instance'>
avl_REF0 = set([1, 10, 11, 20, 17]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl1.insert(int2)                                                       # STEP 64
ACTION: avl1.insert(int2) 
int2 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1043b5758> : <type 'instance'>
avl_REF1 = set([1, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([1, 2, 15]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 65
ACTION: avl0.insert(int2) 
int2 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104371680> : <type 'instance'>
avl_REF0 = set([1, 10, 11, 20, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([1, 2, 10, 11, 17, 20]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 66
ACTION: avl0.delete(int2) 
int2 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104371680> : <type 'instance'>
avl_REF0 = set([1, 2, 10, 11, 17, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([1, 10, 11, 17, 20]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 67
ACTION: avl2.insert(int2) 
int2 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104360170> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([2]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 68
ACTION: avl1.insert(int3) 
int3 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1043b5758> : <type 'instance'>
avl_REF1 = set([1, 2, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([1, 2, 15, 20]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 69
ACTION: avl0.delete(int2) 
int2 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104371680> : <type 'instance'>
avl_REF0 = set([1, 10, 11, 17, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl1.delete(int0)                                                       # STEP 70
ACTION: avl1.delete(int0) 
int0 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1043b5758> : <type 'instance'>
avl_REF1 = set([1, 2, 15, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([1, 2, 20]) : <type 'set'>
==================================================
int0 = 12                                                               # STEP 71
ACTION: int0 = 12 
int0 = 15 : <type 'int'>
=> int0 = 12 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 72
ACTION: avl2.insert(int3) 
int3 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104360170> : <type 'instance'>
avl_REF2 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([2, 20]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 73
ACTION: avl2.insert(int3) 
int3 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104360170> : <type 'instance'>
avl_REF2 = set([2, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
result = avl2.inorder()                                                 # STEP 74
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104360170> : <type 'instance'>
avl_REF2 = set([2, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int3)                                                       # STEP 75
ACTION: avl2.insert(int3) 
int3 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104360170> : <type 'instance'>
avl_REF2 = set([2, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
avl1.delete(int1)                                                       # STEP 76
ACTION: avl1.delete(int1) 
int1 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1043b5758> : <type 'instance'>
avl_REF1 = set([1, 2, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int1 = 4                                                                # STEP 77
ACTION: int1 = 4 
int1 = 17 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 78
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1043b5758> : <type 'instance'>
avl_REF1 = set([1, 2, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl0.delete(int1)                                                       # STEP 79
ACTION: avl0.delete(int1) 
int1 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104371680> : <type 'instance'>
avl_REF0 = set([1, 10, 11, 17, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
result = avl2.find(int0)                                                # STEP 80
ACTION: result = avl2.find(int0) 
int0 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104360170> : <type 'instance'>
avl_REF2 = set([2, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
result = avl2.find(int3)                                                # STEP 81
ACTION: result = avl2.find(int3) 
int3 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104360170> : <type 'instance'>
avl_REF2 = set([2, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
int0 = 4                                                                # STEP 82
ACTION: int0 = 4 
int0 = 12 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 83
ACTION: avl1.insert(int1) 
int1 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1043b5758> : <type 'instance'>
avl_REF1 = set([1, 2, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([1, 2, 4, 20]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 84
ACTION: avl1.delete(int2) 
int2 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1043b5758> : <type 'instance'>
avl_REF1 = set([1, 2, 4, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([1, 4, 20]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 85
ACTION: avl1.insert(int2) 
int2 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1043b5758> : <type 'instance'>
avl_REF1 = set([1, 4, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([1, 2, 4, 20]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 86
ACTION: avl2.delete(int3) 
int3 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104360170> : <type 'instance'>
avl_REF2 = set([2, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([2]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 87
ACTION: avl1.insert(int1) 
int1 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1043b5758> : <type 'instance'>
avl_REF1 = set([1, 2, 4, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl2.insert(int1)                                                       # STEP 88
ACTION: avl2.insert(int1) 
int1 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104360170> : <type 'instance'>
avl_REF2 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([2, 4]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 89
ACTION: avl0.delete(int2) 
int2 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104371680> : <type 'instance'>
avl_REF0 = set([1, 10, 11, 17, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl1.delete(int3)                                                       # STEP 90
ACTION: avl1.delete(int3) 
int3 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1043b5758> : <type 'instance'>
avl_REF1 = set([1, 2, 4, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([1, 2, 4]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1042607e8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #3 STEP #95 (0:00:30.009823) Fri Apr 28 04:30:31 2017 [ 163 stmts 218 branches ]
  16 [3:1]
-- < 5 [2:-1]
---- < 1 [0:0] L
---- > 11 [1:-1]
------ > 13 [0:0] L
-- > 18 [1:0]
---- < 17 [0:0] L
---- > 19 [0:0] L
set([1, 5, 11, 13, 16, 17, 18, 19])
  16 [3:1]
-- < 5 [2:-1]
---- < 1 [0:0] L
---- > 11 [1:-1]
------ > 13 [0:0] L
-- > 18 [1:0]
---- < 17 [0:0] L
---- > 19 [0:0] L
set([1, 5, 11, 13, 16, 17, 18, 19])
  16 [3:1]
-- < 5 [2:-1]
---- < 1 [0:0] L
---- > 11 [1:-1]
------ > 13 [0:0] L
-- > 18 [1:0]
---- < 17 [0:0] L
---- > 19 [0:0] L
set([1, 5, 11, 13, 16, 17, 18, 19])
  16 [3:1]
-- < 5 [2:0]
---- < 1 [1:-1]
------ > 2 [0:0] L
---- > 11 [1:-1]
------ > 13 [0:0] L
-- > 18 [1:1]
---- < 17 [0:0] L
set([1, 2, 5, 11, 13, 16, 17, 18])
  16 [3:1]
-- < 5 [2:0]
---- < 1 [1:-1]
------ > 2 [0:0] L
---- > 11 [1:-1]
------ > 13 [0:0] L
-- > 18 [1:1]
---- < 17 [0:0] L
set([1, 2, 5, 11, 13, 16, 17, 18])
  16 [3:1]
-- < 5 [2:0]
---- < 1 [1:-1]
------ > 2 [0:0] L
---- > 11 [1:-1]
------ > 13 [0:0] L
-- > 18 [1:1]
---- < 17 [0:0] L
set([1, 2, 5, 11, 13, 16, 17, 18])
  16 [3:1]
-- < 5 [2:0]
---- < 1 [1:-1]
------ > 2 [0:0] L
---- > 11 [1:-1]
------ > 13 [0:0] L
-- > 18 [1:1]
---- < 17 [0:0] L
set([1, 2, 5, 11, 13, 16, 17, 18])
  16 [3:1]
-- < 5 [2:0]
---- < 1 [1:-1]
------ > 2 [0:0] L
---- > 11 [1:-1]
------ > 13 [0:0] L
-- > 18 [1:1]
---- < 17 [0:0] L
set([1, 2, 5, 11, 13, 16, 17, 18])
  16 [2:0]
-- < 15 [1:1]
---- < 1 [0:0] L
-- > 18 [1:0]
---- < 17 [0:0] L
---- > 19 [0:0] L
set([1, 15, 16, 17, 18, 19])
  16 [2:0]
-- < 15 [1:1]
---- < 1 [0:0] L
-- > 18 [1:0]
---- < 17 [0:0] L
---- > 19 [0:0] L
set([1, 15, 16, 17, 18, 19])
  16 [2:0]
-- < 15 [1:1]
---- < 1 [0:0] L
-- > 18 [1:0]
---- < 17 [0:0] L
---- > 19 [0:0] L
set([1, 15, 16, 17, 18, 19])
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 94
STOPPING TESTING DUE TO TIMEOUT
8.6528673227 PERCENT COVERED
60.188904047 TOTAL RUNTIME
7 EXECUTED
685 TOTAL TEST OPERATIONS
26.2877523899 TIME SPENT EXECUTING TEST OPERATIONS
0.0716731548309 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
26.3834149837 TIME SPENT CHECKING PROPERTIES
52.6711673737 TOTAL TIME SPENT RUNNING SUT
0.00414824485779 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int2 = 13                                                                # STEP 0
avl1 = avl.AVLTree()                                                     # STEP 1
avl1.insert(int2)                                                        # STEP 2
avl1.delete(int2)                                                        # STEP 3
avl1.delete(int2)                                                        # STEP 4
avl1.delete(int2)                                                        # STEP 5
int2 = 15                                                                # STEP 6
avl1.insert(int2)                                                        # STEP 7
avl1.delete(int2)                                                        # STEP 8
avl0 = avl.AVLTree()                                                     # STEP 9
avl1.delete(int2)                                                       # STEP 10
avl1.delete(int2)                                                       # STEP 11
avl1.delete(int2)                                                       # STEP 12
avl0.delete(int2)                                                       # STEP 13
avl0.insert(int2)                                                       # STEP 14
avl0.delete(int2)                                                       # STEP 15
avl0.delete(int2)                                                       # STEP 16
avl1.insert(int2)                                                       # STEP 17
avl1.delete(int2)                                                       # STEP 18
result = avl0.inorder()                                                 # STEP 19
avl1.delete(int2)                                                       # STEP 20
avl0.insert(int2)                                                       # STEP 21
avl0 = avl.AVLTree()                                                    # STEP 22
int2 = 11                                                               # STEP 23
avl0.insert(int2)                                                       # STEP 24
int3 = 3                                                                # STEP 25
avl1.delete(int2)                                                       # STEP 26
avl0.delete(int3)                                                       # STEP 27
avl0.insert(int2)                                                       # STEP 28
avl0 == avl1                                                            # STEP 29
int1 = 20                                                               # STEP 30
avl0.insert(int1)                                                       # STEP 31
avl2 = avl.AVLTree()                                                    # STEP 32
int3 = 3                                                                # STEP 33
avl1.insert(int2)                                                       # STEP 34
avl0.insert(int2)                                                       # STEP 35
result = avl0.inorder()                                                 # STEP 36
result = avl2.inorder()                                                 # STEP 37
avl0.insert(int1)                                                       # STEP 38
avl0.delete(int1)                                                       # STEP 39
int0 = 15                                                               # STEP 40
avl1.delete(int2)                                                       # STEP 41
result = avl2.inorder()                                                 # STEP 42
result = avl0.inorder()                                                 # STEP 43
int2 = 1                                                                # STEP 44
int1 = 10                                                               # STEP 45
avl0.insert(int1)                                                       # STEP 46
int1 = 17                                                               # STEP 47
avl1.delete(int0)                                                       # STEP 48
result = avl1.find(int1)                                                # STEP 49
avl2.delete(int3)                                                       # STEP 50
int3 = 20                                                               # STEP 51
avl0.insert(int2)                                                       # STEP 52
avl0 == avl1                                                            # STEP 53
avl0 == avl2                                                            # STEP 54
avl1.insert(int2)                                                       # STEP 55
int2 = 2                                                                # STEP 56
result = avl1.find(int0)                                                # STEP 57
avl0.insert(int1)                                                       # STEP 58
result = avl1.find(int1)                                                # STEP 59
avl0.insert(int3)                                                       # STEP 60
result = avl0.inorder()                                                 # STEP 61
avl1.insert(int0)                                                       # STEP 62
result = avl0.find(int1)                                                # STEP 63
avl1.insert(int2)                                                       # STEP 64
avl0.insert(int2)                                                       # STEP 65
avl0.delete(int2)                                                       # STEP 66
avl2.insert(int2)                                                       # STEP 67
avl1.insert(int3)                                                       # STEP 68
avl0.delete(int2)                                                       # STEP 69
avl1.delete(int0)                                                       # STEP 70
int0 = 12                                                               # STEP 71
avl2.insert(int3)                                                       # STEP 72
avl2.insert(int3)                                                       # STEP 73
result = avl2.inorder()                                                 # STEP 74
avl2.insert(int3)                                                       # STEP 75
avl1.delete(int1)                                                       # STEP 76
int1 = 4                                                                # STEP 77
result = avl1.inorder()                                                 # STEP 78
avl0.delete(int1)                                                       # STEP 79
result = avl2.find(int0)                                                # STEP 80
result = avl2.find(int3)                                                # STEP 81
int0 = 4                                                                # STEP 82
avl1.insert(int1)                                                       # STEP 83
avl1.delete(int2)                                                       # STEP 84
avl1.insert(int2)                                                       # STEP 85
avl2.delete(int3)                                                       # STEP 86
avl1.insert(int1)                                                       # STEP 87
avl2.insert(int1)                                                       # STEP 88
avl0.delete(int2)                                                       # STEP 89
avl1.delete(int3)                                                       # STEP 90
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1042607e8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
218 BRANCHES COVERED
163 STATEMENTS COVERED

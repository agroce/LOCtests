Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=True, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.40412.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  11 [2:0]
-- < 3 [1:0]
---- < 1 [0:0] L
---- > 7 [0:0] L
-- > 17 [1:0]
---- < 14 [0:0] L
---- > 19 [0:0] L
set([1, 3, 7, 11, 14, 17, 19])
  11 [2:0]
-- < 3 [1:0]
---- < 1 [0:0] L
---- > 7 [0:0] L
-- > 17 [1:0]
---- < 14 [0:0] L
---- > 19 [0:0] L
set([1, 3, 7, 11, 14, 17, 19])
WARNING: DEADLOCK (NO ENABLED ACTIONS)
TERMINATING TEST DUE TO NO ENABLED ACTIONS
TEST #5 STEP #19 (0:00:30.051589) Mon May  1 02:19:53 2017 [ 144 stmts 191 branches ]
  11 [2:0]
-- < 6 [1:0]
---- < 2 [0:0] L
---- > 7 [0:0] L
-- > 17 [1:-1]
---- > 19 [0:0] L
set([2, 6, 7, 11, 17, 19])
  11 [2:0]
-- < 6 [1:0]
---- < 2 [0:0] L
---- > 7 [0:0] L
-- > 17 [1:-1]
---- > 19 [0:0] L
set([2, 6, 7, 11, 17, 19])
  11 [3:1]
-- < 6 [2:-1]
---- < 2 [0:0] L
---- > 7 [1:-1]
------ > 10 [0:0] L
-- > 17 [1:-1]
---- > 19 [0:0] L
set([2, 6, 7, 10, 11, 17, 19])
  11 [3:1]
-- < 6 [2:-1]
---- < 2 [0:0] L
---- > 7 [1:-1]
------ > 10 [0:0] L
-- > 17 [1:-1]
---- > 19 [0:0] L
set([2, 6, 7, 10, 11, 17, 19])
  11 [3:1]
-- < 6 [2:-1]
---- < 2 [0:0] L
---- > 7 [1:-1]
------ > 10 [0:0] L
-- > 17 [1:-1]
---- > 19 [0:0] L
set([2, 6, 7, 10, 11, 17, 19])
  11 [3:1]
-- < 6 [2:-1]
---- < 2 [0:0] L
---- > 7 [1:-1]
------ > 10 [0:0] L
-- > 17 [1:-1]
---- > 19 [0:0] L
set([2, 6, 7, 10, 11, 17, 19])
  11 [2:0]
-- < 2 [1:0]
---- < 1 [0:0] L
---- > 5 [0:0] L
-- > 19 [1:-1]
---- > 20 [0:0] L
set([1, 2, 5, 11, 19, 20])
  11 [3:1]
-- < 6 [2:-1]
---- < 2 [0:0] L
---- > 7 [1:-1]
------ > 10 [0:0] L
-- > 17 [1:-1]
---- > 19 [0:0] L
set([2, 6, 7, 10, 11, 17, 19])
  11 [3:1]
-- < 6 [2:-1]
---- < 2 [0:0] L
---- > 7 [1:-1]
------ > 10 [0:0] L
-- > 17 [1:-1]
---- > 19 [0:0] L
set([2, 6, 7, 10, 11, 17, 19])
  11 [3:1]
-- < 6 [2:-1]
---- < 2 [0:0] L
---- > 7 [1:-1]
------ > 10 [0:0] L
-- > 17 [1:-1]
---- > 19 [0:0] L
set([2, 6, 7, 10, 11, 17, 19])
  11 [3:1]
-- < 6 [2:-1]
---- < 2 [0:0] L
---- > 8 [1:0]
------ < 7 [0:0] L
------ > 10 [0:0] L
-- > 17 [1:-1]
---- > 19 [0:0] L
set([2, 6, 7, 8, 10, 11, 17, 19])
  11 [3:1]
-- < 6 [2:-1]
---- < 2 [0:0] L
---- > 8 [1:0]
------ < 7 [0:0] L
------ > 10 [0:0] L
-- > 17 [1:-1]
---- > 19 [0:0] L
set([2, 6, 7, 8, 10, 11, 17, 19])
  11 [3:1]
-- < 2 [2:-1]
---- < 1 [0:0] L
---- > 5 [1:-1]
------ > 8 [0:0] L
-- > 19 [1:0]
---- < 13 [0:0] L
---- > 20 [0:0] L
set([1, 2, 5, 8, 11, 13, 19, 20])
  11 [3:1]
-- < 2 [2:-1]
---- < 1 [0:0] L
---- > 5 [1:-1]
------ > 8 [0:0] L
-- > 19 [1:0]
---- < 13 [0:0] L
---- > 20 [0:0] L
set([1, 2, 5, 8, 11, 13, 19, 20])
  11 [3:1]
-- < 6 [2:-1]
---- < 2 [0:0] L
---- > 8 [1:0]
------ < 7 [0:0] L
------ > 10 [0:0] L
-- > 17 [1:-1]
---- > 19 [0:0] L
set([2, 6, 7, 8, 10, 11, 17, 19])
  11 [3:1]
-- < 6 [2:-1]
---- < 2 [0:0] L
---- > 8 [1:0]
------ < 7 [0:0] L
------ > 10 [0:0] L
-- > 17 [1:-1]
---- > 19 [0:0] L
set([2, 6, 7, 8, 10, 11, 17, 19])
  11 [3:1]
-- < 2 [2:-1]
---- < 1 [0:0] L
---- > 5 [1:-1]
------ > 8 [0:0] L
-- > 19 [1:0]
---- < 13 [0:0] L
---- > 20 [0:0] L
set([1, 2, 5, 8, 11, 13, 19, 20])
  11 [3:1]
-- < 6 [2:-1]
---- < 2 [0:0] L
---- > 8 [1:0]
------ < 7 [0:0] L
------ > 10 [0:0] L
-- > 17 [1:-1]
---- > 19 [0:0] L
set([2, 6, 7, 8, 10, 11, 17, 19])
  11 [3:1]
-- < 6 [2:-1]
---- < 2 [0:0] L
---- > 8 [1:0]
------ < 7 [0:0] L
------ > 10 [0:0] L
-- > 17 [1:-1]
---- > 19 [0:0] L
set([2, 6, 7, 8, 10, 11, 17, 19])
  11 [3:1]
-- < 6 [2:-1]
---- < 2 [0:0] L
---- > 8 [1:0]
------ < 7 [0:0] L
------ > 10 [0:0] L
-- > 17 [1:-1]
---- > 19 [0:0] L
set([2, 6, 7, 8, 10, 11, 17, 19])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x101f09f80>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
Original test has 57 steps

SAVING TEST AS failure.40412.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 5                                                                 # STEP 0
ACTION: int1 = 5 
int1 = None : <type 'NoneType'>
=> int1 = 5 : <type 'int'>
==================================================
int2 = 2                                                                 # STEP 1
ACTION: int2 = 2 
int2 = None : <type 'NoneType'>
=> int2 = 2 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 2
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x101f09998> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.delete(int1)                                                        # STEP 3
ACTION: avl2.delete(int1) 
int1 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101f09998> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int2)                                                        # STEP 4
ACTION: avl2.insert(int2) 
int2 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101f09998> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([2]) : <type 'set'>
==================================================
result = avl2.inorder()                                                  # STEP 5
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x101f09998> : <type 'instance'>
avl_REF2 = set([2]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int2)                                                        # STEP 6
ACTION: avl2.delete(int2) 
int2 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101f09998> : <type 'instance'>
avl_REF2 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int2)                                                        # STEP 7
ACTION: avl2.insert(int2) 
int2 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101f09998> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([2]) : <type 'set'>
==================================================
int0 = 14                                                                # STEP 8
ACTION: int0 = 14 
int0 = None : <type 'NoneType'>
=> int0 = 14 : <type 'int'>
==================================================
result = avl2.inorder()                                                  # STEP 9
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x101f09998> : <type 'instance'>
avl_REF2 = set([2]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int2 = 11                                                               # STEP 10
ACTION: int2 = 11 
int2 = 2 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 11
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x101f09998> : <type 'instance'>
avl_REF2 = set([2]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int1)                                                       # STEP 12
ACTION: avl2.delete(int1) 
int1 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101f09998> : <type 'instance'>
avl_REF2 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2 == avl2                                                            # STEP 13
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x101f09998> : <type 'instance'>
avl_REF2 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
int1 = 16                                                               # STEP 14
ACTION: int1 = 16 
int1 = 5 : <type 'int'>
=> int1 = 16 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 15
ACTION: avl2.delete(int0) 
int0 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101f09998> : <type 'instance'>
avl_REF2 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.delete(int1)                                                       # STEP 16
ACTION: avl2.delete(int1) 
int1 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101f09998> : <type 'instance'>
avl_REF2 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int1 = 20                                                               # STEP 17
ACTION: int1 = 20 
int1 = 16 : <type 'int'>
=> int1 = 20 : <type 'int'>
==================================================
int0 = 4                                                                # STEP 18
ACTION: int0 = 4 
int0 = 14 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 19
ACTION: avl2.delete(int2) 
int2 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101f09998> : <type 'instance'>
avl_REF2 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int2 = 9                                                                # STEP 20
ACTION: int2 = 9 
int2 = 11 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
int3 = 6                                                                # STEP 21
ACTION: int3 = 6 
int3 = None : <type 'NoneType'>
=> int3 = 6 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 22
ACTION: avl2.insert(int0) 
int0 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101f09998> : <type 'instance'>
avl_REF2 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([2, 4]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 23
ACTION: avl2.insert(int1) 
int1 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101f09998> : <type 'instance'>
avl_REF2 = set([2, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([20, 2, 4]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 24
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x101f09998> : <type 'instance'>
avl_REF2 = set([20, 2, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int1 = 13                                                               # STEP 25
ACTION: int1 = 13 
int1 = 20 : <type 'int'>
=> int1 = 13 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 26
ACTION: avl2.insert(int3) 
int3 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101f09998> : <type 'instance'>
avl_REF2 = set([20, 2, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([20, 2, 4, 6]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 27
ACTION: avl2.delete(int1) 
int1 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101f09998> : <type 'instance'>
avl_REF2 = set([20, 2, 4, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int2)                                                       # STEP 28
ACTION: avl2.insert(int2) 
int2 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101f09998> : <type 'instance'>
avl_REF2 = set([20, 2, 4, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([20, 2, 4, 6, 9]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 29
ACTION: avl2.insert(int3) 
int3 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101f09998> : <type 'instance'>
avl_REF2 = set([20, 2, 4, 6, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
avl2.delete(int0)                                                       # STEP 30
ACTION: avl2.delete(int0) 
int0 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101f09998> : <type 'instance'>
avl_REF2 = set([20, 2, 4, 6, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([20, 2, 6, 9]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 31
ACTION: avl2.insert(int3) 
int3 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101f09998> : <type 'instance'>
avl_REF2 = set([20, 2, 6, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
avl2.insert(int2)                                                       # STEP 32
ACTION: avl2.insert(int2) 
int2 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101f09998> : <type 'instance'>
avl_REF2 = set([20, 2, 6, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl2.insert(int1)                                                       # STEP 33
ACTION: avl2.insert(int1) 
int1 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101f09998> : <type 'instance'>
avl_REF2 = set([20, 2, 6, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([2, 6, 9, 13, 20]) : <type 'set'>
==================================================
int0 = 11                                                               # STEP 34
ACTION: int0 = 11 
int0 = 4 : <type 'int'>
=> int0 = 11 : <type 'int'>
==================================================
int2 = 11                                                               # STEP 35
ACTION: int2 = 11 
int2 = 9 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
int1 = 8                                                                # STEP 36
ACTION: int1 = 8 
int1 = 13 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
int3 = 3                                                                # STEP 37
ACTION: int3 = 3 
int3 = 6 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 38
ACTION: avl2.delete(int3) 
int3 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101f09998> : <type 'instance'>
avl_REF2 = set([2, 6, 9, 13, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.insert(int3)                                                       # STEP 39
ACTION: avl2.insert(int3) 
int3 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101f09998> : <type 'instance'>
avl_REF2 = set([2, 6, 9, 13, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([2, 3, 6, 9, 13, 20]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 40
ACTION: avl2.insert(int2) 
int2 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101f09998> : <type 'instance'>
avl_REF2 = set([2, 3, 6, 9, 13, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([2, 3, 6, 9, 11, 13, 20]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 41
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x101f09998> : <type 'instance'>
avl_REF2 = set([2, 3, 6, 9, 11, 13, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int1)                                                       # STEP 42
ACTION: avl2.insert(int1) 
int1 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101f09998> : <type 'instance'>
avl_REF2 = set([2, 3, 6, 9, 11, 13, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([2, 3, 6, 8, 9, 11, 13, 20]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 43
ACTION: avl2.delete(int1) 
int1 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101f09998> : <type 'instance'>
avl_REF2 = set([2, 3, 6, 8, 9, 11, 13, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([2, 3, 6, 9, 11, 13, 20]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 44
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x101f09998> : <type 'instance'>
avl_REF2 = set([2, 3, 6, 9, 11, 13, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int3 = 9                                                                # STEP 45
ACTION: int3 = 9 
int3 = 3 : <type 'int'>
=> int3 = 9 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 46
ACTION: avl2.insert(int3) 
int3 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101f09998> : <type 'instance'>
avl_REF2 = set([2, 3, 6, 9, 11, 13, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
avl2.delete(int0)                                                       # STEP 47
ACTION: avl2.delete(int0) 
int0 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101f09998> : <type 'instance'>
avl_REF2 = set([2, 3, 6, 9, 11, 13, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([2, 3, 6, 9, 13, 20]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 48
ACTION: avl2.delete(int2) 
int2 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101f09998> : <type 'instance'>
avl_REF2 = set([2, 3, 6, 9, 13, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.insert(int1)                                                       # STEP 49
ACTION: avl2.insert(int1) 
int1 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101f09998> : <type 'instance'>
avl_REF2 = set([2, 3, 6, 9, 13, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([2, 3, 6, 8, 9, 13, 20]) : <type 'set'>
==================================================
int1 = 3                                                                # STEP 50
ACTION: int1 = 3 
int1 = 8 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 51
ACTION: avl2.insert(int2) 
int2 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101f09998> : <type 'instance'>
avl_REF2 = set([2, 3, 6, 8, 9, 13, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([2, 3, 6, 8, 9, 11, 13, 20]) : <type 'set'>
==================================================
int2 = 16                                                               # STEP 52
ACTION: int2 = 16 
int2 = 11 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 53
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x1032adb00> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 54
ACTION: avl0.insert(int0) 
int0 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1032adb00> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([11]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 55
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x1032adb00> : <type 'instance'>
avl_REF0 = set([11]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl2.delete(int1)                                                       # STEP 56
ACTION: avl2.delete(int1) 
int1 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101f09998> : <type 'instance'>
avl_REF2 = set([2, 3, 6, 8, 9, 11, 13, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([2, 6, 8, 9, 11, 13, 20]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10328d7a0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 0
STOPPING TESTING DUE TO TIMEOUT
8.73660279311 PERCENT COVERED
65.2724030018 TOTAL RUNTIME
9 EXECUTED
660 TOTAL TEST OPERATIONS
29.6888592243 TIME SPENT EXECUTING TEST OPERATIONS
0.0959694385529 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
30.0170705318 TIME SPENT CHECKING PROPERTIES
59.7059297562 TOTAL TIME SPENT RUNNING SUT
0.00486493110657 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int1 = 5                                                                 # STEP 0
int2 = 2                                                                 # STEP 1
avl2 = avl.AVLTree()                                                     # STEP 2
avl2.delete(int1)                                                        # STEP 3
avl2.insert(int2)                                                        # STEP 4
result = avl2.inorder()                                                  # STEP 5
avl2.delete(int2)                                                        # STEP 6
avl2.insert(int2)                                                        # STEP 7
int0 = 14                                                                # STEP 8
result = avl2.inorder()                                                  # STEP 9
int2 = 11                                                               # STEP 10
result = avl2.inorder()                                                 # STEP 11
avl2.delete(int1)                                                       # STEP 12
avl2 == avl2                                                            # STEP 13
int1 = 16                                                               # STEP 14
avl2.delete(int0)                                                       # STEP 15
avl2.delete(int1)                                                       # STEP 16
int1 = 20                                                               # STEP 17
int0 = 4                                                                # STEP 18
avl2.delete(int2)                                                       # STEP 19
int2 = 9                                                                # STEP 20
int3 = 6                                                                # STEP 21
avl2.insert(int0)                                                       # STEP 22
avl2.insert(int1)                                                       # STEP 23
result = avl2.inorder()                                                 # STEP 24
int1 = 13                                                               # STEP 25
avl2.insert(int3)                                                       # STEP 26
avl2.delete(int1)                                                       # STEP 27
avl2.insert(int2)                                                       # STEP 28
avl2.insert(int3)                                                       # STEP 29
avl2.delete(int0)                                                       # STEP 30
avl2.insert(int3)                                                       # STEP 31
avl2.insert(int2)                                                       # STEP 32
avl2.insert(int1)                                                       # STEP 33
int0 = 11                                                               # STEP 34
int2 = 11                                                               # STEP 35
int1 = 8                                                                # STEP 36
int3 = 3                                                                # STEP 37
avl2.delete(int3)                                                       # STEP 38
avl2.insert(int3)                                                       # STEP 39
avl2.insert(int2)                                                       # STEP 40
result = avl2.inorder()                                                 # STEP 41
avl2.insert(int1)                                                       # STEP 42
avl2.delete(int1)                                                       # STEP 43
result = avl2.inorder()                                                 # STEP 44
int3 = 9                                                                # STEP 45
avl2.insert(int3)                                                       # STEP 46
avl2.delete(int0)                                                       # STEP 47
avl2.delete(int2)                                                       # STEP 48
avl2.insert(int1)                                                       # STEP 49
int1 = 3                                                                # STEP 50
avl2.insert(int2)                                                       # STEP 51
int2 = 16                                                               # STEP 52
avl0 = avl.AVLTree()                                                    # STEP 53
avl0.insert(int0)                                                       # STEP 54
result = avl0.inorder()                                                 # STEP 55
avl2.delete(int1)                                                       # STEP 56
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10328d7a0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
212 BRANCHES COVERED
160 STATEMENTS COVERED

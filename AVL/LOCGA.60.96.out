Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.62598.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  7 [2:0]
-- < 3 [1:0]
---- < 1 [0:0] L
---- > 6 [0:0] L
-- > 13 [1:-1]
---- > 16 [0:0] L
set([1, 3, 6, 7, 13, 16])
  7 [2:0]
-- < 3 [1:0]
---- < 1 [0:0] L
---- > 6 [0:0] L
-- > 13 [1:-1]
---- > 16 [0:0] L
set([1, 3, 6, 7, 13, 16])
  7 [2:0]
-- < 3 [1:0]
---- < 1 [0:0] L
---- > 6 [0:0] L
-- > 13 [1:-1]
---- > 16 [0:0] L
set([1, 3, 6, 7, 13, 16])
  7 [2:0]
-- < 3 [1:0]
---- < 1 [0:0] L
---- > 6 [0:0] L
-- > 13 [1:0]
---- < 11 [0:0] L
---- > 16 [0:0] L
set([1, 3, 6, 7, 11, 13, 16])
  7 [2:0]
-- < 3 [1:0]
---- < 1 [0:0] L
---- > 6 [0:0] L
-- > 13 [1:0]
---- < 11 [0:0] L
---- > 16 [0:0] L
set([1, 3, 6, 7, 11, 13, 16])
  17 [2:0]
-- < 9 [1:0]
---- < 8 [0:0] L
---- > 10 [0:0] L
-- > 18 [1:-1]
---- > 20 [0:0] L
set([8, 9, 10, 17, 18, 20])
TEST #4 STEP #27 (0:00:30.070931) Mon May  1 18:54:48 2017 [ 160 stmts 212 branches ]
  15 [2:0]
-- < 12 [1:0]
---- < 3 [0:0] L
---- > 13 [0:0] L
-- > 18 [1:1]
---- < 16 [0:0] L
set([3, 12, 13, 15, 16, 18])
  15 [2:0]
-- < 12 [1:0]
---- < 3 [0:0] L
---- > 13 [0:0] L
-- > 18 [1:1]
---- < 16 [0:0] L
set([3, 12, 13, 15, 16, 18])
  15 [2:0]
-- < 12 [1:0]
---- < 3 [0:0] L
---- > 13 [0:0] L
-- > 18 [1:1]
---- < 16 [0:0] L
set([3, 12, 13, 15, 16, 18])
  15 [2:0]
-- < 12 [1:0]
---- < 3 [0:0] L
---- > 13 [0:0] L
-- > 18 [1:1]
---- < 16 [0:0] L
set([3, 12, 13, 15, 16, 18])
  15 [3:1]
-- < 12 [2:-1]
---- < 3 [0:0] L
---- > 13 [1:-1]
------ > 14 [0:0] L
-- > 18 [1:1]
---- < 16 [0:0] L
set([3, 12, 13, 14, 15, 16, 18])
  15 [3:1]
-- < 12 [2:0]
---- < 3 [1:1]
------ < 1 [0:0] L
---- > 13 [1:-1]
------ > 14 [0:0] L
-- > 18 [1:1]
---- < 16 [0:0] L
set([1, 3, 12, 13, 14, 15, 16, 18])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1036ff8c0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
Original test has 99 steps

SAVING TEST AS failure.62598.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 15                                                                # STEP 0
ACTION: int2 = 15 
int2 = None : <type 'NoneType'>
=> int2 = 15 : <type 'int'>
==================================================
int3 = 18                                                                # STEP 1
ACTION: int3 = 18 
int3 = None : <type 'NoneType'>
=> int3 = 18 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 2
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x1036af200> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int0 = 18                                                                # STEP 3
ACTION: int0 = 18 
int0 = None : <type 'NoneType'>
=> int0 = 18 : <type 'int'>
==================================================
avl1.insert(int0)                                                        # STEP 4
ACTION: avl1.insert(int0) 
int0 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1036af200> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([18]) : <type 'set'>
==================================================
avl1.insert(int2)                                                        # STEP 5
ACTION: avl1.insert(int2) 
int2 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1036af200> : <type 'instance'>
avl_REF1 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([18, 15]) : <type 'set'>
==================================================
avl1.delete(int3)                                                        # STEP 6
ACTION: avl1.delete(int3) 
int3 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1036af200> : <type 'instance'>
avl_REF1 = set([18, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([15]) : <type 'set'>
==================================================
avl1.insert(int2)                                                        # STEP 7
ACTION: avl1.insert(int2) 
int2 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1036af200> : <type 'instance'>
avl_REF1 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
avl1.delete(int0)                                                        # STEP 8
ACTION: avl1.delete(int0) 
int0 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1036af200> : <type 'instance'>
avl_REF1 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.insert(int0)                                                        # STEP 9
ACTION: avl1.insert(int0) 
int0 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1036af200> : <type 'instance'>
avl_REF1 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([18, 15]) : <type 'set'>
==================================================
int1 = 18                                                               # STEP 10
ACTION: int1 = 18 
int1 = None : <type 'NoneType'>
=> int1 = 18 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 11
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x1036af200> : <type 'instance'>
avl_REF1 = set([18, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
result = avl1.inorder()                                                 # STEP 12
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x1036af200> : <type 'instance'>
avl_REF1 = set([18, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.delete(int1)                                                       # STEP 13
ACTION: avl1.delete(int1) 
int1 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1036af200> : <type 'instance'>
avl_REF1 = set([18, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([15]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 14
ACTION: avl1.insert(int3) 
int3 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1036af200> : <type 'instance'>
avl_REF1 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([18, 15]) : <type 'set'>
==================================================
int1 = 18                                                               # STEP 15
ACTION: int1 = 18 
int1 = 18 : <type 'int'>
==================================================
result = avl1.find(int1)                                                # STEP 16
ACTION: result = avl1.find(int1) 
int1 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1036af200> : <type 'instance'>
avl_REF1 = set([18, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl1.insert(int0)                                                       # STEP 17
ACTION: avl1.insert(int0) 
int0 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1036af200> : <type 'instance'>
avl_REF1 = set([18, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
result = avl1.inorder()                                                 # STEP 18
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x1036af200> : <type 'instance'>
avl_REF1 = set([18, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
result = avl1.inorder()                                                 # STEP 19
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x1036af200> : <type 'instance'>
avl_REF1 = set([18, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int1)                                                       # STEP 20
ACTION: avl1.insert(int1) 
int1 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1036af200> : <type 'instance'>
avl_REF1 = set([18, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl1.delete(int1)                                                       # STEP 21
ACTION: avl1.delete(int1) 
int1 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1036af200> : <type 'instance'>
avl_REF1 = set([18, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([15]) : <type 'set'>
==================================================
int0 = 13                                                               # STEP 22
ACTION: int0 = 13 
int0 = 18 : <type 'int'>
=> int0 = 13 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 23
ACTION: avl1.delete(int1) 
int1 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1036af200> : <type 'instance'>
avl_REF1 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int2 = 7                                                                # STEP 24
ACTION: int2 = 7 
int2 = 15 : <type 'int'>
=> int2 = 7 : <type 'int'>
==================================================
int1 = 18                                                               # STEP 25
ACTION: int1 = 18 
int1 = 18 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 26
ACTION: avl1.insert(int3) 
int3 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1036af200> : <type 'instance'>
avl_REF1 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([18, 15]) : <type 'set'>
==================================================
int3 = 10                                                               # STEP 27
ACTION: int3 = 10 
int3 = 18 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 28
ACTION: avl1.insert(int1) 
int1 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1036af200> : <type 'instance'>
avl_REF1 = set([18, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
int1 = 3                                                                # STEP 29
ACTION: int1 = 3 
int1 = 18 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 30
ACTION: avl1.delete(int1) 
int1 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1036af200> : <type 'instance'>
avl_REF1 = set([18, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.delete(int2)                                                       # STEP 31
ACTION: avl1.delete(int2) 
int2 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1036af200> : <type 'instance'>
avl_REF1 = set([18, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int1 = 12                                                               # STEP 32
ACTION: int1 = 12 
int1 = 3 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 33
ACTION: avl1.delete(int2) 
int2 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1036af200> : <type 'instance'>
avl_REF1 = set([18, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.insert(int0)                                                       # STEP 34
ACTION: avl1.insert(int0) 
int0 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1036af200> : <type 'instance'>
avl_REF1 = set([18, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([18, 13, 15]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 35
ACTION: avl1.insert(int2) 
int2 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1036af200> : <type 'instance'>
avl_REF1 = set([18, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([18, 7, 13, 15]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 36
ACTION: avl1.delete(int2) 
int2 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1036af200> : <type 'instance'>
avl_REF1 = set([18, 7, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([18, 13, 15]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 37
ACTION: avl1.delete(int0) 
int0 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1036af200> : <type 'instance'>
avl_REF1 = set([18, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([18, 15]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 38
ACTION: avl1.insert(int1) 
int1 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1036af200> : <type 'instance'>
avl_REF1 = set([18, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([18, 12, 15]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 39
ACTION: avl1.delete(int3) 
int3 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1036af200> : <type 'instance'>
avl_REF1 = set([18, 12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.delete(int0)                                                       # STEP 40
ACTION: avl1.delete(int0) 
int0 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1036af200> : <type 'instance'>
avl_REF1 = set([18, 12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.delete(int2)                                                       # STEP 41
ACTION: avl1.delete(int2) 
int2 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1036af200> : <type 'instance'>
avl_REF1 = set([18, 12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.insert(int0)                                                       # STEP 42
ACTION: avl1.insert(int0) 
int0 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1036af200> : <type 'instance'>
avl_REF1 = set([18, 12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([18, 12, 13, 15]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 43
ACTION: avl1.delete(int2) 
int2 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1036af200> : <type 'instance'>
avl_REF1 = set([18, 12, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.delete(int2)                                                       # STEP 44
ACTION: avl1.delete(int2) 
int2 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1036af200> : <type 'instance'>
avl_REF1 = set([18, 12, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int2 = 3                                                                # STEP 45
ACTION: int2 = 3 
int2 = 7 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
int0 = 16                                                               # STEP 46
ACTION: int0 = 16 
int0 = 13 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 47
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x103374320> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 48
ACTION: avl1.insert(int2) 
int2 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1036af200> : <type 'instance'>
avl_REF1 = set([18, 12, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([18, 3, 12, 13, 15]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 49
ACTION: avl2.insert(int2) 
int2 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103374320> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([3]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 50
ACTION: avl2.delete(int3) 
int3 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103374320> : <type 'instance'>
avl_REF2 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.insert(int2)                                                       # STEP 51
ACTION: avl2.insert(int2) 
int2 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103374320> : <type 'instance'>
avl_REF2 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl1.insert(int0)                                                       # STEP 52
ACTION: avl1.insert(int0) 
int0 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1036af200> : <type 'instance'>
avl_REF1 = set([18, 3, 12, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([3, 12, 13, 15, 16, 18]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 53
ACTION: avl2.delete(int1) 
int1 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103374320> : <type 'instance'>
avl_REF2 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl1.insert(int0)                                                       # STEP 54
ACTION: avl1.insert(int0) 
int0 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1036af200> : <type 'instance'>
avl_REF1 = set([3, 12, 13, 15, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.display()                                                          # STEP 55
ACTION: avl1.display() 
avl1 = <avlbug2.AVLTree instance at 0x1036af200> : <type 'instance'>
avl_REF1 = set([3, 12, 13, 15, 16, 18]) : <type 'set'>
  15 [2:0]
-- < 12 [1:0]
---- < 3 [0:0] L
---- > 13 [0:0] L
-- > 18 [1:1]
---- < 16 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([3, 12, 13, 15, 16, 18])
==================================================
avl2.delete(int3)                                                       # STEP 56
ACTION: avl2.delete(int3) 
int3 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103374320> : <type 'instance'>
avl_REF2 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl1.delete(int3)                                                       # STEP 57
ACTION: avl1.delete(int3) 
int3 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1036af200> : <type 'instance'>
avl_REF1 = set([3, 12, 13, 15, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int0 = 5                                                                # STEP 58
ACTION: int0 = 5 
int0 = 16 : <type 'int'>
=> int0 = 5 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 59
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x1036af200> : <type 'instance'>
avl_REF1 = set([3, 12, 13, 15, 16, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int1 = 5                                                                # STEP 60
ACTION: int1 = 5 
int1 = 12 : <type 'int'>
=> int1 = 5 : <type 'int'>
==================================================
avl1.display()                                                          # STEP 61
ACTION: avl1.display() 
avl1 = <avlbug2.AVLTree instance at 0x1036af200> : <type 'instance'>
avl_REF1 = set([3, 12, 13, 15, 16, 18]) : <type 'set'>
  15 [2:0]
-- < 12 [1:0]
---- < 3 [0:0] L
---- > 13 [0:0] L
-- > 18 [1:1]
---- < 16 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([3, 12, 13, 15, 16, 18])
==================================================
avl2.delete(int0)                                                       # STEP 62
ACTION: avl2.delete(int0) 
int0 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103374320> : <type 'instance'>
avl_REF2 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int3 = 14                                                               # STEP 63
ACTION: int3 = 14 
int3 = 10 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
avl1.display()                                                          # STEP 64
ACTION: avl1.display() 
avl1 = <avlbug2.AVLTree instance at 0x1036af200> : <type 'instance'>
avl_REF1 = set([3, 12, 13, 15, 16, 18]) : <type 'set'>
  15 [2:0]
-- < 12 [1:0]
---- < 3 [0:0] L
---- > 13 [0:0] L
-- > 18 [1:1]
---- < 16 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([3, 12, 13, 15, 16, 18])
==================================================
int0 = 19                                                               # STEP 65
ACTION: int0 = 19 
int0 = 5 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 66
ACTION: avl1.delete(int0) 
int0 = 19 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1036af200> : <type 'instance'>
avl_REF1 = set([3, 12, 13, 15, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.display()                                                          # STEP 67
ACTION: avl1.display() 
avl1 = <avlbug2.AVLTree instance at 0x1036af200> : <type 'instance'>
avl_REF1 = set([3, 12, 13, 15, 16, 18]) : <type 'set'>
  15 [2:0]
-- < 12 [1:0]
---- < 3 [0:0] L
---- > 13 [0:0] L
-- > 18 [1:1]
---- < 16 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([3, 12, 13, 15, 16, 18])
==================================================
avl2.delete(int1)                                                       # STEP 68
ACTION: avl2.delete(int1) 
int1 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103374320> : <type 'instance'>
avl_REF2 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int1 = 14                                                               # STEP 69
ACTION: int1 = 14 
int1 = 5 : <type 'int'>
=> int1 = 14 : <type 'int'>
==================================================
result = avl2.find(int1)                                                # STEP 70
ACTION: result = avl2.find(int1) 
int1 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103374320> : <type 'instance'>
avl_REF2 = set([3]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int2 = 5                                                                # STEP 71
ACTION: int2 = 5 
int2 = 3 : <type 'int'>
=> int2 = 5 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 72
ACTION: avl2.delete(int2) 
int2 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103374320> : <type 'instance'>
avl_REF2 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl1.insert(int3)                                                       # STEP 73
ACTION: avl1.insert(int3) 
int3 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1036af200> : <type 'instance'>
avl_REF1 = set([3, 12, 13, 15, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([3, 12, 13, 14, 15, 16, 18]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 74
ACTION: avl2.insert(int0) 
int0 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103374320> : <type 'instance'>
avl_REF2 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([19, 3]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 75
ACTION: avl1.insert(int2) 
int2 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1036af200> : <type 'instance'>
avl_REF1 = set([3, 12, 13, 14, 15, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([3, 5, 12, 13, 14, 15, 16, 18]) : <type 'set'>
==================================================
int1 = 14                                                               # STEP 76
ACTION: int1 = 14 
int1 = 14 : <type 'int'>
==================================================
result = avl2.find(int0)                                                # STEP 77
ACTION: result = avl2.find(int0) 
int0 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103374320> : <type 'instance'>
avl_REF2 = set([19, 3]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
result = avl2.inorder()                                                 # STEP 78
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x103374320> : <type 'instance'>
avl_REF2 = set([19, 3]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl1.delete(int2)                                                       # STEP 79
ACTION: avl1.delete(int2) 
int2 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1036af200> : <type 'instance'>
avl_REF1 = set([3, 5, 12, 13, 14, 15, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([3, 12, 13, 14, 15, 16, 18]) : <type 'set'>
==================================================
int2 = 3                                                                # STEP 80
ACTION: int2 = 3 
int2 = 5 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 81
ACTION: avl1.delete(int0) 
int0 = 19 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1036af200> : <type 'instance'>
avl_REF1 = set([3, 12, 13, 14, 15, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl2.delete(int2)                                                       # STEP 82
ACTION: avl2.delete(int2) 
int2 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103374320> : <type 'instance'>
avl_REF2 = set([19, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([19]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 83
ACTION: avl2.insert(int1) 
int1 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103374320> : <type 'instance'>
avl_REF2 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([19, 14]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 84
ACTION: avl2.insert(int2) 
int2 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103374320> : <type 'instance'>
avl_REF2 = set([19, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([19, 3, 14]) : <type 'set'>
==================================================
avl1.display()                                                          # STEP 85
ACTION: avl1.display() 
avl1 = <avlbug2.AVLTree instance at 0x1036af200> : <type 'instance'>
avl_REF1 = set([3, 12, 13, 14, 15, 16, 18]) : <type 'set'>
  15 [3:1]
-- < 12 [2:-1]
---- < 3 [0:0] L
---- > 13 [1:-1]
------ > 14 [0:0] L
-- > 18 [1:1]
---- < 16 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([3, 12, 13, 14, 15, 16, 18])
==================================================
int0 = 3                                                                # STEP 86
ACTION: int0 = 3 
int0 = 19 : <type 'int'>
=> int0 = 3 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 87
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x1036af200> : <type 'instance'>
avl_REF1 = set([3, 12, 13, 14, 15, 16, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
result = avl1.find(int3)                                                # STEP 88
ACTION: result = avl1.find(int3) 
int3 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1036af200> : <type 'instance'>
avl_REF1 = set([3, 12, 13, 14, 15, 16, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl1.insert(int1)                                                       # STEP 89
ACTION: avl1.insert(int1) 
int1 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1036af200> : <type 'instance'>
avl_REF1 = set([3, 12, 13, 14, 15, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
int3 = 1                                                                # STEP 90
ACTION: int3 = 1 
int3 = 14 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 91
ACTION: avl1.insert(int3) 
int3 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1036af200> : <type 'instance'>
avl_REF1 = set([3, 12, 13, 14, 15, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([1, 3, 12, 13, 14, 15, 16, 18]) : <type 'set'>
==================================================
result = avl2.find(int0)                                                # STEP 92
ACTION: result = avl2.find(int0) 
int0 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103374320> : <type 'instance'>
avl_REF2 = set([19, 3, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl1.display()                                                          # STEP 93
ACTION: avl1.display() 
avl1 = <avlbug2.AVLTree instance at 0x1036af200> : <type 'instance'>
avl_REF1 = set([1, 3, 12, 13, 14, 15, 16, 18]) : <type 'set'>
  15 [3:1]
-- < 12 [2:0]
---- < 3 [1:1]
------ < 1 [0:0] L
---- > 13 [1:-1]
------ > 14 [0:0] L
-- > 18 [1:1]
---- < 16 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([1, 3, 12, 13, 14, 15, 16, 18])
==================================================
int3 = 18                                                               # STEP 94
ACTION: int3 = 18 
int3 = 1 : <type 'int'>
=> int3 = 18 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 95
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x103374320> : <type 'instance'>
avl_REF2 = set([19, 3, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl1.delete(int1)                                                       # STEP 96
ACTION: avl1.delete(int1) 
int1 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1036af200> : <type 'instance'>
avl_REF1 = set([1, 3, 12, 13, 14, 15, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([1, 3, 12, 13, 15, 16, 18]) : <type 'set'>
==================================================
int0 = 5                                                                # STEP 97
ACTION: int0 = 5 
int0 = 3 : <type 'int'>
=> int0 = 5 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 98
ACTION: avl1.delete(int3) 
int3 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1036af200> : <type 'instance'>
avl_REF1 = set([1, 3, 12, 13, 15, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([1, 3, 12, 13, 15, 16]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1036f3758>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 53
STOPPING TESTING DUE TO TIMEOUT
8.15438189205 PERCENT COVERED
60.2443578243 TOTAL RUNTIME
6 EXECUTED
552 TOTAL TEST OPERATIONS
25.3826100826 TIME SPENT EXECUTING TEST OPERATIONS
0.0520887374878 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
25.4988265038 TIME SPENT CHECKING PROPERTIES
50.8814365864 TOTAL TIME SPENT RUNNING SUT
0.0035560131073 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int2 = 15                                                                # STEP 0
int3 = 18                                                                # STEP 1
avl1 = avl.AVLTree()                                                     # STEP 2
int0 = 18                                                                # STEP 3
avl1.insert(int0)                                                        # STEP 4
avl1.insert(int2)                                                        # STEP 5
avl1.delete(int3)                                                        # STEP 6
avl1.insert(int2)                                                        # STEP 7
avl1.delete(int0)                                                        # STEP 8
avl1.insert(int0)                                                        # STEP 9
int1 = 18                                                               # STEP 10
result = avl1.inorder()                                                 # STEP 11
result = avl1.inorder()                                                 # STEP 12
avl1.delete(int1)                                                       # STEP 13
avl1.insert(int3)                                                       # STEP 14
int1 = 18                                                               # STEP 15
result = avl1.find(int1)                                                # STEP 16
avl1.insert(int0)                                                       # STEP 17
result = avl1.inorder()                                                 # STEP 18
result = avl1.inorder()                                                 # STEP 19
avl1.insert(int1)                                                       # STEP 20
avl1.delete(int1)                                                       # STEP 21
int0 = 13                                                               # STEP 22
avl1.delete(int1)                                                       # STEP 23
int2 = 7                                                                # STEP 24
int1 = 18                                                               # STEP 25
avl1.insert(int3)                                                       # STEP 26
int3 = 10                                                               # STEP 27
avl1.insert(int1)                                                       # STEP 28
int1 = 3                                                                # STEP 29
avl1.delete(int1)                                                       # STEP 30
avl1.delete(int2)                                                       # STEP 31
int1 = 12                                                               # STEP 32
avl1.delete(int2)                                                       # STEP 33
avl1.insert(int0)                                                       # STEP 34
avl1.insert(int2)                                                       # STEP 35
avl1.delete(int2)                                                       # STEP 36
avl1.delete(int0)                                                       # STEP 37
avl1.insert(int1)                                                       # STEP 38
avl1.delete(int3)                                                       # STEP 39
avl1.delete(int0)                                                       # STEP 40
avl1.delete(int2)                                                       # STEP 41
avl1.insert(int0)                                                       # STEP 42
avl1.delete(int2)                                                       # STEP 43
avl1.delete(int2)                                                       # STEP 44
int2 = 3                                                                # STEP 45
int0 = 16                                                               # STEP 46
avl2 = avl.AVLTree()                                                    # STEP 47
avl1.insert(int2)                                                       # STEP 48
avl2.insert(int2)                                                       # STEP 49
avl2.delete(int3)                                                       # STEP 50
avl2.insert(int2)                                                       # STEP 51
avl1.insert(int0)                                                       # STEP 52
avl2.delete(int1)                                                       # STEP 53
avl1.insert(int0)                                                       # STEP 54
avl1.display()                                                          # STEP 55
avl2.delete(int3)                                                       # STEP 56
avl1.delete(int3)                                                       # STEP 57
int0 = 5                                                                # STEP 58
result = avl1.inorder()                                                 # STEP 59
int1 = 5                                                                # STEP 60
avl1.display()                                                          # STEP 61
avl2.delete(int0)                                                       # STEP 62
int3 = 14                                                               # STEP 63
avl1.display()                                                          # STEP 64
int0 = 19                                                               # STEP 65
avl1.delete(int0)                                                       # STEP 66
avl1.display()                                                          # STEP 67
avl2.delete(int1)                                                       # STEP 68
int1 = 14                                                               # STEP 69
result = avl2.find(int1)                                                # STEP 70
int2 = 5                                                                # STEP 71
avl2.delete(int2)                                                       # STEP 72
avl1.insert(int3)                                                       # STEP 73
avl2.insert(int0)                                                       # STEP 74
avl1.insert(int2)                                                       # STEP 75
int1 = 14                                                               # STEP 76
result = avl2.find(int0)                                                # STEP 77
result = avl2.inorder()                                                 # STEP 78
avl1.delete(int2)                                                       # STEP 79
int2 = 3                                                                # STEP 80
avl1.delete(int0)                                                       # STEP 81
avl2.delete(int2)                                                       # STEP 82
avl2.insert(int1)                                                       # STEP 83
avl2.insert(int2)                                                       # STEP 84
avl1.display()                                                          # STEP 85
int0 = 3                                                                # STEP 86
result = avl1.inorder()                                                 # STEP 87
result = avl1.find(int3)                                                # STEP 88
avl1.insert(int1)                                                       # STEP 89
int3 = 1                                                                # STEP 90
avl1.insert(int3)                                                       # STEP 91
result = avl2.find(int0)                                                # STEP 92
avl1.display()                                                          # STEP 93
int3 = 18                                                               # STEP 94
result = avl2.inorder()                                                 # STEP 95
avl1.delete(int1)                                                       # STEP 96
int0 = 5                                                                # STEP 97
avl1.delete(int3)                                                       # STEP 98
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1036f3758>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
212 BRANCHES COVERED
160 STATEMENTS COVERED

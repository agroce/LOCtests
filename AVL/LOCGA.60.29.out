Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.62109.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  10 [2:0]
-- < 1 [1:-1]
---- > 8 [0:0] L
-- > 19 [1:0]
---- < 15 [0:0] L
---- > 20 [0:0] L
set([1, 8, 10, 15, 19, 20])
  10 [2:0]
-- < 1 [1:-1]
---- > 8 [0:0] L
-- > 19 [1:0]
---- < 15 [0:0] L
---- > 20 [0:0] L
set([1, 8, 10, 15, 19, 20])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1036d8878>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
Original test has 65 steps

SAVING TEST AS failure.62109.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
avl2 = avl.AVLTree()                                                     # STEP 0
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x101d9fab8> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int1 = 2                                                                 # STEP 1
ACTION: int1 = 2 
int1 = None : <type 'NoneType'>
=> int1 = 2 : <type 'int'>
==================================================
avl2.delete(int1)                                                        # STEP 2
ACTION: avl2.delete(int1) 
int1 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101d9fab8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int3 = 10                                                                # STEP 3
ACTION: int3 = 10 
int3 = None : <type 'NoneType'>
=> int3 = 10 : <type 'int'>
==================================================
result = avl2.inorder()                                                  # STEP 4
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x101d9fab8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int1 = 10                                                                # STEP 5
ACTION: int1 = 10 
int1 = 2 : <type 'int'>
=> int1 = 10 : <type 'int'>
==================================================
int2 = 5                                                                 # STEP 6
ACTION: int2 = 5 
int2 = None : <type 'NoneType'>
=> int2 = 5 : <type 'int'>
==================================================
int0 = 19                                                                # STEP 7
ACTION: int0 = 19 
int0 = None : <type 'NoneType'>
=> int0 = 19 : <type 'int'>
==================================================
avl2.insert(int2)                                                        # STEP 8
ACTION: avl2.insert(int2) 
int2 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101d9fab8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([5]) : <type 'set'>
==================================================
avl2.insert(int2)                                                        # STEP 9
ACTION: avl2.insert(int2) 
int2 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101d9fab8> : <type 'instance'>
avl_REF2 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
result = avl2.inorder()                                                 # STEP 10
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x101d9fab8> : <type 'instance'>
avl_REF2 = set([5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int0)                                                       # STEP 11
ACTION: avl2.delete(int0) 
int0 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101d9fab8> : <type 'instance'>
avl_REF2 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int2 = 4                                                                # STEP 12
ACTION: int2 = 4 
int2 = 5 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
int0 = 16                                                               # STEP 13
ACTION: int0 = 16 
int0 = 19 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 14
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x1031d6518> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 15
ACTION: avl2 = avl.AVLTree() 
avl2 = <avlbug2.AVLTree instance at 0x101d9fab8> : <type 'instance'>
avl_REF2 = set([5]) : <type 'set'>
=> avl2 = <avlbug2.AVLTree instance at 0x1031d69e0> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 16
ACTION: avl0.insert(int0) 
int0 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1031d6518> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([16]) : <type 'set'>
==================================================
result = avl0.find(int2)                                                # STEP 17
ACTION: result = avl0.find(int2) 
int2 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1031d6518> : <type 'instance'>
avl_REF0 = set([16]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl2.delete(int0)                                                       # STEP 18
ACTION: avl2.delete(int0) 
int0 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1031d69e0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl0.insert(int0)                                                       # STEP 19
ACTION: avl0.insert(int0) 
int0 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1031d6518> : <type 'instance'>
avl_REF0 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
avl0 == avl0                                                            # STEP 20
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x1031d6518> : <type 'instance'>
avl_REF0 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl0.insert(int3)                                                       # STEP 21
ACTION: avl0.insert(int3) 
int3 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1031d6518> : <type 'instance'>
avl_REF0 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([16, 10]) : <type 'set'>
==================================================
result = avl2.find(int1)                                                # STEP 22
ACTION: result = avl2.find(int1) 
int1 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1031d69e0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl0.insert(int0)                                                       # STEP 23
ACTION: avl0.insert(int0) 
int0 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1031d6518> : <type 'instance'>
avl_REF0 = set([16, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
avl2.insert(int3)                                                       # STEP 24
ACTION: avl2.insert(int3) 
int3 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1031d69e0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([10]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 25
ACTION: avl0.delete(int3) 
int3 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1031d6518> : <type 'instance'>
avl_REF0 = set([16, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([16]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 26
ACTION: avl2.insert(int1) 
int1 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1031d69e0> : <type 'instance'>
avl_REF2 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl0.insert(int0)                                                       # STEP 27
ACTION: avl0.insert(int0) 
int0 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1031d6518> : <type 'instance'>
avl_REF0 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
avl0.insert(int2)                                                       # STEP 28
ACTION: avl0.insert(int2) 
int2 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1031d6518> : <type 'instance'>
avl_REF0 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([16, 4]) : <type 'set'>
==================================================
result = avl2.find(int2)                                                # STEP 29
ACTION: result = avl2.find(int2) 
int2 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1031d69e0> : <type 'instance'>
avl_REF2 = set([10]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl2.delete(int3)                                                       # STEP 30
ACTION: avl2.delete(int3) 
int3 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1031d69e0> : <type 'instance'>
avl_REF2 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 31
ACTION: avl0.insert(int2) 
int2 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1031d6518> : <type 'instance'>
avl_REF0 = set([16, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl2.delete(int2)                                                       # STEP 32
ACTION: avl2.delete(int2) 
int2 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1031d69e0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.insert(int2)                                                       # STEP 33
ACTION: avl2.insert(int2) 
int2 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1031d69e0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([4]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 34
ACTION: avl0.delete(int1) 
int1 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1031d6518> : <type 'instance'>
avl_REF0 = set([16, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.insert(int3)                                                       # STEP 35
ACTION: avl0.insert(int3) 
int3 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1031d6518> : <type 'instance'>
avl_REF0 = set([16, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([16, 10, 4]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 36
ACTION: avl2.delete(int1) 
int1 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1031d69e0> : <type 'instance'>
avl_REF2 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int0)                                                       # STEP 37
ACTION: avl2.insert(int0) 
int0 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1031d69e0> : <type 'instance'>
avl_REF2 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([16, 4]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 38
ACTION: avl2.insert(int0) 
int0 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1031d69e0> : <type 'instance'>
avl_REF2 = set([16, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
result = avl0.find(int0)                                                # STEP 39
ACTION: result = avl0.find(int0) 
int0 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1031d6518> : <type 'instance'>
avl_REF0 = set([16, 10, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
result = avl2.find(int0)                                                # STEP 40
ACTION: result = avl2.find(int0) 
int0 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1031d69e0> : <type 'instance'>
avl_REF2 = set([16, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl0.delete(int3)                                                       # STEP 41
ACTION: avl0.delete(int3) 
int3 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1031d6518> : <type 'instance'>
avl_REF0 = set([16, 10, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([16, 4]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 42
ACTION: avl2.insert(int0) 
int0 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1031d69e0> : <type 'instance'>
avl_REF2 = set([16, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl0.delete(int0)                                                       # STEP 43
ACTION: avl0.delete(int0) 
int0 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1031d6518> : <type 'instance'>
avl_REF0 = set([16, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([4]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 44
ACTION: avl0.insert(int3) 
int3 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1031d6518> : <type 'instance'>
avl_REF0 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([10, 4]) : <type 'set'>
==================================================
int2 = 5                                                                # STEP 45
ACTION: int2 = 5 
int2 = 4 : <type 'int'>
=> int2 = 5 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 46
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x1035ef3b0> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 47
ACTION: avl1.insert(int0) 
int0 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1035ef3b0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([16]) : <type 'set'>
==================================================
result = avl2.find(int0)                                                # STEP 48
ACTION: result = avl2.find(int0) 
int0 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1031d69e0> : <type 'instance'>
avl_REF2 = set([16, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl2.delete(int3)                                                       # STEP 49
ACTION: avl2.delete(int3) 
int3 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1031d69e0> : <type 'instance'>
avl_REF2 = set([16, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl0.insert(int2)                                                       # STEP 50
ACTION: avl0.insert(int2) 
int2 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1031d6518> : <type 'instance'>
avl_REF0 = set([10, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([10, 4, 5]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 51
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x1031d6518> : <type 'instance'>
avl_REF0 = set([10, 4, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int2 = 14                                                               # STEP 52
ACTION: int2 = 14 
int2 = 5 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
int3 = 3                                                                # STEP 53
ACTION: int3 = 3 
int3 = 10 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 54
ACTION: avl1.delete(int1) 
int1 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1035ef3b0> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.delete(int0)                                                       # STEP 55
ACTION: avl1.delete(int0) 
int0 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1035ef3b0> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 56
ACTION: avl0.delete(int0) 
int0 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1031d6518> : <type 'instance'>
avl_REF0 = set([10, 4, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl2.insert(int1)                                                       # STEP 57
ACTION: avl2.insert(int1) 
int1 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1031d69e0> : <type 'instance'>
avl_REF2 = set([16, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([16, 10, 4]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 58
ACTION: avl2.insert(int1) 
int1 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1031d69e0> : <type 'instance'>
avl_REF2 = set([16, 10, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl1.delete(int3)                                                       # STEP 59
ACTION: avl1.delete(int3) 
int3 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1035ef3b0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl2.insert(int3)                                                       # STEP 60
ACTION: avl2.insert(int3) 
int3 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1031d69e0> : <type 'instance'>
avl_REF2 = set([16, 10, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([16, 10, 3, 4]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 61
ACTION: avl0.insert(int1) 
int1 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1031d6518> : <type 'instance'>
avl_REF0 = set([10, 4, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl0.insert(int0)                                                       # STEP 62
ACTION: avl0.insert(int0) 
int0 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1031d6518> : <type 'instance'>
avl_REF0 = set([10, 4, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([16, 10, 4, 5]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 63
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x1031d6518> : <type 'instance'>
avl_REF0 = set([16, 10, 4, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl2.delete(int1)                                                       # STEP 64
ACTION: avl2.delete(int1) 
int1 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1031d69e0> : <type 'instance'>
avl_REF2 = set([16, 10, 3, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([16, 3, 4]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x101dc2248>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1037097e8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
Original test has 18 steps

SAVING TEST AS failure.62109.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 13                                                                # STEP 0
ACTION: int1 = 13 
int1 = None : <type 'NoneType'>
=> int1 = 13 : <type 'int'>
==================================================
int3 = 14                                                                # STEP 1
ACTION: int3 = 14 
int3 = None : <type 'NoneType'>
=> int3 = 14 : <type 'int'>
==================================================
int0 = 11                                                                # STEP 2
ACTION: int0 = 11 
int0 = None : <type 'NoneType'>
=> int0 = 11 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 3
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x101bc2878> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int2 = 6                                                                 # STEP 4
ACTION: int2 = 6 
int2 = None : <type 'NoneType'>
=> int2 = 6 : <type 'int'>
==================================================
avl2.insert(int0)                                                        # STEP 5
ACTION: avl2.insert(int0) 
int0 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101bc2878> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([11]) : <type 'set'>
==================================================
int0 = 6                                                                 # STEP 6
ACTION: int0 = 6 
int0 = 11 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
avl2.insert(int3)                                                        # STEP 7
ACTION: avl2.insert(int3) 
int3 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101bc2878> : <type 'instance'>
avl_REF2 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([11, 14]) : <type 'set'>
==================================================
avl2.delete(int1)                                                        # STEP 8
ACTION: avl2.delete(int1) 
int1 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101bc2878> : <type 'instance'>
avl_REF2 = set([11, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int3)                                                        # STEP 9
ACTION: avl2.insert(int3) 
int3 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101bc2878> : <type 'instance'>
avl_REF2 = set([11, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
avl2.delete(int2)                                                       # STEP 10
ACTION: avl2.delete(int2) 
int2 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101bc2878> : <type 'instance'>
avl_REF2 = set([11, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.insert(int1)                                                       # STEP 11
ACTION: avl2.insert(int1) 
int1 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101bc2878> : <type 'instance'>
avl_REF2 = set([11, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([11, 13, 14]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 12
ACTION: avl2.insert(int1) 
int1 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101bc2878> : <type 'instance'>
avl_REF2 = set([11, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl2 == avl2                                                            # STEP 13
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x101bc2878> : <type 'instance'>
avl_REF2 = set([11, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
result = avl2.find(int0)                                                # STEP 14
ACTION: result = avl2.find(int0) 
int0 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101bc2878> : <type 'instance'>
avl_REF2 = set([11, 13, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl2.insert(int2)                                                       # STEP 15
ACTION: avl2.insert(int2) 
int2 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101bc2878> : <type 'instance'>
avl_REF2 = set([11, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([6, 11, 13, 14]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 16
ACTION: avl2.insert(int2) 
int2 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101bc2878> : <type 'instance'>
avl_REF2 = set([6, 11, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl2.delete(int3)                                                       # STEP 17
ACTION: avl2.delete(int3) 
int3 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101bc2878> : <type 'instance'>
avl_REF2 = set([6, 11, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([6, 11, 13]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x101d02f80>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
TEST #4 STEP #26 (0:00:30.057942) Mon May  1 17:45:30 2017 [ 159 stmts 209 branches ]
  11 [2:0]
-- < 7 [1:0]
---- < 3 [0:0] L
---- > 8 [0:0] L
-- > 20 [1:1]
---- < 18 [0:0] L
set([3, 7, 8, 11, 18, 20])
  11 [2:0]
-- < 7 [1:0]
---- < 3 [0:0] L
---- > 8 [0:0] L
-- > 20 [1:1]
---- < 18 [0:0] L
set([3, 7, 8, 11, 18, 20])
  11 [2:0]
-- < 7 [1:0]
---- < 3 [0:0] L
---- > 8 [0:0] L
-- > 20 [1:1]
---- < 18 [0:0] L
set([3, 7, 8, 11, 18, 20])
  11 [2:0]
-- < 7 [1:0]
---- < 3 [0:0] L
---- > 8 [0:0] L
-- > 18 [1:0]
---- < 14 [0:0] L
---- > 20 [0:0] L
set([3, 7, 8, 11, 14, 18, 20])
  14 [2:0]
-- < 10 [1:0]
---- < 3 [0:0] L
---- > 11 [0:0] L
-- > 17 [1:1]
---- < 15 [0:0] L
set([3, 10, 11, 14, 15, 17])
  11 [2:0]
-- < 7 [1:0]
---- < 3 [0:0] L
---- > 8 [0:0] L
-- > 18 [1:0]
---- < 14 [0:0] L
---- > 20 [0:0] L
set([3, 7, 8, 11, 14, 18, 20])
  14 [2:0]
-- < 10 [1:0]
---- < 3 [0:0] L
---- > 11 [0:0] L
-- > 17 [1:1]
---- < 15 [0:0] L
set([3, 10, 11, 14, 15, 17])
  11 [2:0]
-- < 7 [1:0]
---- < 3 [0:0] L
---- > 8 [0:0] L
-- > 18 [1:0]
---- < 14 [0:0] L
---- > 20 [0:0] L
set([3, 7, 8, 11, 14, 18, 20])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103595b48>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
Original test has 44 steps

SAVING TEST AS failure.62109.test.2
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 14                                                                # STEP 0
ACTION: int2 = 14 
int2 = None : <type 'NoneType'>
=> int2 = 14 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 1
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x103595050> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.insert(int2)                                                        # STEP 2
ACTION: avl1.insert(int2) 
int2 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103595050> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([14]) : <type 'set'>
==================================================
result = avl1.find(int2)                                                 # STEP 3
ACTION: result = avl1.find(int2) 
int2 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103595050> : <type 'instance'>
avl_REF1 = set([14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl1.delete(int2)                                                        # STEP 4
ACTION: avl1.delete(int2) 
int2 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103595050> : <type 'instance'>
avl_REF1 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int0 = 18                                                                # STEP 5
ACTION: int0 = 18 
int0 = None : <type 'NoneType'>
=> int0 = 18 : <type 'int'>
==================================================
avl1.insert(int2)                                                        # STEP 6
ACTION: avl1.insert(int2) 
int2 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103595050> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([14]) : <type 'set'>
==================================================
int3 = 13                                                                # STEP 7
ACTION: int3 = 13 
int3 = None : <type 'NoneType'>
=> int3 = 13 : <type 'int'>
==================================================
result = avl1.inorder()                                                  # STEP 8
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x103595050> : <type 'instance'>
avl_REF1 = set([14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.delete(int3)                                                        # STEP 9
ACTION: avl1.delete(int3) 
int3 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103595050> : <type 'instance'>
avl_REF1 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.insert(int3)                                                       # STEP 10
ACTION: avl1.insert(int3) 
int3 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103595050> : <type 'instance'>
avl_REF1 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([13, 14]) : <type 'set'>
==================================================
int3 = 3                                                                # STEP 11
ACTION: int3 = 3 
int3 = 13 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 12
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x103595050> : <type 'instance'>
avl_REF1 = set([13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.delete(int3)                                                       # STEP 13
ACTION: avl1.delete(int3) 
int3 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103595050> : <type 'instance'>
avl_REF1 = set([13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int3 = 11                                                               # STEP 14
ACTION: int3 = 11 
int3 = 3 : <type 'int'>
=> int3 = 11 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 15
ACTION: avl1.delete(int3) 
int3 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103595050> : <type 'instance'>
avl_REF1 = set([13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.insert(int3)                                                       # STEP 16
ACTION: avl1.insert(int3) 
int3 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103595050> : <type 'instance'>
avl_REF1 = set([13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([11, 13, 14]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 17
ACTION: avl1.insert(int0) 
int0 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103595050> : <type 'instance'>
avl_REF1 = set([11, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([18, 11, 13, 14]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 18
ACTION: avl1.insert(int3) 
int3 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103595050> : <type 'instance'>
avl_REF1 = set([18, 11, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
avl1.insert(int2)                                                       # STEP 19
ACTION: avl1.insert(int2) 
int2 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103595050> : <type 'instance'>
avl_REF1 = set([18, 11, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
avl1.insert(int2)                                                       # STEP 20
ACTION: avl1.insert(int2) 
int2 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103595050> : <type 'instance'>
avl_REF1 = set([18, 11, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
avl1.insert(int2)                                                       # STEP 21
ACTION: avl1.insert(int2) 
int2 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103595050> : <type 'instance'>
avl_REF1 = set([18, 11, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
int2 = 12                                                               # STEP 22
ACTION: int2 = 12 
int2 = 14 : <type 'int'>
=> int2 = 12 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 23
ACTION: avl1.insert(int0) 
int0 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103595050> : <type 'instance'>
avl_REF1 = set([18, 11, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.delete(int2)                                                       # STEP 24
ACTION: avl1.delete(int2) 
int2 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103595050> : <type 'instance'>
avl_REF1 = set([18, 11, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
result = avl1.find(int2)                                                # STEP 25
ACTION: result = avl1.find(int2) 
int2 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103595050> : <type 'instance'>
avl_REF1 = set([18, 11, 13, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int3 = 20                                                               # STEP 26
ACTION: int3 = 20 
int3 = 11 : <type 'int'>
=> int3 = 20 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 27
ACTION: avl1.delete(int2) 
int2 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103595050> : <type 'instance'>
avl_REF1 = set([18, 11, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.delete(int3)                                                       # STEP 28
ACTION: avl1.delete(int3) 
int3 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103595050> : <type 'instance'>
avl_REF1 = set([18, 11, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.insert(int3)                                                       # STEP 29
ACTION: avl1.insert(int3) 
int3 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103595050> : <type 'instance'>
avl_REF1 = set([18, 11, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([18, 11, 20, 13, 14]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 30
ACTION: avl1.insert(int2) 
int2 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103595050> : <type 'instance'>
avl_REF1 = set([18, 11, 20, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([11, 12, 13, 14, 18, 20]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 31
ACTION: avl1.delete(int2) 
int2 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103595050> : <type 'instance'>
avl_REF1 = set([11, 12, 13, 14, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([11, 13, 14, 18, 20]) : <type 'set'>
==================================================
int2 = 13                                                               # STEP 32
ACTION: int2 = 13 
int2 = 12 : <type 'int'>
=> int2 = 13 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 33
ACTION: avl1.delete(int2) 
int2 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103595050> : <type 'instance'>
avl_REF1 = set([11, 13, 14, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([11, 14, 18, 20]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 34
ACTION: avl1.delete(int3) 
int3 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103595050> : <type 'instance'>
avl_REF1 = set([11, 14, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([11, 14, 18]) : <type 'set'>
==================================================
int0 = 8                                                                # STEP 35
ACTION: int0 = 8 
int0 = 18 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 36
ACTION: avl1.insert(int3) 
int3 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103595050> : <type 'instance'>
avl_REF1 = set([11, 14, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([11, 14, 18, 20]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 37
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x103595050> : <type 'instance'>
avl_REF1 = set([11, 14, 18, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.delete(int3)                                                       # STEP 38
ACTION: avl1.delete(int3) 
int3 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103595050> : <type 'instance'>
avl_REF1 = set([11, 14, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([11, 14, 18]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 39
ACTION: avl1.insert(int0) 
int0 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103595050> : <type 'instance'>
avl_REF1 = set([11, 14, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([8, 11, 14, 18]) : <type 'set'>
==================================================
int1 = 14                                                               # STEP 40
ACTION: int1 = 14 
int1 = None : <type 'NoneType'>
=> int1 = 14 : <type 'int'>
==================================================
result = avl1.find(int0)                                                # STEP 41
ACTION: result = avl1.find(int0) 
int0 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103595050> : <type 'instance'>
avl_REF1 = set([8, 11, 14, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl1.insert(int1)                                                       # STEP 42
ACTION: avl1.insert(int1) 
int1 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103595050> : <type 'instance'>
avl_REF1 = set([8, 11, 14, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl1.delete(int1)                                                       # STEP 43
ACTION: avl1.delete(int1) 
int1 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103595050> : <type 'instance'>
avl_REF1 = set([8, 11, 14, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([8, 11, 18]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103584d40>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 3 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 28
STOPPING TESTING DUE TO TIMEOUT
8.21242019733 PERCENT COVERED
60.226211071 TOTAL RUNTIME
7 EXECUTED
455 TOTAL TEST OPERATIONS
23.5159449577 TIME SPENT EXECUTING TEST OPERATIONS
0.0491118431091 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
23.4090809822 TIME SPENT CHECKING PROPERTIES
46.9250259399 TOTAL TIME SPENT RUNNING SUT
0.00458431243896 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
3 FAILED
0 REPEATS OF FAILURES
3 ACTUAL DISTINCT FAILURES

FAILURE 0
avl2 = avl.AVLTree()                                                     # STEP 0
int1 = 2                                                                 # STEP 1
avl2.delete(int1)                                                        # STEP 2
int3 = 10                                                                # STEP 3
result = avl2.inorder()                                                  # STEP 4
int1 = 10                                                                # STEP 5
int2 = 5                                                                 # STEP 6
int0 = 19                                                                # STEP 7
avl2.insert(int2)                                                        # STEP 8
avl2.insert(int2)                                                        # STEP 9
result = avl2.inorder()                                                 # STEP 10
avl2.delete(int0)                                                       # STEP 11
int2 = 4                                                                # STEP 12
int0 = 16                                                               # STEP 13
avl0 = avl.AVLTree()                                                    # STEP 14
avl2 = avl.AVLTree()                                                    # STEP 15
avl0.insert(int0)                                                       # STEP 16
result = avl0.find(int2)                                                # STEP 17
avl2.delete(int0)                                                       # STEP 18
avl0.insert(int0)                                                       # STEP 19
avl0 == avl0                                                            # STEP 20
avl0.insert(int3)                                                       # STEP 21
result = avl2.find(int1)                                                # STEP 22
avl0.insert(int0)                                                       # STEP 23
avl2.insert(int3)                                                       # STEP 24
avl0.delete(int3)                                                       # STEP 25
avl2.insert(int1)                                                       # STEP 26
avl0.insert(int0)                                                       # STEP 27
avl0.insert(int2)                                                       # STEP 28
result = avl2.find(int2)                                                # STEP 29
avl2.delete(int3)                                                       # STEP 30
avl0.insert(int2)                                                       # STEP 31
avl2.delete(int2)                                                       # STEP 32
avl2.insert(int2)                                                       # STEP 33
avl0.delete(int1)                                                       # STEP 34
avl0.insert(int3)                                                       # STEP 35
avl2.delete(int1)                                                       # STEP 36
avl2.insert(int0)                                                       # STEP 37
avl2.insert(int0)                                                       # STEP 38
result = avl0.find(int0)                                                # STEP 39
result = avl2.find(int0)                                                # STEP 40
avl0.delete(int3)                                                       # STEP 41
avl2.insert(int0)                                                       # STEP 42
avl0.delete(int0)                                                       # STEP 43
avl0.insert(int3)                                                       # STEP 44
int2 = 5                                                                # STEP 45
avl1 = avl.AVLTree()                                                    # STEP 46
avl1.insert(int0)                                                       # STEP 47
result = avl2.find(int0)                                                # STEP 48
avl2.delete(int3)                                                       # STEP 49
avl0.insert(int2)                                                       # STEP 50
result = avl0.inorder()                                                 # STEP 51
int2 = 14                                                               # STEP 52
int3 = 3                                                                # STEP 53
avl1.delete(int1)                                                       # STEP 54
avl1.delete(int0)                                                       # STEP 55
avl0.delete(int0)                                                       # STEP 56
avl2.insert(int1)                                                       # STEP 57
avl2.insert(int1)                                                       # STEP 58
avl1.delete(int3)                                                       # STEP 59
avl2.insert(int3)                                                       # STEP 60
avl0.insert(int1)                                                       # STEP 61
avl0.insert(int0)                                                       # STEP 62
result = avl0.inorder()                                                 # STEP 63
avl2.delete(int1)                                                       # STEP 64
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x101dc2248>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE 1
int1 = 13                                                                # STEP 0
int3 = 14                                                                # STEP 1
int0 = 11                                                                # STEP 2
avl2 = avl.AVLTree()                                                     # STEP 3
int2 = 6                                                                 # STEP 4
avl2.insert(int0)                                                        # STEP 5
int0 = 6                                                                 # STEP 6
avl2.insert(int3)                                                        # STEP 7
avl2.delete(int1)                                                        # STEP 8
avl2.insert(int3)                                                        # STEP 9
avl2.delete(int2)                                                       # STEP 10
avl2.insert(int1)                                                       # STEP 11
avl2.insert(int1)                                                       # STEP 12
avl2 == avl2                                                            # STEP 13
result = avl2.find(int0)                                                # STEP 14
avl2.insert(int2)                                                       # STEP 15
avl2.insert(int2)                                                       # STEP 16
avl2.delete(int3)                                                       # STEP 17
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x101d02f80>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE 2
int2 = 14                                                                # STEP 0
avl1 = avl.AVLTree()                                                     # STEP 1
avl1.insert(int2)                                                        # STEP 2
result = avl1.find(int2)                                                 # STEP 3
avl1.delete(int2)                                                        # STEP 4
int0 = 18                                                                # STEP 5
avl1.insert(int2)                                                        # STEP 6
int3 = 13                                                                # STEP 7
result = avl1.inorder()                                                  # STEP 8
avl1.delete(int3)                                                        # STEP 9
avl1.insert(int3)                                                       # STEP 10
int3 = 3                                                                # STEP 11
avl1 == avl1                                                            # STEP 12
avl1.delete(int3)                                                       # STEP 13
int3 = 11                                                               # STEP 14
avl1.delete(int3)                                                       # STEP 15
avl1.insert(int3)                                                       # STEP 16
avl1.insert(int0)                                                       # STEP 17
avl1.insert(int3)                                                       # STEP 18
avl1.insert(int2)                                                       # STEP 19
avl1.insert(int2)                                                       # STEP 20
avl1.insert(int2)                                                       # STEP 21
int2 = 12                                                               # STEP 22
avl1.insert(int0)                                                       # STEP 23
avl1.delete(int2)                                                       # STEP 24
result = avl1.find(int2)                                                # STEP 25
int3 = 20                                                               # STEP 26
avl1.delete(int2)                                                       # STEP 27
avl1.delete(int3)                                                       # STEP 28
avl1.insert(int3)                                                       # STEP 29
avl1.insert(int2)                                                       # STEP 30
avl1.delete(int2)                                                       # STEP 31
int2 = 13                                                               # STEP 32
avl1.delete(int2)                                                       # STEP 33
avl1.delete(int3)                                                       # STEP 34
int0 = 8                                                                # STEP 35
avl1.insert(int3)                                                       # STEP 36
result = avl1.inorder()                                                 # STEP 37
avl1.delete(int3)                                                       # STEP 38
avl1.insert(int0)                                                       # STEP 39
int1 = 14                                                               # STEP 40
result = avl1.find(int0)                                                # STEP 41
avl1.insert(int1)                                                       # STEP 42
avl1.delete(int1)                                                       # STEP 43
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103584d40>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
214 BRANCHES COVERED
161 STATEMENTS COVERED

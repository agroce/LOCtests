Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=True, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.821.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104266560>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
Original test has 55 steps

SAVING TEST AS failure.821.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 5                                                                 # STEP 0
ACTION: int3 = 5 
int3 = None : <type 'NoneType'>
=> int3 = 5 : <type 'int'>
==================================================
int2 = 16                                                                # STEP 1
ACTION: int2 = 16 
int2 = None : <type 'NoneType'>
=> int2 = 16 : <type 'int'>
==================================================
int0 = 20                                                                # STEP 2
ACTION: int0 = 20 
int0 = None : <type 'NoneType'>
=> int0 = 20 : <type 'int'>
==================================================
int1 = 2                                                                 # STEP 3
ACTION: int1 = 2 
int1 = None : <type 'NoneType'>
=> int1 = 2 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 4
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x10581a320> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.delete(int1)                                                        # STEP 5
ACTION: avl0.delete(int1) 
int1 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10581a320> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.delete(int1)                                                        # STEP 6
ACTION: avl0.delete(int1) 
int1 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10581a320> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int1 = 6                                                                 # STEP 7
ACTION: int1 = 6 
int1 = 2 : <type 'int'>
=> int1 = 6 : <type 'int'>
==================================================
result = avl0.find(int2)                                                 # STEP 8
ACTION: result = avl0.find(int2) 
int2 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10581a320> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl0.insert(int1)                                                        # STEP 9
ACTION: avl0.insert(int1) 
int1 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10581a320> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([6]) : <type 'set'>
==================================================
int2 = 12                                                               # STEP 10
ACTION: int2 = 12 
int2 = 16 : <type 'int'>
=> int2 = 12 : <type 'int'>
==================================================
result = avl0.find(int3)                                                # STEP 11
ACTION: result = avl0.find(int3) 
int3 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10581a320> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
int1 = 10                                                               # STEP 12
ACTION: int1 = 10 
int1 = 6 : <type 'int'>
=> int1 = 10 : <type 'int'>
==================================================
result = avl0.find(int1)                                                # STEP 13
ACTION: result = avl0.find(int1) 
int1 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10581a320> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl0 == avl0                                                            # STEP 14
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x10581a320> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl0.delete(int3)                                                       # STEP 15
ACTION: avl0.delete(int3) 
int3 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10581a320> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int3 = 10                                                               # STEP 16
ACTION: int3 = 10 
int3 = 5 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
int1 = 7                                                                # STEP 17
ACTION: int1 = 7 
int1 = 10 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 18
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x10450d878> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 19
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x10581a320> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0 = avl.AVLTree()                                                    # STEP 20
ACTION: avl0 = avl.AVLTree() 
avl0 = <avl.AVLTree instance at 0x10581a320> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
=> avl0 = <avl.AVLTree instance at 0x10450de18> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 21
ACTION: avl0.delete(int2) 
int2 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10450de18> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int2 = 17                                                               # STEP 22
ACTION: int2 = 17 
int2 = 12 : <type 'int'>
=> int2 = 17 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 23
ACTION: avl0.delete(int1) 
int1 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10450de18> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0 == avl1                                                            # STEP 24
ACTION: avl0 == avl1 
avl0 = <avl.AVLTree instance at 0x10450de18> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x10450d878> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF1 
==================================================
int1 = 20                                                               # STEP 25
ACTION: int1 = 20 
int1 = 7 : <type 'int'>
=> int1 = 20 : <type 'int'>
==================================================
result = avl0.find(int0)                                                # STEP 26
ACTION: result = avl0.find(int0) 
int0 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10450de18> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
avl1.delete(int1)                                                       # STEP 27
ACTION: avl1.delete(int1) 
int1 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10450d878> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int0 = 19                                                               # STEP 28
ACTION: int0 = 19 
int0 = 20 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
result = avl0.find(int3)                                                # STEP 29
ACTION: result = avl0.find(int3) 
int3 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10450de18> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
int3 = 7                                                                # STEP 30
ACTION: int3 = 7 
int3 = 10 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
avl1 == avl0                                                            # STEP 31
ACTION: avl1 == avl0 
avl1 = <avl.AVLTree instance at 0x10450d878> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x10450de18> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
avl0.insert(int2)                                                       # STEP 32
ACTION: avl0.insert(int2) 
int2 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10450de18> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([17]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 33
ACTION: avl1.insert(int3) 
int3 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10450d878> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([7]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 34
ACTION: avl0.insert(int0) 
int0 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10450de18> : <type 'instance'>
avl_REF0 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([17, 19]) : <type 'set'>
==================================================
int0 = 3                                                                # STEP 35
ACTION: int0 = 3 
int0 = 19 : <type 'int'>
=> int0 = 3 : <type 'int'>
==================================================
int1 = 4                                                                # STEP 36
ACTION: int1 = 4 
int1 = 20 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
int2 = 6                                                                # STEP 37
ACTION: int2 = 6 
int2 = 17 : <type 'int'>
=> int2 = 6 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 38
ACTION: avl0.delete(int0) 
int0 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10450de18> : <type 'instance'>
avl_REF0 = set([17, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int0 = 4                                                                # STEP 39
ACTION: int0 = 4 
int0 = 3 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 40
ACTION: avl0.insert(int1) 
int1 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10450de18> : <type 'instance'>
avl_REF0 = set([17, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([17, 19, 4]) : <type 'set'>
==================================================
int3 = 13                                                               # STEP 41
ACTION: int3 = 13 
int3 = 7 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
int1 = 18                                                               # STEP 42
ACTION: int1 = 18 
int1 = 4 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 43
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x10450de18> : <type 'instance'>
avl_REF0 = set([17, 19, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl1.insert(int2)                                                       # STEP 44
ACTION: avl1.insert(int2) 
int2 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10450d878> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([6, 7]) : <type 'set'>
==================================================
result = avl1.find(int0)                                                # STEP 45
ACTION: result = avl1.find(int0) 
int0 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10450d878> : <type 'instance'>
avl_REF1 = set([6, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
int0 = 19                                                               # STEP 46
ACTION: int0 = 19 
int0 = 4 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
result = avl1.find(int3)                                                # STEP 47
ACTION: result = avl1.find(int3) 
int3 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10450d878> : <type 'instance'>
avl_REF1 = set([6, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl2 = avl.AVLTree()                                                    # STEP 48
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x1045289e0> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 49
ACTION: avl0.insert(int3) 
int3 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10450de18> : <type 'instance'>
avl_REF0 = set([17, 19, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([17, 19, 4, 13]) : <type 'set'>
==================================================
int3 = 19                                                               # STEP 50
ACTION: int3 = 19 
int3 = 13 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
avl0 == avl1                                                            # STEP 51
ACTION: avl0 == avl1 
avl0 = <avl.AVLTree instance at 0x10450de18> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x10450d878> : <type 'instance'>
avl_REF0 = set([17, 19, 4, 13]) : <type 'set'>
avl_REF1 = set([6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF1 
==================================================
int2 = 6                                                                # STEP 52
ACTION: int2 = 6 
int2 = 6 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 53
ACTION: avl2.delete(int3) 
int3 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1045289e0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl0.delete(int3)                                                       # STEP 54
ACTION: avl0.delete(int3) 
int3 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10450de18> : <type 'instance'>
avl_REF0 = set([17, 19, 4, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([17, 4, 13]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10451db00>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #5 STEP #0 (0:00:34.343680) Fri Apr 28 07:23:44 2017 [ 135 stmts 182 branches ]
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 99
STOPPING TESTING DUE TO TIMEOUT
8.04207668816 PERCENT COVERED
60.2234539986 TOTAL RUNTIME
7 EXECUTED
654 TOTAL TEST OPERATIONS
27.5806064606 TIME SPENT EXECUTING TEST OPERATIONS
0.0237905979156 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
27.6342728138 TIME SPENT CHECKING PROPERTIES
55.2148792744 TOTAL TIME SPENT RUNNING SUT
0.00452589988708 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int3 = 5                                                                 # STEP 0
int2 = 16                                                                # STEP 1
int0 = 20                                                                # STEP 2
int1 = 2                                                                 # STEP 3
avl0 = avl.AVLTree()                                                     # STEP 4
avl0.delete(int1)                                                        # STEP 5
avl0.delete(int1)                                                        # STEP 6
int1 = 6                                                                 # STEP 7
result = avl0.find(int2)                                                 # STEP 8
avl0.insert(int1)                                                        # STEP 9
int2 = 12                                                               # STEP 10
result = avl0.find(int3)                                                # STEP 11
int1 = 10                                                               # STEP 12
result = avl0.find(int1)                                                # STEP 13
avl0 == avl0                                                            # STEP 14
avl0.delete(int3)                                                       # STEP 15
int3 = 10                                                               # STEP 16
int1 = 7                                                                # STEP 17
avl1 = avl.AVLTree()                                                    # STEP 18
result = avl0.inorder()                                                 # STEP 19
avl0 = avl.AVLTree()                                                    # STEP 20
avl0.delete(int2)                                                       # STEP 21
int2 = 17                                                               # STEP 22
avl0.delete(int1)                                                       # STEP 23
avl0 == avl1                                                            # STEP 24
int1 = 20                                                               # STEP 25
result = avl0.find(int0)                                                # STEP 26
avl1.delete(int1)                                                       # STEP 27
int0 = 19                                                               # STEP 28
result = avl0.find(int3)                                                # STEP 29
int3 = 7                                                                # STEP 30
avl1 == avl0                                                            # STEP 31
avl0.insert(int2)                                                       # STEP 32
avl1.insert(int3)                                                       # STEP 33
avl0.insert(int0)                                                       # STEP 34
int0 = 3                                                                # STEP 35
int1 = 4                                                                # STEP 36
int2 = 6                                                                # STEP 37
avl0.delete(int0)                                                       # STEP 38
int0 = 4                                                                # STEP 39
avl0.insert(int1)                                                       # STEP 40
int3 = 13                                                               # STEP 41
int1 = 18                                                               # STEP 42
result = avl0.inorder()                                                 # STEP 43
avl1.insert(int2)                                                       # STEP 44
result = avl1.find(int0)                                                # STEP 45
int0 = 19                                                               # STEP 46
result = avl1.find(int3)                                                # STEP 47
avl2 = avl.AVLTree()                                                    # STEP 48
avl0.insert(int3)                                                       # STEP 49
int3 = 19                                                               # STEP 50
avl0 == avl1                                                            # STEP 51
int2 = 6                                                                # STEP 52
avl2.delete(int3)                                                       # STEP 53
avl0.delete(int3)                                                       # STEP 54
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10451db00>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
202 BRANCHES COVERED
151 STATEMENTS COVERED

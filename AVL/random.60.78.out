Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.746.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
TEST #4 STEP #51 (0:00:30.043991) Fri Apr 28 07:10:26 2017 [ 149 stmts 197 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10504e368>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 81 steps

SAVING TEST AS failure.746.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 9                                                                 # STEP 0
ACTION: int1 = 9 
int1 = None : <type 'NoneType'>
=> int1 = 9 : <type 'int'>
==================================================
int2 = 6                                                                 # STEP 1
ACTION: int2 = 6 
int2 = None : <type 'NoneType'>
=> int2 = 6 : <type 'int'>
==================================================
int0 = 4                                                                 # STEP 2
ACTION: int0 = 4 
int0 = None : <type 'NoneType'>
=> int0 = 4 : <type 'int'>
==================================================
int3 = 20                                                                # STEP 3
ACTION: int3 = 20 
int3 = None : <type 'NoneType'>
=> int3 = 20 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x1042535a8> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 5
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x1042532d8> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.delete(int3)                                                        # STEP 6
ACTION: avl2.delete(int3) 
int3 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042532d8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int3 = 13                                                                # STEP 7
ACTION: int3 = 13 
int3 = 20 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
avl1.insert(int1)                                                        # STEP 8
ACTION: avl1.insert(int1) 
int1 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042535a8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([9]) : <type 'set'>
==================================================
int1 = 5                                                                 # STEP 9
ACTION: int1 = 5 
int1 = 9 : <type 'int'>
=> int1 = 5 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 10
ACTION: avl1.insert(int2) 
int2 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042535a8> : <type 'instance'>
avl_REF1 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([9, 6]) : <type 'set'>
==================================================
int2 = 7                                                                # STEP 11
ACTION: int2 = 7 
int2 = 6 : <type 'int'>
=> int2 = 7 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 12
ACTION: avl2.delete(int0) 
int0 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042532d8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int0 = 7                                                                # STEP 13
ACTION: int0 = 7 
int0 = 4 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 14
ACTION: avl1.delete(int2) 
int2 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042535a8> : <type 'instance'>
avl_REF1 = set([9, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int2 = 12                                                               # STEP 15
ACTION: int2 = 12 
int2 = 7 : <type 'int'>
=> int2 = 12 : <type 'int'>
==================================================
result = avl1.find(int1)                                                # STEP 16
ACTION: result = avl1.find(int1) 
int1 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042535a8> : <type 'instance'>
avl_REF1 = set([9, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl2.delete(int0)                                                       # STEP 17
ACTION: avl2.delete(int0) 
int0 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042532d8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl1 == avl2                                                            # STEP 18
ACTION: avl1 == avl2 
avl1 = <avl.AVLTree instance at 0x1042535a8> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x1042532d8> : <type 'instance'>
avl_REF1 = set([9, 6]) : <type 'set'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
int0 = 1                                                                # STEP 19
ACTION: int0 = 1 
int0 = 7 : <type 'int'>
=> int0 = 1 : <type 'int'>
==================================================
int1 = 1                                                                # STEP 20
ACTION: int1 = 1 
int1 = 5 : <type 'int'>
=> int1 = 1 : <type 'int'>
==================================================
avl1 == avl2                                                            # STEP 21
ACTION: avl1 == avl2 
avl1 = <avl.AVLTree instance at 0x1042535a8> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x1042532d8> : <type 'instance'>
avl_REF1 = set([9, 6]) : <type 'set'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
result = avl2.find(int1)                                                # STEP 22
ACTION: result = avl2.find(int1) 
int1 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042532d8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int1 = 15                                                               # STEP 23
ACTION: int1 = 15 
int1 = 1 : <type 'int'>
=> int1 = 15 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 24
ACTION: avl2.delete(int2) 
int2 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042532d8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.insert(int1)                                                       # STEP 25
ACTION: avl2.insert(int1) 
int1 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042532d8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([15]) : <type 'set'>
==================================================
int2 = 17                                                               # STEP 26
ACTION: int2 = 17 
int2 = 12 : <type 'int'>
=> int2 = 17 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 27
ACTION: avl2.delete(int1) 
int1 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042532d8> : <type 'instance'>
avl_REF2 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 28
ACTION: avl1.delete(int1) 
int1 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042535a8> : <type 'instance'>
avl_REF1 = set([9, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int1 = 4                                                                # STEP 29
ACTION: int1 = 4 
int1 = 15 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
result = avl1.find(int2)                                                # STEP 30
ACTION: result = avl1.find(int2) 
int2 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042535a8> : <type 'instance'>
avl_REF1 = set([9, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl2.insert(int3)                                                       # STEP 31
ACTION: avl2.insert(int3) 
int3 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042532d8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([13]) : <type 'set'>
==================================================
int3 = 9                                                                # STEP 32
ACTION: int3 = 9 
int3 = 13 : <type 'int'>
=> int3 = 9 : <type 'int'>
==================================================
int2 = 7                                                                # STEP 33
ACTION: int2 = 7 
int2 = 17 : <type 'int'>
=> int2 = 7 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 34
ACTION: avl1.insert(int3) 
int3 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042535a8> : <type 'instance'>
avl_REF1 = set([9, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
avl1.delete(int0)                                                       # STEP 35
ACTION: avl1.delete(int0) 
int0 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042535a8> : <type 'instance'>
avl_REF1 = set([9, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int3 = 13                                                               # STEP 36
ACTION: int3 = 13 
int3 = 9 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
int0 = 1                                                                # STEP 37
ACTION: int0 = 1 
int0 = 1 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 38
ACTION: avl1.delete(int1) 
int1 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042535a8> : <type 'instance'>
avl_REF1 = set([9, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl2.delete(int2)                                                       # STEP 39
ACTION: avl2.delete(int2) 
int2 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042532d8> : <type 'instance'>
avl_REF2 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.delete(int3)                                                       # STEP 40
ACTION: avl2.delete(int3) 
int3 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042532d8> : <type 'instance'>
avl_REF2 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int2 = 15                                                               # STEP 41
ACTION: int2 = 15 
int2 = 7 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 42
ACTION: avl2.delete(int1) 
int1 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042532d8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int1 = 14                                                               # STEP 43
ACTION: int1 = 14 
int1 = 4 : <type 'int'>
=> int1 = 14 : <type 'int'>
==================================================
int3 = 2                                                                # STEP 44
ACTION: int3 = 2 
int3 = 13 : <type 'int'>
=> int3 = 2 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 45
ACTION: avl1.delete(int3) 
int3 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042535a8> : <type 'instance'>
avl_REF1 = set([9, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.insert(int1)                                                       # STEP 46
ACTION: avl1.insert(int1) 
int1 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042535a8> : <type 'instance'>
avl_REF1 = set([9, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([9, 14, 6]) : <type 'set'>
==================================================
int1 = 13                                                               # STEP 47
ACTION: int1 = 13 
int1 = 14 : <type 'int'>
=> int1 = 13 : <type 'int'>
==================================================
avl2 == avl1                                                            # STEP 48
ACTION: avl2 == avl1 
avl2 = <avl.AVLTree instance at 0x1042532d8> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x1042535a8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
avl_REF1 = set([9, 14, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
avl1.delete(int0)                                                       # STEP 49
ACTION: avl1.delete(int0) 
int0 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042535a8> : <type 'instance'>
avl_REF1 = set([9, 14, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int3 = 6                                                                # STEP 50
ACTION: int3 = 6 
int3 = 2 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
int0 = 2                                                                # STEP 51
ACTION: int0 = 2 
int0 = 1 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 52
ACTION: avl2.insert(int2) 
int2 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042532d8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([15]) : <type 'set'>
==================================================
int2 = 19                                                               # STEP 53
ACTION: int2 = 19 
int2 = 15 : <type 'int'>
=> int2 = 19 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 54
ACTION: avl1.insert(int2) 
int2 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042535a8> : <type 'instance'>
avl_REF1 = set([9, 14, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([9, 19, 14, 6]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 55
ACTION: avl1.insert(int3) 
int3 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042535a8> : <type 'instance'>
avl_REF1 = set([9, 19, 14, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
avl2.delete(int0)                                                       # STEP 56
ACTION: avl2.delete(int0) 
int0 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042532d8> : <type 'instance'>
avl_REF2 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int0 = 13                                                               # STEP 57
ACTION: int0 = 13 
int0 = 2 : <type 'int'>
=> int0 = 13 : <type 'int'>
==================================================
int2 = 6                                                                # STEP 58
ACTION: int2 = 6 
int2 = 19 : <type 'int'>
=> int2 = 6 : <type 'int'>
==================================================
result = avl2.find(int0)                                                # STEP 59
ACTION: result = avl2.find(int0) 
int0 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042532d8> : <type 'instance'>
avl_REF2 = set([15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
result = avl2.inorder()                                                 # STEP 60
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x1042532d8> : <type 'instance'>
avl_REF2 = set([15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int1)                                                       # STEP 61
ACTION: avl2.insert(int1) 
int1 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042532d8> : <type 'instance'>
avl_REF2 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([13, 15]) : <type 'set'>
==================================================
int1 = 9                                                                # STEP 62
ACTION: int1 = 9 
int1 = 13 : <type 'int'>
=> int1 = 9 : <type 'int'>
==================================================
int3 = 10                                                               # STEP 63
ACTION: int3 = 10 
int3 = 6 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 64
ACTION: avl2.insert(int1) 
int1 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042532d8> : <type 'instance'>
avl_REF2 = set([13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([9, 13, 15]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 65
ACTION: avl1.delete(int3) 
int3 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042535a8> : <type 'instance'>
avl_REF1 = set([9, 19, 14, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
result = avl1.inorder()                                                 # STEP 66
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1042535a8> : <type 'instance'>
avl_REF1 = set([9, 19, 14, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int1 = 14                                                               # STEP 67
ACTION: int1 = 14 
int1 = 9 : <type 'int'>
=> int1 = 14 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 68
ACTION: avl1.delete(int1) 
int1 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042535a8> : <type 'instance'>
avl_REF1 = set([9, 19, 14, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([9, 19, 6]) : <type 'set'>
==================================================
int1 = 11                                                               # STEP 69
ACTION: int1 = 11 
int1 = 14 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
int3 = 15                                                               # STEP 70
ACTION: int3 = 15 
int3 = 10 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 71
ACTION: avl1.delete(int1) 
int1 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042535a8> : <type 'instance'>
avl_REF1 = set([9, 19, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int0 = 7                                                                # STEP 72
ACTION: int0 = 7 
int0 = 13 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 73
ACTION: avl1.insert(int1) 
int1 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042535a8> : <type 'instance'>
avl_REF1 = set([9, 19, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([11, 9, 19, 6]) : <type 'set'>
==================================================
result = avl1.find(int0)                                                # STEP 74
ACTION: result = avl1.find(int0) 
int0 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042535a8> : <type 'instance'>
avl_REF1 = set([11, 9, 19, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
result = avl2.find(int2)                                                # STEP 75
ACTION: result = avl2.find(int2) 
int2 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042532d8> : <type 'instance'>
avl_REF2 = set([9, 13, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int1 = 19                                                               # STEP 76
ACTION: int1 = 19 
int1 = 11 : <type 'int'>
=> int1 = 19 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 77
ACTION: avl2.insert(int2) 
int2 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042532d8> : <type 'instance'>
avl_REF2 = set([9, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([9, 13, 6, 15]) : <type 'set'>
==================================================
int0 = 6                                                                # STEP 78
ACTION: int0 = 6 
int0 = 7 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
int2 = 20                                                               # STEP 79
ACTION: int2 = 20 
int2 = 6 : <type 'int'>
=> int2 = 20 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 80
ACTION: avl2.delete(int3) 
int3 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042532d8> : <type 'instance'>
avl_REF2 = set([9, 13, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([9, 13, 6]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1051226c8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 62
STOPPING TESTING DUE TO TIMEOUT
8.10994231422 PERCENT COVERED
60.1954200268 TOTAL RUNTIME
7 EXECUTED
643 TOTAL TEST OPERATIONS
26.6407139301 TIME SPENT EXECUTING TEST OPERATIONS
0.0224759578705 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
26.8104121685 TIME SPENT CHECKING PROPERTIES
53.4511260986 TOTAL TIME SPENT RUNNING SUT
0.00401425361633 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int1 = 9                                                                 # STEP 0
int2 = 6                                                                 # STEP 1
int0 = 4                                                                 # STEP 2
int3 = 20                                                                # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
avl2 = avl.AVLTree()                                                     # STEP 5
avl2.delete(int3)                                                        # STEP 6
int3 = 13                                                                # STEP 7
avl1.insert(int1)                                                        # STEP 8
int1 = 5                                                                 # STEP 9
avl1.insert(int2)                                                       # STEP 10
int2 = 7                                                                # STEP 11
avl2.delete(int0)                                                       # STEP 12
int0 = 7                                                                # STEP 13
avl1.delete(int2)                                                       # STEP 14
int2 = 12                                                               # STEP 15
result = avl1.find(int1)                                                # STEP 16
avl2.delete(int0)                                                       # STEP 17
avl1 == avl2                                                            # STEP 18
int0 = 1                                                                # STEP 19
int1 = 1                                                                # STEP 20
avl1 == avl2                                                            # STEP 21
result = avl2.find(int1)                                                # STEP 22
int1 = 15                                                               # STEP 23
avl2.delete(int2)                                                       # STEP 24
avl2.insert(int1)                                                       # STEP 25
int2 = 17                                                               # STEP 26
avl2.delete(int1)                                                       # STEP 27
avl1.delete(int1)                                                       # STEP 28
int1 = 4                                                                # STEP 29
result = avl1.find(int2)                                                # STEP 30
avl2.insert(int3)                                                       # STEP 31
int3 = 9                                                                # STEP 32
int2 = 7                                                                # STEP 33
avl1.insert(int3)                                                       # STEP 34
avl1.delete(int0)                                                       # STEP 35
int3 = 13                                                               # STEP 36
int0 = 1                                                                # STEP 37
avl1.delete(int1)                                                       # STEP 38
avl2.delete(int2)                                                       # STEP 39
avl2.delete(int3)                                                       # STEP 40
int2 = 15                                                               # STEP 41
avl2.delete(int1)                                                       # STEP 42
int1 = 14                                                               # STEP 43
int3 = 2                                                                # STEP 44
avl1.delete(int3)                                                       # STEP 45
avl1.insert(int1)                                                       # STEP 46
int1 = 13                                                               # STEP 47
avl2 == avl1                                                            # STEP 48
avl1.delete(int0)                                                       # STEP 49
int3 = 6                                                                # STEP 50
int0 = 2                                                                # STEP 51
avl2.insert(int2)                                                       # STEP 52
int2 = 19                                                               # STEP 53
avl1.insert(int2)                                                       # STEP 54
avl1.insert(int3)                                                       # STEP 55
avl2.delete(int0)                                                       # STEP 56
int0 = 13                                                               # STEP 57
int2 = 6                                                                # STEP 58
result = avl2.find(int0)                                                # STEP 59
result = avl2.inorder()                                                 # STEP 60
avl2.insert(int1)                                                       # STEP 61
int1 = 9                                                                # STEP 62
int3 = 10                                                               # STEP 63
avl2.insert(int1)                                                       # STEP 64
avl1.delete(int3)                                                       # STEP 65
result = avl1.inorder()                                                 # STEP 66
int1 = 14                                                               # STEP 67
avl1.delete(int1)                                                       # STEP 68
int1 = 11                                                               # STEP 69
int3 = 15                                                               # STEP 70
avl1.delete(int1)                                                       # STEP 71
int0 = 7                                                                # STEP 72
avl1.insert(int1)                                                       # STEP 73
result = avl1.find(int0)                                                # STEP 74
result = avl2.find(int2)                                                # STEP 75
int1 = 19                                                               # STEP 76
avl2.insert(int2)                                                       # STEP 77
int0 = 6                                                                # STEP 78
int2 = 20                                                               # STEP 79
avl2.delete(int3)                                                       # STEP 80
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1051226c8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
204 BRANCHES COVERED
152 STATEMENTS COVERED

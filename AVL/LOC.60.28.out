Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.99677.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  10 [2:0]
-- < 6 [1:0]
---- < 3 [0:0] L
---- > 9 [0:0] L
-- > 13 [1:-1]
---- > 17 [0:0] L
set([17, 3, 6, 9, 10, 13])
  10 [2:0]
-- < 6 [1:0]
---- < 3 [0:0] L
---- > 9 [0:0] L
-- > 13 [1:-1]
---- > 17 [0:0] L
set([17, 3, 6, 9, 10, 13])
  10 [2:0]
-- < 6 [1:0]
---- < 3 [0:0] L
---- > 9 [0:0] L
-- > 13 [1:-1]
---- > 17 [0:0] L
set([17, 3, 6, 9, 10, 13])
  10 [2:0]
-- < 6 [1:0]
---- < 3 [0:0] L
---- > 9 [0:0] L
-- > 13 [1:-1]
---- > 17 [0:0] L
set([17, 3, 6, 9, 10, 13])
  10 [2:0]
-- < 6 [1:0]
---- < 3 [0:0] L
---- > 9 [0:0] L
-- > 13 [1:-1]
---- > 17 [0:0] L
set([17, 3, 6, 9, 10, 13])
  11 [2:0]
-- < 10 [1:1]
---- < 9 [0:0] L
-- > 17 [1:0]
---- < 14 [0:0] L
---- > 20 [0:0] L
set([9, 10, 11, 14, 17, 20])
  11 [2:0]
-- < 10 [1:1]
---- < 9 [0:0] L
-- > 17 [1:0]
---- < 14 [0:0] L
---- > 20 [0:0] L
set([9, 10, 11, 14, 17, 20])
  12 [3:1]
-- < 7 [2:1]
---- < 6 [1:1]
------ < 3 [0:0] L
---- > 8 [0:0] L
-- > 17 [1:0]
---- < 14 [0:0] L
---- > 18 [0:0] L
set([3, 6, 7, 8, 12, 14, 17, 18])
  12 [3:1]
-- < 7 [2:1]
---- < 4 [1:0]
------ < 3 [0:0] L
------ > 6 [0:0] L
---- > 8 [0:0] L
-- > 17 [1:0]
---- < 14 [0:0] L
---- > 18 [0:0] L
set([3, 4, 6, 7, 8, 12, 14, 17, 18])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x101428878>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
Original test has 71 steps

SAVING TEST AS failure.99677.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 8                                                                 # STEP 0
ACTION: int0 = 8 
int0 = None : <type 'NoneType'>
=> int0 = 8 : <type 'int'>
==================================================
int1 = 10                                                                # STEP 1
ACTION: int1 = 10 
int1 = None : <type 'NoneType'>
=> int1 = 10 : <type 'int'>
==================================================
int2 = 12                                                                # STEP 2
ACTION: int2 = 12 
int2 = None : <type 'NoneType'>
=> int2 = 12 : <type 'int'>
==================================================
int3 = 14                                                                # STEP 3
ACTION: int3 = 14 
int3 = None : <type 'NoneType'>
=> int3 = 14 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 4
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x101718ea8> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.delete(int1)                                                        # STEP 5
ACTION: avl0.delete(int1) 
int1 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x101718ea8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.insert(int3)                                                        # STEP 6
ACTION: avl0.insert(int3) 
int3 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x101718ea8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([14]) : <type 'set'>
==================================================
avl0.insert(int2)                                                        # STEP 7
ACTION: avl0.insert(int2) 
int2 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x101718ea8> : <type 'instance'>
avl_REF0 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([12, 14]) : <type 'set'>
==================================================
avl0.insert(int0)                                                        # STEP 8
ACTION: avl0.insert(int0) 
int0 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x101718ea8> : <type 'instance'>
avl_REF0 = set([12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([8, 12, 14]) : <type 'set'>
==================================================
int1 = 10                                                                # STEP 9
ACTION: int1 = 10 
int1 = 10 : <type 'int'>
==================================================
result = avl0.find(int0)                                                # STEP 10
ACTION: result = avl0.find(int0) 
int0 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x101718ea8> : <type 'instance'>
avl_REF0 = set([8, 12, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
int3 = 7                                                                # STEP 11
ACTION: int3 = 7 
int3 = 14 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 12
ACTION: avl0.insert(int2) 
int2 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x101718ea8> : <type 'instance'>
avl_REF0 = set([8, 12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
int2 = 14                                                               # STEP 13
ACTION: int2 = 14 
int2 = 12 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 14
ACTION: avl0.delete(int1) 
int1 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x101718ea8> : <type 'instance'>
avl_REF0 = set([8, 12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int1 = 16                                                               # STEP 15
ACTION: int1 = 16 
int1 = 10 : <type 'int'>
=> int1 = 16 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 16
ACTION: avl0.insert(int0) 
int0 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x101718ea8> : <type 'instance'>
avl_REF0 = set([8, 12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
avl0.insert(int2)                                                       # STEP 17
ACTION: avl0.insert(int2) 
int2 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x101718ea8> : <type 'instance'>
avl_REF0 = set([8, 12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl0.delete(int1)                                                       # STEP 18
ACTION: avl0.delete(int1) 
int1 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x101718ea8> : <type 'instance'>
avl_REF0 = set([8, 12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
result = avl0.find(int2)                                                # STEP 19
ACTION: result = avl0.find(int2) 
int2 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x101718ea8> : <type 'instance'>
avl_REF0 = set([8, 12, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl0.delete(int1)                                                       # STEP 20
ACTION: avl0.delete(int1) 
int1 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x101718ea8> : <type 'instance'>
avl_REF0 = set([8, 12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.insert(int3)                                                       # STEP 21
ACTION: avl0.insert(int3) 
int3 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x101718ea8> : <type 'instance'>
avl_REF0 = set([8, 12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([8, 12, 14, 7]) : <type 'set'>
==================================================
result = avl0.find(int3)                                                # STEP 22
ACTION: result = avl0.find(int3) 
int3 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x101718ea8> : <type 'instance'>
avl_REF0 = set([8, 12, 14, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
avl0.delete(int3)                                                       # STEP 23
ACTION: avl0.delete(int3) 
int3 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x101718ea8> : <type 'instance'>
avl_REF0 = set([8, 12, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([8, 12, 14]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 24
ACTION: avl0.delete(int3) 
int3 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x101718ea8> : <type 'instance'>
avl_REF0 = set([8, 12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.insert(int2)                                                       # STEP 25
ACTION: avl0.insert(int2) 
int2 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x101718ea8> : <type 'instance'>
avl_REF0 = set([8, 12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl0.insert(int0)                                                       # STEP 26
ACTION: avl0.insert(int0) 
int0 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x101718ea8> : <type 'instance'>
avl_REF0 = set([8, 12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
avl0.insert(int0)                                                       # STEP 27
ACTION: avl0.insert(int0) 
int0 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x101718ea8> : <type 'instance'>
avl_REF0 = set([8, 12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
avl0.insert(int0)                                                       # STEP 28
ACTION: avl0.insert(int0) 
int0 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x101718ea8> : <type 'instance'>
avl_REF0 = set([8, 12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
avl0.delete(int0)                                                       # STEP 29
ACTION: avl0.delete(int0) 
int0 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x101718ea8> : <type 'instance'>
avl_REF0 = set([8, 12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([12, 14]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 30
ACTION: avl0.insert(int3) 
int3 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x101718ea8> : <type 'instance'>
avl_REF0 = set([12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([12, 14, 7]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 31
ACTION: avl0.insert(int0) 
int0 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x101718ea8> : <type 'instance'>
avl_REF0 = set([12, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([8, 12, 14, 7]) : <type 'set'>
==================================================
int0 = 16                                                               # STEP 32
ACTION: int0 = 16 
int0 = 8 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 33
ACTION: avl0.delete(int3) 
int3 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x101718ea8> : <type 'instance'>
avl_REF0 = set([8, 12, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([8, 12, 14]) : <type 'set'>
==================================================
avl0 == avl0                                                            # STEP 34
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x101718ea8> : <type 'instance'>
avl_REF0 = set([8, 12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
int1 = 6                                                                # STEP 35
ACTION: int1 = 6 
int1 = 16 : <type 'int'>
=> int1 = 6 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 36
ACTION: avl0.delete(int0) 
int0 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x101718ea8> : <type 'instance'>
avl_REF0 = set([8, 12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.insert(int1)                                                       # STEP 37
ACTION: avl0.insert(int1) 
int1 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x101718ea8> : <type 'instance'>
avl_REF0 = set([8, 12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([8, 12, 6, 14]) : <type 'set'>
==================================================
avl0 == avl0                                                            # STEP 38
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x101718ea8> : <type 'instance'>
avl_REF0 = set([8, 12, 6, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl0.insert(int3)                                                       # STEP 39
ACTION: avl0.insert(int3) 
int3 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x101718ea8> : <type 'instance'>
avl_REF0 = set([8, 12, 6, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([8, 12, 6, 14, 7]) : <type 'set'>
==================================================
int3 = 17                                                               # STEP 40
ACTION: int3 = 17 
int3 = 7 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 41
ACTION: avl0.insert(int3) 
int3 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x101718ea8> : <type 'instance'>
avl_REF0 = set([8, 12, 6, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([6, 7, 8, 12, 14, 17]) : <type 'set'>
==================================================
int1 = 18                                                               # STEP 42
ACTION: int1 = 18 
int1 = 6 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 43
ACTION: avl0.insert(int0) 
int0 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x101718ea8> : <type 'instance'>
avl_REF0 = set([6, 7, 8, 12, 14, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([6, 7, 8, 12, 14, 16, 17]) : <type 'set'>
==================================================
int2 = 3                                                                # STEP 44
ACTION: int2 = 3 
int2 = 14 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
result = avl0.find(int0)                                                # STEP 45
ACTION: result = avl0.find(int0) 
int0 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x101718ea8> : <type 'instance'>
avl_REF0 = set([6, 7, 8, 12, 14, 16, 17]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
int3 = 8                                                                # STEP 46
ACTION: int3 = 8 
int3 = 17 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
result = avl0.find(int2)                                                # STEP 47
ACTION: result = avl0.find(int2) 
int2 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x101718ea8> : <type 'instance'>
avl_REF0 = set([6, 7, 8, 12, 14, 16, 17]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
result = avl0.inorder()                                                 # STEP 48
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x101718ea8> : <type 'instance'>
avl_REF0 = set([6, 7, 8, 12, 14, 16, 17]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int0 = 16                                                               # STEP 49
ACTION: int0 = 16 
int0 = 16 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 50
ACTION: avl0.delete(int0) 
int0 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x101718ea8> : <type 'instance'>
avl_REF0 = set([6, 7, 8, 12, 14, 16, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([6, 7, 8, 12, 14, 17]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 51
ACTION: avl0.insert(int1) 
int1 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x101718ea8> : <type 'instance'>
avl_REF0 = set([6, 7, 8, 12, 14, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([6, 7, 8, 12, 14, 17, 18]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 52
ACTION: avl0.delete(int2) 
int2 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x101718ea8> : <type 'instance'>
avl_REF0 = set([6, 7, 8, 12, 14, 17, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int1 = 3                                                                # STEP 53
ACTION: int1 = 3 
int1 = 18 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
int0 = 4                                                                # STEP 54
ACTION: int0 = 4 
int0 = 16 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
int2 = 7                                                                # STEP 55
ACTION: int2 = 7 
int2 = 3 : <type 'int'>
=> int2 = 7 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 56
ACTION: avl0.insert(int1) 
int1 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x101718ea8> : <type 'instance'>
avl_REF0 = set([6, 7, 8, 12, 14, 17, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([3, 6, 7, 8, 12, 14, 17, 18]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 57
ACTION: avl0.insert(int1) 
int1 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x101718ea8> : <type 'instance'>
avl_REF0 = set([3, 6, 7, 8, 12, 14, 17, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl0 == avl0                                                            # STEP 58
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x101718ea8> : <type 'instance'>
avl_REF0 = set([3, 6, 7, 8, 12, 14, 17, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
result = avl0.inorder()                                                 # STEP 59
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x101718ea8> : <type 'instance'>
avl_REF0 = set([3, 6, 7, 8, 12, 14, 17, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.display()                                                          # STEP 60
ACTION: avl0.display() 
avl0 = <avl.AVLTree instance at 0x101718ea8> : <type 'instance'>
avl_REF0 = set([3, 6, 7, 8, 12, 14, 17, 18]) : <type 'set'>
  12 [3:1]
-- < 7 [2:1]
---- < 6 [1:1]
------ < 3 [0:0] L
---- > 8 [0:0] L
-- > 17 [1:0]
---- < 14 [0:0] L
---- > 18 [0:0] L
REFERENCE ACTION: print(avl_REF0) 
set([3, 6, 7, 8, 12, 14, 17, 18])
==================================================
int1 = 20                                                               # STEP 61
ACTION: int1 = 20 
int1 = 3 : <type 'int'>
=> int1 = 20 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 62
ACTION: avl0.insert(int0) 
int0 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x101718ea8> : <type 'instance'>
avl_REF0 = set([3, 6, 7, 8, 12, 14, 17, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([3, 4, 6, 7, 8, 12, 14, 17, 18]) : <type 'set'>
==================================================
avl0.display()                                                          # STEP 63
ACTION: avl0.display() 
avl0 = <avl.AVLTree instance at 0x101718ea8> : <type 'instance'>
avl_REF0 = set([3, 4, 6, 7, 8, 12, 14, 17, 18]) : <type 'set'>
  12 [3:1]
-- < 7 [2:1]
---- < 4 [1:0]
------ < 3 [0:0] L
------ > 6 [0:0] L
---- > 8 [0:0] L
-- > 17 [1:0]
---- < 14 [0:0] L
---- > 18 [0:0] L
REFERENCE ACTION: print(avl_REF0) 
set([3, 4, 6, 7, 8, 12, 14, 17, 18])
==================================================
int0 = 15                                                               # STEP 64
ACTION: int0 = 15 
int0 = 4 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 65
ACTION: avl0.delete(int0) 
int0 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x101718ea8> : <type 'instance'>
avl_REF0 = set([3, 4, 6, 7, 8, 12, 14, 17, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.insert(int1)                                                       # STEP 66
ACTION: avl0.insert(int1) 
int1 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x101718ea8> : <type 'instance'>
avl_REF0 = set([3, 4, 6, 7, 8, 12, 14, 17, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([3, 4, 6, 7, 8, 12, 14, 17, 18, 20]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 67
ACTION: avl0.insert(int3) 
int3 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x101718ea8> : <type 'instance'>
avl_REF0 = set([3, 4, 6, 7, 8, 12, 14, 17, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
int0 = 8                                                                # STEP 68
ACTION: int0 = 8 
int0 = 15 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 69
ACTION: avl0.insert(int3) 
int3 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x101718ea8> : <type 'instance'>
avl_REF0 = set([3, 4, 6, 7, 8, 12, 14, 17, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
avl0.delete(int3)                                                       # STEP 70
ACTION: avl0.delete(int3) 
int3 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x101718ea8> : <type 'instance'>
avl_REF0 = set([3, 4, 6, 7, 8, 12, 14, 17, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([3, 4, 6, 7, 12, 14, 17, 18, 20]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1013fcd88>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10170e4d0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 32 steps

SAVING TEST AS failure.99677.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 14                                                                # STEP 0
ACTION: int3 = 14 
int3 = None : <type 'NoneType'>
=> int3 = 14 : <type 'int'>
==================================================
int2 = 19                                                                # STEP 1
ACTION: int2 = 19 
int2 = None : <type 'NoneType'>
=> int2 = 19 : <type 'int'>
==================================================
int0 = 10                                                                # STEP 2
ACTION: int0 = 10 
int0 = None : <type 'NoneType'>
=> int0 = 10 : <type 'int'>
==================================================
int1 = 2                                                                 # STEP 3
ACTION: int1 = 2 
int1 = None : <type 'NoneType'>
=> int1 = 2 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x10170ec20> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.insert(int3)                                                        # STEP 5
ACTION: avl1.insert(int3) 
int3 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10170ec20> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([14]) : <type 'set'>
==================================================
avl1.delete(int3)                                                        # STEP 6
ACTION: avl1.delete(int3) 
int3 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10170ec20> : <type 'instance'>
avl_REF1 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int3 = 19                                                                # STEP 7
ACTION: int3 = 19 
int3 = 14 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
avl1.delete(int1)                                                        # STEP 8
ACTION: avl1.delete(int1) 
int1 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10170ec20> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.insert(int2)                                                        # STEP 9
ACTION: avl1.insert(int2) 
int2 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10170ec20> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([19]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 10
ACTION: avl1.insert(int0) 
int0 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10170ec20> : <type 'instance'>
avl_REF1 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([10, 19]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 11
ACTION: avl1.delete(int2) 
int2 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10170ec20> : <type 'instance'>
avl_REF1 = set([10, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([10]) : <type 'set'>
==================================================
int2 = 2                                                                # STEP 12
ACTION: int2 = 2 
int2 = 19 : <type 'int'>
=> int2 = 2 : <type 'int'>
==================================================
int1 = 5                                                                # STEP 13
ACTION: int1 = 5 
int1 = 2 : <type 'int'>
=> int1 = 5 : <type 'int'>
==================================================
int0 = 11                                                               # STEP 14
ACTION: int0 = 11 
int0 = 10 : <type 'int'>
=> int0 = 11 : <type 'int'>
==================================================
result = avl1.find(int1)                                                # STEP 15
ACTION: result = avl1.find(int1) 
int1 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10170ec20> : <type 'instance'>
avl_REF1 = set([10]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int1 = 15                                                               # STEP 16
ACTION: int1 = 15 
int1 = 5 : <type 'int'>
=> int1 = 15 : <type 'int'>
==================================================
result = avl1.find(int1)                                                # STEP 17
ACTION: result = avl1.find(int1) 
int1 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10170ec20> : <type 'instance'>
avl_REF1 = set([10]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl1.insert(int3)                                                       # STEP 18
ACTION: avl1.insert(int3) 
int3 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10170ec20> : <type 'instance'>
avl_REF1 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([10, 19]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 19
ACTION: avl1.delete(int1) 
int1 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10170ec20> : <type 'instance'>
avl_REF1 = set([10, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.delete(int1)                                                       # STEP 20
ACTION: avl1.delete(int1) 
int1 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10170ec20> : <type 'instance'>
avl_REF1 = set([10, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.delete(int3)                                                       # STEP 21
ACTION: avl1.delete(int3) 
int3 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10170ec20> : <type 'instance'>
avl_REF1 = set([10, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([10]) : <type 'set'>
==================================================
int1 = 2                                                                # STEP 22
ACTION: int1 = 2 
int1 = 15 : <type 'int'>
=> int1 = 2 : <type 'int'>
==================================================
int3 = 20                                                               # STEP 23
ACTION: int3 = 20 
int3 = 19 : <type 'int'>
=> int3 = 20 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 24
ACTION: avl1.insert(int0) 
int0 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10170ec20> : <type 'instance'>
avl_REF1 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([10, 11]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 25
ACTION: avl1.insert(int3) 
int3 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10170ec20> : <type 'instance'>
avl_REF1 = set([10, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([10, 11, 20]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 26
ACTION: avl1.delete(int2) 
int2 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10170ec20> : <type 'instance'>
avl_REF1 = set([10, 11, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.delete(int2)                                                       # STEP 27
ACTION: avl1.delete(int2) 
int2 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10170ec20> : <type 'instance'>
avl_REF1 = set([10, 11, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.insert(int2)                                                       # STEP 28
ACTION: avl1.insert(int2) 
int2 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10170ec20> : <type 'instance'>
avl_REF1 = set([10, 11, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([10, 11, 20, 2]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 29
ACTION: avl1.insert(int2) 
int2 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10170ec20> : <type 'instance'>
avl_REF1 = set([10, 11, 20, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
int0 = 14                                                               # STEP 30
ACTION: int0 = 14 
int0 = 11 : <type 'int'>
=> int0 = 14 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 31
ACTION: avl1.delete(int3) 
int3 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10170ec20> : <type 'instance'>
avl_REF1 = set([10, 11, 20, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([10, 11, 2]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x101711638>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
TEST #5 STEP #0 (0:00:30.606682) Fri Apr 28 04:36:37 2017 [ 160 stmts 212 branches ]
  8 [2:0]
-- < 6 [1:1]
---- < 4 [0:0] L
-- > 14 [1:0]
---- < 13 [0:0] L
---- > 17 [0:0] L
set([4, 6, 8, 13, 14, 17])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10590d758>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
Original test has 74 steps

SAVING TEST AS failure.99677.test.2
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 13                                                                # STEP 0
ACTION: int1 = 13 
int1 = None : <type 'NoneType'>
=> int1 = 13 : <type 'int'>
==================================================
int3 = 10                                                                # STEP 1
ACTION: int3 = 10 
int3 = None : <type 'NoneType'>
=> int3 = 10 : <type 'int'>
==================================================
int0 = 17                                                                # STEP 2
ACTION: int0 = 17 
int0 = None : <type 'NoneType'>
=> int0 = 17 : <type 'int'>
==================================================
int2 = 11                                                                # STEP 3
ACTION: int2 = 11 
int2 = None : <type 'NoneType'>
=> int2 = 11 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 4
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x10590dc20> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.delete(int2)                                                        # STEP 5
ACTION: avl0.delete(int2) 
int2 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10590dc20> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.delete(int1)                                                        # STEP 6
ACTION: avl0.delete(int1) 
int1 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10590dc20> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.insert(int3)                                                        # STEP 7
ACTION: avl0.insert(int3) 
int3 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10590dc20> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([10]) : <type 'set'>
==================================================
avl0.delete(int2)                                                        # STEP 8
ACTION: avl0.delete(int2) 
int2 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10590dc20> : <type 'instance'>
avl_REF0 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
result = avl0.inorder()                                                  # STEP 9
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x10590dc20> : <type 'instance'>
avl_REF0 = set([10]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.delete(int0)                                                       # STEP 10
ACTION: avl0.delete(int0) 
int0 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10590dc20> : <type 'instance'>
avl_REF0 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.insert(int2)                                                       # STEP 11
ACTION: avl0.insert(int2) 
int2 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10590dc20> : <type 'instance'>
avl_REF0 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([10, 11]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 12
ACTION: avl0.insert(int1) 
int1 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10590dc20> : <type 'instance'>
avl_REF0 = set([10, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([10, 11, 13]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 13
ACTION: avl0.delete(int3) 
int3 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10590dc20> : <type 'instance'>
avl_REF0 = set([10, 11, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([11, 13]) : <type 'set'>
==================================================
int2 = 12                                                               # STEP 14
ACTION: int2 = 12 
int2 = 11 : <type 'int'>
=> int2 = 12 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 15
ACTION: avl0.insert(int3) 
int3 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10590dc20> : <type 'instance'>
avl_REF0 = set([11, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([10, 11, 13]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 16
ACTION: avl0.insert(int1) 
int1 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10590dc20> : <type 'instance'>
avl_REF0 = set([10, 11, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl0.delete(int2)                                                       # STEP 17
ACTION: avl0.delete(int2) 
int2 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10590dc20> : <type 'instance'>
avl_REF0 = set([10, 11, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.delete(int0)                                                       # STEP 18
ACTION: avl0.delete(int0) 
int0 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10590dc20> : <type 'instance'>
avl_REF0 = set([10, 11, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int2 = 17                                                               # STEP 19
ACTION: int2 = 17 
int2 = 12 : <type 'int'>
=> int2 = 17 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 20
ACTION: avl0.insert(int2) 
int2 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10590dc20> : <type 'instance'>
avl_REF0 = set([10, 11, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([17, 10, 11, 13]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 21
ACTION: avl0.delete(int2) 
int2 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10590dc20> : <type 'instance'>
avl_REF0 = set([17, 10, 11, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([10, 11, 13]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 22
ACTION: avl0.insert(int2) 
int2 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10590dc20> : <type 'instance'>
avl_REF0 = set([10, 11, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([17, 10, 11, 13]) : <type 'set'>
==================================================
int1 = 16                                                               # STEP 23
ACTION: int1 = 16 
int1 = 13 : <type 'int'>
=> int1 = 16 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 24
ACTION: avl0.delete(int2) 
int2 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10590dc20> : <type 'instance'>
avl_REF0 = set([17, 10, 11, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([10, 11, 13]) : <type 'set'>
==================================================
int3 = 11                                                               # STEP 25
ACTION: int3 = 11 
int3 = 10 : <type 'int'>
=> int3 = 11 : <type 'int'>
==================================================
int2 = 1                                                                # STEP 26
ACTION: int2 = 1 
int2 = 17 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 27
ACTION: avl0.delete(int2) 
int2 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10590dc20> : <type 'instance'>
avl_REF0 = set([10, 11, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.insert(int3)                                                       # STEP 28
ACTION: avl0.insert(int3) 
int3 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10590dc20> : <type 'instance'>
avl_REF0 = set([10, 11, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
avl0.insert(int0)                                                       # STEP 29
ACTION: avl0.insert(int0) 
int0 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10590dc20> : <type 'instance'>
avl_REF0 = set([10, 11, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([17, 10, 11, 13]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 30
ACTION: avl0.delete(int1) 
int1 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10590dc20> : <type 'instance'>
avl_REF0 = set([17, 10, 11, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int0 = 11                                                               # STEP 31
ACTION: int0 = 11 
int0 = 17 : <type 'int'>
=> int0 = 11 : <type 'int'>
==================================================
int2 = 8                                                                # STEP 32
ACTION: int2 = 8 
int2 = 1 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
int3 = 7                                                                # STEP 33
ACTION: int3 = 7 
int3 = 11 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 34
ACTION: avl0.insert(int2) 
int2 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10590dc20> : <type 'instance'>
avl_REF0 = set([17, 10, 11, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([8, 17, 10, 11, 13]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 35
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x10590dc20> : <type 'instance'>
avl_REF0 = set([8, 17, 10, 11, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.delete(int1)                                                       # STEP 36
ACTION: avl0.delete(int1) 
int1 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10590dc20> : <type 'instance'>
avl_REF0 = set([8, 17, 10, 11, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.delete(int0)                                                       # STEP 37
ACTION: avl0.delete(int0) 
int0 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10590dc20> : <type 'instance'>
avl_REF0 = set([8, 17, 10, 11, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([8, 17, 10, 13]) : <type 'set'>
==================================================
int1 = 14                                                               # STEP 38
ACTION: int1 = 14 
int1 = 16 : <type 'int'>
=> int1 = 14 : <type 'int'>
==================================================
result = avl0.find(int3)                                                # STEP 39
ACTION: result = avl0.find(int3) 
int3 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10590dc20> : <type 'instance'>
avl_REF0 = set([8, 17, 10, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
int0 = 6                                                                # STEP 40
ACTION: int0 = 6 
int0 = 11 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 41
ACTION: avl0.delete(int3) 
int3 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10590dc20> : <type 'instance'>
avl_REF0 = set([8, 17, 10, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.insert(int2)                                                       # STEP 42
ACTION: avl0.insert(int2) 
int2 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10590dc20> : <type 'instance'>
avl_REF0 = set([8, 17, 10, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl0.insert(int0)                                                       # STEP 43
ACTION: avl0.insert(int0) 
int0 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10590dc20> : <type 'instance'>
avl_REF0 = set([8, 17, 10, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([6, 8, 10, 13, 17]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 44
ACTION: avl0.delete(int0) 
int0 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10590dc20> : <type 'instance'>
avl_REF0 = set([6, 8, 10, 13, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([8, 10, 13, 17]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 45
ACTION: avl0.insert(int2) 
int2 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10590dc20> : <type 'instance'>
avl_REF0 = set([8, 10, 13, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl0.insert(int0)                                                       # STEP 46
ACTION: avl0.insert(int0) 
int0 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10590dc20> : <type 'instance'>
avl_REF0 = set([8, 10, 13, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([6, 8, 10, 13, 17]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 47
ACTION: avl0.insert(int3) 
int3 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10590dc20> : <type 'instance'>
avl_REF0 = set([6, 8, 10, 13, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([6, 7, 8, 10, 13, 17]) : <type 'set'>
==================================================
int2 = 10                                                               # STEP 48
ACTION: int2 = 10 
int2 = 8 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
int0 = 7                                                                # STEP 49
ACTION: int0 = 7 
int0 = 6 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 50
ACTION: avl0.delete(int2) 
int2 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10590dc20> : <type 'instance'>
avl_REF0 = set([6, 7, 8, 10, 13, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([6, 7, 8, 13, 17]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 51
ACTION: avl0.insert(int0) 
int0 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10590dc20> : <type 'instance'>
avl_REF0 = set([6, 7, 8, 13, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
avl0.delete(int0)                                                       # STEP 52
ACTION: avl0.delete(int0) 
int0 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10590dc20> : <type 'instance'>
avl_REF0 = set([6, 7, 8, 13, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([6, 8, 13, 17]) : <type 'set'>
==================================================
int3 = 4                                                                # STEP 53
ACTION: int3 = 4 
int3 = 7 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 54
ACTION: avl0.insert(int1) 
int1 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10590dc20> : <type 'instance'>
avl_REF0 = set([6, 8, 13, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([6, 8, 13, 14, 17]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 55
ACTION: avl0.delete(int2) 
int2 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10590dc20> : <type 'instance'>
avl_REF0 = set([6, 8, 13, 14, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
result = avl0.inorder()                                                 # STEP 56
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x10590dc20> : <type 'instance'>
avl_REF0 = set([6, 8, 13, 14, 17]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int3)                                                       # STEP 57
ACTION: avl0.insert(int3) 
int3 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10590dc20> : <type 'instance'>
avl_REF0 = set([6, 8, 13, 14, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([4, 6, 8, 13, 14, 17]) : <type 'set'>
==================================================
avl0.display()                                                          # STEP 58
ACTION: avl0.display() 
avl0 = <avl.AVLTree instance at 0x10590dc20> : <type 'instance'>
avl_REF0 = set([4, 6, 8, 13, 14, 17]) : <type 'set'>
  8 [2:0]
-- < 6 [1:1]
---- < 4 [0:0] L
-- > 14 [1:0]
---- < 13 [0:0] L
---- > 17 [0:0] L
REFERENCE ACTION: print(avl_REF0) 
set([4, 6, 8, 13, 14, 17])
==================================================
avl0.insert(int3)                                                       # STEP 59
ACTION: avl0.insert(int3) 
int3 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10590dc20> : <type 'instance'>
avl_REF0 = set([4, 6, 8, 13, 14, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
avl0.delete(int2)                                                       # STEP 60
ACTION: avl0.delete(int2) 
int2 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10590dc20> : <type 'instance'>
avl_REF0 = set([4, 6, 8, 13, 14, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
result = avl0.inorder()                                                 # STEP 61
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x10590dc20> : <type 'instance'>
avl_REF0 = set([4, 6, 8, 13, 14, 17]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int2)                                                       # STEP 62
ACTION: avl0.insert(int2) 
int2 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10590dc20> : <type 'instance'>
avl_REF0 = set([4, 6, 8, 13, 14, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([4, 6, 8, 10, 13, 14, 17]) : <type 'set'>
==================================================
int1 = 3                                                                # STEP 63
ACTION: int1 = 3 
int1 = 14 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 64
ACTION: avl0.insert(int3) 
int3 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10590dc20> : <type 'instance'>
avl_REF0 = set([4, 6, 8, 10, 13, 14, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
result = avl0.inorder()                                                 # STEP 65
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x10590dc20> : <type 'instance'>
avl_REF0 = set([4, 6, 8, 10, 13, 14, 17]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int1)                                                       # STEP 66
ACTION: avl0.insert(int1) 
int1 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10590dc20> : <type 'instance'>
avl_REF0 = set([4, 6, 8, 10, 13, 14, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([3, 4, 6, 8, 10, 13, 14, 17]) : <type 'set'>
==================================================
int2 = 6                                                                # STEP 67
ACTION: int2 = 6 
int2 = 10 : <type 'int'>
=> int2 = 6 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 68
ACTION: avl0.insert(int1) 
int1 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10590dc20> : <type 'instance'>
avl_REF0 = set([3, 4, 6, 8, 10, 13, 14, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl0.delete(int1)                                                       # STEP 69
ACTION: avl0.delete(int1) 
int1 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10590dc20> : <type 'instance'>
avl_REF0 = set([3, 4, 6, 8, 10, 13, 14, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([4, 6, 8, 10, 13, 14, 17]) : <type 'set'>
==================================================
int1 = 18                                                               # STEP 70
ACTION: int1 = 18 
int1 = 3 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
int0 = 19                                                               # STEP 71
ACTION: int0 = 19 
int0 = 7 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 72
ACTION: avl0.delete(int1) 
int1 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10590dc20> : <type 'instance'>
avl_REF0 = set([4, 6, 8, 10, 13, 14, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.delete(int2)                                                       # STEP 73
ACTION: avl0.delete(int2) 
int2 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10590dc20> : <type 'instance'>
avl_REF0 = set([4, 6, 8, 10, 13, 14, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([4, 8, 10, 13, 14, 17]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10139ac68>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 3 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1013a8170>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
Original test has 35 steps

SAVING TEST AS failure.99677.test.3
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 17                                                                # STEP 0
ACTION: int2 = 17 
int2 = None : <type 'NoneType'>
=> int2 = 17 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 1
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x10130f5f0> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.delete(int2)                                                        # STEP 2
ACTION: avl0.delete(int2) 
int2 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10130f5f0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.delete(int2)                                                        # STEP 3
ACTION: avl0.delete(int2) 
int2 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10130f5f0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int3 = 13                                                                # STEP 4
ACTION: int3 = 13 
int3 = None : <type 'NoneType'>
=> int3 = 13 : <type 'int'>
==================================================
avl0.insert(int2)                                                        # STEP 5
ACTION: avl0.insert(int2) 
int2 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10130f5f0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([17]) : <type 'set'>
==================================================
int0 = 18                                                                # STEP 6
ACTION: int0 = 18 
int0 = None : <type 'NoneType'>
=> int0 = 18 : <type 'int'>
==================================================
avl0.insert(int2)                                                        # STEP 7
ACTION: avl0.insert(int2) 
int2 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10130f5f0> : <type 'instance'>
avl_REF0 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl0.insert(int0)                                                        # STEP 8
ACTION: avl0.insert(int0) 
int0 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10130f5f0> : <type 'instance'>
avl_REF0 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([17, 18]) : <type 'set'>
==================================================
avl0.insert(int3)                                                        # STEP 9
ACTION: avl0.insert(int3) 
int3 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10130f5f0> : <type 'instance'>
avl_REF0 = set([17, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([17, 18, 13]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 10
ACTION: avl0.insert(int2) 
int2 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10130f5f0> : <type 'instance'>
avl_REF0 = set([17, 18, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
result = avl0.inorder()                                                 # STEP 11
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x10130f5f0> : <type 'instance'>
avl_REF0 = set([17, 18, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.delete(int2)                                                       # STEP 12
ACTION: avl0.delete(int2) 
int2 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10130f5f0> : <type 'instance'>
avl_REF0 = set([17, 18, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([18, 13]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 13
ACTION: avl0.insert(int2) 
int2 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10130f5f0> : <type 'instance'>
avl_REF0 = set([18, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([17, 18, 13]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 14
ACTION: avl0.delete(int0) 
int0 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10130f5f0> : <type 'instance'>
avl_REF0 = set([17, 18, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([17, 13]) : <type 'set'>
==================================================
result = avl0.find(int0)                                                # STEP 15
ACTION: result = avl0.find(int0) 
int0 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10130f5f0> : <type 'instance'>
avl_REF0 = set([17, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
avl0.delete(int0)                                                       # STEP 16
ACTION: avl0.delete(int0) 
int0 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10130f5f0> : <type 'instance'>
avl_REF0 = set([17, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int0 = 15                                                               # STEP 17
ACTION: int0 = 15 
int0 = 18 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
int2 = 6                                                                # STEP 18
ACTION: int2 = 6 
int2 = 17 : <type 'int'>
=> int2 = 6 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 19
ACTION: avl0.insert(int0) 
int0 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10130f5f0> : <type 'instance'>
avl_REF0 = set([17, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([17, 13, 15]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 20
ACTION: avl0.delete(int3) 
int3 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10130f5f0> : <type 'instance'>
avl_REF0 = set([17, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([17, 15]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 21
ACTION: avl0.delete(int3) 
int3 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10130f5f0> : <type 'instance'>
avl_REF0 = set([17, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int1 = 8                                                                # STEP 22
ACTION: int1 = 8 
int1 = None : <type 'NoneType'>
=> int1 = 8 : <type 'int'>
==================================================
int3 = 2                                                                # STEP 23
ACTION: int3 = 2 
int3 = 13 : <type 'int'>
=> int3 = 2 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 24
ACTION: avl0.insert(int1) 
int1 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10130f5f0> : <type 'instance'>
avl_REF0 = set([17, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([8, 17, 15]) : <type 'set'>
==================================================
int1 = 1                                                                # STEP 25
ACTION: int1 = 1 
int1 = 8 : <type 'int'>
=> int1 = 1 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 26
ACTION: avl0.insert(int0) 
int0 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10130f5f0> : <type 'instance'>
avl_REF0 = set([8, 17, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
avl0.delete(int3)                                                       # STEP 27
ACTION: avl0.delete(int3) 
int3 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10130f5f0> : <type 'instance'>
avl_REF0 = set([8, 17, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.insert(int3)                                                       # STEP 28
ACTION: avl0.insert(int3) 
int3 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10130f5f0> : <type 'instance'>
avl_REF0 = set([8, 17, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([8, 17, 2, 15]) : <type 'set'>
==================================================
int0 = 15                                                               # STEP 29
ACTION: int0 = 15 
int0 = 15 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 30
ACTION: avl0.insert(int1) 
int1 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10130f5f0> : <type 'instance'>
avl_REF0 = set([8, 17, 2, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([1, 2, 8, 15, 17]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 31
ACTION: avl0.insert(int1) 
int1 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10130f5f0> : <type 'instance'>
avl_REF0 = set([1, 2, 8, 15, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
result = avl0.find(int3)                                                # STEP 32
ACTION: result = avl0.find(int3) 
int3 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10130f5f0> : <type 'instance'>
avl_REF0 = set([1, 2, 8, 15, 17]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
avl0.insert(int1)                                                       # STEP 33
ACTION: avl0.insert(int1) 
int1 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10130f5f0> : <type 'instance'>
avl_REF0 = set([1, 2, 8, 15, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl0.delete(int0)                                                       # STEP 34
ACTION: avl0.delete(int0) 
int0 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10130f5f0> : <type 'instance'>
avl_REF0 = set([1, 2, 8, 15, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([1, 2, 8, 17]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x101397bd8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 4 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 0
STOPPING TESTING DUE TO TIMEOUT
8.6528673227 PERCENT COVERED
61.6123640537 TOTAL RUNTIME
9 EXECUTED
612 TOTAL TEST OPERATIONS
22.7359998226 TIME SPENT EXECUTING TEST OPERATIONS
0.0670549869537 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
22.8461675644 TIME SPENT CHECKING PROPERTIES
45.582167387 TOTAL TIME SPENT RUNNING SUT
0.00495409965515 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
4 FAILED
0 REPEATS OF FAILURES
4 ACTUAL DISTINCT FAILURES

FAILURE 0
int0 = 8                                                                 # STEP 0
int1 = 10                                                                # STEP 1
int2 = 12                                                                # STEP 2
int3 = 14                                                                # STEP 3
avl0 = avl.AVLTree()                                                     # STEP 4
avl0.delete(int1)                                                        # STEP 5
avl0.insert(int3)                                                        # STEP 6
avl0.insert(int2)                                                        # STEP 7
avl0.insert(int0)                                                        # STEP 8
int1 = 10                                                                # STEP 9
result = avl0.find(int0)                                                # STEP 10
int3 = 7                                                                # STEP 11
avl0.insert(int2)                                                       # STEP 12
int2 = 14                                                               # STEP 13
avl0.delete(int1)                                                       # STEP 14
int1 = 16                                                               # STEP 15
avl0.insert(int0)                                                       # STEP 16
avl0.insert(int2)                                                       # STEP 17
avl0.delete(int1)                                                       # STEP 18
result = avl0.find(int2)                                                # STEP 19
avl0.delete(int1)                                                       # STEP 20
avl0.insert(int3)                                                       # STEP 21
result = avl0.find(int3)                                                # STEP 22
avl0.delete(int3)                                                       # STEP 23
avl0.delete(int3)                                                       # STEP 24
avl0.insert(int2)                                                       # STEP 25
avl0.insert(int0)                                                       # STEP 26
avl0.insert(int0)                                                       # STEP 27
avl0.insert(int0)                                                       # STEP 28
avl0.delete(int0)                                                       # STEP 29
avl0.insert(int3)                                                       # STEP 30
avl0.insert(int0)                                                       # STEP 31
int0 = 16                                                               # STEP 32
avl0.delete(int3)                                                       # STEP 33
avl0 == avl0                                                            # STEP 34
int1 = 6                                                                # STEP 35
avl0.delete(int0)                                                       # STEP 36
avl0.insert(int1)                                                       # STEP 37
avl0 == avl0                                                            # STEP 38
avl0.insert(int3)                                                       # STEP 39
int3 = 17                                                               # STEP 40
avl0.insert(int3)                                                       # STEP 41
int1 = 18                                                               # STEP 42
avl0.insert(int0)                                                       # STEP 43
int2 = 3                                                                # STEP 44
result = avl0.find(int0)                                                # STEP 45
int3 = 8                                                                # STEP 46
result = avl0.find(int2)                                                # STEP 47
result = avl0.inorder()                                                 # STEP 48
int0 = 16                                                               # STEP 49
avl0.delete(int0)                                                       # STEP 50
avl0.insert(int1)                                                       # STEP 51
avl0.delete(int2)                                                       # STEP 52
int1 = 3                                                                # STEP 53
int0 = 4                                                                # STEP 54
int2 = 7                                                                # STEP 55
avl0.insert(int1)                                                       # STEP 56
avl0.insert(int1)                                                       # STEP 57
avl0 == avl0                                                            # STEP 58
result = avl0.inorder()                                                 # STEP 59
avl0.display()                                                          # STEP 60
int1 = 20                                                               # STEP 61
avl0.insert(int0)                                                       # STEP 62
avl0.display()                                                          # STEP 63
int0 = 15                                                               # STEP 64
avl0.delete(int0)                                                       # STEP 65
avl0.insert(int1)                                                       # STEP 66
avl0.insert(int3)                                                       # STEP 67
int0 = 8                                                                # STEP 68
avl0.insert(int3)                                                       # STEP 69
avl0.delete(int3)                                                       # STEP 70
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1013fcd88>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE 1
int3 = 14                                                                # STEP 0
int2 = 19                                                                # STEP 1
int0 = 10                                                                # STEP 2
int1 = 2                                                                 # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
avl1.insert(int3)                                                        # STEP 5
avl1.delete(int3)                                                        # STEP 6
int3 = 19                                                                # STEP 7
avl1.delete(int1)                                                        # STEP 8
avl1.insert(int2)                                                        # STEP 9
avl1.insert(int0)                                                       # STEP 10
avl1.delete(int2)                                                       # STEP 11
int2 = 2                                                                # STEP 12
int1 = 5                                                                # STEP 13
int0 = 11                                                               # STEP 14
result = avl1.find(int1)                                                # STEP 15
int1 = 15                                                               # STEP 16
result = avl1.find(int1)                                                # STEP 17
avl1.insert(int3)                                                       # STEP 18
avl1.delete(int1)                                                       # STEP 19
avl1.delete(int1)                                                       # STEP 20
avl1.delete(int3)                                                       # STEP 21
int1 = 2                                                                # STEP 22
int3 = 20                                                               # STEP 23
avl1.insert(int0)                                                       # STEP 24
avl1.insert(int3)                                                       # STEP 25
avl1.delete(int2)                                                       # STEP 26
avl1.delete(int2)                                                       # STEP 27
avl1.insert(int2)                                                       # STEP 28
avl1.insert(int2)                                                       # STEP 29
int0 = 14                                                               # STEP 30
avl1.delete(int3)                                                       # STEP 31
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x101711638>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE 2
int1 = 13                                                                # STEP 0
int3 = 10                                                                # STEP 1
int0 = 17                                                                # STEP 2
int2 = 11                                                                # STEP 3
avl0 = avl.AVLTree()                                                     # STEP 4
avl0.delete(int2)                                                        # STEP 5
avl0.delete(int1)                                                        # STEP 6
avl0.insert(int3)                                                        # STEP 7
avl0.delete(int2)                                                        # STEP 8
result = avl0.inorder()                                                  # STEP 9
avl0.delete(int0)                                                       # STEP 10
avl0.insert(int2)                                                       # STEP 11
avl0.insert(int1)                                                       # STEP 12
avl0.delete(int3)                                                       # STEP 13
int2 = 12                                                               # STEP 14
avl0.insert(int3)                                                       # STEP 15
avl0.insert(int1)                                                       # STEP 16
avl0.delete(int2)                                                       # STEP 17
avl0.delete(int0)                                                       # STEP 18
int2 = 17                                                               # STEP 19
avl0.insert(int2)                                                       # STEP 20
avl0.delete(int2)                                                       # STEP 21
avl0.insert(int2)                                                       # STEP 22
int1 = 16                                                               # STEP 23
avl0.delete(int2)                                                       # STEP 24
int3 = 11                                                               # STEP 25
int2 = 1                                                                # STEP 26
avl0.delete(int2)                                                       # STEP 27
avl0.insert(int3)                                                       # STEP 28
avl0.insert(int0)                                                       # STEP 29
avl0.delete(int1)                                                       # STEP 30
int0 = 11                                                               # STEP 31
int2 = 8                                                                # STEP 32
int3 = 7                                                                # STEP 33
avl0.insert(int2)                                                       # STEP 34
result = avl0.inorder()                                                 # STEP 35
avl0.delete(int1)                                                       # STEP 36
avl0.delete(int0)                                                       # STEP 37
int1 = 14                                                               # STEP 38
result = avl0.find(int3)                                                # STEP 39
int0 = 6                                                                # STEP 40
avl0.delete(int3)                                                       # STEP 41
avl0.insert(int2)                                                       # STEP 42
avl0.insert(int0)                                                       # STEP 43
avl0.delete(int0)                                                       # STEP 44
avl0.insert(int2)                                                       # STEP 45
avl0.insert(int0)                                                       # STEP 46
avl0.insert(int3)                                                       # STEP 47
int2 = 10                                                               # STEP 48
int0 = 7                                                                # STEP 49
avl0.delete(int2)                                                       # STEP 50
avl0.insert(int0)                                                       # STEP 51
avl0.delete(int0)                                                       # STEP 52
int3 = 4                                                                # STEP 53
avl0.insert(int1)                                                       # STEP 54
avl0.delete(int2)                                                       # STEP 55
result = avl0.inorder()                                                 # STEP 56
avl0.insert(int3)                                                       # STEP 57
avl0.display()                                                          # STEP 58
avl0.insert(int3)                                                       # STEP 59
avl0.delete(int2)                                                       # STEP 60
result = avl0.inorder()                                                 # STEP 61
avl0.insert(int2)                                                       # STEP 62
int1 = 3                                                                # STEP 63
avl0.insert(int3)                                                       # STEP 64
result = avl0.inorder()                                                 # STEP 65
avl0.insert(int1)                                                       # STEP 66
int2 = 6                                                                # STEP 67
avl0.insert(int1)                                                       # STEP 68
avl0.delete(int1)                                                       # STEP 69
int1 = 18                                                               # STEP 70
int0 = 19                                                               # STEP 71
avl0.delete(int1)                                                       # STEP 72
avl0.delete(int2)                                                       # STEP 73
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10139ac68>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE 3
int2 = 17                                                                # STEP 0
avl0 = avl.AVLTree()                                                     # STEP 1
avl0.delete(int2)                                                        # STEP 2
avl0.delete(int2)                                                        # STEP 3
int3 = 13                                                                # STEP 4
avl0.insert(int2)                                                        # STEP 5
int0 = 18                                                                # STEP 6
avl0.insert(int2)                                                        # STEP 7
avl0.insert(int0)                                                        # STEP 8
avl0.insert(int3)                                                        # STEP 9
avl0.insert(int2)                                                       # STEP 10
result = avl0.inorder()                                                 # STEP 11
avl0.delete(int2)                                                       # STEP 12
avl0.insert(int2)                                                       # STEP 13
avl0.delete(int0)                                                       # STEP 14
result = avl0.find(int0)                                                # STEP 15
avl0.delete(int0)                                                       # STEP 16
int0 = 15                                                               # STEP 17
int2 = 6                                                                # STEP 18
avl0.insert(int0)                                                       # STEP 19
avl0.delete(int3)                                                       # STEP 20
avl0.delete(int3)                                                       # STEP 21
int1 = 8                                                                # STEP 22
int3 = 2                                                                # STEP 23
avl0.insert(int1)                                                       # STEP 24
int1 = 1                                                                # STEP 25
avl0.insert(int0)                                                       # STEP 26
avl0.delete(int3)                                                       # STEP 27
avl0.insert(int3)                                                       # STEP 28
int0 = 15                                                               # STEP 29
avl0.insert(int1)                                                       # STEP 30
avl0.insert(int1)                                                       # STEP 31
result = avl0.find(int3)                                                # STEP 32
avl0.insert(int1)                                                       # STEP 33
avl0.delete(int0)                                                       # STEP 34
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x101397bd8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
218 BRANCHES COVERED
163 STATEMENTS COVERED

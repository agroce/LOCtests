Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.61939.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  10 [2:0]
-- < 6 [1:0]
---- < 2 [0:0] L
---- > 7 [0:0] L
-- > 17 [1:-1]
---- > 19 [0:0] L
set([2, 6, 7, 10, 17, 19])
  10 [2:0]
-- < 6 [1:0]
---- < 2 [0:0] L
---- > 7 [0:0] L
-- > 19 [1:0]
---- < 17 [0:0] L
---- > 20 [0:0] L
set([2, 6, 7, 10, 17, 19, 20])
  10 [2:0]
-- < 6 [1:0]
---- < 2 [0:0] L
---- > 7 [0:0] L
-- > 19 [1:0]
---- < 17 [0:0] L
---- > 20 [0:0] L
set([2, 6, 7, 10, 17, 19, 20])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1057e4320>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
Original test has 72 steps

SAVING TEST AS failure.61939.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 6                                                                 # STEP 0
ACTION: int3 = 6 
int3 = None : <type 'NoneType'>
=> int3 = 6 : <type 'int'>
==================================================
int1 = 12                                                                # STEP 1
ACTION: int1 = 12 
int1 = None : <type 'NoneType'>
=> int1 = 12 : <type 'int'>
==================================================
int2 = 18                                                                # STEP 2
ACTION: int2 = 18 
int2 = None : <type 'NoneType'>
=> int2 = 18 : <type 'int'>
==================================================
int0 = 17                                                                # STEP 3
ACTION: int0 = 17 
int0 = None : <type 'NoneType'>
=> int0 = 17 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 4
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x1053e0ab8> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
result = avl0.find(int3)                                                 # STEP 5
ACTION: result = avl0.find(int3) 
int3 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1053e0ab8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
avl0.insert(int3)                                                        # STEP 6
ACTION: avl0.insert(int3) 
int3 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1053e0ab8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([6]) : <type 'set'>
==================================================
result = avl0.find(int3)                                                 # STEP 7
ACTION: result = avl0.find(int3) 
int3 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1053e0ab8> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
avl0.delete(int0)                                                        # STEP 8
ACTION: avl0.delete(int0) 
int0 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1053e0ab8> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.insert(int0)                                                        # STEP 9
ACTION: avl0.insert(int0) 
int0 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1053e0ab8> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([17, 6]) : <type 'set'>
==================================================
result = avl0.find(int2)                                                # STEP 10
ACTION: result = avl0.find(int2) 
int2 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1053e0ab8> : <type 'instance'>
avl_REF0 = set([17, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl0.delete(int2)                                                       # STEP 11
ACTION: avl0.delete(int2) 
int2 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1053e0ab8> : <type 'instance'>
avl_REF0 = set([17, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.insert(int0)                                                       # STEP 12
ACTION: avl0.insert(int0) 
int0 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1053e0ab8> : <type 'instance'>
avl_REF0 = set([17, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
result = avl0.find(int2)                                                # STEP 13
ACTION: result = avl0.find(int2) 
int2 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1053e0ab8> : <type 'instance'>
avl_REF0 = set([17, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl0.delete(int3)                                                       # STEP 14
ACTION: avl0.delete(int3) 
int3 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1053e0ab8> : <type 'instance'>
avl_REF0 = set([17, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([17]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 15
ACTION: avl0.insert(int3) 
int3 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1053e0ab8> : <type 'instance'>
avl_REF0 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([17, 6]) : <type 'set'>
==================================================
int0 = 10                                                               # STEP 16
ACTION: int0 = 10 
int0 = 17 : <type 'int'>
=> int0 = 10 : <type 'int'>
==================================================
int2 = 19                                                               # STEP 17
ACTION: int2 = 19 
int2 = 18 : <type 'int'>
=> int2 = 19 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 18
ACTION: avl0.insert(int3) 
int3 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1053e0ab8> : <type 'instance'>
avl_REF0 = set([17, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
int3 = 7                                                                # STEP 19
ACTION: int3 = 7 
int3 = 6 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 20
ACTION: avl0.insert(int3) 
int3 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1053e0ab8> : <type 'instance'>
avl_REF0 = set([17, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([17, 6, 7]) : <type 'set'>
==================================================
int3 = 11                                                               # STEP 21
ACTION: int3 = 11 
int3 = 7 : <type 'int'>
=> int3 = 11 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 22
ACTION: avl0.delete(int3) 
int3 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1053e0ab8> : <type 'instance'>
avl_REF0 = set([17, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int3 = 7                                                                # STEP 23
ACTION: int3 = 7 
int3 = 11 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 24
ACTION: avl0.insert(int2) 
int2 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1053e0ab8> : <type 'instance'>
avl_REF0 = set([17, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([17, 19, 6, 7]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 25
ACTION: avl0.insert(int3) 
int3 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1053e0ab8> : <type 'instance'>
avl_REF0 = set([17, 19, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
avl0.delete(int3)                                                       # STEP 26
ACTION: avl0.delete(int3) 
int3 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1053e0ab8> : <type 'instance'>
avl_REF0 = set([17, 19, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([17, 19, 6]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 27
ACTION: avl0.insert(int0) 
int0 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1053e0ab8> : <type 'instance'>
avl_REF0 = set([17, 19, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([17, 10, 19, 6]) : <type 'set'>
==================================================
int2 = 20                                                               # STEP 28
ACTION: int2 = 20 
int2 = 19 : <type 'int'>
=> int2 = 20 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 29
ACTION: avl0.delete(int2) 
int2 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1053e0ab8> : <type 'instance'>
avl_REF0 = set([17, 10, 19, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.insert(int0)                                                       # STEP 30
ACTION: avl0.insert(int0) 
int0 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1053e0ab8> : <type 'instance'>
avl_REF0 = set([17, 10, 19, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
result = avl0.inorder()                                                 # STEP 31
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x1053e0ab8> : <type 'instance'>
avl_REF0 = set([17, 10, 19, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int0 = 1                                                                # STEP 32
ACTION: int0 = 1 
int0 = 10 : <type 'int'>
=> int0 = 1 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 33
ACTION: avl0.delete(int0) 
int0 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1053e0ab8> : <type 'instance'>
avl_REF0 = set([17, 10, 19, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.insert(int1)                                                       # STEP 34
ACTION: avl0.insert(int1) 
int1 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1053e0ab8> : <type 'instance'>
avl_REF0 = set([17, 10, 19, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([6, 10, 12, 17, 19]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 35
ACTION: avl0.insert(int3) 
int3 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1053e0ab8> : <type 'instance'>
avl_REF0 = set([6, 10, 12, 17, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([6, 7, 10, 12, 17, 19]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 36
ACTION: avl0.delete(int1) 
int1 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1053e0ab8> : <type 'instance'>
avl_REF0 = set([6, 7, 10, 12, 17, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([6, 7, 10, 17, 19]) : <type 'set'>
==================================================
int0 = 2                                                                # STEP 37
ACTION: int0 = 2 
int0 = 1 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
result = avl0.find(int2)                                                # STEP 38
ACTION: result = avl0.find(int2) 
int2 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1053e0ab8> : <type 'instance'>
avl_REF0 = set([6, 7, 10, 17, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
result = avl0.inorder()                                                 # STEP 39
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x1053e0ab8> : <type 'instance'>
avl_REF0 = set([6, 7, 10, 17, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int0)                                                       # STEP 40
ACTION: avl0.insert(int0) 
int0 = 2 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1053e0ab8> : <type 'instance'>
avl_REF0 = set([6, 7, 10, 17, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([2, 6, 7, 10, 17, 19]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 41
ACTION: avl0.delete(int2) 
int2 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1053e0ab8> : <type 'instance'>
avl_REF0 = set([2, 6, 7, 10, 17, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.insert(int3)                                                       # STEP 42
ACTION: avl0.insert(int3) 
int3 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1053e0ab8> : <type 'instance'>
avl_REF0 = set([2, 6, 7, 10, 17, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
avl0.display()                                                          # STEP 43
ACTION: avl0.display() 
avl0 = <avlbug2.AVLTree instance at 0x1053e0ab8> : <type 'instance'>
avl_REF0 = set([2, 6, 7, 10, 17, 19]) : <type 'set'>
  10 [2:0]
-- < 6 [1:0]
---- < 2 [0:0] L
---- > 7 [0:0] L
-- > 17 [1:-1]
---- > 19 [0:0] L
REFERENCE ACTION: print(avl_REF0) 
set([2, 6, 7, 10, 17, 19])
==================================================
avl0.insert(int2)                                                       # STEP 44
ACTION: avl0.insert(int2) 
int2 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1053e0ab8> : <type 'instance'>
avl_REF0 = set([2, 6, 7, 10, 17, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([2, 6, 7, 10, 17, 19, 20]) : <type 'set'>
==================================================
int3 = 8                                                                # STEP 45
ACTION: int3 = 8 
int3 = 7 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
avl0.display()                                                          # STEP 46
ACTION: avl0.display() 
avl0 = <avlbug2.AVLTree instance at 0x1053e0ab8> : <type 'instance'>
avl_REF0 = set([2, 6, 7, 10, 17, 19, 20]) : <type 'set'>
  10 [2:0]
-- < 6 [1:0]
---- < 2 [0:0] L
---- > 7 [0:0] L
-- > 19 [1:0]
---- < 17 [0:0] L
---- > 20 [0:0] L
REFERENCE ACTION: print(avl_REF0) 
set([2, 6, 7, 10, 17, 19, 20])
==================================================
result = avl0.inorder()                                                 # STEP 47
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x1053e0ab8> : <type 'instance'>
avl_REF0 = set([2, 6, 7, 10, 17, 19, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.delete(int3)                                                       # STEP 48
ACTION: avl0.delete(int3) 
int3 = 8 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1053e0ab8> : <type 'instance'>
avl_REF0 = set([2, 6, 7, 10, 17, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.insert(int2)                                                       # STEP 49
ACTION: avl0.insert(int2) 
int2 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1053e0ab8> : <type 'instance'>
avl_REF0 = set([2, 6, 7, 10, 17, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl0.delete(int0)                                                       # STEP 50
ACTION: avl0.delete(int0) 
int0 = 2 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1053e0ab8> : <type 'instance'>
avl_REF0 = set([2, 6, 7, 10, 17, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([6, 7, 10, 17, 19, 20]) : <type 'set'>
==================================================
avl0 == avl0                                                            # STEP 51
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x1053e0ab8> : <type 'instance'>
avl_REF0 = set([6, 7, 10, 17, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
result = avl0.inorder()                                                 # STEP 52
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x1053e0ab8> : <type 'instance'>
avl_REF0 = set([6, 7, 10, 17, 19, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int0)                                                       # STEP 53
ACTION: avl0.insert(int0) 
int0 = 2 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1053e0ab8> : <type 'instance'>
avl_REF0 = set([6, 7, 10, 17, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([2, 6, 7, 10, 17, 19, 20]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 54
ACTION: avl0.insert(int2) 
int2 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1053e0ab8> : <type 'instance'>
avl_REF0 = set([2, 6, 7, 10, 17, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
int3 = 11                                                               # STEP 55
ACTION: int3 = 11 
int3 = 8 : <type 'int'>
=> int3 = 11 : <type 'int'>
==================================================
avl0.display()                                                          # STEP 56
ACTION: avl0.display() 
avl0 = <avlbug2.AVLTree instance at 0x1053e0ab8> : <type 'instance'>
avl_REF0 = set([2, 6, 7, 10, 17, 19, 20]) : <type 'set'>
  10 [2:0]
-- < 6 [1:0]
---- < 2 [0:0] L
---- > 7 [0:0] L
-- > 19 [1:0]
---- < 17 [0:0] L
---- > 20 [0:0] L
REFERENCE ACTION: print(avl_REF0) 
set([2, 6, 7, 10, 17, 19, 20])
==================================================
int2 = 20                                                               # STEP 57
ACTION: int2 = 20 
int2 = 20 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 58
ACTION: avl0.insert(int3) 
int3 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1053e0ab8> : <type 'instance'>
avl_REF0 = set([2, 6, 7, 10, 17, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([2, 6, 7, 10, 11, 17, 19, 20]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 59
ACTION: avl0.delete(int3) 
int3 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1053e0ab8> : <type 'instance'>
avl_REF0 = set([2, 6, 7, 10, 11, 17, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([2, 6, 7, 10, 17, 19, 20]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 60
ACTION: avl0.delete(int3) 
int3 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1053e0ab8> : <type 'instance'>
avl_REF0 = set([2, 6, 7, 10, 17, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.insert(int3)                                                       # STEP 61
ACTION: avl0.insert(int3) 
int3 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1053e0ab8> : <type 'instance'>
avl_REF0 = set([2, 6, 7, 10, 17, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([2, 6, 7, 10, 11, 17, 19, 20]) : <type 'set'>
==================================================
result = avl0.find(int0)                                                # STEP 62
ACTION: result = avl0.find(int0) 
int0 = 2 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1053e0ab8> : <type 'instance'>
avl_REF0 = set([2, 6, 7, 10, 11, 17, 19, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
int3 = 6                                                                # STEP 63
ACTION: int3 = 6 
int3 = 11 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
int1 = 3                                                                # STEP 64
ACTION: int1 = 3 
int1 = 12 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
int0 = 3                                                                # STEP 65
ACTION: int0 = 3 
int0 = 2 : <type 'int'>
=> int0 = 3 : <type 'int'>
==================================================
result = avl0.find(int2)                                                # STEP 66
ACTION: result = avl0.find(int2) 
int2 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1053e0ab8> : <type 'instance'>
avl_REF0 = set([2, 6, 7, 10, 11, 17, 19, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl0.delete(int0)                                                       # STEP 67
ACTION: avl0.delete(int0) 
int0 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1053e0ab8> : <type 'instance'>
avl_REF0 = set([2, 6, 7, 10, 11, 17, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
result = avl0.inorder()                                                 # STEP 68
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x1053e0ab8> : <type 'instance'>
avl_REF0 = set([2, 6, 7, 10, 11, 17, 19, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int3)                                                       # STEP 69
ACTION: avl0.insert(int3) 
int3 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1053e0ab8> : <type 'instance'>
avl_REF0 = set([2, 6, 7, 10, 11, 17, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
avl0.delete(int3)                                                       # STEP 70
ACTION: avl0.delete(int3) 
int3 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1053e0ab8> : <type 'instance'>
avl_REF0 = set([2, 6, 7, 10, 11, 17, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([2, 7, 10, 11, 17, 19, 20]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 71
ACTION: avl0.delete(int2) 
int2 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1053e0ab8> : <type 'instance'>
avl_REF0 = set([2, 7, 10, 11, 17, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([2, 7, 10, 11, 17, 19]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1053b2998>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
  8 [2:0]
-- < 5 [1:0]
---- < 2 [0:0] L
---- > 6 [0:0] L
-- > 20 [1:1]
---- < 18 [0:0] L
set([2, 5, 6, 8, 18, 20])
  8 [2:0]
-- < 5 [1:0]
---- < 2 [0:0] L
---- > 6 [0:0] L
-- > 20 [1:1]
---- < 18 [0:0] L
set([2, 5, 6, 8, 18, 20])
  8 [2:0]
-- < 5 [1:0]
---- < 2 [0:0] L
---- > 6 [0:0] L
-- > 20 [1:1]
---- < 18 [0:0] L
set([2, 5, 6, 8, 18, 20])
  8 [2:0]
-- < 5 [1:0]
---- < 2 [0:0] L
---- > 6 [0:0] L
-- > 20 [1:1]
---- < 18 [0:0] L
set([2, 5, 6, 8, 18, 20])
  8 [2:0]
-- < 5 [1:0]
---- < 2 [0:0] L
---- > 6 [0:0] L
-- > 20 [1:1]
---- < 18 [0:0] L
set([2, 5, 6, 8, 18, 20])
TEST #3 STEP #52 (0:00:30.034139) Mon May  1 17:20:51 2017 [ 156 stmts 206 branches ]
  17 [2:0]
-- < 3 [1:0]
---- < 2 [0:0] L
---- > 16 [0:0] L
-- > 18 [1:-1]
---- > 20 [0:0] L
set([2, 3, 16, 17, 18, 20])
  17 [2:0]
-- < 3 [1:0]
---- < 2 [0:0] L
---- > 16 [0:0] L
-- > 18 [1:-1]
---- > 20 [0:0] L
set([2, 3, 16, 17, 18, 20])
  17 [2:0]
-- < 15 [1:0]
---- < 2 [0:0] L
---- > 16 [0:0] L
-- > 18 [1:-1]
---- > 20 [0:0] L
set([2, 15, 16, 17, 18, 20])
  17 [2:0]
-- < 15 [1:0]
---- < 2 [0:0] L
---- > 16 [0:0] L
-- > 18 [1:-1]
---- > 20 [0:0] L
set([2, 15, 16, 17, 18, 20])
  17 [2:0]
-- < 15 [1:0]
---- < 2 [0:0] L
---- > 16 [0:0] L
-- > 18 [1:-1]
---- > 20 [0:0] L
set([2, 15, 16, 17, 18, 20])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105236fc8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
Original test has 38 steps

SAVING TEST AS failure.61939.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 7                                                                 # STEP 0
ACTION: int0 = 7 
int0 = None : <type 'NoneType'>
=> int0 = 7 : <type 'int'>
==================================================
int3 = 10                                                                # STEP 1
ACTION: int3 = 10 
int3 = None : <type 'NoneType'>
=> int3 = 10 : <type 'int'>
==================================================
int2 = 15                                                                # STEP 2
ACTION: int2 = 15 
int2 = None : <type 'NoneType'>
=> int2 = 15 : <type 'int'>
==================================================
int1 = 15                                                                # STEP 3
ACTION: int1 = 15 
int1 = None : <type 'NoneType'>
=> int1 = 15 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x1056c5758> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl2.find(int3)                                                 # STEP 5
ACTION: result = avl2.find(int3) 
int3 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1056c5758> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
int3 = 20                                                                # STEP 6
ACTION: int3 = 20 
int3 = 10 : <type 'int'>
=> int3 = 20 : <type 'int'>
==================================================
avl2.insert(int3)                                                        # STEP 7
ACTION: avl2.insert(int3) 
int3 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1056c5758> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([20]) : <type 'set'>
==================================================
avl2.insert(int0)                                                        # STEP 8
ACTION: avl2.insert(int0) 
int0 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1056c5758> : <type 'instance'>
avl_REF2 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([20, 7]) : <type 'set'>
==================================================
int3 = 4                                                                 # STEP 9
ACTION: int3 = 4 
int3 = 20 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 10
ACTION: avl2.delete(int1) 
int1 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1056c5758> : <type 'instance'>
avl_REF2 = set([20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int0 = 16                                                               # STEP 11
ACTION: int0 = 16 
int0 = 7 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 12
ACTION: avl2.delete(int0) 
int0 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1056c5758> : <type 'instance'>
avl_REF2 = set([20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
result = avl2.find(int1)                                                # STEP 13
ACTION: result = avl2.find(int1) 
int1 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1056c5758> : <type 'instance'>
avl_REF2 = set([20, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl2.delete(int3)                                                       # STEP 14
ACTION: avl2.delete(int3) 
int3 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1056c5758> : <type 'instance'>
avl_REF2 = set([20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.delete(int1)                                                       # STEP 15
ACTION: avl2.delete(int1) 
int1 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1056c5758> : <type 'instance'>
avl_REF2 = set([20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.delete(int2)                                                       # STEP 16
ACTION: avl2.delete(int2) 
int2 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1056c5758> : <type 'instance'>
avl_REF2 = set([20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.insert(int2)                                                       # STEP 17
ACTION: avl2.insert(int2) 
int2 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1056c5758> : <type 'instance'>
avl_REF2 = set([20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([15, 20, 7]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 18
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x1056c5758> : <type 'instance'>
avl_REF2 = set([15, 20, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int0)                                                       # STEP 19
ACTION: avl2.insert(int0) 
int0 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1056c5758> : <type 'instance'>
avl_REF2 = set([15, 20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([16, 15, 20, 7]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 20
ACTION: avl2.delete(int0) 
int0 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1056c5758> : <type 'instance'>
avl_REF2 = set([16, 15, 20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([15, 20, 7]) : <type 'set'>
==================================================
avl2 == avl2                                                            # STEP 21
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x1056c5758> : <type 'instance'>
avl_REF2 = set([15, 20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl2.delete(int0)                                                       # STEP 22
ACTION: avl2.delete(int0) 
int0 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1056c5758> : <type 'instance'>
avl_REF2 = set([15, 20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.delete(int2)                                                       # STEP 23
ACTION: avl2.delete(int2) 
int2 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1056c5758> : <type 'instance'>
avl_REF2 = set([15, 20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([20, 7]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 24
ACTION: avl2.delete(int0) 
int0 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1056c5758> : <type 'instance'>
avl_REF2 = set([20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int1 = 20                                                               # STEP 25
ACTION: int1 = 20 
int1 = 15 : <type 'int'>
=> int1 = 20 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 26
ACTION: avl2.insert(int1) 
int1 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1056c5758> : <type 'instance'>
avl_REF2 = set([20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
int0 = 17                                                               # STEP 27
ACTION: int0 = 17 
int0 = 16 : <type 'int'>
=> int0 = 17 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 28
ACTION: avl2.delete(int3) 
int3 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1056c5758> : <type 'instance'>
avl_REF2 = set([20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2 == avl2                                                            # STEP 29
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x1056c5758> : <type 'instance'>
avl_REF2 = set([20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
int1 = 10                                                               # STEP 30
ACTION: int1 = 10 
int1 = 20 : <type 'int'>
=> int1 = 10 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 31
ACTION: avl2.insert(int0) 
int0 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1056c5758> : <type 'instance'>
avl_REF2 = set([20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([17, 20, 7]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 32
ACTION: avl2.delete(int3) 
int3 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1056c5758> : <type 'instance'>
avl_REF2 = set([17, 20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int2 = 5                                                                # STEP 33
ACTION: int2 = 5 
int2 = 15 : <type 'int'>
=> int2 = 5 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 34
ACTION: avl2.insert(int3) 
int3 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1056c5758> : <type 'instance'>
avl_REF2 = set([17, 20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([4, 7, 17, 20]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 35
ACTION: avl2.delete(int2) 
int2 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1056c5758> : <type 'instance'>
avl_REF2 = set([4, 7, 17, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2 == avl2                                                            # STEP 36
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x1056c5758> : <type 'instance'>
avl_REF2 = set([4, 7, 17, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl2.delete(int0)                                                       # STEP 37
ACTION: avl2.delete(int0) 
int0 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1056c5758> : <type 'instance'>
avl_REF2 = set([4, 7, 17, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([4, 7, 20]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10547a0e0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10522f680>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
Original test has 48 steps

SAVING TEST AS failure.61939.test.2
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 15                                                                # STEP 0
ACTION: int1 = 15 
int1 = None : <type 'NoneType'>
=> int1 = 15 : <type 'int'>
==================================================
int0 = 19                                                                # STEP 1
ACTION: int0 = 19 
int0 = None : <type 'NoneType'>
=> int0 = 19 : <type 'int'>
==================================================
int2 = 16                                                                # STEP 2
ACTION: int2 = 16 
int2 = None : <type 'NoneType'>
=> int2 = 16 : <type 'int'>
==================================================
int3 = 1                                                                 # STEP 3
ACTION: int3 = 1 
int3 = None : <type 'NoneType'>
=> int3 = 1 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x10522fdd0> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
result = avl1.find(int3)                                                 # STEP 5
ACTION: result = avl1.find(int3) 
int3 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10522fdd0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl1.insert(int0)                                                        # STEP 6
ACTION: avl1.insert(int0) 
int0 = 19 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10522fdd0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([19]) : <type 'set'>
==================================================
avl1.delete(int0)                                                        # STEP 7
ACTION: avl1.delete(int0) 
int0 = 19 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10522fdd0> : <type 'instance'>
avl_REF1 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.insert(int3)                                                        # STEP 8
ACTION: avl1.insert(int3) 
int3 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10522fdd0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([1]) : <type 'set'>
==================================================
avl1.insert(int1)                                                        # STEP 9
ACTION: avl1.insert(int1) 
int1 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10522fdd0> : <type 'instance'>
avl_REF1 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([1, 15]) : <type 'set'>
==================================================
int0 = 10                                                               # STEP 10
ACTION: int0 = 10 
int0 = 19 : <type 'int'>
=> int0 = 10 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 11
ACTION: avl1.insert(int1) 
int1 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10522fdd0> : <type 'instance'>
avl_REF1 = set([1, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl1.insert(int1)                                                       # STEP 12
ACTION: avl1.insert(int1) 
int1 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10522fdd0> : <type 'instance'>
avl_REF1 = set([1, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl1.insert(int1)                                                       # STEP 13
ACTION: avl1.insert(int1) 
int1 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10522fdd0> : <type 'instance'>
avl_REF1 = set([1, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
result = avl1.inorder()                                                 # STEP 14
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x10522fdd0> : <type 'instance'>
avl_REF1 = set([1, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.delete(int3)                                                       # STEP 15
ACTION: avl1.delete(int3) 
int3 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10522fdd0> : <type 'instance'>
avl_REF1 = set([1, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([15]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 16
ACTION: avl1.delete(int1) 
int1 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10522fdd0> : <type 'instance'>
avl_REF1 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 17
ACTION: avl1.delete(int1) 
int1 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10522fdd0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.delete(int0)                                                       # STEP 18
ACTION: avl1.delete(int0) 
int0 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10522fdd0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1 == avl1                                                            # STEP 19
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x10522fdd0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.delete(int3)                                                       # STEP 20
ACTION: avl1.delete(int3) 
int3 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10522fdd0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.insert(int2)                                                       # STEP 21
ACTION: avl1.insert(int2) 
int2 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10522fdd0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([16]) : <type 'set'>
==================================================
result = avl1.find(int2)                                                # STEP 22
ACTION: result = avl1.find(int2) 
int2 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10522fdd0> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl1.delete(int0)                                                       # STEP 23
ACTION: avl1.delete(int0) 
int0 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10522fdd0> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.delete(int3)                                                       # STEP 24
ACTION: avl1.delete(int3) 
int3 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10522fdd0> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.delete(int0)                                                       # STEP 25
ACTION: avl1.delete(int0) 
int0 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10522fdd0> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int3 = 14                                                               # STEP 26
ACTION: int3 = 14 
int3 = 1 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 27
ACTION: avl1.delete(int3) 
int3 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10522fdd0> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int2 = 8                                                                # STEP 28
ACTION: int2 = 8 
int2 = 16 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
int1 = 5                                                                # STEP 29
ACTION: int1 = 5 
int1 = 15 : <type 'int'>
=> int1 = 5 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 30
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x10522fdd0> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int2)                                                       # STEP 31
ACTION: avl1.insert(int2) 
int2 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10522fdd0> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([16, 8]) : <type 'set'>
==================================================
int3 = 11                                                               # STEP 32
ACTION: int3 = 11 
int3 = 14 : <type 'int'>
=> int3 = 11 : <type 'int'>
==================================================
result = avl1.find(int0)                                                # STEP 33
ACTION: result = avl1.find(int0) 
int0 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10522fdd0> : <type 'instance'>
avl_REF1 = set([16, 8]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl1.insert(int3)                                                       # STEP 34
ACTION: avl1.insert(int3) 
int3 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10522fdd0> : <type 'instance'>
avl_REF1 = set([16, 8]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([16, 8, 11]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 35
ACTION: avl1.insert(int1) 
int1 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10522fdd0> : <type 'instance'>
avl_REF1 = set([16, 8, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([16, 8, 11, 5]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 36
ACTION: avl1.insert(int0) 
int0 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10522fdd0> : <type 'instance'>
avl_REF1 = set([16, 8, 11, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([5, 8, 10, 11, 16]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 37
ACTION: avl1.insert(int2) 
int2 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10522fdd0> : <type 'instance'>
avl_REF1 = set([5, 8, 10, 11, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
avl1.delete(int2)                                                       # STEP 38
ACTION: avl1.delete(int2) 
int2 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10522fdd0> : <type 'instance'>
avl_REF1 = set([5, 8, 10, 11, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([5, 10, 11, 16]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 39
ACTION: avl1.insert(int0) 
int0 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10522fdd0> : <type 'instance'>
avl_REF1 = set([5, 10, 11, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
result = avl1.inorder()                                                 # STEP 40
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x10522fdd0> : <type 'instance'>
avl_REF1 = set([5, 10, 11, 16]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int2 = 20                                                               # STEP 41
ACTION: int2 = 20 
int2 = 8 : <type 'int'>
=> int2 = 20 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 42
ACTION: avl1.delete(int2) 
int2 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10522fdd0> : <type 'instance'>
avl_REF1 = set([5, 10, 11, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
result = avl1.inorder()                                                 # STEP 43
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x10522fdd0> : <type 'instance'>
avl_REF1 = set([5, 10, 11, 16]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int0 = 3                                                                # STEP 44
ACTION: int0 = 3 
int0 = 10 : <type 'int'>
=> int0 = 3 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 45
ACTION: avl1.insert(int1) 
int1 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10522fdd0> : <type 'instance'>
avl_REF1 = set([5, 10, 11, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl1.delete(int2)                                                       # STEP 46
ACTION: avl1.delete(int2) 
int2 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10522fdd0> : <type 'instance'>
avl_REF1 = set([5, 10, 11, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.delete(int3)                                                       # STEP 47
ACTION: avl1.delete(int3) 
int3 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10522fdd0> : <type 'instance'>
avl_REF1 = set([5, 10, 11, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([5, 10, 16]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10562a128>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 3 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 0
STOPPING TESTING DUE TO TIMEOUT
8.15438189205 PERCENT COVERED
62.6525540352 TOTAL RUNTIME
7 EXECUTED
458 TOTAL TEST OPERATIONS
23.1257321835 TIME SPENT EXECUTING TEST OPERATIONS
0.0553994178772 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
23.3132066727 TIME SPENT CHECKING PROPERTIES
46.4389388561 TOTAL TIME SPENT RUNNING SUT
0.00420427322388 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
3 FAILED
0 REPEATS OF FAILURES
3 ACTUAL DISTINCT FAILURES

FAILURE 0
int3 = 6                                                                 # STEP 0
int1 = 12                                                                # STEP 1
int2 = 18                                                                # STEP 2
int0 = 17                                                                # STEP 3
avl0 = avl.AVLTree()                                                     # STEP 4
result = avl0.find(int3)                                                 # STEP 5
avl0.insert(int3)                                                        # STEP 6
result = avl0.find(int3)                                                 # STEP 7
avl0.delete(int0)                                                        # STEP 8
avl0.insert(int0)                                                        # STEP 9
result = avl0.find(int2)                                                # STEP 10
avl0.delete(int2)                                                       # STEP 11
avl0.insert(int0)                                                       # STEP 12
result = avl0.find(int2)                                                # STEP 13
avl0.delete(int3)                                                       # STEP 14
avl0.insert(int3)                                                       # STEP 15
int0 = 10                                                               # STEP 16
int2 = 19                                                               # STEP 17
avl0.insert(int3)                                                       # STEP 18
int3 = 7                                                                # STEP 19
avl0.insert(int3)                                                       # STEP 20
int3 = 11                                                               # STEP 21
avl0.delete(int3)                                                       # STEP 22
int3 = 7                                                                # STEP 23
avl0.insert(int2)                                                       # STEP 24
avl0.insert(int3)                                                       # STEP 25
avl0.delete(int3)                                                       # STEP 26
avl0.insert(int0)                                                       # STEP 27
int2 = 20                                                               # STEP 28
avl0.delete(int2)                                                       # STEP 29
avl0.insert(int0)                                                       # STEP 30
result = avl0.inorder()                                                 # STEP 31
int0 = 1                                                                # STEP 32
avl0.delete(int0)                                                       # STEP 33
avl0.insert(int1)                                                       # STEP 34
avl0.insert(int3)                                                       # STEP 35
avl0.delete(int1)                                                       # STEP 36
int0 = 2                                                                # STEP 37
result = avl0.find(int2)                                                # STEP 38
result = avl0.inorder()                                                 # STEP 39
avl0.insert(int0)                                                       # STEP 40
avl0.delete(int2)                                                       # STEP 41
avl0.insert(int3)                                                       # STEP 42
avl0.display()                                                          # STEP 43
avl0.insert(int2)                                                       # STEP 44
int3 = 8                                                                # STEP 45
avl0.display()                                                          # STEP 46
result = avl0.inorder()                                                 # STEP 47
avl0.delete(int3)                                                       # STEP 48
avl0.insert(int2)                                                       # STEP 49
avl0.delete(int0)                                                       # STEP 50
avl0 == avl0                                                            # STEP 51
result = avl0.inorder()                                                 # STEP 52
avl0.insert(int0)                                                       # STEP 53
avl0.insert(int2)                                                       # STEP 54
int3 = 11                                                               # STEP 55
avl0.display()                                                          # STEP 56
int2 = 20                                                               # STEP 57
avl0.insert(int3)                                                       # STEP 58
avl0.delete(int3)                                                       # STEP 59
avl0.delete(int3)                                                       # STEP 60
avl0.insert(int3)                                                       # STEP 61
result = avl0.find(int0)                                                # STEP 62
int3 = 6                                                                # STEP 63
int1 = 3                                                                # STEP 64
int0 = 3                                                                # STEP 65
result = avl0.find(int2)                                                # STEP 66
avl0.delete(int0)                                                       # STEP 67
result = avl0.inorder()                                                 # STEP 68
avl0.insert(int3)                                                       # STEP 69
avl0.delete(int3)                                                       # STEP 70
avl0.delete(int2)                                                       # STEP 71
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1053b2998>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE 1
int0 = 7                                                                 # STEP 0
int3 = 10                                                                # STEP 1
int2 = 15                                                                # STEP 2
int1 = 15                                                                # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
result = avl2.find(int3)                                                 # STEP 5
int3 = 20                                                                # STEP 6
avl2.insert(int3)                                                        # STEP 7
avl2.insert(int0)                                                        # STEP 8
int3 = 4                                                                 # STEP 9
avl2.delete(int1)                                                       # STEP 10
int0 = 16                                                               # STEP 11
avl2.delete(int0)                                                       # STEP 12
result = avl2.find(int1)                                                # STEP 13
avl2.delete(int3)                                                       # STEP 14
avl2.delete(int1)                                                       # STEP 15
avl2.delete(int2)                                                       # STEP 16
avl2.insert(int2)                                                       # STEP 17
result = avl2.inorder()                                                 # STEP 18
avl2.insert(int0)                                                       # STEP 19
avl2.delete(int0)                                                       # STEP 20
avl2 == avl2                                                            # STEP 21
avl2.delete(int0)                                                       # STEP 22
avl2.delete(int2)                                                       # STEP 23
avl2.delete(int0)                                                       # STEP 24
int1 = 20                                                               # STEP 25
avl2.insert(int1)                                                       # STEP 26
int0 = 17                                                               # STEP 27
avl2.delete(int3)                                                       # STEP 28
avl2 == avl2                                                            # STEP 29
int1 = 10                                                               # STEP 30
avl2.insert(int0)                                                       # STEP 31
avl2.delete(int3)                                                       # STEP 32
int2 = 5                                                                # STEP 33
avl2.insert(int3)                                                       # STEP 34
avl2.delete(int2)                                                       # STEP 35
avl2 == avl2                                                            # STEP 36
avl2.delete(int0)                                                       # STEP 37
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10547a0e0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE 2
int1 = 15                                                                # STEP 0
int0 = 19                                                                # STEP 1
int2 = 16                                                                # STEP 2
int3 = 1                                                                 # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
result = avl1.find(int3)                                                 # STEP 5
avl1.insert(int0)                                                        # STEP 6
avl1.delete(int0)                                                        # STEP 7
avl1.insert(int3)                                                        # STEP 8
avl1.insert(int1)                                                        # STEP 9
int0 = 10                                                               # STEP 10
avl1.insert(int1)                                                       # STEP 11
avl1.insert(int1)                                                       # STEP 12
avl1.insert(int1)                                                       # STEP 13
result = avl1.inorder()                                                 # STEP 14
avl1.delete(int3)                                                       # STEP 15
avl1.delete(int1)                                                       # STEP 16
avl1.delete(int1)                                                       # STEP 17
avl1.delete(int0)                                                       # STEP 18
avl1 == avl1                                                            # STEP 19
avl1.delete(int3)                                                       # STEP 20
avl1.insert(int2)                                                       # STEP 21
result = avl1.find(int2)                                                # STEP 22
avl1.delete(int0)                                                       # STEP 23
avl1.delete(int3)                                                       # STEP 24
avl1.delete(int0)                                                       # STEP 25
int3 = 14                                                               # STEP 26
avl1.delete(int3)                                                       # STEP 27
int2 = 8                                                                # STEP 28
int1 = 5                                                                # STEP 29
result = avl1.inorder()                                                 # STEP 30
avl1.insert(int2)                                                       # STEP 31
int3 = 11                                                               # STEP 32
result = avl1.find(int0)                                                # STEP 33
avl1.insert(int3)                                                       # STEP 34
avl1.insert(int1)                                                       # STEP 35
avl1.insert(int0)                                                       # STEP 36
avl1.insert(int2)                                                       # STEP 37
avl1.delete(int2)                                                       # STEP 38
avl1.insert(int0)                                                       # STEP 39
result = avl1.inorder()                                                 # STEP 40
int2 = 20                                                               # STEP 41
avl1.delete(int2)                                                       # STEP 42
result = avl1.inorder()                                                 # STEP 43
int0 = 3                                                                # STEP 44
avl1.insert(int1)                                                       # STEP 45
avl1.delete(int2)                                                       # STEP 46
avl1.delete(int3)                                                       # STEP 47
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10562a128>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
212 BRANCHES COVERED
160 STATEMENTS COVERED

Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=True, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.40362.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
TEST #4 STEP #55 (0:00:30.010418) Mon May  1 02:16:51 2017 [ 124 stmts 167 branches ]
  7 [2:0]
-- < 3 [1:0]
---- < 2 [0:0] L
---- > 6 [0:0] L
-- > 15 [1:0]
---- < 10 [0:0] L
---- > 18 [0:0] L
set([2, 3, 6, 7, 10, 15, 18])
  11 [2:0]
-- < 9 [1:1]
---- < 7 [0:0] L
-- > 14 [1:0]
---- < 13 [0:0] L
---- > 15 [0:0] L
set([7, 9, 11, 13, 14, 15])
  11 [2:0]
-- < 7 [1:0]
---- < 6 [0:0] L
---- > 9 [0:0] L
-- > 14 [1:0]
---- < 13 [0:0] L
---- > 15 [0:0] L
set([6, 7, 9, 11, 13, 14, 15])
  11 [3:1]
-- < 7 [2:1]
---- < 6 [1:1]
------ < 5 [0:0] L
---- > 9 [0:0] L
-- > 14 [1:0]
---- < 13 [0:0] L
---- > 15 [0:0] L
set([5, 6, 7, 9, 11, 13, 14, 15])
  8 [2:0]
-- < 3 [1:1]
---- < 2 [0:0] L
-- > 18 [1:0]
---- < 10 [0:0] L
---- > 20 [0:0] L
set([2, 3, 8, 10, 18, 20])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104388290>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
Original test has 64 steps

SAVING TEST AS failure.40362.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 4                                                                 # STEP 0
ACTION: int0 = 4 
int0 = None : <type 'NoneType'>
=> int0 = 4 : <type 'int'>
==================================================
int3 = 1                                                                 # STEP 1
ACTION: int3 = 1 
int3 = None : <type 'NoneType'>
=> int3 = 1 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 2
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x1044592d8> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int2 = 3                                                                 # STEP 3
ACTION: int2 = 3 
int2 = None : <type 'NoneType'>
=> int2 = 3 : <type 'int'>
==================================================
avl2.delete(int2)                                                        # STEP 4
ACTION: avl2.delete(int2) 
int2 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1044592d8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl0 = avl.AVLTree()                                                     # STEP 5
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x10451abd8> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int1 = 16                                                                # STEP 6
ACTION: int1 = 16 
int1 = None : <type 'NoneType'>
=> int1 = 16 : <type 'int'>
==================================================
avl2.insert(int0)                                                        # STEP 7
ACTION: avl2.insert(int0) 
int0 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1044592d8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([4]) : <type 'set'>
==================================================
avl0.insert(int2)                                                        # STEP 8
ACTION: avl0.insert(int2) 
int2 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10451abd8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([3]) : <type 'set'>
==================================================
avl0.insert(int1)                                                        # STEP 9
ACTION: avl0.insert(int1) 
int1 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10451abd8> : <type 'instance'>
avl_REF0 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([16, 3]) : <type 'set'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 10
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x10445abd8> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int0 = 10                                                               # STEP 11
ACTION: int0 = 10 
int0 = 4 : <type 'int'>
=> int0 = 10 : <type 'int'>
==================================================
int2 = 14                                                               # STEP 12
ACTION: int2 = 14 
int2 = 3 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 13
ACTION: avl0.delete(int3) 
int3 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10451abd8> : <type 'instance'>
avl_REF0 = set([16, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int1 = 5                                                                # STEP 14
ACTION: int1 = 5 
int1 = 16 : <type 'int'>
=> int1 = 5 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 15
ACTION: avl0.delete(int1) 
int1 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10451abd8> : <type 'instance'>
avl_REF0 = set([16, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl2.insert(int0)                                                       # STEP 16
ACTION: avl2.insert(int0) 
int0 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1044592d8> : <type 'instance'>
avl_REF2 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([10, 4]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 17
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x1044592d8> : <type 'instance'>
avl_REF2 = set([10, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl1.insert(int0)                                                       # STEP 18
ACTION: avl1.insert(int0) 
int0 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10445abd8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([10]) : <type 'set'>
==================================================
result = avl2.find(int3)                                                # STEP 19
ACTION: result = avl2.find(int3) 
int3 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1044592d8> : <type 'instance'>
avl_REF2 = set([10, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl2.insert(int0)                                                       # STEP 20
ACTION: avl2.insert(int0) 
int0 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1044592d8> : <type 'instance'>
avl_REF2 = set([10, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl2.insert(int3)                                                       # STEP 21
ACTION: avl2.insert(int3) 
int3 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1044592d8> : <type 'instance'>
avl_REF2 = set([10, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([1, 10, 4]) : <type 'set'>
==================================================
int3 = 10                                                               # STEP 22
ACTION: int3 = 10 
int3 = 1 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
int1 = 2                                                                # STEP 23
ACTION: int1 = 2 
int1 = 5 : <type 'int'>
=> int1 = 2 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 24
ACTION: avl1.delete(int1) 
int1 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10445abd8> : <type 'instance'>
avl_REF1 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl2.delete(int2)                                                       # STEP 25
ACTION: avl2.delete(int2) 
int2 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1044592d8> : <type 'instance'>
avl_REF2 = set([1, 10, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.delete(int3)                                                       # STEP 26
ACTION: avl2.delete(int3) 
int3 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1044592d8> : <type 'instance'>
avl_REF2 = set([1, 10, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([1, 4]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 27
ACTION: avl1.insert(int1) 
int1 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10445abd8> : <type 'instance'>
avl_REF1 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([10, 2]) : <type 'set'>
==================================================
int3 = 8                                                                # STEP 28
ACTION: int3 = 8 
int3 = 10 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
int0 = 14                                                               # STEP 29
ACTION: int0 = 14 
int0 = 10 : <type 'int'>
=> int0 = 14 : <type 'int'>
==================================================
result = avl1.find(int3)                                                # STEP 30
ACTION: result = avl1.find(int3) 
int3 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10445abd8> : <type 'instance'>
avl_REF1 = set([10, 2]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl0.delete(int2)                                                       # STEP 31
ACTION: avl0.delete(int2) 
int2 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10451abd8> : <type 'instance'>
avl_REF0 = set([16, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.delete(int3)                                                       # STEP 32
ACTION: avl0.delete(int3) 
int3 = 8 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10451abd8> : <type 'instance'>
avl_REF0 = set([16, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl2.insert(int1)                                                       # STEP 33
ACTION: avl2.insert(int1) 
int1 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1044592d8> : <type 'instance'>
avl_REF2 = set([1, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([1, 2, 4]) : <type 'set'>
==================================================
int1 = 4                                                                # STEP 34
ACTION: int1 = 4 
int1 = 2 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 35
ACTION: avl0.insert(int0) 
int0 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10451abd8> : <type 'instance'>
avl_REF0 = set([16, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([16, 3, 14]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 36
ACTION: avl2.insert(int2) 
int2 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1044592d8> : <type 'instance'>
avl_REF2 = set([1, 2, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([1, 2, 4, 14]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 37
ACTION: avl1.insert(int1) 
int1 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10445abd8> : <type 'instance'>
avl_REF1 = set([10, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([10, 4, 2]) : <type 'set'>
==================================================
int0 = 19                                                               # STEP 38
ACTION: int0 = 19 
int0 = 14 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
avl1 == avl2                                                            # STEP 39
ACTION: avl1 == avl2 
avl1 = <avlbug2.AVLTree instance at 0x10445abd8> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x1044592d8> : <type 'instance'>
avl_REF1 = set([10, 4, 2]) : <type 'set'>
avl_REF2 = set([1, 2, 4, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
avl1.delete(int3)                                                       # STEP 40
ACTION: avl1.delete(int3) 
int3 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10445abd8> : <type 'instance'>
avl_REF1 = set([10, 4, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1 == avl1                                                            # STEP 41
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x10445abd8> : <type 'instance'>
avl_REF1 = set([10, 4, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
int2 = 10                                                               # STEP 42
ACTION: int2 = 10 
int2 = 14 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 43
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x10451abd8> : <type 'instance'>
avl_REF0 = set([16, 3, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl1.insert(int1)                                                       # STEP 44
ACTION: avl1.insert(int1) 
int1 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10445abd8> : <type 'instance'>
avl_REF1 = set([10, 4, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl1.delete(int1)                                                       # STEP 45
ACTION: avl1.delete(int1) 
int1 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10445abd8> : <type 'instance'>
avl_REF1 = set([10, 4, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([10, 2]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 46
ACTION: avl1.insert(int2) 
int2 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10445abd8> : <type 'instance'>
avl_REF1 = set([10, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
int1 = 1                                                                # STEP 47
ACTION: int1 = 1 
int1 = 4 : <type 'int'>
=> int1 = 1 : <type 'int'>
==================================================
int3 = 15                                                               # STEP 48
ACTION: int3 = 15 
int3 = 8 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 49
ACTION: avl0.insert(int3) 
int3 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10451abd8> : <type 'instance'>
avl_REF0 = set([16, 3, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([16, 3, 14, 15]) : <type 'set'>
==================================================
result = avl0.find(int1)                                                # STEP 50
ACTION: result = avl0.find(int1) 
int1 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10451abd8> : <type 'instance'>
avl_REF0 = set([16, 3, 14, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl2.insert(int2)                                                       # STEP 51
ACTION: avl2.insert(int2) 
int2 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1044592d8> : <type 'instance'>
avl_REF2 = set([1, 2, 4, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([1, 2, 4, 10, 14]) : <type 'set'>
==================================================
result = avl0.find(int2)                                                # STEP 52
ACTION: result = avl0.find(int2) 
int2 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10451abd8> : <type 'instance'>
avl_REF0 = set([16, 3, 14, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
result = avl0.find(int0)                                                # STEP 53
ACTION: result = avl0.find(int0) 
int0 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10451abd8> : <type 'instance'>
avl_REF0 = set([16, 3, 14, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
avl1.insert(int0)                                                       # STEP 54
ACTION: avl1.insert(int0) 
int0 = 19 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10445abd8> : <type 'instance'>
avl_REF1 = set([10, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([10, 19, 2]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 55
ACTION: avl2.insert(int2) 
int2 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1044592d8> : <type 'instance'>
avl_REF2 = set([1, 2, 4, 10, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl1.delete(int2)                                                       # STEP 56
ACTION: avl1.delete(int2) 
int2 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10445abd8> : <type 'instance'>
avl_REF1 = set([10, 19, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([19, 2]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 57
ACTION: avl0.insert(int1) 
int1 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10451abd8> : <type 'instance'>
avl_REF0 = set([16, 3, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([16, 1, 3, 14, 15]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 58
ACTION: avl2.insert(int0) 
int0 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1044592d8> : <type 'instance'>
avl_REF2 = set([1, 2, 4, 10, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([1, 2, 4, 10, 14, 19]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 59
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x10445abd8> : <type 'instance'>
avl_REF1 = set([19, 2]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
result = avl2.inorder()                                                 # STEP 60
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x1044592d8> : <type 'instance'>
avl_REF2 = set([1, 2, 4, 10, 14, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl1.delete(int2)                                                       # STEP 61
ACTION: avl1.delete(int2) 
int2 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10445abd8> : <type 'instance'>
avl_REF1 = set([19, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl2.delete(int2)                                                       # STEP 62
ACTION: avl2.delete(int2) 
int2 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1044592d8> : <type 'instance'>
avl_REF2 = set([1, 2, 4, 10, 14, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([1, 2, 4, 14, 19]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 63
ACTION: avl2.delete(int0) 
int0 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1044592d8> : <type 'instance'>
avl_REF2 = set([1, 2, 4, 14, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([1, 2, 4, 14]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104522cf8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 75
STOPPING TESTING DUE TO TIMEOUT
8.9964274115 PERCENT COVERED
60.2210538387 TOTAL RUNTIME
7 EXECUTED
639 TOTAL TEST OPERATIONS
27.1632726192 TIME SPENT EXECUTING TEST OPERATIONS
0.0715136528015 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
27.2227292061 TIME SPENT CHECKING PROPERTIES
54.3860018253 TOTAL TIME SPENT RUNNING SUT
0.00364875793457 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int0 = 4                                                                 # STEP 0
int3 = 1                                                                 # STEP 1
avl2 = avl.AVLTree()                                                     # STEP 2
int2 = 3                                                                 # STEP 3
avl2.delete(int2)                                                        # STEP 4
avl0 = avl.AVLTree()                                                     # STEP 5
int1 = 16                                                                # STEP 6
avl2.insert(int0)                                                        # STEP 7
avl0.insert(int2)                                                        # STEP 8
avl0.insert(int1)                                                        # STEP 9
avl1 = avl.AVLTree()                                                    # STEP 10
int0 = 10                                                               # STEP 11
int2 = 14                                                               # STEP 12
avl0.delete(int3)                                                       # STEP 13
int1 = 5                                                                # STEP 14
avl0.delete(int1)                                                       # STEP 15
avl2.insert(int0)                                                       # STEP 16
result = avl2.inorder()                                                 # STEP 17
avl1.insert(int0)                                                       # STEP 18
result = avl2.find(int3)                                                # STEP 19
avl2.insert(int0)                                                       # STEP 20
avl2.insert(int3)                                                       # STEP 21
int3 = 10                                                               # STEP 22
int1 = 2                                                                # STEP 23
avl1.delete(int1)                                                       # STEP 24
avl2.delete(int2)                                                       # STEP 25
avl2.delete(int3)                                                       # STEP 26
avl1.insert(int1)                                                       # STEP 27
int3 = 8                                                                # STEP 28
int0 = 14                                                               # STEP 29
result = avl1.find(int3)                                                # STEP 30
avl0.delete(int2)                                                       # STEP 31
avl0.delete(int3)                                                       # STEP 32
avl2.insert(int1)                                                       # STEP 33
int1 = 4                                                                # STEP 34
avl0.insert(int0)                                                       # STEP 35
avl2.insert(int2)                                                       # STEP 36
avl1.insert(int1)                                                       # STEP 37
int0 = 19                                                               # STEP 38
avl1 == avl2                                                            # STEP 39
avl1.delete(int3)                                                       # STEP 40
avl1 == avl1                                                            # STEP 41
int2 = 10                                                               # STEP 42
result = avl0.inorder()                                                 # STEP 43
avl1.insert(int1)                                                       # STEP 44
avl1.delete(int1)                                                       # STEP 45
avl1.insert(int2)                                                       # STEP 46
int1 = 1                                                                # STEP 47
int3 = 15                                                               # STEP 48
avl0.insert(int3)                                                       # STEP 49
result = avl0.find(int1)                                                # STEP 50
avl2.insert(int2)                                                       # STEP 51
result = avl0.find(int2)                                                # STEP 52
result = avl0.find(int0)                                                # STEP 53
avl1.insert(int0)                                                       # STEP 54
avl2.insert(int2)                                                       # STEP 55
avl1.delete(int2)                                                       # STEP 56
avl0.insert(int1)                                                       # STEP 57
avl2.insert(int0)                                                       # STEP 58
result = avl1.inorder()                                                 # STEP 59
result = avl2.inorder()                                                 # STEP 60
avl1.delete(int2)                                                       # STEP 61
avl2.delete(int2)                                                       # STEP 62
avl2.delete(int0)                                                       # STEP 63
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104522cf8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
220 BRANCHES COVERED
164 STATEMENTS COVERED

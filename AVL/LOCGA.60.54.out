Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.62304.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  8 [2:0]
-- < 6 [1:0]
---- < 3 [0:0] L
---- > 7 [0:0] L
-- > 10 [1:0]
---- < 9 [0:0] L
---- > 18 [0:0] L
set([3, 6, 7, 8, 9, 10, 18])
  8 [2:0]
-- < 6 [1:0]
---- < 3 [0:0] L
---- > 7 [0:0] L
-- > 10 [1:0]
---- < 9 [0:0] L
---- > 18 [0:0] L
set([3, 6, 7, 8, 9, 10, 18])
  8 [2:0]
-- < 6 [1:0]
---- < 3 [0:0] L
---- > 7 [0:0] L
-- > 10 [1:0]
---- < 9 [0:0] L
---- > 18 [0:0] L
set([3, 6, 7, 8, 9, 10, 18])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102dcb290>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
Original test has 78 steps

SAVING TEST AS failure.62304.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 13                                                                # STEP 0
ACTION: int0 = 13 
int0 = None : <type 'NoneType'>
=> int0 = 13 : <type 'int'>
==================================================
int3 = 1                                                                 # STEP 1
ACTION: int3 = 1 
int3 = None : <type 'NoneType'>
=> int3 = 1 : <type 'int'>
==================================================
int2 = 14                                                                # STEP 2
ACTION: int2 = 14 
int2 = None : <type 'NoneType'>
=> int2 = 14 : <type 'int'>
==================================================
int1 = 9                                                                 # STEP 3
ACTION: int1 = 9 
int1 = None : <type 'NoneType'>
=> int1 = 9 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x10282b8c0> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.delete(int2)                                                        # STEP 5
ACTION: avl2.delete(int2) 
int2 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10282b8c0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.insert(int0)                                                        # STEP 6
ACTION: avl2.insert(int0) 
int0 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10282b8c0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([13]) : <type 'set'>
==================================================
result = avl2.inorder()                                                  # STEP 7
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x10282b8c0> : <type 'instance'>
avl_REF2 = set([13]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int2 = 7                                                                 # STEP 8
ACTION: int2 = 7 
int2 = 14 : <type 'int'>
=> int2 = 7 : <type 'int'>
==================================================
avl2.delete(int3)                                                        # STEP 9
ACTION: avl2.delete(int3) 
int3 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10282b8c0> : <type 'instance'>
avl_REF2 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl1 = avl.AVLTree()                                                    # STEP 10
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x102cf9710> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1 == avl1                                                            # STEP 11
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x102cf9710> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
int0 = 16                                                               # STEP 12
ACTION: int0 = 16 
int0 = 13 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
int3 = 17                                                               # STEP 13
ACTION: int3 = 17 
int3 = 1 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 14
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x102d3fbd8> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 15
ACTION: avl0.insert(int2) 
int2 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102d3fbd8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([7]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 16
ACTION: avl2.delete(int3) 
int3 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10282b8c0> : <type 'instance'>
avl_REF2 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl1.delete(int0)                                                       # STEP 17
ACTION: avl1.delete(int0) 
int0 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102cf9710> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int0 = 8                                                                # STEP 18
ACTION: int0 = 8 
int0 = 16 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 19
ACTION: avl2.delete(int0) 
int0 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10282b8c0> : <type 'instance'>
avl_REF2 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl0.insert(int1)                                                       # STEP 20
ACTION: avl0.insert(int1) 
int1 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102d3fbd8> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([9, 7]) : <type 'set'>
==================================================
result = avl0.find(int1)                                                # STEP 21
ACTION: result = avl0.find(int1) 
int1 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102d3fbd8> : <type 'instance'>
avl_REF0 = set([9, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
int0 = 5                                                                # STEP 22
ACTION: int0 = 5 
int0 = 8 : <type 'int'>
=> int0 = 5 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 23
ACTION: avl0.insert(int2) 
int2 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102d3fbd8> : <type 'instance'>
avl_REF0 = set([9, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl0.insert(int0)                                                       # STEP 24
ACTION: avl0.insert(int0) 
int0 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102d3fbd8> : <type 'instance'>
avl_REF0 = set([9, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([9, 5, 7]) : <type 'set'>
==================================================
int3 = 4                                                                # STEP 25
ACTION: int3 = 4 
int3 = 17 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
int1 = 18                                                               # STEP 26
ACTION: int1 = 18 
int1 = 9 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 27
ACTION: avl1.insert(int2) 
int2 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102cf9710> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([7]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 28
ACTION: avl1.delete(int3) 
int3 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102cf9710> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.delete(int0)                                                       # STEP 29
ACTION: avl1.delete(int0) 
int0 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102cf9710> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
result = avl2.inorder()                                                 # STEP 30
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x10282b8c0> : <type 'instance'>
avl_REF2 = set([13]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int0)                                                       # STEP 31
ACTION: avl2.delete(int0) 
int0 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10282b8c0> : <type 'instance'>
avl_REF2 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.delete(int2)                                                       # STEP 32
ACTION: avl2.delete(int2) 
int2 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10282b8c0> : <type 'instance'>
avl_REF2 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl0.insert(int2)                                                       # STEP 33
ACTION: avl0.insert(int2) 
int2 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102d3fbd8> : <type 'instance'>
avl_REF0 = set([9, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
int2 = 5                                                                # STEP 34
ACTION: int2 = 5 
int2 = 7 : <type 'int'>
=> int2 = 5 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 35
ACTION: avl0.insert(int2) 
int2 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102d3fbd8> : <type 'instance'>
avl_REF0 = set([9, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl2.insert(int0)                                                       # STEP 36
ACTION: avl2.insert(int0) 
int0 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10282b8c0> : <type 'instance'>
avl_REF2 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([13, 5]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 37
ACTION: avl2.insert(int3) 
int3 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10282b8c0> : <type 'instance'>
avl_REF2 = set([13, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([4, 13, 5]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 38
ACTION: avl2.insert(int1) 
int1 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10282b8c0> : <type 'instance'>
avl_REF2 = set([4, 13, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([18, 4, 13, 5]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 39
ACTION: avl2.insert(int3) 
int3 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10282b8c0> : <type 'instance'>
avl_REF2 = set([18, 4, 13, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
avl0.delete(int2)                                                       # STEP 40
ACTION: avl0.delete(int2) 
int2 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102d3fbd8> : <type 'instance'>
avl_REF0 = set([9, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([9, 7]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 41
ACTION: avl2.insert(int1) 
int1 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10282b8c0> : <type 'instance'>
avl_REF2 = set([18, 4, 13, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
result = avl1.inorder()                                                 # STEP 42
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x102cf9710> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int1)                                                       # STEP 43
ACTION: avl1.insert(int1) 
int1 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102cf9710> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([18, 7]) : <type 'set'>
==================================================
result = avl0.find(int3)                                                # STEP 44
ACTION: result = avl0.find(int3) 
int3 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102d3fbd8> : <type 'instance'>
avl_REF0 = set([9, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
avl1.delete(int2)                                                       # STEP 45
ACTION: avl1.delete(int2) 
int2 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102cf9710> : <type 'instance'>
avl_REF1 = set([18, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl2.delete(int1)                                                       # STEP 46
ACTION: avl2.delete(int1) 
int1 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10282b8c0> : <type 'instance'>
avl_REF2 = set([18, 4, 13, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([4, 13, 5]) : <type 'set'>
==================================================
int3 = 2                                                                # STEP 47
ACTION: int3 = 2 
int3 = 4 : <type 'int'>
=> int3 = 2 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 48
ACTION: avl2.insert(int1) 
int1 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10282b8c0> : <type 'instance'>
avl_REF2 = set([4, 13, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([18, 4, 13, 5]) : <type 'set'>
==================================================
int0 = 5                                                                # STEP 49
ACTION: int0 = 5 
int0 = 5 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 50
ACTION: avl1.delete(int3) 
int3 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102cf9710> : <type 'instance'>
avl_REF1 = set([18, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl0.insert(int1)                                                       # STEP 51
ACTION: avl0.insert(int1) 
int1 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102d3fbd8> : <type 'instance'>
avl_REF0 = set([9, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([9, 18, 7]) : <type 'set'>
==================================================
int1 = 9                                                                # STEP 52
ACTION: int1 = 9 
int1 = 18 : <type 'int'>
=> int1 = 9 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 53
ACTION: avl2.insert(int3) 
int3 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10282b8c0> : <type 'instance'>
avl_REF2 = set([18, 4, 13, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([18, 2, 4, 13, 5]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 54
ACTION: avl0.insert(int0) 
int0 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102d3fbd8> : <type 'instance'>
avl_REF0 = set([9, 18, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([9, 18, 5, 7]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 55
ACTION: avl1.insert(int2) 
int2 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102cf9710> : <type 'instance'>
avl_REF1 = set([18, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([18, 5, 7]) : <type 'set'>
==================================================
result = avl0.find(int0)                                                # STEP 56
ACTION: result = avl0.find(int0) 
int0 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102d3fbd8> : <type 'instance'>
avl_REF0 = set([9, 18, 5, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
avl0.delete(int2)                                                       # STEP 57
ACTION: avl0.delete(int2) 
int2 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102d3fbd8> : <type 'instance'>
avl_REF0 = set([9, 18, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([9, 18, 7]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 58
ACTION: avl2.delete(int2) 
int2 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10282b8c0> : <type 'instance'>
avl_REF2 = set([18, 2, 4, 13, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([18, 2, 4, 13]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 59
ACTION: avl0.insert(int2) 
int2 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102d3fbd8> : <type 'instance'>
avl_REF0 = set([9, 18, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([9, 18, 5, 7]) : <type 'set'>
==================================================
result = avl2.find(int2)                                                # STEP 60
ACTION: result = avl2.find(int2) 
int2 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10282b8c0> : <type 'instance'>
avl_REF2 = set([18, 2, 4, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl0.delete(int3)                                                       # STEP 61
ACTION: avl0.delete(int3) 
int3 = 2 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102d3fbd8> : <type 'instance'>
avl_REF0 = set([9, 18, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.insert(int2)                                                       # STEP 62
ACTION: avl0.insert(int2) 
int2 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102d3fbd8> : <type 'instance'>
avl_REF0 = set([9, 18, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl0.delete(int2)                                                       # STEP 63
ACTION: avl0.delete(int2) 
int2 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102d3fbd8> : <type 'instance'>
avl_REF0 = set([9, 18, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([9, 18, 7]) : <type 'set'>
==================================================
result = avl1.find(int3)                                                # STEP 64
ACTION: result = avl1.find(int3) 
int3 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102cf9710> : <type 'instance'>
avl_REF1 = set([18, 5, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl1.insert(int2)                                                       # STEP 65
ACTION: avl1.insert(int2) 
int2 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102cf9710> : <type 'instance'>
avl_REF1 = set([18, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
int3 = 17                                                               # STEP 66
ACTION: int3 = 17 
int3 = 2 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 67
ACTION: avl1.insert(int1) 
int1 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102cf9710> : <type 'instance'>
avl_REF1 = set([18, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([9, 18, 5, 7]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 68
ACTION: avl2.insert(int3) 
int3 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10282b8c0> : <type 'instance'>
avl_REF2 = set([18, 2, 4, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([2, 4, 13, 17, 18]) : <type 'set'>
==================================================
int3 = 12                                                               # STEP 69
ACTION: int3 = 12 
int3 = 17 : <type 'int'>
=> int3 = 12 : <type 'int'>
==================================================
avl0 == avl2                                                            # STEP 70
ACTION: avl0 == avl2 
avl0 = <avlbug2.AVLTree instance at 0x102d3fbd8> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x10282b8c0> : <type 'instance'>
avl_REF0 = set([9, 18, 7]) : <type 'set'>
avl_REF2 = set([2, 4, 13, 17, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
avl1.insert(int3)                                                       # STEP 71
ACTION: avl1.insert(int3) 
int3 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102cf9710> : <type 'instance'>
avl_REF1 = set([9, 18, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([9, 18, 12, 5, 7]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 72
ACTION: avl1.insert(int3) 
int3 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102cf9710> : <type 'instance'>
avl_REF1 = set([9, 18, 12, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
avl1.insert(int0)                                                       # STEP 73
ACTION: avl1.insert(int0) 
int0 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102cf9710> : <type 'instance'>
avl_REF1 = set([9, 18, 12, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl0.insert(int3)                                                       # STEP 74
ACTION: avl0.insert(int3) 
int3 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102d3fbd8> : <type 'instance'>
avl_REF0 = set([9, 18, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([9, 18, 12, 7]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 75
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x102cf9710> : <type 'instance'>
avl_REF1 = set([9, 18, 12, 5, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl0.delete(int1)                                                       # STEP 76
ACTION: avl0.delete(int1) 
int1 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102d3fbd8> : <type 'instance'>
avl_REF0 = set([9, 18, 12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([18, 12, 7]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 77
ACTION: avl1.delete(int2) 
int2 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102cf9710> : <type 'instance'>
avl_REF1 = set([9, 18, 12, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([9, 18, 12, 7]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1026cbd40>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #3 STEP #32 (0:00:30.030634) Mon May  1 18:11:24 2017 [ 160 stmts 212 branches ]
  15 [2:0]
-- < 9 [1:0]
---- < 1 [0:0] L
---- > 12 [0:0] L
-- > 19 [1:1]
---- < 17 [0:0] L
set([1, 9, 12, 15, 17, 19])
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 19
STOPPING TESTING DUE TO TIMEOUT
8.32849680789 PERCENT COVERED
60.2356748581 TOTAL RUNTIME
6 EXECUTED
497 TOTAL TEST OPERATIONS
25.8481645584 TIME SPENT EXECUTING TEST OPERATIONS
0.0542116165161 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
25.9198083878 TIME SPENT CHECKING PROPERTIES
51.7679729462 TOTAL TIME SPENT RUNNING SUT
0.00438094139099 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int0 = 13                                                                # STEP 0
int3 = 1                                                                 # STEP 1
int2 = 14                                                                # STEP 2
int1 = 9                                                                 # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
avl2.delete(int2)                                                        # STEP 5
avl2.insert(int0)                                                        # STEP 6
result = avl2.inorder()                                                  # STEP 7
int2 = 7                                                                 # STEP 8
avl2.delete(int3)                                                        # STEP 9
avl1 = avl.AVLTree()                                                    # STEP 10
avl1 == avl1                                                            # STEP 11
int0 = 16                                                               # STEP 12
int3 = 17                                                               # STEP 13
avl0 = avl.AVLTree()                                                    # STEP 14
avl0.insert(int2)                                                       # STEP 15
avl2.delete(int3)                                                       # STEP 16
avl1.delete(int0)                                                       # STEP 17
int0 = 8                                                                # STEP 18
avl2.delete(int0)                                                       # STEP 19
avl0.insert(int1)                                                       # STEP 20
result = avl0.find(int1)                                                # STEP 21
int0 = 5                                                                # STEP 22
avl0.insert(int2)                                                       # STEP 23
avl0.insert(int0)                                                       # STEP 24
int3 = 4                                                                # STEP 25
int1 = 18                                                               # STEP 26
avl1.insert(int2)                                                       # STEP 27
avl1.delete(int3)                                                       # STEP 28
avl1.delete(int0)                                                       # STEP 29
result = avl2.inorder()                                                 # STEP 30
avl2.delete(int0)                                                       # STEP 31
avl2.delete(int2)                                                       # STEP 32
avl0.insert(int2)                                                       # STEP 33
int2 = 5                                                                # STEP 34
avl0.insert(int2)                                                       # STEP 35
avl2.insert(int0)                                                       # STEP 36
avl2.insert(int3)                                                       # STEP 37
avl2.insert(int1)                                                       # STEP 38
avl2.insert(int3)                                                       # STEP 39
avl0.delete(int2)                                                       # STEP 40
avl2.insert(int1)                                                       # STEP 41
result = avl1.inorder()                                                 # STEP 42
avl1.insert(int1)                                                       # STEP 43
result = avl0.find(int3)                                                # STEP 44
avl1.delete(int2)                                                       # STEP 45
avl2.delete(int1)                                                       # STEP 46
int3 = 2                                                                # STEP 47
avl2.insert(int1)                                                       # STEP 48
int0 = 5                                                                # STEP 49
avl1.delete(int3)                                                       # STEP 50
avl0.insert(int1)                                                       # STEP 51
int1 = 9                                                                # STEP 52
avl2.insert(int3)                                                       # STEP 53
avl0.insert(int0)                                                       # STEP 54
avl1.insert(int2)                                                       # STEP 55
result = avl0.find(int0)                                                # STEP 56
avl0.delete(int2)                                                       # STEP 57
avl2.delete(int2)                                                       # STEP 58
avl0.insert(int2)                                                       # STEP 59
result = avl2.find(int2)                                                # STEP 60
avl0.delete(int3)                                                       # STEP 61
avl0.insert(int2)                                                       # STEP 62
avl0.delete(int2)                                                       # STEP 63
result = avl1.find(int3)                                                # STEP 64
avl1.insert(int2)                                                       # STEP 65
int3 = 17                                                               # STEP 66
avl1.insert(int1)                                                       # STEP 67
avl2.insert(int3)                                                       # STEP 68
int3 = 12                                                               # STEP 69
avl0 == avl2                                                            # STEP 70
avl1.insert(int3)                                                       # STEP 71
avl1.insert(int3)                                                       # STEP 72
avl1.insert(int0)                                                       # STEP 73
avl0.insert(int3)                                                       # STEP 74
result = avl1.inorder()                                                 # STEP 75
avl0.delete(int1)                                                       # STEP 76
avl1.delete(int2)                                                       # STEP 77
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1026cbd40>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
218 BRANCHES COVERED
163 STATEMENTS COVERED

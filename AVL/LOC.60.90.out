Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.952.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103d27098>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 36 steps

SAVING TEST AS failure.952.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
avl0 = avl.AVLTree()                                                     # STEP 0
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x103b50170> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 1
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x1051347e8> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl2.inorder()                                                  # STEP 2
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x1051347e8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl2.inorder()                                                  # STEP 3
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x1051347e8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int1 = 4                                                                 # STEP 4
ACTION: int1 = 4 
int1 = None : <type 'NoneType'>
=> int1 = 4 : <type 'int'>
==================================================
result = avl2.inorder()                                                  # STEP 5
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x1051347e8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int1)                                                        # STEP 6
ACTION: avl2.insert(int1) 
int1 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1051347e8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([4]) : <type 'set'>
==================================================
int2 = 12                                                                # STEP 7
ACTION: int2 = 12 
int2 = None : <type 'NoneType'>
=> int2 = 12 : <type 'int'>
==================================================
result = avl0.inorder()                                                  # STEP 8
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x103b50170> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl2.insert(int2)                                                        # STEP 9
ACTION: avl2.insert(int2) 
int2 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1051347e8> : <type 'instance'>
avl_REF2 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([12, 4]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 10
ACTION: avl2.insert(int1) 
int1 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1051347e8> : <type 'instance'>
avl_REF2 = set([12, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl2.delete(int1)                                                       # STEP 11
ACTION: avl2.delete(int1) 
int1 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1051347e8> : <type 'instance'>
avl_REF2 = set([12, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([12]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 12
ACTION: avl2.insert(int1) 
int1 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1051347e8> : <type 'instance'>
avl_REF2 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([12, 4]) : <type 'set'>
==================================================
int2 = 10                                                               # STEP 13
ACTION: int2 = 10 
int2 = 12 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
int3 = 6                                                                # STEP 14
ACTION: int3 = 6 
int3 = None : <type 'NoneType'>
=> int3 = 6 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 15
ACTION: avl2.delete(int1) 
int1 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1051347e8> : <type 'instance'>
avl_REF2 = set([12, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([12]) : <type 'set'>
==================================================
int0 = 9                                                                # STEP 16
ACTION: int0 = 9 
int0 = None : <type 'NoneType'>
=> int0 = 9 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 17
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x1051347e8> : <type 'instance'>
avl_REF2 = set([12]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl0.delete(int1)                                                       # STEP 18
ACTION: avl0.delete(int1) 
int1 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103b50170> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl1 = avl.AVLTree()                                                    # STEP 19
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x103d29098> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 20
ACTION: avl2.delete(int0) 
int0 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1051347e8> : <type 'instance'>
avl_REF2 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl0 = avl.AVLTree()                                                    # STEP 21
ACTION: avl0 = avl.AVLTree() 
avl0 = <avl.AVLTree instance at 0x103b50170> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
=> avl0 = <avl.AVLTree instance at 0x103d37710> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
==================================================
avl2.insert(int2)                                                       # STEP 22
ACTION: avl2.insert(int2) 
int2 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1051347e8> : <type 'instance'>
avl_REF2 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([12, 10]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 23
ACTION: avl2.insert(int0) 
int0 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1051347e8> : <type 'instance'>
avl_REF2 = set([12, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([12, 10, 9]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 24
ACTION: avl0.insert(int2) 
int2 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103d37710> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([10]) : <type 'set'>
==================================================
int0 = 18                                                               # STEP 25
ACTION: int0 = 18 
int0 = 9 : <type 'int'>
=> int0 = 18 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 26
ACTION: avl2.delete(int3) 
int3 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1051347e8> : <type 'instance'>
avl_REF2 = set([12, 10, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl0.delete(int0)                                                       # STEP 27
ACTION: avl0.delete(int0) 
int0 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103d37710> : <type 'instance'>
avl_REF0 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.delete(int0)                                                       # STEP 28
ACTION: avl0.delete(int0) 
int0 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103d37710> : <type 'instance'>
avl_REF0 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl2.insert(int2)                                                       # STEP 29
ACTION: avl2.insert(int2) 
int2 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1051347e8> : <type 'instance'>
avl_REF2 = set([12, 10, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl2.delete(int0)                                                       # STEP 30
ACTION: avl2.delete(int0) 
int0 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1051347e8> : <type 'instance'>
avl_REF2 = set([12, 10, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
result = avl2.inorder()                                                 # STEP 31
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x1051347e8> : <type 'instance'>
avl_REF2 = set([12, 10, 9]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int1)                                                       # STEP 32
ACTION: avl2.insert(int1) 
int1 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1051347e8> : <type 'instance'>
avl_REF2 = set([12, 10, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([12, 10, 4, 9]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 33
ACTION: avl1.insert(int1) 
int1 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103d29098> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([4]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 34
ACTION: avl2.delete(int3) 
int3 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1051347e8> : <type 'instance'>
avl_REF2 = set([12, 10, 4, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.delete(int2)                                                       # STEP 35
ACTION: avl2.delete(int2) 
int2 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1051347e8> : <type 'instance'>
avl_REF2 = set([12, 10, 4, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([12, 4, 9]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103dcbcb0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
  10 [2:0]
-- < 9 [1:1]
---- < 3 [0:0] L
-- > 15 [1:0]
---- < 13 [0:0] L
---- > 18 [0:0] L
set([3, 9, 10, 13, 15, 18])
  10 [2:0]
-- < 9 [1:1]
---- < 3 [0:0] L
-- > 15 [1:0]
---- < 13 [0:0] L
---- > 18 [0:0] L
set([3, 9, 10, 13, 15, 18])
TEST #4 STEP #64 (0:00:30.018953) Fri Apr 28 07:46:06 2017 [ 162 stmts 216 branches ]
  15 [2:0]
-- < 6 [1:1]
---- < 3 [0:0] L
-- > 18 [1:0]
---- < 16 [0:0] L
---- > 20 [0:0] L
set([3, 6, 15, 16, 18, 20])
  15 [2:0]
-- < 6 [1:1]
---- < 3 [0:0] L
-- > 18 [1:0]
---- < 16 [0:0] L
---- > 20 [0:0] L
set([3, 6, 15, 16, 18, 20])
  15 [2:0]
-- < 6 [1:1]
---- < 3 [0:0] L
-- > 18 [1:0]
---- < 16 [0:0] L
---- > 20 [0:0] L
set([3, 6, 15, 16, 18, 20])
  15 [2:0]
-- < 6 [1:1]
---- < 3 [0:0] L
-- > 18 [1:0]
---- < 16 [0:0] L
---- > 20 [0:0] L
set([3, 6, 15, 16, 18, 20])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103a3b6c8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
Original test has 45 steps

SAVING TEST AS failure.952.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 6                                                                 # STEP 0
ACTION: int2 = 6 
int2 = None : <type 'NoneType'>
=> int2 = 6 : <type 'int'>
==================================================
int3 = 18                                                                # STEP 1
ACTION: int3 = 18 
int3 = None : <type 'NoneType'>
=> int3 = 18 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 2
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x103edfd40> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.delete(int3)                                                        # STEP 3
ACTION: avl0.delete(int3) 
int3 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103edfd40> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.delete(int2)                                                        # STEP 4
ACTION: avl0.delete(int2) 
int2 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103edfd40> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.insert(int2)                                                        # STEP 5
ACTION: avl0.insert(int2) 
int2 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103edfd40> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([6]) : <type 'set'>
==================================================
avl0.delete(int2)                                                        # STEP 6
ACTION: avl0.delete(int2) 
int2 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103edfd40> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.delete(int2)                                                        # STEP 7
ACTION: avl0.delete(int2) 
int2 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103edfd40> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.insert(int3)                                                        # STEP 8
ACTION: avl0.insert(int3) 
int3 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103edfd40> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([18]) : <type 'set'>
==================================================
int0 = 15                                                                # STEP 9
ACTION: int0 = 15 
int0 = None : <type 'NoneType'>
=> int0 = 15 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 10
ACTION: avl0.insert(int3) 
int3 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103edfd40> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
int3 = 3                                                                # STEP 11
ACTION: int3 = 3 
int3 = 18 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 12
ACTION: avl0.insert(int2) 
int2 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103edfd40> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([18, 6]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 13
ACTION: avl0.insert(int3) 
int3 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103edfd40> : <type 'instance'>
avl_REF0 = set([18, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([18, 3, 6]) : <type 'set'>
==================================================
avl0 == avl0                                                            # STEP 14
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x103edfd40> : <type 'instance'>
avl_REF0 = set([18, 3, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl0.insert(int0)                                                       # STEP 15
ACTION: avl0.insert(int0) 
int0 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103edfd40> : <type 'instance'>
avl_REF0 = set([18, 3, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([18, 3, 6, 15]) : <type 'set'>
==================================================
int0 = 2                                                                # STEP 16
ACTION: int0 = 2 
int0 = 15 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
int3 = 16                                                               # STEP 17
ACTION: int3 = 16 
int3 = 3 : <type 'int'>
=> int3 = 16 : <type 'int'>
==================================================
int1 = 20                                                               # STEP 18
ACTION: int1 = 20 
int1 = None : <type 'NoneType'>
=> int1 = 20 : <type 'int'>
==================================================
int2 = 12                                                               # STEP 19
ACTION: int2 = 12 
int2 = 6 : <type 'int'>
=> int2 = 12 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 20
ACTION: avl0.delete(int3) 
int3 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103edfd40> : <type 'instance'>
avl_REF0 = set([18, 3, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.delete(int0)                                                       # STEP 21
ACTION: avl0.delete(int0) 
int0 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103edfd40> : <type 'instance'>
avl_REF0 = set([18, 3, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.insert(int1)                                                       # STEP 22
ACTION: avl0.insert(int1) 
int1 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103edfd40> : <type 'instance'>
avl_REF0 = set([18, 3, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([18, 3, 20, 6, 15]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 23
ACTION: avl0.insert(int0) 
int0 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103edfd40> : <type 'instance'>
avl_REF0 = set([18, 3, 20, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([2, 3, 6, 15, 18, 20]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 24
ACTION: avl0.delete(int0) 
int0 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103edfd40> : <type 'instance'>
avl_REF0 = set([2, 3, 6, 15, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([3, 6, 15, 18, 20]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 25
ACTION: avl0.insert(int3) 
int3 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103edfd40> : <type 'instance'>
avl_REF0 = set([3, 6, 15, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([3, 6, 15, 16, 18, 20]) : <type 'set'>
==================================================
avl0.display()                                                          # STEP 26
ACTION: avl0.display() 
avl0 = <avl.AVLTree instance at 0x103edfd40> : <type 'instance'>
avl_REF0 = set([3, 6, 15, 16, 18, 20]) : <type 'set'>
  15 [2:0]
-- < 6 [1:1]
---- < 3 [0:0] L
-- > 18 [1:0]
---- < 16 [0:0] L
---- > 20 [0:0] L
REFERENCE ACTION: print(avl_REF0) 
set([3, 6, 15, 16, 18, 20])
==================================================
avl0.display()                                                          # STEP 27
ACTION: avl0.display() 
avl0 = <avl.AVLTree instance at 0x103edfd40> : <type 'instance'>
avl_REF0 = set([3, 6, 15, 16, 18, 20]) : <type 'set'>
  15 [2:0]
-- < 6 [1:1]
---- < 3 [0:0] L
-- > 18 [1:0]
---- < 16 [0:0] L
---- > 20 [0:0] L
REFERENCE ACTION: print(avl_REF0) 
set([3, 6, 15, 16, 18, 20])
==================================================
avl0.display()                                                          # STEP 28
ACTION: avl0.display() 
avl0 = <avl.AVLTree instance at 0x103edfd40> : <type 'instance'>
avl_REF0 = set([3, 6, 15, 16, 18, 20]) : <type 'set'>
  15 [2:0]
-- < 6 [1:1]
---- < 3 [0:0] L
-- > 18 [1:0]
---- < 16 [0:0] L
---- > 20 [0:0] L
REFERENCE ACTION: print(avl_REF0) 
set([3, 6, 15, 16, 18, 20])
==================================================
avl0.display()                                                          # STEP 29
ACTION: avl0.display() 
avl0 = <avl.AVLTree instance at 0x103edfd40> : <type 'instance'>
avl_REF0 = set([3, 6, 15, 16, 18, 20]) : <type 'set'>
  15 [2:0]
-- < 6 [1:1]
---- < 3 [0:0] L
-- > 18 [1:0]
---- < 16 [0:0] L
---- > 20 [0:0] L
REFERENCE ACTION: print(avl_REF0) 
set([3, 6, 15, 16, 18, 20])
==================================================
result = avl0.inorder()                                                 # STEP 30
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x103edfd40> : <type 'instance'>
avl_REF0 = set([3, 6, 15, 16, 18, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int3)                                                       # STEP 31
ACTION: avl0.insert(int3) 
int3 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103edfd40> : <type 'instance'>
avl_REF0 = set([3, 6, 15, 16, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
result = avl0.inorder()                                                 # STEP 32
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x103edfd40> : <type 'instance'>
avl_REF0 = set([3, 6, 15, 16, 18, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.delete(int1)                                                       # STEP 33
ACTION: avl0.delete(int1) 
int1 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103edfd40> : <type 'instance'>
avl_REF0 = set([3, 6, 15, 16, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([3, 6, 15, 16, 18]) : <type 'set'>
==================================================
int3 = 13                                                               # STEP 34
ACTION: int3 = 13 
int3 = 16 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 35
ACTION: avl0.insert(int0) 
int0 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103edfd40> : <type 'instance'>
avl_REF0 = set([3, 6, 15, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([2, 3, 6, 15, 16, 18]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 36
ACTION: avl0.delete(int1) 
int1 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103edfd40> : <type 'instance'>
avl_REF0 = set([2, 3, 6, 15, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
result = avl0.find(int1)                                                # STEP 37
ACTION: result = avl0.find(int1) 
int1 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103edfd40> : <type 'instance'>
avl_REF0 = set([2, 3, 6, 15, 16, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
int1 = 14                                                               # STEP 38
ACTION: int1 = 14 
int1 = 20 : <type 'int'>
=> int1 = 14 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 39
ACTION: avl0.insert(int2) 
int2 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103edfd40> : <type 'instance'>
avl_REF0 = set([2, 3, 6, 15, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([2, 3, 6, 12, 15, 16, 18]) : <type 'set'>
==================================================
int2 = 12                                                               # STEP 40
ACTION: int2 = 12 
int2 = 12 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 41
ACTION: avl0.insert(int2) 
int2 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103edfd40> : <type 'instance'>
avl_REF0 = set([2, 3, 6, 12, 15, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
result = avl0.find(int1)                                                # STEP 42
ACTION: result = avl0.find(int1) 
int1 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103edfd40> : <type 'instance'>
avl_REF0 = set([2, 3, 6, 12, 15, 16, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl0.insert(int3)                                                       # STEP 43
ACTION: avl0.insert(int3) 
int3 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103edfd40> : <type 'instance'>
avl_REF0 = set([2, 3, 6, 12, 15, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([2, 3, 6, 12, 13, 15, 16, 18]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 44
ACTION: avl0.delete(int0) 
int0 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103edfd40> : <type 'instance'>
avl_REF0 = set([2, 3, 6, 12, 13, 15, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([3, 6, 12, 13, 15, 16, 18]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103a225a8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
  10 [2:0]
-- < 8 [1:0]
---- < 6 [0:0] L
---- > 9 [0:0] L
-- > 17 [1:0]
---- < 16 [0:0] L
---- > 20 [0:0] L
set([6, 8, 9, 10, 16, 17, 20])
  10 [3:-1]
-- < 8 [1:0]
---- < 6 [0:0] L
---- > 9 [0:0] L
-- > 17 [2:1]
---- < 16 [1:1]
------ < 11 [0:0] L
---- > 20 [0:0] L
set([6, 8, 9, 10, 11, 16, 17, 20])
  10 [3:-1]
-- < 8 [1:0]
---- < 6 [0:0] L
---- > 9 [0:0] L
-- > 17 [2:1]
---- < 16 [1:1]
------ < 11 [0:0] L
---- > 20 [0:0] L
set([6, 8, 9, 10, 11, 16, 17, 20])
  10 [3:-1]
-- < 8 [1:0]
---- < 6 [0:0] L
---- > 9 [0:0] L
-- > 17 [2:1]
---- < 16 [1:1]
------ < 11 [0:0] L
---- > 20 [0:0] L
set([6, 8, 9, 10, 11, 16, 17, 20])
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 15
STOPPING TESTING DUE TO TIMEOUT
8.58500169664 PERCENT COVERED
60.1684589386 TOTAL RUNTIME
8 EXECUTED
596 TOTAL TEST OPERATIONS
26.1531848907 TIME SPENT EXECUTING TEST OPERATIONS
0.0670526027679 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
26.3622779846 TIME SPENT CHECKING PROPERTIES
52.5154628754 TOTAL TIME SPENT RUNNING SUT
0.00492215156555 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
2 FAILED
0 REPEATS OF FAILURES
2 ACTUAL DISTINCT FAILURES

FAILURE 0
avl0 = avl.AVLTree()                                                     # STEP 0
avl2 = avl.AVLTree()                                                     # STEP 1
result = avl2.inorder()                                                  # STEP 2
result = avl2.inorder()                                                  # STEP 3
int1 = 4                                                                 # STEP 4
result = avl2.inorder()                                                  # STEP 5
avl2.insert(int1)                                                        # STEP 6
int2 = 12                                                                # STEP 7
result = avl0.inorder()                                                  # STEP 8
avl2.insert(int2)                                                        # STEP 9
avl2.insert(int1)                                                       # STEP 10
avl2.delete(int1)                                                       # STEP 11
avl2.insert(int1)                                                       # STEP 12
int2 = 10                                                               # STEP 13
int3 = 6                                                                # STEP 14
avl2.delete(int1)                                                       # STEP 15
int0 = 9                                                                # STEP 16
result = avl2.inorder()                                                 # STEP 17
avl0.delete(int1)                                                       # STEP 18
avl1 = avl.AVLTree()                                                    # STEP 19
avl2.delete(int0)                                                       # STEP 20
avl0 = avl.AVLTree()                                                    # STEP 21
avl2.insert(int2)                                                       # STEP 22
avl2.insert(int0)                                                       # STEP 23
avl0.insert(int2)                                                       # STEP 24
int0 = 18                                                               # STEP 25
avl2.delete(int3)                                                       # STEP 26
avl0.delete(int0)                                                       # STEP 27
avl0.delete(int0)                                                       # STEP 28
avl2.insert(int2)                                                       # STEP 29
avl2.delete(int0)                                                       # STEP 30
result = avl2.inorder()                                                 # STEP 31
avl2.insert(int1)                                                       # STEP 32
avl1.insert(int1)                                                       # STEP 33
avl2.delete(int3)                                                       # STEP 34
avl2.delete(int2)                                                       # STEP 35
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103dcbcb0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE 1
int2 = 6                                                                 # STEP 0
int3 = 18                                                                # STEP 1
avl0 = avl.AVLTree()                                                     # STEP 2
avl0.delete(int3)                                                        # STEP 3
avl0.delete(int2)                                                        # STEP 4
avl0.insert(int2)                                                        # STEP 5
avl0.delete(int2)                                                        # STEP 6
avl0.delete(int2)                                                        # STEP 7
avl0.insert(int3)                                                        # STEP 8
int0 = 15                                                                # STEP 9
avl0.insert(int3)                                                       # STEP 10
int3 = 3                                                                # STEP 11
avl0.insert(int2)                                                       # STEP 12
avl0.insert(int3)                                                       # STEP 13
avl0 == avl0                                                            # STEP 14
avl0.insert(int0)                                                       # STEP 15
int0 = 2                                                                # STEP 16
int3 = 16                                                               # STEP 17
int1 = 20                                                               # STEP 18
int2 = 12                                                               # STEP 19
avl0.delete(int3)                                                       # STEP 20
avl0.delete(int0)                                                       # STEP 21
avl0.insert(int1)                                                       # STEP 22
avl0.insert(int0)                                                       # STEP 23
avl0.delete(int0)                                                       # STEP 24
avl0.insert(int3)                                                       # STEP 25
avl0.display()                                                          # STEP 26
avl0.display()                                                          # STEP 27
avl0.display()                                                          # STEP 28
avl0.display()                                                          # STEP 29
result = avl0.inorder()                                                 # STEP 30
avl0.insert(int3)                                                       # STEP 31
result = avl0.inorder()                                                 # STEP 32
avl0.delete(int1)                                                       # STEP 33
int3 = 13                                                               # STEP 34
avl0.insert(int0)                                                       # STEP 35
avl0.delete(int1)                                                       # STEP 36
result = avl0.find(int1)                                                # STEP 37
int1 = 14                                                               # STEP 38
avl0.insert(int2)                                                       # STEP 39
int2 = 12                                                               # STEP 40
avl0.insert(int2)                                                       # STEP 41
result = avl0.find(int1)                                                # STEP 42
avl0.insert(int3)                                                       # STEP 43
avl0.delete(int0)                                                       # STEP 44
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103a225a8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
216 BRANCHES COVERED
162 STATEMENTS COVERED

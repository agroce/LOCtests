Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.14076.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103da9b00>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
Original test has 33 steps

SAVING TEST AS failure.14076.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 14                                                                # STEP 0
ACTION: int0 = 14 
int0 = None : <type 'NoneType'>
=> int0 = 14 : <type 'int'>
==================================================
int1 = 11                                                                # STEP 1
ACTION: int1 = 11 
int1 = None : <type 'NoneType'>
=> int1 = 11 : <type 'int'>
==================================================
int2 = 16                                                                # STEP 2
ACTION: int2 = 16 
int2 = None : <type 'NoneType'>
=> int2 = 16 : <type 'int'>
==================================================
int3 = 7                                                                 # STEP 3
ACTION: int3 = 7 
int3 = None : <type 'NoneType'>
=> int3 = 7 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x103aa4b48> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 5
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x103aa43f8> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl1 == avl2                                                             # STEP 6
ACTION: avl1 == avl2 
avl1 = <avlbug2.AVLTree instance at 0x103aa4b48> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x103aa43f8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
avl2 == avl2                                                             # STEP 7
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x103aa43f8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl0 = avl.AVLTree()                                                     # STEP 8
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x103a87fc8> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.insert(int2)                                                        # STEP 9
ACTION: avl0.insert(int2) 
int2 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103a87fc8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([16]) : <type 'set'>
==================================================
int2 = 4                                                                # STEP 10
ACTION: int2 = 4 
int2 = 16 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 11
ACTION: avl2.insert(int0) 
int0 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103aa43f8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([14]) : <type 'set'>
==================================================
int0 = 15                                                               # STEP 12
ACTION: int0 = 15 
int0 = 14 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
avl2 == avl2                                                            # STEP 13
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x103aa43f8> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl2 == avl0                                                            # STEP 14
ACTION: avl2 == avl0 
avl2 = <avlbug2.AVLTree instance at 0x103aa43f8> : <type 'instance'>
avl0 = <avlbug2.AVLTree instance at 0x103a87fc8> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
avl_REF0 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF0 
==================================================
result = avl2.find(int2)                                                # STEP 15
ACTION: result = avl2.find(int2) 
int2 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103aa43f8> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl0.insert(int3)                                                       # STEP 16
ACTION: avl0.insert(int3) 
int3 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103a87fc8> : <type 'instance'>
avl_REF0 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([16, 7]) : <type 'set'>
==================================================
int2 = 18                                                               # STEP 17
ACTION: int2 = 18 
int2 = 4 : <type 'int'>
=> int2 = 18 : <type 'int'>
==================================================
int3 = 9                                                                # STEP 18
ACTION: int3 = 9 
int3 = 7 : <type 'int'>
=> int3 = 9 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 19
ACTION: avl2.delete(int2) 
int2 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103aa43f8> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int2 = 17                                                               # STEP 20
ACTION: int2 = 17 
int2 = 18 : <type 'int'>
=> int2 = 17 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 21
ACTION: avl0.insert(int2) 
int2 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103a87fc8> : <type 'instance'>
avl_REF0 = set([16, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([16, 17, 7]) : <type 'set'>
==================================================
result = avl1.find(int3)                                                # STEP 22
ACTION: result = avl1.find(int3) 
int3 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103aa4b48> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
int3 = 8                                                                # STEP 23
ACTION: int3 = 8 
int3 = 9 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
int2 = 3                                                                # STEP 24
ACTION: int2 = 3 
int2 = 17 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 25
ACTION: avl2.delete(int1) 
int1 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103aa43f8> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int1 = 17                                                               # STEP 26
ACTION: int1 = 17 
int1 = 11 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 27
ACTION: avl1.delete(int2) 
int2 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103aa4b48> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl0.delete(int0)                                                       # STEP 28
ACTION: avl0.delete(int0) 
int0 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103a87fc8> : <type 'instance'>
avl_REF0 = set([16, 17, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
result = avl0.find(int1)                                                # STEP 29
ACTION: result = avl0.find(int1) 
int1 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103a87fc8> : <type 'instance'>
avl_REF0 = set([16, 17, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl1 == avl0                                                            # STEP 30
ACTION: avl1 == avl0 
avl1 = <avlbug2.AVLTree instance at 0x103aa4b48> : <type 'instance'>
avl0 = <avlbug2.AVLTree instance at 0x103a87fc8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
avl_REF0 = set([16, 17, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
avl0.insert(int0)                                                       # STEP 31
ACTION: avl0.insert(int0) 
int0 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103a87fc8> : <type 'instance'>
avl_REF0 = set([16, 17, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([16, 17, 15, 7]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 32
ACTION: avl0.delete(int1) 
int1 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103a87fc8> : <type 'instance'>
avl_REF0 = set([16, 17, 15, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([16, 15, 7]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103b01758>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105a2c518>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
Original test has 92 steps

SAVING TEST AS failure.14076.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 19                                                                # STEP 0
ACTION: int1 = 19 
int1 = None : <type 'NoneType'>
=> int1 = 19 : <type 'int'>
==================================================
int3 = 16                                                                # STEP 1
ACTION: int3 = 16 
int3 = None : <type 'NoneType'>
=> int3 = 16 : <type 'int'>
==================================================
int2 = 8                                                                 # STEP 2
ACTION: int2 = 8 
int2 = None : <type 'NoneType'>
=> int2 = 8 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 3
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x102f9ff38> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int0 = 9                                                                 # STEP 4
ACTION: int0 = 9 
int0 = None : <type 'NoneType'>
=> int0 = 9 : <type 'int'>
==================================================
avl2.insert(int0)                                                        # STEP 5
ACTION: avl2.insert(int0) 
int0 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102f9ff38> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([9]) : <type 'set'>
==================================================
int0 = 10                                                                # STEP 6
ACTION: int0 = 10 
int0 = 9 : <type 'int'>
=> int0 = 10 : <type 'int'>
==================================================
avl2.delete(int1)                                                        # STEP 7
ACTION: avl2.delete(int1) 
int1 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102f9ff38> : <type 'instance'>
avl_REF2 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
result = avl2.find(int1)                                                 # STEP 8
ACTION: result = avl2.find(int1) 
int1 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102f9ff38> : <type 'instance'>
avl_REF2 = set([9]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int1 = 15                                                                # STEP 9
ACTION: int1 = 15 
int1 = 19 : <type 'int'>
=> int1 = 15 : <type 'int'>
==================================================
avl2 == avl2                                                            # STEP 10
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x102f9ff38> : <type 'instance'>
avl_REF2 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl2.delete(int2)                                                       # STEP 11
ACTION: avl2.delete(int2) 
int2 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102f9ff38> : <type 'instance'>
avl_REF2 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int2 = 15                                                               # STEP 12
ACTION: int2 = 15 
int2 = 8 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
result = avl2.find(int2)                                                # STEP 13
ACTION: result = avl2.find(int2) 
int2 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102f9ff38> : <type 'instance'>
avl_REF2 = set([9]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl0 = avl.AVLTree()                                                    # STEP 14
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x103955170> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int2 = 9                                                                # STEP 15
ACTION: int2 = 9 
int2 = 15 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 16
ACTION: avl0.insert(int1) 
int1 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103955170> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([15]) : <type 'set'>
==================================================
result = avl2.find(int0)                                                # STEP 17
ACTION: result = avl2.find(int0) 
int0 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102f9ff38> : <type 'instance'>
avl_REF2 = set([9]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl2.insert(int3)                                                       # STEP 18
ACTION: avl2.insert(int3) 
int3 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102f9ff38> : <type 'instance'>
avl_REF2 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([16, 9]) : <type 'set'>
==================================================
avl0 == avl2                                                            # STEP 19
ACTION: avl0 == avl2 
avl0 = <avlbug2.AVLTree instance at 0x103955170> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x102f9ff38> : <type 'instance'>
avl_REF0 = set([15]) : <type 'set'>
avl_REF2 = set([16, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
avl2.delete(int2)                                                       # STEP 20
ACTION: avl2.delete(int2) 
int2 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102f9ff38> : <type 'instance'>
avl_REF2 = set([16, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([16]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 21
ACTION: avl0.insert(int0) 
int0 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103955170> : <type 'instance'>
avl_REF0 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([10, 15]) : <type 'set'>
==================================================
int2 = 9                                                                # STEP 22
ACTION: int2 = 9 
int2 = 9 : <type 'int'>
==================================================
int1 = 5                                                                # STEP 23
ACTION: int1 = 5 
int1 = 15 : <type 'int'>
=> int1 = 5 : <type 'int'>
==================================================
int0 = 15                                                               # STEP 24
ACTION: int0 = 15 
int0 = 10 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 25
ACTION: avl0.delete(int2) 
int2 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103955170> : <type 'instance'>
avl_REF0 = set([10, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl2.insert(int2)                                                       # STEP 26
ACTION: avl2.insert(int2) 
int2 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102f9ff38> : <type 'instance'>
avl_REF2 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([16, 9]) : <type 'set'>
==================================================
result = avl2.find(int3)                                                # STEP 27
ACTION: result = avl2.find(int3) 
int3 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102f9ff38> : <type 'instance'>
avl_REF2 = set([16, 9]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl2.insert(int1)                                                       # STEP 28
ACTION: avl2.insert(int1) 
int1 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102f9ff38> : <type 'instance'>
avl_REF2 = set([16, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([16, 9, 5]) : <type 'set'>
==================================================
int2 = 16                                                               # STEP 29
ACTION: int2 = 16 
int2 = 9 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 30
ACTION: avl0.insert(int0) 
int0 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103955170> : <type 'instance'>
avl_REF0 = set([10, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
int0 = 3                                                                # STEP 31
ACTION: int0 = 3 
int0 = 15 : <type 'int'>
=> int0 = 3 : <type 'int'>
==================================================
int3 = 20                                                               # STEP 32
ACTION: int3 = 20 
int3 = 16 : <type 'int'>
=> int3 = 20 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 33
ACTION: avl2.insert(int0) 
int0 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102f9ff38> : <type 'instance'>
avl_REF2 = set([16, 9, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([16, 9, 3, 5]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 34
ACTION: avl2.insert(int0) 
int0 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102f9ff38> : <type 'instance'>
avl_REF2 = set([16, 9, 3, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl0 == avl2                                                            # STEP 35
ACTION: avl0 == avl2 
avl0 = <avlbug2.AVLTree instance at 0x103955170> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x102f9ff38> : <type 'instance'>
avl_REF0 = set([10, 15]) : <type 'set'>
avl_REF2 = set([16, 9, 3, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
int0 = 6                                                                # STEP 36
ACTION: int0 = 6 
int0 = 3 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
int1 = 4                                                                # STEP 37
ACTION: int1 = 4 
int1 = 5 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 38
ACTION: avl2.insert(int3) 
int3 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102f9ff38> : <type 'instance'>
avl_REF2 = set([16, 9, 3, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([16, 9, 3, 20, 5]) : <type 'set'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 39
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x10397a710> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1 == avl2                                                            # STEP 40
ACTION: avl1 == avl2 
avl1 = <avlbug2.AVLTree instance at 0x10397a710> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x102f9ff38> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
avl_REF2 = set([16, 9, 3, 20, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
avl0.insert(int3)                                                       # STEP 41
ACTION: avl0.insert(int3) 
int3 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103955170> : <type 'instance'>
avl_REF0 = set([10, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([10, 20, 15]) : <type 'set'>
==================================================
result = avl2.find(int2)                                                # STEP 42
ACTION: result = avl2.find(int2) 
int2 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102f9ff38> : <type 'instance'>
avl_REF2 = set([16, 9, 3, 20, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl1 == avl0                                                            # STEP 43
ACTION: avl1 == avl0 
avl1 = <avlbug2.AVLTree instance at 0x10397a710> : <type 'instance'>
avl0 = <avlbug2.AVLTree instance at 0x103955170> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
avl_REF0 = set([10, 20, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
avl0.insert(int0)                                                       # STEP 44
ACTION: avl0.insert(int0) 
int0 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103955170> : <type 'instance'>
avl_REF0 = set([10, 20, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([10, 20, 6, 15]) : <type 'set'>
==================================================
int0 = 19                                                               # STEP 45
ACTION: int0 = 19 
int0 = 6 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
int2 = 3                                                                # STEP 46
ACTION: int2 = 3 
int2 = 16 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
int3 = 5                                                                # STEP 47
ACTION: int3 = 5 
int3 = 20 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 48
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x103955170> : <type 'instance'>
avl_REF0 = set([10, 20, 6, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl1 == avl2                                                            # STEP 49
ACTION: avl1 == avl2 
avl1 = <avlbug2.AVLTree instance at 0x10397a710> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x102f9ff38> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
avl_REF2 = set([16, 9, 3, 20, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
avl2.insert(int0)                                                       # STEP 50
ACTION: avl2.insert(int0) 
int0 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102f9ff38> : <type 'instance'>
avl_REF2 = set([16, 9, 3, 20, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([3, 5, 9, 16, 19, 20]) : <type 'set'>
==================================================
int0 = 5                                                                # STEP 51
ACTION: int0 = 5 
int0 = 19 : <type 'int'>
=> int0 = 5 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 52
ACTION: avl0.insert(int1) 
int1 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103955170> : <type 'instance'>
avl_REF0 = set([10, 20, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([4, 10, 20, 6, 15]) : <type 'set'>
==================================================
int1 = 17                                                               # STEP 53
ACTION: int1 = 17 
int1 = 4 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 54
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x102f9ff38> : <type 'instance'>
avl_REF2 = set([3, 5, 9, 16, 19, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int3)                                                       # STEP 55
ACTION: avl2.insert(int3) 
int3 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102f9ff38> : <type 'instance'>
avl_REF2 = set([3, 5, 9, 16, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
avl1.delete(int1)                                                       # STEP 56
ACTION: avl1.delete(int1) 
int1 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10397a710> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl2.delete(int3)                                                       # STEP 57
ACTION: avl2.delete(int3) 
int3 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102f9ff38> : <type 'instance'>
avl_REF2 = set([3, 5, 9, 16, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([3, 9, 16, 19, 20]) : <type 'set'>
==================================================
avl0 == avl2                                                            # STEP 58
ACTION: avl0 == avl2 
avl0 = <avlbug2.AVLTree instance at 0x103955170> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x102f9ff38> : <type 'instance'>
avl_REF0 = set([4, 10, 20, 6, 15]) : <type 'set'>
avl_REF2 = set([3, 9, 16, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
avl2 = avl.AVLTree()                                                    # STEP 59
ACTION: avl2 = avl.AVLTree() 
avl2 = <avlbug2.AVLTree instance at 0x102f9ff38> : <type 'instance'>
avl_REF2 = set([3, 9, 16, 19, 20]) : <type 'set'>
=> avl2 = <avlbug2.AVLTree instance at 0x103964488> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int3 = 18                                                               # STEP 60
ACTION: int3 = 18 
int3 = 5 : <type 'int'>
=> int3 = 18 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 61
ACTION: avl0.delete(int3) 
int3 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103955170> : <type 'instance'>
avl_REF0 = set([4, 10, 20, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
result = avl2.find(int1)                                                # STEP 62
ACTION: result = avl2.find(int1) 
int1 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103964488> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
result = avl1.find(int2)                                                # STEP 63
ACTION: result = avl1.find(int2) 
int2 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10397a710> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int1 = 4                                                                # STEP 64
ACTION: int1 = 4 
int1 = 17 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
int3 = 12                                                               # STEP 65
ACTION: int3 = 12 
int3 = 18 : <type 'int'>
=> int3 = 12 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 66
ACTION: avl1.insert(int2) 
int2 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10397a710> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([3]) : <type 'set'>
==================================================
result = avl2.find(int2)                                                # STEP 67
ACTION: result = avl2.find(int2) 
int2 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103964488> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl0 == avl1                                                            # STEP 68
ACTION: avl0 == avl1 
avl0 = <avlbug2.AVLTree instance at 0x103955170> : <type 'instance'>
avl1 = <avlbug2.AVLTree instance at 0x10397a710> : <type 'instance'>
avl_REF0 = set([4, 10, 20, 6, 15]) : <type 'set'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF1 
==================================================
avl2.delete(int2)                                                       # STEP 69
ACTION: avl2.delete(int2) 
int2 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103964488> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int2 = 14                                                               # STEP 70
ACTION: int2 = 14 
int2 = 3 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
result = avl1.find(int2)                                                # STEP 71
ACTION: result = avl1.find(int2) 
int2 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10397a710> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int2 = 12                                                               # STEP 72
ACTION: int2 = 12 
int2 = 14 : <type 'int'>
=> int2 = 12 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 73
ACTION: avl1.insert(int0) 
int0 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10397a710> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([3, 5]) : <type 'set'>
==================================================
result = avl0.find(int2)                                                # STEP 74
ACTION: result = avl0.find(int2) 
int2 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103955170> : <type 'instance'>
avl_REF0 = set([4, 10, 20, 6, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl1.insert(int2)                                                       # STEP 75
ACTION: avl1.insert(int2) 
int2 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10397a710> : <type 'instance'>
avl_REF1 = set([3, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([3, 12, 5]) : <type 'set'>
==================================================
int2 = 20                                                               # STEP 76
ACTION: int2 = 20 
int2 = 12 : <type 'int'>
=> int2 = 20 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 77
ACTION: avl2.delete(int2) 
int2 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103964488> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl0.delete(int3)                                                       # STEP 78
ACTION: avl0.delete(int3) 
int3 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103955170> : <type 'instance'>
avl_REF0 = set([4, 10, 20, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl1.insert(int0)                                                       # STEP 79
ACTION: avl1.insert(int0) 
int0 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10397a710> : <type 'instance'>
avl_REF1 = set([3, 12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
int0 = 3                                                                # STEP 80
ACTION: int0 = 3 
int0 = 5 : <type 'int'>
=> int0 = 3 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 81
ACTION: avl1.delete(int1) 
int1 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10397a710> : <type 'instance'>
avl_REF1 = set([3, 12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.insert(int2)                                                       # STEP 82
ACTION: avl1.insert(int2) 
int2 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10397a710> : <type 'instance'>
avl_REF1 = set([3, 12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([20, 3, 12, 5]) : <type 'set'>
==================================================
int2 = 12                                                               # STEP 83
ACTION: int2 = 12 
int2 = 20 : <type 'int'>
=> int2 = 12 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 84
ACTION: avl1.insert(int0) 
int0 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10397a710> : <type 'instance'>
avl_REF1 = set([20, 3, 12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.insert(int0)                                                       # STEP 85
ACTION: avl1.insert(int0) 
int0 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10397a710> : <type 'instance'>
avl_REF1 = set([20, 3, 12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
int1 = 18                                                               # STEP 86
ACTION: int1 = 18 
int1 = 4 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 87
ACTION: avl1.insert(int3) 
int3 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10397a710> : <type 'instance'>
avl_REF1 = set([20, 3, 12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
int3 = 15                                                               # STEP 88
ACTION: int3 = 15 
int3 = 12 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
avl1 == avl0                                                            # STEP 89
ACTION: avl1 == avl0 
avl1 = <avlbug2.AVLTree instance at 0x10397a710> : <type 'instance'>
avl0 = <avlbug2.AVLTree instance at 0x103955170> : <type 'instance'>
avl_REF1 = set([20, 3, 12, 5]) : <type 'set'>
avl_REF0 = set([4, 10, 20, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
avl1.delete(int1)                                                       # STEP 90
ACTION: avl1.delete(int1) 
int1 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10397a710> : <type 'instance'>
avl_REF1 = set([20, 3, 12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl0.delete(int3)                                                       # STEP 91
ACTION: avl0.delete(int3) 
int3 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103955170> : <type 'instance'>
avl_REF0 = set([4, 10, 20, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([4, 10, 20, 6]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103974c68>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
TEST #4 STEP #0 (0:00:36.371343) Sun Apr 30 03:16:25 2017 [ 148 stmts 198 branches ]
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 26
STOPPING TESTING DUE TO TIMEOUT
7.97749089705 PERCENT COVERED
60.255959034 TOTAL RUNTIME
6 EXECUTED
451 TOTAL TEST OPERATIONS
23.3585870266 TIME SPENT EXECUTING TEST OPERATIONS
0.0184030532837 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
23.5447328091 TIME SPENT CHECKING PROPERTIES
46.9033198357 TOTAL TIME SPENT RUNNING SUT
0.00464606285095 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
2 FAILED
0 REPEATS OF FAILURES
2 ACTUAL DISTINCT FAILURES

FAILURE 0
int0 = 14                                                                # STEP 0
int1 = 11                                                                # STEP 1
int2 = 16                                                                # STEP 2
int3 = 7                                                                 # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
avl2 = avl.AVLTree()                                                     # STEP 5
avl1 == avl2                                                             # STEP 6
avl2 == avl2                                                             # STEP 7
avl0 = avl.AVLTree()                                                     # STEP 8
avl0.insert(int2)                                                        # STEP 9
int2 = 4                                                                # STEP 10
avl2.insert(int0)                                                       # STEP 11
int0 = 15                                                               # STEP 12
avl2 == avl2                                                            # STEP 13
avl2 == avl0                                                            # STEP 14
result = avl2.find(int2)                                                # STEP 15
avl0.insert(int3)                                                       # STEP 16
int2 = 18                                                               # STEP 17
int3 = 9                                                                # STEP 18
avl2.delete(int2)                                                       # STEP 19
int2 = 17                                                               # STEP 20
avl0.insert(int2)                                                       # STEP 21
result = avl1.find(int3)                                                # STEP 22
int3 = 8                                                                # STEP 23
int2 = 3                                                                # STEP 24
avl2.delete(int1)                                                       # STEP 25
int1 = 17                                                               # STEP 26
avl1.delete(int2)                                                       # STEP 27
avl0.delete(int0)                                                       # STEP 28
result = avl0.find(int1)                                                # STEP 29
avl1 == avl0                                                            # STEP 30
avl0.insert(int0)                                                       # STEP 31
avl0.delete(int1)                                                       # STEP 32
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103b01758>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE 1
int1 = 19                                                                # STEP 0
int3 = 16                                                                # STEP 1
int2 = 8                                                                 # STEP 2
avl2 = avl.AVLTree()                                                     # STEP 3
int0 = 9                                                                 # STEP 4
avl2.insert(int0)                                                        # STEP 5
int0 = 10                                                                # STEP 6
avl2.delete(int1)                                                        # STEP 7
result = avl2.find(int1)                                                 # STEP 8
int1 = 15                                                                # STEP 9
avl2 == avl2                                                            # STEP 10
avl2.delete(int2)                                                       # STEP 11
int2 = 15                                                               # STEP 12
result = avl2.find(int2)                                                # STEP 13
avl0 = avl.AVLTree()                                                    # STEP 14
int2 = 9                                                                # STEP 15
avl0.insert(int1)                                                       # STEP 16
result = avl2.find(int0)                                                # STEP 17
avl2.insert(int3)                                                       # STEP 18
avl0 == avl2                                                            # STEP 19
avl2.delete(int2)                                                       # STEP 20
avl0.insert(int0)                                                       # STEP 21
int2 = 9                                                                # STEP 22
int1 = 5                                                                # STEP 23
int0 = 15                                                               # STEP 24
avl0.delete(int2)                                                       # STEP 25
avl2.insert(int2)                                                       # STEP 26
result = avl2.find(int3)                                                # STEP 27
avl2.insert(int1)                                                       # STEP 28
int2 = 16                                                               # STEP 29
avl0.insert(int0)                                                       # STEP 30
int0 = 3                                                                # STEP 31
int3 = 20                                                               # STEP 32
avl2.insert(int0)                                                       # STEP 33
avl2.insert(int0)                                                       # STEP 34
avl0 == avl2                                                            # STEP 35
int0 = 6                                                                # STEP 36
int1 = 4                                                                # STEP 37
avl2.insert(int3)                                                       # STEP 38
avl1 = avl.AVLTree()                                                    # STEP 39
avl1 == avl2                                                            # STEP 40
avl0.insert(int3)                                                       # STEP 41
result = avl2.find(int2)                                                # STEP 42
avl1 == avl0                                                            # STEP 43
avl0.insert(int0)                                                       # STEP 44
int0 = 19                                                               # STEP 45
int2 = 3                                                                # STEP 46
int3 = 5                                                                # STEP 47
result = avl0.inorder()                                                 # STEP 48
avl1 == avl2                                                            # STEP 49
avl2.insert(int0)                                                       # STEP 50
int0 = 5                                                                # STEP 51
avl0.insert(int1)                                                       # STEP 52
int1 = 17                                                               # STEP 53
result = avl2.inorder()                                                 # STEP 54
avl2.insert(int3)                                                       # STEP 55
avl1.delete(int1)                                                       # STEP 56
avl2.delete(int3)                                                       # STEP 57
avl0 == avl2                                                            # STEP 58
avl2 = avl.AVLTree()                                                    # STEP 59
int3 = 18                                                               # STEP 60
avl0.delete(int3)                                                       # STEP 61
result = avl2.find(int1)                                                # STEP 62
result = avl1.find(int2)                                                # STEP 63
int1 = 4                                                                # STEP 64
int3 = 12                                                               # STEP 65
avl1.insert(int2)                                                       # STEP 66
result = avl2.find(int2)                                                # STEP 67
avl0 == avl1                                                            # STEP 68
avl2.delete(int2)                                                       # STEP 69
int2 = 14                                                               # STEP 70
result = avl1.find(int2)                                                # STEP 71
int2 = 12                                                               # STEP 72
avl1.insert(int0)                                                       # STEP 73
result = avl0.find(int2)                                                # STEP 74
avl1.insert(int2)                                                       # STEP 75
int2 = 20                                                               # STEP 76
avl2.delete(int2)                                                       # STEP 77
avl0.delete(int3)                                                       # STEP 78
avl1.insert(int0)                                                       # STEP 79
int0 = 3                                                                # STEP 80
avl1.delete(int1)                                                       # STEP 81
avl1.insert(int2)                                                       # STEP 82
int2 = 12                                                               # STEP 83
avl1.insert(int0)                                                       # STEP 84
avl1.insert(int0)                                                       # STEP 85
int1 = 18                                                               # STEP 86
avl1.insert(int3)                                                       # STEP 87
int3 = 15                                                               # STEP 88
avl1 == avl0                                                            # STEP 89
avl1.delete(int1)                                                       # STEP 90
avl0.delete(int3)                                                       # STEP 91
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103974c68>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
198 BRANCHES COVERED
148 STATEMENTS COVERED

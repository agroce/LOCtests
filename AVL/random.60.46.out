Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.103.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  9 [2:0]
-- < 3 [1:0]
---- < 1 [0:0] L
---- > 7 [0:0] L
-- > 19 [1:0]
---- < 12 [0:0] L
---- > 20 [0:0] L
set([1, 3, 7, 9, 12, 19, 20])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104c8b170>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 60 steps

SAVING TEST AS failure.103.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 19                                                                # STEP 0
ACTION: int2 = 19 
int2 = None : <type 'NoneType'>
=> int2 = 19 : <type 'int'>
==================================================
int1 = 8                                                                 # STEP 1
ACTION: int1 = 8 
int1 = None : <type 'NoneType'>
=> int1 = 8 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 2
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x104c8b128> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl2.find(int1)                                                 # STEP 3
ACTION: result = avl2.find(int1) 
int1 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104c8b128> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int0 = 7                                                                 # STEP 4
ACTION: int0 = 7 
int0 = None : <type 'NoneType'>
=> int0 = 7 : <type 'int'>
==================================================
result = avl2.find(int0)                                                 # STEP 5
ACTION: result = avl2.find(int0) 
int0 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104c8b128> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
int3 = 9                                                                 # STEP 6
ACTION: int3 = 9 
int3 = None : <type 'NoneType'>
=> int3 = 9 : <type 'int'>
==================================================
int1 = 7                                                                 # STEP 7
ACTION: int1 = 7 
int1 = 8 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
int0 = 20                                                                # STEP 8
ACTION: int0 = 20 
int0 = 7 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
avl2.delete(int3)                                                        # STEP 9
ACTION: avl2.delete(int3) 
int3 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104c8b128> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int3 = 12                                                               # STEP 10
ACTION: int3 = 12 
int3 = 9 : <type 'int'>
=> int3 = 12 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 11
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104c8b128> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl2.find(int1)                                                # STEP 12
ACTION: result = avl2.find(int1) 
int1 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104c8b128> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl2 = avl.AVLTree()                                                    # STEP 13
ACTION: avl2 = avl.AVLTree() 
avl2 = <avl.AVLTree instance at 0x104c8b128> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
=> avl2 = <avl.AVLTree instance at 0x10585def0> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
==================================================
int1 = 11                                                               # STEP 14
ACTION: int1 = 11 
int1 = 7 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 15
ACTION: avl2.insert(int3) 
int3 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10585def0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([12]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 16
ACTION: avl2.insert(int2) 
int2 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10585def0> : <type 'instance'>
avl_REF2 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([19, 12]) : <type 'set'>
==================================================
int3 = 10                                                               # STEP 17
ACTION: int3 = 10 
int3 = 12 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 18
ACTION: avl2.insert(int2) 
int2 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10585def0> : <type 'instance'>
avl_REF2 = set([19, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl2.delete(int1)                                                       # STEP 19
ACTION: avl2.delete(int1) 
int1 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10585def0> : <type 'instance'>
avl_REF2 = set([19, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int2 = 3                                                                # STEP 20
ACTION: int2 = 3 
int2 = 19 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
int1 = 7                                                                # STEP 21
ACTION: int1 = 7 
int1 = 11 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
result = avl2.find(int2)                                                # STEP 22
ACTION: result = avl2.find(int2) 
int2 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10585def0> : <type 'instance'>
avl_REF2 = set([19, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int2 = 15                                                               # STEP 23
ACTION: int2 = 15 
int2 = 3 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 24
ACTION: avl2.delete(int3) 
int3 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10585def0> : <type 'instance'>
avl_REF2 = set([19, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int3 = 16                                                               # STEP 25
ACTION: int3 = 16 
int3 = 10 : <type 'int'>
=> int3 = 16 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 26
ACTION: avl2.insert(int0) 
int0 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10585def0> : <type 'instance'>
avl_REF2 = set([19, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([20, 19, 12]) : <type 'set'>
==================================================
int0 = 9                                                                # STEP 27
ACTION: int0 = 9 
int0 = 20 : <type 'int'>
=> int0 = 9 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 28
ACTION: avl2.delete(int3) 
int3 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10585def0> : <type 'instance'>
avl_REF2 = set([20, 19, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int3 = 7                                                                # STEP 29
ACTION: int3 = 7 
int3 = 16 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
result = avl2.find(int2)                                                # STEP 30
ACTION: result = avl2.find(int2) 
int2 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10585def0> : <type 'instance'>
avl_REF2 = set([20, 19, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl2.insert(int1)                                                       # STEP 31
ACTION: avl2.insert(int1) 
int1 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10585def0> : <type 'instance'>
avl_REF2 = set([20, 19, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([20, 19, 12, 7]) : <type 'set'>
==================================================
int2 = 3                                                                # STEP 32
ACTION: int2 = 3 
int2 = 15 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
int1 = 19                                                               # STEP 33
ACTION: int1 = 19 
int1 = 7 : <type 'int'>
=> int1 = 19 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 34
ACTION: avl2.insert(int3) 
int3 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10585def0> : <type 'instance'>
avl_REF2 = set([20, 19, 12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
int3 = 5                                                                # STEP 35
ACTION: int3 = 5 
int3 = 7 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 36
ACTION: avl2.insert(int0) 
int0 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10585def0> : <type 'instance'>
avl_REF2 = set([20, 19, 12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([20, 19, 12, 9, 7]) : <type 'set'>
==================================================
int0 = 1                                                                # STEP 37
ACTION: int0 = 1 
int0 = 9 : <type 'int'>
=> int0 = 1 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 38
ACTION: avl2.delete(int3) 
int3 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10585def0> : <type 'instance'>
avl_REF2 = set([20, 19, 12, 9, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.insert(int2)                                                       # STEP 39
ACTION: avl2.insert(int2) 
int2 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10585def0> : <type 'instance'>
avl_REF2 = set([20, 19, 12, 9, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([3, 7, 9, 12, 19, 20]) : <type 'set'>
==================================================
int3 = 1                                                                # STEP 40
ACTION: int3 = 1 
int3 = 5 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
int2 = 17                                                               # STEP 41
ACTION: int2 = 17 
int2 = 3 : <type 'int'>
=> int2 = 17 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 42
ACTION: avl2.insert(int3) 
int3 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10585def0> : <type 'instance'>
avl_REF2 = set([3, 7, 9, 12, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([1, 3, 7, 9, 12, 19, 20]) : <type 'set'>
==================================================
int3 = 8                                                                # STEP 43
ACTION: int3 = 8 
int3 = 1 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
avl2.display()                                                          # STEP 44
ACTION: avl2.display() 
avl2 = <avl.AVLTree instance at 0x10585def0> : <type 'instance'>
avl_REF2 = set([1, 3, 7, 9, 12, 19, 20]) : <type 'set'>
  9 [2:0]
-- < 3 [1:0]
---- < 1 [0:0] L
---- > 7 [0:0] L
-- > 19 [1:0]
---- < 12 [0:0] L
---- > 20 [0:0] L
REFERENCE ACTION: print(avl_REF2) 
set([1, 3, 7, 9, 12, 19, 20])
==================================================
avl2.delete(int3)                                                       # STEP 45
ACTION: avl2.delete(int3) 
int3 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10585def0> : <type 'instance'>
avl_REF2 = set([1, 3, 7, 9, 12, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int3 = 16                                                               # STEP 46
ACTION: int3 = 16 
int3 = 8 : <type 'int'>
=> int3 = 16 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 47
ACTION: avl2.delete(int3) 
int3 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10585def0> : <type 'instance'>
avl_REF2 = set([1, 3, 7, 9, 12, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.insert(int1)                                                       # STEP 48
ACTION: avl2.insert(int1) 
int1 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10585def0> : <type 'instance'>
avl_REF2 = set([1, 3, 7, 9, 12, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
int1 = 18                                                               # STEP 49
ACTION: int1 = 18 
int1 = 19 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 50
ACTION: avl2.delete(int1) 
int1 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10585def0> : <type 'instance'>
avl_REF2 = set([1, 3, 7, 9, 12, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int1 = 5                                                                # STEP 51
ACTION: int1 = 5 
int1 = 18 : <type 'int'>
=> int1 = 5 : <type 'int'>
==================================================
result = avl2.find(int2)                                                # STEP 52
ACTION: result = avl2.find(int2) 
int2 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10585def0> : <type 'instance'>
avl_REF2 = set([1, 3, 7, 9, 12, 19, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int3 = 4                                                                # STEP 53
ACTION: int3 = 4 
int3 = 16 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
int2 = 17                                                               # STEP 54
ACTION: int2 = 17 
int2 = 17 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 55
ACTION: avl2.insert(int3) 
int3 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10585def0> : <type 'instance'>
avl_REF2 = set([1, 3, 7, 9, 12, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([1, 3, 4, 7, 9, 12, 19, 20]) : <type 'set'>
==================================================
result = avl2.find(int1)                                                # STEP 56
ACTION: result = avl2.find(int1) 
int1 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10585def0> : <type 'instance'>
avl_REF2 = set([1, 3, 4, 7, 9, 12, 19, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int3 = 2                                                                # STEP 57
ACTION: int3 = 2 
int3 = 4 : <type 'int'>
=> int3 = 2 : <type 'int'>
==================================================
int1 = 15                                                               # STEP 58
ACTION: int1 = 15 
int1 = 5 : <type 'int'>
=> int1 = 15 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 59
ACTION: avl2.delete(int0) 
int0 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10585def0> : <type 'instance'>
avl_REF2 = set([1, 3, 4, 7, 9, 12, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([3, 4, 7, 9, 12, 19, 20]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10588d560>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
  12 [2:0]
-- < 7 [1:0]
---- < 2 [0:0] L
---- > 9 [0:0] L
-- > 17 [1:1]
---- < 15 [0:0] L
set([2, 7, 9, 12, 15, 17])
TEST #4 STEP #56 (0:00:30.035362) Fri Apr 28 05:32:40 2017 [ 145 stmts 195 branches ]
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 28
STOPPING TESTING DUE TO TIMEOUT
8.44927044452 PERCENT COVERED
60.1906821728 TOTAL RUNTIME
8 EXECUTED
688 TOTAL TEST OPERATIONS
27.4721753597 TIME SPENT EXECUTING TEST OPERATIONS
0.0251348018646 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
27.6088562012 TIME SPENT CHECKING PROPERTIES
55.0810315609 TOTAL TIME SPENT RUNNING SUT
0.00509691238403 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int2 = 19                                                                # STEP 0
int1 = 8                                                                 # STEP 1
avl2 = avl.AVLTree()                                                     # STEP 2
result = avl2.find(int1)                                                 # STEP 3
int0 = 7                                                                 # STEP 4
result = avl2.find(int0)                                                 # STEP 5
int3 = 9                                                                 # STEP 6
int1 = 7                                                                 # STEP 7
int0 = 20                                                                # STEP 8
avl2.delete(int3)                                                        # STEP 9
int3 = 12                                                               # STEP 10
result = avl2.inorder()                                                 # STEP 11
result = avl2.find(int1)                                                # STEP 12
avl2 = avl.AVLTree()                                                    # STEP 13
int1 = 11                                                               # STEP 14
avl2.insert(int3)                                                       # STEP 15
avl2.insert(int2)                                                       # STEP 16
int3 = 10                                                               # STEP 17
avl2.insert(int2)                                                       # STEP 18
avl2.delete(int1)                                                       # STEP 19
int2 = 3                                                                # STEP 20
int1 = 7                                                                # STEP 21
result = avl2.find(int2)                                                # STEP 22
int2 = 15                                                               # STEP 23
avl2.delete(int3)                                                       # STEP 24
int3 = 16                                                               # STEP 25
avl2.insert(int0)                                                       # STEP 26
int0 = 9                                                                # STEP 27
avl2.delete(int3)                                                       # STEP 28
int3 = 7                                                                # STEP 29
result = avl2.find(int2)                                                # STEP 30
avl2.insert(int1)                                                       # STEP 31
int2 = 3                                                                # STEP 32
int1 = 19                                                               # STEP 33
avl2.insert(int3)                                                       # STEP 34
int3 = 5                                                                # STEP 35
avl2.insert(int0)                                                       # STEP 36
int0 = 1                                                                # STEP 37
avl2.delete(int3)                                                       # STEP 38
avl2.insert(int2)                                                       # STEP 39
int3 = 1                                                                # STEP 40
int2 = 17                                                               # STEP 41
avl2.insert(int3)                                                       # STEP 42
int3 = 8                                                                # STEP 43
avl2.display()                                                          # STEP 44
avl2.delete(int3)                                                       # STEP 45
int3 = 16                                                               # STEP 46
avl2.delete(int3)                                                       # STEP 47
avl2.insert(int1)                                                       # STEP 48
int1 = 18                                                               # STEP 49
avl2.delete(int1)                                                       # STEP 50
int1 = 5                                                                # STEP 51
result = avl2.find(int2)                                                # STEP 52
int3 = 4                                                                # STEP 53
int2 = 17                                                               # STEP 54
avl2.insert(int3)                                                       # STEP 55
result = avl2.find(int1)                                                # STEP 56
int3 = 2                                                                # STEP 57
int1 = 15                                                               # STEP 58
avl2.delete(int0)                                                       # STEP 59
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10588d560>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
212 BRANCHES COVERED
159 STATEMENTS COVERED

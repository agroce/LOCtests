Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.269.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  17 [2:0]
-- < 11 [1:0]
---- < 9 [0:0] L
---- > 12 [0:0] L
-- > 18 [1:-1]
---- > 20 [0:0] L
set([9, 11, 12, 17, 18, 20])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104b21878>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 41 steps

SAVING TEST AS failure.269.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 19                                                                # STEP 0
ACTION: int2 = 19 
int2 = None : <type 'NoneType'>
=> int2 = 19 : <type 'int'>
==================================================
int1 = 2                                                                 # STEP 1
ACTION: int1 = 2 
int1 = None : <type 'NoneType'>
=> int1 = 2 : <type 'int'>
==================================================
int0 = 7                                                                 # STEP 2
ACTION: int0 = 7 
int0 = None : <type 'NoneType'>
=> int0 = 7 : <type 'int'>
==================================================
int3 = 1                                                                 # STEP 3
ACTION: int3 = 1 
int3 = None : <type 'NoneType'>
=> int3 = 1 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 4
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x104b15128> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.insert(int3)                                                        # STEP 5
ACTION: avl0.insert(int3) 
int3 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104b15128> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([1]) : <type 'set'>
==================================================
int3 = 8                                                                 # STEP 6
ACTION: int3 = 8 
int3 = 1 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
avl0.insert(int1)                                                        # STEP 7
ACTION: avl0.insert(int1) 
int1 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104b15128> : <type 'instance'>
avl_REF0 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([1, 2]) : <type 'set'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 8
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x104b15d88> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.delete(int0)                                                        # STEP 9
ACTION: avl2.delete(int0) 
int0 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b15d88> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.delete(int0)                                                       # STEP 10
ACTION: avl2.delete(int0) 
int0 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b15d88> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.insert(int2)                                                       # STEP 11
ACTION: avl2.insert(int2) 
int2 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b15d88> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([19]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 12
ACTION: avl0.delete(int1) 
int1 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104b15128> : <type 'instance'>
avl_REF0 = set([1, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([1]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 13
ACTION: avl0.delete(int1) 
int1 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104b15128> : <type 'instance'>
avl_REF0 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.delete(int2)                                                       # STEP 14
ACTION: avl0.delete(int2) 
int2 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104b15128> : <type 'instance'>
avl_REF0 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl2 == avl2                                                            # STEP 15
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x104b15d88> : <type 'instance'>
avl_REF2 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
int2 = 15                                                               # STEP 16
ACTION: int2 = 15 
int2 = 19 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
int1 = 10                                                               # STEP 17
ACTION: int1 = 10 
int1 = 2 : <type 'int'>
=> int1 = 10 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 18
ACTION: avl2.delete(int1) 
int1 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b15d88> : <type 'instance'>
avl_REF2 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
result = avl0.find(int1)                                                # STEP 19
ACTION: result = avl0.find(int1) 
int1 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104b15128> : <type 'instance'>
avl_REF0 = set([1]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
result = avl2.find(int1)                                                # STEP 20
ACTION: result = avl2.find(int1) 
int1 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b15d88> : <type 'instance'>
avl_REF2 = set([19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl0.insert(int3)                                                       # STEP 21
ACTION: avl0.insert(int3) 
int3 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104b15128> : <type 'instance'>
avl_REF0 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([8, 1]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 22
ACTION: avl2.delete(int1) 
int1 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b15d88> : <type 'instance'>
avl_REF2 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.delete(int3)                                                       # STEP 23
ACTION: avl2.delete(int3) 
int3 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b15d88> : <type 'instance'>
avl_REF2 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int1 = 19                                                               # STEP 24
ACTION: int1 = 19 
int1 = 10 : <type 'int'>
=> int1 = 19 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 25
ACTION: avl0.insert(int0) 
int0 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104b15128> : <type 'instance'>
avl_REF0 = set([8, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([8, 1, 7]) : <type 'set'>
==================================================
int3 = 15                                                               # STEP 26
ACTION: int3 = 15 
int3 = 8 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 27
ACTION: avl2.insert(int1) 
int1 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b15d88> : <type 'instance'>
avl_REF2 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
int0 = 9                                                                # STEP 28
ACTION: int0 = 9 
int0 = 7 : <type 'int'>
=> int0 = 9 : <type 'int'>
==================================================
int1 = 8                                                                # STEP 29
ACTION: int1 = 8 
int1 = 19 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 30
ACTION: avl2.insert(int3) 
int3 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b15d88> : <type 'instance'>
avl_REF2 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([19, 15]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 31
ACTION: avl2.insert(int0) 
int0 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b15d88> : <type 'instance'>
avl_REF2 = set([19, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([9, 19, 15]) : <type 'set'>
==================================================
int0 = 11                                                               # STEP 32
ACTION: int0 = 11 
int0 = 9 : <type 'int'>
=> int0 = 11 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 33
ACTION: avl0.insert(int3) 
int3 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104b15128> : <type 'instance'>
avl_REF0 = set([8, 1, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([8, 1, 15, 7]) : <type 'set'>
==================================================
int3 = 15                                                               # STEP 34
ACTION: int3 = 15 
int3 = 15 : <type 'int'>
==================================================
result = avl2.find(int1)                                                # STEP 35
ACTION: result = avl2.find(int1) 
int1 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b15d88> : <type 'instance'>
avl_REF2 = set([9, 19, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int1 = 17                                                               # STEP 36
ACTION: int1 = 17 
int1 = 8 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
result = avl2.find(int1)                                                # STEP 37
ACTION: result = avl2.find(int1) 
int1 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b15d88> : <type 'instance'>
avl_REF2 = set([9, 19, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl0.delete(int2)                                                       # STEP 38
ACTION: avl0.delete(int2) 
int2 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104b15128> : <type 'instance'>
avl_REF0 = set([8, 1, 15, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([8, 1, 7]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 39
ACTION: avl2.insert(int0) 
int0 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b15d88> : <type 'instance'>
avl_REF2 = set([9, 19, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([11, 9, 19, 15]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 40
ACTION: avl2.delete(int3) 
int3 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b15d88> : <type 'instance'>
avl_REF2 = set([11, 9, 19, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([11, 9, 19]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104a58518>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104a983b0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 52 steps

SAVING TEST AS failure.269.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 5                                                                 # STEP 0
ACTION: int1 = 5 
int1 = None : <type 'NoneType'>
=> int1 = 5 : <type 'int'>
==================================================
int0 = 9                                                                 # STEP 1
ACTION: int0 = 9 
int0 = None : <type 'NoneType'>
=> int0 = 9 : <type 'int'>
==================================================
int3 = 3                                                                 # STEP 2
ACTION: int3 = 3 
int3 = None : <type 'NoneType'>
=> int3 = 3 : <type 'int'>
==================================================
int2 = 11                                                                # STEP 3
ACTION: int2 = 11 
int2 = None : <type 'NoneType'>
=> int2 = 11 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 4
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x104a987e8> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
result = avl0.find(int0)                                                 # STEP 5
ACTION: result = avl0.find(int0) 
int0 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104a987e8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
int0 = 18                                                                # STEP 6
ACTION: int0 = 18 
int0 = 9 : <type 'int'>
=> int0 = 18 : <type 'int'>
==================================================
avl0.delete(int1)                                                        # STEP 7
ACTION: avl0.delete(int1) 
int1 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104a987e8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int1 = 12                                                                # STEP 8
ACTION: int1 = 12 
int1 = 5 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 9
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x104a57560> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 10
ACTION: avl2.delete(int0) 
int0 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a57560> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl0.delete(int2)                                                       # STEP 11
ACTION: avl0.delete(int2) 
int2 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104a987e8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl2.insert(int3)                                                       # STEP 12
ACTION: avl2.insert(int3) 
int3 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a57560> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([3]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 13
ACTION: avl0.insert(int0) 
int0 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104a987e8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([18]) : <type 'set'>
==================================================
int0 = 3                                                                # STEP 14
ACTION: int0 = 3 
int0 = 18 : <type 'int'>
=> int0 = 3 : <type 'int'>
==================================================
int2 = 4                                                                # STEP 15
ACTION: int2 = 4 
int2 = 11 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 16
ACTION: avl2.delete(int2) 
int2 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a57560> : <type 'instance'>
avl_REF2 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.insert(int2)                                                       # STEP 17
ACTION: avl2.insert(int2) 
int2 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a57560> : <type 'instance'>
avl_REF2 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([3, 4]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 18
ACTION: avl2.insert(int1) 
int1 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a57560> : <type 'instance'>
avl_REF2 = set([3, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([12, 3, 4]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 19
ACTION: avl2.delete(int3) 
int3 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a57560> : <type 'instance'>
avl_REF2 = set([12, 3, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([12, 4]) : <type 'set'>
==================================================
result = avl2.find(int2)                                                # STEP 20
ACTION: result = avl2.find(int2) 
int2 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a57560> : <type 'instance'>
avl_REF2 = set([12, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl2.delete(int1)                                                       # STEP 21
ACTION: avl2.delete(int1) 
int1 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a57560> : <type 'instance'>
avl_REF2 = set([12, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([4]) : <type 'set'>
==================================================
int1 = 2                                                                # STEP 22
ACTION: int1 = 2 
int1 = 12 : <type 'int'>
=> int1 = 2 : <type 'int'>
==================================================
int2 = 16                                                               # STEP 23
ACTION: int2 = 16 
int2 = 4 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
result = avl2.find(int1)                                                # STEP 24
ACTION: result = avl2.find(int1) 
int1 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a57560> : <type 'instance'>
avl_REF2 = set([4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int1 = 2                                                                # STEP 25
ACTION: int1 = 2 
int1 = 2 : <type 'int'>
==================================================
avl2 == avl0                                                            # STEP 26
ACTION: avl2 == avl0 
avl2 = <avl.AVLTree instance at 0x104a57560> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x104a987e8> : <type 'instance'>
avl_REF2 = set([4]) : <type 'set'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF0 
==================================================
avl2.insert(int3)                                                       # STEP 27
ACTION: avl2.insert(int3) 
int3 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a57560> : <type 'instance'>
avl_REF2 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([3, 4]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 28
ACTION: avl0.delete(int3) 
int3 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104a987e8> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.insert(int1)                                                       # STEP 29
ACTION: avl0.insert(int1) 
int1 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104a987e8> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([18, 2]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 30
ACTION: avl0.delete(int0) 
int0 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104a987e8> : <type 'instance'>
avl_REF0 = set([18, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int1 = 10                                                               # STEP 31
ACTION: int1 = 10 
int1 = 2 : <type 'int'>
=> int1 = 10 : <type 'int'>
==================================================
int0 = 9                                                                # STEP 32
ACTION: int0 = 9 
int0 = 3 : <type 'int'>
=> int0 = 9 : <type 'int'>
==================================================
avl2 == avl0                                                            # STEP 33
ACTION: avl2 == avl0 
avl2 = <avl.AVLTree instance at 0x104a57560> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x104a987e8> : <type 'instance'>
avl_REF2 = set([3, 4]) : <type 'set'>
avl_REF0 = set([18, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF0 
==================================================
avl0.delete(int1)                                                       # STEP 34
ACTION: avl0.delete(int1) 
int1 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104a987e8> : <type 'instance'>
avl_REF0 = set([18, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl2.insert(int0)                                                       # STEP 35
ACTION: avl2.insert(int0) 
int0 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a57560> : <type 'instance'>
avl_REF2 = set([3, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([9, 3, 4]) : <type 'set'>
==================================================
result = avl2.find(int3)                                                # STEP 36
ACTION: result = avl2.find(int3) 
int3 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a57560> : <type 'instance'>
avl_REF2 = set([9, 3, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl2.insert(int1)                                                       # STEP 37
ACTION: avl2.insert(int1) 
int1 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a57560> : <type 'instance'>
avl_REF2 = set([9, 3, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([9, 10, 3, 4]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 38
ACTION: avl0.insert(int1) 
int1 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104a987e8> : <type 'instance'>
avl_REF0 = set([18, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([18, 10, 2]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 39
ACTION: avl0.delete(int2) 
int2 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104a987e8> : <type 'instance'>
avl_REF0 = set([18, 10, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl1 = avl.AVLTree()                                                    # STEP 40
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x104aa7b48> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 41
ACTION: avl2.delete(int2) 
int2 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a57560> : <type 'instance'>
avl_REF2 = set([9, 10, 3, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl1.delete(int0)                                                       # STEP 42
ACTION: avl1.delete(int0) 
int0 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104aa7b48> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.delete(int0)                                                       # STEP 43
ACTION: avl1.delete(int0) 
int0 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104aa7b48> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int1 = 6                                                                # STEP 44
ACTION: int1 = 6 
int1 = 10 : <type 'int'>
=> int1 = 6 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 45
ACTION: avl2.delete(int1) 
int1 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a57560> : <type 'instance'>
avl_REF2 = set([9, 10, 3, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int2 = 3                                                                # STEP 46
ACTION: int2 = 3 
int2 = 16 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
int0 = 3                                                                # STEP 47
ACTION: int0 = 3 
int0 = 9 : <type 'int'>
=> int0 = 3 : <type 'int'>
==================================================
int1 = 4                                                                # STEP 48
ACTION: int1 = 4 
int1 = 6 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 49
ACTION: avl1.delete(int1) 
int1 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104aa7b48> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.delete(int3)                                                       # STEP 50
ACTION: avl1.delete(int3) 
int3 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104aa7b48> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl2.delete(int0)                                                       # STEP 51
ACTION: avl2.delete(int0) 
int0 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a57560> : <type 'instance'>
avl_REF2 = set([9, 10, 3, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([9, 10, 4]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104ab08c0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
TEST #5 STEP #0 (0:00:30.889335) Fri Apr 28 05:56:02 2017 [ 161 stmts 214 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104ab5f38>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 62 steps

SAVING TEST AS failure.269.test.2
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 8                                                                 # STEP 0
ACTION: int1 = 8 
int1 = None : <type 'NoneType'>
=> int1 = 8 : <type 'int'>
==================================================
int3 = 5                                                                 # STEP 1
ACTION: int3 = 5 
int3 = None : <type 'NoneType'>
=> int3 = 5 : <type 'int'>
==================================================
int2 = 8                                                                 # STEP 2
ACTION: int2 = 8 
int2 = None : <type 'NoneType'>
=> int2 = 8 : <type 'int'>
==================================================
int0 = 1                                                                 # STEP 3
ACTION: int0 = 1 
int0 = None : <type 'NoneType'>
=> int0 = 1 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x104abd6c8> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int0)                                                        # STEP 5
ACTION: avl2.insert(int0) 
int0 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104abd6c8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([1]) : <type 'set'>
==================================================
avl2.delete(int3)                                                        # STEP 6
ACTION: avl2.delete(int3) 
int3 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104abd6c8> : <type 'instance'>
avl_REF2 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.delete(int1)                                                        # STEP 7
ACTION: avl2.delete(int1) 
int1 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104abd6c8> : <type 'instance'>
avl_REF2 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
result = avl2.inorder()                                                  # STEP 8
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104abd6c8> : <type 'instance'>
avl_REF2 = set([1]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int2)                                                        # STEP 9
ACTION: avl2.delete(int2) 
int2 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104abd6c8> : <type 'instance'>
avl_REF2 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int3 = 20                                                               # STEP 10
ACTION: int3 = 20 
int3 = 5 : <type 'int'>
=> int3 = 20 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 11
ACTION: avl2.insert(int3) 
int3 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104abd6c8> : <type 'instance'>
avl_REF2 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([1, 20]) : <type 'set'>
==================================================
result = avl2.find(int2)                                                # STEP 12
ACTION: result = avl2.find(int2) 
int2 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104abd6c8> : <type 'instance'>
avl_REF2 = set([1, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl2 == avl2                                                            # STEP 13
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x104abd6c8> : <type 'instance'>
avl_REF2 = set([1, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl2.delete(int2)                                                       # STEP 14
ACTION: avl2.delete(int2) 
int2 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104abd6c8> : <type 'instance'>
avl_REF2 = set([1, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
result = avl2.find(int3)                                                # STEP 15
ACTION: result = avl2.find(int3) 
int3 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104abd6c8> : <type 'instance'>
avl_REF2 = set([1, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl2.insert(int2)                                                       # STEP 16
ACTION: avl2.insert(int2) 
int2 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104abd6c8> : <type 'instance'>
avl_REF2 = set([1, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([8, 1, 20]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 17
ACTION: avl2.delete(int2) 
int2 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104abd6c8> : <type 'instance'>
avl_REF2 = set([8, 1, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([1, 20]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 18
ACTION: avl2.delete(int3) 
int3 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104abd6c8> : <type 'instance'>
avl_REF2 = set([1, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([1]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 19
ACTION: avl2.delete(int0) 
int0 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104abd6c8> : <type 'instance'>
avl_REF2 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2 == avl2                                                            # STEP 20
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x104abd6c8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl2.insert(int3)                                                       # STEP 21
ACTION: avl2.insert(int3) 
int3 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104abd6c8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([20]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 22
ACTION: avl2.insert(int2) 
int2 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104abd6c8> : <type 'instance'>
avl_REF2 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([8, 20]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 23
ACTION: avl2.insert(int0) 
int0 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104abd6c8> : <type 'instance'>
avl_REF2 = set([8, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([8, 1, 20]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 24
ACTION: avl2.insert(int2) 
int2 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104abd6c8> : <type 'instance'>
avl_REF2 = set([8, 1, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl2.delete(int1)                                                       # STEP 25
ACTION: avl2.delete(int1) 
int1 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104abd6c8> : <type 'instance'>
avl_REF2 = set([8, 1, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([1, 20]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 26
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104abd6c8> : <type 'instance'>
avl_REF2 = set([1, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int1)                                                       # STEP 27
ACTION: avl2.delete(int1) 
int1 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104abd6c8> : <type 'instance'>
avl_REF2 = set([1, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
result = avl2.inorder()                                                 # STEP 28
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104abd6c8> : <type 'instance'>
avl_REF2 = set([1, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int3)                                                       # STEP 29
ACTION: avl2.delete(int3) 
int3 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104abd6c8> : <type 'instance'>
avl_REF2 = set([1, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([1]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 30
ACTION: avl2.insert(int1) 
int1 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104abd6c8> : <type 'instance'>
avl_REF2 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([8, 1]) : <type 'set'>
==================================================
int1 = 13                                                               # STEP 31
ACTION: int1 = 13 
int1 = 8 : <type 'int'>
=> int1 = 13 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 32
ACTION: avl2.insert(int1) 
int1 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104abd6c8> : <type 'instance'>
avl_REF2 = set([8, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([8, 1, 13]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 33
ACTION: avl2.delete(int2) 
int2 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104abd6c8> : <type 'instance'>
avl_REF2 = set([8, 1, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([1, 13]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 34
ACTION: avl2.delete(int3) 
int3 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104abd6c8> : <type 'instance'>
avl_REF2 = set([1, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.insert(int1)                                                       # STEP 35
ACTION: avl2.insert(int1) 
int1 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104abd6c8> : <type 'instance'>
avl_REF2 = set([1, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
result = avl2.inorder()                                                 # STEP 36
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104abd6c8> : <type 'instance'>
avl_REF2 = set([1, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int2)                                                       # STEP 37
ACTION: avl2.delete(int2) 
int2 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104abd6c8> : <type 'instance'>
avl_REF2 = set([1, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int1 = 1                                                                # STEP 38
ACTION: int1 = 1 
int1 = 13 : <type 'int'>
=> int1 = 1 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 39
ACTION: avl2.insert(int1) 
int1 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104abd6c8> : <type 'instance'>
avl_REF2 = set([1, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
result = avl2.find(int1)                                                # STEP 40
ACTION: result = avl2.find(int1) 
int1 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104abd6c8> : <type 'instance'>
avl_REF2 = set([1, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
result = avl2.inorder()                                                 # STEP 41
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104abd6c8> : <type 'instance'>
avl_REF2 = set([1, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int2 = 6                                                                # STEP 42
ACTION: int2 = 6 
int2 = 8 : <type 'int'>
=> int2 = 6 : <type 'int'>
==================================================
int1 = 13                                                               # STEP 43
ACTION: int1 = 13 
int1 = 1 : <type 'int'>
=> int1 = 13 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 44
ACTION: avl2.delete(int3) 
int3 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104abd6c8> : <type 'instance'>
avl_REF2 = set([1, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.delete(int2)                                                       # STEP 45
ACTION: avl2.delete(int2) 
int2 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104abd6c8> : <type 'instance'>
avl_REF2 = set([1, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int2 = 13                                                               # STEP 46
ACTION: int2 = 13 
int2 = 6 : <type 'int'>
=> int2 = 13 : <type 'int'>
==================================================
int3 = 19                                                               # STEP 47
ACTION: int3 = 19 
int3 = 20 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
result = avl2.find(int3)                                                # STEP 48
ACTION: result = avl2.find(int3) 
int3 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104abd6c8> : <type 'instance'>
avl_REF2 = set([1, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
int3 = 20                                                               # STEP 49
ACTION: int3 = 20 
int3 = 19 : <type 'int'>
=> int3 = 20 : <type 'int'>
==================================================
result = avl2.find(int1)                                                # STEP 50
ACTION: result = avl2.find(int1) 
int1 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104abd6c8> : <type 'instance'>
avl_REF2 = set([1, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl2.delete(int1)                                                       # STEP 51
ACTION: avl2.delete(int1) 
int1 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104abd6c8> : <type 'instance'>
avl_REF2 = set([1, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([1]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 52
ACTION: avl2.delete(int3) 
int3 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104abd6c8> : <type 'instance'>
avl_REF2 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.insert(int1)                                                       # STEP 53
ACTION: avl2.insert(int1) 
int1 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104abd6c8> : <type 'instance'>
avl_REF2 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([1, 13]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 54
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104abd6c8> : <type 'instance'>
avl_REF2 = set([1, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int1 = 19                                                               # STEP 55
ACTION: int1 = 19 
int1 = 13 : <type 'int'>
=> int1 = 19 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 56
ACTION: avl2.delete(int3) 
int3 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104abd6c8> : <type 'instance'>
avl_REF2 = set([1, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.insert(int1)                                                       # STEP 57
ACTION: avl2.insert(int1) 
int1 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104abd6c8> : <type 'instance'>
avl_REF2 = set([1, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([1, 19, 13]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 58
ACTION: avl2.insert(int3) 
int3 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104abd6c8> : <type 'instance'>
avl_REF2 = set([1, 19, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([1, 19, 20, 13]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 59
ACTION: avl2.insert(int0) 
int0 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104abd6c8> : <type 'instance'>
avl_REF2 = set([1, 19, 20, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
int1 = 9                                                                # STEP 60
ACTION: int1 = 9 
int1 = 19 : <type 'int'>
=> int1 = 9 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 61
ACTION: avl2.delete(int0) 
int0 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104abd6c8> : <type 'instance'>
avl_REF2 = set([1, 19, 20, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([19, 20, 13]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105914dd0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 3 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104dfe830>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
Original test has 42 steps

SAVING TEST AS failure.269.test.3
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
avl0 = avl.AVLTree()                                                     # STEP 0
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x104eb4cf8> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
result = avl0.inorder()                                                  # STEP 1
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104eb4cf8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int0 = 19                                                                # STEP 2
ACTION: int0 = 19 
int0 = None : <type 'NoneType'>
=> int0 = 19 : <type 'int'>
==================================================
avl0.insert(int0)                                                        # STEP 3
ACTION: avl0.insert(int0) 
int0 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104eb4cf8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([19]) : <type 'set'>
==================================================
int2 = 16                                                                # STEP 4
ACTION: int2 = 16 
int2 = None : <type 'NoneType'>
=> int2 = 16 : <type 'int'>
==================================================
int3 = 1                                                                 # STEP 5
ACTION: int3 = 1 
int3 = None : <type 'NoneType'>
=> int3 = 1 : <type 'int'>
==================================================
result = avl0.inorder()                                                  # STEP 6
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104eb4cf8> : <type 'instance'>
avl_REF0 = set([19]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int3)                                                        # STEP 7
ACTION: avl0.insert(int3) 
int3 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104eb4cf8> : <type 'instance'>
avl_REF0 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([1, 19]) : <type 'set'>
==================================================
avl0.insert(int2)                                                        # STEP 8
ACTION: avl0.insert(int2) 
int2 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104eb4cf8> : <type 'instance'>
avl_REF0 = set([1, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([16, 1, 19]) : <type 'set'>
==================================================
avl0.insert(int0)                                                        # STEP 9
ACTION: avl0.insert(int0) 
int0 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104eb4cf8> : <type 'instance'>
avl_REF0 = set([16, 1, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
int1 = 4                                                                # STEP 10
ACTION: int1 = 4 
int1 = None : <type 'NoneType'>
=> int1 = 4 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 11
ACTION: avl0.delete(int1) 
int1 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104eb4cf8> : <type 'instance'>
avl_REF0 = set([16, 1, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.insert(int3)                                                       # STEP 12
ACTION: avl0.insert(int3) 
int3 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104eb4cf8> : <type 'instance'>
avl_REF0 = set([16, 1, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
avl1 = avl.AVLTree()                                                    # STEP 13
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x104dfbb00> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 14
ACTION: avl0.insert(int3) 
int3 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104eb4cf8> : <type 'instance'>
avl_REF0 = set([16, 1, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
result = avl0.find(int0)                                                # STEP 15
ACTION: result = avl0.find(int0) 
int0 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104eb4cf8> : <type 'instance'>
avl_REF0 = set([16, 1, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
result = avl0.find(int3)                                                # STEP 16
ACTION: result = avl0.find(int3) 
int3 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104eb4cf8> : <type 'instance'>
avl_REF0 = set([16, 1, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
avl0.insert(int0)                                                       # STEP 17
ACTION: avl0.insert(int0) 
int0 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104eb4cf8> : <type 'instance'>
avl_REF0 = set([16, 1, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
avl1.insert(int3)                                                       # STEP 18
ACTION: avl1.insert(int3) 
int3 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104dfbb00> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([1]) : <type 'set'>
==================================================
int3 = 5                                                                # STEP 19
ACTION: int3 = 5 
int3 = 1 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
int0 = 11                                                               # STEP 20
ACTION: int0 = 11 
int0 = 19 : <type 'int'>
=> int0 = 11 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 21
ACTION: avl1.delete(int3) 
int3 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104dfbb00> : <type 'instance'>
avl_REF1 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.delete(int1)                                                       # STEP 22
ACTION: avl1.delete(int1) 
int1 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104dfbb00> : <type 'instance'>
avl_REF1 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.delete(int3)                                                       # STEP 23
ACTION: avl1.delete(int3) 
int3 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104dfbb00> : <type 'instance'>
avl_REF1 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.delete(int1)                                                       # STEP 24
ACTION: avl1.delete(int1) 
int1 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104dfbb00> : <type 'instance'>
avl_REF1 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl0.delete(int2)                                                       # STEP 25
ACTION: avl0.delete(int2) 
int2 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104eb4cf8> : <type 'instance'>
avl_REF0 = set([16, 1, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([1, 19]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 26
ACTION: avl1.delete(int0) 
int0 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104dfbb00> : <type 'instance'>
avl_REF1 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int2 = 11                                                               # STEP 27
ACTION: int2 = 11 
int2 = 16 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 28
ACTION: avl1.insert(int0) 
int0 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104dfbb00> : <type 'instance'>
avl_REF1 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([1, 11]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 29
ACTION: avl1.delete(int2) 
int2 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104dfbb00> : <type 'instance'>
avl_REF1 = set([1, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([1]) : <type 'set'>
==================================================
int2 = 16                                                               # STEP 30
ACTION: int2 = 16 
int2 = 11 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 31
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104dfbb00> : <type 'instance'>
avl_REF1 = set([1]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl0.insert(int3)                                                       # STEP 32
ACTION: avl0.insert(int3) 
int3 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104eb4cf8> : <type 'instance'>
avl_REF0 = set([1, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([1, 19, 5]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 33
ACTION: avl0.insert(int2) 
int2 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104eb4cf8> : <type 'instance'>
avl_REF0 = set([1, 19, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([16, 1, 19, 5]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 34
ACTION: avl0.insert(int3) 
int3 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104eb4cf8> : <type 'instance'>
avl_REF0 = set([16, 1, 19, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
int0 = 10                                                               # STEP 35
ACTION: int0 = 10 
int0 = 11 : <type 'int'>
=> int0 = 10 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 36
ACTION: avl0.delete(int3) 
int3 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104eb4cf8> : <type 'instance'>
avl_REF0 = set([16, 1, 19, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([16, 1, 19]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 37
ACTION: avl0.insert(int0) 
int0 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104eb4cf8> : <type 'instance'>
avl_REF0 = set([16, 1, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([16, 1, 10, 19]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 38
ACTION: avl0.insert(int0) 
int0 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104eb4cf8> : <type 'instance'>
avl_REF0 = set([16, 1, 10, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
result = avl1.find(int2)                                                # STEP 39
ACTION: result = avl1.find(int2) 
int2 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104dfbb00> : <type 'instance'>
avl_REF1 = set([1]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl1.delete(int2)                                                       # STEP 40
ACTION: avl1.delete(int2) 
int2 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104dfbb00> : <type 'instance'>
avl_REF1 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl0.delete(int2)                                                       # STEP 41
ACTION: avl0.delete(int2) 
int2 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104eb4cf8> : <type 'instance'>
avl_REF0 = set([16, 1, 10, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([1, 10, 19]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104eab5f0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 4 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104df7320>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
Original test has 100 steps

SAVING TEST AS failure.269.test.4
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
avl0 = avl.AVLTree()                                                     # STEP 0
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x104ab3a70> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int1 = 16                                                                # STEP 1
ACTION: int1 = 16 
int1 = None : <type 'NoneType'>
=> int1 = 16 : <type 'int'>
==================================================
avl0.insert(int1)                                                        # STEP 2
ACTION: avl0.insert(int1) 
int1 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ab3a70> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([16]) : <type 'set'>
==================================================
avl0.delete(int1)                                                        # STEP 3
ACTION: avl0.delete(int1) 
int1 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ab3a70> : <type 'instance'>
avl_REF0 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.delete(int1)                                                        # STEP 4
ACTION: avl0.delete(int1) 
int1 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ab3a70> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.insert(int1)                                                        # STEP 5
ACTION: avl0.insert(int1) 
int1 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ab3a70> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([16]) : <type 'set'>
==================================================
int0 = 10                                                                # STEP 6
ACTION: int0 = 10 
int0 = None : <type 'NoneType'>
=> int0 = 10 : <type 'int'>
==================================================
int1 = 2                                                                 # STEP 7
ACTION: int1 = 2 
int1 = 16 : <type 'int'>
=> int1 = 2 : <type 'int'>
==================================================
avl0.delete(int0)                                                        # STEP 8
ACTION: avl0.delete(int0) 
int0 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ab3a70> : <type 'instance'>
avl_REF0 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
result = avl0.inorder()                                                  # STEP 9
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104ab3a70> : <type 'instance'>
avl_REF0 = set([16]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int1)                                                       # STEP 10
ACTION: avl0.insert(int1) 
int1 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ab3a70> : <type 'instance'>
avl_REF0 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([16, 2]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 11
ACTION: avl0.insert(int1) 
int1 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ab3a70> : <type 'instance'>
avl_REF0 = set([16, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl0.insert(int1)                                                       # STEP 12
ACTION: avl0.insert(int1) 
int1 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ab3a70> : <type 'instance'>
avl_REF0 = set([16, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl0.insert(int0)                                                       # STEP 13
ACTION: avl0.insert(int0) 
int0 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ab3a70> : <type 'instance'>
avl_REF0 = set([16, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([16, 2, 10]) : <type 'set'>
==================================================
result = avl0.find(int1)                                                # STEP 14
ACTION: result = avl0.find(int1) 
int1 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ab3a70> : <type 'instance'>
avl_REF0 = set([16, 2, 10]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
result = avl0.inorder()                                                 # STEP 15
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104ab3a70> : <type 'instance'>
avl_REF0 = set([16, 2, 10]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.delete(int1)                                                       # STEP 16
ACTION: avl0.delete(int1) 
int1 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ab3a70> : <type 'instance'>
avl_REF0 = set([16, 2, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([16, 10]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 17
ACTION: avl0.insert(int0) 
int0 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ab3a70> : <type 'instance'>
avl_REF0 = set([16, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
avl0.insert(int1)                                                       # STEP 18
ACTION: avl0.insert(int1) 
int1 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ab3a70> : <type 'instance'>
avl_REF0 = set([16, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([16, 2, 10]) : <type 'set'>
==================================================
int2 = 14                                                               # STEP 19
ACTION: int2 = 14 
int2 = None : <type 'NoneType'>
=> int2 = 14 : <type 'int'>
==================================================
int1 = 2                                                                # STEP 20
ACTION: int1 = 2 
int1 = 2 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 21
ACTION: avl0.delete(int0) 
int0 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ab3a70> : <type 'instance'>
avl_REF0 = set([16, 2, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([16, 2]) : <type 'set'>
==================================================
int0 = 18                                                               # STEP 22
ACTION: int0 = 18 
int0 = 10 : <type 'int'>
=> int0 = 18 : <type 'int'>
==================================================
int3 = 5                                                                # STEP 23
ACTION: int3 = 5 
int3 = None : <type 'NoneType'>
=> int3 = 5 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 24
ACTION: avl0.insert(int0) 
int0 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ab3a70> : <type 'instance'>
avl_REF0 = set([16, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([16, 2, 18]) : <type 'set'>
==================================================
int0 = 5                                                                # STEP 25
ACTION: int0 = 5 
int0 = 18 : <type 'int'>
=> int0 = 5 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 26
ACTION: avl0.delete(int0) 
int0 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ab3a70> : <type 'instance'>
avl_REF0 = set([16, 2, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.insert(int1)                                                       # STEP 27
ACTION: avl0.insert(int1) 
int1 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ab3a70> : <type 'instance'>
avl_REF0 = set([16, 2, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
result = avl0.inorder()                                                 # STEP 28
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104ab3a70> : <type 'instance'>
avl_REF0 = set([16, 2, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
result = avl0.inorder()                                                 # STEP 29
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104ab3a70> : <type 'instance'>
avl_REF0 = set([16, 2, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int1 = 19                                                               # STEP 30
ACTION: int1 = 19 
int1 = 2 : <type 'int'>
=> int1 = 19 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 31
ACTION: avl0.insert(int1) 
int1 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ab3a70> : <type 'instance'>
avl_REF0 = set([16, 2, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([16, 2, 19, 18]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 32
ACTION: avl0.insert(int2) 
int2 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ab3a70> : <type 'instance'>
avl_REF0 = set([16, 2, 19, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([16, 2, 19, 18, 14]) : <type 'set'>
==================================================
int1 = 15                                                               # STEP 33
ACTION: int1 = 15 
int1 = 19 : <type 'int'>
=> int1 = 15 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 34
ACTION: avl0.delete(int2) 
int2 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ab3a70> : <type 'instance'>
avl_REF0 = set([16, 2, 19, 18, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([16, 2, 19, 18]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 35
ACTION: avl0.insert(int3) 
int3 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ab3a70> : <type 'instance'>
avl_REF0 = set([16, 2, 19, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([2, 5, 16, 18, 19]) : <type 'set'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 36
ACTION: avl0 = avl.AVLTree() 
avl0 = <avl.AVLTree instance at 0x104ab3a70> : <type 'instance'>
avl_REF0 = set([2, 5, 16, 18, 19]) : <type 'set'>
=> avl0 = <avl.AVLTree instance at 0x104de1ef0> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 37
ACTION: avl0.insert(int3) 
int3 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104de1ef0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([5]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 38
ACTION: avl0.delete(int3) 
int3 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104de1ef0> : <type 'instance'>
avl_REF0 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 39
ACTION: avl0.insert(int3) 
int3 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104de1ef0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([5]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 40
ACTION: avl0.delete(int3) 
int3 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104de1ef0> : <type 'instance'>
avl_REF0 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int2 = 6                                                                # STEP 41
ACTION: int2 = 6 
int2 = 14 : <type 'int'>
=> int2 = 6 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 42
ACTION: avl0.delete(int2) 
int2 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104de1ef0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.insert(int1)                                                       # STEP 43
ACTION: avl0.insert(int1) 
int1 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104de1ef0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([15]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 44
ACTION: avl0.insert(int0) 
int0 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104de1ef0> : <type 'instance'>
avl_REF0 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([5, 15]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 45
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104de1ef0> : <type 'instance'>
avl_REF0 = set([5, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int0)                                                       # STEP 46
ACTION: avl0.insert(int0) 
int0 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104de1ef0> : <type 'instance'>
avl_REF0 = set([5, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
avl0 == avl0                                                            # STEP 47
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x104de1ef0> : <type 'instance'>
avl_REF0 = set([5, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl0.delete(int0)                                                       # STEP 48
ACTION: avl0.delete(int0) 
int0 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104de1ef0> : <type 'instance'>
avl_REF0 = set([5, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([15]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 49
ACTION: avl0.delete(int3) 
int3 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104de1ef0> : <type 'instance'>
avl_REF0 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl2 = avl.AVLTree()                                                    # STEP 50
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x104e04fc8> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 51
ACTION: avl2.delete(int1) 
int1 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e04fc8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl0.insert(int2)                                                       # STEP 52
ACTION: avl0.insert(int2) 
int2 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104de1ef0> : <type 'instance'>
avl_REF0 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([6, 15]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 53
ACTION: avl2.insert(int2) 
int2 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e04fc8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([6]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 54
ACTION: avl0.delete(int3) 
int3 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104de1ef0> : <type 'instance'>
avl_REF0 = set([6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl2.delete(int3)                                                       # STEP 55
ACTION: avl2.delete(int3) 
int3 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e04fc8> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.delete(int1)                                                       # STEP 56
ACTION: avl2.delete(int1) 
int1 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e04fc8> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl0.insert(int0)                                                       # STEP 57
ACTION: avl0.insert(int0) 
int0 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104de1ef0> : <type 'instance'>
avl_REF0 = set([6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([5, 6, 15]) : <type 'set'>
==================================================
int0 = 16                                                               # STEP 58
ACTION: int0 = 16 
int0 = 5 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 59
ACTION: avl0.delete(int3) 
int3 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104de1ef0> : <type 'instance'>
avl_REF0 = set([5, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([6, 15]) : <type 'set'>
==================================================
int1 = 10                                                               # STEP 60
ACTION: int1 = 10 
int1 = 15 : <type 'int'>
=> int1 = 10 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 61
ACTION: avl0.delete(int2) 
int2 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104de1ef0> : <type 'instance'>
avl_REF0 = set([6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([15]) : <type 'set'>
==================================================
int2 = 3                                                                # STEP 62
ACTION: int2 = 3 
int2 = 6 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
int3 = 12                                                               # STEP 63
ACTION: int3 = 12 
int3 = 5 : <type 'int'>
=> int3 = 12 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 64
ACTION: avl2.insert(int2) 
int2 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e04fc8> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([3, 6]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 65
ACTION: avl0.delete(int2) 
int2 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104de1ef0> : <type 'instance'>
avl_REF0 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.insert(int0)                                                       # STEP 66
ACTION: avl0.insert(int0) 
int0 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104de1ef0> : <type 'instance'>
avl_REF0 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([16, 15]) : <type 'set'>
==================================================
int2 = 1                                                                # STEP 67
ACTION: int2 = 1 
int2 = 3 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
result = avl2.find(int1)                                                # STEP 68
ACTION: result = avl2.find(int1) 
int1 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e04fc8> : <type 'instance'>
avl_REF2 = set([3, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl0.insert(int1)                                                       # STEP 69
ACTION: avl0.insert(int1) 
int1 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104de1ef0> : <type 'instance'>
avl_REF0 = set([16, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([16, 10, 15]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 70
ACTION: avl0.insert(int1) 
int1 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104de1ef0> : <type 'instance'>
avl_REF0 = set([16, 10, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl2 == avl2                                                            # STEP 71
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x104e04fc8> : <type 'instance'>
avl_REF2 = set([3, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
result = avl0.inorder()                                                 # STEP 72
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104de1ef0> : <type 'instance'>
avl_REF0 = set([16, 10, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl2.delete(int2)                                                       # STEP 73
ACTION: avl2.delete(int2) 
int2 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e04fc8> : <type 'instance'>
avl_REF2 = set([3, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl0.insert(int0)                                                       # STEP 74
ACTION: avl0.insert(int0) 
int0 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104de1ef0> : <type 'instance'>
avl_REF0 = set([16, 10, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
avl0.delete(int3)                                                       # STEP 75
ACTION: avl0.delete(int3) 
int3 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104de1ef0> : <type 'instance'>
avl_REF0 = set([16, 10, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int0 = 9                                                                # STEP 76
ACTION: int0 = 9 
int0 = 16 : <type 'int'>
=> int0 = 9 : <type 'int'>
==================================================
int2 = 10                                                               # STEP 77
ACTION: int2 = 10 
int2 = 1 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 78
ACTION: avl2.delete(int0) 
int0 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e04fc8> : <type 'instance'>
avl_REF2 = set([3, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.delete(int0)                                                       # STEP 79
ACTION: avl2.delete(int0) 
int0 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e04fc8> : <type 'instance'>
avl_REF2 = set([3, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int1 = 3                                                                # STEP 80
ACTION: int1 = 3 
int1 = 10 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 81
ACTION: avl2.delete(int2) 
int2 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e04fc8> : <type 'instance'>
avl_REF2 = set([3, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.insert(int3)                                                       # STEP 82
ACTION: avl2.insert(int3) 
int3 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e04fc8> : <type 'instance'>
avl_REF2 = set([3, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([3, 12, 6]) : <type 'set'>
==================================================
int3 = 10                                                               # STEP 83
ACTION: int3 = 10 
int3 = 12 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 84
ACTION: avl2.insert(int3) 
int3 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e04fc8> : <type 'instance'>
avl_REF2 = set([3, 12, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([10, 3, 12, 6]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 85
ACTION: avl0.insert(int3) 
int3 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104de1ef0> : <type 'instance'>
avl_REF0 = set([16, 10, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
avl2.delete(int2)                                                       # STEP 86
ACTION: avl2.delete(int2) 
int2 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e04fc8> : <type 'instance'>
avl_REF2 = set([10, 3, 12, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([3, 12, 6]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 87
ACTION: avl0.delete(int3) 
int3 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104de1ef0> : <type 'instance'>
avl_REF0 = set([16, 10, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([16, 15]) : <type 'set'>
==================================================
int0 = 14                                                               # STEP 88
ACTION: int0 = 14 
int0 = 9 : <type 'int'>
=> int0 = 14 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 89
ACTION: avl2.insert(int3) 
int3 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e04fc8> : <type 'instance'>
avl_REF2 = set([3, 12, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([10, 3, 12, 6]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 90
ACTION: avl0.insert(int1) 
int1 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104de1ef0> : <type 'instance'>
avl_REF0 = set([16, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([16, 3, 15]) : <type 'set'>
==================================================
int1 = 6                                                                # STEP 91
ACTION: int1 = 6 
int1 = 3 : <type 'int'>
=> int1 = 6 : <type 'int'>
==================================================
int3 = 7                                                                # STEP 92
ACTION: int3 = 7 
int3 = 10 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 93
ACTION: avl2.insert(int1) 
int1 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e04fc8> : <type 'instance'>
avl_REF2 = set([10, 3, 12, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl0.delete(int1)                                                       # STEP 94
ACTION: avl0.delete(int1) 
int1 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104de1ef0> : <type 'instance'>
avl_REF0 = set([16, 3, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int1 = 18                                                               # STEP 95
ACTION: int1 = 18 
int1 = 6 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
int2 = 3                                                                # STEP 96
ACTION: int2 = 3 
int2 = 10 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 97
ACTION: avl0.insert(int1) 
int1 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104de1ef0> : <type 'instance'>
avl_REF0 = set([16, 3, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([16, 18, 3, 15]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 98
ACTION: avl2.insert(int0) 
int0 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e04fc8> : <type 'instance'>
avl_REF2 = set([10, 3, 12, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([10, 3, 12, 14, 6]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 99
ACTION: avl0.delete(int2) 
int2 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104de1ef0> : <type 'instance'>
avl_REF0 = set([16, 18, 3, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([16, 18, 15]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104df05f0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 5 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 0
STOPPING TESTING DUE TO TIMEOUT
8.58500169664 PERCENT COVERED
64.0232210159 TOTAL RUNTIME
8 EXECUTED
497 TOTAL TEST OPERATIONS
19.9121618271 TIME SPENT EXECUTING TEST OPERATIONS
0.0561459064484 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
19.9109387398 TIME SPENT CHECKING PROPERTIES
39.8231005669 TOTAL TIME SPENT RUNNING SUT
0.00475692749023 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
5 FAILED
0 REPEATS OF FAILURES
5 ACTUAL DISTINCT FAILURES

FAILURE 0
int2 = 19                                                                # STEP 0
int1 = 2                                                                 # STEP 1
int0 = 7                                                                 # STEP 2
int3 = 1                                                                 # STEP 3
avl0 = avl.AVLTree()                                                     # STEP 4
avl0.insert(int3)                                                        # STEP 5
int3 = 8                                                                 # STEP 6
avl0.insert(int1)                                                        # STEP 7
avl2 = avl.AVLTree()                                                     # STEP 8
avl2.delete(int0)                                                        # STEP 9
avl2.delete(int0)                                                       # STEP 10
avl2.insert(int2)                                                       # STEP 11
avl0.delete(int1)                                                       # STEP 12
avl0.delete(int1)                                                       # STEP 13
avl0.delete(int2)                                                       # STEP 14
avl2 == avl2                                                            # STEP 15
int2 = 15                                                               # STEP 16
int1 = 10                                                               # STEP 17
avl2.delete(int1)                                                       # STEP 18
result = avl0.find(int1)                                                # STEP 19
result = avl2.find(int1)                                                # STEP 20
avl0.insert(int3)                                                       # STEP 21
avl2.delete(int1)                                                       # STEP 22
avl2.delete(int3)                                                       # STEP 23
int1 = 19                                                               # STEP 24
avl0.insert(int0)                                                       # STEP 25
int3 = 15                                                               # STEP 26
avl2.insert(int1)                                                       # STEP 27
int0 = 9                                                                # STEP 28
int1 = 8                                                                # STEP 29
avl2.insert(int3)                                                       # STEP 30
avl2.insert(int0)                                                       # STEP 31
int0 = 11                                                               # STEP 32
avl0.insert(int3)                                                       # STEP 33
int3 = 15                                                               # STEP 34
result = avl2.find(int1)                                                # STEP 35
int1 = 17                                                               # STEP 36
result = avl2.find(int1)                                                # STEP 37
avl0.delete(int2)                                                       # STEP 38
avl2.insert(int0)                                                       # STEP 39
avl2.delete(int3)                                                       # STEP 40
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104a58518>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE 1
int1 = 5                                                                 # STEP 0
int0 = 9                                                                 # STEP 1
int3 = 3                                                                 # STEP 2
int2 = 11                                                                # STEP 3
avl0 = avl.AVLTree()                                                     # STEP 4
result = avl0.find(int0)                                                 # STEP 5
int0 = 18                                                                # STEP 6
avl0.delete(int1)                                                        # STEP 7
int1 = 12                                                                # STEP 8
avl2 = avl.AVLTree()                                                     # STEP 9
avl2.delete(int0)                                                       # STEP 10
avl0.delete(int2)                                                       # STEP 11
avl2.insert(int3)                                                       # STEP 12
avl0.insert(int0)                                                       # STEP 13
int0 = 3                                                                # STEP 14
int2 = 4                                                                # STEP 15
avl2.delete(int2)                                                       # STEP 16
avl2.insert(int2)                                                       # STEP 17
avl2.insert(int1)                                                       # STEP 18
avl2.delete(int3)                                                       # STEP 19
result = avl2.find(int2)                                                # STEP 20
avl2.delete(int1)                                                       # STEP 21
int1 = 2                                                                # STEP 22
int2 = 16                                                               # STEP 23
result = avl2.find(int1)                                                # STEP 24
int1 = 2                                                                # STEP 25
avl2 == avl0                                                            # STEP 26
avl2.insert(int3)                                                       # STEP 27
avl0.delete(int3)                                                       # STEP 28
avl0.insert(int1)                                                       # STEP 29
avl0.delete(int0)                                                       # STEP 30
int1 = 10                                                               # STEP 31
int0 = 9                                                                # STEP 32
avl2 == avl0                                                            # STEP 33
avl0.delete(int1)                                                       # STEP 34
avl2.insert(int0)                                                       # STEP 35
result = avl2.find(int3)                                                # STEP 36
avl2.insert(int1)                                                       # STEP 37
avl0.insert(int1)                                                       # STEP 38
avl0.delete(int2)                                                       # STEP 39
avl1 = avl.AVLTree()                                                    # STEP 40
avl2.delete(int2)                                                       # STEP 41
avl1.delete(int0)                                                       # STEP 42
avl1.delete(int0)                                                       # STEP 43
int1 = 6                                                                # STEP 44
avl2.delete(int1)                                                       # STEP 45
int2 = 3                                                                # STEP 46
int0 = 3                                                                # STEP 47
int1 = 4                                                                # STEP 48
avl1.delete(int1)                                                       # STEP 49
avl1.delete(int3)                                                       # STEP 50
avl2.delete(int0)                                                       # STEP 51
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104ab08c0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE 2
int1 = 8                                                                 # STEP 0
int3 = 5                                                                 # STEP 1
int2 = 8                                                                 # STEP 2
int0 = 1                                                                 # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
avl2.insert(int0)                                                        # STEP 5
avl2.delete(int3)                                                        # STEP 6
avl2.delete(int1)                                                        # STEP 7
result = avl2.inorder()                                                  # STEP 8
avl2.delete(int2)                                                        # STEP 9
int3 = 20                                                               # STEP 10
avl2.insert(int3)                                                       # STEP 11
result = avl2.find(int2)                                                # STEP 12
avl2 == avl2                                                            # STEP 13
avl2.delete(int2)                                                       # STEP 14
result = avl2.find(int3)                                                # STEP 15
avl2.insert(int2)                                                       # STEP 16
avl2.delete(int2)                                                       # STEP 17
avl2.delete(int3)                                                       # STEP 18
avl2.delete(int0)                                                       # STEP 19
avl2 == avl2                                                            # STEP 20
avl2.insert(int3)                                                       # STEP 21
avl2.insert(int2)                                                       # STEP 22
avl2.insert(int0)                                                       # STEP 23
avl2.insert(int2)                                                       # STEP 24
avl2.delete(int1)                                                       # STEP 25
result = avl2.inorder()                                                 # STEP 26
avl2.delete(int1)                                                       # STEP 27
result = avl2.inorder()                                                 # STEP 28
avl2.delete(int3)                                                       # STEP 29
avl2.insert(int1)                                                       # STEP 30
int1 = 13                                                               # STEP 31
avl2.insert(int1)                                                       # STEP 32
avl2.delete(int2)                                                       # STEP 33
avl2.delete(int3)                                                       # STEP 34
avl2.insert(int1)                                                       # STEP 35
result = avl2.inorder()                                                 # STEP 36
avl2.delete(int2)                                                       # STEP 37
int1 = 1                                                                # STEP 38
avl2.insert(int1)                                                       # STEP 39
result = avl2.find(int1)                                                # STEP 40
result = avl2.inorder()                                                 # STEP 41
int2 = 6                                                                # STEP 42
int1 = 13                                                               # STEP 43
avl2.delete(int3)                                                       # STEP 44
avl2.delete(int2)                                                       # STEP 45
int2 = 13                                                               # STEP 46
int3 = 19                                                               # STEP 47
result = avl2.find(int3)                                                # STEP 48
int3 = 20                                                               # STEP 49
result = avl2.find(int1)                                                # STEP 50
avl2.delete(int1)                                                       # STEP 51
avl2.delete(int3)                                                       # STEP 52
avl2.insert(int1)                                                       # STEP 53
result = avl2.inorder()                                                 # STEP 54
int1 = 19                                                               # STEP 55
avl2.delete(int3)                                                       # STEP 56
avl2.insert(int1)                                                       # STEP 57
avl2.insert(int3)                                                       # STEP 58
avl2.insert(int0)                                                       # STEP 59
int1 = 9                                                                # STEP 60
avl2.delete(int0)                                                       # STEP 61
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105914dd0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE 3
avl0 = avl.AVLTree()                                                     # STEP 0
result = avl0.inorder()                                                  # STEP 1
int0 = 19                                                                # STEP 2
avl0.insert(int0)                                                        # STEP 3
int2 = 16                                                                # STEP 4
int3 = 1                                                                 # STEP 5
result = avl0.inorder()                                                  # STEP 6
avl0.insert(int3)                                                        # STEP 7
avl0.insert(int2)                                                        # STEP 8
avl0.insert(int0)                                                        # STEP 9
int1 = 4                                                                # STEP 10
avl0.delete(int1)                                                       # STEP 11
avl0.insert(int3)                                                       # STEP 12
avl1 = avl.AVLTree()                                                    # STEP 13
avl0.insert(int3)                                                       # STEP 14
result = avl0.find(int0)                                                # STEP 15
result = avl0.find(int3)                                                # STEP 16
avl0.insert(int0)                                                       # STEP 17
avl1.insert(int3)                                                       # STEP 18
int3 = 5                                                                # STEP 19
int0 = 11                                                               # STEP 20
avl1.delete(int3)                                                       # STEP 21
avl1.delete(int1)                                                       # STEP 22
avl1.delete(int3)                                                       # STEP 23
avl1.delete(int1)                                                       # STEP 24
avl0.delete(int2)                                                       # STEP 25
avl1.delete(int0)                                                       # STEP 26
int2 = 11                                                               # STEP 27
avl1.insert(int0)                                                       # STEP 28
avl1.delete(int2)                                                       # STEP 29
int2 = 16                                                               # STEP 30
result = avl1.inorder()                                                 # STEP 31
avl0.insert(int3)                                                       # STEP 32
avl0.insert(int2)                                                       # STEP 33
avl0.insert(int3)                                                       # STEP 34
int0 = 10                                                               # STEP 35
avl0.delete(int3)                                                       # STEP 36
avl0.insert(int0)                                                       # STEP 37
avl0.insert(int0)                                                       # STEP 38
result = avl1.find(int2)                                                # STEP 39
avl1.delete(int2)                                                       # STEP 40
avl0.delete(int2)                                                       # STEP 41
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104eab5f0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE 4
avl0 = avl.AVLTree()                                                     # STEP 0
int1 = 16                                                                # STEP 1
avl0.insert(int1)                                                        # STEP 2
avl0.delete(int1)                                                        # STEP 3
avl0.delete(int1)                                                        # STEP 4
avl0.insert(int1)                                                        # STEP 5
int0 = 10                                                                # STEP 6
int1 = 2                                                                 # STEP 7
avl0.delete(int0)                                                        # STEP 8
result = avl0.inorder()                                                  # STEP 9
avl0.insert(int1)                                                       # STEP 10
avl0.insert(int1)                                                       # STEP 11
avl0.insert(int1)                                                       # STEP 12
avl0.insert(int0)                                                       # STEP 13
result = avl0.find(int1)                                                # STEP 14
result = avl0.inorder()                                                 # STEP 15
avl0.delete(int1)                                                       # STEP 16
avl0.insert(int0)                                                       # STEP 17
avl0.insert(int1)                                                       # STEP 18
int2 = 14                                                               # STEP 19
int1 = 2                                                                # STEP 20
avl0.delete(int0)                                                       # STEP 21
int0 = 18                                                               # STEP 22
int3 = 5                                                                # STEP 23
avl0.insert(int0)                                                       # STEP 24
int0 = 5                                                                # STEP 25
avl0.delete(int0)                                                       # STEP 26
avl0.insert(int1)                                                       # STEP 27
result = avl0.inorder()                                                 # STEP 28
result = avl0.inorder()                                                 # STEP 29
int1 = 19                                                               # STEP 30
avl0.insert(int1)                                                       # STEP 31
avl0.insert(int2)                                                       # STEP 32
int1 = 15                                                               # STEP 33
avl0.delete(int2)                                                       # STEP 34
avl0.insert(int3)                                                       # STEP 35
avl0 = avl.AVLTree()                                                    # STEP 36
avl0.insert(int3)                                                       # STEP 37
avl0.delete(int3)                                                       # STEP 38
avl0.insert(int3)                                                       # STEP 39
avl0.delete(int3)                                                       # STEP 40
int2 = 6                                                                # STEP 41
avl0.delete(int2)                                                       # STEP 42
avl0.insert(int1)                                                       # STEP 43
avl0.insert(int0)                                                       # STEP 44
result = avl0.inorder()                                                 # STEP 45
avl0.insert(int0)                                                       # STEP 46
avl0 == avl0                                                            # STEP 47
avl0.delete(int0)                                                       # STEP 48
avl0.delete(int3)                                                       # STEP 49
avl2 = avl.AVLTree()                                                    # STEP 50
avl2.delete(int1)                                                       # STEP 51
avl0.insert(int2)                                                       # STEP 52
avl2.insert(int2)                                                       # STEP 53
avl0.delete(int3)                                                       # STEP 54
avl2.delete(int3)                                                       # STEP 55
avl2.delete(int1)                                                       # STEP 56
avl0.insert(int0)                                                       # STEP 57
int0 = 16                                                               # STEP 58
avl0.delete(int3)                                                       # STEP 59
int1 = 10                                                               # STEP 60
avl0.delete(int2)                                                       # STEP 61
int2 = 3                                                                # STEP 62
int3 = 12                                                               # STEP 63
avl2.insert(int2)                                                       # STEP 64
avl0.delete(int2)                                                       # STEP 65
avl0.insert(int0)                                                       # STEP 66
int2 = 1                                                                # STEP 67
result = avl2.find(int1)                                                # STEP 68
avl0.insert(int1)                                                       # STEP 69
avl0.insert(int1)                                                       # STEP 70
avl2 == avl2                                                            # STEP 71
result = avl0.inorder()                                                 # STEP 72
avl2.delete(int2)                                                       # STEP 73
avl0.insert(int0)                                                       # STEP 74
avl0.delete(int3)                                                       # STEP 75
int0 = 9                                                                # STEP 76
int2 = 10                                                               # STEP 77
avl2.delete(int0)                                                       # STEP 78
avl2.delete(int0)                                                       # STEP 79
int1 = 3                                                                # STEP 80
avl2.delete(int2)                                                       # STEP 81
avl2.insert(int3)                                                       # STEP 82
int3 = 10                                                               # STEP 83
avl2.insert(int3)                                                       # STEP 84
avl0.insert(int3)                                                       # STEP 85
avl2.delete(int2)                                                       # STEP 86
avl0.delete(int3)                                                       # STEP 87
int0 = 14                                                               # STEP 88
avl2.insert(int3)                                                       # STEP 89
avl0.insert(int1)                                                       # STEP 90
int1 = 6                                                                # STEP 91
int3 = 7                                                                # STEP 92
avl2.insert(int1)                                                       # STEP 93
avl0.delete(int1)                                                       # STEP 94
int1 = 18                                                               # STEP 95
int2 = 3                                                                # STEP 96
avl0.insert(int1)                                                       # STEP 97
avl2.insert(int0)                                                       # STEP 98
avl0.delete(int2)                                                       # STEP 99
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104df05f0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
216 BRANCHES COVERED
162 STATEMENTS COVERED

Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=True, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.859.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  10 [2:0]
-- < 7 [1:0]
---- < 5 [0:0] L
---- > 9 [0:0] L
-- > 11 [1:-1]
---- > 12 [0:0] L
set([5, 7, 9, 10, 11, 12])
TEST #4 STEP #78 (0:00:30.038282) Fri Apr 28 07:29:45 2017 [ 160 stmts 212 branches ]
  10 [3:-1]
-- < 7 [1:0]
---- < 5 [0:0] L
---- > 9 [0:0] L
-- > 18 [2:0]
---- < 12 [1:0]
------ < 11 [0:0] L
------ > 17 [0:0] L
---- > 19 [1:-1]
------ > 20 [0:0] L
set([5, 7, 9, 10, 11, 12, 17, 18, 19, 20])
  10 [3:1]
-- < 6 [2:1]
---- < 5 [1:1]
------ < 4 [0:0] L
---- > 9 [0:0] L
-- > 14 [1:-1]
---- > 15 [0:0] L
set([4, 5, 6, 9, 10, 14, 15])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1047087e8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 41 steps

SAVING TEST AS failure.859.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 3                                                                 # STEP 0
ACTION: int2 = 3 
int2 = None : <type 'NoneType'>
=> int2 = 3 : <type 'int'>
==================================================
int0 = 14                                                                # STEP 1
ACTION: int0 = 14 
int0 = None : <type 'NoneType'>
=> int0 = 14 : <type 'int'>
==================================================
int1 = 11                                                                # STEP 2
ACTION: int1 = 11 
int1 = None : <type 'NoneType'>
=> int1 = 11 : <type 'int'>
==================================================
int3 = 3                                                                 # STEP 3
ACTION: int3 = 3 
int3 = None : <type 'NoneType'>
=> int3 = 3 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 4
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x101f5af80> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
result = avl0.inorder()                                                  # STEP 5
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x101f5af80> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
result = avl0.inorder()                                                  # STEP 6
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x101f5af80> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.delete(int3)                                                        # STEP 7
ACTION: avl0.delete(int3) 
int3 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x101f5af80> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int3 = 20                                                                # STEP 8
ACTION: int3 = 20 
int3 = 3 : <type 'int'>
=> int3 = 20 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 9
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x101de7cf8> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 10
ACTION: avl0.insert(int1) 
int1 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x101f5af80> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([11]) : <type 'set'>
==================================================
int1 = 5                                                                # STEP 11
ACTION: int1 = 5 
int1 = 11 : <type 'int'>
=> int1 = 5 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 12
ACTION: avl0.insert(int3) 
int3 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x101f5af80> : <type 'instance'>
avl_REF0 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([11, 20]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 13
ACTION: avl2.delete(int1) 
int1 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x101de7cf8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.delete(int1)                                                       # STEP 14
ACTION: avl2.delete(int1) 
int1 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x101de7cf8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int1 = 5                                                                # STEP 15
ACTION: int1 = 5 
int1 = 5 : <type 'int'>
==================================================
int3 = 18                                                               # STEP 16
ACTION: int3 = 18 
int3 = 20 : <type 'int'>
=> int3 = 18 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 17
ACTION: avl0.delete(int3) 
int3 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x101f5af80> : <type 'instance'>
avl_REF0 = set([11, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl2.insert(int3)                                                       # STEP 18
ACTION: avl2.insert(int3) 
int3 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x101de7cf8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([18]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 19
ACTION: avl2.insert(int0) 
int0 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x101de7cf8> : <type 'instance'>
avl_REF2 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([18, 14]) : <type 'set'>
==================================================
int0 = 18                                                               # STEP 20
ACTION: int0 = 18 
int0 = 14 : <type 'int'>
=> int0 = 18 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 21
ACTION: avl2.insert(int1) 
int1 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x101de7cf8> : <type 'instance'>
avl_REF2 = set([18, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([18, 5, 14]) : <type 'set'>
==================================================
int3 = 15                                                               # STEP 22
ACTION: int3 = 15 
int3 = 18 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
int1 = 9                                                                # STEP 23
ACTION: int1 = 9 
int1 = 5 : <type 'int'>
=> int1 = 9 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 24
ACTION: avl0.insert(int3) 
int3 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x101f5af80> : <type 'instance'>
avl_REF0 = set([11, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([11, 20, 15]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 25
ACTION: avl0.insert(int2) 
int2 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x101f5af80> : <type 'instance'>
avl_REF0 = set([11, 20, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([3, 11, 20, 15]) : <type 'set'>
==================================================
int3 = 10                                                               # STEP 26
ACTION: int3 = 10 
int3 = 15 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
int2 = 17                                                               # STEP 27
ACTION: int2 = 17 
int2 = 3 : <type 'int'>
=> int2 = 17 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 28
ACTION: avl0.delete(int2) 
int2 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x101f5af80> : <type 'instance'>
avl_REF0 = set([3, 11, 20, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl2.delete(int0)                                                       # STEP 29
ACTION: avl2.delete(int0) 
int0 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x101de7cf8> : <type 'instance'>
avl_REF2 = set([18, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([5, 14]) : <type 'set'>
==================================================
int0 = 15                                                               # STEP 30
ACTION: int0 = 15 
int0 = 18 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 31
ACTION: avl0.delete(int1) 
int1 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x101f5af80> : <type 'instance'>
avl_REF0 = set([3, 11, 20, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int2 = 5                                                                # STEP 32
ACTION: int2 = 5 
int2 = 17 : <type 'int'>
=> int2 = 5 : <type 'int'>
==================================================
int1 = 15                                                               # STEP 33
ACTION: int1 = 15 
int1 = 9 : <type 'int'>
=> int1 = 15 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 34
ACTION: avl0.delete(int3) 
int3 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x101f5af80> : <type 'instance'>
avl_REF0 = set([3, 11, 20, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int3 = 12                                                               # STEP 35
ACTION: int3 = 12 
int3 = 10 : <type 'int'>
=> int3 = 12 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 36
ACTION: avl2.insert(int0) 
int0 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x101de7cf8> : <type 'instance'>
avl_REF2 = set([5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([5, 14, 15]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 37
ACTION: avl2.insert(int2) 
int2 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x101de7cf8> : <type 'instance'>
avl_REF2 = set([5, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl2.insert(int3)                                                       # STEP 38
ACTION: avl2.insert(int3) 
int3 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x101de7cf8> : <type 'instance'>
avl_REF2 = set([5, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([12, 5, 14, 15]) : <type 'set'>
==================================================
int2 = 20                                                               # STEP 39
ACTION: int2 = 20 
int2 = 5 : <type 'int'>
=> int2 = 20 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 40
ACTION: avl2.delete(int1) 
int1 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x101de7cf8> : <type 'instance'>
avl_REF2 = set([12, 5, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([12, 5, 14]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1044dd488>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 45
STOPPING TESTING DUE TO TIMEOUT
8.51713607058 PERCENT COVERED
60.2200059891 TOTAL RUNTIME
8 EXECUTED
686 TOTAL TEST OPERATIONS
28.0686891079 TIME SPENT EXECUTING TEST OPERATIONS
0.0233685970306 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
28.359256506 TIME SPENT CHECKING PROPERTIES
56.4279456139 TOTAL TIME SPENT RUNNING SUT
0.00437498092651 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int2 = 3                                                                 # STEP 0
int0 = 14                                                                # STEP 1
int1 = 11                                                                # STEP 2
int3 = 3                                                                 # STEP 3
avl0 = avl.AVLTree()                                                     # STEP 4
result = avl0.inorder()                                                  # STEP 5
result = avl0.inorder()                                                  # STEP 6
avl0.delete(int3)                                                        # STEP 7
int3 = 20                                                                # STEP 8
avl2 = avl.AVLTree()                                                     # STEP 9
avl0.insert(int1)                                                       # STEP 10
int1 = 5                                                                # STEP 11
avl0.insert(int3)                                                       # STEP 12
avl2.delete(int1)                                                       # STEP 13
avl2.delete(int1)                                                       # STEP 14
int1 = 5                                                                # STEP 15
int3 = 18                                                               # STEP 16
avl0.delete(int3)                                                       # STEP 17
avl2.insert(int3)                                                       # STEP 18
avl2.insert(int0)                                                       # STEP 19
int0 = 18                                                               # STEP 20
avl2.insert(int1)                                                       # STEP 21
int3 = 15                                                               # STEP 22
int1 = 9                                                                # STEP 23
avl0.insert(int3)                                                       # STEP 24
avl0.insert(int2)                                                       # STEP 25
int3 = 10                                                               # STEP 26
int2 = 17                                                               # STEP 27
avl0.delete(int2)                                                       # STEP 28
avl2.delete(int0)                                                       # STEP 29
int0 = 15                                                               # STEP 30
avl0.delete(int1)                                                       # STEP 31
int2 = 5                                                                # STEP 32
int1 = 15                                                               # STEP 33
avl0.delete(int3)                                                       # STEP 34
int3 = 12                                                               # STEP 35
avl2.insert(int0)                                                       # STEP 36
avl2.insert(int2)                                                       # STEP 37
avl2.insert(int3)                                                       # STEP 38
int2 = 20                                                               # STEP 39
avl2.delete(int1)                                                       # STEP 40
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1044dd488>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
214 BRANCHES COVERED
161 STATEMENTS COVERED

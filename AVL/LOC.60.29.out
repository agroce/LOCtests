Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.99697.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  10 [3:1]
-- < 5 [2:-1]
---- < 2 [0:0] L
---- > 7 [1:1]
------ < 6 [0:0] L
-- > 11 [1:-1]
---- > 14 [0:0] L
set([2, 5, 6, 7, 10, 11, 14])
  10 [2:0]
-- < 5 [1:0]
---- < 2 [0:0] L
---- > 6 [0:0] L
-- > 20 [1:1]
---- < 14 [0:0] L
set([2, 5, 6, 10, 14, 20])
  12 [2:0]
-- < 10 [1:0]
---- < 9 [0:0] L
---- > 11 [0:0] L
-- > 17 [1:1]
---- < 16 [0:0] L
set([9, 10, 11, 12, 16, 17])
  12 [2:0]
-- < 10 [1:0]
---- < 9 [0:0] L
---- > 11 [0:0] L
-- > 17 [1:0]
---- < 16 [0:0] L
---- > 18 [0:0] L
set([9, 10, 11, 12, 16, 17, 18])
  12 [2:0]
-- < 9 [1:0]
---- < 5 [0:0] L
---- > 11 [0:0] L
-- > 17 [1:1]
---- < 16 [0:0] L
set([5, 9, 11, 12, 16, 17])
  12 [2:0]
-- < 9 [1:0]
---- < 5 [0:0] L
---- > 11 [0:0] L
-- > 17 [1:1]
---- < 16 [0:0] L
set([5, 9, 11, 12, 16, 17])
  10 [2:0]
-- < 8 [1:0]
---- < 3 [0:0] L
---- > 9 [0:0] L
-- > 14 [1:0]
---- < 13 [0:0] L
---- > 16 [0:0] L
set([3, 8, 9, 10, 13, 14, 16])
  10 [2:0]
-- < 8 [1:0]
---- < 3 [0:0] L
---- > 9 [0:0] L
-- > 14 [1:0]
---- < 13 [0:0] L
---- > 16 [0:0] L
set([3, 8, 9, 10, 13, 14, 16])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1050445f0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
Original test has 58 steps

SAVING TEST AS failure.99697.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 19                                                                # STEP 0
ACTION: int2 = 19 
int2 = None : <type 'NoneType'>
=> int2 = 19 : <type 'int'>
==================================================
int1 = 8                                                                 # STEP 1
ACTION: int1 = 8 
int1 = None : <type 'NoneType'>
=> int1 = 8 : <type 'int'>
==================================================
int3 = 9                                                                 # STEP 2
ACTION: int3 = 9 
int3 = None : <type 'NoneType'>
=> int3 = 9 : <type 'int'>
==================================================
int0 = 18                                                                # STEP 3
ACTION: int0 = 18 
int0 = None : <type 'NoneType'>
=> int0 = 18 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x10509ee18> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 5
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x104235170> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl1.insert(int3)                                                        # STEP 6
ACTION: avl1.insert(int3) 
int3 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10509ee18> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([9]) : <type 'set'>
==================================================
avl1.delete(int0)                                                        # STEP 7
ACTION: avl1.delete(int0) 
int0 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10509ee18> : <type 'instance'>
avl_REF1 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl0.insert(int1)                                                        # STEP 8
ACTION: avl0.insert(int1) 
int1 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104235170> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([8]) : <type 'set'>
==================================================
int0 = 15                                                                # STEP 9
ACTION: int0 = 15 
int0 = 18 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 10
ACTION: avl0.delete(int3) 
int3 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104235170> : <type 'instance'>
avl_REF0 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.delete(int3)                                                       # STEP 11
ACTION: avl0.delete(int3) 
int3 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104235170> : <type 'instance'>
avl_REF0 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.insert(int0)                                                       # STEP 12
ACTION: avl0.insert(int0) 
int0 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104235170> : <type 'instance'>
avl_REF0 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([8, 15]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 13
ACTION: avl1.delete(int2) 
int2 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10509ee18> : <type 'instance'>
avl_REF1 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int2 = 7                                                                # STEP 14
ACTION: int2 = 7 
int2 = 19 : <type 'int'>
=> int2 = 7 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 15
ACTION: avl0.delete(int1) 
int1 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104235170> : <type 'instance'>
avl_REF0 = set([8, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([15]) : <type 'set'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 16
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x10421cfc8> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int0 = 18                                                               # STEP 17
ACTION: int0 = 18 
int0 = 15 : <type 'int'>
=> int0 = 18 : <type 'int'>
==================================================
int1 = 4                                                                # STEP 18
ACTION: int1 = 4 
int1 = 8 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 19
ACTION: avl0.delete(int1) 
int1 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104235170> : <type 'instance'>
avl_REF0 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
result = avl1.inorder()                                                 # STEP 20
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x10509ee18> : <type 'instance'>
avl_REF1 = set([9]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl2.delete(int0)                                                       # STEP 21
ACTION: avl2.delete(int0) 
int0 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10421cfc8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl0.insert(int2)                                                       # STEP 22
ACTION: avl0.insert(int2) 
int2 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104235170> : <type 'instance'>
avl_REF0 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([7, 15]) : <type 'set'>
==================================================
int0 = 18                                                               # STEP 23
ACTION: int0 = 18 
int0 = 18 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 24
ACTION: avl1.insert(int3) 
int3 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10509ee18> : <type 'instance'>
avl_REF1 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
avl2.insert(int2)                                                       # STEP 25
ACTION: avl2.insert(int2) 
int2 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10421cfc8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([7]) : <type 'set'>
==================================================
result = avl1.find(int2)                                                # STEP 26
ACTION: result = avl1.find(int2) 
int2 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10509ee18> : <type 'instance'>
avl_REF1 = set([9]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl2.delete(int2)                                                       # STEP 27
ACTION: avl2.delete(int2) 
int2 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10421cfc8> : <type 'instance'>
avl_REF2 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int2 = 19                                                               # STEP 28
ACTION: int2 = 19 
int2 = 7 : <type 'int'>
=> int2 = 19 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 29
ACTION: avl1.insert(int3) 
int3 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10509ee18> : <type 'instance'>
avl_REF1 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
avl2.delete(int3)                                                       # STEP 30
ACTION: avl2.delete(int3) 
int3 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10421cfc8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int1 = 16                                                               # STEP 31
ACTION: int1 = 16 
int1 = 4 : <type 'int'>
=> int1 = 16 : <type 'int'>
==================================================
int3 = 11                                                               # STEP 32
ACTION: int3 = 11 
int3 = 9 : <type 'int'>
=> int3 = 11 : <type 'int'>
==================================================
avl2 == avl1                                                            # STEP 33
ACTION: avl2 == avl1 
avl2 = <avl.AVLTree instance at 0x10421cfc8> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x10509ee18> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
avl_REF1 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
avl1 = avl.AVLTree()                                                    # STEP 34
ACTION: avl1 = avl.AVLTree() 
avl1 = <avl.AVLTree instance at 0x10509ee18> : <type 'instance'>
avl_REF1 = set([9]) : <type 'set'>
=> avl1 = <avl.AVLTree instance at 0x104255f38> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 35
ACTION: avl2.insert(int0) 
int0 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10421cfc8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([18]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 36
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x10421cfc8> : <type 'instance'>
avl_REF2 = set([18]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl0.insert(int2)                                                       # STEP 37
ACTION: avl0.insert(int2) 
int2 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104235170> : <type 'instance'>
avl_REF0 = set([7, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([19, 7, 15]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 38
ACTION: avl2.insert(int2) 
int2 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10421cfc8> : <type 'instance'>
avl_REF2 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([18, 19]) : <type 'set'>
==================================================
int2 = 18                                                               # STEP 39
ACTION: int2 = 18 
int2 = 19 : <type 'int'>
=> int2 = 18 : <type 'int'>
==================================================
int0 = 13                                                               # STEP 40
ACTION: int0 = 13 
int0 = 18 : <type 'int'>
=> int0 = 13 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 41
ACTION: avl1.insert(int1) 
int1 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104255f38> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([16]) : <type 'set'>
==================================================
int1 = 3                                                                # STEP 42
ACTION: int1 = 3 
int1 = 16 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 43
ACTION: avl1.delete(int3) 
int3 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104255f38> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.delete(int0)                                                       # STEP 44
ACTION: avl1.delete(int0) 
int0 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104255f38> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.insert(int2)                                                       # STEP 45
ACTION: avl1.insert(int2) 
int2 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104255f38> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([16, 18]) : <type 'set'>
==================================================
int3 = 19                                                               # STEP 46
ACTION: int3 = 19 
int3 = 11 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 47
ACTION: avl2.insert(int2) 
int2 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10421cfc8> : <type 'instance'>
avl_REF2 = set([18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl1.delete(int3)                                                       # STEP 48
ACTION: avl1.delete(int3) 
int3 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104255f38> : <type 'instance'>
avl_REF1 = set([16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.delete(int3)                                                       # STEP 49
ACTION: avl1.delete(int3) 
int3 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104255f38> : <type 'instance'>
avl_REF1 = set([16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl0.delete(int1)                                                       # STEP 50
ACTION: avl0.delete(int1) 
int1 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104235170> : <type 'instance'>
avl_REF0 = set([19, 7, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.insert(int3)                                                       # STEP 51
ACTION: avl0.insert(int3) 
int3 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104235170> : <type 'instance'>
avl_REF0 = set([19, 7, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
avl0.insert(int3)                                                       # STEP 52
ACTION: avl0.insert(int3) 
int3 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104235170> : <type 'instance'>
avl_REF0 = set([19, 7, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
avl0.insert(int1)                                                       # STEP 53
ACTION: avl0.insert(int1) 
int1 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104235170> : <type 'instance'>
avl_REF0 = set([19, 7, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([19, 3, 7, 15]) : <type 'set'>
==================================================
result = avl2.find(int2)                                                # STEP 54
ACTION: result = avl2.find(int2) 
int2 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10421cfc8> : <type 'instance'>
avl_REF2 = set([18, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
result = avl0.find(int0)                                                # STEP 55
ACTION: result = avl0.find(int0) 
int0 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104235170> : <type 'instance'>
avl_REF0 = set([19, 3, 7, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
avl1.delete(int2)                                                       # STEP 56
ACTION: avl1.delete(int2) 
int2 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104255f38> : <type 'instance'>
avl_REF1 = set([16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([16]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 57
ACTION: avl0.delete(int3) 
int3 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104235170> : <type 'instance'>
avl_REF0 = set([19, 3, 7, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([3, 7, 15]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104257ea8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #5 STEP #0 (0:00:32.971653) Fri Apr 28 04:39:44 2017 [ 162 stmts 216 branches ]
  11 [3:1]
-- < 7 [2:1]
---- < 4 [1:1]
------ < 3 [0:0] L
---- > 10 [0:0] L
-- > 13 [1:-1]
---- > 17 [0:0] L
set([3, 4, 7, 10, 11, 13, 17])
  11 [3:1]
-- < 7 [2:1]
---- < 3 [1:0]
------ < 2 [0:0] L
------ > 4 [0:0] L
---- > 10 [0:0] L
-- > 15 [1:0]
---- < 13 [0:0] L
---- > 17 [0:0] L
set([2, 3, 4, 7, 10, 11, 13, 15, 17])
  11 [3:1]
-- < 7 [2:1]
---- < 3 [1:0]
------ < 2 [0:0] L
------ > 4 [0:0] L
---- > 10 [0:0] L
-- > 15 [1:0]
---- < 13 [0:0] L
---- > 17 [0:0] L
set([2, 3, 4, 7, 10, 11, 13, 15, 17])
  11 [3:1]
-- < 7 [2:1]
---- < 3 [1:0]
------ < 2 [0:0] L
------ > 4 [0:0] L
---- > 10 [0:0] L
-- > 15 [1:0]
---- < 13 [0:0] L
---- > 17 [0:0] L
set([2, 3, 4, 7, 10, 11, 13, 15, 17])
  11 [3:1]
-- < 7 [2:1]
---- < 3 [1:0]
------ < 2 [0:0] L
------ > 4 [0:0] L
---- > 10 [0:0] L
-- > 15 [1:0]
---- < 13 [0:0] L
---- > 17 [0:0] L
set([2, 3, 4, 7, 10, 11, 13, 15, 17])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1050b12d8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 53 steps

SAVING TEST AS failure.99697.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 15                                                                # STEP 0
ACTION: int3 = 15 
int3 = None : <type 'NoneType'>
=> int3 = 15 : <type 'int'>
==================================================
int2 = 13                                                                # STEP 1
ACTION: int2 = 13 
int2 = None : <type 'NoneType'>
=> int2 = 13 : <type 'int'>
==================================================
int0 = 10                                                                # STEP 2
ACTION: int0 = 10 
int0 = None : <type 'NoneType'>
=> int0 = 10 : <type 'int'>
==================================================
int1 = 4                                                                 # STEP 3
ACTION: int1 = 4 
int1 = None : <type 'NoneType'>
=> int1 = 4 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x1050b16c8> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
result = avl1.inorder()                                                  # STEP 5
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1050b16c8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
result = avl1.find(int3)                                                 # STEP 6
ACTION: result = avl1.find(int3) 
int3 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1050b16c8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
int3 = 11                                                                # STEP 7
ACTION: int3 = 11 
int3 = 15 : <type 'int'>
=> int3 = 11 : <type 'int'>
==================================================
avl1.insert(int3)                                                        # STEP 8
ACTION: avl1.insert(int3) 
int3 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1050b16c8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([11]) : <type 'set'>
==================================================
avl1.insert(int2)                                                        # STEP 9
ACTION: avl1.insert(int2) 
int2 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1050b16c8> : <type 'instance'>
avl_REF1 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([11, 13]) : <type 'set'>
==================================================
int2 = 3                                                                # STEP 10
ACTION: int2 = 3 
int2 = 13 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 11
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1050b16c8> : <type 'instance'>
avl_REF1 = set([11, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
result = avl1.find(int3)                                                # STEP 12
ACTION: result = avl1.find(int3) 
int3 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1050b16c8> : <type 'instance'>
avl_REF1 = set([11, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl1.insert(int0)                                                       # STEP 13
ACTION: avl1.insert(int0) 
int0 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1050b16c8> : <type 'instance'>
avl_REF1 = set([11, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([10, 11, 13]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 14
ACTION: avl1.insert(int1) 
int1 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1050b16c8> : <type 'instance'>
avl_REF1 = set([10, 11, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([10, 11, 4, 13]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 15
ACTION: avl1.insert(int1) 
int1 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1050b16c8> : <type 'instance'>
avl_REF1 = set([10, 11, 4, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
int3 = 18                                                               # STEP 16
ACTION: int3 = 18 
int3 = 11 : <type 'int'>
=> int3 = 18 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 17
ACTION: avl1.insert(int0) 
int0 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1050b16c8> : <type 'instance'>
avl_REF1 = set([10, 11, 4, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
int1 = 17                                                               # STEP 18
ACTION: int1 = 17 
int1 = 4 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 19
ACTION: avl1.delete(int3) 
int3 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1050b16c8> : <type 'instance'>
avl_REF1 = set([10, 11, 4, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int0 = 7                                                                # STEP 20
ACTION: int0 = 7 
int0 = 10 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 21
ACTION: avl1.delete(int1) 
int1 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1050b16c8> : <type 'instance'>
avl_REF1 = set([10, 11, 4, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
result = avl1.inorder()                                                 # STEP 22
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1050b16c8> : <type 'instance'>
avl_REF1 = set([10, 11, 4, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int1)                                                       # STEP 23
ACTION: avl1.insert(int1) 
int1 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1050b16c8> : <type 'instance'>
avl_REF1 = set([10, 11, 4, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([17, 10, 11, 4, 13]) : <type 'set'>
==================================================
int3 = 2                                                                # STEP 24
ACTION: int3 = 2 
int3 = 18 : <type 'int'>
=> int3 = 2 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 25
ACTION: avl1.insert(int0) 
int0 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1050b16c8> : <type 'instance'>
avl_REF1 = set([17, 10, 11, 4, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([4, 7, 10, 11, 13, 17]) : <type 'set'>
==================================================
int0 = 15                                                               # STEP 26
ACTION: int0 = 15 
int0 = 7 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 27
ACTION: avl1.insert(int2) 
int2 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1050b16c8> : <type 'instance'>
avl_REF1 = set([4, 7, 10, 11, 13, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([3, 4, 7, 10, 11, 13, 17]) : <type 'set'>
==================================================
avl1.display()                                                          # STEP 28
ACTION: avl1.display() 
avl1 = <avl.AVLTree instance at 0x1050b16c8> : <type 'instance'>
avl_REF1 = set([3, 4, 7, 10, 11, 13, 17]) : <type 'set'>
  11 [3:1]
-- < 7 [2:1]
---- < 4 [1:1]
------ < 3 [0:0] L
---- > 10 [0:0] L
-- > 13 [1:-1]
---- > 17 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([3, 4, 7, 10, 11, 13, 17])
==================================================
avl1 == avl1                                                            # STEP 29
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x1050b16c8> : <type 'instance'>
avl_REF1 = set([3, 4, 7, 10, 11, 13, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.insert(int3)                                                       # STEP 30
ACTION: avl1.insert(int3) 
int3 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1050b16c8> : <type 'instance'>
avl_REF1 = set([3, 4, 7, 10, 11, 13, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([2, 3, 4, 7, 10, 11, 13, 17]) : <type 'set'>
==================================================
int1 = 4                                                                # STEP 31
ACTION: int1 = 4 
int1 = 17 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
int3 = 14                                                               # STEP 32
ACTION: int3 = 14 
int3 = 2 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 33
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1050b16c8> : <type 'instance'>
avl_REF1 = set([2, 3, 4, 7, 10, 11, 13, 17]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.delete(int0)                                                       # STEP 34
ACTION: avl1.delete(int0) 
int0 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1050b16c8> : <type 'instance'>
avl_REF1 = set([2, 3, 4, 7, 10, 11, 13, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.delete(int3)                                                       # STEP 35
ACTION: avl1.delete(int3) 
int3 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1050b16c8> : <type 'instance'>
avl_REF1 = set([2, 3, 4, 7, 10, 11, 13, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.insert(int0)                                                       # STEP 36
ACTION: avl1.insert(int0) 
int0 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1050b16c8> : <type 'instance'>
avl_REF1 = set([2, 3, 4, 7, 10, 11, 13, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([2, 3, 4, 7, 10, 11, 13, 15, 17]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 37
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1050b16c8> : <type 'instance'>
avl_REF1 = set([2, 3, 4, 7, 10, 11, 13, 15, 17]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.delete(int3)                                                       # STEP 38
ACTION: avl1.delete(int3) 
int3 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1050b16c8> : <type 'instance'>
avl_REF1 = set([2, 3, 4, 7, 10, 11, 13, 15, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
result = avl1.inorder()                                                 # STEP 39
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1050b16c8> : <type 'instance'>
avl_REF1 = set([2, 3, 4, 7, 10, 11, 13, 15, 17]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.display()                                                          # STEP 40
ACTION: avl1.display() 
avl1 = <avl.AVLTree instance at 0x1050b16c8> : <type 'instance'>
avl_REF1 = set([2, 3, 4, 7, 10, 11, 13, 15, 17]) : <type 'set'>
  11 [3:1]
-- < 7 [2:1]
---- < 3 [1:0]
------ < 2 [0:0] L
------ > 4 [0:0] L
---- > 10 [0:0] L
-- > 15 [1:0]
---- < 13 [0:0] L
---- > 17 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([2, 3, 4, 7, 10, 11, 13, 15, 17])
==================================================
avl1.insert(int0)                                                       # STEP 41
ACTION: avl1.insert(int0) 
int0 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1050b16c8> : <type 'instance'>
avl_REF1 = set([2, 3, 4, 7, 10, 11, 13, 15, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.insert(int0)                                                       # STEP 42
ACTION: avl1.insert(int0) 
int0 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1050b16c8> : <type 'instance'>
avl_REF1 = set([2, 3, 4, 7, 10, 11, 13, 15, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.display()                                                          # STEP 43
ACTION: avl1.display() 
avl1 = <avl.AVLTree instance at 0x1050b16c8> : <type 'instance'>
avl_REF1 = set([2, 3, 4, 7, 10, 11, 13, 15, 17]) : <type 'set'>
  11 [3:1]
-- < 7 [2:1]
---- < 3 [1:0]
------ < 2 [0:0] L
------ > 4 [0:0] L
---- > 10 [0:0] L
-- > 15 [1:0]
---- < 13 [0:0] L
---- > 17 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([2, 3, 4, 7, 10, 11, 13, 15, 17])
==================================================
avl1.delete(int3)                                                       # STEP 44
ACTION: avl1.delete(int3) 
int3 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1050b16c8> : <type 'instance'>
avl_REF1 = set([2, 3, 4, 7, 10, 11, 13, 15, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.display()                                                          # STEP 45
ACTION: avl1.display() 
avl1 = <avl.AVLTree instance at 0x1050b16c8> : <type 'instance'>
avl_REF1 = set([2, 3, 4, 7, 10, 11, 13, 15, 17]) : <type 'set'>
  11 [3:1]
-- < 7 [2:1]
---- < 3 [1:0]
------ < 2 [0:0] L
------ > 4 [0:0] L
---- > 10 [0:0] L
-- > 15 [1:0]
---- < 13 [0:0] L
---- > 17 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([2, 3, 4, 7, 10, 11, 13, 15, 17])
==================================================
result = avl1.find(int3)                                                # STEP 46
ACTION: result = avl1.find(int3) 
int3 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1050b16c8> : <type 'instance'>
avl_REF1 = set([2, 3, 4, 7, 10, 11, 13, 15, 17]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl1.insert(int0)                                                       # STEP 47
ACTION: avl1.insert(int0) 
int0 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1050b16c8> : <type 'instance'>
avl_REF1 = set([2, 3, 4, 7, 10, 11, 13, 15, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.display()                                                          # STEP 48
ACTION: avl1.display() 
avl1 = <avl.AVLTree instance at 0x1050b16c8> : <type 'instance'>
avl_REF1 = set([2, 3, 4, 7, 10, 11, 13, 15, 17]) : <type 'set'>
  11 [3:1]
-- < 7 [2:1]
---- < 3 [1:0]
------ < 2 [0:0] L
------ > 4 [0:0] L
---- > 10 [0:0] L
-- > 15 [1:0]
---- < 13 [0:0] L
---- > 17 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([2, 3, 4, 7, 10, 11, 13, 15, 17])
==================================================
int0 = 7                                                                # STEP 49
ACTION: int0 = 7 
int0 = 15 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 50
ACTION: avl1.delete(int2) 
int2 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1050b16c8> : <type 'instance'>
avl_REF1 = set([2, 3, 4, 7, 10, 11, 13, 15, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([2, 4, 7, 10, 11, 13, 15, 17]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 51
ACTION: avl1.delete(int2) 
int2 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1050b16c8> : <type 'instance'>
avl_REF1 = set([2, 4, 7, 10, 11, 13, 15, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.delete(int0)                                                       # STEP 52
ACTION: avl1.delete(int0) 
int0 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1050b16c8> : <type 'instance'>
avl_REF1 = set([2, 4, 7, 10, 11, 13, 15, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([2, 4, 10, 11, 13, 15, 17]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1050b5518>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
  7 [2:0]
-- < 5 [1:-1]
---- > 6 [0:0] L
-- > 13 [1:0]
---- < 12 [0:0] L
---- > 17 [0:0] L
set([5, 6, 7, 12, 13, 17])
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 44
STOPPING TESTING DUE TO TIMEOUT
8.72073294876 PERCENT COVERED
60.2213749886 TOTAL RUNTIME
8 EXECUTED
655 TOTAL TEST OPERATIONS
25.5903007984 TIME SPENT EXECUTING TEST OPERATIONS
0.0726246833801 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
25.8153750896 TIME SPENT CHECKING PROPERTIES
51.4056758881 TOTAL TIME SPENT RUNNING SUT
0.00466108322144 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
2 FAILED
0 REPEATS OF FAILURES
2 ACTUAL DISTINCT FAILURES

FAILURE 0
int2 = 19                                                                # STEP 0
int1 = 8                                                                 # STEP 1
int3 = 9                                                                 # STEP 2
int0 = 18                                                                # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
avl0 = avl.AVLTree()                                                     # STEP 5
avl1.insert(int3)                                                        # STEP 6
avl1.delete(int0)                                                        # STEP 7
avl0.insert(int1)                                                        # STEP 8
int0 = 15                                                                # STEP 9
avl0.delete(int3)                                                       # STEP 10
avl0.delete(int3)                                                       # STEP 11
avl0.insert(int0)                                                       # STEP 12
avl1.delete(int2)                                                       # STEP 13
int2 = 7                                                                # STEP 14
avl0.delete(int1)                                                       # STEP 15
avl2 = avl.AVLTree()                                                    # STEP 16
int0 = 18                                                               # STEP 17
int1 = 4                                                                # STEP 18
avl0.delete(int1)                                                       # STEP 19
result = avl1.inorder()                                                 # STEP 20
avl2.delete(int0)                                                       # STEP 21
avl0.insert(int2)                                                       # STEP 22
int0 = 18                                                               # STEP 23
avl1.insert(int3)                                                       # STEP 24
avl2.insert(int2)                                                       # STEP 25
result = avl1.find(int2)                                                # STEP 26
avl2.delete(int2)                                                       # STEP 27
int2 = 19                                                               # STEP 28
avl1.insert(int3)                                                       # STEP 29
avl2.delete(int3)                                                       # STEP 30
int1 = 16                                                               # STEP 31
int3 = 11                                                               # STEP 32
avl2 == avl1                                                            # STEP 33
avl1 = avl.AVLTree()                                                    # STEP 34
avl2.insert(int0)                                                       # STEP 35
result = avl2.inorder()                                                 # STEP 36
avl0.insert(int2)                                                       # STEP 37
avl2.insert(int2)                                                       # STEP 38
int2 = 18                                                               # STEP 39
int0 = 13                                                               # STEP 40
avl1.insert(int1)                                                       # STEP 41
int1 = 3                                                                # STEP 42
avl1.delete(int3)                                                       # STEP 43
avl1.delete(int0)                                                       # STEP 44
avl1.insert(int2)                                                       # STEP 45
int3 = 19                                                               # STEP 46
avl2.insert(int2)                                                       # STEP 47
avl1.delete(int3)                                                       # STEP 48
avl1.delete(int3)                                                       # STEP 49
avl0.delete(int1)                                                       # STEP 50
avl0.insert(int3)                                                       # STEP 51
avl0.insert(int3)                                                       # STEP 52
avl0.insert(int1)                                                       # STEP 53
result = avl2.find(int2)                                                # STEP 54
result = avl0.find(int0)                                                # STEP 55
avl1.delete(int2)                                                       # STEP 56
avl0.delete(int3)                                                       # STEP 57
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104257ea8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE 1
int3 = 15                                                                # STEP 0
int2 = 13                                                                # STEP 1
int0 = 10                                                                # STEP 2
int1 = 4                                                                 # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
result = avl1.inorder()                                                  # STEP 5
result = avl1.find(int3)                                                 # STEP 6
int3 = 11                                                                # STEP 7
avl1.insert(int3)                                                        # STEP 8
avl1.insert(int2)                                                        # STEP 9
int2 = 3                                                                # STEP 10
result = avl1.inorder()                                                 # STEP 11
result = avl1.find(int3)                                                # STEP 12
avl1.insert(int0)                                                       # STEP 13
avl1.insert(int1)                                                       # STEP 14
avl1.insert(int1)                                                       # STEP 15
int3 = 18                                                               # STEP 16
avl1.insert(int0)                                                       # STEP 17
int1 = 17                                                               # STEP 18
avl1.delete(int3)                                                       # STEP 19
int0 = 7                                                                # STEP 20
avl1.delete(int1)                                                       # STEP 21
result = avl1.inorder()                                                 # STEP 22
avl1.insert(int1)                                                       # STEP 23
int3 = 2                                                                # STEP 24
avl1.insert(int0)                                                       # STEP 25
int0 = 15                                                               # STEP 26
avl1.insert(int2)                                                       # STEP 27
avl1.display()                                                          # STEP 28
avl1 == avl1                                                            # STEP 29
avl1.insert(int3)                                                       # STEP 30
int1 = 4                                                                # STEP 31
int3 = 14                                                               # STEP 32
result = avl1.inorder()                                                 # STEP 33
avl1.delete(int0)                                                       # STEP 34
avl1.delete(int3)                                                       # STEP 35
avl1.insert(int0)                                                       # STEP 36
result = avl1.inorder()                                                 # STEP 37
avl1.delete(int3)                                                       # STEP 38
result = avl1.inorder()                                                 # STEP 39
avl1.display()                                                          # STEP 40
avl1.insert(int0)                                                       # STEP 41
avl1.insert(int0)                                                       # STEP 42
avl1.display()                                                          # STEP 43
avl1.delete(int3)                                                       # STEP 44
avl1.display()                                                          # STEP 45
result = avl1.find(int3)                                                # STEP 46
avl1.insert(int0)                                                       # STEP 47
avl1.display()                                                          # STEP 48
int0 = 7                                                                # STEP 49
avl1.delete(int2)                                                       # STEP 50
avl1.delete(int2)                                                       # STEP 51
avl1.delete(int0)                                                       # STEP 52
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1050b5518>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
220 BRANCHES COVERED
164 STATEMENTS COVERED

Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=True, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.39831.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
TEST #4 STEP #23 (0:00:30.011781) Mon May  1 01:52:27 2017 [ 140 stmts 183 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102b8d638>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
Original test has 30 steps

SAVING TEST AS failure.39831.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
avl1 = avl.AVLTree()                                                     # STEP 0
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x101da66c8> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
result = avl1.inorder()                                                  # STEP 1
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x101da66c8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int0 = 7                                                                 # STEP 2
ACTION: int0 = 7 
int0 = None : <type 'NoneType'>
=> int0 = 7 : <type 'int'>
==================================================
avl1.insert(int0)                                                        # STEP 3
ACTION: avl1.insert(int0) 
int0 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101da66c8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([7]) : <type 'set'>
==================================================
avl1.delete(int0)                                                        # STEP 4
ACTION: avl1.delete(int0) 
int0 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101da66c8> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.delete(int0)                                                        # STEP 5
ACTION: avl1.delete(int0) 
int0 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101da66c8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
result = avl1.inorder()                                                  # STEP 6
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x101da66c8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
result = avl1.inorder()                                                  # STEP 7
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x101da66c8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int0)                                                        # STEP 8
ACTION: avl1.insert(int0) 
int0 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101da66c8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([7]) : <type 'set'>
==================================================
avl1 == avl1                                                             # STEP 9
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x101da66c8> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.insert(int0)                                                       # STEP 10
ACTION: avl1.insert(int0) 
int0 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101da66c8> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
int0 = 20                                                               # STEP 11
ACTION: int0 = 20 
int0 = 7 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 12
ACTION: avl1.insert(int0) 
int0 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101da66c8> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([20, 7]) : <type 'set'>
==================================================
int3 = 13                                                               # STEP 13
ACTION: int3 = 13 
int3 = None : <type 'NoneType'>
=> int3 = 13 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 14
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x101da66c8> : <type 'instance'>
avl_REF1 = set([20, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int3)                                                       # STEP 15
ACTION: avl1.insert(int3) 
int3 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101da66c8> : <type 'instance'>
avl_REF1 = set([20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([20, 13, 7]) : <type 'set'>
==================================================
int0 = 13                                                               # STEP 16
ACTION: int0 = 13 
int0 = 20 : <type 'int'>
=> int0 = 13 : <type 'int'>
==================================================
int3 = 5                                                                # STEP 17
ACTION: int3 = 5 
int3 = 13 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 18
ACTION: avl1.delete(int0) 
int0 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101da66c8> : <type 'instance'>
avl_REF1 = set([20, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([20, 7]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 19
ACTION: avl1.insert(int0) 
int0 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101da66c8> : <type 'instance'>
avl_REF1 = set([20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([20, 13, 7]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 20
ACTION: avl1.insert(int0) 
int0 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101da66c8> : <type 'instance'>
avl_REF1 = set([20, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.insert(int0)                                                       # STEP 21
ACTION: avl1.insert(int0) 
int0 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101da66c8> : <type 'instance'>
avl_REF1 = set([20, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.delete(int0)                                                       # STEP 22
ACTION: avl1.delete(int0) 
int0 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101da66c8> : <type 'instance'>
avl_REF1 = set([20, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([20, 7]) : <type 'set'>
==================================================
int1 = 10                                                               # STEP 23
ACTION: int1 = 10 
int1 = None : <type 'NoneType'>
=> int1 = 10 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 24
ACTION: avl1.delete(int3) 
int3 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101da66c8> : <type 'instance'>
avl_REF1 = set([20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int3 = 19                                                               # STEP 25
ACTION: int3 = 19 
int3 = 5 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
int0 = 8                                                                # STEP 26
ACTION: int0 = 8 
int0 = 13 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 27
ACTION: avl1.insert(int3) 
int3 = 19 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101da66c8> : <type 'instance'>
avl_REF1 = set([20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([19, 20, 7]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 28
ACTION: avl1.insert(int1) 
int1 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101da66c8> : <type 'instance'>
avl_REF1 = set([19, 20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([10, 19, 20, 7]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 29
ACTION: avl1.delete(int3) 
int3 = 19 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101da66c8> : <type 'instance'>
avl_REF1 = set([10, 19, 20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([10, 20, 7]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102896098>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
  16 [2:0]
-- < 9 [1:0]
---- < 1 [0:0] L
---- > 15 [0:0] L
-- > 19 [1:0]
---- < 18 [0:0] L
---- > 20 [0:0] L
set([1, 9, 15, 16, 18, 19, 20])
  16 [2:0]
-- < 9 [1:0]
---- < 1 [0:0] L
---- > 15 [0:0] L
-- > 19 [1:0]
---- < 18 [0:0] L
---- > 20 [0:0] L
set([1, 9, 15, 16, 18, 19, 20])
  16 [2:0]
-- < 9 [1:0]
---- < 1 [0:0] L
---- > 15 [0:0] L
-- > 19 [1:0]
---- < 18 [0:0] L
---- > 20 [0:0] L
set([1, 9, 15, 16, 18, 19, 20])
  16 [3:1]
-- < 9 [2:1]
---- < 4 [1:0]
------ < 1 [0:0] L
------ > 6 [0:0] L
---- > 15 [0:0] L
-- > 19 [1:0]
---- < 18 [0:0] L
---- > 20 [0:0] L
set([1, 4, 6, 9, 15, 16, 18, 19, 20])
  16 [3:1]
-- < 9 [2:1]
---- < 4 [1:0]
------ < 1 [0:0] L
------ > 6 [0:0] L
---- > 15 [0:0] L
-- > 19 [1:0]
---- < 18 [0:0] L
---- > 20 [0:0] L
set([1, 4, 6, 9, 15, 16, 18, 19, 20])
  10 [2:0]
-- < 6 [1:1]
---- < 4 [0:0] L
-- > 19 [1:0]
---- < 18 [0:0] L
---- > 20 [0:0] L
set([4, 6, 10, 18, 19, 20])
  10 [3:-1]
-- < 6 [1:1]
---- < 4 [0:0] L
-- > 19 [2:1]
---- < 18 [1:1]
------ < 13 [0:0] L
---- > 20 [0:0] L
set([4, 6, 10, 13, 18, 19, 20])
  10 [3:-1]
-- < 6 [1:1]
---- < 4 [0:0] L
-- > 19 [2:1]
---- < 18 [1:1]
------ < 13 [0:0] L
---- > 20 [0:0] L
set([4, 6, 10, 13, 18, 19, 20])
  10 [3:-1]
-- < 6 [1:0]
---- < 4 [0:0] L
---- > 9 [0:0] L
-- > 19 [2:1]
---- < 18 [1:1]
------ < 13 [0:0] L
---- > 20 [0:0] L
set([4, 6, 9, 10, 13, 18, 19, 20])
  10 [3:-1]
-- < 6 [1:0]
---- < 4 [0:0] L
---- > 9 [0:0] L
-- > 19 [2:1]
---- < 18 [1:1]
------ < 13 [0:0] L
---- > 20 [0:0] L
set([4, 6, 9, 10, 13, 18, 19, 20])
  10 [3:-1]
-- < 6 [1:0]
---- < 4 [0:0] L
---- > 9 [0:0] L
-- > 19 [2:1]
---- < 18 [1:1]
------ < 13 [0:0] L
---- > 20 [0:0] L
set([4, 6, 9, 10, 13, 18, 19, 20])
  10 [3:-1]
-- < 6 [1:0]
---- < 4 [0:0] L
---- > 9 [0:0] L
-- > 19 [2:1]
---- < 18 [1:1]
------ < 13 [0:0] L
---- > 20 [0:0] L
set([4, 6, 9, 10, 13, 18, 19, 20])
  10 [3:-1]
-- < 6 [1:0]
---- < 4 [0:0] L
---- > 9 [0:0] L
-- > 19 [2:1]
---- < 18 [1:1]
------ < 13 [0:0] L
---- > 20 [0:0] L
set([4, 6, 9, 10, 13, 18, 19, 20])
  10 [3:0]
-- < 6 [2:-1]
---- < 4 [0:0] L
---- > 9 [1:1]
------ < 7 [0:0] L
-- > 19 [2:1]
---- < 18 [1:1]
------ < 13 [0:0] L
---- > 20 [0:0] L
set([4, 6, 7, 9, 10, 13, 18, 19, 20])
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 83
STOPPING TESTING DUE TO TIMEOUT
8.81587508133 PERCENT COVERED
60.2253000736 TOTAL RUNTIME
7 EXECUTED
613 TOTAL TEST OPERATIONS
28.4046635628 TIME SPENT EXECUTING TEST OPERATIONS
0.0962045192719 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
28.7642560005 TIME SPENT CHECKING PROPERTIES
57.1689195633 TOTAL TIME SPENT RUNNING SUT
0.00417685508728 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
avl1 = avl.AVLTree()                                                     # STEP 0
result = avl1.inorder()                                                  # STEP 1
int0 = 7                                                                 # STEP 2
avl1.insert(int0)                                                        # STEP 3
avl1.delete(int0)                                                        # STEP 4
avl1.delete(int0)                                                        # STEP 5
result = avl1.inorder()                                                  # STEP 6
result = avl1.inorder()                                                  # STEP 7
avl1.insert(int0)                                                        # STEP 8
avl1 == avl1                                                             # STEP 9
avl1.insert(int0)                                                       # STEP 10
int0 = 20                                                               # STEP 11
avl1.insert(int0)                                                       # STEP 12
int3 = 13                                                               # STEP 13
result = avl1.inorder()                                                 # STEP 14
avl1.insert(int3)                                                       # STEP 15
int0 = 13                                                               # STEP 16
int3 = 5                                                                # STEP 17
avl1.delete(int0)                                                       # STEP 18
avl1.insert(int0)                                                       # STEP 19
avl1.insert(int0)                                                       # STEP 20
avl1.insert(int0)                                                       # STEP 21
avl1.delete(int0)                                                       # STEP 22
int1 = 10                                                               # STEP 23
avl1.delete(int3)                                                       # STEP 24
int3 = 19                                                               # STEP 25
int0 = 8                                                                # STEP 26
avl1.insert(int3)                                                       # STEP 27
avl1.insert(int1)                                                       # STEP 28
avl1.delete(int3)                                                       # STEP 29
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102896098>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
214 BRANCHES COVERED
161 STATEMENTS COVERED

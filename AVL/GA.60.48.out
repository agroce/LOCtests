Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.14384.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102a105a8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
Original test has 44 steps

SAVING TEST AS failure.14384.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 18                                                                # STEP 0
ACTION: int1 = 18 
int1 = None : <type 'NoneType'>
=> int1 = 18 : <type 'int'>
==================================================
int3 = 18                                                                # STEP 1
ACTION: int3 = 18 
int3 = None : <type 'NoneType'>
=> int3 = 18 : <type 'int'>
==================================================
int2 = 8                                                                 # STEP 2
ACTION: int2 = 8 
int2 = None : <type 'NoneType'>
=> int2 = 8 : <type 'int'>
==================================================
int0 = 17                                                                # STEP 3
ACTION: int0 = 17 
int0 = None : <type 'NoneType'>
=> int0 = 17 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x10288c098> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 5
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x10288c8c0> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.insert(int2)                                                        # STEP 6
ACTION: avl0.insert(int2) 
int2 = 8 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10288c8c0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([8]) : <type 'set'>
==================================================
result = avl1.find(int2)                                                 # STEP 7
ACTION: result = avl1.find(int2) 
int2 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10288c098> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
result = avl1.find(int2)                                                 # STEP 8
ACTION: result = avl1.find(int2) 
int2 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10288c098> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int2 = 8                                                                 # STEP 9
ACTION: int2 = 8 
int2 = 8 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 10
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x10288c098> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl0.delete(int1)                                                       # STEP 11
ACTION: avl0.delete(int1) 
int1 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10288c8c0> : <type 'instance'>
avl_REF0 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int1 = 3                                                                # STEP 12
ACTION: int1 = 3 
int1 = 18 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 13
ACTION: avl1.insert(int1) 
int1 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10288c098> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([3]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 14
ACTION: avl0.delete(int0) 
int0 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10288c8c0> : <type 'instance'>
avl_REF0 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl1.insert(int0)                                                       # STEP 15
ACTION: avl1.insert(int0) 
int0 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10288c098> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([17, 3]) : <type 'set'>
==================================================
int0 = 16                                                               # STEP 16
ACTION: int0 = 16 
int0 = 17 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 17
ACTION: avl0.insert(int1) 
int1 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10288c8c0> : <type 'instance'>
avl_REF0 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([8, 3]) : <type 'set'>
==================================================
result = avl0.find(int2)                                                # STEP 18
ACTION: result = avl0.find(int2) 
int2 = 8 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10288c8c0> : <type 'instance'>
avl_REF0 = set([8, 3]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl1.insert(int2)                                                       # STEP 19
ACTION: avl1.insert(int2) 
int2 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10288c098> : <type 'instance'>
avl_REF1 = set([17, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([8, 17, 3]) : <type 'set'>
==================================================
avl1 == avl1                                                            # STEP 20
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x10288c098> : <type 'instance'>
avl_REF1 = set([8, 17, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
int2 = 20                                                               # STEP 21
ACTION: int2 = 20 
int2 = 8 : <type 'int'>
=> int2 = 20 : <type 'int'>
==================================================
int1 = 12                                                               # STEP 22
ACTION: int1 = 12 
int1 = 3 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 23
ACTION: avl1.insert(int0) 
int0 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10288c098> : <type 'instance'>
avl_REF1 = set([8, 17, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([8, 17, 3, 16]) : <type 'set'>
==================================================
result = avl1.find(int0)                                                # STEP 24
ACTION: result = avl1.find(int0) 
int0 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10288c098> : <type 'instance'>
avl_REF1 = set([8, 17, 3, 16]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
result = avl1.find(int3)                                                # STEP 25
ACTION: result = avl1.find(int3) 
int3 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10288c098> : <type 'instance'>
avl_REF1 = set([8, 17, 3, 16]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl0.delete(int2)                                                       # STEP 26
ACTION: avl0.delete(int2) 
int2 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10288c8c0> : <type 'instance'>
avl_REF0 = set([8, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl1.insert(int3)                                                       # STEP 27
ACTION: avl1.insert(int3) 
int3 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10288c098> : <type 'instance'>
avl_REF1 = set([8, 17, 3, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([8, 17, 18, 3, 16]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 28
ACTION: avl0.delete(int3) 
int3 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10288c8c0> : <type 'instance'>
avl_REF0 = set([8, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int2 = 18                                                               # STEP 29
ACTION: int2 = 18 
int2 = 20 : <type 'int'>
=> int2 = 18 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 30
ACTION: avl1.insert(int2) 
int2 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10288c098> : <type 'instance'>
avl_REF1 = set([8, 17, 18, 3, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
avl0.insert(int3)                                                       # STEP 31
ACTION: avl0.insert(int3) 
int3 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10288c8c0> : <type 'instance'>
avl_REF0 = set([8, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([8, 18, 3]) : <type 'set'>
==================================================
result = avl1.find(int1)                                                # STEP 32
ACTION: result = avl1.find(int1) 
int1 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10288c098> : <type 'instance'>
avl_REF1 = set([8, 17, 18, 3, 16]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int3 = 11                                                               # STEP 33
ACTION: int3 = 11 
int3 = 18 : <type 'int'>
=> int3 = 11 : <type 'int'>
==================================================
int2 = 3                                                                # STEP 34
ACTION: int2 = 3 
int2 = 18 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 35
ACTION: avl1.insert(int1) 
int1 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10288c098> : <type 'instance'>
avl_REF1 = set([8, 17, 18, 3, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([3, 8, 12, 16, 17, 18]) : <type 'set'>
==================================================
int0 = 4                                                                # STEP 36
ACTION: int0 = 4 
int0 = 16 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
result = avl0.find(int3)                                                # STEP 37
ACTION: result = avl0.find(int3) 
int3 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10288c8c0> : <type 'instance'>
avl_REF0 = set([8, 18, 3]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
int1 = 4                                                                # STEP 38
ACTION: int1 = 4 
int1 = 12 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 39
ACTION: avl0.insert(int3) 
int3 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10288c8c0> : <type 'instance'>
avl_REF0 = set([8, 18, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([8, 11, 18, 3]) : <type 'set'>
==================================================
result = avl0.find(int0)                                                # STEP 40
ACTION: result = avl0.find(int0) 
int0 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10288c8c0> : <type 'instance'>
avl_REF0 = set([8, 11, 18, 3]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
int0 = 13                                                               # STEP 41
ACTION: int0 = 13 
int0 = 4 : <type 'int'>
=> int0 = 13 : <type 'int'>
==================================================
int3 = 6                                                                # STEP 42
ACTION: int3 = 6 
int3 = 11 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 43
ACTION: avl0.delete(int2) 
int2 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10288c8c0> : <type 'instance'>
avl_REF0 = set([8, 11, 18, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([8, 11, 18]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x101dfbf38>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #4 STEP #8 (0:00:30.060550) Sun Apr 30 03:59:29 2017 [ 137 stmts 182 branches ]
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 92
STOPPING TESTING DUE TO TIMEOUT
7.94438927507 PERCENT COVERED
60.2874450684 TOTAL RUNTIME
6 EXECUTED
536 TOTAL TEST OPERATIONS
27.7188284397 TIME SPENT EXECUTING TEST OPERATIONS
0.0211312770844 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
27.8760006428 TIME SPENT CHECKING PROPERTIES
55.5948290825 TOTAL TIME SPENT RUNNING SUT
0.00432682037354 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int1 = 18                                                                # STEP 0
int3 = 18                                                                # STEP 1
int2 = 8                                                                 # STEP 2
int0 = 17                                                                # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
avl0 = avl.AVLTree()                                                     # STEP 5
avl0.insert(int2)                                                        # STEP 6
result = avl1.find(int2)                                                 # STEP 7
result = avl1.find(int2)                                                 # STEP 8
int2 = 8                                                                 # STEP 9
avl1 == avl1                                                            # STEP 10
avl0.delete(int1)                                                       # STEP 11
int1 = 3                                                                # STEP 12
avl1.insert(int1)                                                       # STEP 13
avl0.delete(int0)                                                       # STEP 14
avl1.insert(int0)                                                       # STEP 15
int0 = 16                                                               # STEP 16
avl0.insert(int1)                                                       # STEP 17
result = avl0.find(int2)                                                # STEP 18
avl1.insert(int2)                                                       # STEP 19
avl1 == avl1                                                            # STEP 20
int2 = 20                                                               # STEP 21
int1 = 12                                                               # STEP 22
avl1.insert(int0)                                                       # STEP 23
result = avl1.find(int0)                                                # STEP 24
result = avl1.find(int3)                                                # STEP 25
avl0.delete(int2)                                                       # STEP 26
avl1.insert(int3)                                                       # STEP 27
avl0.delete(int3)                                                       # STEP 28
int2 = 18                                                               # STEP 29
avl1.insert(int2)                                                       # STEP 30
avl0.insert(int3)                                                       # STEP 31
result = avl1.find(int1)                                                # STEP 32
int3 = 11                                                               # STEP 33
int2 = 3                                                                # STEP 34
avl1.insert(int1)                                                       # STEP 35
int0 = 4                                                                # STEP 36
result = avl0.find(int3)                                                # STEP 37
int1 = 4                                                                # STEP 38
avl0.insert(int3)                                                       # STEP 39
result = avl0.find(int0)                                                # STEP 40
int0 = 13                                                               # STEP 41
int3 = 6                                                                # STEP 42
avl0.delete(int2)                                                       # STEP 43
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x101dfbf38>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
197 BRANCHES COVERED
149 STATEMENTS COVERED

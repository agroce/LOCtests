Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.62366.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1025eecb0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
Original test has 47 steps

SAVING TEST AS failure.62366.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 8                                                                 # STEP 0
ACTION: int1 = 8 
int1 = None : <type 'NoneType'>
=> int1 = 8 : <type 'int'>
==================================================
int3 = 2                                                                 # STEP 1
ACTION: int3 = 2 
int3 = None : <type 'NoneType'>
=> int3 = 2 : <type 'int'>
==================================================
int0 = 6                                                                 # STEP 2
ACTION: int0 = 6 
int0 = None : <type 'NoneType'>
=> int0 = 6 : <type 'int'>
==================================================
int2 = 5                                                                 # STEP 3
ACTION: int2 = 5 
int2 = None : <type 'NoneType'>
=> int2 = 5 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x10261af80> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.delete(int0)                                                        # STEP 5
ACTION: avl2.delete(int0) 
int0 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10261af80> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int0 = 5                                                                 # STEP 6
ACTION: int0 = 5 
int0 = 6 : <type 'int'>
=> int0 = 5 : <type 'int'>
==================================================
avl2.insert(int0)                                                        # STEP 7
ACTION: avl2.insert(int0) 
int0 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10261af80> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([5]) : <type 'set'>
==================================================
avl2.insert(int2)                                                        # STEP 8
ACTION: avl2.insert(int2) 
int2 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10261af80> : <type 'instance'>
avl_REF2 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl2.delete(int0)                                                        # STEP 9
ACTION: avl2.delete(int0) 
int0 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10261af80> : <type 'instance'>
avl_REF2 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 10
ACTION: avl2.insert(int1) 
int1 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10261af80> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([8]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 11
ACTION: avl2.delete(int3) 
int3 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10261af80> : <type 'instance'>
avl_REF2 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
result = avl2.inorder()                                                 # STEP 12
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x10261af80> : <type 'instance'>
avl_REF2 = set([8]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int0)                                                       # STEP 13
ACTION: avl2.delete(int0) 
int0 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10261af80> : <type 'instance'>
avl_REF2 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.insert(int2)                                                       # STEP 14
ACTION: avl2.insert(int2) 
int2 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10261af80> : <type 'instance'>
avl_REF2 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([8, 5]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 15
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x10261af80> : <type 'instance'>
avl_REF2 = set([8, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl2.find(int3)                                                # STEP 16
ACTION: result = avl2.find(int3) 
int3 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10261af80> : <type 'instance'>
avl_REF2 = set([8, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
result = avl2.inorder()                                                 # STEP 17
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x10261af80> : <type 'instance'>
avl_REF2 = set([8, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int0 = 15                                                               # STEP 18
ACTION: int0 = 15 
int0 = 5 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 19
ACTION: avl2.insert(int3) 
int3 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10261af80> : <type 'instance'>
avl_REF2 = set([8, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([8, 2, 5]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 20
ACTION: avl2.insert(int3) 
int3 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10261af80> : <type 'instance'>
avl_REF2 = set([8, 2, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
avl2.insert(int0)                                                       # STEP 21
ACTION: avl2.insert(int0) 
int0 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10261af80> : <type 'instance'>
avl_REF2 = set([8, 2, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([8, 2, 5, 15]) : <type 'set'>
==================================================
int1 = 1                                                                # STEP 22
ACTION: int1 = 1 
int1 = 8 : <type 'int'>
=> int1 = 1 : <type 'int'>
==================================================
int3 = 9                                                                # STEP 23
ACTION: int3 = 9 
int3 = 2 : <type 'int'>
=> int3 = 9 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 24
ACTION: avl2.delete(int3) 
int3 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10261af80> : <type 'instance'>
avl_REF2 = set([8, 2, 5, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
result = avl2.inorder()                                                 # STEP 25
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x10261af80> : <type 'instance'>
avl_REF2 = set([8, 2, 5, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl2.inorder()                                                 # STEP 26
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x10261af80> : <type 'instance'>
avl_REF2 = set([8, 2, 5, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int2)                                                       # STEP 27
ACTION: avl2.delete(int2) 
int2 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10261af80> : <type 'instance'>
avl_REF2 = set([8, 2, 5, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([8, 2, 15]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 28
ACTION: avl2.delete(int0) 
int0 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10261af80> : <type 'instance'>
avl_REF2 = set([8, 2, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([8, 2]) : <type 'set'>
==================================================
int0 = 18                                                               # STEP 29
ACTION: int0 = 18 
int0 = 15 : <type 'int'>
=> int0 = 18 : <type 'int'>
==================================================
result = avl2.find(int0)                                                # STEP 30
ACTION: result = avl2.find(int0) 
int0 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10261af80> : <type 'instance'>
avl_REF2 = set([8, 2]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl2.insert(int0)                                                       # STEP 31
ACTION: avl2.insert(int0) 
int0 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10261af80> : <type 'instance'>
avl_REF2 = set([8, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([8, 2, 18]) : <type 'set'>
==================================================
int2 = 14                                                               # STEP 32
ACTION: int2 = 14 
int2 = 5 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 33
ACTION: avl2.delete(int1) 
int1 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10261af80> : <type 'instance'>
avl_REF2 = set([8, 2, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int3 = 15                                                               # STEP 34
ACTION: int3 = 15 
int3 = 9 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
int1 = 18                                                               # STEP 35
ACTION: int1 = 18 
int1 = 1 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 36
ACTION: avl2.delete(int3) 
int3 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10261af80> : <type 'instance'>
avl_REF2 = set([8, 2, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.delete(int0)                                                       # STEP 37
ACTION: avl2.delete(int0) 
int0 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10261af80> : <type 'instance'>
avl_REF2 = set([8, 2, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([8, 2]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 38
ACTION: avl2.insert(int3) 
int3 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10261af80> : <type 'instance'>
avl_REF2 = set([8, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([8, 2, 15]) : <type 'set'>
==================================================
int0 = 18                                                               # STEP 39
ACTION: int0 = 18 
int0 = 18 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 40
ACTION: avl2.insert(int1) 
int1 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10261af80> : <type 'instance'>
avl_REF2 = set([8, 2, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([8, 2, 18, 15]) : <type 'set'>
==================================================
int1 = 17                                                               # STEP 41
ACTION: int1 = 17 
int1 = 18 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 42
ACTION: avl2.delete(int1) 
int1 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10261af80> : <type 'instance'>
avl_REF2 = set([8, 2, 18, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int3 = 2                                                                # STEP 43
ACTION: int3 = 2 
int3 = 15 : <type 'int'>
=> int3 = 2 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 44
ACTION: avl2.insert(int0) 
int0 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10261af80> : <type 'instance'>
avl_REF2 = set([8, 2, 18, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl2.insert(int0)                                                       # STEP 45
ACTION: avl2.insert(int0) 
int0 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10261af80> : <type 'instance'>
avl_REF2 = set([8, 2, 18, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl2.delete(int3)                                                       # STEP 46
ACTION: avl2.delete(int3) 
int3 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10261af80> : <type 'instance'>
avl_REF2 = set([8, 2, 18, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([8, 18, 15]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103345440>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
  16 [3:1]
-- < 10 [2:1]
---- < 4 [1:-1]
------ > 5 [0:0] L
---- > 12 [0:0] L
-- > 20 [1:1]
---- < 18 [0:0] L
set([4, 5, 10, 12, 16, 18, 20])
  16 [3:1]
-- < 10 [2:1]
---- < 4 [1:-1]
------ > 5 [0:0] L
---- > 12 [0:0] L
-- > 20 [1:1]
---- < 18 [0:0] L
set([4, 5, 10, 12, 16, 18, 20])
  15 [2:0]
-- < 5 [1:0]
---- < 3 [0:0] L
---- > 12 [0:0] L
-- > 19 [1:1]
---- < 16 [0:0] L
set([3, 5, 12, 15, 16, 19])
  15 [2:0]
-- < 5 [1:0]
---- < 3 [0:0] L
---- > 12 [0:0] L
-- > 19 [1:1]
---- < 16 [0:0] L
set([3, 5, 12, 15, 16, 19])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103663dd0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
Original test has 38 steps

SAVING TEST AS failure.62366.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 3                                                                 # STEP 0
ACTION: int1 = 3 
int1 = None : <type 'NoneType'>
=> int1 = 3 : <type 'int'>
==================================================
int0 = 19                                                                # STEP 1
ACTION: int0 = 19 
int0 = None : <type 'NoneType'>
=> int0 = 19 : <type 'int'>
==================================================
int2 = 15                                                                # STEP 2
ACTION: int2 = 15 
int2 = None : <type 'NoneType'>
=> int2 = 15 : <type 'int'>
==================================================
int3 = 3                                                                 # STEP 3
ACTION: int3 = 3 
int3 = None : <type 'NoneType'>
=> int3 = 3 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x10367b2d8> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int2)                                                        # STEP 5
ACTION: avl2.insert(int2) 
int2 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10367b2d8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([15]) : <type 'set'>
==================================================
int2 = 12                                                                # STEP 6
ACTION: int2 = 12 
int2 = 15 : <type 'int'>
=> int2 = 12 : <type 'int'>
==================================================
avl2.delete(int3)                                                        # STEP 7
ACTION: avl2.delete(int3) 
int3 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10367b2d8> : <type 'instance'>
avl_REF2 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.insert(int0)                                                        # STEP 8
ACTION: avl2.insert(int0) 
int0 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10367b2d8> : <type 'instance'>
avl_REF2 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([19, 15]) : <type 'set'>
==================================================
avl2.delete(int1)                                                        # STEP 9
ACTION: avl2.delete(int1) 
int1 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10367b2d8> : <type 'instance'>
avl_REF2 = set([19, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int3)                                                       # STEP 10
ACTION: avl2.insert(int3) 
int3 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10367b2d8> : <type 'instance'>
avl_REF2 = set([19, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([3, 19, 15]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 11
ACTION: avl2.insert(int1) 
int1 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10367b2d8> : <type 'instance'>
avl_REF2 = set([3, 19, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl2.insert(int1)                                                       # STEP 12
ACTION: avl2.insert(int1) 
int1 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10367b2d8> : <type 'instance'>
avl_REF2 = set([3, 19, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
int3 = 16                                                               # STEP 13
ACTION: int3 = 16 
int3 = 3 : <type 'int'>
=> int3 = 16 : <type 'int'>
==================================================
int1 = 19                                                               # STEP 14
ACTION: int1 = 19 
int1 = 3 : <type 'int'>
=> int1 = 19 : <type 'int'>
==================================================
int0 = 5                                                                # STEP 15
ACTION: int0 = 5 
int0 = 19 : <type 'int'>
=> int0 = 5 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 16
ACTION: avl2.delete(int3) 
int3 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10367b2d8> : <type 'instance'>
avl_REF2 = set([3, 19, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.delete(int2)                                                       # STEP 17
ACTION: avl2.delete(int2) 
int2 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10367b2d8> : <type 'instance'>
avl_REF2 = set([3, 19, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.insert(int2)                                                       # STEP 18
ACTION: avl2.insert(int2) 
int2 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10367b2d8> : <type 'instance'>
avl_REF2 = set([3, 19, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([3, 19, 12, 15]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 19
ACTION: avl2.insert(int0) 
int0 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10367b2d8> : <type 'instance'>
avl_REF2 = set([3, 19, 12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([3, 19, 12, 5, 15]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 20
ACTION: avl2.delete(int0) 
int0 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10367b2d8> : <type 'instance'>
avl_REF2 = set([3, 19, 12, 5, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([3, 19, 12, 15]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 21
ACTION: avl2.insert(int3) 
int3 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10367b2d8> : <type 'instance'>
avl_REF2 = set([3, 19, 12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([3, 12, 15, 16, 19]) : <type 'set'>
==================================================
int3 = 12                                                               # STEP 22
ACTION: int3 = 12 
int3 = 16 : <type 'int'>
=> int3 = 12 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 23
ACTION: avl2.delete(int0) 
int0 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10367b2d8> : <type 'instance'>
avl_REF2 = set([3, 12, 15, 16, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.delete(int3)                                                       # STEP 24
ACTION: avl2.delete(int3) 
int3 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10367b2d8> : <type 'instance'>
avl_REF2 = set([3, 12, 15, 16, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([3, 15, 16, 19]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 25
ACTION: avl2.insert(int0) 
int0 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10367b2d8> : <type 'instance'>
avl_REF2 = set([3, 15, 16, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([3, 5, 15, 16, 19]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 26
ACTION: avl2.insert(int1) 
int1 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10367b2d8> : <type 'instance'>
avl_REF2 = set([3, 5, 15, 16, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
int1 = 14                                                               # STEP 27
ACTION: int1 = 14 
int1 = 19 : <type 'int'>
=> int1 = 14 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 28
ACTION: avl2.insert(int3) 
int3 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10367b2d8> : <type 'instance'>
avl_REF2 = set([3, 5, 15, 16, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([3, 5, 12, 15, 16, 19]) : <type 'set'>
==================================================
int0 = 14                                                               # STEP 29
ACTION: int0 = 14 
int0 = 5 : <type 'int'>
=> int0 = 14 : <type 'int'>
==================================================
avl2.display()                                                          # STEP 30
ACTION: avl2.display() 
avl2 = <avlbug2.AVLTree instance at 0x10367b2d8> : <type 'instance'>
avl_REF2 = set([3, 5, 12, 15, 16, 19]) : <type 'set'>
  15 [2:0]
-- < 5 [1:0]
---- < 3 [0:0] L
---- > 12 [0:0] L
-- > 19 [1:1]
---- < 16 [0:0] L
REFERENCE ACTION: print(avl_REF2) 
set([3, 5, 12, 15, 16, 19])
==================================================
avl2.display()                                                          # STEP 31
ACTION: avl2.display() 
avl2 = <avlbug2.AVLTree instance at 0x10367b2d8> : <type 'instance'>
avl_REF2 = set([3, 5, 12, 15, 16, 19]) : <type 'set'>
  15 [2:0]
-- < 5 [1:0]
---- < 3 [0:0] L
---- > 12 [0:0] L
-- > 19 [1:1]
---- < 16 [0:0] L
REFERENCE ACTION: print(avl_REF2) 
set([3, 5, 12, 15, 16, 19])
==================================================
result = avl2.inorder()                                                 # STEP 32
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x10367b2d8> : <type 'instance'>
avl_REF2 = set([3, 5, 12, 15, 16, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int0)                                                       # STEP 33
ACTION: avl2.insert(int0) 
int0 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10367b2d8> : <type 'instance'>
avl_REF2 = set([3, 5, 12, 15, 16, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([3, 5, 12, 14, 15, 16, 19]) : <type 'set'>
==================================================
int2 = 10                                                               # STEP 34
ACTION: int2 = 10 
int2 = 12 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
int0 = 7                                                                # STEP 35
ACTION: int0 = 7 
int0 = 14 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
int3 = 19                                                               # STEP 36
ACTION: int3 = 19 
int3 = 12 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 37
ACTION: avl2.delete(int3) 
int3 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10367b2d8> : <type 'instance'>
avl_REF2 = set([3, 5, 12, 14, 15, 16, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([3, 5, 12, 14, 15, 16]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103555050>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
TEST #4 STEP #18 (0:00:30.094087) Mon May  1 18:20:34 2017 [ 152 stmts 203 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103628e60>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
Original test has 77 steps

SAVING TEST AS failure.62366.test.2
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
avl0 = avl.AVLTree()                                                     # STEP 0
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x1025d9128> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0 == avl0                                                             # STEP 1
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x1025d9128> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl1 = avl.AVLTree()                                                     # STEP 2
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x103642e60> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 3
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x103578128> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl1 == avl2                                                             # STEP 4
ACTION: avl1 == avl2 
avl1 = <avlbug2.AVLTree instance at 0x103642e60> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x103578128> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
int3 = 15                                                                # STEP 5
ACTION: int3 = 15 
int3 = None : <type 'NoneType'>
=> int3 = 15 : <type 'int'>
==================================================
avl1 == avl2                                                             # STEP 6
ACTION: avl1 == avl2 
avl1 = <avlbug2.AVLTree instance at 0x103642e60> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x103578128> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
avl0.insert(int3)                                                        # STEP 7
ACTION: avl0.insert(int3) 
int3 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1025d9128> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([15]) : <type 'set'>
==================================================
avl1.delete(int3)                                                        # STEP 8
ACTION: avl1.delete(int3) 
int3 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103642e60> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl0.insert(int3)                                                        # STEP 9
ACTION: avl0.insert(int3) 
int3 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1025d9128> : <type 'instance'>
avl_REF0 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
avl0.delete(int3)                                                       # STEP 10
ACTION: avl0.delete(int3) 
int3 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1025d9128> : <type 'instance'>
avl_REF0 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 11
ACTION: avl1.delete(int3) 
int3 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103642e60> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl2.insert(int3)                                                       # STEP 12
ACTION: avl2.insert(int3) 
int3 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103578128> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([15]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 13
ACTION: avl0.insert(int3) 
int3 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1025d9128> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([15]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 14
ACTION: avl1.delete(int3) 
int3 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103642e60> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl2.delete(int3)                                                       # STEP 15
ACTION: avl2.delete(int3) 
int3 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103578128> : <type 'instance'>
avl_REF2 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int3 = 9                                                                # STEP 16
ACTION: int3 = 9 
int3 = 15 : <type 'int'>
=> int3 = 9 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 17
ACTION: avl1.delete(int3) 
int3 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103642e60> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int1 = 14                                                               # STEP 18
ACTION: int1 = 14 
int1 = None : <type 'NoneType'>
=> int1 = 14 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 19
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x103642e60> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
int0 = 18                                                               # STEP 20
ACTION: int0 = 18 
int0 = None : <type 'NoneType'>
=> int0 = 18 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 21
ACTION: avl1.insert(int0) 
int0 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103642e60> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([18]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 22
ACTION: avl1.insert(int3) 
int3 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103642e60> : <type 'instance'>
avl_REF1 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([9, 18]) : <type 'set'>
==================================================
int0 = 11                                                               # STEP 23
ACTION: int0 = 11 
int0 = 18 : <type 'int'>
=> int0 = 11 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 24
ACTION: avl0.delete(int0) 
int0 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1025d9128> : <type 'instance'>
avl_REF0 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl2.insert(int1)                                                       # STEP 25
ACTION: avl2.insert(int1) 
int1 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103578128> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([14]) : <type 'set'>
==================================================
int3 = 12                                                               # STEP 26
ACTION: int3 = 12 
int3 = 9 : <type 'int'>
=> int3 = 12 : <type 'int'>
==================================================
avl0 == avl1                                                            # STEP 27
ACTION: avl0 == avl1 
avl0 = <avlbug2.AVLTree instance at 0x1025d9128> : <type 'instance'>
avl1 = <avlbug2.AVLTree instance at 0x103642e60> : <type 'instance'>
avl_REF0 = set([15]) : <type 'set'>
avl_REF1 = set([9, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF1 
==================================================
avl2.delete(int0)                                                       # STEP 28
ACTION: avl2.delete(int0) 
int0 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103578128> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int2 = 18                                                               # STEP 29
ACTION: int2 = 18 
int2 = None : <type 'NoneType'>
=> int2 = 18 : <type 'int'>
==================================================
int0 = 1                                                                # STEP 30
ACTION: int0 = 1 
int0 = 11 : <type 'int'>
=> int0 = 1 : <type 'int'>
==================================================
int1 = 13                                                               # STEP 31
ACTION: int1 = 13 
int1 = 14 : <type 'int'>
=> int1 = 13 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 32
ACTION: avl0.insert(int2) 
int2 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1025d9128> : <type 'instance'>
avl_REF0 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([18, 15]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 33
ACTION: avl1.insert(int2) 
int2 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103642e60> : <type 'instance'>
avl_REF1 = set([9, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
avl1.delete(int2)                                                       # STEP 34
ACTION: avl1.delete(int2) 
int2 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103642e60> : <type 'instance'>
avl_REF1 = set([9, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([9]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 35
ACTION: avl1.delete(int1) 
int1 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103642e60> : <type 'instance'>
avl_REF1 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int2 = 18                                                               # STEP 36
ACTION: int2 = 18 
int2 = 18 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 37
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x1025d9128> : <type 'instance'>
avl_REF0 = set([18, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl2.insert(int0)                                                       # STEP 38
ACTION: avl2.insert(int0) 
int0 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103578128> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([1, 14]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 39
ACTION: avl1.delete(int3) 
int3 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103642e60> : <type 'instance'>
avl_REF1 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int3 = 13                                                               # STEP 40
ACTION: int3 = 13 
int3 = 12 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
int0 = 12                                                               # STEP 41
ACTION: int0 = 12 
int0 = 1 : <type 'int'>
=> int0 = 12 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 42
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x1025d9128> : <type 'instance'>
avl_REF0 = set([18, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int1 = 13                                                               # STEP 43
ACTION: int1 = 13 
int1 = 13 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 44
ACTION: avl0.insert(int2) 
int2 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1025d9128> : <type 'instance'>
avl_REF0 = set([18, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
int2 = 16                                                               # STEP 45
ACTION: int2 = 16 
int2 = 18 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 46
ACTION: avl0.insert(int2) 
int2 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1025d9128> : <type 'instance'>
avl_REF0 = set([18, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([16, 18, 15]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 47
ACTION: avl0.delete(int1) 
int1 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1025d9128> : <type 'instance'>
avl_REF0 = set([16, 18, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl2.insert(int3)                                                       # STEP 48
ACTION: avl2.insert(int3) 
int3 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103578128> : <type 'instance'>
avl_REF2 = set([1, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([1, 13, 14]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 49
ACTION: avl2.delete(int2) 
int2 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103578128> : <type 'instance'>
avl_REF2 = set([1, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl1.delete(int3)                                                       # STEP 50
ACTION: avl1.delete(int3) 
int3 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103642e60> : <type 'instance'>
avl_REF1 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
result = avl0.find(int0)                                                # STEP 51
ACTION: result = avl0.find(int0) 
int0 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1025d9128> : <type 'instance'>
avl_REF0 = set([16, 18, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
avl0.insert(int3)                                                       # STEP 52
ACTION: avl0.insert(int3) 
int3 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1025d9128> : <type 'instance'>
avl_REF0 = set([16, 18, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([16, 18, 13, 15]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 53
ACTION: avl1.delete(int3) 
int3 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103642e60> : <type 'instance'>
avl_REF1 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
result = avl0.inorder()                                                 # STEP 54
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x1025d9128> : <type 'instance'>
avl_REF0 = set([16, 18, 13, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int2)                                                       # STEP 55
ACTION: avl0.insert(int2) 
int2 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1025d9128> : <type 'instance'>
avl_REF0 = set([16, 18, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl0 == avl0                                                            # STEP 56
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x1025d9128> : <type 'instance'>
avl_REF0 = set([16, 18, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl1 == avl2                                                            # STEP 57
ACTION: avl1 == avl2 
avl1 = <avlbug2.AVLTree instance at 0x103642e60> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x103578128> : <type 'instance'>
avl_REF1 = set([9]) : <type 'set'>
avl_REF2 = set([1, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
avl2.insert(int2)                                                       # STEP 58
ACTION: avl2.insert(int2) 
int2 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103578128> : <type 'instance'>
avl_REF2 = set([1, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([16, 1, 13, 14]) : <type 'set'>
==================================================
int3 = 6                                                                # STEP 59
ACTION: int3 = 6 
int3 = 13 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
result = avl1.find(int2)                                                # STEP 60
ACTION: result = avl1.find(int2) 
int2 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103642e60> : <type 'instance'>
avl_REF1 = set([9]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl2 == avl0                                                            # STEP 61
ACTION: avl2 == avl0 
avl2 = <avlbug2.AVLTree instance at 0x103578128> : <type 'instance'>
avl0 = <avlbug2.AVLTree instance at 0x1025d9128> : <type 'instance'>
avl_REF2 = set([16, 1, 13, 14]) : <type 'set'>
avl_REF0 = set([16, 18, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF0 
==================================================
avl1.insert(int3)                                                       # STEP 62
ACTION: avl1.insert(int3) 
int3 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103642e60> : <type 'instance'>
avl_REF1 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([9, 6]) : <type 'set'>
==================================================
int3 = 13                                                               # STEP 63
ACTION: int3 = 13 
int3 = 6 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 64
ACTION: avl1.delete(int0) 
int0 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103642e60> : <type 'instance'>
avl_REF1 = set([9, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl0.insert(int0)                                                       # STEP 65
ACTION: avl0.insert(int0) 
int0 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1025d9128> : <type 'instance'>
avl_REF0 = set([16, 18, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([16, 18, 12, 13, 15]) : <type 'set'>
==================================================
int0 = 18                                                               # STEP 66
ACTION: int0 = 18 
int0 = 12 : <type 'int'>
=> int0 = 18 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 67
ACTION: avl0.insert(int2) 
int2 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1025d9128> : <type 'instance'>
avl_REF0 = set([16, 18, 12, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl1.delete(int0)                                                       # STEP 68
ACTION: avl1.delete(int0) 
int0 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103642e60> : <type 'instance'>
avl_REF1 = set([9, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl2.delete(int2)                                                       # STEP 69
ACTION: avl2.delete(int2) 
int2 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103578128> : <type 'instance'>
avl_REF2 = set([16, 1, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([1, 13, 14]) : <type 'set'>
==================================================
avl1 == avl1                                                            # STEP 70
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x103642e60> : <type 'instance'>
avl_REF1 = set([9, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl2.delete(int1)                                                       # STEP 71
ACTION: avl2.delete(int1) 
int1 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103578128> : <type 'instance'>
avl_REF2 = set([1, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([1, 14]) : <type 'set'>
==================================================
int2 = 1                                                                # STEP 72
ACTION: int2 = 1 
int2 = 16 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
int0 = 5                                                                # STEP 73
ACTION: int0 = 5 
int0 = 18 : <type 'int'>
=> int0 = 5 : <type 'int'>
==================================================
int1 = 18                                                               # STEP 74
ACTION: int1 = 18 
int1 = 13 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 75
ACTION: avl2.insert(int0) 
int0 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103578128> : <type 'instance'>
avl_REF2 = set([1, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([1, 5, 14]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 76
ACTION: avl0.delete(int1) 
int1 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1025d9128> : <type 'instance'>
avl_REF0 = set([16, 18, 12, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([16, 12, 13, 15]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103062248>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 3 DISTINCT FAILURES
  14 [2:0]
-- < 7 [1:1]
---- < 4 [0:0] L
-- > 16 [1:0]
---- < 15 [0:0] L
---- > 18 [0:0] L
set([4, 7, 14, 15, 16, 18])
  14 [2:0]
-- < 7 [1:-1]
---- > 12 [0:0] L
-- > 16 [1:0]
---- < 15 [0:0] L
---- > 18 [0:0] L
set([7, 12, 14, 15, 16, 18])
  14 [3:1]
-- < 7 [2:-1]
---- < 6 [0:0] L
---- > 12 [1:1]
------ < 10 [0:0] L
-- > 16 [1:0]
---- < 15 [0:0] L
---- > 18 [0:0] L
set([6, 7, 10, 12, 14, 15, 16, 18])
  14 [2:0]
-- < 7 [1:0]
---- < 6 [0:0] L
---- > 10 [0:0] L
-- > 16 [1:0]
---- < 15 [0:0] L
---- > 18 [0:0] L
set([6, 7, 10, 14, 15, 16, 18])
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 50
STOPPING TESTING DUE TO TIMEOUT
8.21242019733 PERCENT COVERED
60.3126649857 TOTAL RUNTIME
6 EXECUTED
412 TOTAL TEST OPERATIONS
21.5146412849 TIME SPENT EXECUTING TEST OPERATIONS
0.0464210510254 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
21.6270956993 TIME SPENT CHECKING PROPERTIES
43.1417369843 TOTAL TIME SPENT RUNNING SUT
0.00400900840759 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
3 FAILED
0 REPEATS OF FAILURES
3 ACTUAL DISTINCT FAILURES

FAILURE 0
int1 = 8                                                                 # STEP 0
int3 = 2                                                                 # STEP 1
int0 = 6                                                                 # STEP 2
int2 = 5                                                                 # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
avl2.delete(int0)                                                        # STEP 5
int0 = 5                                                                 # STEP 6
avl2.insert(int0)                                                        # STEP 7
avl2.insert(int2)                                                        # STEP 8
avl2.delete(int0)                                                        # STEP 9
avl2.insert(int1)                                                       # STEP 10
avl2.delete(int3)                                                       # STEP 11
result = avl2.inorder()                                                 # STEP 12
avl2.delete(int0)                                                       # STEP 13
avl2.insert(int2)                                                       # STEP 14
result = avl2.inorder()                                                 # STEP 15
result = avl2.find(int3)                                                # STEP 16
result = avl2.inorder()                                                 # STEP 17
int0 = 15                                                               # STEP 18
avl2.insert(int3)                                                       # STEP 19
avl2.insert(int3)                                                       # STEP 20
avl2.insert(int0)                                                       # STEP 21
int1 = 1                                                                # STEP 22
int3 = 9                                                                # STEP 23
avl2.delete(int3)                                                       # STEP 24
result = avl2.inorder()                                                 # STEP 25
result = avl2.inorder()                                                 # STEP 26
avl2.delete(int2)                                                       # STEP 27
avl2.delete(int0)                                                       # STEP 28
int0 = 18                                                               # STEP 29
result = avl2.find(int0)                                                # STEP 30
avl2.insert(int0)                                                       # STEP 31
int2 = 14                                                               # STEP 32
avl2.delete(int1)                                                       # STEP 33
int3 = 15                                                               # STEP 34
int1 = 18                                                               # STEP 35
avl2.delete(int3)                                                       # STEP 36
avl2.delete(int0)                                                       # STEP 37
avl2.insert(int3)                                                       # STEP 38
int0 = 18                                                               # STEP 39
avl2.insert(int1)                                                       # STEP 40
int1 = 17                                                               # STEP 41
avl2.delete(int1)                                                       # STEP 42
int3 = 2                                                                # STEP 43
avl2.insert(int0)                                                       # STEP 44
avl2.insert(int0)                                                       # STEP 45
avl2.delete(int3)                                                       # STEP 46
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103345440>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE 1
int1 = 3                                                                 # STEP 0
int0 = 19                                                                # STEP 1
int2 = 15                                                                # STEP 2
int3 = 3                                                                 # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
avl2.insert(int2)                                                        # STEP 5
int2 = 12                                                                # STEP 6
avl2.delete(int3)                                                        # STEP 7
avl2.insert(int0)                                                        # STEP 8
avl2.delete(int1)                                                        # STEP 9
avl2.insert(int3)                                                       # STEP 10
avl2.insert(int1)                                                       # STEP 11
avl2.insert(int1)                                                       # STEP 12
int3 = 16                                                               # STEP 13
int1 = 19                                                               # STEP 14
int0 = 5                                                                # STEP 15
avl2.delete(int3)                                                       # STEP 16
avl2.delete(int2)                                                       # STEP 17
avl2.insert(int2)                                                       # STEP 18
avl2.insert(int0)                                                       # STEP 19
avl2.delete(int0)                                                       # STEP 20
avl2.insert(int3)                                                       # STEP 21
int3 = 12                                                               # STEP 22
avl2.delete(int0)                                                       # STEP 23
avl2.delete(int3)                                                       # STEP 24
avl2.insert(int0)                                                       # STEP 25
avl2.insert(int1)                                                       # STEP 26
int1 = 14                                                               # STEP 27
avl2.insert(int3)                                                       # STEP 28
int0 = 14                                                               # STEP 29
avl2.display()                                                          # STEP 30
avl2.display()                                                          # STEP 31
result = avl2.inorder()                                                 # STEP 32
avl2.insert(int0)                                                       # STEP 33
int2 = 10                                                               # STEP 34
int0 = 7                                                                # STEP 35
int3 = 19                                                               # STEP 36
avl2.delete(int3)                                                       # STEP 37
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103555050>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE 2
avl0 = avl.AVLTree()                                                     # STEP 0
avl0 == avl0                                                             # STEP 1
avl1 = avl.AVLTree()                                                     # STEP 2
avl2 = avl.AVLTree()                                                     # STEP 3
avl1 == avl2                                                             # STEP 4
int3 = 15                                                                # STEP 5
avl1 == avl2                                                             # STEP 6
avl0.insert(int3)                                                        # STEP 7
avl1.delete(int3)                                                        # STEP 8
avl0.insert(int3)                                                        # STEP 9
avl0.delete(int3)                                                       # STEP 10
avl1.delete(int3)                                                       # STEP 11
avl2.insert(int3)                                                       # STEP 12
avl0.insert(int3)                                                       # STEP 13
avl1.delete(int3)                                                       # STEP 14
avl2.delete(int3)                                                       # STEP 15
int3 = 9                                                                # STEP 16
avl1.delete(int3)                                                       # STEP 17
int1 = 14                                                               # STEP 18
avl1 == avl1                                                            # STEP 19
int0 = 18                                                               # STEP 20
avl1.insert(int0)                                                       # STEP 21
avl1.insert(int3)                                                       # STEP 22
int0 = 11                                                               # STEP 23
avl0.delete(int0)                                                       # STEP 24
avl2.insert(int1)                                                       # STEP 25
int3 = 12                                                               # STEP 26
avl0 == avl1                                                            # STEP 27
avl2.delete(int0)                                                       # STEP 28
int2 = 18                                                               # STEP 29
int0 = 1                                                                # STEP 30
int1 = 13                                                               # STEP 31
avl0.insert(int2)                                                       # STEP 32
avl1.insert(int2)                                                       # STEP 33
avl1.delete(int2)                                                       # STEP 34
avl1.delete(int1)                                                       # STEP 35
int2 = 18                                                               # STEP 36
result = avl0.inorder()                                                 # STEP 37
avl2.insert(int0)                                                       # STEP 38
avl1.delete(int3)                                                       # STEP 39
int3 = 13                                                               # STEP 40
int0 = 12                                                               # STEP 41
result = avl0.inorder()                                                 # STEP 42
int1 = 13                                                               # STEP 43
avl0.insert(int2)                                                       # STEP 44
int2 = 16                                                               # STEP 45
avl0.insert(int2)                                                       # STEP 46
avl0.delete(int1)                                                       # STEP 47
avl2.insert(int3)                                                       # STEP 48
avl2.delete(int2)                                                       # STEP 49
avl1.delete(int3)                                                       # STEP 50
result = avl0.find(int0)                                                # STEP 51
avl0.insert(int3)                                                       # STEP 52
avl1.delete(int3)                                                       # STEP 53
result = avl0.inorder()                                                 # STEP 54
avl0.insert(int2)                                                       # STEP 55
avl0 == avl0                                                            # STEP 56
avl1 == avl2                                                            # STEP 57
avl2.insert(int2)                                                       # STEP 58
int3 = 6                                                                # STEP 59
result = avl1.find(int2)                                                # STEP 60
avl2 == avl0                                                            # STEP 61
avl1.insert(int3)                                                       # STEP 62
int3 = 13                                                               # STEP 63
avl1.delete(int0)                                                       # STEP 64
avl0.insert(int0)                                                       # STEP 65
int0 = 18                                                               # STEP 66
avl0.insert(int2)                                                       # STEP 67
avl1.delete(int0)                                                       # STEP 68
avl2.delete(int2)                                                       # STEP 69
avl1 == avl1                                                            # STEP 70
avl2.delete(int1)                                                       # STEP 71
int2 = 1                                                                # STEP 72
int0 = 5                                                                # STEP 73
int1 = 18                                                               # STEP 74
avl2.insert(int0)                                                       # STEP 75
avl0.delete(int1)                                                       # STEP 76
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103062248>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
214 BRANCHES COVERED
161 STATEMENTS COVERED

Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.596.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102dc2d88>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
Original test has 41 steps

SAVING TEST AS failure.596.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 8                                                                 # STEP 0
ACTION: int2 = 8 
int2 = None : <type 'NoneType'>
=> int2 = 8 : <type 'int'>
==================================================
int1 = 14                                                                # STEP 1
ACTION: int1 = 14 
int1 = None : <type 'NoneType'>
=> int1 = 14 : <type 'int'>
==================================================
int0 = 20                                                                # STEP 2
ACTION: int0 = 20 
int0 = None : <type 'NoneType'>
=> int0 = 20 : <type 'int'>
==================================================
int3 = 12                                                                # STEP 3
ACTION: int3 = 12 
int3 = None : <type 'NoneType'>
=> int3 = 12 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 4
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x1040cf9e0> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.insert(int3)                                                        # STEP 5
ACTION: avl0.insert(int3) 
int3 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1040cf9e0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([12]) : <type 'set'>
==================================================
result = avl0.find(int3)                                                 # STEP 6
ACTION: result = avl0.find(int3) 
int3 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1040cf9e0> : <type 'instance'>
avl_REF0 = set([12]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
avl0 == avl0                                                             # STEP 7
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x1040cf9e0> : <type 'instance'>
avl_REF0 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
int3 = 13                                                                # STEP 8
ACTION: int3 = 13 
int3 = 12 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
avl0.insert(int0)                                                        # STEP 9
ACTION: avl0.insert(int0) 
int0 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1040cf9e0> : <type 'instance'>
avl_REF0 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([20, 12]) : <type 'set'>
==================================================
int0 = 20                                                               # STEP 10
ACTION: int0 = 20 
int0 = 20 : <type 'int'>
==================================================
result = avl0.find(int1)                                                # STEP 11
ACTION: result = avl0.find(int1) 
int1 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1040cf9e0> : <type 'instance'>
avl_REF0 = set([20, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
result = avl0.find(int1)                                                # STEP 12
ACTION: result = avl0.find(int1) 
int1 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1040cf9e0> : <type 'instance'>
avl_REF0 = set([20, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
result = avl0.find(int3)                                                # STEP 13
ACTION: result = avl0.find(int3) 
int3 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1040cf9e0> : <type 'instance'>
avl_REF0 = set([20, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
avl0.insert(int1)                                                       # STEP 14
ACTION: avl0.insert(int1) 
int1 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1040cf9e0> : <type 'instance'>
avl_REF0 = set([20, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([20, 12, 14]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 15
ACTION: avl0.insert(int3) 
int3 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1040cf9e0> : <type 'instance'>
avl_REF0 = set([20, 12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([20, 12, 13, 14]) : <type 'set'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 16
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x104533a70> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 17
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104533a70> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int1)                                                       # STEP 18
ACTION: avl2.insert(int1) 
int1 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104533a70> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([14]) : <type 'set'>
==================================================
result = avl0.find(int0)                                                # STEP 19
ACTION: result = avl0.find(int0) 
int0 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1040cf9e0> : <type 'instance'>
avl_REF0 = set([20, 12, 13, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
int0 = 16                                                               # STEP 20
ACTION: int0 = 16 
int0 = 20 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
int1 = 10                                                               # STEP 21
ACTION: int1 = 10 
int1 = 14 : <type 'int'>
=> int1 = 10 : <type 'int'>
==================================================
int3 = 12                                                               # STEP 22
ACTION: int3 = 12 
int3 = 13 : <type 'int'>
=> int3 = 12 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 23
ACTION: avl0.delete(int0) 
int0 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1040cf9e0> : <type 'instance'>
avl_REF0 = set([20, 12, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl2.delete(int0)                                                       # STEP 24
ACTION: avl2.delete(int0) 
int0 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104533a70> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int0 = 19                                                               # STEP 25
ACTION: int0 = 19 
int0 = 16 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 26
ACTION: avl2.insert(int1) 
int1 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104533a70> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([10, 14]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 27
ACTION: avl2.delete(int3) 
int3 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104533a70> : <type 'instance'>
avl_REF2 = set([10, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int3 = 9                                                                # STEP 28
ACTION: int3 = 9 
int3 = 12 : <type 'int'>
=> int3 = 9 : <type 'int'>
==================================================
int1 = 14                                                               # STEP 29
ACTION: int1 = 14 
int1 = 10 : <type 'int'>
=> int1 = 14 : <type 'int'>
==================================================
avl0 == avl0                                                            # STEP 30
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x1040cf9e0> : <type 'instance'>
avl_REF0 = set([20, 12, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl0.delete(int2)                                                       # STEP 31
ACTION: avl0.delete(int2) 
int2 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1040cf9e0> : <type 'instance'>
avl_REF0 = set([20, 12, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int2 = 16                                                               # STEP 32
ACTION: int2 = 16 
int2 = 8 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 33
ACTION: avl2.insert(int0) 
int0 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104533a70> : <type 'instance'>
avl_REF2 = set([10, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([10, 19, 14]) : <type 'set'>
==================================================
int0 = 19                                                               # STEP 34
ACTION: int0 = 19 
int0 = 19 : <type 'int'>
==================================================
result = avl0.find(int2)                                                # STEP 35
ACTION: result = avl0.find(int2) 
int2 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1040cf9e0> : <type 'instance'>
avl_REF0 = set([20, 12, 13, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
int2 = 20                                                               # STEP 36
ACTION: int2 = 20 
int2 = 16 : <type 'int'>
=> int2 = 20 : <type 'int'>
==================================================
result = avl2.find(int0)                                                # STEP 37
ACTION: result = avl2.find(int0) 
int0 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104533a70> : <type 'instance'>
avl_REF2 = set([10, 19, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
int0 = 13                                                               # STEP 38
ACTION: int0 = 13 
int0 = 19 : <type 'int'>
=> int0 = 13 : <type 'int'>
==================================================
avl2 == avl0                                                            # STEP 39
ACTION: avl2 == avl0 
avl2 = <avl.AVLTree instance at 0x104533a70> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x1040cf9e0> : <type 'instance'>
avl_REF2 = set([10, 19, 14]) : <type 'set'>
avl_REF0 = set([20, 12, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF0 
==================================================
avl0.delete(int1)                                                       # STEP 40
ACTION: avl0.delete(int1) 
int1 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1040cf9e0> : <type 'instance'>
avl_REF0 = set([20, 12, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([20, 12, 13]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104192560>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #4 STEP #69 (0:00:30.057239) Fri Apr 28 06:45:55 2017 [ 151 stmts 202 branches ]
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 14
STOPPING TESTING DUE TO TIMEOUT
8.04207668816 PERCENT COVERED
60.2107770443 TOTAL RUNTIME
8 EXECUTED
655 TOTAL TEST OPERATIONS
28.2255890369 TIME SPENT EXECUTING TEST OPERATIONS
0.024062871933 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
28.3480112553 TIME SPENT CHECKING PROPERTIES
56.5736002922 TOTAL TIME SPENT RUNNING SUT
0.0050961971283 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int2 = 8                                                                 # STEP 0
int1 = 14                                                                # STEP 1
int0 = 20                                                                # STEP 2
int3 = 12                                                                # STEP 3
avl0 = avl.AVLTree()                                                     # STEP 4
avl0.insert(int3)                                                        # STEP 5
result = avl0.find(int3)                                                 # STEP 6
avl0 == avl0                                                             # STEP 7
int3 = 13                                                                # STEP 8
avl0.insert(int0)                                                        # STEP 9
int0 = 20                                                               # STEP 10
result = avl0.find(int1)                                                # STEP 11
result = avl0.find(int1)                                                # STEP 12
result = avl0.find(int3)                                                # STEP 13
avl0.insert(int1)                                                       # STEP 14
avl0.insert(int3)                                                       # STEP 15
avl2 = avl.AVLTree()                                                    # STEP 16
result = avl2.inorder()                                                 # STEP 17
avl2.insert(int1)                                                       # STEP 18
result = avl0.find(int0)                                                # STEP 19
int0 = 16                                                               # STEP 20
int1 = 10                                                               # STEP 21
int3 = 12                                                               # STEP 22
avl0.delete(int0)                                                       # STEP 23
avl2.delete(int0)                                                       # STEP 24
int0 = 19                                                               # STEP 25
avl2.insert(int1)                                                       # STEP 26
avl2.delete(int3)                                                       # STEP 27
int3 = 9                                                                # STEP 28
int1 = 14                                                               # STEP 29
avl0 == avl0                                                            # STEP 30
avl0.delete(int2)                                                       # STEP 31
int2 = 16                                                               # STEP 32
avl2.insert(int0)                                                       # STEP 33
int0 = 19                                                               # STEP 34
result = avl0.find(int2)                                                # STEP 35
int2 = 20                                                               # STEP 36
result = avl2.find(int0)                                                # STEP 37
int0 = 13                                                               # STEP 38
avl2 == avl0                                                            # STEP 39
avl0.delete(int1)                                                       # STEP 40
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104192560>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
202 BRANCHES COVERED
151 STATEMENTS COVERED

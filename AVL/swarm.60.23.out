Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=True, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.99598.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104b5f3b0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 68 steps

SAVING TEST AS failure.99598.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 13                                                                # STEP 0
ACTION: int1 = 13 
int1 = None : <type 'NoneType'>
=> int1 = 13 : <type 'int'>
==================================================
int2 = 3                                                                 # STEP 1
ACTION: int2 = 3 
int2 = None : <type 'NoneType'>
=> int2 = 3 : <type 'int'>
==================================================
int0 = 7                                                                 # STEP 2
ACTION: int0 = 7 
int0 = None : <type 'NoneType'>
=> int0 = 7 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 3
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x102e7e638> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.insert(int2)                                                        # STEP 4
ACTION: avl0.insert(int2) 
int2 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x102e7e638> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([3]) : <type 'set'>
==================================================
int2 = 1                                                                 # STEP 5
ACTION: int2 = 1 
int2 = 3 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
int3 = 13                                                                # STEP 6
ACTION: int3 = 13 
int3 = None : <type 'NoneType'>
=> int3 = 13 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 7
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x104aad908> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
result = avl1.inorder()                                                  # STEP 8
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104aad908> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int0)                                                        # STEP 9
ACTION: avl1.insert(int0) 
int0 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104aad908> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([7]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 10
ACTION: avl0.insert(int1) 
int1 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x102e7e638> : <type 'instance'>
avl_REF0 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([3, 13]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 11
ACTION: avl1.delete(int3) 
int3 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104aad908> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.insert(int3)                                                       # STEP 12
ACTION: avl1.insert(int3) 
int3 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104aad908> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([13, 7]) : <type 'set'>
==================================================
int3 = 12                                                               # STEP 13
ACTION: int3 = 12 
int3 = 13 : <type 'int'>
=> int3 = 12 : <type 'int'>
==================================================
int1 = 6                                                                # STEP 14
ACTION: int1 = 6 
int1 = 13 : <type 'int'>
=> int1 = 6 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 15
ACTION: avl0.delete(int1) 
int1 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x102e7e638> : <type 'instance'>
avl_REF0 = set([3, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int0 = 8                                                                # STEP 16
ACTION: int0 = 8 
int0 = 7 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 17
ACTION: avl1.insert(int0) 
int0 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104aad908> : <type 'instance'>
avl_REF1 = set([13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([8, 13, 7]) : <type 'set'>
==================================================
avl1 == avl1                                                            # STEP 18
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x104aad908> : <type 'instance'>
avl_REF1 = set([8, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
int1 = 5                                                                # STEP 19
ACTION: int1 = 5 
int1 = 6 : <type 'int'>
=> int1 = 5 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 20
ACTION: avl1.delete(int2) 
int2 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104aad908> : <type 'instance'>
avl_REF1 = set([8, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int0 = 2                                                                # STEP 21
ACTION: int0 = 2 
int0 = 8 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 22
ACTION: avl0.delete(int3) 
int3 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x102e7e638> : <type 'instance'>
avl_REF0 = set([3, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int2 = 19                                                               # STEP 23
ACTION: int2 = 19 
int2 = 1 : <type 'int'>
=> int2 = 19 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 24
ACTION: avl0.insert(int1) 
int1 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x102e7e638> : <type 'instance'>
avl_REF0 = set([3, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([3, 13, 5]) : <type 'set'>
==================================================
int1 = 18                                                               # STEP 25
ACTION: int1 = 18 
int1 = 5 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
avl1 == avl0                                                            # STEP 26
ACTION: avl1 == avl0 
avl1 = <avl.AVLTree instance at 0x104aad908> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x102e7e638> : <type 'instance'>
avl_REF1 = set([8, 13, 7]) : <type 'set'>
avl_REF0 = set([3, 13, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
avl1.insert(int1)                                                       # STEP 27
ACTION: avl1.insert(int1) 
int1 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104aad908> : <type 'instance'>
avl_REF1 = set([8, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([8, 18, 13, 7]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 28
ACTION: avl0.delete(int0) 
int0 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x102e7e638> : <type 'instance'>
avl_REF0 = set([3, 13, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int1 = 6                                                                # STEP 29
ACTION: int1 = 6 
int1 = 18 : <type 'int'>
=> int1 = 6 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 30
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104aad908> : <type 'instance'>
avl_REF1 = set([8, 18, 13, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl0 == avl1                                                            # STEP 31
ACTION: avl0 == avl1 
avl0 = <avl.AVLTree instance at 0x102e7e638> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x104aad908> : <type 'instance'>
avl_REF0 = set([3, 13, 5]) : <type 'set'>
avl_REF1 = set([8, 18, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF1 
==================================================
int0 = 17                                                               # STEP 32
ACTION: int0 = 17 
int0 = 2 : <type 'int'>
=> int0 = 17 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 33
ACTION: avl0.delete(int3) 
int3 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x102e7e638> : <type 'instance'>
avl_REF0 = set([3, 13, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int3 = 10                                                               # STEP 34
ACTION: int3 = 10 
int3 = 12 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 35
ACTION: avl0.insert(int1) 
int1 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x102e7e638> : <type 'instance'>
avl_REF0 = set([3, 13, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([3, 13, 6, 5]) : <type 'set'>
==================================================
int1 = 5                                                                # STEP 36
ACTION: int1 = 5 
int1 = 6 : <type 'int'>
=> int1 = 5 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 37
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x104c5a5a8> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl0 == avl0                                                            # STEP 38
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x102e7e638> : <type 'instance'>
avl_REF0 = set([3, 13, 6, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl0.delete(int3)                                                       # STEP 39
ACTION: avl0.delete(int3) 
int3 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x102e7e638> : <type 'instance'>
avl_REF0 = set([3, 13, 6, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0 == avl0                                                            # STEP 40
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x102e7e638> : <type 'instance'>
avl_REF0 = set([3, 13, 6, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
int3 = 20                                                               # STEP 41
ACTION: int3 = 20 
int3 = 10 : <type 'int'>
=> int3 = 20 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 42
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104aad908> : <type 'instance'>
avl_REF1 = set([8, 18, 13, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.delete(int1)                                                       # STEP 43
ACTION: avl1.delete(int1) 
int1 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104aad908> : <type 'instance'>
avl_REF1 = set([8, 18, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl2.insert(int0)                                                       # STEP 44
ACTION: avl2.insert(int0) 
int0 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104c5a5a8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([17]) : <type 'set'>
==================================================
int0 = 18                                                               # STEP 45
ACTION: int0 = 18 
int0 = 17 : <type 'int'>
=> int0 = 18 : <type 'int'>
==================================================
int1 = 1                                                                # STEP 46
ACTION: int1 = 1 
int1 = 5 : <type 'int'>
=> int1 = 1 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 47
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104c5a5a8> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl1 == avl0                                                            # STEP 48
ACTION: avl1 == avl0 
avl1 = <avl.AVLTree instance at 0x104aad908> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x102e7e638> : <type 'instance'>
avl_REF1 = set([8, 18, 13, 7]) : <type 'set'>
avl_REF0 = set([3, 13, 6, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
avl0 == avl0                                                            # STEP 49
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x102e7e638> : <type 'instance'>
avl_REF0 = set([3, 13, 6, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl1.insert(int0)                                                       # STEP 50
ACTION: avl1.insert(int0) 
int0 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104aad908> : <type 'instance'>
avl_REF1 = set([8, 18, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.delete(int1)                                                       # STEP 51
ACTION: avl1.delete(int1) 
int1 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104aad908> : <type 'instance'>
avl_REF1 = set([8, 18, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int0 = 12                                                               # STEP 52
ACTION: int0 = 12 
int0 = 18 : <type 'int'>
=> int0 = 12 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 53
ACTION: avl0.insert(int1) 
int1 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x102e7e638> : <type 'instance'>
avl_REF0 = set([3, 13, 6, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([1, 3, 13, 6, 5]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 54
ACTION: avl1.insert(int3) 
int3 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104aad908> : <type 'instance'>
avl_REF1 = set([8, 18, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([8, 18, 20, 13, 7]) : <type 'set'>
==================================================
avl1 == avl2                                                            # STEP 55
ACTION: avl1 == avl2 
avl1 = <avl.AVLTree instance at 0x104aad908> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x104c5a5a8> : <type 'instance'>
avl_REF1 = set([8, 18, 20, 13, 7]) : <type 'set'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
int3 = 10                                                               # STEP 56
ACTION: int3 = 10 
int3 = 20 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
int1 = 13                                                               # STEP 57
ACTION: int1 = 13 
int1 = 1 : <type 'int'>
=> int1 = 13 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 58
ACTION: avl2.insert(int0) 
int0 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104c5a5a8> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([17, 12]) : <type 'set'>
==================================================
avl0 == avl2                                                            # STEP 59
ACTION: avl0 == avl2 
avl0 = <avl.AVLTree instance at 0x102e7e638> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x104c5a5a8> : <type 'instance'>
avl_REF0 = set([1, 3, 13, 6, 5]) : <type 'set'>
avl_REF2 = set([17, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
avl1 == avl0                                                            # STEP 60
ACTION: avl1 == avl0 
avl1 = <avl.AVLTree instance at 0x104aad908> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x102e7e638> : <type 'instance'>
avl_REF1 = set([8, 18, 20, 13, 7]) : <type 'set'>
avl_REF0 = set([1, 3, 13, 6, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
avl2.insert(int0)                                                       # STEP 61
ACTION: avl2.insert(int0) 
int0 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104c5a5a8> : <type 'instance'>
avl_REF2 = set([17, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl1.delete(int3)                                                       # STEP 62
ACTION: avl1.delete(int3) 
int3 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104aad908> : <type 'instance'>
avl_REF1 = set([8, 18, 20, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl0.delete(int3)                                                       # STEP 63
ACTION: avl0.delete(int3) 
int3 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x102e7e638> : <type 'instance'>
avl_REF0 = set([1, 3, 13, 6, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl1.delete(int2)                                                       # STEP 64
ACTION: avl1.delete(int2) 
int2 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104aad908> : <type 'instance'>
avl_REF1 = set([8, 18, 20, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int0 = 7                                                                # STEP 65
ACTION: int0 = 7 
int0 = 12 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
int3 = 9                                                                # STEP 66
ACTION: int3 = 9 
int3 = 10 : <type 'int'>
=> int3 = 9 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 67
ACTION: avl1.delete(int0) 
int0 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104aad908> : <type 'instance'>
avl_REF1 = set([8, 18, 20, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([8, 18, 20, 13]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104c6aa28>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #4 STEP #82 (0:00:30.022802) Fri Apr 28 04:23:26 2017 [ 150 stmts 200 branches ]
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 73
STOPPING TESTING DUE TO TIMEOUT
7.9742110621 PERCENT COVERED
60.2200100422 TOTAL RUNTIME
8 EXECUTED
741 TOTAL TEST OPERATIONS
27.4048266411 TIME SPENT EXECUTING TEST OPERATIONS
0.0266973972321 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
27.7418625355 TIME SPENT CHECKING PROPERTIES
55.1466891766 TOTAL TIME SPENT RUNNING SUT
0.00444841384888 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int1 = 13                                                                # STEP 0
int2 = 3                                                                 # STEP 1
int0 = 7                                                                 # STEP 2
avl0 = avl.AVLTree()                                                     # STEP 3
avl0.insert(int2)                                                        # STEP 4
int2 = 1                                                                 # STEP 5
int3 = 13                                                                # STEP 6
avl1 = avl.AVLTree()                                                     # STEP 7
result = avl1.inorder()                                                  # STEP 8
avl1.insert(int0)                                                        # STEP 9
avl0.insert(int1)                                                       # STEP 10
avl1.delete(int3)                                                       # STEP 11
avl1.insert(int3)                                                       # STEP 12
int3 = 12                                                               # STEP 13
int1 = 6                                                                # STEP 14
avl0.delete(int1)                                                       # STEP 15
int0 = 8                                                                # STEP 16
avl1.insert(int0)                                                       # STEP 17
avl1 == avl1                                                            # STEP 18
int1 = 5                                                                # STEP 19
avl1.delete(int2)                                                       # STEP 20
int0 = 2                                                                # STEP 21
avl0.delete(int3)                                                       # STEP 22
int2 = 19                                                               # STEP 23
avl0.insert(int1)                                                       # STEP 24
int1 = 18                                                               # STEP 25
avl1 == avl0                                                            # STEP 26
avl1.insert(int1)                                                       # STEP 27
avl0.delete(int0)                                                       # STEP 28
int1 = 6                                                                # STEP 29
result = avl1.inorder()                                                 # STEP 30
avl0 == avl1                                                            # STEP 31
int0 = 17                                                               # STEP 32
avl0.delete(int3)                                                       # STEP 33
int3 = 10                                                               # STEP 34
avl0.insert(int1)                                                       # STEP 35
int1 = 5                                                                # STEP 36
avl2 = avl.AVLTree()                                                    # STEP 37
avl0 == avl0                                                            # STEP 38
avl0.delete(int3)                                                       # STEP 39
avl0 == avl0                                                            # STEP 40
int3 = 20                                                               # STEP 41
result = avl1.inorder()                                                 # STEP 42
avl1.delete(int1)                                                       # STEP 43
avl2.insert(int0)                                                       # STEP 44
int0 = 18                                                               # STEP 45
int1 = 1                                                                # STEP 46
result = avl2.inorder()                                                 # STEP 47
avl1 == avl0                                                            # STEP 48
avl0 == avl0                                                            # STEP 49
avl1.insert(int0)                                                       # STEP 50
avl1.delete(int1)                                                       # STEP 51
int0 = 12                                                               # STEP 52
avl0.insert(int1)                                                       # STEP 53
avl1.insert(int3)                                                       # STEP 54
avl1 == avl2                                                            # STEP 55
int3 = 10                                                               # STEP 56
int1 = 13                                                               # STEP 57
avl2.insert(int0)                                                       # STEP 58
avl0 == avl2                                                            # STEP 59
avl1 == avl0                                                            # STEP 60
avl2.insert(int0)                                                       # STEP 61
avl1.delete(int3)                                                       # STEP 62
avl0.delete(int3)                                                       # STEP 63
avl1.delete(int2)                                                       # STEP 64
int0 = 7                                                                # STEP 65
int3 = 9                                                                # STEP 66
avl1.delete(int0)                                                       # STEP 67
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104c6aa28>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
200 BRANCHES COVERED
150 STATEMENTS COVERED

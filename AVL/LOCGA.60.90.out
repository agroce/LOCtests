Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.62559.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102befef0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
Original test has 59 steps

SAVING TEST AS failure.62559.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 3                                                                 # STEP 0
ACTION: int1 = 3 
int1 = None : <type 'NoneType'>
=> int1 = 3 : <type 'int'>
==================================================
int3 = 19                                                                # STEP 1
ACTION: int3 = 19 
int3 = None : <type 'NoneType'>
=> int3 = 19 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 2
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x104811cb0> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.insert(int3)                                                        # STEP 3
ACTION: avl0.insert(int3) 
int3 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x104811cb0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([19]) : <type 'set'>
==================================================
avl0.insert(int3)                                                        # STEP 4
ACTION: avl0.insert(int3) 
int3 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x104811cb0> : <type 'instance'>
avl_REF0 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
avl0 == avl0                                                             # STEP 5
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x104811cb0> : <type 'instance'>
avl_REF0 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
result = avl0.inorder()                                                  # STEP 6
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x104811cb0> : <type 'instance'>
avl_REF0 = set([19]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.delete(int1)                                                        # STEP 7
ACTION: avl0.delete(int1) 
int1 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x104811cb0> : <type 'instance'>
avl_REF0 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int2 = 10                                                                # STEP 8
ACTION: int2 = 10 
int2 = None : <type 'NoneType'>
=> int2 = 10 : <type 'int'>
==================================================
avl0.insert(int1)                                                        # STEP 9
ACTION: avl0.insert(int1) 
int1 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x104811cb0> : <type 'instance'>
avl_REF0 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([3, 19]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 10
ACTION: avl0.delete(int2) 
int2 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x104811cb0> : <type 'instance'>
avl_REF0 = set([3, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.delete(int1)                                                       # STEP 11
ACTION: avl0.delete(int1) 
int1 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x104811cb0> : <type 'instance'>
avl_REF0 = set([3, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([19]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 12
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x104811cb0> : <type 'instance'>
avl_REF0 = set([19]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
result = avl0.inorder()                                                 # STEP 13
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x104811cb0> : <type 'instance'>
avl_REF0 = set([19]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int3)                                                       # STEP 14
ACTION: avl0.insert(int3) 
int3 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x104811cb0> : <type 'instance'>
avl_REF0 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
avl0.insert(int1)                                                       # STEP 15
ACTION: avl0.insert(int1) 
int1 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x104811cb0> : <type 'instance'>
avl_REF0 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([3, 19]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 16
ACTION: avl0.delete(int3) 
int3 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x104811cb0> : <type 'instance'>
avl_REF0 = set([3, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([3]) : <type 'set'>
==================================================
int2 = 10                                                               # STEP 17
ACTION: int2 = 10 
int2 = 10 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 18
ACTION: avl0.delete(int3) 
int3 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x104811cb0> : <type 'instance'>
avl_REF0 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
result = avl0.find(int1)                                                # STEP 19
ACTION: result = avl0.find(int1) 
int1 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x104811cb0> : <type 'instance'>
avl_REF0 = set([3]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl0.insert(int2)                                                       # STEP 20
ACTION: avl0.insert(int2) 
int2 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x104811cb0> : <type 'instance'>
avl_REF0 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([3, 10]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 21
ACTION: avl0.delete(int3) 
int3 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x104811cb0> : <type 'instance'>
avl_REF0 = set([3, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
result = avl0.inorder()                                                 # STEP 22
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x104811cb0> : <type 'instance'>
avl_REF0 = set([3, 10]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
result = avl0.find(int3)                                                # STEP 23
ACTION: result = avl0.find(int3) 
int3 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x104811cb0> : <type 'instance'>
avl_REF0 = set([3, 10]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
avl0.insert(int3)                                                       # STEP 24
ACTION: avl0.insert(int3) 
int3 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x104811cb0> : <type 'instance'>
avl_REF0 = set([3, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([3, 10, 19]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 25
ACTION: avl0.insert(int1) 
int1 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x104811cb0> : <type 'instance'>
avl_REF0 = set([3, 10, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl0.delete(int2)                                                       # STEP 26
ACTION: avl0.delete(int2) 
int2 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x104811cb0> : <type 'instance'>
avl_REF0 = set([3, 10, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([3, 19]) : <type 'set'>
==================================================
result = avl0.find(int2)                                                # STEP 27
ACTION: result = avl0.find(int2) 
int2 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x104811cb0> : <type 'instance'>
avl_REF0 = set([3, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl0.insert(int1)                                                       # STEP 28
ACTION: avl0.insert(int1) 
int1 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x104811cb0> : <type 'instance'>
avl_REF0 = set([3, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl0 == avl0                                                            # STEP 29
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x104811cb0> : <type 'instance'>
avl_REF0 = set([3, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl0.delete(int2)                                                       # STEP 30
ACTION: avl0.delete(int2) 
int2 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x104811cb0> : <type 'instance'>
avl_REF0 = set([3, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.delete(int3)                                                       # STEP 31
ACTION: avl0.delete(int3) 
int3 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x104811cb0> : <type 'instance'>
avl_REF0 = set([3, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([3]) : <type 'set'>
==================================================
int2 = 16                                                               # STEP 32
ACTION: int2 = 16 
int2 = 10 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 33
ACTION: avl0.delete(int3) 
int3 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x104811cb0> : <type 'instance'>
avl_REF0 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.insert(int2)                                                       # STEP 34
ACTION: avl0.insert(int2) 
int2 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x104811cb0> : <type 'instance'>
avl_REF0 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([3, 16]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 35
ACTION: avl0.delete(int1) 
int1 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x104811cb0> : <type 'instance'>
avl_REF0 = set([3, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([16]) : <type 'set'>
==================================================
int3 = 5                                                                # STEP 36
ACTION: int3 = 5 
int3 = 19 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
int1 = 3                                                                # STEP 37
ACTION: int1 = 3 
int1 = 3 : <type 'int'>
==================================================
int0 = 19                                                               # STEP 38
ACTION: int0 = 19 
int0 = None : <type 'NoneType'>
=> int0 = 19 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 39
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x104811cb0> : <type 'instance'>
avl_REF0 = set([16]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
result = avl0.inorder()                                                 # STEP 40
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x104811cb0> : <type 'instance'>
avl_REF0 = set([16]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int2 = 9                                                                # STEP 41
ACTION: int2 = 9 
int2 = 16 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 42
ACTION: avl0.delete(int1) 
int1 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x104811cb0> : <type 'instance'>
avl_REF0 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.insert(int3)                                                       # STEP 43
ACTION: avl0.insert(int3) 
int3 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x104811cb0> : <type 'instance'>
avl_REF0 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([16, 5]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 44
ACTION: avl0.insert(int3) 
int3 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x104811cb0> : <type 'instance'>
avl_REF0 = set([16, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
int3 = 12                                                               # STEP 45
ACTION: int3 = 12 
int3 = 5 : <type 'int'>
=> int3 = 12 : <type 'int'>
==================================================
int1 = 6                                                                # STEP 46
ACTION: int1 = 6 
int1 = 3 : <type 'int'>
=> int1 = 6 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 47
ACTION: avl0.insert(int3) 
int3 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x104811cb0> : <type 'instance'>
avl_REF0 = set([16, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([16, 5, 12]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 48
ACTION: avl0.delete(int1) 
int1 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x104811cb0> : <type 'instance'>
avl_REF0 = set([16, 5, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.delete(int0)                                                       # STEP 49
ACTION: avl0.delete(int0) 
int0 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x104811cb0> : <type 'instance'>
avl_REF0 = set([16, 5, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.delete(int0)                                                       # STEP 50
ACTION: avl0.delete(int0) 
int0 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x104811cb0> : <type 'instance'>
avl_REF0 = set([16, 5, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
result = avl0.inorder()                                                 # STEP 51
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x104811cb0> : <type 'instance'>
avl_REF0 = set([16, 5, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int3)                                                       # STEP 52
ACTION: avl0.insert(int3) 
int3 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x104811cb0> : <type 'instance'>
avl_REF0 = set([16, 5, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
avl0.insert(int1)                                                       # STEP 53
ACTION: avl0.insert(int1) 
int1 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x104811cb0> : <type 'instance'>
avl_REF0 = set([16, 5, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([16, 5, 6, 12]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 54
ACTION: avl0.delete(int2) 
int2 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x104811cb0> : <type 'instance'>
avl_REF0 = set([16, 5, 6, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.insert(int1)                                                       # STEP 55
ACTION: avl0.insert(int1) 
int1 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x104811cb0> : <type 'instance'>
avl_REF0 = set([16, 5, 6, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
result = avl0.inorder()                                                 # STEP 56
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x104811cb0> : <type 'instance'>
avl_REF0 = set([16, 5, 6, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int2)                                                       # STEP 57
ACTION: avl0.insert(int2) 
int2 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x104811cb0> : <type 'instance'>
avl_REF0 = set([16, 5, 6, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([16, 5, 6, 9, 12]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 58
ACTION: avl0.delete(int3) 
int3 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x104811cb0> : <type 'instance'>
avl_REF0 = set([16, 5, 6, 9, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([16, 5, 6, 9]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1026ab908>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102c5e050>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
Original test has 26 steps

SAVING TEST AS failure.62559.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 16                                                                # STEP 0
ACTION: int1 = 16 
int1 = None : <type 'NoneType'>
=> int1 = 16 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 1
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x102ac2bd8> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.delete(int1)                                                        # STEP 2
ACTION: avl1.delete(int1) 
int1 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102ac2bd8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int2 = 7                                                                 # STEP 3
ACTION: int2 = 7 
int2 = None : <type 'NoneType'>
=> int2 = 7 : <type 'int'>
==================================================
avl1.insert(int1)                                                        # STEP 4
ACTION: avl1.insert(int1) 
int1 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102ac2bd8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([16]) : <type 'set'>
==================================================
int1 = 14                                                                # STEP 5
ACTION: int1 = 14 
int1 = 16 : <type 'int'>
=> int1 = 14 : <type 'int'>
==================================================
avl1.insert(int2)                                                        # STEP 6
ACTION: avl1.insert(int2) 
int2 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102ac2bd8> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([16, 7]) : <type 'set'>
==================================================
int2 = 8                                                                 # STEP 7
ACTION: int2 = 8 
int2 = 7 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
int0 = 17                                                                # STEP 8
ACTION: int0 = 17 
int0 = None : <type 'NoneType'>
=> int0 = 17 : <type 'int'>
==================================================
int3 = 19                                                                # STEP 9
ACTION: int3 = 19 
int3 = None : <type 'NoneType'>
=> int3 = 19 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 10
ACTION: avl1.insert(int2) 
int2 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102ac2bd8> : <type 'instance'>
avl_REF1 = set([16, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([16, 8, 7]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 11
ACTION: avl1.insert(int2) 
int2 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102ac2bd8> : <type 'instance'>
avl_REF1 = set([16, 8, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
avl1.insert(int1)                                                       # STEP 12
ACTION: avl1.insert(int1) 
int1 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102ac2bd8> : <type 'instance'>
avl_REF1 = set([16, 8, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([16, 8, 14, 7]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 13
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x102ac2bd8> : <type 'instance'>
avl_REF1 = set([16, 8, 14, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int0)                                                       # STEP 14
ACTION: avl1.insert(int0) 
int0 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102ac2bd8> : <type 'instance'>
avl_REF1 = set([16, 8, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([16, 8, 17, 14, 7]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 15
ACTION: avl1.insert(int0) 
int0 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102ac2bd8> : <type 'instance'>
avl_REF1 = set([16, 8, 17, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.insert(int0)                                                       # STEP 16
ACTION: avl1.insert(int0) 
int0 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102ac2bd8> : <type 'instance'>
avl_REF1 = set([16, 8, 17, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.insert(int0)                                                       # STEP 17
ACTION: avl1.insert(int0) 
int0 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102ac2bd8> : <type 'instance'>
avl_REF1 = set([16, 8, 17, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
result = avl1.inorder()                                                 # STEP 18
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x102ac2bd8> : <type 'instance'>
avl_REF1 = set([16, 8, 17, 14, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
result = avl1.find(int0)                                                # STEP 19
ACTION: result = avl1.find(int0) 
int0 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102ac2bd8> : <type 'instance'>
avl_REF1 = set([16, 8, 17, 14, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl1.delete(int1)                                                       # STEP 20
ACTION: avl1.delete(int1) 
int1 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102ac2bd8> : <type 'instance'>
avl_REF1 = set([16, 8, 17, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([16, 8, 17, 7]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 21
ACTION: avl1.insert(int2) 
int2 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102ac2bd8> : <type 'instance'>
avl_REF1 = set([16, 8, 17, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
avl1.delete(int2)                                                       # STEP 22
ACTION: avl1.delete(int2) 
int2 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102ac2bd8> : <type 'instance'>
avl_REF1 = set([16, 8, 17, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([16, 17, 7]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 23
ACTION: avl1.insert(int0) 
int0 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102ac2bd8> : <type 'instance'>
avl_REF1 = set([16, 17, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.insert(int1)                                                       # STEP 24
ACTION: avl1.insert(int1) 
int1 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102ac2bd8> : <type 'instance'>
avl_REF1 = set([16, 17, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([16, 17, 14, 7]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 25
ACTION: avl1.delete(int0) 
int0 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102ac2bd8> : <type 'instance'>
avl_REF1 = set([16, 17, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([16, 14, 7]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102abf3f8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
TEST #4 STEP #6 (0:00:30.024555) Mon May  1 18:48:35 2017 [ 150 stmts 199 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102d3bcb0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
Original test has 36 steps

SAVING TEST AS failure.62559.test.2
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 15                                                                # STEP 0
ACTION: int2 = 15 
int2 = None : <type 'NoneType'>
=> int2 = 15 : <type 'int'>
==================================================
int0 = 11                                                                # STEP 1
ACTION: int0 = 11 
int0 = None : <type 'NoneType'>
=> int0 = 11 : <type 'int'>
==================================================
int1 = 12                                                                # STEP 2
ACTION: int1 = 12 
int1 = None : <type 'NoneType'>
=> int1 = 12 : <type 'int'>
==================================================
int3 = 20                                                                # STEP 3
ACTION: int3 = 20 
int3 = None : <type 'NoneType'>
=> int3 = 20 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x102aaf320> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
result = avl1.find(int3)                                                 # STEP 5
ACTION: result = avl1.find(int3) 
int3 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102aaf320> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl1.insert(int1)                                                        # STEP 6
ACTION: avl1.insert(int1) 
int1 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102aaf320> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([12]) : <type 'set'>
==================================================
avl1.delete(int0)                                                        # STEP 7
ACTION: avl1.delete(int0) 
int0 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102aaf320> : <type 'instance'>
avl_REF1 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.insert(int0)                                                        # STEP 8
ACTION: avl1.insert(int0) 
int0 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102aaf320> : <type 'instance'>
avl_REF1 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([11, 12]) : <type 'set'>
==================================================
avl1.delete(int1)                                                        # STEP 9
ACTION: avl1.delete(int1) 
int1 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102aaf320> : <type 'instance'>
avl_REF1 = set([11, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([11]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 10
ACTION: avl1.delete(int1) 
int1 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102aaf320> : <type 'instance'>
avl_REF1 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
result = avl1.inorder()                                                 # STEP 11
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x102aaf320> : <type 'instance'>
avl_REF1 = set([11]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int3 = 12                                                               # STEP 12
ACTION: int3 = 12 
int3 = 20 : <type 'int'>
=> int3 = 12 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 13
ACTION: avl1.insert(int0) 
int0 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102aaf320> : <type 'instance'>
avl_REF1 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.delete(int2)                                                       # STEP 14
ACTION: avl1.delete(int2) 
int2 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102aaf320> : <type 'instance'>
avl_REF1 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.delete(int1)                                                       # STEP 15
ACTION: avl1.delete(int1) 
int1 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102aaf320> : <type 'instance'>
avl_REF1 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.delete(int1)                                                       # STEP 16
ACTION: avl1.delete(int1) 
int1 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102aaf320> : <type 'instance'>
avl_REF1 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
result = avl1.find(int2)                                                # STEP 17
ACTION: result = avl1.find(int2) 
int2 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102aaf320> : <type 'instance'>
avl_REF1 = set([11]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl1.delete(int2)                                                       # STEP 18
ACTION: avl1.delete(int2) 
int2 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102aaf320> : <type 'instance'>
avl_REF1 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
result = avl1.find(int3)                                                # STEP 19
ACTION: result = avl1.find(int3) 
int3 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102aaf320> : <type 'instance'>
avl_REF1 = set([11]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl1.insert(int1)                                                       # STEP 20
ACTION: avl1.insert(int1) 
int1 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102aaf320> : <type 'instance'>
avl_REF1 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([11, 12]) : <type 'set'>
==================================================
int3 = 5                                                                # STEP 21
ACTION: int3 = 5 
int3 = 12 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 22
ACTION: avl1.insert(int0) 
int0 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102aaf320> : <type 'instance'>
avl_REF1 = set([11, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.insert(int3)                                                       # STEP 23
ACTION: avl1.insert(int3) 
int3 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102aaf320> : <type 'instance'>
avl_REF1 = set([11, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([11, 12, 5]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 24
ACTION: avl1.delete(int2) 
int2 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102aaf320> : <type 'instance'>
avl_REF1 = set([11, 12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.delete(int2)                                                       # STEP 25
ACTION: avl1.delete(int2) 
int2 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102aaf320> : <type 'instance'>
avl_REF1 = set([11, 12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.insert(int3)                                                       # STEP 26
ACTION: avl1.insert(int3) 
int3 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102aaf320> : <type 'instance'>
avl_REF1 = set([11, 12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
avl1.insert(int0)                                                       # STEP 27
ACTION: avl1.insert(int0) 
int0 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102aaf320> : <type 'instance'>
avl_REF1 = set([11, 12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
int2 = 4                                                                # STEP 28
ACTION: int2 = 4 
int2 = 15 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 29
ACTION: avl1.insert(int2) 
int2 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102aaf320> : <type 'instance'>
avl_REF1 = set([11, 12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([4, 11, 12, 5]) : <type 'set'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 30
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x102ae09e0> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 31
ACTION: avl0.delete(int2) 
int2 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102ae09e0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int0 = 14                                                               # STEP 32
ACTION: int0 = 14 
int0 = 11 : <type 'int'>
=> int0 = 14 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 33
ACTION: avl0.delete(int3) 
int3 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102ae09e0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.insert(int3)                                                       # STEP 34
ACTION: avl0.insert(int3) 
int3 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102ae09e0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([5]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 35
ACTION: avl1.delete(int1) 
int1 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102aaf320> : <type 'instance'>
avl_REF1 = set([4, 11, 12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([4, 11, 5]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102c3e8c0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 3 DISTINCT FAILURES
  5 [2:0]
-- < 4 [1:1]
---- < 3 [0:0] L
-- > 15 [1:0]
---- < 9 [0:0] L
---- > 18 [0:0] L
set([3, 4, 5, 9, 15, 18])
  5 [2:0]
-- < 4 [1:1]
---- < 3 [0:0] L
-- > 15 [1:0]
---- < 9 [0:0] L
---- > 18 [0:0] L
set([3, 4, 5, 9, 15, 18])
  5 [2:0]
-- < 4 [1:1]
---- < 3 [0:0] L
-- > 15 [1:0]
---- < 9 [0:0] L
---- > 18 [0:0] L
set([3, 4, 5, 9, 15, 18])
  5 [2:0]
-- < 4 [1:1]
---- < 3 [0:0] L
-- > 15 [1:0]
---- < 9 [0:0] L
---- > 18 [0:0] L
set([3, 4, 5, 9, 15, 18])
  5 [2:0]
-- < 4 [1:1]
---- < 3 [0:0] L
-- > 15 [1:0]
---- < 9 [0:0] L
---- > 18 [0:0] L
set([3, 4, 5, 9, 15, 18])
  5 [2:0]
-- < 4 [1:1]
---- < 3 [0:0] L
-- > 15 [1:0]
---- < 9 [0:0] L
---- > 18 [0:0] L
set([3, 4, 5, 9, 15, 18])
  5 [2:0]
-- < 4 [1:1]
---- < 3 [0:0] L
-- > 15 [1:0]
---- < 9 [0:0] L
---- > 18 [0:0] L
set([3, 4, 5, 9, 15, 18])
  8 [2:0]
-- < 4 [1:0]
---- < 2 [0:0] L
---- > 5 [0:0] L
-- > 16 [1:-1]
---- > 20 [0:0] L
set([2, 4, 5, 8, 16, 20])
  8 [2:0]
-- < 4 [1:0]
---- < 2 [0:0] L
---- > 5 [0:0] L
-- > 16 [1:-1]
---- > 20 [0:0] L
set([2, 4, 5, 8, 16, 20])
  8 [2:0]
-- < 4 [1:0]
---- < 2 [0:0] L
---- > 5 [0:0] L
-- > 16 [1:-1]
---- > 20 [0:0] L
set([2, 4, 5, 8, 16, 20])
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 14
STOPPING TESTING DUE TO TIMEOUT
8.27045850261 PERCENT COVERED
60.2248139381 TOTAL RUNTIME
7 EXECUTED
435 TOTAL TEST OPERATIONS
23.3169906139 TIME SPENT EXECUTING TEST OPERATIONS
0.0499346256256 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
23.4387588501 TIME SPENT CHECKING PROPERTIES
46.755749464 TOTAL TIME SPENT RUNNING SUT
0.00448131561279 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
3 FAILED
0 REPEATS OF FAILURES
3 ACTUAL DISTINCT FAILURES

FAILURE 0
int1 = 3                                                                 # STEP 0
int3 = 19                                                                # STEP 1
avl0 = avl.AVLTree()                                                     # STEP 2
avl0.insert(int3)                                                        # STEP 3
avl0.insert(int3)                                                        # STEP 4
avl0 == avl0                                                             # STEP 5
result = avl0.inorder()                                                  # STEP 6
avl0.delete(int1)                                                        # STEP 7
int2 = 10                                                                # STEP 8
avl0.insert(int1)                                                        # STEP 9
avl0.delete(int2)                                                       # STEP 10
avl0.delete(int1)                                                       # STEP 11
result = avl0.inorder()                                                 # STEP 12
result = avl0.inorder()                                                 # STEP 13
avl0.insert(int3)                                                       # STEP 14
avl0.insert(int1)                                                       # STEP 15
avl0.delete(int3)                                                       # STEP 16
int2 = 10                                                               # STEP 17
avl0.delete(int3)                                                       # STEP 18
result = avl0.find(int1)                                                # STEP 19
avl0.insert(int2)                                                       # STEP 20
avl0.delete(int3)                                                       # STEP 21
result = avl0.inorder()                                                 # STEP 22
result = avl0.find(int3)                                                # STEP 23
avl0.insert(int3)                                                       # STEP 24
avl0.insert(int1)                                                       # STEP 25
avl0.delete(int2)                                                       # STEP 26
result = avl0.find(int2)                                                # STEP 27
avl0.insert(int1)                                                       # STEP 28
avl0 == avl0                                                            # STEP 29
avl0.delete(int2)                                                       # STEP 30
avl0.delete(int3)                                                       # STEP 31
int2 = 16                                                               # STEP 32
avl0.delete(int3)                                                       # STEP 33
avl0.insert(int2)                                                       # STEP 34
avl0.delete(int1)                                                       # STEP 35
int3 = 5                                                                # STEP 36
int1 = 3                                                                # STEP 37
int0 = 19                                                               # STEP 38
result = avl0.inorder()                                                 # STEP 39
result = avl0.inorder()                                                 # STEP 40
int2 = 9                                                                # STEP 41
avl0.delete(int1)                                                       # STEP 42
avl0.insert(int3)                                                       # STEP 43
avl0.insert(int3)                                                       # STEP 44
int3 = 12                                                               # STEP 45
int1 = 6                                                                # STEP 46
avl0.insert(int3)                                                       # STEP 47
avl0.delete(int1)                                                       # STEP 48
avl0.delete(int0)                                                       # STEP 49
avl0.delete(int0)                                                       # STEP 50
result = avl0.inorder()                                                 # STEP 51
avl0.insert(int3)                                                       # STEP 52
avl0.insert(int1)                                                       # STEP 53
avl0.delete(int2)                                                       # STEP 54
avl0.insert(int1)                                                       # STEP 55
result = avl0.inorder()                                                 # STEP 56
avl0.insert(int2)                                                       # STEP 57
avl0.delete(int3)                                                       # STEP 58
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1026ab908>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE 1
int1 = 16                                                                # STEP 0
avl1 = avl.AVLTree()                                                     # STEP 1
avl1.delete(int1)                                                        # STEP 2
int2 = 7                                                                 # STEP 3
avl1.insert(int1)                                                        # STEP 4
int1 = 14                                                                # STEP 5
avl1.insert(int2)                                                        # STEP 6
int2 = 8                                                                 # STEP 7
int0 = 17                                                                # STEP 8
int3 = 19                                                                # STEP 9
avl1.insert(int2)                                                       # STEP 10
avl1.insert(int2)                                                       # STEP 11
avl1.insert(int1)                                                       # STEP 12
result = avl1.inorder()                                                 # STEP 13
avl1.insert(int0)                                                       # STEP 14
avl1.insert(int0)                                                       # STEP 15
avl1.insert(int0)                                                       # STEP 16
avl1.insert(int0)                                                       # STEP 17
result = avl1.inorder()                                                 # STEP 18
result = avl1.find(int0)                                                # STEP 19
avl1.delete(int1)                                                       # STEP 20
avl1.insert(int2)                                                       # STEP 21
avl1.delete(int2)                                                       # STEP 22
avl1.insert(int0)                                                       # STEP 23
avl1.insert(int1)                                                       # STEP 24
avl1.delete(int0)                                                       # STEP 25
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102abf3f8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE 2
int2 = 15                                                                # STEP 0
int0 = 11                                                                # STEP 1
int1 = 12                                                                # STEP 2
int3 = 20                                                                # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
result = avl1.find(int3)                                                 # STEP 5
avl1.insert(int1)                                                        # STEP 6
avl1.delete(int0)                                                        # STEP 7
avl1.insert(int0)                                                        # STEP 8
avl1.delete(int1)                                                        # STEP 9
avl1.delete(int1)                                                       # STEP 10
result = avl1.inorder()                                                 # STEP 11
int3 = 12                                                               # STEP 12
avl1.insert(int0)                                                       # STEP 13
avl1.delete(int2)                                                       # STEP 14
avl1.delete(int1)                                                       # STEP 15
avl1.delete(int1)                                                       # STEP 16
result = avl1.find(int2)                                                # STEP 17
avl1.delete(int2)                                                       # STEP 18
result = avl1.find(int3)                                                # STEP 19
avl1.insert(int1)                                                       # STEP 20
int3 = 5                                                                # STEP 21
avl1.insert(int0)                                                       # STEP 22
avl1.insert(int3)                                                       # STEP 23
avl1.delete(int2)                                                       # STEP 24
avl1.delete(int2)                                                       # STEP 25
avl1.insert(int3)                                                       # STEP 26
avl1.insert(int0)                                                       # STEP 27
int2 = 4                                                                # STEP 28
avl1.insert(int2)                                                       # STEP 29
avl0 = avl.AVLTree()                                                    # STEP 30
avl0.delete(int2)                                                       # STEP 31
int0 = 14                                                               # STEP 32
avl0.delete(int3)                                                       # STEP 33
avl0.insert(int3)                                                       # STEP 34
avl1.delete(int1)                                                       # STEP 35
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102c3e8c0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
216 BRANCHES COVERED
162 STATEMENTS COVERED

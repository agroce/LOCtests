Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.14616.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10390af80>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
Original test has 91 steps

SAVING TEST AS failure.14616.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
avl2 = avl.AVLTree()                                                     # STEP 0
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x103d820e0> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int3 = 5                                                                 # STEP 1
ACTION: int3 = 5 
int3 = None : <type 'NoneType'>
=> int3 = 5 : <type 'int'>
==================================================
int2 = 4                                                                 # STEP 2
ACTION: int2 = 4 
int2 = None : <type 'NoneType'>
=> int2 = 4 : <type 'int'>
==================================================
int0 = 7                                                                 # STEP 3
ACTION: int0 = 7 
int0 = None : <type 'NoneType'>
=> int0 = 7 : <type 'int'>
==================================================
int1 = 16                                                                # STEP 4
ACTION: int1 = 16 
int1 = None : <type 'NoneType'>
=> int1 = 16 : <type 'int'>
==================================================
avl2.delete(int1)                                                        # STEP 5
ACTION: avl2.delete(int1) 
int1 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103d820e0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.delete(int1)                                                        # STEP 6
ACTION: avl2.delete(int1) 
int1 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103d820e0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int1 = 9                                                                 # STEP 7
ACTION: int1 = 9 
int1 = 16 : <type 'int'>
=> int1 = 9 : <type 'int'>
==================================================
avl2 == avl2                                                             # STEP 8
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x103d820e0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl2 == avl2                                                             # STEP 9
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x103d820e0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl2.delete(int2)                                                       # STEP 10
ACTION: avl2.delete(int2) 
int2 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103d820e0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int2 = 8                                                                # STEP 11
ACTION: int2 = 8 
int2 = 4 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 12
ACTION: avl2.insert(int3) 
int3 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103d820e0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([5]) : <type 'set'>
==================================================
int3 = 17                                                               # STEP 13
ACTION: int3 = 17 
int3 = 5 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
result = avl2.find(int2)                                                # STEP 14
ACTION: result = avl2.find(int2) 
int2 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103d820e0> : <type 'instance'>
avl_REF2 = set([5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int2 = 11                                                               # STEP 15
ACTION: int2 = 11 
int2 = 8 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 16
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x101e1be60> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 17
ACTION: avl2.delete(int3) 
int3 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103d820e0> : <type 'instance'>
avl_REF2 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2 == avl2                                                            # STEP 18
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x103d820e0> : <type 'instance'>
avl_REF2 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl2.delete(int3)                                                       # STEP 19
ACTION: avl2.delete(int3) 
int3 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103d820e0> : <type 'instance'>
avl_REF2 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl0.insert(int3)                                                       # STEP 20
ACTION: avl0.insert(int3) 
int3 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101e1be60> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([17]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 21
ACTION: avl2.delete(int3) 
int3 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103d820e0> : <type 'instance'>
avl_REF2 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.insert(int1)                                                       # STEP 22
ACTION: avl2.insert(int1) 
int1 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103d820e0> : <type 'instance'>
avl_REF2 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([9, 5]) : <type 'set'>
==================================================
result = avl0.find(int3)                                                # STEP 23
ACTION: result = avl0.find(int3) 
int3 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101e1be60> : <type 'instance'>
avl_REF0 = set([17]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
int1 = 13                                                               # STEP 24
ACTION: int1 = 13 
int1 = 9 : <type 'int'>
=> int1 = 13 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 25
ACTION: avl0.insert(int3) 
int3 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101e1be60> : <type 'instance'>
avl_REF0 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
avl0.insert(int0)                                                       # STEP 26
ACTION: avl0.insert(int0) 
int0 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101e1be60> : <type 'instance'>
avl_REF0 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([17, 7]) : <type 'set'>
==================================================
int3 = 18                                                               # STEP 27
ACTION: int3 = 18 
int3 = 17 : <type 'int'>
=> int3 = 18 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 28
ACTION: avl0.delete(int1) 
int1 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101e1be60> : <type 'instance'>
avl_REF0 = set([17, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int1 = 12                                                               # STEP 29
ACTION: int1 = 12 
int1 = 13 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
result = avl2.find(int3)                                                # STEP 30
ACTION: result = avl2.find(int3) 
int3 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103d820e0> : <type 'instance'>
avl_REF2 = set([9, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl2 == avl0                                                            # STEP 31
ACTION: avl2 == avl0 
avl2 = <avlbug2.AVLTree instance at 0x103d820e0> : <type 'instance'>
avl0 = <avlbug2.AVLTree instance at 0x101e1be60> : <type 'instance'>
avl_REF2 = set([9, 5]) : <type 'set'>
avl_REF0 = set([17, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF0 
==================================================
int3 = 14                                                               # STEP 32
ACTION: int3 = 14 
int3 = 18 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
result = avl0.find(int2)                                                # STEP 33
ACTION: result = avl0.find(int2) 
int2 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101e1be60> : <type 'instance'>
avl_REF0 = set([17, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
int2 = 8                                                                # STEP 34
ACTION: int2 = 8 
int2 = 11 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
int0 = 3                                                                # STEP 35
ACTION: int0 = 3 
int0 = 7 : <type 'int'>
=> int0 = 3 : <type 'int'>
==================================================
result = avl0.find(int3)                                                # STEP 36
ACTION: result = avl0.find(int3) 
int3 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101e1be60> : <type 'instance'>
avl_REF0 = set([17, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
int3 = 7                                                                # STEP 37
ACTION: int3 = 7 
int3 = 14 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
result = avl0.find(int2)                                                # STEP 38
ACTION: result = avl0.find(int2) 
int2 = 8 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101e1be60> : <type 'instance'>
avl_REF0 = set([17, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
int2 = 20                                                               # STEP 39
ACTION: int2 = 20 
int2 = 8 : <type 'int'>
=> int2 = 20 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 40
ACTION: avl0.insert(int3) 
int3 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101e1be60> : <type 'instance'>
avl_REF0 = set([17, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
avl0.insert(int2)                                                       # STEP 41
ACTION: avl0.insert(int2) 
int2 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101e1be60> : <type 'instance'>
avl_REF0 = set([17, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([17, 20, 7]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 42
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x103d820e0> : <type 'instance'>
avl_REF2 = set([9, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int3 = 12                                                               # STEP 43
ACTION: int3 = 12 
int3 = 7 : <type 'int'>
=> int3 = 12 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 44
ACTION: avl0.delete(int2) 
int2 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101e1be60> : <type 'instance'>
avl_REF0 = set([17, 20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([17, 7]) : <type 'set'>
==================================================
result = avl0.find(int3)                                                # STEP 45
ACTION: result = avl0.find(int3) 
int3 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101e1be60> : <type 'instance'>
avl_REF0 = set([17, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
int3 = 12                                                               # STEP 46
ACTION: int3 = 12 
int3 = 12 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 47
ACTION: avl2.insert(int1) 
int1 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103d820e0> : <type 'instance'>
avl_REF2 = set([9, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([9, 12, 5]) : <type 'set'>
==================================================
int2 = 6                                                                # STEP 48
ACTION: int2 = 6 
int2 = 20 : <type 'int'>
=> int2 = 6 : <type 'int'>
==================================================
int1 = 14                                                               # STEP 49
ACTION: int1 = 14 
int1 = 12 : <type 'int'>
=> int1 = 14 : <type 'int'>
==================================================
avl0 == avl2                                                            # STEP 50
ACTION: avl0 == avl2 
avl0 = <avlbug2.AVLTree instance at 0x101e1be60> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x103d820e0> : <type 'instance'>
avl_REF0 = set([17, 7]) : <type 'set'>
avl_REF2 = set([9, 12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
result = avl0.find(int2)                                                # STEP 51
ACTION: result = avl0.find(int2) 
int2 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101e1be60> : <type 'instance'>
avl_REF0 = set([17, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl2.delete(int1)                                                       # STEP 52
ACTION: avl2.delete(int1) 
int1 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103d820e0> : <type 'instance'>
avl_REF2 = set([9, 12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int2 = 15                                                               # STEP 53
ACTION: int2 = 15 
int2 = 6 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
int1 = 18                                                               # STEP 54
ACTION: int1 = 18 
int1 = 14 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
avl2 == avl2                                                            # STEP 55
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x103d820e0> : <type 'instance'>
avl_REF2 = set([9, 12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
result = avl2.inorder()                                                 # STEP 56
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x103d820e0> : <type 'instance'>
avl_REF2 = set([9, 12, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int0)                                                       # STEP 57
ACTION: avl2.delete(int0) 
int0 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103d820e0> : <type 'instance'>
avl_REF2 = set([9, 12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int0 = 8                                                                # STEP 58
ACTION: int0 = 8 
int0 = 3 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 59
ACTION: avl2.delete(int2) 
int2 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103d820e0> : <type 'instance'>
avl_REF2 = set([9, 12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int2 = 9                                                                # STEP 60
ACTION: int2 = 9 
int2 = 15 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 61
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x103d383f8> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 62
ACTION: avl1.delete(int3) 
int3 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103d383f8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int3 = 3                                                                # STEP 63
ACTION: int3 = 3 
int3 = 12 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 64
ACTION: avl2.insert(int0) 
int0 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103d820e0> : <type 'instance'>
avl_REF2 = set([9, 12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([8, 9, 12, 5]) : <type 'set'>
==================================================
avl0 == avl2                                                            # STEP 65
ACTION: avl0 == avl2 
avl0 = <avlbug2.AVLTree instance at 0x101e1be60> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x103d820e0> : <type 'instance'>
avl_REF0 = set([17, 7]) : <type 'set'>
avl_REF2 = set([8, 9, 12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
int0 = 2                                                                # STEP 66
ACTION: int0 = 2 
int0 = 8 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 67
ACTION: avl1.delete(int0) 
int0 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103d383f8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl0.insert(int0)                                                       # STEP 68
ACTION: avl0.insert(int0) 
int0 = 2 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101e1be60> : <type 'instance'>
avl_REF0 = set([17, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([17, 2, 7]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 69
ACTION: avl1.delete(int3) 
int3 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103d383f8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
result = avl1.find(int0)                                                # STEP 70
ACTION: result = avl1.find(int0) 
int0 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103d383f8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
int3 = 18                                                               # STEP 71
ACTION: int3 = 18 
int3 = 3 : <type 'int'>
=> int3 = 18 : <type 'int'>
==================================================
int0 = 12                                                               # STEP 72
ACTION: int0 = 12 
int0 = 2 : <type 'int'>
=> int0 = 12 : <type 'int'>
==================================================
avl0 == avl2                                                            # STEP 73
ACTION: avl0 == avl2 
avl0 = <avlbug2.AVLTree instance at 0x101e1be60> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x103d820e0> : <type 'instance'>
avl_REF0 = set([17, 2, 7]) : <type 'set'>
avl_REF2 = set([8, 9, 12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
avl1.insert(int3)                                                       # STEP 74
ACTION: avl1.insert(int3) 
int3 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103d383f8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([18]) : <type 'set'>
==================================================
int3 = 3                                                                # STEP 75
ACTION: int3 = 3 
int3 = 18 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
result = avl0.find(int2)                                                # STEP 76
ACTION: result = avl0.find(int2) 
int2 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101e1be60> : <type 'instance'>
avl_REF0 = set([17, 2, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
result = avl0.find(int1)                                                # STEP 77
ACTION: result = avl0.find(int1) 
int1 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101e1be60> : <type 'instance'>
avl_REF0 = set([17, 2, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl1.insert(int2)                                                       # STEP 78
ACTION: avl1.insert(int2) 
int2 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103d383f8> : <type 'instance'>
avl_REF1 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([9, 18]) : <type 'set'>
==================================================
result = avl1.find(int3)                                                # STEP 79
ACTION: result = avl1.find(int3) 
int3 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103d383f8> : <type 'instance'>
avl_REF1 = set([9, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl0.delete(int3)                                                       # STEP 80
ACTION: avl0.delete(int3) 
int3 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101e1be60> : <type 'instance'>
avl_REF0 = set([17, 2, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int1 = 12                                                               # STEP 81
ACTION: int1 = 12 
int1 = 18 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 82
ACTION: avl2.insert(int3) 
int3 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103d820e0> : <type 'instance'>
avl_REF2 = set([8, 9, 12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([8, 9, 3, 12, 5]) : <type 'set'>
==================================================
result = avl0.find(int0)                                                # STEP 83
ACTION: result = avl0.find(int0) 
int0 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101e1be60> : <type 'instance'>
avl_REF0 = set([17, 2, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
result = avl0.find(int2)                                                # STEP 84
ACTION: result = avl0.find(int2) 
int2 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101e1be60> : <type 'instance'>
avl_REF0 = set([17, 2, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
result = avl2.find(int3)                                                # STEP 85
ACTION: result = avl2.find(int3) 
int3 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103d820e0> : <type 'instance'>
avl_REF2 = set([8, 9, 3, 12, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
int0 = 12                                                               # STEP 86
ACTION: int0 = 12 
int0 = 12 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 87
ACTION: avl0.insert(int0) 
int0 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101e1be60> : <type 'instance'>
avl_REF0 = set([17, 2, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([17, 2, 12, 7]) : <type 'set'>
==================================================
result = avl2.find(int1)                                                # STEP 88
ACTION: result = avl2.find(int1) 
int1 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103d820e0> : <type 'instance'>
avl_REF2 = set([8, 9, 3, 12, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl0 == avl2                                                            # STEP 89
ACTION: avl0 == avl2 
avl0 = <avlbug2.AVLTree instance at 0x101e1be60> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x103d820e0> : <type 'instance'>
avl_REF0 = set([17, 2, 12, 7]) : <type 'set'>
avl_REF2 = set([8, 9, 3, 12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
avl2.delete(int2)                                                       # STEP 90
ACTION: avl2.delete(int2) 
int2 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103d820e0> : <type 'instance'>
avl_REF2 = set([8, 9, 3, 12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([8, 3, 12, 5]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104973e18>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #3 STEP #0 (0:00:30.023871) Sun Apr 30 04:34:05 2017 [ 141 stmts 186 branches ]
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 81
STOPPING TESTING DUE TO TIMEOUT
7.84508440914 PERCENT COVERED
60.2556059361 TOTAL RUNTIME
5 EXECUTED
472 TOTAL TEST OPERATIONS
25.134357214 TIME SPENT EXECUTING TEST OPERATIONS
0.0177521705627 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
25.2866239548 TIME SPENT CHECKING PROPERTIES
50.4209811687 TOTAL TIME SPENT RUNNING SUT
0.00416707992554 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
avl2 = avl.AVLTree()                                                     # STEP 0
int3 = 5                                                                 # STEP 1
int2 = 4                                                                 # STEP 2
int0 = 7                                                                 # STEP 3
int1 = 16                                                                # STEP 4
avl2.delete(int1)                                                        # STEP 5
avl2.delete(int1)                                                        # STEP 6
int1 = 9                                                                 # STEP 7
avl2 == avl2                                                             # STEP 8
avl2 == avl2                                                             # STEP 9
avl2.delete(int2)                                                       # STEP 10
int2 = 8                                                                # STEP 11
avl2.insert(int3)                                                       # STEP 12
int3 = 17                                                               # STEP 13
result = avl2.find(int2)                                                # STEP 14
int2 = 11                                                               # STEP 15
avl0 = avl.AVLTree()                                                    # STEP 16
avl2.delete(int3)                                                       # STEP 17
avl2 == avl2                                                            # STEP 18
avl2.delete(int3)                                                       # STEP 19
avl0.insert(int3)                                                       # STEP 20
avl2.delete(int3)                                                       # STEP 21
avl2.insert(int1)                                                       # STEP 22
result = avl0.find(int3)                                                # STEP 23
int1 = 13                                                               # STEP 24
avl0.insert(int3)                                                       # STEP 25
avl0.insert(int0)                                                       # STEP 26
int3 = 18                                                               # STEP 27
avl0.delete(int1)                                                       # STEP 28
int1 = 12                                                               # STEP 29
result = avl2.find(int3)                                                # STEP 30
avl2 == avl0                                                            # STEP 31
int3 = 14                                                               # STEP 32
result = avl0.find(int2)                                                # STEP 33
int2 = 8                                                                # STEP 34
int0 = 3                                                                # STEP 35
result = avl0.find(int3)                                                # STEP 36
int3 = 7                                                                # STEP 37
result = avl0.find(int2)                                                # STEP 38
int2 = 20                                                               # STEP 39
avl0.insert(int3)                                                       # STEP 40
avl0.insert(int2)                                                       # STEP 41
result = avl2.inorder()                                                 # STEP 42
int3 = 12                                                               # STEP 43
avl0.delete(int2)                                                       # STEP 44
result = avl0.find(int3)                                                # STEP 45
int3 = 12                                                               # STEP 46
avl2.insert(int1)                                                       # STEP 47
int2 = 6                                                                # STEP 48
int1 = 14                                                               # STEP 49
avl0 == avl2                                                            # STEP 50
result = avl0.find(int2)                                                # STEP 51
avl2.delete(int1)                                                       # STEP 52
int2 = 15                                                               # STEP 53
int1 = 18                                                               # STEP 54
avl2 == avl2                                                            # STEP 55
result = avl2.inorder()                                                 # STEP 56
avl2.delete(int0)                                                       # STEP 57
int0 = 8                                                                # STEP 58
avl2.delete(int2)                                                       # STEP 59
int2 = 9                                                                # STEP 60
avl1 = avl.AVLTree()                                                    # STEP 61
avl1.delete(int3)                                                       # STEP 62
int3 = 3                                                                # STEP 63
avl2.insert(int0)                                                       # STEP 64
avl0 == avl2                                                            # STEP 65
int0 = 2                                                                # STEP 66
avl1.delete(int0)                                                       # STEP 67
avl0.insert(int0)                                                       # STEP 68
avl1.delete(int3)                                                       # STEP 69
result = avl1.find(int0)                                                # STEP 70
int3 = 18                                                               # STEP 71
int0 = 12                                                               # STEP 72
avl0 == avl2                                                            # STEP 73
avl1.insert(int3)                                                       # STEP 74
int3 = 3                                                                # STEP 75
result = avl0.find(int2)                                                # STEP 76
result = avl0.find(int1)                                                # STEP 77
avl1.insert(int2)                                                       # STEP 78
result = avl1.find(int3)                                                # STEP 79
avl0.delete(int3)                                                       # STEP 80
int1 = 12                                                               # STEP 81
avl2.insert(int3)                                                       # STEP 82
result = avl0.find(int0)                                                # STEP 83
result = avl0.find(int2)                                                # STEP 84
result = avl2.find(int3)                                                # STEP 85
int0 = 12                                                               # STEP 86
avl0.insert(int0)                                                       # STEP 87
result = avl2.find(int1)                                                # STEP 88
avl0 == avl2                                                            # STEP 89
avl2.delete(int2)                                                       # STEP 90
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104973e18>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
194 BRANCHES COVERED
146 STATEMENTS COVERED

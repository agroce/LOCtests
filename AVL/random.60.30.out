Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.99718.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
TEST #4 STEP #70 (0:00:30.011245) Fri Apr 28 04:43:44 2017 [ 151 stmts 202 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104c1a518>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 82 steps

SAVING TEST AS failure.99718.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 10                                                                # STEP 0
ACTION: int0 = 10 
int0 = None : <type 'NoneType'>
=> int0 = 10 : <type 'int'>
==================================================
int2 = 6                                                                 # STEP 1
ACTION: int2 = 6 
int2 = None : <type 'NoneType'>
=> int2 = 6 : <type 'int'>
==================================================
int3 = 20                                                                # STEP 2
ACTION: int3 = 20 
int3 = None : <type 'NoneType'>
=> int3 = 20 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 3
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x104c28ea8> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int1 = 10                                                                # STEP 4
ACTION: int1 = 10 
int1 = None : <type 'NoneType'>
=> int1 = 10 : <type 'int'>
==================================================
avl0.delete(int2)                                                        # STEP 5
ACTION: avl0.delete(int2) 
int2 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104c28ea8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int2 = 18                                                                # STEP 6
ACTION: int2 = 18 
int2 = 6 : <type 'int'>
=> int2 = 18 : <type 'int'>
==================================================
result = avl0.find(int0)                                                 # STEP 7
ACTION: result = avl0.find(int0) 
int0 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104c28ea8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
int0 = 5                                                                 # STEP 8
ACTION: int0 = 5 
int0 = 10 : <type 'int'>
=> int0 = 5 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 9
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x104c3b8c0> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
result = avl1.find(int0)                                                # STEP 10
ACTION: result = avl1.find(int0) 
int0 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c3b8c0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl0.delete(int0)                                                       # STEP 11
ACTION: avl0.delete(int0) 
int0 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104c28ea8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl1.delete(int2)                                                       # STEP 12
ACTION: avl1.delete(int2) 
int2 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c3b8c0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int0 = 3                                                                # STEP 13
ACTION: int0 = 3 
int0 = 5 : <type 'int'>
=> int0 = 3 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 14
ACTION: avl1.insert(int3) 
int3 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c3b8c0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([20]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 15
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104c28ea8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int2 = 16                                                               # STEP 16
ACTION: int2 = 16 
int2 = 18 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
result = avl0.find(int0)                                                # STEP 17
ACTION: result = avl0.find(int0) 
int0 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104c28ea8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
int0 = 7                                                                # STEP 18
ACTION: int0 = 7 
int0 = 3 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 19
ACTION: avl0.delete(int3) 
int3 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104c28ea8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int3 = 12                                                               # STEP 20
ACTION: int3 = 12 
int3 = 20 : <type 'int'>
=> int3 = 12 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 21
ACTION: avl0.delete(int2) 
int2 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104c28ea8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.delete(int1)                                                       # STEP 22
ACTION: avl0.delete(int1) 
int1 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104c28ea8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl1.insert(int0)                                                       # STEP 23
ACTION: avl1.insert(int0) 
int0 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c3b8c0> : <type 'instance'>
avl_REF1 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([20, 7]) : <type 'set'>
==================================================
result = avl0.find(int0)                                                # STEP 24
ACTION: result = avl0.find(int0) 
int0 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104c28ea8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
int0 = 19                                                               # STEP 25
ACTION: int0 = 19 
int0 = 7 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
int1 = 13                                                               # STEP 26
ACTION: int1 = 13 
int1 = 10 : <type 'int'>
=> int1 = 13 : <type 'int'>
==================================================
int2 = 11                                                               # STEP 27
ACTION: int2 = 11 
int2 = 16 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
avl0 == avl0                                                            # STEP 28
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x104c28ea8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl0.insert(int1)                                                       # STEP 29
ACTION: avl0.insert(int1) 
int1 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104c28ea8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([13]) : <type 'set'>
==================================================
int1 = 17                                                               # STEP 30
ACTION: int1 = 17 
int1 = 13 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 31
ACTION: avl1.insert(int3) 
int3 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c3b8c0> : <type 'instance'>
avl_REF1 = set([20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([12, 20, 7]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 32
ACTION: avl1.delete(int2) 
int2 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c3b8c0> : <type 'instance'>
avl_REF1 = set([12, 20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.delete(int3)                                                       # STEP 33
ACTION: avl1.delete(int3) 
int3 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c3b8c0> : <type 'instance'>
avl_REF1 = set([12, 20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([20, 7]) : <type 'set'>
==================================================
result = avl0.find(int0)                                                # STEP 34
ACTION: result = avl0.find(int0) 
int0 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104c28ea8> : <type 'instance'>
avl_REF0 = set([13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
int0 = 3                                                                # STEP 35
ACTION: int0 = 3 
int0 = 19 : <type 'int'>
=> int0 = 3 : <type 'int'>
==================================================
int3 = 1                                                                # STEP 36
ACTION: int3 = 1 
int3 = 12 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
int2 = 1                                                                # STEP 37
ACTION: int2 = 1 
int2 = 11 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
avl1 == avl0                                                            # STEP 38
ACTION: avl1 == avl0 
avl1 = <avl.AVLTree instance at 0x104c3b8c0> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x104c28ea8> : <type 'instance'>
avl_REF1 = set([20, 7]) : <type 'set'>
avl_REF0 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
result = avl1.find(int3)                                                # STEP 39
ACTION: result = avl1.find(int3) 
int3 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c3b8c0> : <type 'instance'>
avl_REF1 = set([20, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl0.insert(int0)                                                       # STEP 40
ACTION: avl0.insert(int0) 
int0 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104c28ea8> : <type 'instance'>
avl_REF0 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([3, 13]) : <type 'set'>
==================================================
int0 = 12                                                               # STEP 41
ACTION: int0 = 12 
int0 = 3 : <type 'int'>
=> int0 = 12 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 42
ACTION: avl1.insert(int1) 
int1 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c3b8c0> : <type 'instance'>
avl_REF1 = set([20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([17, 20, 7]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 43
ACTION: avl0.insert(int3) 
int3 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104c28ea8> : <type 'instance'>
avl_REF0 = set([3, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([1, 3, 13]) : <type 'set'>
==================================================
result = avl1.find(int0)                                                # STEP 44
ACTION: result = avl1.find(int0) 
int0 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c3b8c0> : <type 'instance'>
avl_REF1 = set([17, 20, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
int1 = 17                                                               # STEP 45
ACTION: int1 = 17 
int1 = 17 : <type 'int'>
==================================================
int3 = 20                                                               # STEP 46
ACTION: int3 = 20 
int3 = 1 : <type 'int'>
=> int3 = 20 : <type 'int'>
==================================================
int0 = 11                                                               # STEP 47
ACTION: int0 = 11 
int0 = 12 : <type 'int'>
=> int0 = 11 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 48
ACTION: avl0.delete(int1) 
int1 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104c28ea8> : <type 'instance'>
avl_REF0 = set([1, 3, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int1 = 1                                                                # STEP 49
ACTION: int1 = 1 
int1 = 17 : <type 'int'>
=> int1 = 1 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 50
ACTION: avl1.insert(int1) 
int1 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c3b8c0> : <type 'instance'>
avl_REF1 = set([17, 20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([17, 20, 1, 7]) : <type 'set'>
==================================================
int1 = 9                                                                # STEP 51
ACTION: int1 = 9 
int1 = 1 : <type 'int'>
=> int1 = 9 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 52
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104c28ea8> : <type 'instance'>
avl_REF0 = set([1, 3, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0 == avl1                                                            # STEP 53
ACTION: avl0 == avl1 
avl0 = <avl.AVLTree instance at 0x104c28ea8> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x104c3b8c0> : <type 'instance'>
avl_REF0 = set([1, 3, 13]) : <type 'set'>
avl_REF1 = set([17, 20, 1, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF1 
==================================================
avl1 == avl0                                                            # STEP 54
ACTION: avl1 == avl0 
avl1 = <avl.AVLTree instance at 0x104c3b8c0> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x104c28ea8> : <type 'instance'>
avl_REF1 = set([17, 20, 1, 7]) : <type 'set'>
avl_REF0 = set([1, 3, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
avl1.insert(int3)                                                       # STEP 55
ACTION: avl1.insert(int3) 
int3 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c3b8c0> : <type 'instance'>
avl_REF1 = set([17, 20, 1, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
avl0.insert(int2)                                                       # STEP 56
ACTION: avl0.insert(int2) 
int2 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104c28ea8> : <type 'instance'>
avl_REF0 = set([1, 3, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl1 == avl0                                                            # STEP 57
ACTION: avl1 == avl0 
avl1 = <avl.AVLTree instance at 0x104c3b8c0> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x104c28ea8> : <type 'instance'>
avl_REF1 = set([17, 20, 1, 7]) : <type 'set'>
avl_REF0 = set([1, 3, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
avl0.insert(int0)                                                       # STEP 58
ACTION: avl0.insert(int0) 
int0 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104c28ea8> : <type 'instance'>
avl_REF0 = set([1, 3, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([11, 1, 3, 13]) : <type 'set'>
==================================================
int3 = 7                                                                # STEP 59
ACTION: int3 = 7 
int3 = 20 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
int0 = 8                                                                # STEP 60
ACTION: int0 = 8 
int0 = 11 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
avl0 == avl1                                                            # STEP 61
ACTION: avl0 == avl1 
avl0 = <avl.AVLTree instance at 0x104c28ea8> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x104c3b8c0> : <type 'instance'>
avl_REF0 = set([11, 1, 3, 13]) : <type 'set'>
avl_REF1 = set([17, 20, 1, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF1 
==================================================
avl1.insert(int3)                                                       # STEP 62
ACTION: avl1.insert(int3) 
int3 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c3b8c0> : <type 'instance'>
avl_REF1 = set([17, 20, 1, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
avl0.insert(int2)                                                       # STEP 63
ACTION: avl0.insert(int2) 
int2 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104c28ea8> : <type 'instance'>
avl_REF0 = set([11, 1, 3, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
int3 = 10                                                               # STEP 64
ACTION: int3 = 10 
int3 = 7 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
int2 = 11                                                               # STEP 65
ACTION: int2 = 11 
int2 = 1 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 66
ACTION: avl0.delete(int0) 
int0 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104c28ea8> : <type 'instance'>
avl_REF0 = set([11, 1, 3, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
result = avl0.find(int1)                                                # STEP 67
ACTION: result = avl0.find(int1) 
int1 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104c28ea8> : <type 'instance'>
avl_REF0 = set([11, 1, 3, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
int0 = 6                                                                # STEP 68
ACTION: int0 = 6 
int0 = 8 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
int1 = 20                                                               # STEP 69
ACTION: int1 = 20 
int1 = 9 : <type 'int'>
=> int1 = 20 : <type 'int'>
==================================================
result = avl0.find(int2)                                                # STEP 70
ACTION: result = avl0.find(int2) 
int2 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104c28ea8> : <type 'instance'>
avl_REF0 = set([11, 1, 3, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
int2 = 5                                                                # STEP 71
ACTION: int2 = 5 
int2 = 11 : <type 'int'>
=> int2 = 5 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 72
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x105872200> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 73
ACTION: avl0.insert(int3) 
int3 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104c28ea8> : <type 'instance'>
avl_REF0 = set([11, 1, 3, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([11, 1, 10, 3, 13]) : <type 'set'>
==================================================
int3 = 18                                                               # STEP 74
ACTION: int3 = 18 
int3 = 10 : <type 'int'>
=> int3 = 18 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 75
ACTION: avl1.insert(int0) 
int0 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c3b8c0> : <type 'instance'>
avl_REF1 = set([17, 20, 1, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([17, 20, 1, 6, 7]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 76
ACTION: avl2.delete(int3) 
int3 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105872200> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int3 = 3                                                                # STEP 77
ACTION: int3 = 3 
int3 = 18 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
int0 = 15                                                               # STEP 78
ACTION: int0 = 15 
int0 = 6 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
result = avl2.find(int0)                                                # STEP 79
ACTION: result = avl2.find(int0) 
int0 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105872200> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
int0 = 17                                                               # STEP 80
ACTION: int0 = 17 
int0 = 15 : <type 'int'>
=> int0 = 17 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 81
ACTION: avl1.delete(int1) 
int1 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104c3b8c0> : <type 'instance'>
avl_REF1 = set([17, 20, 1, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([17, 1, 6, 7]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105851bd8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 82
STOPPING TESTING DUE TO TIMEOUT
8.10994231422 PERCENT COVERED
60.1775929928 TOTAL RUNTIME
7 EXECUTED
664 TOTAL TEST OPERATIONS
26.6953885555 TIME SPENT EXECUTING TEST OPERATIONS
0.0236265659332 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
26.86176157 TIME SPENT CHECKING PROPERTIES
53.5571501255 TOTAL TIME SPENT RUNNING SUT
0.00408506393433 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int0 = 10                                                                # STEP 0
int2 = 6                                                                 # STEP 1
int3 = 20                                                                # STEP 2
avl0 = avl.AVLTree()                                                     # STEP 3
int1 = 10                                                                # STEP 4
avl0.delete(int2)                                                        # STEP 5
int2 = 18                                                                # STEP 6
result = avl0.find(int0)                                                 # STEP 7
int0 = 5                                                                 # STEP 8
avl1 = avl.AVLTree()                                                     # STEP 9
result = avl1.find(int0)                                                # STEP 10
avl0.delete(int0)                                                       # STEP 11
avl1.delete(int2)                                                       # STEP 12
int0 = 3                                                                # STEP 13
avl1.insert(int3)                                                       # STEP 14
result = avl0.inorder()                                                 # STEP 15
int2 = 16                                                               # STEP 16
result = avl0.find(int0)                                                # STEP 17
int0 = 7                                                                # STEP 18
avl0.delete(int3)                                                       # STEP 19
int3 = 12                                                               # STEP 20
avl0.delete(int2)                                                       # STEP 21
avl0.delete(int1)                                                       # STEP 22
avl1.insert(int0)                                                       # STEP 23
result = avl0.find(int0)                                                # STEP 24
int0 = 19                                                               # STEP 25
int1 = 13                                                               # STEP 26
int2 = 11                                                               # STEP 27
avl0 == avl0                                                            # STEP 28
avl0.insert(int1)                                                       # STEP 29
int1 = 17                                                               # STEP 30
avl1.insert(int3)                                                       # STEP 31
avl1.delete(int2)                                                       # STEP 32
avl1.delete(int3)                                                       # STEP 33
result = avl0.find(int0)                                                # STEP 34
int0 = 3                                                                # STEP 35
int3 = 1                                                                # STEP 36
int2 = 1                                                                # STEP 37
avl1 == avl0                                                            # STEP 38
result = avl1.find(int3)                                                # STEP 39
avl0.insert(int0)                                                       # STEP 40
int0 = 12                                                               # STEP 41
avl1.insert(int1)                                                       # STEP 42
avl0.insert(int3)                                                       # STEP 43
result = avl1.find(int0)                                                # STEP 44
int1 = 17                                                               # STEP 45
int3 = 20                                                               # STEP 46
int0 = 11                                                               # STEP 47
avl0.delete(int1)                                                       # STEP 48
int1 = 1                                                                # STEP 49
avl1.insert(int1)                                                       # STEP 50
int1 = 9                                                                # STEP 51
result = avl0.inorder()                                                 # STEP 52
avl0 == avl1                                                            # STEP 53
avl1 == avl0                                                            # STEP 54
avl1.insert(int3)                                                       # STEP 55
avl0.insert(int2)                                                       # STEP 56
avl1 == avl0                                                            # STEP 57
avl0.insert(int0)                                                       # STEP 58
int3 = 7                                                                # STEP 59
int0 = 8                                                                # STEP 60
avl0 == avl1                                                            # STEP 61
avl1.insert(int3)                                                       # STEP 62
avl0.insert(int2)                                                       # STEP 63
int3 = 10                                                               # STEP 64
int2 = 11                                                               # STEP 65
avl0.delete(int0)                                                       # STEP 66
result = avl0.find(int1)                                                # STEP 67
int0 = 6                                                                # STEP 68
int1 = 20                                                               # STEP 69
result = avl0.find(int2)                                                # STEP 70
int2 = 5                                                                # STEP 71
avl2 = avl.AVLTree()                                                    # STEP 72
avl0.insert(int3)                                                       # STEP 73
int3 = 18                                                               # STEP 74
avl1.insert(int0)                                                       # STEP 75
avl2.delete(int3)                                                       # STEP 76
int3 = 3                                                                # STEP 77
int0 = 15                                                               # STEP 78
result = avl2.find(int0)                                                # STEP 79
int0 = 17                                                               # STEP 80
avl1.delete(int1)                                                       # STEP 81
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105851bd8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
204 BRANCHES COVERED
152 STATEMENTS COVERED

Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.62611.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1028b0ab8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
Original test has 29 steps

SAVING TEST AS failure.62611.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 10                                                                # STEP 0
ACTION: int1 = 10 
int1 = None : <type 'NoneType'>
=> int1 = 10 : <type 'int'>
==================================================
int3 = 7                                                                 # STEP 1
ACTION: int3 = 7 
int3 = None : <type 'NoneType'>
=> int3 = 7 : <type 'int'>
==================================================
int0 = 2                                                                 # STEP 2
ACTION: int0 = 2 
int0 = None : <type 'NoneType'>
=> int0 = 2 : <type 'int'>
==================================================
int2 = 19                                                                # STEP 3
ACTION: int2 = 19 
int2 = None : <type 'NoneType'>
=> int2 = 19 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x102bf8e60> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.insert(int3)                                                        # STEP 5
ACTION: avl1.insert(int3) 
int3 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102bf8e60> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([7]) : <type 'set'>
==================================================
avl1 == avl1                                                             # STEP 6
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x102bf8e60> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.insert(int3)                                                        # STEP 7
ACTION: avl1.insert(int3) 
int3 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102bf8e60> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
avl1.delete(int2)                                                        # STEP 8
ACTION: avl1.delete(int2) 
int2 = 19 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102bf8e60> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
result = avl1.inorder()                                                  # STEP 9
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x102bf8e60> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int3)                                                       # STEP 10
ACTION: avl1.insert(int3) 
int3 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102bf8e60> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
avl1.insert(int0)                                                       # STEP 11
ACTION: avl1.insert(int0) 
int0 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102bf8e60> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([2, 7]) : <type 'set'>
==================================================
int0 = 18                                                               # STEP 12
ACTION: int0 = 18 
int0 = 2 : <type 'int'>
=> int0 = 18 : <type 'int'>
==================================================
int2 = 4                                                                # STEP 13
ACTION: int2 = 4 
int2 = 19 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
int3 = 10                                                               # STEP 14
ACTION: int3 = 10 
int3 = 7 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 15
ACTION: avl1.insert(int3) 
int3 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102bf8e60> : <type 'instance'>
avl_REF1 = set([2, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([2, 10, 7]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 16
ACTION: avl1.delete(int2) 
int2 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102bf8e60> : <type 'instance'>
avl_REF1 = set([2, 10, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.insert(int2)                                                       # STEP 17
ACTION: avl1.insert(int2) 
int2 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102bf8e60> : <type 'instance'>
avl_REF1 = set([2, 10, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([2, 4, 10, 7]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 18
ACTION: avl1.insert(int0) 
int0 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102bf8e60> : <type 'instance'>
avl_REF1 = set([2, 4, 10, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([2, 18, 4, 10, 7]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 19
ACTION: avl1.insert(int1) 
int1 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102bf8e60> : <type 'instance'>
avl_REF1 = set([2, 18, 4, 10, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl1.delete(int0)                                                       # STEP 20
ACTION: avl1.delete(int0) 
int0 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102bf8e60> : <type 'instance'>
avl_REF1 = set([2, 18, 4, 10, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([2, 4, 10, 7]) : <type 'set'>
==================================================
int2 = 5                                                                # STEP 21
ACTION: int2 = 5 
int2 = 4 : <type 'int'>
=> int2 = 5 : <type 'int'>
==================================================
int0 = 8                                                                # STEP 22
ACTION: int0 = 8 
int0 = 18 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
result = avl1.find(int0)                                                # STEP 23
ACTION: result = avl1.find(int0) 
int0 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102bf8e60> : <type 'instance'>
avl_REF1 = set([2, 4, 10, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl1.delete(int0)                                                       # STEP 24
ACTION: avl1.delete(int0) 
int0 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102bf8e60> : <type 'instance'>
avl_REF1 = set([2, 4, 10, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int0 = 18                                                               # STEP 25
ACTION: int0 = 18 
int0 = 8 : <type 'int'>
=> int0 = 18 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 26
ACTION: avl1.insert(int3) 
int3 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102bf8e60> : <type 'instance'>
avl_REF1 = set([2, 4, 10, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
avl1.insert(int2)                                                       # STEP 27
ACTION: avl1.insert(int2) 
int2 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102bf8e60> : <type 'instance'>
avl_REF1 = set([2, 4, 10, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([2, 5, 4, 10, 7]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 28
ACTION: avl1.delete(int1) 
int1 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102bf8e60> : <type 'instance'>
avl_REF1 = set([2, 5, 4, 10, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([2, 5, 4, 7]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102aa67e8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1027c6fc8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
Original test has 59 steps

SAVING TEST AS failure.62611.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 8                                                                 # STEP 0
ACTION: int3 = 8 
int3 = None : <type 'NoneType'>
=> int3 = 8 : <type 'int'>
==================================================
int1 = 20                                                                # STEP 1
ACTION: int1 = 20 
int1 = None : <type 'NoneType'>
=> int1 = 20 : <type 'int'>
==================================================
int0 = 4                                                                 # STEP 2
ACTION: int0 = 4 
int0 = None : <type 'NoneType'>
=> int0 = 4 : <type 'int'>
==================================================
int2 = 6                                                                 # STEP 3
ACTION: int2 = 6 
int2 = None : <type 'NoneType'>
=> int2 = 6 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 4
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x1027d3128> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.delete(int3)                                                        # STEP 5
ACTION: avl0.delete(int3) 
int3 = 8 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1027d3128> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int3 = 3                                                                 # STEP 6
ACTION: int3 = 3 
int3 = 8 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
avl0.delete(int2)                                                        # STEP 7
ACTION: avl0.delete(int2) 
int2 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1027d3128> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.insert(int3)                                                        # STEP 8
ACTION: avl0.insert(int3) 
int3 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1027d3128> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([3]) : <type 'set'>
==================================================
int3 = 5                                                                 # STEP 9
ACTION: int3 = 5 
int3 = 3 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 10
ACTION: avl0.insert(int2) 
int2 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1027d3128> : <type 'instance'>
avl_REF0 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([3, 6]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 11
ACTION: avl0.insert(int2) 
int2 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1027d3128> : <type 'instance'>
avl_REF0 = set([3, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl0.delete(int3)                                                       # STEP 12
ACTION: avl0.delete(int3) 
int3 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1027d3128> : <type 'instance'>
avl_REF0 = set([3, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.delete(int1)                                                       # STEP 13
ACTION: avl0.delete(int1) 
int1 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1027d3128> : <type 'instance'>
avl_REF0 = set([3, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int2 = 3                                                                # STEP 14
ACTION: int2 = 3 
int2 = 6 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 15
ACTION: avl0.delete(int2) 
int2 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1027d3128> : <type 'instance'>
avl_REF0 = set([3, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([6]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 16
ACTION: avl0.insert(int1) 
int1 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1027d3128> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([20, 6]) : <type 'set'>
==================================================
avl0 == avl0                                                            # STEP 17
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x1027d3128> : <type 'instance'>
avl_REF0 = set([20, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl0.insert(int0)                                                       # STEP 18
ACTION: avl0.insert(int0) 
int0 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1027d3128> : <type 'instance'>
avl_REF0 = set([20, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([4, 20, 6]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 19
ACTION: avl0.insert(int0) 
int0 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1027d3128> : <type 'instance'>
avl_REF0 = set([4, 20, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
int2 = 1                                                                # STEP 20
ACTION: int2 = 1 
int2 = 3 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 21
ACTION: avl0.insert(int1) 
int1 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1027d3128> : <type 'instance'>
avl_REF0 = set([4, 20, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
int0 = 1                                                                # STEP 22
ACTION: int0 = 1 
int0 = 4 : <type 'int'>
=> int0 = 1 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 23
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x1027d3128> : <type 'instance'>
avl_REF0 = set([4, 20, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int1 = 1                                                                # STEP 24
ACTION: int1 = 1 
int1 = 20 : <type 'int'>
=> int1 = 1 : <type 'int'>
==================================================
int3 = 6                                                                # STEP 25
ACTION: int3 = 6 
int3 = 5 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 26
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x1027d3128> : <type 'instance'>
avl_REF0 = set([4, 20, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int3)                                                       # STEP 27
ACTION: avl0.insert(int3) 
int3 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1027d3128> : <type 'instance'>
avl_REF0 = set([4, 20, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
avl0.insert(int1)                                                       # STEP 28
ACTION: avl0.insert(int1) 
int1 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1027d3128> : <type 'instance'>
avl_REF0 = set([4, 20, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([4, 20, 6, 1]) : <type 'set'>
==================================================
int1 = 18                                                               # STEP 29
ACTION: int1 = 18 
int1 = 1 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 30
ACTION: avl0.delete(int1) 
int1 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1027d3128> : <type 'instance'>
avl_REF0 = set([4, 20, 6, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.insert(int1)                                                       # STEP 31
ACTION: avl0.insert(int1) 
int1 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1027d3128> : <type 'instance'>
avl_REF0 = set([4, 20, 6, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([1, 4, 6, 18, 20]) : <type 'set'>
==================================================
int1 = 5                                                                # STEP 32
ACTION: int1 = 5 
int1 = 18 : <type 'int'>
=> int1 = 5 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 33
ACTION: avl0.insert(int2) 
int2 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1027d3128> : <type 'instance'>
avl_REF0 = set([1, 4, 6, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl0.delete(int3)                                                       # STEP 34
ACTION: avl0.delete(int3) 
int3 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1027d3128> : <type 'instance'>
avl_REF0 = set([1, 4, 6, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([1, 4, 18, 20]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 35
ACTION: avl0.insert(int2) 
int2 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1027d3128> : <type 'instance'>
avl_REF0 = set([1, 4, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl0.delete(int0)                                                       # STEP 36
ACTION: avl0.delete(int0) 
int0 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1027d3128> : <type 'instance'>
avl_REF0 = set([1, 4, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([4, 18, 20]) : <type 'set'>
==================================================
int0 = 2                                                                # STEP 37
ACTION: int0 = 2 
int0 = 1 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
int3 = 20                                                               # STEP 38
ACTION: int3 = 20 
int3 = 6 : <type 'int'>
=> int3 = 20 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 39
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x1027d3128> : <type 'instance'>
avl_REF0 = set([4, 18, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int2)                                                       # STEP 40
ACTION: avl0.insert(int2) 
int2 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1027d3128> : <type 'instance'>
avl_REF0 = set([4, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([1, 4, 18, 20]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 41
ACTION: avl0.insert(int2) 
int2 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1027d3128> : <type 'instance'>
avl_REF0 = set([1, 4, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
int2 = 6                                                                # STEP 42
ACTION: int2 = 6 
int2 = 1 : <type 'int'>
=> int2 = 6 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 43
ACTION: avl0.delete(int1) 
int1 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1027d3128> : <type 'instance'>
avl_REF0 = set([1, 4, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
result = avl0.find(int3)                                                # STEP 44
ACTION: result = avl0.find(int3) 
int3 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1027d3128> : <type 'instance'>
avl_REF0 = set([1, 4, 18, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
avl0.delete(int0)                                                       # STEP 45
ACTION: avl0.delete(int0) 
int0 = 2 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1027d3128> : <type 'instance'>
avl_REF0 = set([1, 4, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.insert(int3)                                                       # STEP 46
ACTION: avl0.insert(int3) 
int3 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1027d3128> : <type 'instance'>
avl_REF0 = set([1, 4, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
avl0.insert(int3)                                                       # STEP 47
ACTION: avl0.insert(int3) 
int3 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1027d3128> : <type 'instance'>
avl_REF0 = set([1, 4, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
avl0.delete(int0)                                                       # STEP 48
ACTION: avl0.delete(int0) 
int0 = 2 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1027d3128> : <type 'instance'>
avl_REF0 = set([1, 4, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
result = avl0.inorder()                                                 # STEP 49
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x1027d3128> : <type 'instance'>
avl_REF0 = set([1, 4, 18, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
result = avl0.find(int2)                                                # STEP 50
ACTION: result = avl0.find(int2) 
int2 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1027d3128> : <type 'instance'>
avl_REF0 = set([1, 4, 18, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl0.insert(int2)                                                       # STEP 51
ACTION: avl0.insert(int2) 
int2 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1027d3128> : <type 'instance'>
avl_REF0 = set([1, 4, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([1, 4, 6, 18, 20]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 52
ACTION: avl0.insert(int3) 
int3 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1027d3128> : <type 'instance'>
avl_REF0 = set([1, 4, 6, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
avl0.insert(int2)                                                       # STEP 53
ACTION: avl0.insert(int2) 
int2 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1027d3128> : <type 'instance'>
avl_REF0 = set([1, 4, 6, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl0.delete(int2)                                                       # STEP 54
ACTION: avl0.delete(int2) 
int2 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1027d3128> : <type 'instance'>
avl_REF0 = set([1, 4, 6, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([1, 4, 18, 20]) : <type 'set'>
==================================================
result = avl0.find(int1)                                                # STEP 55
ACTION: result = avl0.find(int1) 
int1 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1027d3128> : <type 'instance'>
avl_REF0 = set([1, 4, 18, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl0.insert(int0)                                                       # STEP 56
ACTION: avl0.insert(int0) 
int0 = 2 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1027d3128> : <type 'instance'>
avl_REF0 = set([1, 4, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([1, 2, 4, 18, 20]) : <type 'set'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 57
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x102d7a5f0> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 58
ACTION: avl0.delete(int3) 
int3 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1027d3128> : <type 'instance'>
avl_REF0 = set([1, 2, 4, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([1, 2, 4, 18]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102d7a2d8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1025e0830>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
Original test has 51 steps

SAVING TEST AS failure.62611.test.2
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 15                                                                # STEP 0
ACTION: int0 = 15 
int0 = None : <type 'NoneType'>
=> int0 = 15 : <type 'int'>
==================================================
int3 = 17                                                                # STEP 1
ACTION: int3 = 17 
int3 = None : <type 'NoneType'>
=> int3 = 17 : <type 'int'>
==================================================
int1 = 18                                                                # STEP 2
ACTION: int1 = 18 
int1 = None : <type 'NoneType'>
=> int1 = 18 : <type 'int'>
==================================================
int2 = 7                                                                 # STEP 3
ACTION: int2 = 7 
int2 = None : <type 'NoneType'>
=> int2 = 7 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x1025e0f80> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.insert(int3)                                                        # STEP 5
ACTION: avl1.insert(int3) 
int3 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1025e0f80> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([17]) : <type 'set'>
==================================================
result = avl1.find(int1)                                                 # STEP 6
ACTION: result = avl1.find(int1) 
int1 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1025e0f80> : <type 'instance'>
avl_REF1 = set([17]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl1.delete(int3)                                                        # STEP 7
ACTION: avl1.delete(int3) 
int3 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1025e0f80> : <type 'instance'>
avl_REF1 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.delete(int0)                                                        # STEP 8
ACTION: avl1.delete(int0) 
int0 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1025e0f80> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.delete(int0)                                                        # STEP 9
ACTION: avl1.delete(int0) 
int0 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1025e0f80> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
result = avl1.inorder()                                                 # STEP 10
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x1025e0f80> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.delete(int2)                                                       # STEP 11
ACTION: avl1.delete(int2) 
int2 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1025e0f80> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1 == avl1                                                            # STEP 12
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x1025e0f80> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1 == avl1                                                            # STEP 13
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x1025e0f80> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.delete(int0)                                                       # STEP 14
ACTION: avl1.delete(int0) 
int0 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1025e0f80> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.delete(int0)                                                       # STEP 15
ACTION: avl1.delete(int0) 
int0 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1025e0f80> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
result = avl1.inorder()                                                 # STEP 16
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x1025e0f80> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.delete(int2)                                                       # STEP 17
ACTION: avl1.delete(int2) 
int2 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1025e0f80> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int1 = 12                                                               # STEP 18
ACTION: int1 = 12 
int1 = 18 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 19
ACTION: avl1.insert(int0) 
int0 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1025e0f80> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([15]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 20
ACTION: avl1.delete(int3) 
int3 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1025e0f80> : <type 'instance'>
avl_REF1 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
result = avl1.find(int3)                                                # STEP 21
ACTION: result = avl1.find(int3) 
int3 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1025e0f80> : <type 'instance'>
avl_REF1 = set([15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl1.insert(int0)                                                       # STEP 22
ACTION: avl1.insert(int0) 
int0 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1025e0f80> : <type 'instance'>
avl_REF1 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.insert(int3)                                                       # STEP 23
ACTION: avl1.insert(int3) 
int3 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1025e0f80> : <type 'instance'>
avl_REF1 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([17, 15]) : <type 'set'>
==================================================
result = avl1.find(int1)                                                # STEP 24
ACTION: result = avl1.find(int1) 
int1 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1025e0f80> : <type 'instance'>
avl_REF1 = set([17, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl1.delete(int1)                                                       # STEP 25
ACTION: avl1.delete(int1) 
int1 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1025e0f80> : <type 'instance'>
avl_REF1 = set([17, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int2 = 9                                                                # STEP 26
ACTION: int2 = 9 
int2 = 7 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
int3 = 17                                                               # STEP 27
ACTION: int3 = 17 
int3 = 17 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 28
ACTION: avl1.insert(int2) 
int2 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1025e0f80> : <type 'instance'>
avl_REF1 = set([17, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([17, 9, 15]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 29
ACTION: avl1.delete(int2) 
int2 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1025e0f80> : <type 'instance'>
avl_REF1 = set([17, 9, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([17, 15]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 30
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x1025e0f80> : <type 'instance'>
avl_REF1 = set([17, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int3)                                                       # STEP 31
ACTION: avl1.insert(int3) 
int3 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1025e0f80> : <type 'instance'>
avl_REF1 = set([17, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
avl1.delete(int1)                                                       # STEP 32
ACTION: avl1.delete(int1) 
int1 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1025e0f80> : <type 'instance'>
avl_REF1 = set([17, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int1 = 3                                                                # STEP 33
ACTION: int1 = 3 
int1 = 12 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 34
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x1025e0f80> : <type 'instance'>
avl_REF1 = set([17, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
result = avl1.inorder()                                                 # STEP 35
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x1025e0f80> : <type 'instance'>
avl_REF1 = set([17, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int0 = 13                                                               # STEP 36
ACTION: int0 = 13 
int0 = 15 : <type 'int'>
=> int0 = 13 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 37
ACTION: avl1.delete(int3) 
int3 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1025e0f80> : <type 'instance'>
avl_REF1 = set([17, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([15]) : <type 'set'>
==================================================
int3 = 7                                                                # STEP 38
ACTION: int3 = 7 
int3 = 17 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
int2 = 7                                                                # STEP 39
ACTION: int2 = 7 
int2 = 9 : <type 'int'>
=> int2 = 7 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 40
ACTION: avl1.delete(int0) 
int0 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1025e0f80> : <type 'instance'>
avl_REF1 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.insert(int0)                                                       # STEP 41
ACTION: avl1.insert(int0) 
int0 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1025e0f80> : <type 'instance'>
avl_REF1 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([13, 15]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 42
ACTION: avl1.delete(int2) 
int2 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1025e0f80> : <type 'instance'>
avl_REF1 = set([13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int0 = 19                                                               # STEP 43
ACTION: int0 = 19 
int0 = 13 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 44
ACTION: avl1.insert(int2) 
int2 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1025e0f80> : <type 'instance'>
avl_REF1 = set([13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([7, 13, 15]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 45
ACTION: avl1.insert(int0) 
int0 = 19 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1025e0f80> : <type 'instance'>
avl_REF1 = set([7, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([7, 13, 15, 19]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 46
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x1025e0f80> : <type 'instance'>
avl_REF1 = set([7, 13, 15, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int0 = 12                                                               # STEP 47
ACTION: int0 = 12 
int0 = 19 : <type 'int'>
=> int0 = 12 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 48
ACTION: avl1.delete(int0) 
int0 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1025e0f80> : <type 'instance'>
avl_REF1 = set([7, 13, 15, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int0 = 20                                                               # STEP 49
ACTION: int0 = 20 
int0 = 12 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 50
ACTION: avl1.delete(int3) 
int3 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1025e0f80> : <type 'instance'>
avl_REF1 = set([7, 13, 15, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([13, 15, 19]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102a05950>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 3 DISTINCT FAILURES
TEST #4 STEP #45 (0:00:30.035069) Mon May  1 18:57:50 2017 [ 144 stmts 190 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102ac3368>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
Original test has 94 steps

SAVING TEST AS failure.62611.test.3
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 16                                                                # STEP 0
ACTION: int3 = 16 
int3 = None : <type 'NoneType'>
=> int3 = 16 : <type 'int'>
==================================================
int0 = 9                                                                 # STEP 1
ACTION: int0 = 9 
int0 = None : <type 'NoneType'>
=> int0 = 9 : <type 'int'>
==================================================
int1 = 8                                                                 # STEP 2
ACTION: int1 = 8 
int1 = None : <type 'NoneType'>
=> int1 = 8 : <type 'int'>
==================================================
int2 = 6                                                                 # STEP 3
ACTION: int2 = 6 
int2 = None : <type 'NoneType'>
=> int2 = 6 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x102ba15f0> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.delete(int3)                                                        # STEP 5
ACTION: avl1.delete(int3) 
int3 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102ba15f0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.insert(int1)                                                        # STEP 6
ACTION: avl1.insert(int1) 
int1 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102ba15f0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([8]) : <type 'set'>
==================================================
int1 = 8                                                                 # STEP 7
ACTION: int1 = 8 
int1 = 8 : <type 'int'>
==================================================
avl1.delete(int2)                                                        # STEP 8
ACTION: avl1.delete(int2) 
int2 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102ba15f0> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.delete(int3)                                                        # STEP 9
ACTION: avl1.delete(int3) 
int3 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102ba15f0> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1 == avl1                                                            # STEP 10
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x102ba15f0> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
int3 = 19                                                               # STEP 11
ACTION: int3 = 19 
int3 = 16 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 12
ACTION: avl1.delete(int0) 
int0 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102ba15f0> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.delete(int0)                                                       # STEP 13
ACTION: avl1.delete(int0) 
int0 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102ba15f0> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1 == avl1                                                            # STEP 14
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x102ba15f0> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.delete(int3)                                                       # STEP 15
ACTION: avl1.delete(int3) 
int3 = 19 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102ba15f0> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int2 = 11                                                               # STEP 16
ACTION: int2 = 11 
int2 = 6 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 17
ACTION: avl1.insert(int1) 
int1 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102ba15f0> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl1.delete(int0)                                                       # STEP 18
ACTION: avl1.delete(int0) 
int0 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102ba15f0> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.delete(int0)                                                       # STEP 19
ACTION: avl1.delete(int0) 
int0 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102ba15f0> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.insert(int1)                                                       # STEP 20
ACTION: avl1.insert(int1) 
int1 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102ba15f0> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl1 == avl1                                                            # STEP 21
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x102ba15f0> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
int0 = 5                                                                # STEP 22
ACTION: int0 = 5 
int0 = 9 : <type 'int'>
=> int0 = 5 : <type 'int'>
==================================================
result = avl1.find(int3)                                                # STEP 23
ACTION: result = avl1.find(int3) 
int3 = 19 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102ba15f0> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl1.delete(int0)                                                       # STEP 24
ACTION: avl1.delete(int0) 
int0 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102ba15f0> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.delete(int0)                                                       # STEP 25
ACTION: avl1.delete(int0) 
int0 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102ba15f0> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int1 = 9                                                                # STEP 26
ACTION: int1 = 9 
int1 = 8 : <type 'int'>
=> int1 = 9 : <type 'int'>
==================================================
result = avl1.find(int2)                                                # STEP 27
ACTION: result = avl1.find(int2) 
int2 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102ba15f0> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl0 = avl.AVLTree()                                                    # STEP 28
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x1029aff38> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 29
ACTION: avl0.insert(int1) 
int1 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1029aff38> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([9]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 30
ACTION: avl0.insert(int1) 
int1 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1029aff38> : <type 'instance'>
avl_REF0 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl1.delete(int0)                                                       # STEP 31
ACTION: avl1.delete(int0) 
int0 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102ba15f0> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int2 = 9                                                                # STEP 32
ACTION: int2 = 9 
int2 = 11 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 33
ACTION: avl1.delete(int2) 
int2 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102ba15f0> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl0.insert(int0)                                                       # STEP 34
ACTION: avl0.insert(int0) 
int0 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1029aff38> : <type 'instance'>
avl_REF0 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([9, 5]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 35
ACTION: avl0.insert(int2) 
int2 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1029aff38> : <type 'instance'>
avl_REF0 = set([9, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl1.delete(int3)                                                       # STEP 36
ACTION: avl1.delete(int3) 
int3 = 19 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102ba15f0> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl0.insert(int1)                                                       # STEP 37
ACTION: avl0.insert(int1) 
int1 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1029aff38> : <type 'instance'>
avl_REF0 = set([9, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl1.delete(int2)                                                       # STEP 38
ACTION: avl1.delete(int2) 
int2 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102ba15f0> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int0 = 15                                                               # STEP 39
ACTION: int0 = 15 
int0 = 5 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 40
ACTION: avl1.insert(int0) 
int0 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102ba15f0> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([8, 15]) : <type 'set'>
==================================================
avl0 == avl0                                                            # STEP 41
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x1029aff38> : <type 'instance'>
avl_REF0 = set([9, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl1.delete(int1)                                                       # STEP 42
ACTION: avl1.delete(int1) 
int1 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102ba15f0> : <type 'instance'>
avl_REF1 = set([8, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl0.insert(int0)                                                       # STEP 43
ACTION: avl0.insert(int0) 
int0 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1029aff38> : <type 'instance'>
avl_REF0 = set([9, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([9, 5, 15]) : <type 'set'>
==================================================
avl1 == avl1                                                            # STEP 44
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x102ba15f0> : <type 'instance'>
avl_REF1 = set([8, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.insert(int2)                                                       # STEP 45
ACTION: avl1.insert(int2) 
int2 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102ba15f0> : <type 'instance'>
avl_REF1 = set([8, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([8, 9, 15]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 46
ACTION: avl1.delete(int2) 
int2 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102ba15f0> : <type 'instance'>
avl_REF1 = set([8, 9, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([8, 15]) : <type 'set'>
==================================================
int3 = 7                                                                # STEP 47
ACTION: int3 = 7 
int3 = 19 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
int2 = 3                                                                # STEP 48
ACTION: int2 = 3 
int2 = 9 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 49
ACTION: avl1.delete(int3) 
int3 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102ba15f0> : <type 'instance'>
avl_REF1 = set([8, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.delete(int1)                                                       # STEP 50
ACTION: avl1.delete(int1) 
int1 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102ba15f0> : <type 'instance'>
avl_REF1 = set([8, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
result = avl0.find(int0)                                                # STEP 51
ACTION: result = avl0.find(int0) 
int0 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1029aff38> : <type 'instance'>
avl_REF0 = set([9, 5, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
int0 = 10                                                               # STEP 52
ACTION: int0 = 10 
int0 = 15 : <type 'int'>
=> int0 = 10 : <type 'int'>
==================================================
int3 = 5                                                                # STEP 53
ACTION: int3 = 5 
int3 = 7 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
result = avl1.find(int0)                                                # STEP 54
ACTION: result = avl1.find(int0) 
int0 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102ba15f0> : <type 'instance'>
avl_REF1 = set([8, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
int1 = 2                                                                # STEP 55
ACTION: int1 = 2 
int1 = 9 : <type 'int'>
=> int1 = 2 : <type 'int'>
==================================================
int0 = 16                                                               # STEP 56
ACTION: int0 = 16 
int0 = 10 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 57
ACTION: avl0.insert(int3) 
int3 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1029aff38> : <type 'instance'>
avl_REF0 = set([9, 5, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
int3 = 18                                                               # STEP 58
ACTION: int3 = 18 
int3 = 5 : <type 'int'>
=> int3 = 18 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 59
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x10298b0e0> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl1 == avl0                                                            # STEP 60
ACTION: avl1 == avl0 
avl1 = <avlbug2.AVLTree instance at 0x102ba15f0> : <type 'instance'>
avl0 = <avlbug2.AVLTree instance at 0x1029aff38> : <type 'instance'>
avl_REF1 = set([8, 15]) : <type 'set'>
avl_REF0 = set([9, 5, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
avl1.insert(int0)                                                       # STEP 61
ACTION: avl1.insert(int0) 
int0 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102ba15f0> : <type 'instance'>
avl_REF1 = set([8, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([8, 16, 15]) : <type 'set'>
==================================================
result = avl0.find(int1)                                                # STEP 62
ACTION: result = avl0.find(int1) 
int1 = 2 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1029aff38> : <type 'instance'>
avl_REF0 = set([9, 5, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
int0 = 12                                                               # STEP 63
ACTION: int0 = 12 
int0 = 16 : <type 'int'>
=> int0 = 12 : <type 'int'>
==================================================
result = avl0.find(int2)                                                # STEP 64
ACTION: result = avl0.find(int2) 
int2 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1029aff38> : <type 'instance'>
avl_REF0 = set([9, 5, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
int1 = 20                                                               # STEP 65
ACTION: int1 = 20 
int1 = 2 : <type 'int'>
=> int1 = 20 : <type 'int'>
==================================================
avl2 == avl0                                                            # STEP 66
ACTION: avl2 == avl0 
avl2 = <avlbug2.AVLTree instance at 0x10298b0e0> : <type 'instance'>
avl0 = <avlbug2.AVLTree instance at 0x1029aff38> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
avl_REF0 = set([9, 5, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF0 
==================================================
avl0.insert(int1)                                                       # STEP 67
ACTION: avl0.insert(int1) 
int1 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1029aff38> : <type 'instance'>
avl_REF0 = set([9, 5, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([9, 20, 5, 15]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 68
ACTION: avl2.insert(int0) 
int0 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10298b0e0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([12]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 69
ACTION: avl1.delete(int0) 
int0 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102ba15f0> : <type 'instance'>
avl_REF1 = set([8, 16, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl2.delete(int3)                                                       # STEP 70
ACTION: avl2.delete(int3) 
int3 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10298b0e0> : <type 'instance'>
avl_REF2 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int2 = 16                                                               # STEP 71
ACTION: int2 = 16 
int2 = 3 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 72
ACTION: avl2.insert(int1) 
int1 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10298b0e0> : <type 'instance'>
avl_REF2 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([20, 12]) : <type 'set'>
==================================================
int1 = 9                                                                # STEP 73
ACTION: int1 = 9 
int1 = 20 : <type 'int'>
=> int1 = 9 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 74
ACTION: avl0.delete(int2) 
int2 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1029aff38> : <type 'instance'>
avl_REF0 = set([9, 20, 5, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int3 = 14                                                               # STEP 75
ACTION: int3 = 14 
int3 = 18 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
int0 = 19                                                               # STEP 76
ACTION: int0 = 19 
int0 = 12 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 77
ACTION: avl2.insert(int3) 
int3 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10298b0e0> : <type 'instance'>
avl_REF2 = set([20, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([20, 12, 14]) : <type 'set'>
==================================================
result = avl1.find(int0)                                                # STEP 78
ACTION: result = avl1.find(int0) 
int0 = 19 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102ba15f0> : <type 'instance'>
avl_REF1 = set([8, 16, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl1.insert(int1)                                                       # STEP 79
ACTION: avl1.insert(int1) 
int1 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102ba15f0> : <type 'instance'>
avl_REF1 = set([8, 16, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([8, 16, 9, 15]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 80
ACTION: avl0.delete(int1) 
int1 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1029aff38> : <type 'instance'>
avl_REF0 = set([9, 20, 5, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([20, 5, 15]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 81
ACTION: avl1.insert(int2) 
int2 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102ba15f0> : <type 'instance'>
avl_REF1 = set([8, 16, 9, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
avl0.delete(int2)                                                       # STEP 82
ACTION: avl0.delete(int2) 
int2 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1029aff38> : <type 'instance'>
avl_REF0 = set([20, 5, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int3 = 14                                                               # STEP 83
ACTION: int3 = 14 
int3 = 14 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 84
ACTION: avl2.delete(int1) 
int1 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10298b0e0> : <type 'instance'>
avl_REF2 = set([20, 12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int0)                                                       # STEP 85
ACTION: avl2.insert(int0) 
int0 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10298b0e0> : <type 'instance'>
avl_REF2 = set([20, 12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([20, 19, 12, 14]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 86
ACTION: avl2.delete(int1) 
int1 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10298b0e0> : <type 'instance'>
avl_REF2 = set([20, 19, 12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl0.insert(int3)                                                       # STEP 87
ACTION: avl0.insert(int3) 
int3 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1029aff38> : <type 'instance'>
avl_REF0 = set([20, 5, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([20, 5, 14, 15]) : <type 'set'>
==================================================
result = avl2.find(int2)                                                # STEP 88
ACTION: result = avl2.find(int2) 
int2 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10298b0e0> : <type 'instance'>
avl_REF2 = set([20, 19, 12, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
result = avl2.find(int0)                                                # STEP 89
ACTION: result = avl2.find(int0) 
int0 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10298b0e0> : <type 'instance'>
avl_REF2 = set([20, 19, 12, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
int1 = 10                                                               # STEP 90
ACTION: int1 = 10 
int1 = 9 : <type 'int'>
=> int1 = 10 : <type 'int'>
==================================================
int0 = 15                                                               # STEP 91
ACTION: int0 = 15 
int0 = 19 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 92
ACTION: avl2.insert(int2) 
int2 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10298b0e0> : <type 'instance'>
avl_REF2 = set([20, 19, 12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([16, 20, 19, 12, 14]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 93
ACTION: avl1.delete(int2) 
int2 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102ba15f0> : <type 'instance'>
avl_REF1 = set([8, 16, 9, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([8, 9, 15]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102af9290>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 4 DISTINCT FAILURES
  10 [2:0]
-- < 4 [1:1]
---- < 3 [0:0] L
-- > 18 [1:0]
---- < 12 [0:0] L
---- > 20 [0:0] L
set([3, 4, 10, 12, 18, 20])
  10 [2:0]
-- < 4 [1:0]
---- < 3 [0:0] L
---- > 8 [0:0] L
-- > 18 [1:0]
---- < 12 [0:0] L
---- > 20 [0:0] L
set([3, 4, 8, 10, 12, 18, 20])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102d4c3b0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
Original test has 42 steps

SAVING TEST AS failure.62611.test.4
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 18                                                                # STEP 0
ACTION: int3 = 18 
int3 = None : <type 'NoneType'>
=> int3 = 18 : <type 'int'>
==================================================
int0 = 10                                                                # STEP 1
ACTION: int0 = 10 
int0 = None : <type 'NoneType'>
=> int0 = 10 : <type 'int'>
==================================================
int1 = 12                                                                # STEP 2
ACTION: int1 = 12 
int1 = None : <type 'NoneType'>
=> int1 = 12 : <type 'int'>
==================================================
int2 = 20                                                                # STEP 3
ACTION: int2 = 20 
int2 = None : <type 'NoneType'>
=> int2 = 20 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 4
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x102d4c7a0> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.insert(int0)                                                        # STEP 5
ACTION: avl0.insert(int0) 
int0 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102d4c7a0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([10]) : <type 'set'>
==================================================
int0 = 7                                                                 # STEP 6
ACTION: int0 = 7 
int0 = 10 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
avl0.delete(int0)                                                        # STEP 7
ACTION: avl0.delete(int0) 
int0 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102d4c7a0> : <type 'instance'>
avl_REF0 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.insert(int1)                                                        # STEP 8
ACTION: avl0.insert(int1) 
int1 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102d4c7a0> : <type 'instance'>
avl_REF0 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([10, 12]) : <type 'set'>
==================================================
avl0.delete(int2)                                                        # STEP 9
ACTION: avl0.delete(int2) 
int2 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102d4c7a0> : <type 'instance'>
avl_REF0 = set([10, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int1 = 9                                                                # STEP 10
ACTION: int1 = 9 
int1 = 12 : <type 'int'>
=> int1 = 9 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 11
ACTION: avl0.insert(int1) 
int1 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102d4c7a0> : <type 'instance'>
avl_REF0 = set([10, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([9, 10, 12]) : <type 'set'>
==================================================
int0 = 4                                                                # STEP 12
ACTION: int0 = 4 
int0 = 7 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 13
ACTION: avl0.delete(int0) 
int0 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102d4c7a0> : <type 'instance'>
avl_REF0 = set([9, 10, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.delete(int2)                                                       # STEP 14
ACTION: avl0.delete(int2) 
int2 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102d4c7a0> : <type 'instance'>
avl_REF0 = set([9, 10, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int2 = 20                                                               # STEP 15
ACTION: int2 = 20 
int2 = 20 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 16
ACTION: avl0.delete(int1) 
int1 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102d4c7a0> : <type 'instance'>
avl_REF0 = set([9, 10, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([10, 12]) : <type 'set'>
==================================================
int1 = 3                                                                # STEP 17
ACTION: int1 = 3 
int1 = 9 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 18
ACTION: avl0.insert(int0) 
int0 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102d4c7a0> : <type 'instance'>
avl_REF0 = set([10, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([4, 10, 12]) : <type 'set'>
==================================================
int0 = 8                                                                # STEP 19
ACTION: int0 = 8 
int0 = 4 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 20
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x102d4c7a0> : <type 'instance'>
avl_REF0 = set([4, 10, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int3)                                                       # STEP 21
ACTION: avl0.insert(int3) 
int3 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102d4c7a0> : <type 'instance'>
avl_REF0 = set([4, 10, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([4, 10, 12, 18]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 22
ACTION: avl0.delete(int1) 
int1 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102d4c7a0> : <type 'instance'>
avl_REF0 = set([4, 10, 12, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.delete(int1)                                                       # STEP 23
ACTION: avl0.delete(int1) 
int1 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102d4c7a0> : <type 'instance'>
avl_REF0 = set([4, 10, 12, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.insert(int2)                                                       # STEP 24
ACTION: avl0.insert(int2) 
int2 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102d4c7a0> : <type 'instance'>
avl_REF0 = set([4, 10, 12, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([4, 10, 12, 18, 20]) : <type 'set'>
==================================================
int3 = 20                                                               # STEP 25
ACTION: int3 = 20 
int3 = 18 : <type 'int'>
=> int3 = 20 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 26
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x102d4c7a0> : <type 'instance'>
avl_REF0 = set([4, 10, 12, 18, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int2)                                                       # STEP 27
ACTION: avl0.insert(int2) 
int2 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102d4c7a0> : <type 'instance'>
avl_REF0 = set([4, 10, 12, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl0.insert(int1)                                                       # STEP 28
ACTION: avl0.insert(int1) 
int1 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102d4c7a0> : <type 'instance'>
avl_REF0 = set([4, 10, 12, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([3, 4, 10, 12, 18, 20]) : <type 'set'>
==================================================
int2 = 15                                                               # STEP 29
ACTION: int2 = 15 
int2 = 20 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 30
ACTION: avl0.insert(int1) 
int1 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102d4c7a0> : <type 'instance'>
avl_REF0 = set([3, 4, 10, 12, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
result = avl0.inorder()                                                 # STEP 31
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x102d4c7a0> : <type 'instance'>
avl_REF0 = set([3, 4, 10, 12, 18, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int1 = 8                                                                # STEP 32
ACTION: int1 = 8 
int1 = 3 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 33
ACTION: avl0.insert(int3) 
int3 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102d4c7a0> : <type 'instance'>
avl_REF0 = set([3, 4, 10, 12, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
avl0.delete(int0)                                                       # STEP 34
ACTION: avl0.delete(int0) 
int0 = 8 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102d4c7a0> : <type 'instance'>
avl_REF0 = set([3, 4, 10, 12, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.delete(int0)                                                       # STEP 35
ACTION: avl0.delete(int0) 
int0 = 8 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102d4c7a0> : <type 'instance'>
avl_REF0 = set([3, 4, 10, 12, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.display()                                                          # STEP 36
ACTION: avl0.display() 
avl0 = <avlbug2.AVLTree instance at 0x102d4c7a0> : <type 'instance'>
avl_REF0 = set([3, 4, 10, 12, 18, 20]) : <type 'set'>
  10 [2:0]
-- < 4 [1:1]
---- < 3 [0:0] L
-- > 18 [1:0]
---- < 12 [0:0] L
---- > 20 [0:0] L
REFERENCE ACTION: print(avl_REF0) 
set([3, 4, 10, 12, 18, 20])
==================================================
avl0.insert(int1)                                                       # STEP 37
ACTION: avl0.insert(int1) 
int1 = 8 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102d4c7a0> : <type 'instance'>
avl_REF0 = set([3, 4, 10, 12, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([3, 4, 8, 10, 12, 18, 20]) : <type 'set'>
==================================================
avl0.display()                                                          # STEP 38
ACTION: avl0.display() 
avl0 = <avlbug2.AVLTree instance at 0x102d4c7a0> : <type 'instance'>
avl_REF0 = set([3, 4, 8, 10, 12, 18, 20]) : <type 'set'>
  10 [2:0]
-- < 4 [1:0]
---- < 3 [0:0] L
---- > 8 [0:0] L
-- > 18 [1:0]
---- < 12 [0:0] L
---- > 20 [0:0] L
REFERENCE ACTION: print(avl_REF0) 
set([3, 4, 8, 10, 12, 18, 20])
==================================================
avl0.insert(int2)                                                       # STEP 39
ACTION: avl0.insert(int2) 
int2 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102d4c7a0> : <type 'instance'>
avl_REF0 = set([3, 4, 8, 10, 12, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([3, 4, 8, 10, 12, 15, 18, 20]) : <type 'set'>
==================================================
avl0 == avl0                                                            # STEP 40
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x102d4c7a0> : <type 'instance'>
avl_REF0 = set([3, 4, 8, 10, 12, 15, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl0.delete(int3)                                                       # STEP 41
ACTION: avl0.delete(int3) 
int3 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102d4c7a0> : <type 'instance'>
avl_REF0 = set([3, 4, 8, 10, 12, 15, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([3, 4, 8, 10, 12, 15, 18]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102ba0a70>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 5 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 0
STOPPING TESTING DUE TO TIMEOUT
8.21242019733 PERCENT COVERED
60.6592278481 TOTAL RUNTIME
7 EXECUTED
375 TOTAL TEST OPERATIONS
17.362139225 TIME SPENT EXECUTING TEST OPERATIONS
0.0413086414337 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
17.410507679 TIME SPENT CHECKING PROPERTIES
34.772646904 TOTAL TIME SPENT RUNNING SUT
0.00396800041199 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
5 FAILED
0 REPEATS OF FAILURES
5 ACTUAL DISTINCT FAILURES

FAILURE 0
int1 = 10                                                                # STEP 0
int3 = 7                                                                 # STEP 1
int0 = 2                                                                 # STEP 2
int2 = 19                                                                # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
avl1.insert(int3)                                                        # STEP 5
avl1 == avl1                                                             # STEP 6
avl1.insert(int3)                                                        # STEP 7
avl1.delete(int2)                                                        # STEP 8
result = avl1.inorder()                                                  # STEP 9
avl1.insert(int3)                                                       # STEP 10
avl1.insert(int0)                                                       # STEP 11
int0 = 18                                                               # STEP 12
int2 = 4                                                                # STEP 13
int3 = 10                                                               # STEP 14
avl1.insert(int3)                                                       # STEP 15
avl1.delete(int2)                                                       # STEP 16
avl1.insert(int2)                                                       # STEP 17
avl1.insert(int0)                                                       # STEP 18
avl1.insert(int1)                                                       # STEP 19
avl1.delete(int0)                                                       # STEP 20
int2 = 5                                                                # STEP 21
int0 = 8                                                                # STEP 22
result = avl1.find(int0)                                                # STEP 23
avl1.delete(int0)                                                       # STEP 24
int0 = 18                                                               # STEP 25
avl1.insert(int3)                                                       # STEP 26
avl1.insert(int2)                                                       # STEP 27
avl1.delete(int1)                                                       # STEP 28
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102aa67e8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE 1
int3 = 8                                                                 # STEP 0
int1 = 20                                                                # STEP 1
int0 = 4                                                                 # STEP 2
int2 = 6                                                                 # STEP 3
avl0 = avl.AVLTree()                                                     # STEP 4
avl0.delete(int3)                                                        # STEP 5
int3 = 3                                                                 # STEP 6
avl0.delete(int2)                                                        # STEP 7
avl0.insert(int3)                                                        # STEP 8
int3 = 5                                                                 # STEP 9
avl0.insert(int2)                                                       # STEP 10
avl0.insert(int2)                                                       # STEP 11
avl0.delete(int3)                                                       # STEP 12
avl0.delete(int1)                                                       # STEP 13
int2 = 3                                                                # STEP 14
avl0.delete(int2)                                                       # STEP 15
avl0.insert(int1)                                                       # STEP 16
avl0 == avl0                                                            # STEP 17
avl0.insert(int0)                                                       # STEP 18
avl0.insert(int0)                                                       # STEP 19
int2 = 1                                                                # STEP 20
avl0.insert(int1)                                                       # STEP 21
int0 = 1                                                                # STEP 22
result = avl0.inorder()                                                 # STEP 23
int1 = 1                                                                # STEP 24
int3 = 6                                                                # STEP 25
result = avl0.inorder()                                                 # STEP 26
avl0.insert(int3)                                                       # STEP 27
avl0.insert(int1)                                                       # STEP 28
int1 = 18                                                               # STEP 29
avl0.delete(int1)                                                       # STEP 30
avl0.insert(int1)                                                       # STEP 31
int1 = 5                                                                # STEP 32
avl0.insert(int2)                                                       # STEP 33
avl0.delete(int3)                                                       # STEP 34
avl0.insert(int2)                                                       # STEP 35
avl0.delete(int0)                                                       # STEP 36
int0 = 2                                                                # STEP 37
int3 = 20                                                               # STEP 38
result = avl0.inorder()                                                 # STEP 39
avl0.insert(int2)                                                       # STEP 40
avl0.insert(int2)                                                       # STEP 41
int2 = 6                                                                # STEP 42
avl0.delete(int1)                                                       # STEP 43
result = avl0.find(int3)                                                # STEP 44
avl0.delete(int0)                                                       # STEP 45
avl0.insert(int3)                                                       # STEP 46
avl0.insert(int3)                                                       # STEP 47
avl0.delete(int0)                                                       # STEP 48
result = avl0.inorder()                                                 # STEP 49
result = avl0.find(int2)                                                # STEP 50
avl0.insert(int2)                                                       # STEP 51
avl0.insert(int3)                                                       # STEP 52
avl0.insert(int2)                                                       # STEP 53
avl0.delete(int2)                                                       # STEP 54
result = avl0.find(int1)                                                # STEP 55
avl0.insert(int0)                                                       # STEP 56
avl2 = avl.AVLTree()                                                    # STEP 57
avl0.delete(int3)                                                       # STEP 58
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102d7a2d8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE 2
int0 = 15                                                                # STEP 0
int3 = 17                                                                # STEP 1
int1 = 18                                                                # STEP 2
int2 = 7                                                                 # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
avl1.insert(int3)                                                        # STEP 5
result = avl1.find(int1)                                                 # STEP 6
avl1.delete(int3)                                                        # STEP 7
avl1.delete(int0)                                                        # STEP 8
avl1.delete(int0)                                                        # STEP 9
result = avl1.inorder()                                                 # STEP 10
avl1.delete(int2)                                                       # STEP 11
avl1 == avl1                                                            # STEP 12
avl1 == avl1                                                            # STEP 13
avl1.delete(int0)                                                       # STEP 14
avl1.delete(int0)                                                       # STEP 15
result = avl1.inorder()                                                 # STEP 16
avl1.delete(int2)                                                       # STEP 17
int1 = 12                                                               # STEP 18
avl1.insert(int0)                                                       # STEP 19
avl1.delete(int3)                                                       # STEP 20
result = avl1.find(int3)                                                # STEP 21
avl1.insert(int0)                                                       # STEP 22
avl1.insert(int3)                                                       # STEP 23
result = avl1.find(int1)                                                # STEP 24
avl1.delete(int1)                                                       # STEP 25
int2 = 9                                                                # STEP 26
int3 = 17                                                               # STEP 27
avl1.insert(int2)                                                       # STEP 28
avl1.delete(int2)                                                       # STEP 29
result = avl1.inorder()                                                 # STEP 30
avl1.insert(int3)                                                       # STEP 31
avl1.delete(int1)                                                       # STEP 32
int1 = 3                                                                # STEP 33
result = avl1.inorder()                                                 # STEP 34
result = avl1.inorder()                                                 # STEP 35
int0 = 13                                                               # STEP 36
avl1.delete(int3)                                                       # STEP 37
int3 = 7                                                                # STEP 38
int2 = 7                                                                # STEP 39
avl1.delete(int0)                                                       # STEP 40
avl1.insert(int0)                                                       # STEP 41
avl1.delete(int2)                                                       # STEP 42
int0 = 19                                                               # STEP 43
avl1.insert(int2)                                                       # STEP 44
avl1.insert(int0)                                                       # STEP 45
result = avl1.inorder()                                                 # STEP 46
int0 = 12                                                               # STEP 47
avl1.delete(int0)                                                       # STEP 48
int0 = 20                                                               # STEP 49
avl1.delete(int3)                                                       # STEP 50
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102a05950>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE 3
int3 = 16                                                                # STEP 0
int0 = 9                                                                 # STEP 1
int1 = 8                                                                 # STEP 2
int2 = 6                                                                 # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
avl1.delete(int3)                                                        # STEP 5
avl1.insert(int1)                                                        # STEP 6
int1 = 8                                                                 # STEP 7
avl1.delete(int2)                                                        # STEP 8
avl1.delete(int3)                                                        # STEP 9
avl1 == avl1                                                            # STEP 10
int3 = 19                                                               # STEP 11
avl1.delete(int0)                                                       # STEP 12
avl1.delete(int0)                                                       # STEP 13
avl1 == avl1                                                            # STEP 14
avl1.delete(int3)                                                       # STEP 15
int2 = 11                                                               # STEP 16
avl1.insert(int1)                                                       # STEP 17
avl1.delete(int0)                                                       # STEP 18
avl1.delete(int0)                                                       # STEP 19
avl1.insert(int1)                                                       # STEP 20
avl1 == avl1                                                            # STEP 21
int0 = 5                                                                # STEP 22
result = avl1.find(int3)                                                # STEP 23
avl1.delete(int0)                                                       # STEP 24
avl1.delete(int0)                                                       # STEP 25
int1 = 9                                                                # STEP 26
result = avl1.find(int2)                                                # STEP 27
avl0 = avl.AVLTree()                                                    # STEP 28
avl0.insert(int1)                                                       # STEP 29
avl0.insert(int1)                                                       # STEP 30
avl1.delete(int0)                                                       # STEP 31
int2 = 9                                                                # STEP 32
avl1.delete(int2)                                                       # STEP 33
avl0.insert(int0)                                                       # STEP 34
avl0.insert(int2)                                                       # STEP 35
avl1.delete(int3)                                                       # STEP 36
avl0.insert(int1)                                                       # STEP 37
avl1.delete(int2)                                                       # STEP 38
int0 = 15                                                               # STEP 39
avl1.insert(int0)                                                       # STEP 40
avl0 == avl0                                                            # STEP 41
avl1.delete(int1)                                                       # STEP 42
avl0.insert(int0)                                                       # STEP 43
avl1 == avl1                                                            # STEP 44
avl1.insert(int2)                                                       # STEP 45
avl1.delete(int2)                                                       # STEP 46
int3 = 7                                                                # STEP 47
int2 = 3                                                                # STEP 48
avl1.delete(int3)                                                       # STEP 49
avl1.delete(int1)                                                       # STEP 50
result = avl0.find(int0)                                                # STEP 51
int0 = 10                                                               # STEP 52
int3 = 5                                                                # STEP 53
result = avl1.find(int0)                                                # STEP 54
int1 = 2                                                                # STEP 55
int0 = 16                                                               # STEP 56
avl0.insert(int3)                                                       # STEP 57
int3 = 18                                                               # STEP 58
avl2 = avl.AVLTree()                                                    # STEP 59
avl1 == avl0                                                            # STEP 60
avl1.insert(int0)                                                       # STEP 61
result = avl0.find(int1)                                                # STEP 62
int0 = 12                                                               # STEP 63
result = avl0.find(int2)                                                # STEP 64
int1 = 20                                                               # STEP 65
avl2 == avl0                                                            # STEP 66
avl0.insert(int1)                                                       # STEP 67
avl2.insert(int0)                                                       # STEP 68
avl1.delete(int0)                                                       # STEP 69
avl2.delete(int3)                                                       # STEP 70
int2 = 16                                                               # STEP 71
avl2.insert(int1)                                                       # STEP 72
int1 = 9                                                                # STEP 73
avl0.delete(int2)                                                       # STEP 74
int3 = 14                                                               # STEP 75
int0 = 19                                                               # STEP 76
avl2.insert(int3)                                                       # STEP 77
result = avl1.find(int0)                                                # STEP 78
avl1.insert(int1)                                                       # STEP 79
avl0.delete(int1)                                                       # STEP 80
avl1.insert(int2)                                                       # STEP 81
avl0.delete(int2)                                                       # STEP 82
int3 = 14                                                               # STEP 83
avl2.delete(int1)                                                       # STEP 84
avl2.insert(int0)                                                       # STEP 85
avl2.delete(int1)                                                       # STEP 86
avl0.insert(int3)                                                       # STEP 87
result = avl2.find(int2)                                                # STEP 88
result = avl2.find(int0)                                                # STEP 89
int1 = 10                                                               # STEP 90
int0 = 15                                                               # STEP 91
avl2.insert(int2)                                                       # STEP 92
avl1.delete(int2)                                                       # STEP 93
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102af9290>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE 4
int3 = 18                                                                # STEP 0
int0 = 10                                                                # STEP 1
int1 = 12                                                                # STEP 2
int2 = 20                                                                # STEP 3
avl0 = avl.AVLTree()                                                     # STEP 4
avl0.insert(int0)                                                        # STEP 5
int0 = 7                                                                 # STEP 6
avl0.delete(int0)                                                        # STEP 7
avl0.insert(int1)                                                        # STEP 8
avl0.delete(int2)                                                        # STEP 9
int1 = 9                                                                # STEP 10
avl0.insert(int1)                                                       # STEP 11
int0 = 4                                                                # STEP 12
avl0.delete(int0)                                                       # STEP 13
avl0.delete(int2)                                                       # STEP 14
int2 = 20                                                               # STEP 15
avl0.delete(int1)                                                       # STEP 16
int1 = 3                                                                # STEP 17
avl0.insert(int0)                                                       # STEP 18
int0 = 8                                                                # STEP 19
result = avl0.inorder()                                                 # STEP 20
avl0.insert(int3)                                                       # STEP 21
avl0.delete(int1)                                                       # STEP 22
avl0.delete(int1)                                                       # STEP 23
avl0.insert(int2)                                                       # STEP 24
int3 = 20                                                               # STEP 25
result = avl0.inorder()                                                 # STEP 26
avl0.insert(int2)                                                       # STEP 27
avl0.insert(int1)                                                       # STEP 28
int2 = 15                                                               # STEP 29
avl0.insert(int1)                                                       # STEP 30
result = avl0.inorder()                                                 # STEP 31
int1 = 8                                                                # STEP 32
avl0.insert(int3)                                                       # STEP 33
avl0.delete(int0)                                                       # STEP 34
avl0.delete(int0)                                                       # STEP 35
avl0.display()                                                          # STEP 36
avl0.insert(int1)                                                       # STEP 37
avl0.display()                                                          # STEP 38
avl0.insert(int2)                                                       # STEP 39
avl0 == avl0                                                            # STEP 40
avl0.delete(int3)                                                       # STEP 41
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102ba0a70>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
214 BRANCHES COVERED
161 STATEMENTS COVERED

Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=True, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.45299.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1031897a0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
Original test has 27 steps

SAVING TEST AS failure.45299.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 15                                                                # STEP 0
ACTION: int3 = 15 
int3 = None : <type 'NoneType'>
=> int3 = 15 : <type 'int'>
==================================================
int0 = 17                                                                # STEP 1
ACTION: int0 = 17 
int0 = None : <type 'NoneType'>
=> int0 = 17 : <type 'int'>
==================================================
int2 = 8                                                                 # STEP 2
ACTION: int2 = 8 
int2 = None : <type 'NoneType'>
=> int2 = 8 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 3
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x103602ef0> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int1 = 1                                                                 # STEP 4
ACTION: int1 = 1 
int1 = None : <type 'NoneType'>
=> int1 = 1 : <type 'int'>
==================================================
avl1.insert(int0)                                                        # STEP 5
ACTION: avl1.insert(int0) 
int0 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103602ef0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([17]) : <type 'set'>
==================================================
avl1.delete(int2)                                                        # STEP 6
ACTION: avl1.delete(int2) 
int2 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103602ef0> : <type 'instance'>
avl_REF1 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int2 = 10                                                                # STEP 7
ACTION: int2 = 10 
int2 = 8 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
avl1 == avl1                                                             # STEP 8
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x103602ef0> : <type 'instance'>
avl_REF1 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.delete(int0)                                                        # STEP 9
ACTION: avl1.delete(int0) 
int0 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103602ef0> : <type 'instance'>
avl_REF1 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 10
ACTION: avl1.delete(int1) 
int1 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103602ef0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.insert(int3)                                                       # STEP 11
ACTION: avl1.insert(int3) 
int3 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103602ef0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([15]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 12
ACTION: avl1.delete(int1) 
int1 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103602ef0> : <type 'instance'>
avl_REF1 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.delete(int1)                                                       # STEP 13
ACTION: avl1.delete(int1) 
int1 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103602ef0> : <type 'instance'>
avl_REF1 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.delete(int0)                                                       # STEP 14
ACTION: avl1.delete(int0) 
int0 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103602ef0> : <type 'instance'>
avl_REF1 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.delete(int0)                                                       # STEP 15
ACTION: avl1.delete(int0) 
int0 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103602ef0> : <type 'instance'>
avl_REF1 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.delete(int2)                                                       # STEP 16
ACTION: avl1.delete(int2) 
int2 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103602ef0> : <type 'instance'>
avl_REF1 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.insert(int2)                                                       # STEP 17
ACTION: avl1.insert(int2) 
int2 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103602ef0> : <type 'instance'>
avl_REF1 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([10, 15]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 18
ACTION: avl1.insert(int2) 
int2 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103602ef0> : <type 'instance'>
avl_REF1 = set([10, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
avl1.delete(int2)                                                       # STEP 19
ACTION: avl1.delete(int2) 
int2 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103602ef0> : <type 'instance'>
avl_REF1 = set([10, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([15]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 20
ACTION: avl1.insert(int0) 
int0 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103602ef0> : <type 'instance'>
avl_REF1 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([17, 15]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 21
ACTION: avl1.insert(int0) 
int0 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103602ef0> : <type 'instance'>
avl_REF1 = set([17, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.insert(int2)                                                       # STEP 22
ACTION: avl1.insert(int2) 
int2 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103602ef0> : <type 'instance'>
avl_REF1 = set([17, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([17, 10, 15]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 23
ACTION: avl1.insert(int1) 
int1 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103602ef0> : <type 'instance'>
avl_REF1 = set([17, 10, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([17, 10, 1, 15]) : <type 'set'>
==================================================
int1 = 15                                                               # STEP 24
ACTION: int1 = 15 
int1 = 1 : <type 'int'>
=> int1 = 15 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 25
ACTION: avl1.insert(int1) 
int1 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103602ef0> : <type 'instance'>
avl_REF1 = set([17, 10, 1, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl1.delete(int3)                                                       # STEP 26
ACTION: avl1.delete(int3) 
int3 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103602ef0> : <type 'instance'>
avl_REF1 = set([17, 10, 1, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([17, 10, 1]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1036bf098>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
  9 [3:0]
-- < 2 [2:-1]
---- < 1 [0:0] L
---- > 4 [1:1]
------ < 3 [0:0] L
-- > 12 [2:-1]
---- < 11 [0:0] L
---- > 19 [1:1]
------ < 18 [0:0] L
set([1, 2, 3, 4, 9, 11, 12, 18, 19])
  9 [3:0]
-- < 2 [2:-1]
---- < 1 [0:0] L
---- > 4 [1:1]
------ < 3 [0:0] L
-- > 12 [2:-1]
---- < 11 [0:0] L
---- > 19 [1:1]
------ < 18 [0:0] L
set([1, 2, 3, 4, 9, 11, 12, 18, 19])
  9 [3:0]
-- < 2 [2:-1]
---- < 1 [0:0] L
---- > 4 [1:1]
------ < 3 [0:0] L
-- > 12 [2:0]
---- < 11 [1:1]
------ < 10 [0:0] L
---- > 19 [1:1]
------ < 18 [0:0] L
set([1, 2, 3, 4, 9, 10, 11, 12, 18, 19])
  9 [3:0]
-- < 2 [2:-1]
---- < 1 [0:0] L
---- > 4 [1:1]
------ < 3 [0:0] L
-- > 12 [2:0]
---- < 11 [1:1]
------ < 10 [0:0] L
---- > 18 [1:0]
------ < 13 [0:0] L
------ > 19 [0:0] L
set([1, 2, 3, 4, 9, 10, 11, 12, 13, 18, 19])
  13 [3:1]
-- < 8 [2:-1]
---- < 1 [0:0] L
---- > 12 [1:1]
------ < 11 [0:0] L
-- > 17 [1:-1]
---- > 18 [0:0] L
set([1, 8, 11, 12, 13, 17, 18])
  13 [3:1]
-- < 8 [2:-1]
---- < 1 [0:0] L
---- > 12 [1:1]
------ < 11 [0:0] L
-- > 17 [1:-1]
---- > 18 [0:0] L
set([1, 8, 11, 12, 13, 17, 18])
  13 [3:1]
-- < 8 [2:-1]
---- < 1 [0:0] L
---- > 12 [1:1]
------ < 11 [0:0] L
-- > 17 [1:-1]
---- > 18 [0:0] L
set([1, 8, 11, 12, 13, 17, 18])
  8 [2:0]
-- < 4 [1:0]
---- < 1 [0:0] L
---- > 7 [0:0] L
-- > 14 [1:0]
---- < 10 [0:0] L
---- > 20 [0:0] L
set([1, 4, 7, 8, 10, 14, 20])
TEST #4 STEP #85 (0:00:30.054593) Mon May  1 03:07:54 2017 [ 161 stmts 214 branches ]
  8 [2:0]
-- < 4 [1:0]
---- < 1 [0:0] L
---- > 7 [0:0] L
-- > 14 [1:0]
---- < 10 [0:0] L
---- > 20 [0:0] L
set([1, 4, 7, 8, 10, 14, 20])
  8 [3:1]
-- < 4 [2:1]
---- < 1 [1:-1]
------ > 3 [0:0] L
---- > 7 [0:0] L
-- > 14 [1:0]
---- < 10 [0:0] L
---- > 20 [0:0] L
set([1, 3, 4, 7, 8, 10, 14, 20])
  8 [3:1]
-- < 4 [2:1]
---- < 1 [1:-1]
------ > 3 [0:0] L
---- > 7 [0:0] L
-- > 14 [1:0]
---- < 10 [0:0] L
---- > 20 [0:0] L
set([1, 3, 4, 7, 8, 10, 14, 20])
  8 [3:1]
-- < 4 [2:1]
---- < 1 [1:-1]
------ > 3 [0:0] L
---- > 7 [0:0] L
-- > 14 [1:0]
---- < 10 [0:0] L
---- > 20 [0:0] L
set([1, 3, 4, 7, 8, 10, 14, 20])
  8 [3:1]
-- < 4 [2:1]
---- < 1 [1:-1]
------ > 3 [0:0] L
---- > 7 [0:0] L
-- > 14 [1:0]
---- < 10 [0:0] L
---- > 20 [0:0] L
set([1, 3, 4, 7, 8, 10, 14, 20])
  9 [2:0]
-- < 4 [1:0]
---- < 1 [0:0] L
---- > 5 [0:0] L
-- > 12 [1:-1]
---- > 18 [0:0] L
set([1, 4, 5, 9, 12, 18])
  9 [2:0]
-- < 4 [1:0]
---- < 1 [0:0] L
---- > 5 [0:0] L
-- > 12 [1:-1]
---- > 18 [0:0] L
set([1, 4, 5, 9, 12, 18])
  9 [2:0]
-- < 4 [1:0]
---- < 1 [0:0] L
---- > 5 [0:0] L
-- > 12 [1:-1]
---- > 13 [0:0] L
set([1, 4, 5, 9, 12, 13])
  9 [2:0]
-- < 4 [1:0]
---- < 1 [0:0] L
---- > 5 [0:0] L
-- > 12 [1:-1]
---- > 13 [0:0] L
set([1, 4, 5, 9, 12, 13])
  9 [2:0]
-- < 4 [1:0]
---- < 1 [0:0] L
---- > 5 [0:0] L
-- > 12 [1:-1]
---- > 13 [0:0] L
set([1, 4, 5, 9, 12, 13])
  9 [2:0]
-- < 4 [1:0]
---- < 1 [0:0] L
---- > 5 [0:0] L
-- > 12 [1:-1]
---- > 13 [0:0] L
set([1, 4, 5, 9, 12, 13])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1037f93b0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
Original test has 75 steps

SAVING TEST AS failure.45299.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 4                                                                 # STEP 0
ACTION: int2 = 4 
int2 = None : <type 'NoneType'>
=> int2 = 4 : <type 'int'>
==================================================
int1 = 5                                                                 # STEP 1
ACTION: int1 = 5 
int1 = None : <type 'NoneType'>
=> int1 = 5 : <type 'int'>
==================================================
int0 = 4                                                                 # STEP 2
ACTION: int0 = 4 
int0 = None : <type 'NoneType'>
=> int0 = 4 : <type 'int'>
==================================================
int3 = 17                                                                # STEP 3
ACTION: int3 = 17 
int3 = None : <type 'NoneType'>
=> int3 = 17 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 4
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x1037f9a28> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
result = avl0.inorder()                                                  # STEP 5
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x1037f9a28> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int1)                                                        # STEP 6
ACTION: avl0.insert(int1) 
int1 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1037f9a28> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([5]) : <type 'set'>
==================================================
avl0.delete(int3)                                                        # STEP 7
ACTION: avl0.delete(int3) 
int3 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1037f9a28> : <type 'instance'>
avl_REF0 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
result = avl0.inorder()                                                  # STEP 8
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x1037f9a28> : <type 'instance'>
avl_REF0 = set([5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.delete(int3)                                                        # STEP 9
ACTION: avl0.delete(int3) 
int3 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1037f9a28> : <type 'instance'>
avl_REF0 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int3 = 12                                                               # STEP 10
ACTION: int3 = 12 
int3 = 17 : <type 'int'>
=> int3 = 12 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 11
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x1037f9a28> : <type 'instance'>
avl_REF0 = set([5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
result = avl0.inorder()                                                 # STEP 12
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x1037f9a28> : <type 'instance'>
avl_REF0 = set([5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int1 = 1                                                                # STEP 13
ACTION: int1 = 1 
int1 = 5 : <type 'int'>
=> int1 = 1 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 14
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x1037f9a28> : <type 'instance'>
avl_REF0 = set([5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int3)                                                       # STEP 15
ACTION: avl0.insert(int3) 
int3 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1037f9a28> : <type 'instance'>
avl_REF0 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([12, 5]) : <type 'set'>
==================================================
int3 = 18                                                               # STEP 16
ACTION: int3 = 18 
int3 = 12 : <type 'int'>
=> int3 = 18 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 17
ACTION: avl0.delete(int2) 
int2 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1037f9a28> : <type 'instance'>
avl_REF0 = set([12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.delete(int0)                                                       # STEP 18
ACTION: avl0.delete(int0) 
int0 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1037f9a28> : <type 'instance'>
avl_REF0 = set([12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int0 = 9                                                                # STEP 19
ACTION: int0 = 9 
int0 = 4 : <type 'int'>
=> int0 = 9 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 20
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x1037f9a28> : <type 'instance'>
avl_REF0 = set([12, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int0)                                                       # STEP 21
ACTION: avl0.insert(int0) 
int0 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1037f9a28> : <type 'instance'>
avl_REF0 = set([12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([9, 12, 5]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 22
ACTION: avl0.insert(int3) 
int3 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1037f9a28> : <type 'instance'>
avl_REF0 = set([9, 12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([9, 18, 12, 5]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 23
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x1037f9a28> : <type 'instance'>
avl_REF0 = set([9, 18, 12, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int0)                                                       # STEP 24
ACTION: avl0.insert(int0) 
int0 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1037f9a28> : <type 'instance'>
avl_REF0 = set([9, 18, 12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
result = avl0.inorder()                                                 # STEP 25
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x1037f9a28> : <type 'instance'>
avl_REF0 = set([9, 18, 12, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.delete(int2)                                                       # STEP 26
ACTION: avl0.delete(int2) 
int2 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1037f9a28> : <type 'instance'>
avl_REF0 = set([9, 18, 12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
result = avl0.inorder()                                                 # STEP 27
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x1037f9a28> : <type 'instance'>
avl_REF0 = set([9, 18, 12, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
result = avl0.inorder()                                                 # STEP 28
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x1037f9a28> : <type 'instance'>
avl_REF0 = set([9, 18, 12, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int2)                                                       # STEP 29
ACTION: avl0.insert(int2) 
int2 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1037f9a28> : <type 'instance'>
avl_REF0 = set([9, 18, 12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([9, 18, 12, 5, 4]) : <type 'set'>
==================================================
int0 = 4                                                                # STEP 30
ACTION: int0 = 4 
int0 = 9 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 31
ACTION: avl0.insert(int0) 
int0 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1037f9a28> : <type 'instance'>
avl_REF0 = set([9, 18, 12, 5, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
int0 = 1                                                                # STEP 32
ACTION: int0 = 1 
int0 = 4 : <type 'int'>
=> int0 = 1 : <type 'int'>
==================================================
int3 = 18                                                               # STEP 33
ACTION: int3 = 18 
int3 = 18 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 34
ACTION: avl0.insert(int0) 
int0 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1037f9a28> : <type 'instance'>
avl_REF0 = set([9, 18, 12, 5, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([1, 4, 5, 9, 12, 18]) : <type 'set'>
==================================================
avl0.display()                                                          # STEP 35
ACTION: avl0.display() 
avl0 = <avlbug2.AVLTree instance at 0x1037f9a28> : <type 'instance'>
avl_REF0 = set([1, 4, 5, 9, 12, 18]) : <type 'set'>
  9 [2:0]
-- < 4 [1:0]
---- < 1 [0:0] L
---- > 5 [0:0] L
-- > 12 [1:-1]
---- > 18 [0:0] L
REFERENCE ACTION: print(avl_REF0) 
set([1, 4, 5, 9, 12, 18])
==================================================
avl0.display()                                                          # STEP 36
ACTION: avl0.display() 
avl0 = <avlbug2.AVLTree instance at 0x1037f9a28> : <type 'instance'>
avl_REF0 = set([1, 4, 5, 9, 12, 18]) : <type 'set'>
  9 [2:0]
-- < 4 [1:0]
---- < 1 [0:0] L
---- > 5 [0:0] L
-- > 12 [1:-1]
---- > 18 [0:0] L
REFERENCE ACTION: print(avl_REF0) 
set([1, 4, 5, 9, 12, 18])
==================================================
int2 = 13                                                               # STEP 37
ACTION: int2 = 13 
int2 = 4 : <type 'int'>
=> int2 = 13 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 38
ACTION: avl0.delete(int3) 
int3 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1037f9a28> : <type 'instance'>
avl_REF0 = set([1, 4, 5, 9, 12, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([1, 4, 5, 9, 12]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 39
ACTION: avl0.insert(int3) 
int3 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1037f9a28> : <type 'instance'>
avl_REF0 = set([1, 4, 5, 9, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([1, 4, 5, 9, 12, 18]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 40
ACTION: avl0.delete(int0) 
int0 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1037f9a28> : <type 'instance'>
avl_REF0 = set([1, 4, 5, 9, 12, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([4, 5, 9, 12, 18]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 41
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x1037f9a28> : <type 'instance'>
avl_REF0 = set([4, 5, 9, 12, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.delete(int3)                                                       # STEP 42
ACTION: avl0.delete(int3) 
int3 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1037f9a28> : <type 'instance'>
avl_REF0 = set([4, 5, 9, 12, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([4, 5, 9, 12]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 43
ACTION: avl0.delete(int2) 
int2 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1037f9a28> : <type 'instance'>
avl_REF0 = set([4, 5, 9, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.delete(int0)                                                       # STEP 44
ACTION: avl0.delete(int0) 
int0 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1037f9a28> : <type 'instance'>
avl_REF0 = set([4, 5, 9, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
result = avl0.inorder()                                                 # STEP 45
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x1037f9a28> : <type 'instance'>
avl_REF0 = set([4, 5, 9, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.delete(int1)                                                       # STEP 46
ACTION: avl0.delete(int1) 
int1 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1037f9a28> : <type 'instance'>
avl_REF0 = set([4, 5, 9, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.delete(int2)                                                       # STEP 47
ACTION: avl0.delete(int2) 
int2 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1037f9a28> : <type 'instance'>
avl_REF0 = set([4, 5, 9, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.insert(int2)                                                       # STEP 48
ACTION: avl0.insert(int2) 
int2 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1037f9a28> : <type 'instance'>
avl_REF0 = set([4, 5, 9, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([4, 5, 9, 12, 13]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 49
ACTION: avl0.delete(int0) 
int0 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1037f9a28> : <type 'instance'>
avl_REF0 = set([4, 5, 9, 12, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int3 = 13                                                               # STEP 50
ACTION: int3 = 13 
int3 = 18 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 51
ACTION: avl0.insert(int0) 
int0 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1037f9a28> : <type 'instance'>
avl_REF0 = set([4, 5, 9, 12, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([1, 4, 5, 9, 12, 13]) : <type 'set'>
==================================================
avl0.display()                                                          # STEP 52
ACTION: avl0.display() 
avl0 = <avlbug2.AVLTree instance at 0x1037f9a28> : <type 'instance'>
avl_REF0 = set([1, 4, 5, 9, 12, 13]) : <type 'set'>
  9 [2:0]
-- < 4 [1:0]
---- < 1 [0:0] L
---- > 5 [0:0] L
-- > 12 [1:-1]
---- > 13 [0:0] L
REFERENCE ACTION: print(avl_REF0) 
set([1, 4, 5, 9, 12, 13])
==================================================
result = avl0.inorder()                                                 # STEP 53
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x1037f9a28> : <type 'instance'>
avl_REF0 = set([1, 4, 5, 9, 12, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int1)                                                       # STEP 54
ACTION: avl0.insert(int1) 
int1 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1037f9a28> : <type 'instance'>
avl_REF0 = set([1, 4, 5, 9, 12, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl0.insert(int0)                                                       # STEP 55
ACTION: avl0.insert(int0) 
int0 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1037f9a28> : <type 'instance'>
avl_REF0 = set([1, 4, 5, 9, 12, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
avl0.insert(int3)                                                       # STEP 56
ACTION: avl0.insert(int3) 
int3 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1037f9a28> : <type 'instance'>
avl_REF0 = set([1, 4, 5, 9, 12, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
result = avl0.inorder()                                                 # STEP 57
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x1037f9a28> : <type 'instance'>
avl_REF0 = set([1, 4, 5, 9, 12, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.delete(int3)                                                       # STEP 58
ACTION: avl0.delete(int3) 
int3 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1037f9a28> : <type 'instance'>
avl_REF0 = set([1, 4, 5, 9, 12, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([1, 4, 5, 9, 12]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 59
ACTION: avl0.insert(int3) 
int3 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1037f9a28> : <type 'instance'>
avl_REF0 = set([1, 4, 5, 9, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([1, 4, 5, 9, 12, 13]) : <type 'set'>
==================================================
avl0.display()                                                          # STEP 60
ACTION: avl0.display() 
avl0 = <avlbug2.AVLTree instance at 0x1037f9a28> : <type 'instance'>
avl_REF0 = set([1, 4, 5, 9, 12, 13]) : <type 'set'>
  9 [2:0]
-- < 4 [1:0]
---- < 1 [0:0] L
---- > 5 [0:0] L
-- > 12 [1:-1]
---- > 13 [0:0] L
REFERENCE ACTION: print(avl_REF0) 
set([1, 4, 5, 9, 12, 13])
==================================================
result = avl0.inorder()                                                 # STEP 61
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x1037f9a28> : <type 'instance'>
avl_REF0 = set([1, 4, 5, 9, 12, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int1)                                                       # STEP 62
ACTION: avl0.insert(int1) 
int1 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1037f9a28> : <type 'instance'>
avl_REF0 = set([1, 4, 5, 9, 12, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl0.display()                                                          # STEP 63
ACTION: avl0.display() 
avl0 = <avlbug2.AVLTree instance at 0x1037f9a28> : <type 'instance'>
avl_REF0 = set([1, 4, 5, 9, 12, 13]) : <type 'set'>
  9 [2:0]
-- < 4 [1:0]
---- < 1 [0:0] L
---- > 5 [0:0] L
-- > 12 [1:-1]
---- > 13 [0:0] L
REFERENCE ACTION: print(avl_REF0) 
set([1, 4, 5, 9, 12, 13])
==================================================
avl0.insert(int3)                                                       # STEP 64
ACTION: avl0.insert(int3) 
int3 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1037f9a28> : <type 'instance'>
avl_REF0 = set([1, 4, 5, 9, 12, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
avl0.insert(int0)                                                       # STEP 65
ACTION: avl0.insert(int0) 
int0 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1037f9a28> : <type 'instance'>
avl_REF0 = set([1, 4, 5, 9, 12, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
avl0.insert(int1)                                                       # STEP 66
ACTION: avl0.insert(int1) 
int1 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1037f9a28> : <type 'instance'>
avl_REF0 = set([1, 4, 5, 9, 12, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl0.delete(int2)                                                       # STEP 67
ACTION: avl0.delete(int2) 
int2 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1037f9a28> : <type 'instance'>
avl_REF0 = set([1, 4, 5, 9, 12, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([1, 4, 5, 9, 12]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 68
ACTION: avl0.insert(int3) 
int3 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1037f9a28> : <type 'instance'>
avl_REF0 = set([1, 4, 5, 9, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([1, 4, 5, 9, 12, 13]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 69
ACTION: avl0.insert(int0) 
int0 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1037f9a28> : <type 'instance'>
avl_REF0 = set([1, 4, 5, 9, 12, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
avl0.display()                                                          # STEP 70
ACTION: avl0.display() 
avl0 = <avlbug2.AVLTree instance at 0x1037f9a28> : <type 'instance'>
avl_REF0 = set([1, 4, 5, 9, 12, 13]) : <type 'set'>
  9 [2:0]
-- < 4 [1:0]
---- < 1 [0:0] L
---- > 5 [0:0] L
-- > 12 [1:-1]
---- > 13 [0:0] L
REFERENCE ACTION: print(avl_REF0) 
set([1, 4, 5, 9, 12, 13])
==================================================
int1 = 12                                                               # STEP 71
ACTION: int1 = 12 
int1 = 1 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 72
ACTION: avl0.delete(int3) 
int3 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1037f9a28> : <type 'instance'>
avl_REF0 = set([1, 4, 5, 9, 12, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([1, 4, 5, 9, 12]) : <type 'set'>
==================================================
int2 = 10                                                               # STEP 73
ACTION: int2 = 10 
int2 = 13 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 74
ACTION: avl0.delete(int1) 
int1 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1037f9a28> : <type 'instance'>
avl_REF0 = set([1, 4, 5, 9, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([1, 4, 5, 9]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103698368>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 68
STOPPING TESTING DUE TO TIMEOUT
8.86651510231 PERCENT COVERED
60.1834139824 TOTAL RUNTIME
7 EXECUTED
570 TOTAL TEST OPERATIONS
25.3862409592 TIME SPENT EXECUTING TEST OPERATIONS
0.0687420368195 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
25.4667758942 TIME SPENT CHECKING PROPERTIES
50.8530168533 TOTAL TIME SPENT RUNNING SUT
0.00391817092896 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
2 FAILED
0 REPEATS OF FAILURES
2 ACTUAL DISTINCT FAILURES

FAILURE 0
int3 = 15                                                                # STEP 0
int0 = 17                                                                # STEP 1
int2 = 8                                                                 # STEP 2
avl1 = avl.AVLTree()                                                     # STEP 3
int1 = 1                                                                 # STEP 4
avl1.insert(int0)                                                        # STEP 5
avl1.delete(int2)                                                        # STEP 6
int2 = 10                                                                # STEP 7
avl1 == avl1                                                             # STEP 8
avl1.delete(int0)                                                        # STEP 9
avl1.delete(int1)                                                       # STEP 10
avl1.insert(int3)                                                       # STEP 11
avl1.delete(int1)                                                       # STEP 12
avl1.delete(int1)                                                       # STEP 13
avl1.delete(int0)                                                       # STEP 14
avl1.delete(int0)                                                       # STEP 15
avl1.delete(int2)                                                       # STEP 16
avl1.insert(int2)                                                       # STEP 17
avl1.insert(int2)                                                       # STEP 18
avl1.delete(int2)                                                       # STEP 19
avl1.insert(int0)                                                       # STEP 20
avl1.insert(int0)                                                       # STEP 21
avl1.insert(int2)                                                       # STEP 22
avl1.insert(int1)                                                       # STEP 23
int1 = 15                                                               # STEP 24
avl1.insert(int1)                                                       # STEP 25
avl1.delete(int3)                                                       # STEP 26
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1036bf098>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE 1
int2 = 4                                                                 # STEP 0
int1 = 5                                                                 # STEP 1
int0 = 4                                                                 # STEP 2
int3 = 17                                                                # STEP 3
avl0 = avl.AVLTree()                                                     # STEP 4
result = avl0.inorder()                                                  # STEP 5
avl0.insert(int1)                                                        # STEP 6
avl0.delete(int3)                                                        # STEP 7
result = avl0.inorder()                                                  # STEP 8
avl0.delete(int3)                                                        # STEP 9
int3 = 12                                                               # STEP 10
result = avl0.inorder()                                                 # STEP 11
result = avl0.inorder()                                                 # STEP 12
int1 = 1                                                                # STEP 13
result = avl0.inorder()                                                 # STEP 14
avl0.insert(int3)                                                       # STEP 15
int3 = 18                                                               # STEP 16
avl0.delete(int2)                                                       # STEP 17
avl0.delete(int0)                                                       # STEP 18
int0 = 9                                                                # STEP 19
result = avl0.inorder()                                                 # STEP 20
avl0.insert(int0)                                                       # STEP 21
avl0.insert(int3)                                                       # STEP 22
result = avl0.inorder()                                                 # STEP 23
avl0.insert(int0)                                                       # STEP 24
result = avl0.inorder()                                                 # STEP 25
avl0.delete(int2)                                                       # STEP 26
result = avl0.inorder()                                                 # STEP 27
result = avl0.inorder()                                                 # STEP 28
avl0.insert(int2)                                                       # STEP 29
int0 = 4                                                                # STEP 30
avl0.insert(int0)                                                       # STEP 31
int0 = 1                                                                # STEP 32
int3 = 18                                                               # STEP 33
avl0.insert(int0)                                                       # STEP 34
avl0.display()                                                          # STEP 35
avl0.display()                                                          # STEP 36
int2 = 13                                                               # STEP 37
avl0.delete(int3)                                                       # STEP 38
avl0.insert(int3)                                                       # STEP 39
avl0.delete(int0)                                                       # STEP 40
result = avl0.inorder()                                                 # STEP 41
avl0.delete(int3)                                                       # STEP 42
avl0.delete(int2)                                                       # STEP 43
avl0.delete(int0)                                                       # STEP 44
result = avl0.inorder()                                                 # STEP 45
avl0.delete(int1)                                                       # STEP 46
avl0.delete(int2)                                                       # STEP 47
avl0.insert(int2)                                                       # STEP 48
avl0.delete(int0)                                                       # STEP 49
int3 = 13                                                               # STEP 50
avl0.insert(int0)                                                       # STEP 51
avl0.display()                                                          # STEP 52
result = avl0.inorder()                                                 # STEP 53
avl0.insert(int1)                                                       # STEP 54
avl0.insert(int0)                                                       # STEP 55
avl0.insert(int3)                                                       # STEP 56
result = avl0.inorder()                                                 # STEP 57
avl0.delete(int3)                                                       # STEP 58
avl0.insert(int3)                                                       # STEP 59
avl0.display()                                                          # STEP 60
result = avl0.inorder()                                                 # STEP 61
avl0.insert(int1)                                                       # STEP 62
avl0.display()                                                          # STEP 63
avl0.insert(int3)                                                       # STEP 64
avl0.insert(int0)                                                       # STEP 65
avl0.insert(int1)                                                       # STEP 66
avl0.delete(int2)                                                       # STEP 67
avl0.insert(int3)                                                       # STEP 68
avl0.insert(int0)                                                       # STEP 69
avl0.display()                                                          # STEP 70
int1 = 12                                                               # STEP 71
avl0.delete(int3)                                                       # STEP 72
int2 = 10                                                               # STEP 73
avl0.delete(int1)                                                       # STEP 74
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103698368>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
216 BRANCHES COVERED
162 STATEMENTS COVERED

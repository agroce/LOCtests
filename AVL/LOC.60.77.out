Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.724.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  11 [2:0]
-- < 5 [1:1]
---- < 3 [0:0] L
-- > 16 [1:0]
---- < 13 [0:0] L
---- > 19 [0:0] L
set([3, 5, 11, 13, 16, 19])
  5 [2:0]
-- < 3 [1:-1]
---- > 4 [0:0] L
-- > 14 [1:0]
---- < 13 [0:0] L
---- > 19 [0:0] L
set([19, 3, 4, 5, 13, 14])
  5 [2:0]
-- < 3 [1:-1]
---- > 4 [0:0] L
-- > 13 [1:0]
---- < 10 [0:0] L
---- > 19 [0:0] L
set([19, 3, 4, 5, 10, 13])
  5 [3:-1]
-- < 3 [1:-1]
---- > 4 [0:0] L
-- > 13 [2:-1]
---- < 10 [0:0] L
---- > 19 [1:1]
------ < 18 [0:0] L
set([19, 18, 3, 4, 5, 10, 13])
  5 [3:-1]
-- < 3 [1:-1]
---- > 4 [0:0] L
-- > 13 [2:-1]
---- < 10 [0:0] L
---- > 17 [1:0]
------ < 15 [0:0] L
------ > 19 [0:0] L
set([19, 17, 3, 4, 5, 10, 13, 15])
  5 [3:-1]
-- < 3 [1:-1]
---- > 4 [0:0] L
-- > 13 [2:-1]
---- < 10 [0:0] L
---- > 19 [1:1]
------ < 15 [0:0] L
set([19, 3, 4, 5, 10, 13, 15])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104abdc20>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
Original test has 84 steps

SAVING TEST AS failure.724.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 11                                                                # STEP 0
ACTION: int1 = 11 
int1 = None : <type 'NoneType'>
=> int1 = 11 : <type 'int'>
==================================================
int0 = 14                                                                # STEP 1
ACTION: int0 = 14 
int0 = None : <type 'NoneType'>
=> int0 = 14 : <type 'int'>
==================================================
int3 = 13                                                                # STEP 2
ACTION: int3 = 13 
int3 = None : <type 'NoneType'>
=> int3 = 13 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 3
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x104e88248> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.delete(int3)                                                        # STEP 4
ACTION: avl0.delete(int3) 
int3 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e88248> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.delete(int0)                                                        # STEP 5
ACTION: avl0.delete(int0) 
int0 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e88248> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.delete(int1)                                                        # STEP 6
ACTION: avl0.delete(int1) 
int1 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e88248> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.insert(int0)                                                        # STEP 7
ACTION: avl0.insert(int0) 
int0 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e88248> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([14]) : <type 'set'>
==================================================
avl0.delete(int3)                                                        # STEP 8
ACTION: avl0.delete(int3) 
int3 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e88248> : <type 'instance'>
avl_REF0 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0 == avl0                                                             # STEP 9
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x104e88248> : <type 'instance'>
avl_REF0 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl0.insert(int3)                                                       # STEP 10
ACTION: avl0.insert(int3) 
int3 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e88248> : <type 'instance'>
avl_REF0 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([13, 14]) : <type 'set'>
==================================================
int2 = 20                                                               # STEP 11
ACTION: int2 = 20 
int2 = None : <type 'NoneType'>
=> int2 = 20 : <type 'int'>
==================================================
result = avl0.find(int1)                                                # STEP 12
ACTION: result = avl0.find(int1) 
int1 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e88248> : <type 'instance'>
avl_REF0 = set([13, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
int3 = 5                                                                # STEP 13
ACTION: int3 = 5 
int3 = 13 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 14
ACTION: avl0.delete(int2) 
int2 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e88248> : <type 'instance'>
avl_REF0 = set([13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.delete(int0)                                                       # STEP 15
ACTION: avl0.delete(int0) 
int0 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e88248> : <type 'instance'>
avl_REF0 = set([13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([13]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 16
ACTION: avl0.insert(int0) 
int0 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e88248> : <type 'instance'>
avl_REF0 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([13, 14]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 17
ACTION: avl0.insert(int0) 
int0 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e88248> : <type 'instance'>
avl_REF0 = set([13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
int1 = 17                                                               # STEP 18
ACTION: int1 = 17 
int1 = 11 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
int2 = 19                                                               # STEP 19
ACTION: int2 = 19 
int2 = 20 : <type 'int'>
=> int2 = 19 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 20
ACTION: avl0.insert(int3) 
int3 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e88248> : <type 'instance'>
avl_REF0 = set([13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([13, 14, 5]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 21
ACTION: avl0.delete(int1) 
int1 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e88248> : <type 'instance'>
avl_REF0 = set([13, 14, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.insert(int1)                                                       # STEP 22
ACTION: avl0.insert(int1) 
int1 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e88248> : <type 'instance'>
avl_REF0 = set([13, 14, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([17, 13, 14, 5]) : <type 'set'>
==================================================
int3 = 1                                                                # STEP 23
ACTION: int3 = 1 
int3 = 5 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 24
ACTION: avl0.insert(int3) 
int3 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e88248> : <type 'instance'>
avl_REF0 = set([17, 13, 14, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([17, 1, 13, 14, 5]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 25
ACTION: avl0.delete(int1) 
int1 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e88248> : <type 'instance'>
avl_REF0 = set([17, 1, 13, 14, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([1, 13, 14, 5]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 26
ACTION: avl0.delete(int3) 
int3 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e88248> : <type 'instance'>
avl_REF0 = set([1, 13, 14, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([13, 14, 5]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 27
ACTION: avl0.delete(int0) 
int0 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e88248> : <type 'instance'>
avl_REF0 = set([13, 14, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([13, 5]) : <type 'set'>
==================================================
int3 = 17                                                               # STEP 28
ACTION: int3 = 17 
int3 = 1 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
int0 = 12                                                               # STEP 29
ACTION: int0 = 12 
int0 = 14 : <type 'int'>
=> int0 = 12 : <type 'int'>
==================================================
int1 = 3                                                                # STEP 30
ACTION: int1 = 3 
int1 = 17 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 31
ACTION: avl0.insert(int1) 
int1 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e88248> : <type 'instance'>
avl_REF0 = set([13, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([3, 5, 13]) : <type 'set'>
==================================================
int1 = 17                                                               # STEP 32
ACTION: int1 = 17 
int1 = 3 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 33
ACTION: avl0.insert(int3) 
int3 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e88248> : <type 'instance'>
avl_REF0 = set([3, 5, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([17, 3, 5, 13]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 34
ACTION: avl0.delete(int1) 
int1 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e88248> : <type 'instance'>
avl_REF0 = set([17, 3, 5, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([3, 5, 13]) : <type 'set'>
==================================================
int1 = 14                                                               # STEP 35
ACTION: int1 = 14 
int1 = 17 : <type 'int'>
=> int1 = 14 : <type 'int'>
==================================================
result = avl0.find(int0)                                                # STEP 36
ACTION: result = avl0.find(int0) 
int0 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e88248> : <type 'instance'>
avl_REF0 = set([3, 5, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
int0 = 14                                                               # STEP 37
ACTION: int0 = 14 
int0 = 12 : <type 'int'>
=> int0 = 14 : <type 'int'>
==================================================
int3 = 4                                                                # STEP 38
ACTION: int3 = 4 
int3 = 17 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
avl0 == avl0                                                            # STEP 39
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x104e88248> : <type 'instance'>
avl_REF0 = set([3, 5, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl0.insert(int1)                                                       # STEP 40
ACTION: avl0.insert(int1) 
int1 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e88248> : <type 'instance'>
avl_REF0 = set([3, 5, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([3, 5, 13, 14]) : <type 'set'>
==================================================
int1 = 12                                                               # STEP 41
ACTION: int1 = 12 
int1 = 14 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 42
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104e88248> : <type 'instance'>
avl_REF0 = set([3, 5, 13, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int3)                                                       # STEP 43
ACTION: avl0.insert(int3) 
int3 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e88248> : <type 'instance'>
avl_REF0 = set([3, 5, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([3, 4, 5, 13, 14]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 44
ACTION: avl0.delete(int2) 
int2 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e88248> : <type 'instance'>
avl_REF0 = set([3, 4, 5, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.insert(int2)                                                       # STEP 45
ACTION: avl0.insert(int2) 
int2 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e88248> : <type 'instance'>
avl_REF0 = set([3, 4, 5, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([19, 3, 4, 5, 13, 14]) : <type 'set'>
==================================================
avl0.display()                                                          # STEP 46
ACTION: avl0.display() 
avl0 = <avl.AVLTree instance at 0x104e88248> : <type 'instance'>
avl_REF0 = set([19, 3, 4, 5, 13, 14]) : <type 'set'>
  5 [2:0]
-- < 3 [1:-1]
---- > 4 [0:0] L
-- > 14 [1:0]
---- < 13 [0:0] L
---- > 19 [0:0] L
REFERENCE ACTION: print(avl_REF0) 
set([19, 3, 4, 5, 13, 14])
==================================================
avl0.delete(int0)                                                       # STEP 47
ACTION: avl0.delete(int0) 
int0 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e88248> : <type 'instance'>
avl_REF0 = set([19, 3, 4, 5, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([19, 3, 4, 5, 13]) : <type 'set'>
==================================================
int0 = 18                                                               # STEP 48
ACTION: int0 = 18 
int0 = 14 : <type 'int'>
=> int0 = 18 : <type 'int'>
==================================================
int2 = 10                                                               # STEP 49
ACTION: int2 = 10 
int2 = 19 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 50
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104e88248> : <type 'instance'>
avl_REF0 = set([19, 3, 4, 5, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int3 = 18                                                               # STEP 51
ACTION: int3 = 18 
int3 = 4 : <type 'int'>
=> int3 = 18 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 52
ACTION: avl0.delete(int1) 
int1 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e88248> : <type 'instance'>
avl_REF0 = set([19, 3, 4, 5, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int1 = 4                                                                # STEP 53
ACTION: int1 = 4 
int1 = 12 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 54
ACTION: avl0.insert(int2) 
int2 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e88248> : <type 'instance'>
avl_REF0 = set([19, 3, 4, 5, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([19, 3, 4, 5, 10, 13]) : <type 'set'>
==================================================
avl0.display()                                                          # STEP 55
ACTION: avl0.display() 
avl0 = <avl.AVLTree instance at 0x104e88248> : <type 'instance'>
avl_REF0 = set([19, 3, 4, 5, 10, 13]) : <type 'set'>
  5 [2:0]
-- < 3 [1:-1]
---- > 4 [0:0] L
-- > 13 [1:0]
---- < 10 [0:0] L
---- > 19 [0:0] L
REFERENCE ACTION: print(avl_REF0) 
set([19, 3, 4, 5, 10, 13])
==================================================
int2 = 17                                                               # STEP 56
ACTION: int2 = 17 
int2 = 10 : <type 'int'>
=> int2 = 17 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 57
ACTION: avl0.insert(int0) 
int0 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e88248> : <type 'instance'>
avl_REF0 = set([19, 3, 4, 5, 10, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([19, 18, 3, 4, 5, 10, 13]) : <type 'set'>
==================================================
int0 = 18                                                               # STEP 58
ACTION: int0 = 18 
int0 = 18 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 59
ACTION: avl0.insert(int3) 
int3 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e88248> : <type 'instance'>
avl_REF0 = set([19, 18, 3, 4, 5, 10, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
int3 = 15                                                               # STEP 60
ACTION: int3 = 15 
int3 = 18 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
avl0.display()                                                          # STEP 61
ACTION: avl0.display() 
avl0 = <avl.AVLTree instance at 0x104e88248> : <type 'instance'>
avl_REF0 = set([19, 18, 3, 4, 5, 10, 13]) : <type 'set'>
  5 [3:-1]
-- < 3 [1:-1]
---- > 4 [0:0] L
-- > 13 [2:-1]
---- < 10 [0:0] L
---- > 19 [1:1]
------ < 18 [0:0] L
REFERENCE ACTION: print(avl_REF0) 
set([19, 18, 3, 4, 5, 10, 13])
==================================================
avl0.insert(int3)                                                       # STEP 62
ACTION: avl0.insert(int3) 
int3 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e88248> : <type 'instance'>
avl_REF0 = set([19, 18, 3, 4, 5, 10, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([19, 18, 3, 4, 5, 10, 13, 15]) : <type 'set'>
==================================================
int3 = 3                                                                # STEP 63
ACTION: int3 = 3 
int3 = 15 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 64
ACTION: avl0.insert(int1) 
int1 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e88248> : <type 'instance'>
avl_REF0 = set([19, 18, 3, 4, 5, 10, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl0.insert(int3)                                                       # STEP 65
ACTION: avl0.insert(int3) 
int3 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e88248> : <type 'instance'>
avl_REF0 = set([19, 18, 3, 4, 5, 10, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
avl0.delete(int0)                                                       # STEP 66
ACTION: avl0.delete(int0) 
int0 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e88248> : <type 'instance'>
avl_REF0 = set([19, 18, 3, 4, 5, 10, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([19, 3, 4, 5, 10, 13, 15]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 67
ACTION: avl0.delete(int0) 
int0 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e88248> : <type 'instance'>
avl_REF0 = set([19, 3, 4, 5, 10, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int3 = 13                                                               # STEP 68
ACTION: int3 = 13 
int3 = 3 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 69
ACTION: avl0.insert(int1) 
int1 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e88248> : <type 'instance'>
avl_REF0 = set([19, 3, 4, 5, 10, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
result = avl0.find(int3)                                                # STEP 70
ACTION: result = avl0.find(int3) 
int3 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e88248> : <type 'instance'>
avl_REF0 = set([19, 3, 4, 5, 10, 13, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
result = avl0.find(int0)                                                # STEP 71
ACTION: result = avl0.find(int0) 
int0 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e88248> : <type 'instance'>
avl_REF0 = set([19, 3, 4, 5, 10, 13, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
avl0.insert(int2)                                                       # STEP 72
ACTION: avl0.insert(int2) 
int2 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e88248> : <type 'instance'>
avl_REF0 = set([19, 3, 4, 5, 10, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([19, 17, 3, 4, 5, 10, 13, 15]) : <type 'set'>
==================================================
int2 = 17                                                               # STEP 73
ACTION: int2 = 17 
int2 = 17 : <type 'int'>
==================================================
int1 = 5                                                                # STEP 74
ACTION: int1 = 5 
int1 = 4 : <type 'int'>
=> int1 = 5 : <type 'int'>
==================================================
avl0.display()                                                          # STEP 75
ACTION: avl0.display() 
avl0 = <avl.AVLTree instance at 0x104e88248> : <type 'instance'>
avl_REF0 = set([19, 17, 3, 4, 5, 10, 13, 15]) : <type 'set'>
  5 [3:-1]
-- < 3 [1:-1]
---- > 4 [0:0] L
-- > 13 [2:-1]
---- < 10 [0:0] L
---- > 17 [1:0]
------ < 15 [0:0] L
------ > 19 [0:0] L
REFERENCE ACTION: print(avl_REF0) 
set([19, 17, 3, 4, 5, 10, 13, 15])
==================================================
avl0.insert(int1)                                                       # STEP 76
ACTION: avl0.insert(int1) 
int1 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e88248> : <type 'instance'>
avl_REF0 = set([19, 17, 3, 4, 5, 10, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl0.delete(int2)                                                       # STEP 77
ACTION: avl0.delete(int2) 
int2 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e88248> : <type 'instance'>
avl_REF0 = set([19, 17, 3, 4, 5, 10, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([19, 3, 4, 5, 10, 13, 15]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 78
ACTION: avl0.insert(int3) 
int3 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e88248> : <type 'instance'>
avl_REF0 = set([19, 3, 4, 5, 10, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
avl0.display()                                                          # STEP 79
ACTION: avl0.display() 
avl0 = <avl.AVLTree instance at 0x104e88248> : <type 'instance'>
avl_REF0 = set([19, 3, 4, 5, 10, 13, 15]) : <type 'set'>
  5 [3:-1]
-- < 3 [1:-1]
---- > 4 [0:0] L
-- > 13 [2:-1]
---- < 10 [0:0] L
---- > 19 [1:1]
------ < 15 [0:0] L
REFERENCE ACTION: print(avl_REF0) 
set([19, 3, 4, 5, 10, 13, 15])
==================================================
avl0.insert(int0)                                                       # STEP 80
ACTION: avl0.insert(int0) 
int0 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e88248> : <type 'instance'>
avl_REF0 = set([19, 3, 4, 5, 10, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([19, 18, 3, 4, 5, 10, 13, 15]) : <type 'set'>
==================================================
int3 = 1                                                                # STEP 81
ACTION: int3 = 1 
int3 = 13 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 82
ACTION: avl0.insert(int1) 
int1 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e88248> : <type 'instance'>
avl_REF0 = set([19, 18, 3, 4, 5, 10, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl0.delete(int1)                                                       # STEP 83
ACTION: avl0.delete(int1) 
int1 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e88248> : <type 'instance'>
avl_REF0 = set([19, 18, 3, 4, 5, 10, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([19, 18, 3, 4, 10, 13, 15]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104f477e8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
  17 [2:0]
-- < 8 [1:0]
---- < 7 [0:0] L
---- > 11 [0:0] L
-- > 20 [1:1]
---- < 18 [0:0] L
set([7, 8, 11, 17, 18, 20])
  8 [3:-1]
-- < 7 [1:1]
---- < 3 [0:0] L
-- > 17 [2:1]
---- < 11 [1:-1]
------ > 12 [0:0] L
---- > 20 [0:0] L
set([3, 7, 8, 11, 12, 17, 20])
  8 [3:-1]
-- < 7 [1:1]
---- < 3 [0:0] L
-- > 17 [2:1]
---- < 11 [1:-1]
------ > 12 [0:0] L
---- > 20 [0:0] L
set([3, 7, 8, 11, 12, 17, 20])
TEST #3 STEP #96 (0:00:30.043083) Fri Apr 28 07:06:23 2017 [ 163 stmts 218 branches ]
  12 [2:0]
-- < 4 [1:0]
---- < 1 [0:0] L
---- > 10 [0:0] L
-- > 18 [1:-1]
---- > 20 [0:0] L
set([1, 4, 10, 12, 18, 20])
  12 [2:0]
-- < 4 [1:0]
---- < 1 [0:0] L
---- > 6 [0:0] L
-- > 18 [1:0]
---- < 17 [0:0] L
---- > 20 [0:0] L
set([1, 4, 6, 12, 17, 18, 20])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104f6fe18>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 33 steps

SAVING TEST AS failure.724.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
avl1 = avl.AVLTree()                                                     # STEP 0
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x104f557a0> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int1 = 7                                                                 # STEP 1
ACTION: int1 = 7 
int1 = None : <type 'NoneType'>
=> int1 = 7 : <type 'int'>
==================================================
int0 = 13                                                                # STEP 2
ACTION: int0 = 13 
int0 = None : <type 'NoneType'>
=> int0 = 13 : <type 'int'>
==================================================
avl1.insert(int0)                                                        # STEP 3
ACTION: avl1.insert(int0) 
int0 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f557a0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([13]) : <type 'set'>
==================================================
avl1.delete(int1)                                                        # STEP 4
ACTION: avl1.delete(int1) 
int1 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f557a0> : <type 'instance'>
avl_REF1 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.delete(int1)                                                        # STEP 5
ACTION: avl1.delete(int1) 
int1 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f557a0> : <type 'instance'>
avl_REF1 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.delete(int0)                                                        # STEP 6
ACTION: avl1.delete(int0) 
int0 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f557a0> : <type 'instance'>
avl_REF1 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int2 = 17                                                                # STEP 7
ACTION: int2 = 17 
int2 = None : <type 'NoneType'>
=> int2 = 17 : <type 'int'>
==================================================
avl1.insert(int1)                                                        # STEP 8
ACTION: avl1.insert(int1) 
int1 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f557a0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([7]) : <type 'set'>
==================================================
avl1.delete(int2)                                                        # STEP 9
ACTION: avl1.delete(int2) 
int2 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f557a0> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.insert(int2)                                                       # STEP 10
ACTION: avl1.insert(int2) 
int2 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f557a0> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([17, 7]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 11
ACTION: avl1.insert(int0) 
int0 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f557a0> : <type 'instance'>
avl_REF1 = set([17, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([17, 13, 7]) : <type 'set'>
==================================================
result = avl1.find(int1)                                                # STEP 12
ACTION: result = avl1.find(int1) 
int1 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f557a0> : <type 'instance'>
avl_REF1 = set([17, 13, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
result = avl1.inorder()                                                 # STEP 13
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104f557a0> : <type 'instance'>
avl_REF1 = set([17, 13, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
result = avl1.find(int1)                                                # STEP 14
ACTION: result = avl1.find(int1) 
int1 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f557a0> : <type 'instance'>
avl_REF1 = set([17, 13, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int2 = 3                                                                # STEP 15
ACTION: int2 = 3 
int2 = 17 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 16
ACTION: avl1.insert(int1) 
int1 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f557a0> : <type 'instance'>
avl_REF1 = set([17, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl1 == avl1                                                            # STEP 17
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x104f557a0> : <type 'instance'>
avl_REF1 = set([17, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.delete(int2)                                                       # STEP 18
ACTION: avl1.delete(int2) 
int2 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f557a0> : <type 'instance'>
avl_REF1 = set([17, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.insert(int0)                                                       # STEP 19
ACTION: avl1.insert(int0) 
int0 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f557a0> : <type 'instance'>
avl_REF1 = set([17, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.delete(int0)                                                       # STEP 20
ACTION: avl1.delete(int0) 
int0 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f557a0> : <type 'instance'>
avl_REF1 = set([17, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([17, 7]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 21
ACTION: avl1.insert(int2) 
int2 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f557a0> : <type 'instance'>
avl_REF1 = set([17, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([17, 3, 7]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 22
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104f557a0> : <type 'instance'>
avl_REF1 = set([17, 3, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
result = avl1.inorder()                                                 # STEP 23
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104f557a0> : <type 'instance'>
avl_REF1 = set([17, 3, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int1)                                                       # STEP 24
ACTION: avl1.insert(int1) 
int1 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f557a0> : <type 'instance'>
avl_REF1 = set([17, 3, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl1.insert(int1)                                                       # STEP 25
ACTION: avl1.insert(int1) 
int1 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f557a0> : <type 'instance'>
avl_REF1 = set([17, 3, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
result = avl1.find(int2)                                                # STEP 26
ACTION: result = avl1.find(int2) 
int2 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f557a0> : <type 'instance'>
avl_REF1 = set([17, 3, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl1.insert(int0)                                                       # STEP 27
ACTION: avl1.insert(int0) 
int0 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f557a0> : <type 'instance'>
avl_REF1 = set([17, 3, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([17, 3, 13, 7]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 28
ACTION: avl1.insert(int2) 
int2 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f557a0> : <type 'instance'>
avl_REF1 = set([17, 3, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
int3 = 8                                                                # STEP 29
ACTION: int3 = 8 
int3 = None : <type 'NoneType'>
=> int3 = 8 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 30
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x104f557a0> : <type 'instance'>
avl_REF1 = set([17, 3, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1 == avl1                                                            # STEP 31
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x104f557a0> : <type 'instance'>
avl_REF1 = set([17, 3, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.delete(int2)                                                       # STEP 32
ACTION: avl1.delete(int2) 
int2 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f557a0> : <type 'instance'>
avl_REF1 = set([17, 3, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([17, 13, 7]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104f77488>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104f57368>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 44 steps

SAVING TEST AS failure.724.test.2
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 20                                                                # STEP 0
ACTION: int2 = 20 
int2 = None : <type 'NoneType'>
=> int2 = 20 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 1
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x104f71b48> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.delete(int2)                                                        # STEP 2
ACTION: avl2.delete(int2) 
int2 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f71b48> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int2 = 4                                                                 # STEP 3
ACTION: int2 = 4 
int2 = 20 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
avl2.delete(int2)                                                        # STEP 4
ACTION: avl2.delete(int2) 
int2 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f71b48> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2 == avl2                                                             # STEP 5
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x104f71b48> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl2.delete(int2)                                                        # STEP 6
ACTION: avl2.delete(int2) 
int2 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f71b48> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
result = avl2.inorder()                                                  # STEP 7
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104f71b48> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int2)                                                        # STEP 8
ACTION: avl2.delete(int2) 
int2 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f71b48> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int1 = 16                                                                # STEP 9
ACTION: int1 = 16 
int1 = None : <type 'NoneType'>
=> int1 = 16 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 10
ACTION: avl2.delete(int1) 
int1 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f71b48> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.delete(int2)                                                       # STEP 11
ACTION: avl2.delete(int2) 
int2 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f71b48> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
result = avl2.inorder()                                                 # STEP 12
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104f71b48> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int1)                                                       # STEP 13
ACTION: avl2.insert(int1) 
int1 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f71b48> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([16]) : <type 'set'>
==================================================
int3 = 6                                                                # STEP 14
ACTION: int3 = 6 
int3 = None : <type 'NoneType'>
=> int3 = 6 : <type 'int'>
==================================================
int2 = 14                                                               # STEP 15
ACTION: int2 = 14 
int2 = 4 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 16
ACTION: avl2.insert(int2) 
int2 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f71b48> : <type 'instance'>
avl_REF2 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([16, 14]) : <type 'set'>
==================================================
int0 = 12                                                               # STEP 17
ACTION: int0 = 12 
int0 = None : <type 'NoneType'>
=> int0 = 12 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 18
ACTION: avl2.insert(int0) 
int0 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f71b48> : <type 'instance'>
avl_REF2 = set([16, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([16, 12, 14]) : <type 'set'>
==================================================
int0 = 13                                                               # STEP 19
ACTION: int0 = 13 
int0 = 12 : <type 'int'>
=> int0 = 13 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 20
ACTION: avl2.delete(int1) 
int1 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f71b48> : <type 'instance'>
avl_REF2 = set([16, 12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([12, 14]) : <type 'set'>
==================================================
result = avl2.find(int2)                                                # STEP 21
ACTION: result = avl2.find(int2) 
int2 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f71b48> : <type 'instance'>
avl_REF2 = set([12, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl2.delete(int1)                                                       # STEP 22
ACTION: avl2.delete(int1) 
int1 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f71b48> : <type 'instance'>
avl_REF2 = set([12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.delete(int1)                                                       # STEP 23
ACTION: avl2.delete(int1) 
int1 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f71b48> : <type 'instance'>
avl_REF2 = set([12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int2)                                                       # STEP 24
ACTION: avl2.insert(int2) 
int2 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f71b48> : <type 'instance'>
avl_REF2 = set([12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl2.delete(int1)                                                       # STEP 25
ACTION: avl2.delete(int1) 
int1 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f71b48> : <type 'instance'>
avl_REF2 = set([12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int0)                                                       # STEP 26
ACTION: avl2.insert(int0) 
int0 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f71b48> : <type 'instance'>
avl_REF2 = set([12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([12, 13, 14]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 27
ACTION: avl2.delete(int0) 
int0 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f71b48> : <type 'instance'>
avl_REF2 = set([12, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([12, 14]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 28
ACTION: avl2.insert(int1) 
int1 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f71b48> : <type 'instance'>
avl_REF2 = set([12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([16, 12, 14]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 29
ACTION: avl2.insert(int2) 
int2 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f71b48> : <type 'instance'>
avl_REF2 = set([16, 12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl2.delete(int3)                                                       # STEP 30
ACTION: avl2.delete(int3) 
int3 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f71b48> : <type 'instance'>
avl_REF2 = set([16, 12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.delete(int3)                                                       # STEP 31
ACTION: avl2.delete(int3) 
int3 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f71b48> : <type 'instance'>
avl_REF2 = set([16, 12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.delete(int3)                                                       # STEP 32
ACTION: avl2.delete(int3) 
int3 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f71b48> : <type 'instance'>
avl_REF2 = set([16, 12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int2 = 3                                                                # STEP 33
ACTION: int2 = 3 
int2 = 14 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 34
ACTION: avl2.insert(int2) 
int2 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f71b48> : <type 'instance'>
avl_REF2 = set([16, 12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([16, 3, 12, 14]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 35
ACTION: avl2.insert(int3) 
int3 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f71b48> : <type 'instance'>
avl_REF2 = set([16, 3, 12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([16, 3, 12, 6, 14]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 36
ACTION: avl2.delete(int0) 
int0 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f71b48> : <type 'instance'>
avl_REF2 = set([16, 3, 12, 6, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
result = avl2.find(int2)                                                # STEP 37
ACTION: result = avl2.find(int2) 
int2 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f71b48> : <type 'instance'>
avl_REF2 = set([16, 3, 12, 6, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl2.insert(int2)                                                       # STEP 38
ACTION: avl2.insert(int2) 
int2 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f71b48> : <type 'instance'>
avl_REF2 = set([16, 3, 12, 6, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl2.insert(int2)                                                       # STEP 39
ACTION: avl2.insert(int2) 
int2 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f71b48> : <type 'instance'>
avl_REF2 = set([16, 3, 12, 6, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl2.insert(int2)                                                       # STEP 40
ACTION: avl2.insert(int2) 
int2 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f71b48> : <type 'instance'>
avl_REF2 = set([16, 3, 12, 6, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
result = avl2.find(int1)                                                # STEP 41
ACTION: result = avl2.find(int1) 
int1 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f71b48> : <type 'instance'>
avl_REF2 = set([16, 3, 12, 6, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl2.insert(int3)                                                       # STEP 42
ACTION: avl2.insert(int3) 
int3 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f71b48> : <type 'instance'>
avl_REF2 = set([16, 3, 12, 6, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
avl2.delete(int1)                                                       # STEP 43
ACTION: avl2.delete(int1) 
int1 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f71b48> : <type 'instance'>
avl_REF2 = set([16, 3, 12, 6, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([3, 12, 6, 14]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104f68560>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 3 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 15
STOPPING TESTING DUE TO TIMEOUT
8.6528673227 PERCENT COVERED
60.1743071079 TOTAL RUNTIME
8 EXECUTED
576 TOTAL TEST OPERATIONS
23.3706183434 TIME SPENT EXECUTING TEST OPERATIONS
0.0612087249756 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
23.612578392 TIME SPENT CHECKING PROPERTIES
46.9831967354 TOTAL TIME SPENT RUNNING SUT
0.00437712669373 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
3 FAILED
0 REPEATS OF FAILURES
3 ACTUAL DISTINCT FAILURES

FAILURE 0
int1 = 11                                                                # STEP 0
int0 = 14                                                                # STEP 1
int3 = 13                                                                # STEP 2
avl0 = avl.AVLTree()                                                     # STEP 3
avl0.delete(int3)                                                        # STEP 4
avl0.delete(int0)                                                        # STEP 5
avl0.delete(int1)                                                        # STEP 6
avl0.insert(int0)                                                        # STEP 7
avl0.delete(int3)                                                        # STEP 8
avl0 == avl0                                                             # STEP 9
avl0.insert(int3)                                                       # STEP 10
int2 = 20                                                               # STEP 11
result = avl0.find(int1)                                                # STEP 12
int3 = 5                                                                # STEP 13
avl0.delete(int2)                                                       # STEP 14
avl0.delete(int0)                                                       # STEP 15
avl0.insert(int0)                                                       # STEP 16
avl0.insert(int0)                                                       # STEP 17
int1 = 17                                                               # STEP 18
int2 = 19                                                               # STEP 19
avl0.insert(int3)                                                       # STEP 20
avl0.delete(int1)                                                       # STEP 21
avl0.insert(int1)                                                       # STEP 22
int3 = 1                                                                # STEP 23
avl0.insert(int3)                                                       # STEP 24
avl0.delete(int1)                                                       # STEP 25
avl0.delete(int3)                                                       # STEP 26
avl0.delete(int0)                                                       # STEP 27
int3 = 17                                                               # STEP 28
int0 = 12                                                               # STEP 29
int1 = 3                                                                # STEP 30
avl0.insert(int1)                                                       # STEP 31
int1 = 17                                                               # STEP 32
avl0.insert(int3)                                                       # STEP 33
avl0.delete(int1)                                                       # STEP 34
int1 = 14                                                               # STEP 35
result = avl0.find(int0)                                                # STEP 36
int0 = 14                                                               # STEP 37
int3 = 4                                                                # STEP 38
avl0 == avl0                                                            # STEP 39
avl0.insert(int1)                                                       # STEP 40
int1 = 12                                                               # STEP 41
result = avl0.inorder()                                                 # STEP 42
avl0.insert(int3)                                                       # STEP 43
avl0.delete(int2)                                                       # STEP 44
avl0.insert(int2)                                                       # STEP 45
avl0.display()                                                          # STEP 46
avl0.delete(int0)                                                       # STEP 47
int0 = 18                                                               # STEP 48
int2 = 10                                                               # STEP 49
result = avl0.inorder()                                                 # STEP 50
int3 = 18                                                               # STEP 51
avl0.delete(int1)                                                       # STEP 52
int1 = 4                                                                # STEP 53
avl0.insert(int2)                                                       # STEP 54
avl0.display()                                                          # STEP 55
int2 = 17                                                               # STEP 56
avl0.insert(int0)                                                       # STEP 57
int0 = 18                                                               # STEP 58
avl0.insert(int3)                                                       # STEP 59
int3 = 15                                                               # STEP 60
avl0.display()                                                          # STEP 61
avl0.insert(int3)                                                       # STEP 62
int3 = 3                                                                # STEP 63
avl0.insert(int1)                                                       # STEP 64
avl0.insert(int3)                                                       # STEP 65
avl0.delete(int0)                                                       # STEP 66
avl0.delete(int0)                                                       # STEP 67
int3 = 13                                                               # STEP 68
avl0.insert(int1)                                                       # STEP 69
result = avl0.find(int3)                                                # STEP 70
result = avl0.find(int0)                                                # STEP 71
avl0.insert(int2)                                                       # STEP 72
int2 = 17                                                               # STEP 73
int1 = 5                                                                # STEP 74
avl0.display()                                                          # STEP 75
avl0.insert(int1)                                                       # STEP 76
avl0.delete(int2)                                                       # STEP 77
avl0.insert(int3)                                                       # STEP 78
avl0.display()                                                          # STEP 79
avl0.insert(int0)                                                       # STEP 80
int3 = 1                                                                # STEP 81
avl0.insert(int1)                                                       # STEP 82
avl0.delete(int1)                                                       # STEP 83
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104f477e8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE 1
avl1 = avl.AVLTree()                                                     # STEP 0
int1 = 7                                                                 # STEP 1
int0 = 13                                                                # STEP 2
avl1.insert(int0)                                                        # STEP 3
avl1.delete(int1)                                                        # STEP 4
avl1.delete(int1)                                                        # STEP 5
avl1.delete(int0)                                                        # STEP 6
int2 = 17                                                                # STEP 7
avl1.insert(int1)                                                        # STEP 8
avl1.delete(int2)                                                        # STEP 9
avl1.insert(int2)                                                       # STEP 10
avl1.insert(int0)                                                       # STEP 11
result = avl1.find(int1)                                                # STEP 12
result = avl1.inorder()                                                 # STEP 13
result = avl1.find(int1)                                                # STEP 14
int2 = 3                                                                # STEP 15
avl1.insert(int1)                                                       # STEP 16
avl1 == avl1                                                            # STEP 17
avl1.delete(int2)                                                       # STEP 18
avl1.insert(int0)                                                       # STEP 19
avl1.delete(int0)                                                       # STEP 20
avl1.insert(int2)                                                       # STEP 21
result = avl1.inorder()                                                 # STEP 22
result = avl1.inorder()                                                 # STEP 23
avl1.insert(int1)                                                       # STEP 24
avl1.insert(int1)                                                       # STEP 25
result = avl1.find(int2)                                                # STEP 26
avl1.insert(int0)                                                       # STEP 27
avl1.insert(int2)                                                       # STEP 28
int3 = 8                                                                # STEP 29
avl1 == avl1                                                            # STEP 30
avl1 == avl1                                                            # STEP 31
avl1.delete(int2)                                                       # STEP 32
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104f77488>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE 2
int2 = 20                                                                # STEP 0
avl2 = avl.AVLTree()                                                     # STEP 1
avl2.delete(int2)                                                        # STEP 2
int2 = 4                                                                 # STEP 3
avl2.delete(int2)                                                        # STEP 4
avl2 == avl2                                                             # STEP 5
avl2.delete(int2)                                                        # STEP 6
result = avl2.inorder()                                                  # STEP 7
avl2.delete(int2)                                                        # STEP 8
int1 = 16                                                                # STEP 9
avl2.delete(int1)                                                       # STEP 10
avl2.delete(int2)                                                       # STEP 11
result = avl2.inorder()                                                 # STEP 12
avl2.insert(int1)                                                       # STEP 13
int3 = 6                                                                # STEP 14
int2 = 14                                                               # STEP 15
avl2.insert(int2)                                                       # STEP 16
int0 = 12                                                               # STEP 17
avl2.insert(int0)                                                       # STEP 18
int0 = 13                                                               # STEP 19
avl2.delete(int1)                                                       # STEP 20
result = avl2.find(int2)                                                # STEP 21
avl2.delete(int1)                                                       # STEP 22
avl2.delete(int1)                                                       # STEP 23
avl2.insert(int2)                                                       # STEP 24
avl2.delete(int1)                                                       # STEP 25
avl2.insert(int0)                                                       # STEP 26
avl2.delete(int0)                                                       # STEP 27
avl2.insert(int1)                                                       # STEP 28
avl2.insert(int2)                                                       # STEP 29
avl2.delete(int3)                                                       # STEP 30
avl2.delete(int3)                                                       # STEP 31
avl2.delete(int3)                                                       # STEP 32
int2 = 3                                                                # STEP 33
avl2.insert(int2)                                                       # STEP 34
avl2.insert(int3)                                                       # STEP 35
avl2.delete(int0)                                                       # STEP 36
result = avl2.find(int2)                                                # STEP 37
avl2.insert(int2)                                                       # STEP 38
avl2.insert(int2)                                                       # STEP 39
avl2.insert(int2)                                                       # STEP 40
result = avl2.find(int1)                                                # STEP 41
avl2.insert(int3)                                                       # STEP 42
avl2.delete(int1)                                                       # STEP 43
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104f68560>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
218 BRANCHES COVERED
163 STATEMENTS COVERED

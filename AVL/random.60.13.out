Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.99400.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  14 [2:0]
-- < 3 [1:0]
---- < 2 [0:0] L
---- > 13 [0:0] L
-- > 17 [1:-1]
---- > 20 [0:0] L
set([2, 3, 13, 14, 17, 20])
TEST #4 STEP #92 (0:00:30.028541) Fri Apr 28 03:51:45 2017 [ 147 stmts 198 branches ]
  14 [2:0]
-- < 3 [1:0]
---- < 2 [0:0] L
---- > 13 [0:0] L
-- > 17 [1:-1]
---- > 20 [0:0] L
set([2, 3, 13, 14, 17, 20])
  14 [2:0]
-- < 3 [1:0]
---- < 2 [0:0] L
---- > 5 [0:0] L
-- > 15 [1:-1]
---- > 20 [0:0] L
set([2, 3, 5, 14, 15, 20])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103901998>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
Original test has 89 steps

SAVING TEST AS failure.99400.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
avl0 = avl.AVLTree()                                                     # STEP 0
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x103916a70> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int0 = 12                                                                # STEP 1
ACTION: int0 = 12 
int0 = None : <type 'NoneType'>
=> int0 = 12 : <type 'int'>
==================================================
int2 = 16                                                                # STEP 2
ACTION: int2 = 16 
int2 = None : <type 'NoneType'>
=> int2 = 16 : <type 'int'>
==================================================
int3 = 2                                                                 # STEP 3
ACTION: int3 = 2 
int3 = None : <type 'NoneType'>
=> int3 = 2 : <type 'int'>
==================================================
int1 = 6                                                                 # STEP 4
ACTION: int1 = 6 
int1 = None : <type 'NoneType'>
=> int1 = 6 : <type 'int'>
==================================================
result = avl0.find(int2)                                                 # STEP 5
ACTION: result = avl0.find(int2) 
int2 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103916a70> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
int2 = 3                                                                 # STEP 6
ACTION: int2 = 3 
int2 = 16 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
avl0.insert(int2)                                                        # STEP 7
ACTION: avl0.insert(int2) 
int2 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103916a70> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([3]) : <type 'set'>
==================================================
int2 = 19                                                                # STEP 8
ACTION: int2 = 19 
int2 = 3 : <type 'int'>
=> int2 = 19 : <type 'int'>
==================================================
avl0.delete(int3)                                                        # STEP 9
ACTION: avl0.delete(int3) 
int3 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103916a70> : <type 'instance'>
avl_REF0 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int3 = 2                                                                # STEP 10
ACTION: int3 = 2 
int3 = 2 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 11
ACTION: avl0.delete(int1) 
int1 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103916a70> : <type 'instance'>
avl_REF0 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int1 = 4                                                                # STEP 12
ACTION: int1 = 4 
int1 = 6 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 13
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x103e7f758> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 14
ACTION: avl1.insert(int0) 
int0 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103e7f758> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([12]) : <type 'set'>
==================================================
int0 = 11                                                               # STEP 15
ACTION: int0 = 11 
int0 = 12 : <type 'int'>
=> int0 = 11 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 16
ACTION: avl1.delete(int0) 
int0 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103e7f758> : <type 'instance'>
avl_REF1 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int0 = 9                                                                # STEP 17
ACTION: int0 = 9 
int0 = 11 : <type 'int'>
=> int0 = 9 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 18
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x103916a70> : <type 'instance'>
avl_REF0 = set([3]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0 == avl0                                                            # STEP 19
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x103916a70> : <type 'instance'>
avl_REF0 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl1.delete(int3)                                                       # STEP 20
ACTION: avl1.delete(int3) 
int3 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103e7f758> : <type 'instance'>
avl_REF1 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl0.delete(int1)                                                       # STEP 21
ACTION: avl0.delete(int1) 
int1 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103916a70> : <type 'instance'>
avl_REF0 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0 == avl0                                                            # STEP 22
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x103916a70> : <type 'instance'>
avl_REF0 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl1.insert(int0)                                                       # STEP 23
ACTION: avl1.insert(int0) 
int0 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103e7f758> : <type 'instance'>
avl_REF1 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([9, 12]) : <type 'set'>
==================================================
result = avl1.find(int1)                                                # STEP 24
ACTION: result = avl1.find(int1) 
int1 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103e7f758> : <type 'instance'>
avl_REF1 = set([9, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int0 = 4                                                                # STEP 25
ACTION: int0 = 4 
int0 = 9 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
int3 = 16                                                               # STEP 26
ACTION: int3 = 16 
int3 = 2 : <type 'int'>
=> int3 = 16 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 27
ACTION: avl1.delete(int3) 
int3 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103e7f758> : <type 'instance'>
avl_REF1 = set([9, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int1 = 17                                                               # STEP 28
ACTION: int1 = 17 
int1 = 4 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 29
ACTION: avl0.insert(int2) 
int2 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103916a70> : <type 'instance'>
avl_REF0 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([19, 3]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 30
ACTION: avl1.delete(int0) 
int0 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103e7f758> : <type 'instance'>
avl_REF1 = set([9, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int2 = 3                                                                # STEP 31
ACTION: int2 = 3 
int2 = 19 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
int0 = 20                                                               # STEP 32
ACTION: int0 = 20 
int0 = 4 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 33
ACTION: avl1.insert(int3) 
int3 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103e7f758> : <type 'instance'>
avl_REF1 = set([9, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([16, 9, 12]) : <type 'set'>
==================================================
int3 = 15                                                               # STEP 34
ACTION: int3 = 15 
int3 = 16 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 35
ACTION: avl0.insert(int3) 
int3 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103916a70> : <type 'instance'>
avl_REF0 = set([19, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([19, 3, 15]) : <type 'set'>
==================================================
int3 = 4                                                                # STEP 36
ACTION: int3 = 4 
int3 = 15 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 37
ACTION: avl0.delete(int0) 
int0 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103916a70> : <type 'instance'>
avl_REF0 = set([19, 3, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int0 = 7                                                                # STEP 38
ACTION: int0 = 7 
int0 = 20 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 39
ACTION: avl1.insert(int3) 
int3 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103e7f758> : <type 'instance'>
avl_REF1 = set([16, 9, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([16, 9, 12, 4]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 40
ACTION: avl1.insert(int2) 
int2 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103e7f758> : <type 'instance'>
avl_REF1 = set([16, 9, 12, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([16, 9, 3, 12, 4]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 41
ACTION: avl1.insert(int3) 
int3 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103e7f758> : <type 'instance'>
avl_REF1 = set([16, 9, 3, 12, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
int3 = 3                                                                # STEP 42
ACTION: int3 = 3 
int3 = 4 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 43
ACTION: avl1.insert(int3) 
int3 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103e7f758> : <type 'instance'>
avl_REF1 = set([16, 9, 3, 12, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
avl0.insert(int0)                                                       # STEP 44
ACTION: avl0.insert(int0) 
int0 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103916a70> : <type 'instance'>
avl_REF0 = set([19, 3, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([19, 7, 3, 15]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 45
ACTION: avl0.insert(int2) 
int2 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103916a70> : <type 'instance'>
avl_REF0 = set([19, 7, 3, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl1.delete(int0)                                                       # STEP 46
ACTION: avl1.delete(int0) 
int0 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103e7f758> : <type 'instance'>
avl_REF1 = set([16, 9, 3, 12, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int2 = 19                                                               # STEP 47
ACTION: int2 = 19 
int2 = 3 : <type 'int'>
=> int2 = 19 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 48
ACTION: avl1.insert(int2) 
int2 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103e7f758> : <type 'instance'>
avl_REF1 = set([16, 9, 3, 12, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([3, 4, 9, 12, 16, 19]) : <type 'set'>
==================================================
avl1 == avl1                                                            # STEP 49
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x103e7f758> : <type 'instance'>
avl_REF1 = set([3, 4, 9, 12, 16, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
int2 = 16                                                               # STEP 50
ACTION: int2 = 16 
int2 = 19 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
int3 = 14                                                               # STEP 51
ACTION: int3 = 14 
int3 = 3 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
result = avl0.find(int1)                                                # STEP 52
ACTION: result = avl0.find(int1) 
int1 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103916a70> : <type 'instance'>
avl_REF0 = set([19, 7, 3, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
int0 = 20                                                               # STEP 53
ACTION: int0 = 20 
int0 = 7 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
int1 = 4                                                                # STEP 54
ACTION: int1 = 4 
int1 = 17 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
result = avl0.find(int1)                                                # STEP 55
ACTION: result = avl0.find(int1) 
int1 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103916a70> : <type 'instance'>
avl_REF0 = set([19, 7, 3, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
int1 = 2                                                                # STEP 56
ACTION: int1 = 2 
int1 = 4 : <type 'int'>
=> int1 = 2 : <type 'int'>
==================================================
avl0 == avl1                                                            # STEP 57
ACTION: avl0 == avl1 
avl0 = <avl.AVLTree instance at 0x103916a70> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x103e7f758> : <type 'instance'>
avl_REF0 = set([19, 7, 3, 15]) : <type 'set'>
avl_REF1 = set([3, 4, 9, 12, 16, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF1 
==================================================
result = avl1.find(int0)                                                # STEP 58
ACTION: result = avl1.find(int0) 
int0 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103e7f758> : <type 'instance'>
avl_REF1 = set([3, 4, 9, 12, 16, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
result = avl0.inorder()                                                 # STEP 59
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x103916a70> : <type 'instance'>
avl_REF0 = set([19, 7, 3, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int0 = 3                                                                # STEP 60
ACTION: int0 = 3 
int0 = 20 : <type 'int'>
=> int0 = 3 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 61
ACTION: avl0 = avl.AVLTree() 
avl0 = <avl.AVLTree instance at 0x103916a70> : <type 'instance'>
avl_REF0 = set([19, 7, 3, 15]) : <type 'set'>
=> avl0 = <avl.AVLTree instance at 0x1058bcb00> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0 == avl1                                                            # STEP 62
ACTION: avl0 == avl1 
avl0 = <avl.AVLTree instance at 0x1058bcb00> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x103e7f758> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
avl_REF1 = set([3, 4, 9, 12, 16, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF1 
==================================================
avl1.delete(int3)                                                       # STEP 63
ACTION: avl1.delete(int3) 
int3 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103e7f758> : <type 'instance'>
avl_REF1 = set([3, 4, 9, 12, 16, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1 == avl1                                                            # STEP 64
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x103e7f758> : <type 'instance'>
avl_REF1 = set([3, 4, 9, 12, 16, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl0.insert(int0)                                                       # STEP 65
ACTION: avl0.insert(int0) 
int0 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058bcb00> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([3]) : <type 'set'>
==================================================
int3 = 5                                                                # STEP 66
ACTION: int3 = 5 
int3 = 14 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
int0 = 10                                                               # STEP 67
ACTION: int0 = 10 
int0 = 3 : <type 'int'>
=> int0 = 10 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 68
ACTION: avl0.insert(int1) 
int1 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058bcb00> : <type 'instance'>
avl_REF0 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([2, 3]) : <type 'set'>
==================================================
int1 = 16                                                               # STEP 69
ACTION: int1 = 16 
int1 = 2 : <type 'int'>
=> int1 = 16 : <type 'int'>
==================================================
result = avl0.find(int2)                                                # STEP 70
ACTION: result = avl0.find(int2) 
int2 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058bcb00> : <type 'instance'>
avl_REF0 = set([2, 3]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
result = avl0.find(int1)                                                # STEP 71
ACTION: result = avl0.find(int1) 
int1 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058bcb00> : <type 'instance'>
avl_REF0 = set([2, 3]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl0.insert(int2)                                                       # STEP 72
ACTION: avl0.insert(int2) 
int2 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058bcb00> : <type 'instance'>
avl_REF0 = set([2, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([16, 2, 3]) : <type 'set'>
==================================================
int2 = 8                                                                # STEP 73
ACTION: int2 = 8 
int2 = 16 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 74
ACTION: avl1.insert(int0) 
int0 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103e7f758> : <type 'instance'>
avl_REF1 = set([3, 4, 9, 12, 16, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([3, 4, 9, 10, 12, 16, 19]) : <type 'set'>
==================================================
int1 = 12                                                               # STEP 75
ACTION: int1 = 12 
int1 = 16 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
result = avl1.find(int1)                                                # STEP 76
ACTION: result = avl1.find(int1) 
int1 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103e7f758> : <type 'instance'>
avl_REF1 = set([3, 4, 9, 10, 12, 16, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int0 = 3                                                                # STEP 77
ACTION: int0 = 3 
int0 = 10 : <type 'int'>
=> int0 = 3 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 78
ACTION: avl0.insert(int1) 
int1 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058bcb00> : <type 'instance'>
avl_REF0 = set([16, 2, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([16, 2, 3, 12]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 79
ACTION: avl0.insert(int2) 
int2 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058bcb00> : <type 'instance'>
avl_REF0 = set([16, 2, 3, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([16, 8, 2, 3, 12]) : <type 'set'>
==================================================
int1 = 20                                                               # STEP 80
ACTION: int1 = 20 
int1 = 12 : <type 'int'>
=> int1 = 20 : <type 'int'>
==================================================
int2 = 2                                                                # STEP 81
ACTION: int2 = 2 
int2 = 8 : <type 'int'>
=> int2 = 2 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 82
ACTION: avl0.insert(int2) 
int2 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058bcb00> : <type 'instance'>
avl_REF0 = set([16, 8, 2, 3, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl2 = avl.AVLTree()                                                    # STEP 83
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x1058b65a8> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 84
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x1058b65a8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl1.insert(int1)                                                       # STEP 85
ACTION: avl1.insert(int1) 
int1 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103e7f758> : <type 'instance'>
avl_REF1 = set([3, 4, 9, 10, 12, 16, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([3, 4, 9, 10, 12, 16, 19, 20]) : <type 'set'>
==================================================
avl1 == avl2                                                            # STEP 86
ACTION: avl1 == avl2 
avl1 = <avl.AVLTree instance at 0x103e7f758> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x1058b65a8> : <type 'instance'>
avl_REF1 = set([3, 4, 9, 10, 12, 16, 19, 20]) : <type 'set'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
result = avl2.find(int0)                                                # STEP 87
ACTION: result = avl2.find(int0) 
int0 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058b65a8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl0.delete(int2)                                                       # STEP 88
ACTION: avl0.delete(int2) 
int2 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058bcb00> : <type 'instance'>
avl_REF0 = set([16, 8, 2, 3, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([16, 8, 3, 12]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105811488>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 0
STOPPING TESTING DUE TO TIMEOUT
8.58500169664 PERCENT COVERED
66.34917593 TOTAL RUNTIME
9 EXECUTED
789 TOTAL TEST OPERATIONS
29.554359436 TIME SPENT EXECUTING TEST OPERATIONS
0.0284419059753 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
29.8435163498 TIME SPENT CHECKING PROPERTIES
59.3978757858 TOTAL TIME SPENT RUNNING SUT
0.00513052940369 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
avl0 = avl.AVLTree()                                                     # STEP 0
int0 = 12                                                                # STEP 1
int2 = 16                                                                # STEP 2
int3 = 2                                                                 # STEP 3
int1 = 6                                                                 # STEP 4
result = avl0.find(int2)                                                 # STEP 5
int2 = 3                                                                 # STEP 6
avl0.insert(int2)                                                        # STEP 7
int2 = 19                                                                # STEP 8
avl0.delete(int3)                                                        # STEP 9
int3 = 2                                                                # STEP 10
avl0.delete(int1)                                                       # STEP 11
int1 = 4                                                                # STEP 12
avl1 = avl.AVLTree()                                                    # STEP 13
avl1.insert(int0)                                                       # STEP 14
int0 = 11                                                               # STEP 15
avl1.delete(int0)                                                       # STEP 16
int0 = 9                                                                # STEP 17
result = avl0.inorder()                                                 # STEP 18
avl0 == avl0                                                            # STEP 19
avl1.delete(int3)                                                       # STEP 20
avl0.delete(int1)                                                       # STEP 21
avl0 == avl0                                                            # STEP 22
avl1.insert(int0)                                                       # STEP 23
result = avl1.find(int1)                                                # STEP 24
int0 = 4                                                                # STEP 25
int3 = 16                                                               # STEP 26
avl1.delete(int3)                                                       # STEP 27
int1 = 17                                                               # STEP 28
avl0.insert(int2)                                                       # STEP 29
avl1.delete(int0)                                                       # STEP 30
int2 = 3                                                                # STEP 31
int0 = 20                                                               # STEP 32
avl1.insert(int3)                                                       # STEP 33
int3 = 15                                                               # STEP 34
avl0.insert(int3)                                                       # STEP 35
int3 = 4                                                                # STEP 36
avl0.delete(int0)                                                       # STEP 37
int0 = 7                                                                # STEP 38
avl1.insert(int3)                                                       # STEP 39
avl1.insert(int2)                                                       # STEP 40
avl1.insert(int3)                                                       # STEP 41
int3 = 3                                                                # STEP 42
avl1.insert(int3)                                                       # STEP 43
avl0.insert(int0)                                                       # STEP 44
avl0.insert(int2)                                                       # STEP 45
avl1.delete(int0)                                                       # STEP 46
int2 = 19                                                               # STEP 47
avl1.insert(int2)                                                       # STEP 48
avl1 == avl1                                                            # STEP 49
int2 = 16                                                               # STEP 50
int3 = 14                                                               # STEP 51
result = avl0.find(int1)                                                # STEP 52
int0 = 20                                                               # STEP 53
int1 = 4                                                                # STEP 54
result = avl0.find(int1)                                                # STEP 55
int1 = 2                                                                # STEP 56
avl0 == avl1                                                            # STEP 57
result = avl1.find(int0)                                                # STEP 58
result = avl0.inorder()                                                 # STEP 59
int0 = 3                                                                # STEP 60
avl0 = avl.AVLTree()                                                    # STEP 61
avl0 == avl1                                                            # STEP 62
avl1.delete(int3)                                                       # STEP 63
avl1 == avl1                                                            # STEP 64
avl0.insert(int0)                                                       # STEP 65
int3 = 5                                                                # STEP 66
int0 = 10                                                               # STEP 67
avl0.insert(int1)                                                       # STEP 68
int1 = 16                                                               # STEP 69
result = avl0.find(int2)                                                # STEP 70
result = avl0.find(int1)                                                # STEP 71
avl0.insert(int2)                                                       # STEP 72
int2 = 8                                                                # STEP 73
avl1.insert(int0)                                                       # STEP 74
int1 = 12                                                               # STEP 75
result = avl1.find(int1)                                                # STEP 76
int0 = 3                                                                # STEP 77
avl0.insert(int1)                                                       # STEP 78
avl0.insert(int2)                                                       # STEP 79
int1 = 20                                                               # STEP 80
int2 = 2                                                                # STEP 81
avl0.insert(int2)                                                       # STEP 82
avl2 = avl.AVLTree()                                                    # STEP 83
result = avl2.inorder()                                                 # STEP 84
avl1.insert(int1)                                                       # STEP 85
avl1 == avl2                                                            # STEP 86
result = avl2.find(int0)                                                # STEP 87
avl0.delete(int2)                                                       # STEP 88
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105811488>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
216 BRANCHES COVERED
162 STATEMENTS COVERED

Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.99340.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  11 [2:0]
-- < 2 [1:-1]
---- > 8 [0:0] L
-- > 18 [1:0]
---- < 14 [0:0] L
---- > 19 [0:0] L
set([2, 8, 11, 14, 18, 19])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1048e6b48>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
Original test has 71 steps

SAVING TEST AS failure.99340.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
avl0 = avl.AVLTree()                                                     # STEP 0
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x104f8ba70> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int3 = 7                                                                 # STEP 1
ACTION: int3 = 7 
int3 = None : <type 'NoneType'>
=> int3 = 7 : <type 'int'>
==================================================
avl0 == avl0                                                             # STEP 2
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x104f8ba70> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl2 = avl.AVLTree()                                                     # STEP 3
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x104b3bc20> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl0.delete(int3)                                                        # STEP 4
ACTION: avl0.delete(int3) 
int3 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f8ba70> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl2.insert(int3)                                                        # STEP 5
ACTION: avl2.insert(int3) 
int3 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b3bc20> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([7]) : <type 'set'>
==================================================
int2 = 18                                                                # STEP 6
ACTION: int2 = 18 
int2 = None : <type 'NoneType'>
=> int2 = 18 : <type 'int'>
==================================================
result = avl2.inorder()                                                  # STEP 7
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104b3bc20> : <type 'instance'>
avl_REF2 = set([7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int0 = 15                                                                # STEP 8
ACTION: int0 = 15 
int0 = None : <type 'NoneType'>
=> int0 = 15 : <type 'int'>
==================================================
avl2.insert(int2)                                                        # STEP 9
ACTION: avl2.insert(int2) 
int2 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b3bc20> : <type 'instance'>
avl_REF2 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([18, 7]) : <type 'set'>
==================================================
int2 = 5                                                                # STEP 10
ACTION: int2 = 5 
int2 = 18 : <type 'int'>
=> int2 = 5 : <type 'int'>
==================================================
int1 = 6                                                                # STEP 11
ACTION: int1 = 6 
int1 = None : <type 'NoneType'>
=> int1 = 6 : <type 'int'>
==================================================
int3 = 4                                                                # STEP 12
ACTION: int3 = 4 
int3 = 7 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 13
ACTION: avl0.insert(int1) 
int1 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f8ba70> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([6]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 14
ACTION: avl0.insert(int1) 
int1 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f8ba70> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
int1 = 8                                                                # STEP 15
ACTION: int1 = 8 
int1 = 6 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 16
ACTION: avl2 = avl.AVLTree() 
avl2 = <avl.AVLTree instance at 0x104b3bc20> : <type 'instance'>
avl_REF2 = set([18, 7]) : <type 'set'>
=> avl2 = <avl.AVLTree instance at 0x104fa3440> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 17
ACTION: avl0.delete(int2) 
int2 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f8ba70> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.delete(int0)                                                       # STEP 18
ACTION: avl0.delete(int0) 
int0 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f8ba70> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int0 = 20                                                               # STEP 19
ACTION: int0 = 20 
int0 = 15 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 20
ACTION: avl0.insert(int2) 
int2 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f8ba70> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([5, 6]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 21
ACTION: avl0.insert(int3) 
int3 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f8ba70> : <type 'instance'>
avl_REF0 = set([5, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([4, 5, 6]) : <type 'set'>
==================================================
int2 = 20                                                               # STEP 22
ACTION: int2 = 20 
int2 = 5 : <type 'int'>
=> int2 = 20 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 23
ACTION: avl2.insert(int1) 
int1 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104fa3440> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([8]) : <type 'set'>
==================================================
int1 = 12                                                               # STEP 24
ACTION: int1 = 12 
int1 = 8 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 25
ACTION: avl0.delete(int2) 
int2 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f8ba70> : <type 'instance'>
avl_REF0 = set([4, 5, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int2 = 14                                                               # STEP 26
ACTION: int2 = 14 
int2 = 20 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 27
ACTION: avl0.insert(int3) 
int3 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f8ba70> : <type 'instance'>
avl_REF0 = set([4, 5, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
int3 = 9                                                                # STEP 28
ACTION: int3 = 9 
int3 = 4 : <type 'int'>
=> int3 = 9 : <type 'int'>
==================================================
avl2 == avl0                                                            # STEP 29
ACTION: avl2 == avl0 
avl2 = <avl.AVLTree instance at 0x104fa3440> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x104f8ba70> : <type 'instance'>
avl_REF2 = set([8]) : <type 'set'>
avl_REF0 = set([4, 5, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF0 
==================================================
avl1 = avl.AVLTree()                                                    # STEP 30
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x104f88950> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 31
ACTION: avl2.delete(int3) 
int3 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104fa3440> : <type 'instance'>
avl_REF2 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int3 = 14                                                               # STEP 32
ACTION: int3 = 14 
int3 = 9 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
result = avl2.find(int2)                                                # STEP 33
ACTION: result = avl2.find(int2) 
int2 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104fa3440> : <type 'instance'>
avl_REF2 = set([8]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int2 = 1                                                                # STEP 34
ACTION: int2 = 1 
int2 = 14 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 35
ACTION: avl2.delete(int0) 
int0 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104fa3440> : <type 'instance'>
avl_REF2 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int0 = 7                                                                # STEP 36
ACTION: int0 = 7 
int0 = 20 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 37
ACTION: avl2.delete(int3) 
int3 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104fa3440> : <type 'instance'>
avl_REF2 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int3 = 6                                                                # STEP 38
ACTION: int3 = 6 
int3 = 14 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 39
ACTION: avl2.insert(int0) 
int0 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104fa3440> : <type 'instance'>
avl_REF2 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([8, 7]) : <type 'set'>
==================================================
int0 = 10                                                               # STEP 40
ACTION: int0 = 10 
int0 = 7 : <type 'int'>
=> int0 = 10 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 41
ACTION: avl0.delete(int3) 
int3 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f8ba70> : <type 'instance'>
avl_REF0 = set([4, 5, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([4, 5]) : <type 'set'>
==================================================
result = avl0.find(int1)                                                # STEP 42
ACTION: result = avl0.find(int1) 
int1 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f8ba70> : <type 'instance'>
avl_REF0 = set([4, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl1.insert(int1)                                                       # STEP 43
ACTION: avl1.insert(int1) 
int1 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f88950> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([12]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 44
ACTION: avl1.delete(int3) 
int3 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f88950> : <type 'instance'>
avl_REF1 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl2.insert(int2)                                                       # STEP 45
ACTION: avl2.insert(int2) 
int2 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104fa3440> : <type 'instance'>
avl_REF2 = set([8, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([8, 1, 7]) : <type 'set'>
==================================================
int2 = 4                                                                # STEP 46
ACTION: int2 = 4 
int2 = 1 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 47
ACTION: avl2.insert(int3) 
int3 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104fa3440> : <type 'instance'>
avl_REF2 = set([8, 1, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([8, 1, 6, 7]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 48
ACTION: avl0.delete(int3) 
int3 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f8ba70> : <type 'instance'>
avl_REF0 = set([4, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl1.delete(int0)                                                       # STEP 49
ACTION: avl1.delete(int0) 
int0 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f88950> : <type 'instance'>
avl_REF1 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.insert(int1)                                                       # STEP 50
ACTION: avl1.insert(int1) 
int1 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f88950> : <type 'instance'>
avl_REF1 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
result = avl0.inorder()                                                 # STEP 51
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104f8ba70> : <type 'instance'>
avl_REF0 = set([4, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int0)                                                       # STEP 52
ACTION: avl0.insert(int0) 
int0 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f8ba70> : <type 'instance'>
avl_REF0 = set([4, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([10, 4, 5]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 53
ACTION: avl2.insert(int3) 
int3 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104fa3440> : <type 'instance'>
avl_REF2 = set([8, 1, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
result = avl1.find(int0)                                                # STEP 54
ACTION: result = avl1.find(int0) 
int0 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f88950> : <type 'instance'>
avl_REF1 = set([12]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
int3 = 9                                                                # STEP 55
ACTION: int3 = 9 
int3 = 6 : <type 'int'>
=> int3 = 9 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 56
ACTION: avl0.delete(int0) 
int0 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f8ba70> : <type 'instance'>
avl_REF0 = set([10, 4, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([4, 5]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 57
ACTION: avl0.insert(int0) 
int0 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f8ba70> : <type 'instance'>
avl_REF0 = set([4, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([10, 4, 5]) : <type 'set'>
==================================================
int0 = 15                                                               # STEP 58
ACTION: int0 = 15 
int0 = 10 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
int1 = 13                                                               # STEP 59
ACTION: int1 = 13 
int1 = 12 : <type 'int'>
=> int1 = 13 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 60
ACTION: avl0.insert(int0) 
int0 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f8ba70> : <type 'instance'>
avl_REF0 = set([10, 4, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([10, 4, 5, 15]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 61
ACTION: avl0.insert(int1) 
int1 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f8ba70> : <type 'instance'>
avl_REF0 = set([10, 4, 5, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([4, 5, 10, 13, 15]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 62
ACTION: avl1.insert(int2) 
int2 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f88950> : <type 'instance'>
avl_REF1 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([4, 12]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 63
ACTION: avl0.insert(int0) 
int0 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f8ba70> : <type 'instance'>
avl_REF0 = set([4, 5, 10, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
int1 = 8                                                                # STEP 64
ACTION: int1 = 8 
int1 = 13 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 65
ACTION: avl0.insert(int1) 
int1 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f8ba70> : <type 'instance'>
avl_REF0 = set([4, 5, 10, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([4, 5, 8, 10, 13, 15]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 66
ACTION: avl0.insert(int3) 
int3 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f8ba70> : <type 'instance'>
avl_REF0 = set([4, 5, 8, 10, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([4, 5, 8, 9, 10, 13, 15]) : <type 'set'>
==================================================
int2 = 12                                                               # STEP 67
ACTION: int2 = 12 
int2 = 4 : <type 'int'>
=> int2 = 12 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 68
ACTION: avl1.delete(int2) 
int2 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f88950> : <type 'instance'>
avl_REF1 = set([4, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([4]) : <type 'set'>
==================================================
int2 = 13                                                               # STEP 69
ACTION: int2 = 13 
int2 = 12 : <type 'int'>
=> int2 = 13 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 70
ACTION: avl0.delete(int2) 
int2 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f8ba70> : <type 'instance'>
avl_REF0 = set([4, 5, 8, 9, 10, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([4, 5, 8, 9, 10, 15]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104a4f950>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104a83170>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 65 steps

SAVING TEST AS failure.99340.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 4                                                                 # STEP 0
ACTION: int2 = 4 
int2 = None : <type 'NoneType'>
=> int2 = 4 : <type 'int'>
==================================================
int3 = 11                                                                # STEP 1
ACTION: int3 = 11 
int3 = None : <type 'NoneType'>
=> int3 = 11 : <type 'int'>
==================================================
int1 = 16                                                                # STEP 2
ACTION: int1 = 16 
int1 = None : <type 'NoneType'>
=> int1 = 16 : <type 'int'>
==================================================
int0 = 20                                                                # STEP 3
ACTION: int0 = 20 
int0 = None : <type 'NoneType'>
=> int0 = 20 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x104a6d830> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.delete(int2)                                                        # STEP 5
ACTION: avl1.delete(int2) 
int2 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104a6d830> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int2 = 7                                                                 # STEP 6
ACTION: int2 = 7 
int2 = 4 : <type 'int'>
=> int2 = 7 : <type 'int'>
==================================================
avl1.insert(int3)                                                        # STEP 7
ACTION: avl1.insert(int3) 
int3 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104a6d830> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([11]) : <type 'set'>
==================================================
int3 = 17                                                                # STEP 8
ACTION: int3 = 17 
int3 = 11 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
avl1.delete(int3)                                                        # STEP 9
ACTION: avl1.delete(int3) 
int3 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104a6d830> : <type 'instance'>
avl_REF1 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.insert(int3)                                                       # STEP 10
ACTION: avl1.insert(int3) 
int3 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104a6d830> : <type 'instance'>
avl_REF1 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([17, 11]) : <type 'set'>
==================================================
int3 = 5                                                                # STEP 11
ACTION: int3 = 5 
int3 = 17 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
result = avl1.find(int1)                                                # STEP 12
ACTION: result = avl1.find(int1) 
int1 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104a6d830> : <type 'instance'>
avl_REF1 = set([17, 11]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl1 == avl1                                                            # STEP 13
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x104a6d830> : <type 'instance'>
avl_REF1 = set([17, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.insert(int2)                                                       # STEP 14
ACTION: avl1.insert(int2) 
int2 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104a6d830> : <type 'instance'>
avl_REF1 = set([17, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([17, 11, 7]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 15
ACTION: avl1.insert(int1) 
int1 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104a6d830> : <type 'instance'>
avl_REF1 = set([17, 11, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([16, 17, 11, 7]) : <type 'set'>
==================================================
int1 = 17                                                               # STEP 16
ACTION: int1 = 17 
int1 = 16 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 17
ACTION: avl1.delete(int1) 
int1 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104a6d830> : <type 'instance'>
avl_REF1 = set([16, 17, 11, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([16, 11, 7]) : <type 'set'>
==================================================
int1 = 8                                                                # STEP 18
ACTION: int1 = 8 
int1 = 17 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 19
ACTION: avl1.delete(int2) 
int2 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104a6d830> : <type 'instance'>
avl_REF1 = set([16, 11, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([16, 11]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 20
ACTION: avl1.insert(int0) 
int0 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104a6d830> : <type 'instance'>
avl_REF1 = set([16, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([16, 11, 20]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 21
ACTION: avl1.insert(int0) 
int0 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104a6d830> : <type 'instance'>
avl_REF1 = set([16, 11, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.delete(int0)                                                       # STEP 22
ACTION: avl1.delete(int0) 
int0 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104a6d830> : <type 'instance'>
avl_REF1 = set([16, 11, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([16, 11]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 23
ACTION: avl1.insert(int3) 
int3 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104a6d830> : <type 'instance'>
avl_REF1 = set([16, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([16, 5, 11]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 24
ACTION: avl1.insert(int1) 
int1 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104a6d830> : <type 'instance'>
avl_REF1 = set([16, 5, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([16, 5, 8, 11]) : <type 'set'>
==================================================
int3 = 14                                                               # STEP 25
ACTION: int3 = 14 
int3 = 5 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 26
ACTION: avl1.delete(int3) 
int3 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104a6d830> : <type 'instance'>
avl_REF1 = set([16, 5, 8, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.insert(int0)                                                       # STEP 27
ACTION: avl1.insert(int0) 
int0 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104a6d830> : <type 'instance'>
avl_REF1 = set([16, 5, 8, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([16, 20, 5, 8, 11]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 28
ACTION: avl1.delete(int3) 
int3 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104a6d830> : <type 'instance'>
avl_REF1 = set([16, 20, 5, 8, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl2 = avl.AVLTree()                                                    # STEP 29
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x104a7a7a0> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 30
ACTION: avl2.delete(int3) 
int3 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a7a7a0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.delete(int1)                                                       # STEP 31
ACTION: avl2.delete(int1) 
int1 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a7a7a0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl1.insert(int1)                                                       # STEP 32
ACTION: avl1.insert(int1) 
int1 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104a6d830> : <type 'instance'>
avl_REF1 = set([16, 20, 5, 8, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
int2 = 8                                                                # STEP 33
ACTION: int2 = 8 
int2 = 7 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 34
ACTION: avl1.delete(int0) 
int0 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104a6d830> : <type 'instance'>
avl_REF1 = set([16, 20, 5, 8, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([16, 5, 8, 11]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 35
ACTION: avl2.insert(int3) 
int3 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a7a7a0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([14]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 36
ACTION: avl2.delete(int3) 
int3 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a7a7a0> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int0 = 19                                                               # STEP 37
ACTION: int0 = 19 
int0 = 20 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 38
ACTION: avl2.delete(int1) 
int1 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a7a7a0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.delete(int3)                                                       # STEP 39
ACTION: avl2.delete(int3) 
int3 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a7a7a0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl1.delete(int3)                                                       # STEP 40
ACTION: avl1.delete(int3) 
int3 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104a6d830> : <type 'instance'>
avl_REF1 = set([16, 5, 8, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
result = avl2.find(int0)                                                # STEP 41
ACTION: result = avl2.find(int0) 
int0 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a7a7a0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl2.insert(int0)                                                       # STEP 42
ACTION: avl2.insert(int0) 
int0 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a7a7a0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([19]) : <type 'set'>
==================================================
result = avl1.find(int0)                                                # STEP 43
ACTION: result = avl1.find(int0) 
int0 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104a6d830> : <type 'instance'>
avl_REF1 = set([16, 5, 8, 11]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl1.delete(int3)                                                       # STEP 44
ACTION: avl1.delete(int3) 
int3 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104a6d830> : <type 'instance'>
avl_REF1 = set([16, 5, 8, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int3 = 4                                                                # STEP 45
ACTION: int3 = 4 
int3 = 14 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 46
ACTION: avl2.insert(int3) 
int3 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a7a7a0> : <type 'instance'>
avl_REF2 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([19, 4]) : <type 'set'>
==================================================
int1 = 10                                                               # STEP 47
ACTION: int1 = 10 
int1 = 8 : <type 'int'>
=> int1 = 10 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 48
ACTION: avl2.insert(int2) 
int2 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a7a7a0> : <type 'instance'>
avl_REF2 = set([19, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([8, 19, 4]) : <type 'set'>
==================================================
result = avl2.find(int1)                                                # STEP 49
ACTION: result = avl2.find(int1) 
int1 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a7a7a0> : <type 'instance'>
avl_REF2 = set([8, 19, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int2 = 20                                                               # STEP 50
ACTION: int2 = 20 
int2 = 8 : <type 'int'>
=> int2 = 20 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 51
ACTION: avl2.insert(int0) 
int0 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a7a7a0> : <type 'instance'>
avl_REF2 = set([8, 19, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl1.delete(int0)                                                       # STEP 52
ACTION: avl1.delete(int0) 
int0 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104a6d830> : <type 'instance'>
avl_REF1 = set([16, 5, 8, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.delete(int1)                                                       # STEP 53
ACTION: avl1.delete(int1) 
int1 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104a6d830> : <type 'instance'>
avl_REF1 = set([16, 5, 8, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int0 = 9                                                                # STEP 54
ACTION: int0 = 9 
int0 = 19 : <type 'int'>
=> int0 = 9 : <type 'int'>
==================================================
result = avl1.find(int0)                                                # STEP 55
ACTION: result = avl1.find(int0) 
int0 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104a6d830> : <type 'instance'>
avl_REF1 = set([16, 5, 8, 11]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl1.insert(int0)                                                       # STEP 56
ACTION: avl1.insert(int0) 
int0 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104a6d830> : <type 'instance'>
avl_REF1 = set([16, 5, 8, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([16, 5, 8, 9, 11]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 57
ACTION: avl2.insert(int0) 
int0 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a7a7a0> : <type 'instance'>
avl_REF2 = set([8, 19, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([8, 9, 19, 4]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 58
ACTION: avl1.delete(int1) 
int1 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104a6d830> : <type 'instance'>
avl_REF1 = set([16, 5, 8, 9, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl2.insert(int2)                                                       # STEP 59
ACTION: avl2.insert(int2) 
int2 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a7a7a0> : <type 'instance'>
avl_REF2 = set([8, 9, 19, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([8, 9, 19, 4, 20]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 60
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104a6d830> : <type 'instance'>
avl_REF1 = set([16, 5, 8, 9, 11]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
result = avl1.inorder()                                                 # STEP 61
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104a6d830> : <type 'instance'>
avl_REF1 = set([16, 5, 8, 9, 11]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int2)                                                       # STEP 62
ACTION: avl1.insert(int2) 
int2 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104a6d830> : <type 'instance'>
avl_REF1 = set([16, 5, 8, 9, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([16, 20, 5, 8, 9, 11]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 63
ACTION: avl1.delete(int1) 
int1 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104a6d830> : <type 'instance'>
avl_REF1 = set([16, 20, 5, 8, 9, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl2.delete(int3)                                                       # STEP 64
ACTION: avl2.delete(int3) 
int3 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a7a7a0> : <type 'instance'>
avl_REF2 = set([8, 9, 19, 4, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([8, 9, 19, 20]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104a747e8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
TEST #4 STEP #20 (0:00:30.023561) Fri Apr 28 03:41:30 2017 [ 160 stmts 212 branches ]
  11 [2:0]
-- < 4 [1:0]
---- < 1 [0:0] L
---- > 7 [0:0] L
-- > 19 [1:0]
---- < 17 [0:0] L
---- > 20 [0:0] L
set([1, 4, 7, 11, 17, 19, 20])
  11 [3:1]
-- < 4 [2:-1]
---- < 1 [0:0] L
---- > 7 [1:1]
------ < 6 [0:0] L
-- > 19 [1:0]
---- < 17 [0:0] L
---- > 20 [0:0] L
set([1, 4, 6, 7, 11, 17, 19, 20])
  11 [3:1]
-- < 4 [2:-1]
---- < 1 [0:0] L
---- > 7 [1:1]
------ < 6 [0:0] L
-- > 19 [1:0]
---- < 17 [0:0] L
---- > 20 [0:0] L
set([1, 4, 6, 7, 11, 17, 19, 20])
  11 [3:1]
-- < 4 [2:-1]
---- < 1 [0:0] L
---- > 7 [1:1]
------ < 6 [0:0] L
-- > 19 [1:0]
---- < 17 [0:0] L
---- > 20 [0:0] L
set([1, 4, 6, 7, 11, 17, 19, 20])
  11 [3:1]
-- < 4 [2:0]
---- < 1 [1:-1]
------ > 2 [0:0] L
---- > 7 [1:1]
------ < 6 [0:0] L
-- > 19 [1:0]
---- < 17 [0:0] L
---- > 20 [0:0] L
set([1, 2, 4, 6, 7, 11, 17, 19, 20])
  11 [3:1]
-- < 6 [2:1]
---- < 1 [1:-1]
------ > 2 [0:0] L
---- > 7 [0:0] L
-- > 19 [1:1]
---- < 17 [0:0] L
set([1, 2, 6, 7, 11, 17, 19])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1058bb128>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
Original test has 28 steps

SAVING TEST AS failure.99340.test.2
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 17                                                                # STEP 0
ACTION: int3 = 17 
int3 = None : <type 'NoneType'>
=> int3 = 17 : <type 'int'>
==================================================
int0 = 9                                                                 # STEP 1
ACTION: int0 = 9 
int0 = None : <type 'NoneType'>
=> int0 = 9 : <type 'int'>
==================================================
int2 = 15                                                                # STEP 2
ACTION: int2 = 15 
int2 = None : <type 'NoneType'>
=> int2 = 15 : <type 'int'>
==================================================
int1 = 6                                                                 # STEP 3
ACTION: int1 = 6 
int1 = None : <type 'NoneType'>
=> int1 = 6 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 4
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x1058bb7a0> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.insert(int1)                                                        # STEP 5
ACTION: avl0.insert(int1) 
int1 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058bb7a0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([6]) : <type 'set'>
==================================================
avl0.delete(int3)                                                        # STEP 6
ACTION: avl0.delete(int3) 
int3 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058bb7a0> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.delete(int3)                                                        # STEP 7
ACTION: avl0.delete(int3) 
int3 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058bb7a0> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0 == avl0                                                             # STEP 8
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x1058bb7a0> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
int1 = 7                                                                 # STEP 9
ACTION: int1 = 7 
int1 = 6 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
result = avl0.find(int0)                                                # STEP 10
ACTION: result = avl0.find(int0) 
int0 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058bb7a0> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
avl0.insert(int2)                                                       # STEP 11
ACTION: avl0.insert(int2) 
int2 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058bb7a0> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([6, 15]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 12
ACTION: avl0.insert(int0) 
int0 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058bb7a0> : <type 'instance'>
avl_REF0 = set([6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([9, 6, 15]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 13
ACTION: avl0.insert(int1) 
int1 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058bb7a0> : <type 'instance'>
avl_REF0 = set([9, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([9, 7, 6, 15]) : <type 'set'>
==================================================
int1 = 12                                                               # STEP 14
ACTION: int1 = 12 
int1 = 7 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
avl0 == avl0                                                            # STEP 15
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x1058bb7a0> : <type 'instance'>
avl_REF0 = set([9, 7, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
int2 = 9                                                                # STEP 16
ACTION: int2 = 9 
int2 = 15 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
int3 = 4                                                                # STEP 17
ACTION: int3 = 4 
int3 = 17 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 18
ACTION: avl0.insert(int3) 
int3 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058bb7a0> : <type 'instance'>
avl_REF0 = set([9, 7, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([9, 7, 4, 6, 15]) : <type 'set'>
==================================================
int3 = 20                                                               # STEP 19
ACTION: int3 = 20 
int3 = 4 : <type 'int'>
=> int3 = 20 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 20
ACTION: avl0.insert(int3) 
int3 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058bb7a0> : <type 'instance'>
avl_REF0 = set([9, 7, 4, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([4, 6, 7, 9, 15, 20]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 21
ACTION: avl0.delete(int0) 
int0 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058bb7a0> : <type 'instance'>
avl_REF0 = set([4, 6, 7, 9, 15, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([4, 6, 7, 15, 20]) : <type 'set'>
==================================================
result = avl0.find(int3)                                                # STEP 22
ACTION: result = avl0.find(int3) 
int3 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058bb7a0> : <type 'instance'>
avl_REF0 = set([4, 6, 7, 15, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
result = avl0.find(int2)                                                # STEP 23
ACTION: result = avl0.find(int2) 
int2 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058bb7a0> : <type 'instance'>
avl_REF0 = set([4, 6, 7, 15, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl0.delete(int2)                                                       # STEP 24
ACTION: avl0.delete(int2) 
int2 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058bb7a0> : <type 'instance'>
avl_REF0 = set([4, 6, 7, 15, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.delete(int1)                                                       # STEP 25
ACTION: avl0.delete(int1) 
int1 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058bb7a0> : <type 'instance'>
avl_REF0 = set([4, 6, 7, 15, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.delete(int2)                                                       # STEP 26
ACTION: avl0.delete(int2) 
int2 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058bb7a0> : <type 'instance'>
avl_REF0 = set([4, 6, 7, 15, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.delete(int3)                                                       # STEP 27
ACTION: avl0.delete(int3) 
int3 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058bb7a0> : <type 'instance'>
avl_REF0 = set([4, 6, 7, 15, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([4, 6, 7, 15]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10588e830>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 3 DISTINCT FAILURES
  9 [2:0]
-- < 8 [1:1]
---- < 1 [0:0] L
-- > 19 [1:0]
---- < 13 [0:0] L
---- > 20 [0:0] L
set([1, 8, 9, 13, 19, 20])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104e6d5a8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 53 steps

SAVING TEST AS failure.99340.test.3
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
avl2 = avl.AVLTree()                                                     # STEP 0
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x104e5af38> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int2 = 6                                                                 # STEP 1
ACTION: int2 = 6 
int2 = None : <type 'NoneType'>
=> int2 = 6 : <type 'int'>
==================================================
int3 = 11                                                                # STEP 2
ACTION: int3 = 11 
int3 = None : <type 'NoneType'>
=> int3 = 11 : <type 'int'>
==================================================
int1 = 12                                                                # STEP 3
ACTION: int1 = 12 
int1 = None : <type 'NoneType'>
=> int1 = 12 : <type 'int'>
==================================================
int0 = 6                                                                 # STEP 4
ACTION: int0 = 6 
int0 = None : <type 'NoneType'>
=> int0 = 6 : <type 'int'>
==================================================
avl2.insert(int3)                                                        # STEP 5
ACTION: avl2.insert(int3) 
int3 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e5af38> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([11]) : <type 'set'>
==================================================
avl2.delete(int0)                                                        # STEP 6
ACTION: avl2.delete(int0) 
int0 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e5af38> : <type 'instance'>
avl_REF2 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.insert(int1)                                                        # STEP 7
ACTION: avl2.insert(int1) 
int1 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e5af38> : <type 'instance'>
avl_REF2 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([11, 12]) : <type 'set'>
==================================================
int3 = 11                                                                # STEP 8
ACTION: int3 = 11 
int3 = 11 : <type 'int'>
==================================================
avl2.delete(int1)                                                        # STEP 9
ACTION: avl2.delete(int1) 
int1 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e5af38> : <type 'instance'>
avl_REF2 = set([11, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([11]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 10
ACTION: avl2.delete(int2) 
int2 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e5af38> : <type 'instance'>
avl_REF2 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.insert(int1)                                                       # STEP 11
ACTION: avl2.insert(int1) 
int1 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e5af38> : <type 'instance'>
avl_REF2 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([11, 12]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 12
ACTION: avl2.insert(int1) 
int1 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e5af38> : <type 'instance'>
avl_REF2 = set([11, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl2.delete(int2)                                                       # STEP 13
ACTION: avl2.delete(int2) 
int2 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e5af38> : <type 'instance'>
avl_REF2 = set([11, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.insert(int3)                                                       # STEP 14
ACTION: avl2.insert(int3) 
int3 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e5af38> : <type 'instance'>
avl_REF2 = set([11, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
avl2 == avl2                                                            # STEP 15
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x104e5af38> : <type 'instance'>
avl_REF2 = set([11, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
int0 = 8                                                                # STEP 16
ACTION: int0 = 8 
int0 = 6 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 17
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104e5af38> : <type 'instance'>
avl_REF2 = set([11, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl2.inorder()                                                 # STEP 18
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104e5af38> : <type 'instance'>
avl_REF2 = set([11, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl2.inorder()                                                 # STEP 19
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104e5af38> : <type 'instance'>
avl_REF2 = set([11, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int3)                                                       # STEP 20
ACTION: avl2.delete(int3) 
int3 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e5af38> : <type 'instance'>
avl_REF2 = set([11, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([12]) : <type 'set'>
==================================================
int1 = 2                                                                # STEP 21
ACTION: int1 = 2 
int1 = 12 : <type 'int'>
=> int1 = 2 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 22
ACTION: avl2.delete(int0) 
int0 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e5af38> : <type 'instance'>
avl_REF2 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.delete(int3)                                                       # STEP 23
ACTION: avl2.delete(int3) 
int3 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e5af38> : <type 'instance'>
avl_REF2 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int3 = 12                                                               # STEP 24
ACTION: int3 = 12 
int3 = 11 : <type 'int'>
=> int3 = 12 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 25
ACTION: avl2.insert(int0) 
int0 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e5af38> : <type 'instance'>
avl_REF2 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([8, 12]) : <type 'set'>
==================================================
int2 = 7                                                                # STEP 26
ACTION: int2 = 7 
int2 = 6 : <type 'int'>
=> int2 = 7 : <type 'int'>
==================================================
int0 = 14                                                               # STEP 27
ACTION: int0 = 14 
int0 = 8 : <type 'int'>
=> int0 = 14 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 28
ACTION: avl2.delete(int2) 
int2 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e5af38> : <type 'instance'>
avl_REF2 = set([8, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.insert(int3)                                                       # STEP 29
ACTION: avl2.insert(int3) 
int3 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e5af38> : <type 'instance'>
avl_REF2 = set([8, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
int3 = 19                                                               # STEP 30
ACTION: int3 = 19 
int3 = 12 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 31
ACTION: avl2.insert(int1) 
int1 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e5af38> : <type 'instance'>
avl_REF2 = set([8, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([8, 2, 12]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 32
ACTION: avl2.insert(int1) 
int1 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e5af38> : <type 'instance'>
avl_REF2 = set([8, 2, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl2.insert(int2)                                                       # STEP 33
ACTION: avl2.insert(int2) 
int2 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e5af38> : <type 'instance'>
avl_REF2 = set([8, 2, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([8, 2, 12, 7]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 34
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104e5af38> : <type 'instance'>
avl_REF2 = set([8, 2, 12, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int2)                                                       # STEP 35
ACTION: avl2.insert(int2) 
int2 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e5af38> : <type 'instance'>
avl_REF2 = set([8, 2, 12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl2.insert(int2)                                                       # STEP 36
ACTION: avl2.insert(int2) 
int2 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e5af38> : <type 'instance'>
avl_REF2 = set([8, 2, 12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl2.insert(int1)                                                       # STEP 37
ACTION: avl2.insert(int1) 
int1 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e5af38> : <type 'instance'>
avl_REF2 = set([8, 2, 12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
result = avl2.inorder()                                                 # STEP 38
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104e5af38> : <type 'instance'>
avl_REF2 = set([8, 2, 12, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int3)                                                       # STEP 39
ACTION: avl2.delete(int3) 
int3 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e5af38> : <type 'instance'>
avl_REF2 = set([8, 2, 12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
result = avl2.find(int1)                                                # STEP 40
ACTION: result = avl2.find(int1) 
int1 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e5af38> : <type 'instance'>
avl_REF2 = set([8, 2, 12, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl2.insert(int2)                                                       # STEP 41
ACTION: avl2.insert(int2) 
int2 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e5af38> : <type 'instance'>
avl_REF2 = set([8, 2, 12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl2.insert(int0)                                                       # STEP 42
ACTION: avl2.insert(int0) 
int0 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e5af38> : <type 'instance'>
avl_REF2 = set([8, 2, 12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([2, 7, 8, 12, 14]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 43
ACTION: avl2.delete(int2) 
int2 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e5af38> : <type 'instance'>
avl_REF2 = set([2, 7, 8, 12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([2, 8, 12, 14]) : <type 'set'>
==================================================
result = avl2.find(int2)                                                # STEP 44
ACTION: result = avl2.find(int2) 
int2 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e5af38> : <type 'instance'>
avl_REF2 = set([2, 8, 12, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl2.insert(int0)                                                       # STEP 45
ACTION: avl2.insert(int0) 
int0 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e5af38> : <type 'instance'>
avl_REF2 = set([2, 8, 12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl2.delete(int0)                                                       # STEP 46
ACTION: avl2.delete(int0) 
int0 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e5af38> : <type 'instance'>
avl_REF2 = set([2, 8, 12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([2, 8, 12]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 47
ACTION: avl2.delete(int0) 
int0 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e5af38> : <type 'instance'>
avl_REF2 = set([2, 8, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
result = avl2.inorder()                                                 # STEP 48
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104e5af38> : <type 'instance'>
avl_REF2 = set([2, 8, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int3 = 10                                                               # STEP 49
ACTION: int3 = 10 
int3 = 19 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 50
ACTION: avl2.insert(int3) 
int3 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e5af38> : <type 'instance'>
avl_REF2 = set([2, 8, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([2, 8, 10, 12]) : <type 'set'>
==================================================
result = avl2.find(int0)                                                # STEP 51
ACTION: result = avl2.find(int0) 
int0 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e5af38> : <type 'instance'>
avl_REF2 = set([2, 8, 10, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl2.delete(int1)                                                       # STEP 52
ACTION: avl2.delete(int1) 
int1 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104e5af38> : <type 'instance'>
avl_REF2 = set([2, 8, 10, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([8, 10, 12]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10589def0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 4 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104e52128>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
Original test has 21 steps

SAVING TEST AS failure.99340.test.4
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 13                                                                # STEP 0
ACTION: int1 = 13 
int1 = None : <type 'NoneType'>
=> int1 = 13 : <type 'int'>
==================================================
int0 = 14                                                                # STEP 1
ACTION: int0 = 14 
int0 = None : <type 'NoneType'>
=> int0 = 14 : <type 'int'>
==================================================
int3 = 2                                                                 # STEP 2
ACTION: int3 = 2 
int3 = None : <type 'NoneType'>
=> int3 = 2 : <type 'int'>
==================================================
int2 = 9                                                                 # STEP 3
ACTION: int2 = 9 
int2 = None : <type 'NoneType'>
=> int2 = 9 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 4
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x104e52830> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
result = avl0.find(int2)                                                 # STEP 5
ACTION: result = avl0.find(int2) 
int2 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e52830> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl0.insert(int3)                                                        # STEP 6
ACTION: avl0.insert(int3) 
int3 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e52830> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([2]) : <type 'set'>
==================================================
result = avl0.find(int2)                                                 # STEP 7
ACTION: result = avl0.find(int2) 
int2 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e52830> : <type 'instance'>
avl_REF0 = set([2]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl0.insert(int0)                                                        # STEP 8
ACTION: avl0.insert(int0) 
int0 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e52830> : <type 'instance'>
avl_REF0 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([2, 14]) : <type 'set'>
==================================================
avl0.delete(int1)                                                        # STEP 9
ACTION: avl0.delete(int1) 
int1 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e52830> : <type 'instance'>
avl_REF0 = set([2, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.insert(int2)                                                       # STEP 10
ACTION: avl0.insert(int2) 
int2 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e52830> : <type 'instance'>
avl_REF0 = set([2, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([9, 2, 14]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 11
ACTION: avl0.insert(int2) 
int2 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e52830> : <type 'instance'>
avl_REF0 = set([9, 2, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl0.delete(int2)                                                       # STEP 12
ACTION: avl0.delete(int2) 
int2 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e52830> : <type 'instance'>
avl_REF0 = set([9, 2, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([2, 14]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 13
ACTION: avl0.insert(int1) 
int1 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e52830> : <type 'instance'>
avl_REF0 = set([2, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([2, 13, 14]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 14
ACTION: avl0.insert(int3) 
int3 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e52830> : <type 'instance'>
avl_REF0 = set([2, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
int2 = 2                                                                # STEP 15
ACTION: int2 = 2 
int2 = 9 : <type 'int'>
=> int2 = 2 : <type 'int'>
==================================================
int0 = 11                                                               # STEP 16
ACTION: int0 = 11 
int0 = 14 : <type 'int'>
=> int0 = 11 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 17
ACTION: avl0.insert(int0) 
int0 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e52830> : <type 'instance'>
avl_REF0 = set([2, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([2, 11, 13, 14]) : <type 'set'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 18
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x104e73050> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 19
ACTION: avl0.insert(int1) 
int1 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e52830> : <type 'instance'>
avl_REF0 = set([2, 11, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl0.delete(int1)                                                       # STEP 20
ACTION: avl0.delete(int1) 
int1 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e52830> : <type 'instance'>
avl_REF0 = set([2, 11, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([2, 11, 14]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104e73680>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 5 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 20
STOPPING TESTING DUE TO TIMEOUT
8.51713607058 PERCENT COVERED
60.2119719982 TOTAL RUNTIME
9 EXECUTED
558 TOTAL TEST OPERATIONS
20.958656311 TIME SPENT EXECUTING TEST OPERATIONS
0.0646719932556 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
21.1275887489 TIME SPENT CHECKING PROPERTIES
42.08624506 TOTAL TIME SPENT RUNNING SUT
0.00542187690735 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
5 FAILED
0 REPEATS OF FAILURES
5 ACTUAL DISTINCT FAILURES

FAILURE 0
avl0 = avl.AVLTree()                                                     # STEP 0
int3 = 7                                                                 # STEP 1
avl0 == avl0                                                             # STEP 2
avl2 = avl.AVLTree()                                                     # STEP 3
avl0.delete(int3)                                                        # STEP 4
avl2.insert(int3)                                                        # STEP 5
int2 = 18                                                                # STEP 6
result = avl2.inorder()                                                  # STEP 7
int0 = 15                                                                # STEP 8
avl2.insert(int2)                                                        # STEP 9
int2 = 5                                                                # STEP 10
int1 = 6                                                                # STEP 11
int3 = 4                                                                # STEP 12
avl0.insert(int1)                                                       # STEP 13
avl0.insert(int1)                                                       # STEP 14
int1 = 8                                                                # STEP 15
avl2 = avl.AVLTree()                                                    # STEP 16
avl0.delete(int2)                                                       # STEP 17
avl0.delete(int0)                                                       # STEP 18
int0 = 20                                                               # STEP 19
avl0.insert(int2)                                                       # STEP 20
avl0.insert(int3)                                                       # STEP 21
int2 = 20                                                               # STEP 22
avl2.insert(int1)                                                       # STEP 23
int1 = 12                                                               # STEP 24
avl0.delete(int2)                                                       # STEP 25
int2 = 14                                                               # STEP 26
avl0.insert(int3)                                                       # STEP 27
int3 = 9                                                                # STEP 28
avl2 == avl0                                                            # STEP 29
avl1 = avl.AVLTree()                                                    # STEP 30
avl2.delete(int3)                                                       # STEP 31
int3 = 14                                                               # STEP 32
result = avl2.find(int2)                                                # STEP 33
int2 = 1                                                                # STEP 34
avl2.delete(int0)                                                       # STEP 35
int0 = 7                                                                # STEP 36
avl2.delete(int3)                                                       # STEP 37
int3 = 6                                                                # STEP 38
avl2.insert(int0)                                                       # STEP 39
int0 = 10                                                               # STEP 40
avl0.delete(int3)                                                       # STEP 41
result = avl0.find(int1)                                                # STEP 42
avl1.insert(int1)                                                       # STEP 43
avl1.delete(int3)                                                       # STEP 44
avl2.insert(int2)                                                       # STEP 45
int2 = 4                                                                # STEP 46
avl2.insert(int3)                                                       # STEP 47
avl0.delete(int3)                                                       # STEP 48
avl1.delete(int0)                                                       # STEP 49
avl1.insert(int1)                                                       # STEP 50
result = avl0.inorder()                                                 # STEP 51
avl0.insert(int0)                                                       # STEP 52
avl2.insert(int3)                                                       # STEP 53
result = avl1.find(int0)                                                # STEP 54
int3 = 9                                                                # STEP 55
avl0.delete(int0)                                                       # STEP 56
avl0.insert(int0)                                                       # STEP 57
int0 = 15                                                               # STEP 58
int1 = 13                                                               # STEP 59
avl0.insert(int0)                                                       # STEP 60
avl0.insert(int1)                                                       # STEP 61
avl1.insert(int2)                                                       # STEP 62
avl0.insert(int0)                                                       # STEP 63
int1 = 8                                                                # STEP 64
avl0.insert(int1)                                                       # STEP 65
avl0.insert(int3)                                                       # STEP 66
int2 = 12                                                               # STEP 67
avl1.delete(int2)                                                       # STEP 68
int2 = 13                                                               # STEP 69
avl0.delete(int2)                                                       # STEP 70
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104a4f950>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE 1
int2 = 4                                                                 # STEP 0
int3 = 11                                                                # STEP 1
int1 = 16                                                                # STEP 2
int0 = 20                                                                # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
avl1.delete(int2)                                                        # STEP 5
int2 = 7                                                                 # STEP 6
avl1.insert(int3)                                                        # STEP 7
int3 = 17                                                                # STEP 8
avl1.delete(int3)                                                        # STEP 9
avl1.insert(int3)                                                       # STEP 10
int3 = 5                                                                # STEP 11
result = avl1.find(int1)                                                # STEP 12
avl1 == avl1                                                            # STEP 13
avl1.insert(int2)                                                       # STEP 14
avl1.insert(int1)                                                       # STEP 15
int1 = 17                                                               # STEP 16
avl1.delete(int1)                                                       # STEP 17
int1 = 8                                                                # STEP 18
avl1.delete(int2)                                                       # STEP 19
avl1.insert(int0)                                                       # STEP 20
avl1.insert(int0)                                                       # STEP 21
avl1.delete(int0)                                                       # STEP 22
avl1.insert(int3)                                                       # STEP 23
avl1.insert(int1)                                                       # STEP 24
int3 = 14                                                               # STEP 25
avl1.delete(int3)                                                       # STEP 26
avl1.insert(int0)                                                       # STEP 27
avl1.delete(int3)                                                       # STEP 28
avl2 = avl.AVLTree()                                                    # STEP 29
avl2.delete(int3)                                                       # STEP 30
avl2.delete(int1)                                                       # STEP 31
avl1.insert(int1)                                                       # STEP 32
int2 = 8                                                                # STEP 33
avl1.delete(int0)                                                       # STEP 34
avl2.insert(int3)                                                       # STEP 35
avl2.delete(int3)                                                       # STEP 36
int0 = 19                                                               # STEP 37
avl2.delete(int1)                                                       # STEP 38
avl2.delete(int3)                                                       # STEP 39
avl1.delete(int3)                                                       # STEP 40
result = avl2.find(int0)                                                # STEP 41
avl2.insert(int0)                                                       # STEP 42
result = avl1.find(int0)                                                # STEP 43
avl1.delete(int3)                                                       # STEP 44
int3 = 4                                                                # STEP 45
avl2.insert(int3)                                                       # STEP 46
int1 = 10                                                               # STEP 47
avl2.insert(int2)                                                       # STEP 48
result = avl2.find(int1)                                                # STEP 49
int2 = 20                                                               # STEP 50
avl2.insert(int0)                                                       # STEP 51
avl1.delete(int0)                                                       # STEP 52
avl1.delete(int1)                                                       # STEP 53
int0 = 9                                                                # STEP 54
result = avl1.find(int0)                                                # STEP 55
avl1.insert(int0)                                                       # STEP 56
avl2.insert(int0)                                                       # STEP 57
avl1.delete(int1)                                                       # STEP 58
avl2.insert(int2)                                                       # STEP 59
result = avl1.inorder()                                                 # STEP 60
result = avl1.inorder()                                                 # STEP 61
avl1.insert(int2)                                                       # STEP 62
avl1.delete(int1)                                                       # STEP 63
avl2.delete(int3)                                                       # STEP 64
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104a747e8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE 2
int3 = 17                                                                # STEP 0
int0 = 9                                                                 # STEP 1
int2 = 15                                                                # STEP 2
int1 = 6                                                                 # STEP 3
avl0 = avl.AVLTree()                                                     # STEP 4
avl0.insert(int1)                                                        # STEP 5
avl0.delete(int3)                                                        # STEP 6
avl0.delete(int3)                                                        # STEP 7
avl0 == avl0                                                             # STEP 8
int1 = 7                                                                 # STEP 9
result = avl0.find(int0)                                                # STEP 10
avl0.insert(int2)                                                       # STEP 11
avl0.insert(int0)                                                       # STEP 12
avl0.insert(int1)                                                       # STEP 13
int1 = 12                                                               # STEP 14
avl0 == avl0                                                            # STEP 15
int2 = 9                                                                # STEP 16
int3 = 4                                                                # STEP 17
avl0.insert(int3)                                                       # STEP 18
int3 = 20                                                               # STEP 19
avl0.insert(int3)                                                       # STEP 20
avl0.delete(int0)                                                       # STEP 21
result = avl0.find(int3)                                                # STEP 22
result = avl0.find(int2)                                                # STEP 23
avl0.delete(int2)                                                       # STEP 24
avl0.delete(int1)                                                       # STEP 25
avl0.delete(int2)                                                       # STEP 26
avl0.delete(int3)                                                       # STEP 27
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10588e830>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE 3
avl2 = avl.AVLTree()                                                     # STEP 0
int2 = 6                                                                 # STEP 1
int3 = 11                                                                # STEP 2
int1 = 12                                                                # STEP 3
int0 = 6                                                                 # STEP 4
avl2.insert(int3)                                                        # STEP 5
avl2.delete(int0)                                                        # STEP 6
avl2.insert(int1)                                                        # STEP 7
int3 = 11                                                                # STEP 8
avl2.delete(int1)                                                        # STEP 9
avl2.delete(int2)                                                       # STEP 10
avl2.insert(int1)                                                       # STEP 11
avl2.insert(int1)                                                       # STEP 12
avl2.delete(int2)                                                       # STEP 13
avl2.insert(int3)                                                       # STEP 14
avl2 == avl2                                                            # STEP 15
int0 = 8                                                                # STEP 16
result = avl2.inorder()                                                 # STEP 17
result = avl2.inorder()                                                 # STEP 18
result = avl2.inorder()                                                 # STEP 19
avl2.delete(int3)                                                       # STEP 20
int1 = 2                                                                # STEP 21
avl2.delete(int0)                                                       # STEP 22
avl2.delete(int3)                                                       # STEP 23
int3 = 12                                                               # STEP 24
avl2.insert(int0)                                                       # STEP 25
int2 = 7                                                                # STEP 26
int0 = 14                                                               # STEP 27
avl2.delete(int2)                                                       # STEP 28
avl2.insert(int3)                                                       # STEP 29
int3 = 19                                                               # STEP 30
avl2.insert(int1)                                                       # STEP 31
avl2.insert(int1)                                                       # STEP 32
avl2.insert(int2)                                                       # STEP 33
result = avl2.inorder()                                                 # STEP 34
avl2.insert(int2)                                                       # STEP 35
avl2.insert(int2)                                                       # STEP 36
avl2.insert(int1)                                                       # STEP 37
result = avl2.inorder()                                                 # STEP 38
avl2.delete(int3)                                                       # STEP 39
result = avl2.find(int1)                                                # STEP 40
avl2.insert(int2)                                                       # STEP 41
avl2.insert(int0)                                                       # STEP 42
avl2.delete(int2)                                                       # STEP 43
result = avl2.find(int2)                                                # STEP 44
avl2.insert(int0)                                                       # STEP 45
avl2.delete(int0)                                                       # STEP 46
avl2.delete(int0)                                                       # STEP 47
result = avl2.inorder()                                                 # STEP 48
int3 = 10                                                               # STEP 49
avl2.insert(int3)                                                       # STEP 50
result = avl2.find(int0)                                                # STEP 51
avl2.delete(int1)                                                       # STEP 52
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10589def0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE 4
int1 = 13                                                                # STEP 0
int0 = 14                                                                # STEP 1
int3 = 2                                                                 # STEP 2
int2 = 9                                                                 # STEP 3
avl0 = avl.AVLTree()                                                     # STEP 4
result = avl0.find(int2)                                                 # STEP 5
avl0.insert(int3)                                                        # STEP 6
result = avl0.find(int2)                                                 # STEP 7
avl0.insert(int0)                                                        # STEP 8
avl0.delete(int1)                                                        # STEP 9
avl0.insert(int2)                                                       # STEP 10
avl0.insert(int2)                                                       # STEP 11
avl0.delete(int2)                                                       # STEP 12
avl0.insert(int1)                                                       # STEP 13
avl0.insert(int3)                                                       # STEP 14
int2 = 2                                                                # STEP 15
int0 = 11                                                               # STEP 16
avl0.insert(int0)                                                       # STEP 17
avl1 = avl.AVLTree()                                                    # STEP 18
avl0.insert(int1)                                                       # STEP 19
avl0.delete(int1)                                                       # STEP 20
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104e73680>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
214 BRANCHES COVERED
161 STATEMENTS COVERED

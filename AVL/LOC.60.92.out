Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.989.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1058bd5a8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
Original test has 35 steps

SAVING TEST AS failure.989.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 10                                                                # STEP 0
ACTION: int0 = 10 
int0 = None : <type 'NoneType'>
=> int0 = 10 : <type 'int'>
==================================================
int3 = 13                                                                # STEP 1
ACTION: int3 = 13 
int3 = None : <type 'NoneType'>
=> int3 = 13 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 2
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x10599b488> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.delete(int0)                                                        # STEP 3
ACTION: avl0.delete(int0) 
int0 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10599b488> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int1 = 7                                                                 # STEP 4
ACTION: int1 = 7 
int1 = None : <type 'NoneType'>
=> int1 = 7 : <type 'int'>
==================================================
avl0.insert(int3)                                                        # STEP 5
ACTION: avl0.insert(int3) 
int3 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10599b488> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([13]) : <type 'set'>
==================================================
int3 = 10                                                                # STEP 6
ACTION: int3 = 10 
int3 = 13 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
avl0.delete(int3)                                                        # STEP 7
ACTION: avl0.delete(int3) 
int3 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10599b488> : <type 'instance'>
avl_REF0 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
result = avl0.find(int0)                                                 # STEP 8
ACTION: result = avl0.find(int0) 
int0 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10599b488> : <type 'instance'>
avl_REF0 = set([13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
result = avl0.find(int1)                                                 # STEP 9
ACTION: result = avl0.find(int1) 
int1 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10599b488> : <type 'instance'>
avl_REF0 = set([13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
int2 = 16                                                               # STEP 10
ACTION: int2 = 16 
int2 = None : <type 'NoneType'>
=> int2 = 16 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 11
ACTION: avl0.insert(int0) 
int0 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10599b488> : <type 'instance'>
avl_REF0 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([10, 13]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 12
ACTION: avl0.insert(int2) 
int2 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10599b488> : <type 'instance'>
avl_REF0 = set([10, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([16, 10, 13]) : <type 'set'>
==================================================
avl0 == avl0                                                            # STEP 13
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x10599b488> : <type 'instance'>
avl_REF0 = set([16, 10, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl0 == avl0                                                            # STEP 14
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x10599b488> : <type 'instance'>
avl_REF0 = set([16, 10, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
result = avl0.inorder()                                                 # STEP 15
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x10599b488> : <type 'instance'>
avl_REF0 = set([16, 10, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
result = avl0.inorder()                                                 # STEP 16
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x10599b488> : <type 'instance'>
avl_REF0 = set([16, 10, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.delete(int3)                                                       # STEP 17
ACTION: avl0.delete(int3) 
int3 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10599b488> : <type 'instance'>
avl_REF0 = set([16, 10, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([16, 13]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 18
ACTION: avl0.delete(int0) 
int0 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10599b488> : <type 'instance'>
avl_REF0 = set([16, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.delete(int3)                                                       # STEP 19
ACTION: avl0.delete(int3) 
int3 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10599b488> : <type 'instance'>
avl_REF0 = set([16, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.insert(int2)                                                       # STEP 20
ACTION: avl0.insert(int2) 
int2 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10599b488> : <type 'instance'>
avl_REF0 = set([16, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl0.insert(int2)                                                       # STEP 21
ACTION: avl0.insert(int2) 
int2 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10599b488> : <type 'instance'>
avl_REF0 = set([16, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl0.insert(int3)                                                       # STEP 22
ACTION: avl0.insert(int3) 
int3 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10599b488> : <type 'instance'>
avl_REF0 = set([16, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([16, 10, 13]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 23
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x10599b488> : <type 'instance'>
avl_REF0 = set([16, 10, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int1 = 12                                                               # STEP 24
ACTION: int1 = 12 
int1 = 7 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
int3 = 6                                                                # STEP 25
ACTION: int3 = 6 
int3 = 10 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 26
ACTION: avl0.insert(int0) 
int0 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10599b488> : <type 'instance'>
avl_REF0 = set([16, 10, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
avl0.delete(int3)                                                       # STEP 27
ACTION: avl0.delete(int3) 
int3 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10599b488> : <type 'instance'>
avl_REF0 = set([16, 10, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.insert(int1)                                                       # STEP 28
ACTION: avl0.insert(int1) 
int1 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10599b488> : <type 'instance'>
avl_REF0 = set([16, 10, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([16, 10, 12, 13]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 29
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x10599b488> : <type 'instance'>
avl_REF0 = set([16, 10, 12, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int3 = 2                                                                # STEP 30
ACTION: int3 = 2 
int3 = 6 : <type 'int'>
=> int3 = 2 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 31
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x10599b488> : <type 'instance'>
avl_REF0 = set([16, 10, 12, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int2)                                                       # STEP 32
ACTION: avl0.insert(int2) 
int2 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10599b488> : <type 'instance'>
avl_REF0 = set([16, 10, 12, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl0.insert(int1)                                                       # STEP 33
ACTION: avl0.insert(int1) 
int1 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10599b488> : <type 'instance'>
avl_REF0 = set([16, 10, 12, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl0.delete(int2)                                                       # STEP 34
ACTION: avl0.delete(int2) 
int2 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10599b488> : <type 'instance'>
avl_REF0 = set([16, 10, 12, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([10, 12, 13]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103ec0440>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103d789e0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 59 steps

SAVING TEST AS failure.989.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 2                                                                 # STEP 0
ACTION: int2 = 2 
int2 = None : <type 'NoneType'>
=> int2 = 2 : <type 'int'>
==================================================
int3 = 13                                                                # STEP 1
ACTION: int3 = 13 
int3 = None : <type 'NoneType'>
=> int3 = 13 : <type 'int'>
==================================================
int1 = 13                                                                # STEP 2
ACTION: int1 = 13 
int1 = None : <type 'NoneType'>
=> int1 = 13 : <type 'int'>
==================================================
int0 = 12                                                                # STEP 3
ACTION: int0 = 12 
int0 = None : <type 'NoneType'>
=> int0 = 12 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x103d75098> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl2.find(int3)                                                 # STEP 5
ACTION: result = avl2.find(int3) 
int3 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103d75098> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
result = avl2.inorder()                                                  # STEP 6
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x103d75098> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int3 = 7                                                                 # STEP 7
ACTION: int3 = 7 
int3 = 13 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
avl2.insert(int2)                                                        # STEP 8
ACTION: avl2.insert(int2) 
int2 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103d75098> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([2]) : <type 'set'>
==================================================
avl2.delete(int0)                                                        # STEP 9
ACTION: avl2.delete(int0) 
int0 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103d75098> : <type 'instance'>
avl_REF2 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int2 = 14                                                               # STEP 10
ACTION: int2 = 14 
int2 = 2 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 11
ACTION: avl2.insert(int0) 
int0 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103d75098> : <type 'instance'>
avl_REF2 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([2, 12]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 12
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x103d75098> : <type 'instance'>
avl_REF2 = set([2, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int0 = 18                                                               # STEP 13
ACTION: int0 = 18 
int0 = 12 : <type 'int'>
=> int0 = 18 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 14
ACTION: avl2.insert(int2) 
int2 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103d75098> : <type 'instance'>
avl_REF2 = set([2, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([2, 12, 14]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 15
ACTION: avl2.delete(int3) 
int3 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103d75098> : <type 'instance'>
avl_REF2 = set([2, 12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.insert(int1)                                                       # STEP 16
ACTION: avl2.insert(int1) 
int1 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103d75098> : <type 'instance'>
avl_REF2 = set([2, 12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([2, 12, 13, 14]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 17
ACTION: avl2.insert(int2) 
int2 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103d75098> : <type 'instance'>
avl_REF2 = set([2, 12, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl2.insert(int3)                                                       # STEP 18
ACTION: avl2.insert(int3) 
int3 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103d75098> : <type 'instance'>
avl_REF2 = set([2, 12, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([2, 12, 13, 14, 7]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 19
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x103d75098> : <type 'instance'>
avl_REF2 = set([2, 12, 13, 14, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int3)                                                       # STEP 20
ACTION: avl2.insert(int3) 
int3 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103d75098> : <type 'instance'>
avl_REF2 = set([2, 12, 13, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
avl2.insert(int2)                                                       # STEP 21
ACTION: avl2.insert(int2) 
int2 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103d75098> : <type 'instance'>
avl_REF2 = set([2, 12, 13, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl2.insert(int3)                                                       # STEP 22
ACTION: avl2.insert(int3) 
int3 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103d75098> : <type 'instance'>
avl_REF2 = set([2, 12, 13, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
avl2.delete(int0)                                                       # STEP 23
ACTION: avl2.delete(int0) 
int0 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103d75098> : <type 'instance'>
avl_REF2 = set([2, 12, 13, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int1 = 7                                                                # STEP 24
ACTION: int1 = 7 
int1 = 13 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 25
ACTION: avl2.delete(int0) 
int0 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103d75098> : <type 'instance'>
avl_REF2 = set([2, 12, 13, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.delete(int3)                                                       # STEP 26
ACTION: avl2.delete(int3) 
int3 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103d75098> : <type 'instance'>
avl_REF2 = set([2, 12, 13, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([2, 12, 13, 14]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 27
ACTION: avl2.insert(int3) 
int3 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103d75098> : <type 'instance'>
avl_REF2 = set([2, 12, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([2, 12, 13, 14, 7]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 28
ACTION: avl2.insert(int1) 
int1 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103d75098> : <type 'instance'>
avl_REF2 = set([2, 12, 13, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl2.delete(int3)                                                       # STEP 29
ACTION: avl2.delete(int3) 
int3 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103d75098> : <type 'instance'>
avl_REF2 = set([2, 12, 13, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([2, 12, 13, 14]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 30
ACTION: avl2.delete(int1) 
int1 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103d75098> : <type 'instance'>
avl_REF2 = set([2, 12, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.delete(int0)                                                       # STEP 31
ACTION: avl2.delete(int0) 
int0 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103d75098> : <type 'instance'>
avl_REF2 = set([2, 12, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
result = avl2.find(int3)                                                # STEP 32
ACTION: result = avl2.find(int3) 
int3 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103d75098> : <type 'instance'>
avl_REF2 = set([2, 12, 13, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl2.delete(int1)                                                       # STEP 33
ACTION: avl2.delete(int1) 
int1 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103d75098> : <type 'instance'>
avl_REF2 = set([2, 12, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.delete(int3)                                                       # STEP 34
ACTION: avl2.delete(int3) 
int3 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103d75098> : <type 'instance'>
avl_REF2 = set([2, 12, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.delete(int0)                                                       # STEP 35
ACTION: avl2.delete(int0) 
int0 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103d75098> : <type 'instance'>
avl_REF2 = set([2, 12, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.insert(int2)                                                       # STEP 36
ACTION: avl2.insert(int2) 
int2 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103d75098> : <type 'instance'>
avl_REF2 = set([2, 12, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl2 = avl.AVLTree()                                                    # STEP 37
ACTION: avl2 = avl.AVLTree() 
avl2 = <avl.AVLTree instance at 0x103d75098> : <type 'instance'>
avl_REF2 = set([2, 12, 13, 14]) : <type 'set'>
=> avl2 = <avl.AVLTree instance at 0x103f04d88> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int1 = 5                                                                # STEP 38
ACTION: int1 = 5 
int1 = 7 : <type 'int'>
=> int1 = 5 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 39
ACTION: avl2.delete(int3) 
int3 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103f04d88> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.insert(int0)                                                       # STEP 40
ACTION: avl2.insert(int0) 
int0 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103f04d88> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([18]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 41
ACTION: avl2.insert(int3) 
int3 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103f04d88> : <type 'instance'>
avl_REF2 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([18, 7]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 42
ACTION: avl2.delete(int3) 
int3 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103f04d88> : <type 'instance'>
avl_REF2 = set([18, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([18]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 43
ACTION: avl2.insert(int0) 
int0 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103f04d88> : <type 'instance'>
avl_REF2 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl2.insert(int1)                                                       # STEP 44
ACTION: avl2.insert(int1) 
int1 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103f04d88> : <type 'instance'>
avl_REF2 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([18, 5]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 45
ACTION: avl2.delete(int0) 
int0 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103f04d88> : <type 'instance'>
avl_REF2 = set([18, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([5]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 46
ACTION: avl2.insert(int0) 
int0 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103f04d88> : <type 'instance'>
avl_REF2 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([18, 5]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 47
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x103f04d88> : <type 'instance'>
avl_REF2 = set([18, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int1)                                                       # STEP 48
ACTION: avl2.insert(int1) 
int1 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103f04d88> : <type 'instance'>
avl_REF2 = set([18, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
int1 = 17                                                               # STEP 49
ACTION: int1 = 17 
int1 = 5 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
int2 = 2                                                                # STEP 50
ACTION: int2 = 2 
int2 = 14 : <type 'int'>
=> int2 = 2 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 51
ACTION: avl2.delete(int3) 
int3 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103f04d88> : <type 'instance'>
avl_REF2 = set([18, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.insert(int2)                                                       # STEP 52
ACTION: avl2.insert(int2) 
int2 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103f04d88> : <type 'instance'>
avl_REF2 = set([18, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([18, 2, 5]) : <type 'set'>
==================================================
int3 = 6                                                                # STEP 53
ACTION: int3 = 6 
int3 = 7 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 54
ACTION: avl2.insert(int1) 
int1 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103f04d88> : <type 'instance'>
avl_REF2 = set([18, 2, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([17, 18, 2, 5]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 55
ACTION: avl2.delete(int0) 
int0 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103f04d88> : <type 'instance'>
avl_REF2 = set([17, 18, 2, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([17, 2, 5]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 56
ACTION: avl2.insert(int3) 
int3 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103f04d88> : <type 'instance'>
avl_REF2 = set([17, 2, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([2, 5, 6, 17]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 57
ACTION: avl2.insert(int2) 
int2 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103f04d88> : <type 'instance'>
avl_REF2 = set([2, 5, 6, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl2.delete(int2)                                                       # STEP 58
ACTION: avl2.delete(int2) 
int2 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103f04d88> : <type 'instance'>
avl_REF2 = set([2, 5, 6, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([5, 6, 17]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105803368>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
  6 [2:0]
-- < 1 [1:-1]
---- > 2 [0:0] L
-- > 17 [1:0]
---- < 15 [0:0] L
---- > 18 [0:0] L
set([1, 2, 6, 15, 17, 18])
  6 [2:0]
-- < 1 [1:-1]
---- > 2 [0:0] L
-- > 17 [1:0]
---- < 15 [0:0] L
---- > 18 [0:0] L
set([1, 2, 6, 15, 17, 18])
  6 [2:0]
-- < 1 [1:-1]
---- > 2 [0:0] L
-- > 17 [1:0]
---- < 15 [0:0] L
---- > 18 [0:0] L
set([1, 2, 6, 15, 17, 18])
  6 [3:-1]
-- < 1 [1:-1]
---- > 2 [0:0] L
-- > 17 [2:1]
---- < 15 [1:1]
------ < 14 [0:0] L
---- > 18 [0:0] L
set([1, 2, 6, 14, 15, 17, 18])
  6 [3:-1]
-- < 1 [1:-1]
---- > 2 [0:0] L
-- > 17 [2:1]
---- < 15 [1:1]
------ < 14 [0:0] L
---- > 18 [0:0] L
set([1, 2, 6, 14, 15, 17, 18])
  6 [3:-1]
-- < 1 [1:-1]
---- > 2 [0:0] L
-- > 17 [2:1]
---- < 15 [1:1]
------ < 14 [0:0] L
---- > 18 [0:0] L
set([1, 2, 6, 14, 15, 17, 18])
  6 [3:-1]
-- < 1 [1:-1]
---- > 2 [0:0] L
-- > 17 [2:1]
---- < 15 [1:1]
------ < 14 [0:0] L
---- > 18 [0:0] L
set([1, 2, 6, 14, 15, 17, 18])
  6 [3:-1]
-- < 1 [1:-1]
---- > 2 [0:0] L
-- > 17 [2:1]
---- < 15 [1:1]
------ < 14 [0:0] L
---- > 18 [0:0] L
set([1, 2, 6, 14, 15, 17, 18])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1058cc518>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 38 steps

SAVING TEST AS failure.989.test.2
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 8                                                                 # STEP 0
ACTION: int3 = 8 
int3 = None : <type 'NoneType'>
=> int3 = 8 : <type 'int'>
==================================================
int1 = 12                                                                # STEP 1
ACTION: int1 = 12 
int1 = None : <type 'NoneType'>
=> int1 = 12 : <type 'int'>
==================================================
int0 = 20                                                                # STEP 2
ACTION: int0 = 20 
int0 = None : <type 'NoneType'>
=> int0 = 20 : <type 'int'>
==================================================
int2 = 1                                                                 # STEP 3
ACTION: int2 = 1 
int2 = None : <type 'NoneType'>
=> int2 = 1 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x1058ccc68> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.delete(int0)                                                        # STEP 5
ACTION: avl2.delete(int0) 
int0 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058ccc68> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.delete(int0)                                                        # STEP 6
ACTION: avl2.delete(int0) 
int0 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058ccc68> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.insert(int2)                                                        # STEP 7
ACTION: avl2.insert(int2) 
int2 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058ccc68> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([1]) : <type 'set'>
==================================================
avl2.delete(int0)                                                        # STEP 8
ACTION: avl2.delete(int0) 
int0 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058ccc68> : <type 'instance'>
avl_REF2 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.delete(int2)                                                        # STEP 9
ACTION: avl2.delete(int2) 
int2 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058ccc68> : <type 'instance'>
avl_REF2 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 10
ACTION: avl2.insert(int1) 
int1 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058ccc68> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([12]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 11
ACTION: avl2.insert(int3) 
int3 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058ccc68> : <type 'instance'>
avl_REF2 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([8, 12]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 12
ACTION: avl2.delete(int1) 
int1 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058ccc68> : <type 'instance'>
avl_REF2 = set([8, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([8]) : <type 'set'>
==================================================
int0 = 15                                                               # STEP 13
ACTION: int0 = 15 
int0 = 20 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 14
ACTION: avl2.insert(int2) 
int2 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058ccc68> : <type 'instance'>
avl_REF2 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([8, 1]) : <type 'set'>
==================================================
int1 = 11                                                               # STEP 15
ACTION: int1 = 11 
int1 = 12 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
int2 = 4                                                                # STEP 16
ACTION: int2 = 4 
int2 = 1 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 17
ACTION: avl2.insert(int1) 
int1 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058ccc68> : <type 'instance'>
avl_REF2 = set([8, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([8, 1, 11]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 18
ACTION: avl2.insert(int2) 
int2 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058ccc68> : <type 'instance'>
avl_REF2 = set([8, 1, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([8, 1, 11, 4]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 19
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x1058ccc68> : <type 'instance'>
avl_REF2 = set([8, 1, 11, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int2 = 8                                                                # STEP 20
ACTION: int2 = 8 
int2 = 4 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 21
ACTION: avl2.insert(int2) 
int2 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058ccc68> : <type 'instance'>
avl_REF2 = set([8, 1, 11, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl2.insert(int3)                                                       # STEP 22
ACTION: avl2.insert(int3) 
int3 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058ccc68> : <type 'instance'>
avl_REF2 = set([8, 1, 11, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
avl2.insert(int0)                                                       # STEP 23
ACTION: avl2.insert(int0) 
int0 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058ccc68> : <type 'instance'>
avl_REF2 = set([8, 1, 11, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([8, 1, 11, 4, 15]) : <type 'set'>
==================================================
int3 = 10                                                               # STEP 24
ACTION: int3 = 10 
int3 = 8 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 25
ACTION: avl2.insert(int2) 
int2 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058ccc68> : <type 'instance'>
avl_REF2 = set([8, 1, 11, 4, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl2.delete(int1)                                                       # STEP 26
ACTION: avl2.delete(int1) 
int1 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058ccc68> : <type 'instance'>
avl_REF2 = set([8, 1, 11, 4, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([8, 1, 4, 15]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 27
ACTION: avl2.delete(int1) 
int1 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058ccc68> : <type 'instance'>
avl_REF2 = set([8, 1, 4, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int0)                                                       # STEP 28
ACTION: avl2.insert(int0) 
int0 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058ccc68> : <type 'instance'>
avl_REF2 = set([8, 1, 4, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
int0 = 8                                                                # STEP 29
ACTION: int0 = 8 
int0 = 15 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
int1 = 20                                                               # STEP 30
ACTION: int1 = 20 
int1 = 11 : <type 'int'>
=> int1 = 20 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 31
ACTION: avl2.delete(int1) 
int1 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058ccc68> : <type 'instance'>
avl_REF2 = set([8, 1, 4, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int3)                                                       # STEP 32
ACTION: avl2.insert(int3) 
int3 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058ccc68> : <type 'instance'>
avl_REF2 = set([8, 1, 4, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([1, 4, 8, 10, 15]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 33
ACTION: avl2.delete(int3) 
int3 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058ccc68> : <type 'instance'>
avl_REF2 = set([1, 4, 8, 10, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([1, 4, 8, 15]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 34
ACTION: avl2.insert(int0) 
int0 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058ccc68> : <type 'instance'>
avl_REF2 = set([1, 4, 8, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl2 == avl2                                                            # STEP 35
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x1058ccc68> : <type 'instance'>
avl_REF2 = set([1, 4, 8, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
result = avl2.inorder()                                                 # STEP 36
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x1058ccc68> : <type 'instance'>
avl_REF2 = set([1, 4, 8, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int0)                                                       # STEP 37
ACTION: avl2.delete(int0) 
int0 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058ccc68> : <type 'instance'>
avl_REF2 = set([1, 4, 8, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([1, 4, 15]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1058ff5f0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 3 DISTINCT FAILURES
TEST #5 STEP #0 (0:00:31.107164) Fri Apr 28 07:52:13 2017 [ 160 stmts 212 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105839a70>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
Original test has 26 steps

SAVING TEST AS failure.989.test.3
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
avl0 = avl.AVLTree()                                                     # STEP 0
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x1058f0dd0> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
result = avl0.inorder()                                                  # STEP 1
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x1058f0dd0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int2 = 20                                                                # STEP 2
ACTION: int2 = 20 
int2 = None : <type 'NoneType'>
=> int2 = 20 : <type 'int'>
==================================================
avl0.delete(int2)                                                        # STEP 3
ACTION: avl0.delete(int2) 
int2 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058f0dd0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int0 = 19                                                                # STEP 4
ACTION: int0 = 19 
int0 = None : <type 'NoneType'>
=> int0 = 19 : <type 'int'>
==================================================
avl0.insert(int0)                                                        # STEP 5
ACTION: avl0.insert(int0) 
int0 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058f0dd0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([19]) : <type 'set'>
==================================================
avl0.insert(int0)                                                        # STEP 6
ACTION: avl0.insert(int0) 
int0 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058f0dd0> : <type 'instance'>
avl_REF0 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
avl0.insert(int2)                                                        # STEP 7
ACTION: avl0.insert(int2) 
int2 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058f0dd0> : <type 'instance'>
avl_REF0 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([19, 20]) : <type 'set'>
==================================================
avl0 == avl0                                                             # STEP 8
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x1058f0dd0> : <type 'instance'>
avl_REF0 = set([19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl0.delete(int0)                                                        # STEP 9
ACTION: avl0.delete(int0) 
int0 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058f0dd0> : <type 'instance'>
avl_REF0 = set([19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([20]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 10
ACTION: avl0.delete(int0) 
int0 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058f0dd0> : <type 'instance'>
avl_REF0 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.delete(int0)                                                       # STEP 11
ACTION: avl0.delete(int0) 
int0 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058f0dd0> : <type 'instance'>
avl_REF0 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int1 = 20                                                               # STEP 12
ACTION: int1 = 20 
int1 = None : <type 'NoneType'>
=> int1 = 20 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 13
ACTION: avl0.insert(int2) 
int2 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058f0dd0> : <type 'instance'>
avl_REF0 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl0.delete(int0)                                                       # STEP 14
ACTION: avl0.delete(int0) 
int0 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058f0dd0> : <type 'instance'>
avl_REF0 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int3 = 6                                                                # STEP 15
ACTION: int3 = 6 
int3 = None : <type 'NoneType'>
=> int3 = 6 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 16
ACTION: avl0.insert(int3) 
int3 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058f0dd0> : <type 'instance'>
avl_REF0 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([20, 6]) : <type 'set'>
==================================================
int2 = 15                                                               # STEP 17
ACTION: int2 = 15 
int2 = 20 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 18
ACTION: avl0.insert(int3) 
int3 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058f0dd0> : <type 'instance'>
avl_REF0 = set([20, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
int0 = 18                                                               # STEP 19
ACTION: int0 = 18 
int0 = 19 : <type 'int'>
=> int0 = 18 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 20
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x1058f0dd0> : <type 'instance'>
avl_REF0 = set([20, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.delete(int0)                                                       # STEP 21
ACTION: avl0.delete(int0) 
int0 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058f0dd0> : <type 'instance'>
avl_REF0 = set([20, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.insert(int0)                                                       # STEP 22
ACTION: avl0.insert(int0) 
int0 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058f0dd0> : <type 'instance'>
avl_REF0 = set([20, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([18, 20, 6]) : <type 'set'>
==================================================
result = avl0.find(int2)                                                # STEP 23
ACTION: result = avl0.find(int2) 
int2 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058f0dd0> : <type 'instance'>
avl_REF0 = set([18, 20, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl0.insert(int2)                                                       # STEP 24
ACTION: avl0.insert(int2) 
int2 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058f0dd0> : <type 'instance'>
avl_REF0 = set([18, 20, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([18, 20, 6, 15]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 25
ACTION: avl0.delete(int1) 
int1 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058f0dd0> : <type 'instance'>
avl_REF0 = set([18, 20, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([18, 6, 15]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1058e2ea8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 4 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105809320>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 45 steps

SAVING TEST AS failure.989.test.4
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 17                                                                # STEP 0
ACTION: int2 = 17 
int2 = None : <type 'NoneType'>
=> int2 = 17 : <type 'int'>
==================================================
int1 = 1                                                                 # STEP 1
ACTION: int1 = 1 
int1 = None : <type 'NoneType'>
=> int1 = 1 : <type 'int'>
==================================================
int3 = 5                                                                 # STEP 2
ACTION: int3 = 5 
int3 = None : <type 'NoneType'>
=> int3 = 5 : <type 'int'>
==================================================
int0 = 20                                                                # STEP 3
ACTION: int0 = 20 
int0 = None : <type 'NoneType'>
=> int0 = 20 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x1058097e8> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int3)                                                        # STEP 5
ACTION: avl2.insert(int3) 
int3 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058097e8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([5]) : <type 'set'>
==================================================
result = avl2.find(int0)                                                 # STEP 6
ACTION: result = avl2.find(int0) 
int0 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058097e8> : <type 'instance'>
avl_REF2 = set([5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl2.delete(int3)                                                        # STEP 7
ACTION: avl2.delete(int3) 
int3 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058097e8> : <type 'instance'>
avl_REF2 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.delete(int0)                                                        # STEP 8
ACTION: avl2.delete(int0) 
int0 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058097e8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int3 = 2                                                                 # STEP 9
ACTION: int3 = 2 
int3 = 5 : <type 'int'>
=> int3 = 2 : <type 'int'>
==================================================
int0 = 20                                                               # STEP 10
ACTION: int0 = 20 
int0 = 20 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 11
ACTION: avl2.insert(int2) 
int2 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058097e8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([17]) : <type 'set'>
==================================================
int2 = 17                                                               # STEP 12
ACTION: int2 = 17 
int2 = 17 : <type 'int'>
==================================================
avl2 == avl2                                                            # STEP 13
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x1058097e8> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl2.delete(int3)                                                       # STEP 14
ACTION: avl2.delete(int3) 
int3 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058097e8> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.delete(int2)                                                       # STEP 15
ACTION: avl2.delete(int2) 
int2 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058097e8> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 16
ACTION: avl2.delete(int1) 
int1 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058097e8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int3)                                                       # STEP 17
ACTION: avl2.insert(int3) 
int3 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058097e8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([2]) : <type 'set'>
==================================================
int2 = 12                                                               # STEP 18
ACTION: int2 = 12 
int2 = 17 : <type 'int'>
=> int2 = 12 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 19
ACTION: avl2.insert(int3) 
int3 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058097e8> : <type 'instance'>
avl_REF2 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
int3 = 6                                                                # STEP 20
ACTION: int3 = 6 
int3 = 2 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 21
ACTION: avl2.insert(int3) 
int3 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058097e8> : <type 'instance'>
avl_REF2 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([2, 6]) : <type 'set'>
==================================================
result = avl2.find(int2)                                                # STEP 22
ACTION: result = avl2.find(int2) 
int2 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058097e8> : <type 'instance'>
avl_REF2 = set([2, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl2.insert(int3)                                                       # STEP 23
ACTION: avl2.insert(int3) 
int3 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058097e8> : <type 'instance'>
avl_REF2 = set([2, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
int3 = 4                                                                # STEP 24
ACTION: int3 = 4 
int3 = 6 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 25
ACTION: avl2.insert(int2) 
int2 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058097e8> : <type 'instance'>
avl_REF2 = set([2, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([2, 12, 6]) : <type 'set'>
==================================================
int1 = 10                                                               # STEP 26
ACTION: int1 = 10 
int1 = 1 : <type 'int'>
=> int1 = 10 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 27
ACTION: avl2.insert(int0) 
int0 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058097e8> : <type 'instance'>
avl_REF2 = set([2, 12, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([20, 2, 12, 6]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 28
ACTION: avl2.delete(int1) 
int1 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058097e8> : <type 'instance'>
avl_REF2 = set([20, 2, 12, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int0 = 17                                                               # STEP 29
ACTION: int0 = 17 
int0 = 20 : <type 'int'>
=> int0 = 17 : <type 'int'>
==================================================
int1 = 5                                                                # STEP 30
ACTION: int1 = 5 
int1 = 10 : <type 'int'>
=> int1 = 5 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 31
ACTION: avl2.delete(int2) 
int2 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058097e8> : <type 'instance'>
avl_REF2 = set([20, 2, 12, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([20, 2, 6]) : <type 'set'>
==================================================
int2 = 3                                                                # STEP 32
ACTION: int2 = 3 
int2 = 12 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 33
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x1058097e8> : <type 'instance'>
avl_REF2 = set([20, 2, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl2.find(int2)                                                # STEP 34
ACTION: result = avl2.find(int2) 
int2 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058097e8> : <type 'instance'>
avl_REF2 = set([20, 2, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl2.insert(int3)                                                       # STEP 35
ACTION: avl2.insert(int3) 
int3 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058097e8> : <type 'instance'>
avl_REF2 = set([20, 2, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([20, 2, 4, 6]) : <type 'set'>
==================================================
result = avl2.find(int1)                                                # STEP 36
ACTION: result = avl2.find(int1) 
int1 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058097e8> : <type 'instance'>
avl_REF2 = set([20, 2, 4, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
result = avl2.find(int3)                                                # STEP 37
ACTION: result = avl2.find(int3) 
int3 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058097e8> : <type 'instance'>
avl_REF2 = set([20, 2, 4, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl2.insert(int0)                                                       # STEP 38
ACTION: avl2.insert(int0) 
int0 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058097e8> : <type 'instance'>
avl_REF2 = set([20, 2, 4, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([2, 4, 6, 17, 20]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 39
ACTION: avl2.insert(int2) 
int2 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058097e8> : <type 'instance'>
avl_REF2 = set([2, 4, 6, 17, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([2, 3, 4, 6, 17, 20]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 40
ACTION: avl2.insert(int1) 
int1 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058097e8> : <type 'instance'>
avl_REF2 = set([2, 3, 4, 6, 17, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([2, 3, 4, 5, 6, 17, 20]) : <type 'set'>
==================================================
int1 = 20                                                               # STEP 41
ACTION: int1 = 20 
int1 = 5 : <type 'int'>
=> int1 = 20 : <type 'int'>
==================================================
int2 = 1                                                                # STEP 42
ACTION: int2 = 1 
int2 = 3 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
int0 = 5                                                                # STEP 43
ACTION: int0 = 5 
int0 = 17 : <type 'int'>
=> int0 = 5 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 44
ACTION: avl2.delete(int1) 
int1 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1058097e8> : <type 'instance'>
avl_REF2 = set([2, 3, 4, 5, 6, 17, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([2, 3, 4, 5, 6, 17]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1058d32d8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 5 DISTINCT FAILURES
  14 [2:0]
-- < 10 [1:1]
---- < 6 [0:0] L
-- > 18 [1:0]
---- < 16 [0:0] L
---- > 20 [0:0] L
set([6, 10, 14, 16, 18, 20])
  14 [2:0]
-- < 10 [1:1]
---- < 6 [0:0] L
-- > 18 [1:0]
---- < 16 [0:0] L
---- > 20 [0:0] L
set([6, 10, 14, 16, 18, 20])
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 3
STOPPING TESTING DUE TO TIMEOUT
8.72073294876 PERCENT COVERED
60.1974849701 TOTAL RUNTIME
9 EXECUTED
506 TOTAL TEST OPERATIONS
21.2660477161 TIME SPENT EXECUTING TEST OPERATIONS
0.0545520782471 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
21.3864328861 TIME SPENT CHECKING PROPERTIES
42.6524806023 TOTAL TIME SPENT RUNNING SUT
0.00497984886169 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
5 FAILED
0 REPEATS OF FAILURES
5 ACTUAL DISTINCT FAILURES

FAILURE 0
int0 = 10                                                                # STEP 0
int3 = 13                                                                # STEP 1
avl0 = avl.AVLTree()                                                     # STEP 2
avl0.delete(int0)                                                        # STEP 3
int1 = 7                                                                 # STEP 4
avl0.insert(int3)                                                        # STEP 5
int3 = 10                                                                # STEP 6
avl0.delete(int3)                                                        # STEP 7
result = avl0.find(int0)                                                 # STEP 8
result = avl0.find(int1)                                                 # STEP 9
int2 = 16                                                               # STEP 10
avl0.insert(int0)                                                       # STEP 11
avl0.insert(int2)                                                       # STEP 12
avl0 == avl0                                                            # STEP 13
avl0 == avl0                                                            # STEP 14
result = avl0.inorder()                                                 # STEP 15
result = avl0.inorder()                                                 # STEP 16
avl0.delete(int3)                                                       # STEP 17
avl0.delete(int0)                                                       # STEP 18
avl0.delete(int3)                                                       # STEP 19
avl0.insert(int2)                                                       # STEP 20
avl0.insert(int2)                                                       # STEP 21
avl0.insert(int3)                                                       # STEP 22
result = avl0.inorder()                                                 # STEP 23
int1 = 12                                                               # STEP 24
int3 = 6                                                                # STEP 25
avl0.insert(int0)                                                       # STEP 26
avl0.delete(int3)                                                       # STEP 27
avl0.insert(int1)                                                       # STEP 28
result = avl0.inorder()                                                 # STEP 29
int3 = 2                                                                # STEP 30
result = avl0.inorder()                                                 # STEP 31
avl0.insert(int2)                                                       # STEP 32
avl0.insert(int1)                                                       # STEP 33
avl0.delete(int2)                                                       # STEP 34
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103ec0440>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE 1
int2 = 2                                                                 # STEP 0
int3 = 13                                                                # STEP 1
int1 = 13                                                                # STEP 2
int0 = 12                                                                # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
result = avl2.find(int3)                                                 # STEP 5
result = avl2.inorder()                                                  # STEP 6
int3 = 7                                                                 # STEP 7
avl2.insert(int2)                                                        # STEP 8
avl2.delete(int0)                                                        # STEP 9
int2 = 14                                                               # STEP 10
avl2.insert(int0)                                                       # STEP 11
result = avl2.inorder()                                                 # STEP 12
int0 = 18                                                               # STEP 13
avl2.insert(int2)                                                       # STEP 14
avl2.delete(int3)                                                       # STEP 15
avl2.insert(int1)                                                       # STEP 16
avl2.insert(int2)                                                       # STEP 17
avl2.insert(int3)                                                       # STEP 18
result = avl2.inorder()                                                 # STEP 19
avl2.insert(int3)                                                       # STEP 20
avl2.insert(int2)                                                       # STEP 21
avl2.insert(int3)                                                       # STEP 22
avl2.delete(int0)                                                       # STEP 23
int1 = 7                                                                # STEP 24
avl2.delete(int0)                                                       # STEP 25
avl2.delete(int3)                                                       # STEP 26
avl2.insert(int3)                                                       # STEP 27
avl2.insert(int1)                                                       # STEP 28
avl2.delete(int3)                                                       # STEP 29
avl2.delete(int1)                                                       # STEP 30
avl2.delete(int0)                                                       # STEP 31
result = avl2.find(int3)                                                # STEP 32
avl2.delete(int1)                                                       # STEP 33
avl2.delete(int3)                                                       # STEP 34
avl2.delete(int0)                                                       # STEP 35
avl2.insert(int2)                                                       # STEP 36
avl2 = avl.AVLTree()                                                    # STEP 37
int1 = 5                                                                # STEP 38
avl2.delete(int3)                                                       # STEP 39
avl2.insert(int0)                                                       # STEP 40
avl2.insert(int3)                                                       # STEP 41
avl2.delete(int3)                                                       # STEP 42
avl2.insert(int0)                                                       # STEP 43
avl2.insert(int1)                                                       # STEP 44
avl2.delete(int0)                                                       # STEP 45
avl2.insert(int0)                                                       # STEP 46
result = avl2.inorder()                                                 # STEP 47
avl2.insert(int1)                                                       # STEP 48
int1 = 17                                                               # STEP 49
int2 = 2                                                                # STEP 50
avl2.delete(int3)                                                       # STEP 51
avl2.insert(int2)                                                       # STEP 52
int3 = 6                                                                # STEP 53
avl2.insert(int1)                                                       # STEP 54
avl2.delete(int0)                                                       # STEP 55
avl2.insert(int3)                                                       # STEP 56
avl2.insert(int2)                                                       # STEP 57
avl2.delete(int2)                                                       # STEP 58
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105803368>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE 2
int3 = 8                                                                 # STEP 0
int1 = 12                                                                # STEP 1
int0 = 20                                                                # STEP 2
int2 = 1                                                                 # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
avl2.delete(int0)                                                        # STEP 5
avl2.delete(int0)                                                        # STEP 6
avl2.insert(int2)                                                        # STEP 7
avl2.delete(int0)                                                        # STEP 8
avl2.delete(int2)                                                        # STEP 9
avl2.insert(int1)                                                       # STEP 10
avl2.insert(int3)                                                       # STEP 11
avl2.delete(int1)                                                       # STEP 12
int0 = 15                                                               # STEP 13
avl2.insert(int2)                                                       # STEP 14
int1 = 11                                                               # STEP 15
int2 = 4                                                                # STEP 16
avl2.insert(int1)                                                       # STEP 17
avl2.insert(int2)                                                       # STEP 18
result = avl2.inorder()                                                 # STEP 19
int2 = 8                                                                # STEP 20
avl2.insert(int2)                                                       # STEP 21
avl2.insert(int3)                                                       # STEP 22
avl2.insert(int0)                                                       # STEP 23
int3 = 10                                                               # STEP 24
avl2.insert(int2)                                                       # STEP 25
avl2.delete(int1)                                                       # STEP 26
avl2.delete(int1)                                                       # STEP 27
avl2.insert(int0)                                                       # STEP 28
int0 = 8                                                                # STEP 29
int1 = 20                                                               # STEP 30
avl2.delete(int1)                                                       # STEP 31
avl2.insert(int3)                                                       # STEP 32
avl2.delete(int3)                                                       # STEP 33
avl2.insert(int0)                                                       # STEP 34
avl2 == avl2                                                            # STEP 35
result = avl2.inorder()                                                 # STEP 36
avl2.delete(int0)                                                       # STEP 37
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1058ff5f0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE 3
avl0 = avl.AVLTree()                                                     # STEP 0
result = avl0.inorder()                                                  # STEP 1
int2 = 20                                                                # STEP 2
avl0.delete(int2)                                                        # STEP 3
int0 = 19                                                                # STEP 4
avl0.insert(int0)                                                        # STEP 5
avl0.insert(int0)                                                        # STEP 6
avl0.insert(int2)                                                        # STEP 7
avl0 == avl0                                                             # STEP 8
avl0.delete(int0)                                                        # STEP 9
avl0.delete(int0)                                                       # STEP 10
avl0.delete(int0)                                                       # STEP 11
int1 = 20                                                               # STEP 12
avl0.insert(int2)                                                       # STEP 13
avl0.delete(int0)                                                       # STEP 14
int3 = 6                                                                # STEP 15
avl0.insert(int3)                                                       # STEP 16
int2 = 15                                                               # STEP 17
avl0.insert(int3)                                                       # STEP 18
int0 = 18                                                               # STEP 19
result = avl0.inorder()                                                 # STEP 20
avl0.delete(int0)                                                       # STEP 21
avl0.insert(int0)                                                       # STEP 22
result = avl0.find(int2)                                                # STEP 23
avl0.insert(int2)                                                       # STEP 24
avl0.delete(int1)                                                       # STEP 25
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1058e2ea8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE 4
int2 = 17                                                                # STEP 0
int1 = 1                                                                 # STEP 1
int3 = 5                                                                 # STEP 2
int0 = 20                                                                # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
avl2.insert(int3)                                                        # STEP 5
result = avl2.find(int0)                                                 # STEP 6
avl2.delete(int3)                                                        # STEP 7
avl2.delete(int0)                                                        # STEP 8
int3 = 2                                                                 # STEP 9
int0 = 20                                                               # STEP 10
avl2.insert(int2)                                                       # STEP 11
int2 = 17                                                               # STEP 12
avl2 == avl2                                                            # STEP 13
avl2.delete(int3)                                                       # STEP 14
avl2.delete(int2)                                                       # STEP 15
avl2.delete(int1)                                                       # STEP 16
avl2.insert(int3)                                                       # STEP 17
int2 = 12                                                               # STEP 18
avl2.insert(int3)                                                       # STEP 19
int3 = 6                                                                # STEP 20
avl2.insert(int3)                                                       # STEP 21
result = avl2.find(int2)                                                # STEP 22
avl2.insert(int3)                                                       # STEP 23
int3 = 4                                                                # STEP 24
avl2.insert(int2)                                                       # STEP 25
int1 = 10                                                               # STEP 26
avl2.insert(int0)                                                       # STEP 27
avl2.delete(int1)                                                       # STEP 28
int0 = 17                                                               # STEP 29
int1 = 5                                                                # STEP 30
avl2.delete(int2)                                                       # STEP 31
int2 = 3                                                                # STEP 32
result = avl2.inorder()                                                 # STEP 33
result = avl2.find(int2)                                                # STEP 34
avl2.insert(int3)                                                       # STEP 35
result = avl2.find(int1)                                                # STEP 36
result = avl2.find(int3)                                                # STEP 37
avl2.insert(int0)                                                       # STEP 38
avl2.insert(int2)                                                       # STEP 39
avl2.insert(int1)                                                       # STEP 40
int1 = 20                                                               # STEP 41
int2 = 1                                                                # STEP 42
int0 = 5                                                                # STEP 43
avl2.delete(int1)                                                       # STEP 44
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1058d32d8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
220 BRANCHES COVERED
164 STATEMENTS COVERED

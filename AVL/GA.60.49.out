Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.14397.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  5 [3:-1]
-- < 4 [1:1]
---- < 3 [0:0] L
-- > 15 [2:1]
---- < 6 [1:-1]
------ > 14 [0:0] L
---- > 19 [0:0] L
set([3, 4, 5, 6, 14, 15, 19])
  6 [2:0]
-- < 4 [1:1]
---- < 2 [0:0] L
-- > 15 [1:0]
---- < 13 [0:0] L
---- > 17 [0:0] L
set([2, 4, 6, 13, 15, 17])
  6 [2:0]
-- < 4 [1:1]
---- < 2 [0:0] L
-- > 15 [1:0]
---- < 13 [0:0] L
---- > 17 [0:0] L
set([2, 4, 6, 13, 15, 17])
TEST #3 STEP #85 (0:00:30.035539) Sun Apr 30 04:01:31 2017 [ 162 stmts 215 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1034276c8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
Original test has 86 steps

SAVING TEST AS failure.14397.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 5                                                                 # STEP 0
ACTION: int2 = 5 
int2 = None : <type 'NoneType'>
=> int2 = 5 : <type 'int'>
==================================================
int1 = 10                                                                # STEP 1
ACTION: int1 = 10 
int1 = None : <type 'NoneType'>
=> int1 = 10 : <type 'int'>
==================================================
int3 = 15                                                                # STEP 2
ACTION: int3 = 15 
int3 = None : <type 'NoneType'>
=> int3 = 15 : <type 'int'>
==================================================
int0 = 14                                                                # STEP 3
ACTION: int0 = 14 
int0 = None : <type 'NoneType'>
=> int0 = 14 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x101d1e290> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.delete(int1)                                                        # STEP 5
ACTION: avl2.delete(int1) 
int1 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101d1e290> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int1 = 16                                                                # STEP 6
ACTION: int1 = 16 
int1 = 10 : <type 'int'>
=> int1 = 16 : <type 'int'>
==================================================
avl2.insert(int3)                                                        # STEP 7
ACTION: avl2.insert(int3) 
int3 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101d1e290> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([15]) : <type 'set'>
==================================================
int3 = 12                                                                # STEP 8
ACTION: int3 = 12 
int3 = 15 : <type 'int'>
=> int3 = 12 : <type 'int'>
==================================================
result = avl2.find(int0)                                                 # STEP 9
ACTION: result = avl2.find(int0) 
int0 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101d1e290> : <type 'instance'>
avl_REF2 = set([15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
int0 = 6                                                                # STEP 10
ACTION: int0 = 6 
int0 = 14 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 11
ACTION: avl2.delete(int1) 
int1 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101d1e290> : <type 'instance'>
avl_REF2 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.delete(int2)                                                       # STEP 12
ACTION: avl2.delete(int2) 
int2 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101d1e290> : <type 'instance'>
avl_REF2 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2 == avl2                                                            # STEP 13
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x101d1e290> : <type 'instance'>
avl_REF2 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
int2 = 19                                                               # STEP 14
ACTION: int2 = 19 
int2 = 5 : <type 'int'>
=> int2 = 19 : <type 'int'>
==================================================
int1 = 3                                                                # STEP 15
ACTION: int1 = 3 
int1 = 16 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
result = avl2.find(int2)                                                # STEP 16
ACTION: result = avl2.find(int2) 
int2 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101d1e290> : <type 'instance'>
avl_REF2 = set([15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl2.delete(int0)                                                       # STEP 17
ACTION: avl2.delete(int0) 
int0 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101d1e290> : <type 'instance'>
avl_REF2 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int2 = 7                                                                # STEP 18
ACTION: int2 = 7 
int2 = 19 : <type 'int'>
=> int2 = 7 : <type 'int'>
==================================================
int0 = 1                                                                # STEP 19
ACTION: int0 = 1 
int0 = 6 : <type 'int'>
=> int0 = 1 : <type 'int'>
==================================================
result = avl2.find(int1)                                                # STEP 20
ACTION: result = avl2.find(int1) 
int1 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101d1e290> : <type 'instance'>
avl_REF2 = set([15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
result = avl2.find(int1)                                                # STEP 21
ACTION: result = avl2.find(int1) 
int1 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101d1e290> : <type 'instance'>
avl_REF2 = set([15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int1 = 4                                                                # STEP 22
ACTION: int1 = 4 
int1 = 3 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 23
ACTION: avl2.insert(int1) 
int1 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101d1e290> : <type 'instance'>
avl_REF2 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([4, 15]) : <type 'set'>
==================================================
int1 = 12                                                               # STEP 24
ACTION: int1 = 12 
int1 = 4 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 25
ACTION: avl2.insert(int3) 
int3 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101d1e290> : <type 'instance'>
avl_REF2 = set([4, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([12, 4, 15]) : <type 'set'>
==================================================
int3 = 17                                                               # STEP 26
ACTION: int3 = 17 
int3 = 12 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
result = avl2.find(int2)                                                # STEP 27
ACTION: result = avl2.find(int2) 
int2 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101d1e290> : <type 'instance'>
avl_REF2 = set([12, 4, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int2 = 13                                                               # STEP 28
ACTION: int2 = 13 
int2 = 7 : <type 'int'>
=> int2 = 13 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 29
ACTION: avl2.delete(int1) 
int1 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101d1e290> : <type 'instance'>
avl_REF2 = set([12, 4, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([4, 15]) : <type 'set'>
==================================================
int1 = 6                                                                # STEP 30
ACTION: int1 = 6 
int1 = 12 : <type 'int'>
=> int1 = 6 : <type 'int'>
==================================================
avl2 == avl2                                                            # STEP 31
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x101d1e290> : <type 'instance'>
avl_REF2 = set([4, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl2.insert(int1)                                                       # STEP 32
ACTION: avl2.insert(int1) 
int1 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101d1e290> : <type 'instance'>
avl_REF2 = set([4, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([4, 6, 15]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 33
ACTION: avl2.insert(int2) 
int2 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101d1e290> : <type 'instance'>
avl_REF2 = set([4, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([4, 13, 6, 15]) : <type 'set'>
==================================================
int1 = 20                                                               # STEP 34
ACTION: int1 = 20 
int1 = 6 : <type 'int'>
=> int1 = 20 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 35
ACTION: avl2.delete(int1) 
int1 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101d1e290> : <type 'instance'>
avl_REF2 = set([4, 13, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int1 = 16                                                               # STEP 36
ACTION: int1 = 16 
int1 = 20 : <type 'int'>
=> int1 = 16 : <type 'int'>
==================================================
result = avl2.find(int2)                                                # STEP 37
ACTION: result = avl2.find(int2) 
int2 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101d1e290> : <type 'instance'>
avl_REF2 = set([4, 13, 6, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
result = avl2.find(int2)                                                # STEP 38
ACTION: result = avl2.find(int2) 
int2 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101d1e290> : <type 'instance'>
avl_REF2 = set([4, 13, 6, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int2 = 6                                                                # STEP 39
ACTION: int2 = 6 
int2 = 13 : <type 'int'>
=> int2 = 6 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 40
ACTION: avl2.delete(int1) 
int1 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101d1e290> : <type 'instance'>
avl_REF2 = set([4, 13, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.delete(int0)                                                       # STEP 41
ACTION: avl2.delete(int0) 
int0 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101d1e290> : <type 'instance'>
avl_REF2 = set([4, 13, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int1 = 2                                                                # STEP 42
ACTION: int1 = 2 
int1 = 16 : <type 'int'>
=> int1 = 2 : <type 'int'>
==================================================
int0 = 5                                                                # STEP 43
ACTION: int0 = 5 
int0 = 1 : <type 'int'>
=> int0 = 5 : <type 'int'>
==================================================
result = avl2.find(int3)                                                # STEP 44
ACTION: result = avl2.find(int3) 
int3 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101d1e290> : <type 'instance'>
avl_REF2 = set([4, 13, 6, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl2.insert(int3)                                                       # STEP 45
ACTION: avl2.insert(int3) 
int3 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101d1e290> : <type 'instance'>
avl_REF2 = set([4, 13, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([17, 4, 13, 6, 15]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 46
ACTION: avl2.insert(int1) 
int1 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101d1e290> : <type 'instance'>
avl_REF2 = set([17, 4, 13, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([2, 4, 6, 13, 15, 17]) : <type 'set'>
==================================================
int1 = 8                                                                # STEP 47
ACTION: int1 = 8 
int1 = 2 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
int3 = 12                                                               # STEP 48
ACTION: int3 = 12 
int3 = 17 : <type 'int'>
=> int3 = 12 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 49
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x101d1e290> : <type 'instance'>
avl_REF2 = set([2, 4, 6, 13, 15, 17]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl0 = avl.AVLTree()                                                    # STEP 50
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x101e7da70> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 51
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x101e7da70> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl2.insert(int2)                                                       # STEP 52
ACTION: avl2.insert(int2) 
int2 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101d1e290> : <type 'instance'>
avl_REF2 = set([2, 4, 6, 13, 15, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl2 == avl0                                                            # STEP 53
ACTION: avl2 == avl0 
avl2 = <avlbug2.AVLTree instance at 0x101d1e290> : <type 'instance'>
avl0 = <avlbug2.AVLTree instance at 0x101e7da70> : <type 'instance'>
avl_REF2 = set([2, 4, 6, 13, 15, 17]) : <type 'set'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF0 
==================================================
result = avl2.inorder()                                                 # STEP 54
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x101d1e290> : <type 'instance'>
avl_REF2 = set([2, 4, 6, 13, 15, 17]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int2 = 16                                                               # STEP 55
ACTION: int2 = 16 
int2 = 6 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
result = avl0.find(int2)                                                # STEP 56
ACTION: result = avl0.find(int2) 
int2 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101e7da70> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
int2 = 15                                                               # STEP 57
ACTION: int2 = 15 
int2 = 16 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
avl2.display()                                                          # STEP 58
ACTION: avl2.display() 
avl2 = <avlbug2.AVLTree instance at 0x101d1e290> : <type 'instance'>
avl_REF2 = set([2, 4, 6, 13, 15, 17]) : <type 'set'>
  6 [2:0]
-- < 4 [1:1]
---- < 2 [0:0] L
-- > 15 [1:0]
---- < 13 [0:0] L
---- > 17 [0:0] L
REFERENCE ACTION: print(avl_REF2) 
set([2, 4, 6, 13, 15, 17])
==================================================
result = avl2.find(int2)                                                # STEP 59
ACTION: result = avl2.find(int2) 
int2 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101d1e290> : <type 'instance'>
avl_REF2 = set([2, 4, 6, 13, 15, 17]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl2.display()                                                          # STEP 60
ACTION: avl2.display() 
avl2 = <avlbug2.AVLTree instance at 0x101d1e290> : <type 'instance'>
avl_REF2 = set([2, 4, 6, 13, 15, 17]) : <type 'set'>
  6 [2:0]
-- < 4 [1:1]
---- < 2 [0:0] L
-- > 15 [1:0]
---- < 13 [0:0] L
---- > 17 [0:0] L
REFERENCE ACTION: print(avl_REF2) 
set([2, 4, 6, 13, 15, 17])
==================================================
int2 = 3                                                                # STEP 61
ACTION: int2 = 3 
int2 = 15 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 62
ACTION: avl2.delete(int2) 
int2 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101d1e290> : <type 'instance'>
avl_REF2 = set([2, 4, 6, 13, 15, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
result = avl2.find(int2)                                                # STEP 63
ACTION: result = avl2.find(int2) 
int2 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101d1e290> : <type 'instance'>
avl_REF2 = set([2, 4, 6, 13, 15, 17]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl2 == avl2                                                            # STEP 64
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x101d1e290> : <type 'instance'>
avl_REF2 = set([2, 4, 6, 13, 15, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl0.insert(int1)                                                       # STEP 65
ACTION: avl0.insert(int1) 
int1 = 8 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101e7da70> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([8]) : <type 'set'>
==================================================
result = avl0.find(int3)                                                # STEP 66
ACTION: result = avl0.find(int3) 
int3 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101e7da70> : <type 'instance'>
avl_REF0 = set([8]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
int1 = 12                                                               # STEP 67
ACTION: int1 = 12 
int1 = 8 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 68
ACTION: avl2.insert(int2) 
int2 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101d1e290> : <type 'instance'>
avl_REF2 = set([2, 4, 6, 13, 15, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([2, 3, 4, 6, 13, 15, 17]) : <type 'set'>
==================================================
int2 = 14                                                               # STEP 69
ACTION: int2 = 14 
int2 = 3 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
result = avl2.find(int0)                                                # STEP 70
ACTION: result = avl2.find(int0) 
int0 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101d1e290> : <type 'instance'>
avl_REF2 = set([2, 3, 4, 6, 13, 15, 17]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
int3 = 2                                                                # STEP 71
ACTION: int3 = 2 
int3 = 12 : <type 'int'>
=> int3 = 2 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 72
ACTION: avl2.insert(int0) 
int0 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101d1e290> : <type 'instance'>
avl_REF2 = set([2, 3, 4, 6, 13, 15, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([2, 3, 4, 5, 6, 13, 15, 17]) : <type 'set'>
==================================================
int0 = 1                                                                # STEP 73
ACTION: int0 = 1 
int0 = 5 : <type 'int'>
=> int0 = 1 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 74
ACTION: avl0.delete(int0) 
int0 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101e7da70> : <type 'instance'>
avl_REF0 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int0 = 17                                                               # STEP 75
ACTION: int0 = 17 
int0 = 1 : <type 'int'>
=> int0 = 17 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 76
ACTION: avl2.delete(int2) 
int2 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101d1e290> : <type 'instance'>
avl_REF2 = set([2, 3, 4, 5, 6, 13, 15, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int2 = 15                                                               # STEP 77
ACTION: int2 = 15 
int2 = 14 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
avl0 == avl0                                                            # STEP 78
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x101e7da70> : <type 'instance'>
avl_REF0 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl2 == avl0                                                            # STEP 79
ACTION: avl2 == avl0 
avl2 = <avlbug2.AVLTree instance at 0x101d1e290> : <type 'instance'>
avl0 = <avlbug2.AVLTree instance at 0x101e7da70> : <type 'instance'>
avl_REF2 = set([2, 3, 4, 5, 6, 13, 15, 17]) : <type 'set'>
avl_REF0 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF0 
==================================================
result = avl2.find(int1)                                                # STEP 80
ACTION: result = avl2.find(int1) 
int1 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101d1e290> : <type 'instance'>
avl_REF2 = set([2, 3, 4, 5, 6, 13, 15, 17]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl2.delete(int1)                                                       # STEP 81
ACTION: avl2.delete(int1) 
int1 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101d1e290> : <type 'instance'>
avl_REF2 = set([2, 3, 4, 5, 6, 13, 15, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl0 = avl.AVLTree()                                                    # STEP 82
ACTION: avl0 = avl.AVLTree() 
avl0 = <avlbug2.AVLTree instance at 0x101e7da70> : <type 'instance'>
avl_REF0 = set([8]) : <type 'set'>
=> avl0 = <avlbug2.AVLTree instance at 0x103653fc8> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 83
ACTION: avl2.delete(int0) 
int0 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101d1e290> : <type 'instance'>
avl_REF2 = set([2, 3, 4, 5, 6, 13, 15, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([2, 3, 4, 5, 6, 13, 15]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 84
ACTION: avl0.insert(int2) 
int2 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103653fc8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([15]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 85
ACTION: avl2.delete(int3) 
int3 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101d1e290> : <type 'instance'>
avl_REF2 = set([2, 3, 4, 5, 6, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([3, 4, 5, 6, 13, 15]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10367a2d8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 97
STOPPING TESTING DUE TO TIMEOUT
8.63952333664 PERCENT COVERED
60.259303093 TOTAL RUNTIME
5 EXECUTED
483 TOTAL TEST OPERATIONS
25.3461339474 TIME SPENT EXECUTING TEST OPERATIONS
0.0202910900116 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
25.549169302 TIME SPENT CHECKING PROPERTIES
50.8953032494 TOTAL TIME SPENT RUNNING SUT
0.00401043891907 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int2 = 5                                                                 # STEP 0
int1 = 10                                                                # STEP 1
int3 = 15                                                                # STEP 2
int0 = 14                                                                # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
avl2.delete(int1)                                                        # STEP 5
int1 = 16                                                                # STEP 6
avl2.insert(int3)                                                        # STEP 7
int3 = 12                                                                # STEP 8
result = avl2.find(int0)                                                 # STEP 9
int0 = 6                                                                # STEP 10
avl2.delete(int1)                                                       # STEP 11
avl2.delete(int2)                                                       # STEP 12
avl2 == avl2                                                            # STEP 13
int2 = 19                                                               # STEP 14
int1 = 3                                                                # STEP 15
result = avl2.find(int2)                                                # STEP 16
avl2.delete(int0)                                                       # STEP 17
int2 = 7                                                                # STEP 18
int0 = 1                                                                # STEP 19
result = avl2.find(int1)                                                # STEP 20
result = avl2.find(int1)                                                # STEP 21
int1 = 4                                                                # STEP 22
avl2.insert(int1)                                                       # STEP 23
int1 = 12                                                               # STEP 24
avl2.insert(int3)                                                       # STEP 25
int3 = 17                                                               # STEP 26
result = avl2.find(int2)                                                # STEP 27
int2 = 13                                                               # STEP 28
avl2.delete(int1)                                                       # STEP 29
int1 = 6                                                                # STEP 30
avl2 == avl2                                                            # STEP 31
avl2.insert(int1)                                                       # STEP 32
avl2.insert(int2)                                                       # STEP 33
int1 = 20                                                               # STEP 34
avl2.delete(int1)                                                       # STEP 35
int1 = 16                                                               # STEP 36
result = avl2.find(int2)                                                # STEP 37
result = avl2.find(int2)                                                # STEP 38
int2 = 6                                                                # STEP 39
avl2.delete(int1)                                                       # STEP 40
avl2.delete(int0)                                                       # STEP 41
int1 = 2                                                                # STEP 42
int0 = 5                                                                # STEP 43
result = avl2.find(int3)                                                # STEP 44
avl2.insert(int3)                                                       # STEP 45
avl2.insert(int1)                                                       # STEP 46
int1 = 8                                                                # STEP 47
int3 = 12                                                               # STEP 48
result = avl2.inorder()                                                 # STEP 49
avl0 = avl.AVLTree()                                                    # STEP 50
result = avl0.inorder()                                                 # STEP 51
avl2.insert(int2)                                                       # STEP 52
avl2 == avl0                                                            # STEP 53
result = avl2.inorder()                                                 # STEP 54
int2 = 16                                                               # STEP 55
result = avl0.find(int2)                                                # STEP 56
int2 = 15                                                               # STEP 57
avl2.display()                                                          # STEP 58
result = avl2.find(int2)                                                # STEP 59
avl2.display()                                                          # STEP 60
int2 = 3                                                                # STEP 61
avl2.delete(int2)                                                       # STEP 62
result = avl2.find(int2)                                                # STEP 63
avl2 == avl2                                                            # STEP 64
avl0.insert(int1)                                                       # STEP 65
result = avl0.find(int3)                                                # STEP 66
int1 = 12                                                               # STEP 67
avl2.insert(int2)                                                       # STEP 68
int2 = 14                                                               # STEP 69
result = avl2.find(int0)                                                # STEP 70
int3 = 2                                                                # STEP 71
avl2.insert(int0)                                                       # STEP 72
int0 = 1                                                                # STEP 73
avl0.delete(int0)                                                       # STEP 74
int0 = 17                                                               # STEP 75
avl2.delete(int2)                                                       # STEP 76
int2 = 15                                                               # STEP 77
avl0 == avl0                                                            # STEP 78
avl2 == avl0                                                            # STEP 79
result = avl2.find(int1)                                                # STEP 80
avl2.delete(int1)                                                       # STEP 81
avl0 = avl.AVLTree()                                                    # STEP 82
avl2.delete(int0)                                                       # STEP 83
avl0.insert(int2)                                                       # STEP 84
avl2.delete(int3)                                                       # STEP 85
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10367a2d8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
216 BRANCHES COVERED
162 STATEMENTS COVERED

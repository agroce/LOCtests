Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.99484.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  11 [2:0]
-- < 7 [1:0]
---- < 5 [0:0] L
---- > 8 [0:0] L
-- > 15 [1:0]
---- < 13 [0:0] L
---- > 16 [0:0] L
set([5, 7, 8, 11, 13, 15, 16])
  11 [2:0]
-- < 7 [1:0]
---- < 5 [0:0] L
---- > 8 [0:0] L
-- > 16 [1:0]
---- < 13 [0:0] L
---- > 17 [0:0] L
set([5, 7, 8, 11, 13, 16, 17])
  11 [2:0]
-- < 7 [1:0]
---- < 5 [0:0] L
---- > 8 [0:0] L
-- > 16 [1:0]
---- < 13 [0:0] L
---- > 17 [0:0] L
set([5, 7, 8, 11, 13, 16, 17])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104b35098>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 62 steps

SAVING TEST AS failure.99484.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 5                                                                 # STEP 0
ACTION: int2 = 5 
int2 = None : <type 'NoneType'>
=> int2 = 5 : <type 'int'>
==================================================
int3 = 16                                                                # STEP 1
ACTION: int3 = 16 
int3 = None : <type 'NoneType'>
=> int3 = 16 : <type 'int'>
==================================================
int0 = 15                                                                # STEP 2
ACTION: int0 = 15 
int0 = None : <type 'NoneType'>
=> int0 = 15 : <type 'int'>
==================================================
int1 = 16                                                                # STEP 3
ACTION: int1 = 16 
int1 = None : <type 'NoneType'>
=> int1 = 16 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x104ee5bd8> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.delete(int0)                                                        # STEP 5
ACTION: avl1.delete(int0) 
int0 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104ee5bd8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.delete(int1)                                                        # STEP 6
ACTION: avl1.delete(int1) 
int1 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104ee5bd8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.insert(int3)                                                        # STEP 7
ACTION: avl1.insert(int3) 
int3 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104ee5bd8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([16]) : <type 'set'>
==================================================
avl1.delete(int0)                                                        # STEP 8
ACTION: avl1.delete(int0) 
int0 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104ee5bd8> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int3 = 2                                                                 # STEP 9
ACTION: int3 = 2 
int3 = 16 : <type 'int'>
=> int3 = 2 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 10
ACTION: avl1.delete(int2) 
int2 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104ee5bd8> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.insert(int2)                                                       # STEP 11
ACTION: avl1.insert(int2) 
int2 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104ee5bd8> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([16, 5]) : <type 'set'>
==================================================
result = avl1.find(int1)                                                # STEP 12
ACTION: result = avl1.find(int1) 
int1 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104ee5bd8> : <type 'instance'>
avl_REF1 = set([16, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int0 = 2                                                                # STEP 13
ACTION: int0 = 2 
int0 = 15 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 14
ACTION: avl1.delete(int2) 
int2 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104ee5bd8> : <type 'instance'>
avl_REF1 = set([16, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([16]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 15
ACTION: avl1.delete(int3) 
int3 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104ee5bd8> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.insert(int0)                                                       # STEP 16
ACTION: avl1.insert(int0) 
int0 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104ee5bd8> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([16, 2]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 17
ACTION: avl1.delete(int3) 
int3 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104ee5bd8> : <type 'instance'>
avl_REF1 = set([16, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([16]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 18
ACTION: avl1.insert(int1) 
int1 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104ee5bd8> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl1.insert(int0)                                                       # STEP 19
ACTION: avl1.insert(int0) 
int0 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104ee5bd8> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([16, 2]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 20
ACTION: avl1.insert(int2) 
int2 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104ee5bd8> : <type 'instance'>
avl_REF1 = set([16, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([16, 2, 5]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 21
ACTION: avl1.delete(int3) 
int3 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104ee5bd8> : <type 'instance'>
avl_REF1 = set([16, 2, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([16, 5]) : <type 'set'>
==================================================
result = avl1.find(int0)                                                # STEP 22
ACTION: result = avl1.find(int0) 
int0 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104ee5bd8> : <type 'instance'>
avl_REF1 = set([16, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
int2 = 11                                                               # STEP 23
ACTION: int2 = 11 
int2 = 5 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
int0 = 8                                                                # STEP 24
ACTION: int0 = 8 
int0 = 2 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
int3 = 7                                                                # STEP 25
ACTION: int3 = 7 
int3 = 2 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
int1 = 19                                                               # STEP 26
ACTION: int1 = 19 
int1 = 16 : <type 'int'>
=> int1 = 19 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 27
ACTION: avl1.insert(int0) 
int0 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104ee5bd8> : <type 'instance'>
avl_REF1 = set([16, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([16, 8, 5]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 28
ACTION: avl1.insert(int3) 
int3 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104ee5bd8> : <type 'instance'>
avl_REF1 = set([16, 8, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([16, 8, 5, 7]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 29
ACTION: avl1.insert(int0) 
int0 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104ee5bd8> : <type 'instance'>
avl_REF1 = set([16, 8, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
result = avl1.inorder()                                                 # STEP 30
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104ee5bd8> : <type 'instance'>
avl_REF1 = set([16, 8, 5, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int3 = 7                                                                # STEP 31
ACTION: int3 = 7 
int3 = 7 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 32
ACTION: avl1.insert(int2) 
int2 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104ee5bd8> : <type 'instance'>
avl_REF1 = set([16, 8, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([5, 7, 8, 11, 16]) : <type 'set'>
==================================================
int2 = 3                                                                # STEP 33
ACTION: int2 = 3 
int2 = 11 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 34
ACTION: avl1.insert(int3) 
int3 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104ee5bd8> : <type 'instance'>
avl_REF1 = set([5, 7, 8, 11, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
avl1.delete(int2)                                                       # STEP 35
ACTION: avl1.delete(int2) 
int2 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104ee5bd8> : <type 'instance'>
avl_REF1 = set([5, 7, 8, 11, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int2 = 11                                                               # STEP 36
ACTION: int2 = 11 
int2 = 3 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
int3 = 20                                                               # STEP 37
ACTION: int3 = 20 
int3 = 7 : <type 'int'>
=> int3 = 20 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 38
ACTION: avl1.delete(int3) 
int3 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104ee5bd8> : <type 'instance'>
avl_REF1 = set([5, 7, 8, 11, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
result = avl1.find(int0)                                                # STEP 39
ACTION: result = avl1.find(int0) 
int0 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104ee5bd8> : <type 'instance'>
avl_REF1 = set([5, 7, 8, 11, 16]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
int3 = 10                                                               # STEP 40
ACTION: int3 = 10 
int3 = 20 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 41
ACTION: avl1.delete(int2) 
int2 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104ee5bd8> : <type 'instance'>
avl_REF1 = set([5, 7, 8, 11, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([5, 7, 8, 16]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 42
ACTION: avl1.delete(int1) 
int1 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104ee5bd8> : <type 'instance'>
avl_REF1 = set([5, 7, 8, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.insert(int1)                                                       # STEP 43
ACTION: avl1.insert(int1) 
int1 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104ee5bd8> : <type 'instance'>
avl_REF1 = set([5, 7, 8, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([5, 7, 8, 16, 19]) : <type 'set'>
==================================================
int1 = 18                                                               # STEP 44
ACTION: int1 = 18 
int1 = 19 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 45
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x104ee5bd8> : <type 'instance'>
avl_REF1 = set([5, 7, 8, 16, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.insert(int2)                                                       # STEP 46
ACTION: avl1.insert(int2) 
int2 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104ee5bd8> : <type 'instance'>
avl_REF1 = set([5, 7, 8, 16, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([5, 7, 8, 11, 16, 19]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 47
ACTION: avl1.insert(int2) 
int2 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104ee5bd8> : <type 'instance'>
avl_REF1 = set([5, 7, 8, 11, 16, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
avl1.delete(int2)                                                       # STEP 48
ACTION: avl1.delete(int2) 
int2 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104ee5bd8> : <type 'instance'>
avl_REF1 = set([5, 7, 8, 11, 16, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([5, 7, 8, 16, 19]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 49
ACTION: avl1.delete(int1) 
int1 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104ee5bd8> : <type 'instance'>
avl_REF1 = set([5, 7, 8, 16, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
result = avl1.find(int1)                                                # STEP 50
ACTION: result = avl1.find(int1) 
int1 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104ee5bd8> : <type 'instance'>
avl_REF1 = set([5, 7, 8, 16, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl1.delete(int1)                                                       # STEP 51
ACTION: avl1.delete(int1) 
int1 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104ee5bd8> : <type 'instance'>
avl_REF1 = set([5, 7, 8, 16, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int2 = 16                                                               # STEP 52
ACTION: int2 = 16 
int2 = 11 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 53
ACTION: avl1.insert(int0) 
int0 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104ee5bd8> : <type 'instance'>
avl_REF1 = set([5, 7, 8, 16, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.delete(int1)                                                       # STEP 54
ACTION: avl1.delete(int1) 
int1 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104ee5bd8> : <type 'instance'>
avl_REF1 = set([5, 7, 8, 16, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
result = avl1.find(int2)                                                # STEP 55
ACTION: result = avl1.find(int2) 
int2 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104ee5bd8> : <type 'instance'>
avl_REF1 = set([5, 7, 8, 16, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl1.delete(int0)                                                       # STEP 56
ACTION: avl1.delete(int0) 
int0 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104ee5bd8> : <type 'instance'>
avl_REF1 = set([5, 7, 8, 16, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([5, 7, 16, 19]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 57
ACTION: avl1.delete(int3) 
int3 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104ee5bd8> : <type 'instance'>
avl_REF1 = set([5, 7, 16, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
result = avl1.find(int2)                                                # STEP 58
ACTION: result = avl1.find(int2) 
int2 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104ee5bd8> : <type 'instance'>
avl_REF1 = set([5, 7, 16, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl1.delete(int1)                                                       # STEP 59
ACTION: avl1.delete(int1) 
int1 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104ee5bd8> : <type 'instance'>
avl_REF1 = set([5, 7, 16, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.delete(int1)                                                       # STEP 60
ACTION: avl1.delete(int1) 
int1 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104ee5bd8> : <type 'instance'>
avl_REF1 = set([5, 7, 16, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.delete(int2)                                                       # STEP 61
ACTION: avl1.delete(int2) 
int2 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104ee5bd8> : <type 'instance'>
avl_REF1 = set([5, 7, 16, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([5, 7, 19]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104b6dc20>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #5 STEP #0 (0:00:31.893149) Fri Apr 28 04:06:12 2017 [ 160 stmts 212 branches ]
  13 [2:0]
-- < 9 [1:1]
---- < 3 [0:0] L
-- > 18 [1:0]
---- < 15 [0:0] L
---- > 20 [0:0] L
set([3, 9, 13, 15, 18, 20])
  12 [3:1]
-- < 5 [2:1]
---- < 4 [1:1]
------ < 1 [0:0] L
---- > 10 [0:0] L
-- > 16 [1:0]
---- < 15 [0:0] L
---- > 20 [0:0] L
set([1, 4, 5, 10, 12, 15, 16, 20])
  12 [3:0]
-- < 5 [2:1]
---- < 2 [1:0]
------ < 1 [0:0] L
------ > 4 [0:0] L
---- > 10 [0:0] L
-- > 16 [2:-1]
---- < 15 [0:0] L
---- > 20 [1:1]
------ < 18 [0:0] L
set([1, 2, 4, 5, 10, 12, 15, 16, 18, 20])
  12 [3:0]
-- < 5 [2:1]
---- < 2 [1:0]
------ < 1 [0:0] L
------ > 4 [0:0] L
---- > 10 [0:0] L
-- > 16 [2:-1]
---- < 15 [0:0] L
---- > 20 [1:1]
------ < 18 [0:0] L
set([1, 2, 4, 5, 10, 12, 15, 16, 18, 20])
  12 [3:0]
-- < 5 [2:1]
---- < 2 [1:0]
------ < 1 [0:0] L
------ > 4 [0:0] L
---- > 10 [0:0] L
-- > 16 [2:-1]
---- < 15 [0:0] L
---- > 20 [1:1]
------ < 18 [0:0] L
set([1, 2, 4, 5, 10, 12, 15, 16, 18, 20])
  12 [3:0]
-- < 5 [2:1]
---- < 2 [1:0]
------ < 1 [0:0] L
------ > 4 [0:0] L
---- > 10 [0:0] L
-- > 16 [2:-1]
---- < 15 [0:0] L
---- > 20 [1:1]
------ < 18 [0:0] L
set([1, 2, 4, 5, 10, 12, 15, 16, 18, 20])
  8 [2:0]
-- < 2 [1:-1]
---- > 4 [0:0] L
-- > 14 [1:0]
---- < 9 [0:0] L
---- > 19 [0:0] L
set([2, 4, 8, 9, 14, 19])
  8 [2:0]
-- < 2 [1:-1]
---- > 4 [0:0] L
-- > 14 [1:0]
---- < 9 [0:0] L
---- > 19 [0:0] L
set([2, 4, 8, 9, 14, 19])
  8 [2:0]
-- < 2 [1:-1]
---- > 4 [0:0] L
-- > 14 [1:0]
---- < 9 [0:0] L
---- > 19 [0:0] L
set([2, 4, 8, 9, 14, 19])
  8 [3:-1]
-- < 2 [1:-1]
---- > 4 [0:0] L
-- > 14 [2:1]
---- < 9 [1:-1]
------ > 10 [0:0] L
---- > 19 [0:0] L
set([2, 4, 8, 9, 10, 14, 19])
  8 [2:0]
-- < 2 [1:-1]
---- > 4 [0:0] L
-- > 14 [1:0]
---- < 9 [0:0] L
---- > 19 [0:0] L
set([2, 4, 8, 9, 14, 19])
  8 [2:0]
-- < 2 [1:-1]
---- > 4 [0:0] L
-- > 14 [1:0]
---- < 9 [0:0] L
---- > 19 [0:0] L
set([2, 4, 8, 9, 14, 19])
  8 [2:0]
-- < 2 [1:-1]
---- > 4 [0:0] L
-- > 14 [1:0]
---- < 9 [0:0] L
---- > 19 [0:0] L
set([2, 4, 8, 9, 14, 19])
  8 [2:0]
-- < 2 [1:-1]
---- > 4 [0:0] L
-- > 14 [1:0]
---- < 9 [0:0] L
---- > 19 [0:0] L
set([2, 4, 8, 9, 14, 19])
  14 [2:0]
-- < 8 [1:0]
---- < 2 [0:0] L
---- > 9 [0:0] L
-- > 19 [1:1]
---- < 18 [0:0] L
set([2, 8, 9, 14, 18, 19])
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 89
STOPPING TESTING DUE TO TIMEOUT
8.51713607058 PERCENT COVERED
60.1771130562 TOTAL RUNTIME
8 EXECUTED
751 TOTAL TEST OPERATIONS
27.6463878155 TIME SPENT EXECUTING TEST OPERATIONS
0.077211856842 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
27.7604327202 TIME SPENT CHECKING PROPERTIES
55.4068205357 TOTAL TIME SPENT RUNNING SUT
0.00453305244446 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int2 = 5                                                                 # STEP 0
int3 = 16                                                                # STEP 1
int0 = 15                                                                # STEP 2
int1 = 16                                                                # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
avl1.delete(int0)                                                        # STEP 5
avl1.delete(int1)                                                        # STEP 6
avl1.insert(int3)                                                        # STEP 7
avl1.delete(int0)                                                        # STEP 8
int3 = 2                                                                 # STEP 9
avl1.delete(int2)                                                       # STEP 10
avl1.insert(int2)                                                       # STEP 11
result = avl1.find(int1)                                                # STEP 12
int0 = 2                                                                # STEP 13
avl1.delete(int2)                                                       # STEP 14
avl1.delete(int3)                                                       # STEP 15
avl1.insert(int0)                                                       # STEP 16
avl1.delete(int3)                                                       # STEP 17
avl1.insert(int1)                                                       # STEP 18
avl1.insert(int0)                                                       # STEP 19
avl1.insert(int2)                                                       # STEP 20
avl1.delete(int3)                                                       # STEP 21
result = avl1.find(int0)                                                # STEP 22
int2 = 11                                                               # STEP 23
int0 = 8                                                                # STEP 24
int3 = 7                                                                # STEP 25
int1 = 19                                                               # STEP 26
avl1.insert(int0)                                                       # STEP 27
avl1.insert(int3)                                                       # STEP 28
avl1.insert(int0)                                                       # STEP 29
result = avl1.inorder()                                                 # STEP 30
int3 = 7                                                                # STEP 31
avl1.insert(int2)                                                       # STEP 32
int2 = 3                                                                # STEP 33
avl1.insert(int3)                                                       # STEP 34
avl1.delete(int2)                                                       # STEP 35
int2 = 11                                                               # STEP 36
int3 = 20                                                               # STEP 37
avl1.delete(int3)                                                       # STEP 38
result = avl1.find(int0)                                                # STEP 39
int3 = 10                                                               # STEP 40
avl1.delete(int2)                                                       # STEP 41
avl1.delete(int1)                                                       # STEP 42
avl1.insert(int1)                                                       # STEP 43
int1 = 18                                                               # STEP 44
avl1 == avl1                                                            # STEP 45
avl1.insert(int2)                                                       # STEP 46
avl1.insert(int2)                                                       # STEP 47
avl1.delete(int2)                                                       # STEP 48
avl1.delete(int1)                                                       # STEP 49
result = avl1.find(int1)                                                # STEP 50
avl1.delete(int1)                                                       # STEP 51
int2 = 16                                                               # STEP 52
avl1.insert(int0)                                                       # STEP 53
avl1.delete(int1)                                                       # STEP 54
result = avl1.find(int2)                                                # STEP 55
avl1.delete(int0)                                                       # STEP 56
avl1.delete(int3)                                                       # STEP 57
result = avl1.find(int2)                                                # STEP 58
avl1.delete(int1)                                                       # STEP 59
avl1.delete(int1)                                                       # STEP 60
avl1.delete(int2)                                                       # STEP 61
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104b6dc20>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
214 BRANCHES COVERED
161 STATEMENTS COVERED

Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.406.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103c4fc20>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 50 steps

SAVING TEST AS failure.406.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 20                                                                # STEP 0
ACTION: int0 = 20 
int0 = None : <type 'NoneType'>
=> int0 = 20 : <type 'int'>
==================================================
int3 = 18                                                                # STEP 1
ACTION: int3 = 18 
int3 = None : <type 'NoneType'>
=> int3 = 18 : <type 'int'>
==================================================
int1 = 15                                                                # STEP 2
ACTION: int1 = 15 
int1 = None : <type 'NoneType'>
=> int1 = 15 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 3
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x1039ddd40> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int1)                                                        # STEP 4
ACTION: avl2.insert(int1) 
int1 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1039ddd40> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([15]) : <type 'set'>
==================================================
avl2.insert(int1)                                                        # STEP 5
ACTION: avl2.insert(int1) 
int1 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1039ddd40> : <type 'instance'>
avl_REF2 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl2.delete(int3)                                                        # STEP 6
ACTION: avl2.delete(int3) 
int3 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1039ddd40> : <type 'instance'>
avl_REF2 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.insert(int1)                                                        # STEP 7
ACTION: avl2.insert(int1) 
int1 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1039ddd40> : <type 'instance'>
avl_REF2 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl2.delete(int3)                                                        # STEP 8
ACTION: avl2.delete(int3) 
int3 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1039ddd40> : <type 'instance'>
avl_REF2 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
result = avl2.find(int0)                                                 # STEP 9
ACTION: result = avl2.find(int0) 
int0 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1039ddd40> : <type 'instance'>
avl_REF2 = set([15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
int0 = 4                                                                # STEP 10
ACTION: int0 = 4 
int0 = 20 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
int3 = 15                                                               # STEP 11
ACTION: int3 = 15 
int3 = 18 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 12
ACTION: avl2.delete(int3) 
int3 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1039ddd40> : <type 'instance'>
avl_REF2 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 13
ACTION: avl2.delete(int1) 
int1 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1039ddd40> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int3 = 2                                                                # STEP 14
ACTION: int3 = 2 
int3 = 15 : <type 'int'>
=> int3 = 2 : <type 'int'>
==================================================
int1 = 16                                                               # STEP 15
ACTION: int1 = 16 
int1 = 15 : <type 'int'>
=> int1 = 16 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 16
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x1039ddd40> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int2 = 20                                                               # STEP 17
ACTION: int2 = 20 
int2 = None : <type 'NoneType'>
=> int2 = 20 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 18
ACTION: avl2.delete(int3) 
int3 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1039ddd40> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.delete(int1)                                                       # STEP 19
ACTION: avl2.delete(int1) 
int1 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1039ddd40> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int0)                                                       # STEP 20
ACTION: avl2.insert(int0) 
int0 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1039ddd40> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([4]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 21
ACTION: avl2.delete(int3) 
int3 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1039ddd40> : <type 'instance'>
avl_REF2 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.insert(int2)                                                       # STEP 22
ACTION: avl2.insert(int2) 
int2 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1039ddd40> : <type 'instance'>
avl_REF2 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([20, 4]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 23
ACTION: avl2.delete(int2) 
int2 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1039ddd40> : <type 'instance'>
avl_REF2 = set([20, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([4]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 24
ACTION: avl2.insert(int2) 
int2 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1039ddd40> : <type 'instance'>
avl_REF2 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([20, 4]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 25
ACTION: avl2.delete(int0) 
int0 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1039ddd40> : <type 'instance'>
avl_REF2 = set([20, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([20]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 26
ACTION: avl2.insert(int0) 
int0 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1039ddd40> : <type 'instance'>
avl_REF2 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([20, 4]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 27
ACTION: avl2.insert(int3) 
int3 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1039ddd40> : <type 'instance'>
avl_REF2 = set([20, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([20, 2, 4]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 28
ACTION: avl2.delete(int3) 
int3 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1039ddd40> : <type 'instance'>
avl_REF2 = set([20, 2, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([20, 4]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 29
ACTION: avl2.delete(int0) 
int0 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1039ddd40> : <type 'instance'>
avl_REF2 = set([20, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([20]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 30
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x1039ddd40> : <type 'instance'>
avl_REF2 = set([20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int3 = 16                                                               # STEP 31
ACTION: int3 = 16 
int3 = 2 : <type 'int'>
=> int3 = 16 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 32
ACTION: avl2.insert(int3) 
int3 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1039ddd40> : <type 'instance'>
avl_REF2 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([16, 20]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 33
ACTION: avl2.insert(int2) 
int2 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1039ddd40> : <type 'instance'>
avl_REF2 = set([16, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl2.delete(int1)                                                       # STEP 34
ACTION: avl2.delete(int1) 
int1 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1039ddd40> : <type 'instance'>
avl_REF2 = set([16, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([20]) : <type 'set'>
==================================================
int3 = 14                                                               # STEP 35
ACTION: int3 = 14 
int3 = 16 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 36
ACTION: avl2.insert(int2) 
int2 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1039ddd40> : <type 'instance'>
avl_REF2 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl2.insert(int3)                                                       # STEP 37
ACTION: avl2.insert(int3) 
int3 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1039ddd40> : <type 'instance'>
avl_REF2 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([20, 14]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 38
ACTION: avl2.insert(int0) 
int0 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1039ddd40> : <type 'instance'>
avl_REF2 = set([20, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([20, 4, 14]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 39
ACTION: avl2.delete(int3) 
int3 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1039ddd40> : <type 'instance'>
avl_REF2 = set([20, 4, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([20, 4]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 40
ACTION: avl2.delete(int2) 
int2 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1039ddd40> : <type 'instance'>
avl_REF2 = set([20, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([4]) : <type 'set'>
==================================================
int3 = 7                                                                # STEP 41
ACTION: int3 = 7 
int3 = 14 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 42
ACTION: avl2.delete(int3) 
int3 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1039ddd40> : <type 'instance'>
avl_REF2 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.insert(int1)                                                       # STEP 43
ACTION: avl2.insert(int1) 
int1 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1039ddd40> : <type 'instance'>
avl_REF2 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([16, 4]) : <type 'set'>
==================================================
int1 = 18                                                               # STEP 44
ACTION: int1 = 18 
int1 = 16 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
int2 = 13                                                               # STEP 45
ACTION: int2 = 13 
int2 = 20 : <type 'int'>
=> int2 = 13 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 46
ACTION: avl2.insert(int1) 
int1 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1039ddd40> : <type 'instance'>
avl_REF2 = set([16, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([16, 18, 4]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 47
ACTION: avl2.insert(int1) 
int1 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1039ddd40> : <type 'instance'>
avl_REF2 = set([16, 18, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl2.insert(int3)                                                       # STEP 48
ACTION: avl2.insert(int3) 
int3 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1039ddd40> : <type 'instance'>
avl_REF2 = set([16, 18, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([16, 18, 7, 4]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 49
ACTION: avl2.delete(int1) 
int1 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1039ddd40> : <type 'instance'>
avl_REF2 = set([16, 18, 7, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([16, 7, 4]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10391c878>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
  11 [2:0]
-- < 6 [1:0]
---- < 3 [0:0] L
---- > 9 [0:0] L
-- > 18 [1:0]
---- < 12 [0:0] L
---- > 19 [0:0] L
set([3, 6, 9, 11, 12, 18, 19])
  11 [2:0]
-- < 6 [1:0]
---- < 3 [0:0] L
---- > 9 [0:0] L
-- > 18 [1:-1]
---- > 19 [0:0] L
set([3, 6, 9, 11, 18, 19])
  11 [2:0]
-- < 6 [1:0]
---- < 3 [0:0] L
---- > 9 [0:0] L
-- > 18 [1:0]
---- < 15 [0:0] L
---- > 19 [0:0] L
set([3, 6, 9, 11, 15, 18, 19])
  11 [2:0]
-- < 6 [1:0]
---- < 3 [0:0] L
---- > 9 [0:0] L
-- > 18 [1:0]
---- < 15 [0:0] L
---- > 19 [0:0] L
set([3, 6, 9, 11, 15, 18, 19])
  11 [2:0]
-- < 6 [1:0]
---- < 3 [0:0] L
---- > 9 [0:0] L
-- > 18 [1:0]
---- < 15 [0:0] L
---- > 19 [0:0] L
set([3, 6, 9, 11, 15, 18, 19])
  11 [3:-1]
-- < 6 [1:0]
---- < 3 [0:0] L
---- > 9 [0:0] L
-- > 18 [2:1]
---- < 15 [1:-1]
------ > 17 [0:0] L
---- > 19 [0:0] L
set([3, 6, 9, 11, 15, 17, 18, 19])
  11 [3:-1]
-- < 6 [1:0]
---- < 3 [0:0] L
---- > 9 [0:0] L
-- > 18 [2:1]
---- < 15 [1:0]
------ < 13 [0:0] L
------ > 17 [0:0] L
---- > 19 [0:0] L
set([3, 6, 9, 11, 13, 15, 17, 18, 19])
  11 [3:0]
-- < 6 [2:-1]
---- < 3 [0:0] L
---- > 9 [1:1]
------ < 8 [0:0] L
-- > 18 [2:1]
---- < 15 [1:0]
------ < 13 [0:0] L
------ > 17 [0:0] L
---- > 19 [0:0] L
set([3, 6, 8, 9, 11, 13, 15, 17, 18, 19])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103e9ec20>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
Original test has 93 steps

SAVING TEST AS failure.406.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
avl0 = avl.AVLTree()                                                     # STEP 0
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x104126bd8> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int3 = 7                                                                 # STEP 1
ACTION: int3 = 7 
int3 = None : <type 'NoneType'>
=> int3 = 7 : <type 'int'>
==================================================
avl0.delete(int3)                                                        # STEP 2
ACTION: avl0.delete(int3) 
int3 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104126bd8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int2 = 6                                                                 # STEP 3
ACTION: int2 = 6 
int2 = None : <type 'NoneType'>
=> int2 = 6 : <type 'int'>
==================================================
int0 = 20                                                                # STEP 4
ACTION: int0 = 20 
int0 = None : <type 'NoneType'>
=> int0 = 20 : <type 'int'>
==================================================
int3 = 11                                                                # STEP 5
ACTION: int3 = 11 
int3 = 7 : <type 'int'>
=> int3 = 11 : <type 'int'>
==================================================
avl0.insert(int2)                                                        # STEP 6
ACTION: avl0.insert(int2) 
int2 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104126bd8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([6]) : <type 'set'>
==================================================
result = avl0.find(int2)                                                 # STEP 7
ACTION: result = avl0.find(int2) 
int2 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104126bd8> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl0.delete(int2)                                                        # STEP 8
ACTION: avl0.delete(int2) 
int2 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104126bd8> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int2 = 18                                                                # STEP 9
ACTION: int2 = 18 
int2 = 6 : <type 'int'>
=> int2 = 18 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 10
ACTION: avl0.insert(int3) 
int3 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104126bd8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([11]) : <type 'set'>
==================================================
int3 = 9                                                                # STEP 11
ACTION: int3 = 9 
int3 = 11 : <type 'int'>
=> int3 = 9 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 12
ACTION: avl0.insert(int2) 
int2 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104126bd8> : <type 'instance'>
avl_REF0 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([18, 11]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 13
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104126bd8> : <type 'instance'>
avl_REF0 = set([18, 11]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.delete(int2)                                                       # STEP 14
ACTION: avl0.delete(int2) 
int2 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104126bd8> : <type 'instance'>
avl_REF0 = set([18, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([11]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 15
ACTION: avl0.insert(int2) 
int2 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104126bd8> : <type 'instance'>
avl_REF0 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([18, 11]) : <type 'set'>
==================================================
result = avl0.find(int3)                                                # STEP 16
ACTION: result = avl0.find(int3) 
int3 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104126bd8> : <type 'instance'>
avl_REF0 = set([18, 11]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
result = avl0.inorder()                                                 # STEP 17
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104126bd8> : <type 'instance'>
avl_REF0 = set([18, 11]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.delete(int2)                                                       # STEP 18
ACTION: avl0.delete(int2) 
int2 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104126bd8> : <type 'instance'>
avl_REF0 = set([18, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([11]) : <type 'set'>
==================================================
result = avl0.find(int2)                                                # STEP 19
ACTION: result = avl0.find(int2) 
int2 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104126bd8> : <type 'instance'>
avl_REF0 = set([11]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl0.delete(int0)                                                       # STEP 20
ACTION: avl0.delete(int0) 
int0 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104126bd8> : <type 'instance'>
avl_REF0 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int0 = 6                                                                # STEP 21
ACTION: int0 = 6 
int0 = 20 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 22
ACTION: avl0.insert(int3) 
int3 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104126bd8> : <type 'instance'>
avl_REF0 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([9, 11]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 23
ACTION: avl0.insert(int3) 
int3 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104126bd8> : <type 'instance'>
avl_REF0 = set([9, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
result = avl0.inorder()                                                 # STEP 24
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104126bd8> : <type 'instance'>
avl_REF0 = set([9, 11]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.delete(int2)                                                       # STEP 25
ACTION: avl0.delete(int2) 
int2 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104126bd8> : <type 'instance'>
avl_REF0 = set([9, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.insert(int2)                                                       # STEP 26
ACTION: avl0.insert(int2) 
int2 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104126bd8> : <type 'instance'>
avl_REF0 = set([9, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([9, 18, 11]) : <type 'set'>
==================================================
result = avl0.find(int2)                                                # STEP 27
ACTION: result = avl0.find(int2) 
int2 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104126bd8> : <type 'instance'>
avl_REF0 = set([9, 18, 11]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl0 == avl0                                                            # STEP 28
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x104126bd8> : <type 'instance'>
avl_REF0 = set([9, 18, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
int2 = 15                                                               # STEP 29
ACTION: int2 = 15 
int2 = 18 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
result = avl0.find(int0)                                                # STEP 30
ACTION: result = avl0.find(int0) 
int0 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104126bd8> : <type 'instance'>
avl_REF0 = set([9, 18, 11]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
result = avl0.inorder()                                                 # STEP 31
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104126bd8> : <type 'instance'>
avl_REF0 = set([9, 18, 11]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int0)                                                       # STEP 32
ACTION: avl0.insert(int0) 
int0 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104126bd8> : <type 'instance'>
avl_REF0 = set([9, 18, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([9, 18, 11, 6]) : <type 'set'>
==================================================
int1 = 15                                                               # STEP 33
ACTION: int1 = 15 
int1 = None : <type 'NoneType'>
=> int1 = 15 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 34
ACTION: avl0.insert(int3) 
int3 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104126bd8> : <type 'instance'>
avl_REF0 = set([9, 18, 11, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
int0 = 12                                                               # STEP 35
ACTION: int0 = 12 
int0 = 6 : <type 'int'>
=> int0 = 12 : <type 'int'>
==================================================
int3 = 19                                                               # STEP 36
ACTION: int3 = 19 
int3 = 9 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 37
ACTION: avl0.insert(int1) 
int1 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104126bd8> : <type 'instance'>
avl_REF0 = set([9, 18, 11, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([9, 18, 11, 6, 15]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 38
ACTION: avl0.insert(int1) 
int1 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104126bd8> : <type 'instance'>
avl_REF0 = set([9, 18, 11, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
int1 = 3                                                                # STEP 39
ACTION: int1 = 3 
int1 = 15 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 40
ACTION: avl0.delete(int3) 
int3 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104126bd8> : <type 'instance'>
avl_REF0 = set([9, 18, 11, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.insert(int1)                                                       # STEP 41
ACTION: avl0.insert(int1) 
int1 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104126bd8> : <type 'instance'>
avl_REF0 = set([9, 18, 11, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([3, 6, 9, 11, 15, 18]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 42
ACTION: avl0.insert(int3) 
int3 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104126bd8> : <type 'instance'>
avl_REF0 = set([3, 6, 9, 11, 15, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([3, 6, 9, 11, 15, 18, 19]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 43
ACTION: avl0.delete(int2) 
int2 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104126bd8> : <type 'instance'>
avl_REF0 = set([3, 6, 9, 11, 15, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([3, 6, 9, 11, 18, 19]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 44
ACTION: avl0.insert(int1) 
int1 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104126bd8> : <type 'instance'>
avl_REF0 = set([3, 6, 9, 11, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl0.insert(int0)                                                       # STEP 45
ACTION: avl0.insert(int0) 
int0 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104126bd8> : <type 'instance'>
avl_REF0 = set([3, 6, 9, 11, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([3, 6, 9, 11, 12, 18, 19]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 46
ACTION: avl0.delete(int2) 
int2 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104126bd8> : <type 'instance'>
avl_REF0 = set([3, 6, 9, 11, 12, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.display()                                                          # STEP 47
ACTION: avl0.display() 
avl0 = <avl.AVLTree instance at 0x104126bd8> : <type 'instance'>
avl_REF0 = set([3, 6, 9, 11, 12, 18, 19]) : <type 'set'>
  11 [2:0]
-- < 6 [1:0]
---- < 3 [0:0] L
---- > 9 [0:0] L
-- > 18 [1:0]
---- < 12 [0:0] L
---- > 19 [0:0] L
REFERENCE ACTION: print(avl_REF0) 
set([3, 6, 9, 11, 12, 18, 19])
==================================================
result = avl0.find(int0)                                                # STEP 48
ACTION: result = avl0.find(int0) 
int0 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104126bd8> : <type 'instance'>
avl_REF0 = set([3, 6, 9, 11, 12, 18, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
result = avl0.find(int3)                                                # STEP 49
ACTION: result = avl0.find(int3) 
int3 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104126bd8> : <type 'instance'>
avl_REF0 = set([3, 6, 9, 11, 12, 18, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
avl0.delete(int0)                                                       # STEP 50
ACTION: avl0.delete(int0) 
int0 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104126bd8> : <type 'instance'>
avl_REF0 = set([3, 6, 9, 11, 12, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([3, 6, 9, 11, 18, 19]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 51
ACTION: avl0.delete(int3) 
int3 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104126bd8> : <type 'instance'>
avl_REF0 = set([3, 6, 9, 11, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([3, 6, 9, 11, 18]) : <type 'set'>
==================================================
avl0 == avl0                                                            # STEP 52
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x104126bd8> : <type 'instance'>
avl_REF0 = set([3, 6, 9, 11, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl0.delete(int2)                                                       # STEP 53
ACTION: avl0.delete(int2) 
int2 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104126bd8> : <type 'instance'>
avl_REF0 = set([3, 6, 9, 11, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.delete(int3)                                                       # STEP 54
ACTION: avl0.delete(int3) 
int3 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104126bd8> : <type 'instance'>
avl_REF0 = set([3, 6, 9, 11, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
result = avl0.inorder()                                                 # STEP 55
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104126bd8> : <type 'instance'>
avl_REF0 = set([3, 6, 9, 11, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int3)                                                       # STEP 56
ACTION: avl0.insert(int3) 
int3 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104126bd8> : <type 'instance'>
avl_REF0 = set([3, 6, 9, 11, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([3, 6, 9, 11, 18, 19]) : <type 'set'>
==================================================
avl0.display()                                                          # STEP 57
ACTION: avl0.display() 
avl0 = <avl.AVLTree instance at 0x104126bd8> : <type 'instance'>
avl_REF0 = set([3, 6, 9, 11, 18, 19]) : <type 'set'>
  11 [2:0]
-- < 6 [1:0]
---- < 3 [0:0] L
---- > 9 [0:0] L
-- > 18 [1:-1]
---- > 19 [0:0] L
REFERENCE ACTION: print(avl_REF0) 
set([3, 6, 9, 11, 18, 19])
==================================================
avl2 = avl.AVLTree()                                                    # STEP 58
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x103ebdfc8> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 59
ACTION: avl2.insert(int2) 
int2 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103ebdfc8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([15]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 60
ACTION: avl2.delete(int3) 
int3 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103ebdfc8> : <type 'instance'>
avl_REF2 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl0.insert(int2)                                                       # STEP 61
ACTION: avl0.insert(int2) 
int2 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104126bd8> : <type 'instance'>
avl_REF0 = set([3, 6, 9, 11, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([3, 6, 9, 11, 15, 18, 19]) : <type 'set'>
==================================================
int2 = 17                                                               # STEP 62
ACTION: int2 = 17 
int2 = 15 : <type 'int'>
=> int2 = 17 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 63
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x103ebdfc8> : <type 'instance'>
avl_REF2 = set([15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl0.display()                                                          # STEP 64
ACTION: avl0.display() 
avl0 = <avl.AVLTree instance at 0x104126bd8> : <type 'instance'>
avl_REF0 = set([3, 6, 9, 11, 15, 18, 19]) : <type 'set'>
  11 [2:0]
-- < 6 [1:0]
---- < 3 [0:0] L
---- > 9 [0:0] L
-- > 18 [1:0]
---- < 15 [0:0] L
---- > 19 [0:0] L
REFERENCE ACTION: print(avl_REF0) 
set([3, 6, 9, 11, 15, 18, 19])
==================================================
int3 = 10                                                               # STEP 65
ACTION: int3 = 10 
int3 = 19 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 66
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104126bd8> : <type 'instance'>
avl_REF0 = set([3, 6, 9, 11, 15, 18, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.delete(int3)                                                       # STEP 67
ACTION: avl0.delete(int3) 
int3 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104126bd8> : <type 'instance'>
avl_REF0 = set([3, 6, 9, 11, 15, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.insert(int1)                                                       # STEP 68
ACTION: avl0.insert(int1) 
int1 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104126bd8> : <type 'instance'>
avl_REF0 = set([3, 6, 9, 11, 15, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl2.insert(int2)                                                       # STEP 69
ACTION: avl2.insert(int2) 
int2 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103ebdfc8> : <type 'instance'>
avl_REF2 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([17, 15]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 70
ACTION: avl2.insert(int2) 
int2 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103ebdfc8> : <type 'instance'>
avl_REF2 = set([17, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl2.insert(int2)                                                       # STEP 71
ACTION: avl2.insert(int2) 
int2 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103ebdfc8> : <type 'instance'>
avl_REF2 = set([17, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
int3 = 13                                                               # STEP 72
ACTION: int3 = 13 
int3 = 10 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
int1 = 20                                                               # STEP 73
ACTION: int1 = 20 
int1 = 3 : <type 'int'>
=> int1 = 20 : <type 'int'>
==================================================
avl0.display()                                                          # STEP 74
ACTION: avl0.display() 
avl0 = <avl.AVLTree instance at 0x104126bd8> : <type 'instance'>
avl_REF0 = set([3, 6, 9, 11, 15, 18, 19]) : <type 'set'>
  11 [2:0]
-- < 6 [1:0]
---- < 3 [0:0] L
---- > 9 [0:0] L
-- > 18 [1:0]
---- < 15 [0:0] L
---- > 19 [0:0] L
REFERENCE ACTION: print(avl_REF0) 
set([3, 6, 9, 11, 15, 18, 19])
==================================================
avl0.display()                                                          # STEP 75
ACTION: avl0.display() 
avl0 = <avl.AVLTree instance at 0x104126bd8> : <type 'instance'>
avl_REF0 = set([3, 6, 9, 11, 15, 18, 19]) : <type 'set'>
  11 [2:0]
-- < 6 [1:0]
---- < 3 [0:0] L
---- > 9 [0:0] L
-- > 18 [1:0]
---- < 15 [0:0] L
---- > 19 [0:0] L
REFERENCE ACTION: print(avl_REF0) 
set([3, 6, 9, 11, 15, 18, 19])
==================================================
avl0.insert(int2)                                                       # STEP 76
ACTION: avl0.insert(int2) 
int2 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104126bd8> : <type 'instance'>
avl_REF0 = set([3, 6, 9, 11, 15, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([3, 6, 9, 11, 15, 17, 18, 19]) : <type 'set'>
==================================================
result = avl0.find(int0)                                                # STEP 77
ACTION: result = avl0.find(int0) 
int0 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104126bd8> : <type 'instance'>
avl_REF0 = set([3, 6, 9, 11, 15, 17, 18, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
avl0.display()                                                          # STEP 78
ACTION: avl0.display() 
avl0 = <avl.AVLTree instance at 0x104126bd8> : <type 'instance'>
avl_REF0 = set([3, 6, 9, 11, 15, 17, 18, 19]) : <type 'set'>
  11 [3:-1]
-- < 6 [1:0]
---- < 3 [0:0] L
---- > 9 [0:0] L
-- > 18 [2:1]
---- < 15 [1:-1]
------ > 17 [0:0] L
---- > 19 [0:0] L
REFERENCE ACTION: print(avl_REF0) 
set([3, 6, 9, 11, 15, 17, 18, 19])
==================================================
avl0.insert(int3)                                                       # STEP 79
ACTION: avl0.insert(int3) 
int3 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104126bd8> : <type 'instance'>
avl_REF0 = set([3, 6, 9, 11, 15, 17, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([3, 6, 9, 11, 13, 15, 17, 18, 19]) : <type 'set'>
==================================================
int3 = 3                                                                # STEP 80
ACTION: int3 = 3 
int3 = 13 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
avl0.display()                                                          # STEP 81
ACTION: avl0.display() 
avl0 = <avl.AVLTree instance at 0x104126bd8> : <type 'instance'>
avl_REF0 = set([3, 6, 9, 11, 13, 15, 17, 18, 19]) : <type 'set'>
  11 [3:-1]
-- < 6 [1:0]
---- < 3 [0:0] L
---- > 9 [0:0] L
-- > 18 [2:1]
---- < 15 [1:0]
------ < 13 [0:0] L
------ > 17 [0:0] L
---- > 19 [0:0] L
REFERENCE ACTION: print(avl_REF0) 
set([3, 6, 9, 11, 13, 15, 17, 18, 19])
==================================================
avl2.insert(int1)                                                       # STEP 82
ACTION: avl2.insert(int1) 
int1 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103ebdfc8> : <type 'instance'>
avl_REF2 = set([17, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([17, 20, 15]) : <type 'set'>
==================================================
int2 = 8                                                                # STEP 83
ACTION: int2 = 8 
int2 = 17 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 84
ACTION: avl0.delete(int1) 
int1 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104126bd8> : <type 'instance'>
avl_REF0 = set([3, 6, 9, 11, 13, 15, 17, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.insert(int2)                                                       # STEP 85
ACTION: avl0.insert(int2) 
int2 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104126bd8> : <type 'instance'>
avl_REF0 = set([3, 6, 9, 11, 13, 15, 17, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([3, 6, 8, 9, 11, 13, 15, 17, 18, 19]) : <type 'set'>
==================================================
avl0.display()                                                          # STEP 86
ACTION: avl0.display() 
avl0 = <avl.AVLTree instance at 0x104126bd8> : <type 'instance'>
avl_REF0 = set([3, 6, 8, 9, 11, 13, 15, 17, 18, 19]) : <type 'set'>
  11 [3:0]
-- < 6 [2:-1]
---- < 3 [0:0] L
---- > 9 [1:1]
------ < 8 [0:0] L
-- > 18 [2:1]
---- < 15 [1:0]
------ < 13 [0:0] L
------ > 17 [0:0] L
---- > 19 [0:0] L
REFERENCE ACTION: print(avl_REF0) 
set([3, 6, 8, 9, 11, 13, 15, 17, 18, 19])
==================================================
int1 = 10                                                               # STEP 87
ACTION: int1 = 10 
int1 = 20 : <type 'int'>
=> int1 = 10 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 88
ACTION: avl2.delete(int0) 
int0 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103ebdfc8> : <type 'instance'>
avl_REF2 = set([17, 20, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int0 = 18                                                               # STEP 89
ACTION: int0 = 18 
int0 = 12 : <type 'int'>
=> int0 = 18 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 90
ACTION: avl2.delete(int2) 
int2 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103ebdfc8> : <type 'instance'>
avl_REF2 = set([17, 20, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl0.insert(int3)                                                       # STEP 91
ACTION: avl0.insert(int3) 
int3 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104126bd8> : <type 'instance'>
avl_REF0 = set([3, 6, 8, 9, 11, 13, 15, 17, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
avl0.delete(int0)                                                       # STEP 92
ACTION: avl0.delete(int0) 
int0 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104126bd8> : <type 'instance'>
avl_REF0 = set([3, 6, 8, 9, 11, 13, 15, 17, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([3, 6, 8, 9, 11, 13, 15, 17, 19]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103eba518>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1040f6638>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 23 steps

SAVING TEST AS failure.406.test.2
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
avl2 = avl.AVLTree()                                                     # STEP 0
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x103ebac68> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int0 = 13                                                                # STEP 1
ACTION: int0 = 13 
int0 = None : <type 'NoneType'>
=> int0 = 13 : <type 'int'>
==================================================
int2 = 16                                                                # STEP 2
ACTION: int2 = 16 
int2 = None : <type 'NoneType'>
=> int2 = 16 : <type 'int'>
==================================================
avl2.insert(int0)                                                        # STEP 3
ACTION: avl2.insert(int0) 
int0 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103ebac68> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([13]) : <type 'set'>
==================================================
int1 = 10                                                                # STEP 4
ACTION: int1 = 10 
int1 = None : <type 'NoneType'>
=> int1 = 10 : <type 'int'>
==================================================
avl2.delete(int0)                                                        # STEP 5
ACTION: avl2.delete(int0) 
int0 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103ebac68> : <type 'instance'>
avl_REF2 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int3 = 20                                                                # STEP 6
ACTION: int3 = 20 
int3 = None : <type 'NoneType'>
=> int3 = 20 : <type 'int'>
==================================================
avl2.insert(int2)                                                        # STEP 7
ACTION: avl2.insert(int2) 
int2 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103ebac68> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([16]) : <type 'set'>
==================================================
int2 = 14                                                                # STEP 8
ACTION: int2 = 14 
int2 = 16 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
avl2.insert(int2)                                                        # STEP 9
ACTION: avl2.insert(int2) 
int2 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103ebac68> : <type 'instance'>
avl_REF2 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([16, 14]) : <type 'set'>
==================================================
int0 = 4                                                                # STEP 10
ACTION: int0 = 4 
int0 = 13 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 11
ACTION: avl2.delete(int3) 
int3 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103ebac68> : <type 'instance'>
avl_REF2 = set([16, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.delete(int2)                                                       # STEP 12
ACTION: avl2.delete(int2) 
int2 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103ebac68> : <type 'instance'>
avl_REF2 = set([16, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([16]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 13
ACTION: avl2.delete(int1) 
int1 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103ebac68> : <type 'instance'>
avl_REF2 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int0)                                                       # STEP 14
ACTION: avl2.insert(int0) 
int0 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103ebac68> : <type 'instance'>
avl_REF2 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([16, 4]) : <type 'set'>
==================================================
result = avl2.find(int2)                                                # STEP 15
ACTION: result = avl2.find(int2) 
int2 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103ebac68> : <type 'instance'>
avl_REF2 = set([16, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
result = avl2.find(int3)                                                # STEP 16
ACTION: result = avl2.find(int3) 
int3 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103ebac68> : <type 'instance'>
avl_REF2 = set([16, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
result = avl2.inorder()                                                 # STEP 17
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x103ebac68> : <type 'instance'>
avl_REF2 = set([16, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int2)                                                       # STEP 18
ACTION: avl2.insert(int2) 
int2 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103ebac68> : <type 'instance'>
avl_REF2 = set([16, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([16, 4, 14]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 19
ACTION: avl2.insert(int0) 
int0 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103ebac68> : <type 'instance'>
avl_REF2 = set([16, 4, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl2.delete(int1)                                                       # STEP 20
ACTION: avl2.delete(int1) 
int1 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103ebac68> : <type 'instance'>
avl_REF2 = set([16, 4, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int3)                                                       # STEP 21
ACTION: avl2.insert(int3) 
int3 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103ebac68> : <type 'instance'>
avl_REF2 = set([16, 4, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([16, 20, 4, 14]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 22
ACTION: avl2.delete(int0) 
int0 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103ebac68> : <type 'instance'>
avl_REF2 = set([16, 20, 4, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([16, 20, 14]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103e822d8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 3 DISTINCT FAILURES
TEST #4 STEP #58 (0:00:30.002352) Fri Apr 28 06:17:24 2017 [ 156 stmts 206 branches ]
  16 [2:0]
-- < 2 [1:-1]
---- > 11 [0:0] L
-- > 18 [1:0]
---- < 17 [0:0] L
---- > 20 [0:0] L
set([2, 11, 16, 17, 18, 20])
  16 [3:1]
-- < 8 [2:-1]
---- < 2 [0:0] L
---- > 11 [1:-1]
------ > 15 [0:0] L
-- > 20 [1:1]
---- < 17 [0:0] L
set([2, 8, 11, 15, 16, 17, 20])
  16 [3:1]
-- < 8 [2:-1]
---- < 2 [0:0] L
---- > 11 [1:-1]
------ > 15 [0:0] L
-- > 20 [1:1]
---- < 17 [0:0] L
set([2, 8, 11, 15, 16, 17, 20])
  16 [3:1]
-- < 8 [2:-1]
---- < 2 [0:0] L
---- > 11 [1:-1]
------ > 15 [0:0] L
-- > 20 [1:1]
---- < 17 [0:0] L
set([2, 8, 11, 15, 16, 17, 20])
  16 [3:1]
-- < 8 [2:-1]
---- < 2 [0:0] L
---- > 12 [1:0]
------ < 11 [0:0] L
------ > 15 [0:0] L
-- > 20 [1:1]
---- < 17 [0:0] L
set([2, 8, 11, 12, 15, 16, 17, 20])
  11 [3:-1]
-- < 7 [1:-1]
---- > 8 [0:0] L
-- > 18 [2:1]
---- < 17 [1:1]
------ < 12 [0:0] L
---- > 20 [0:0] L
set([7, 8, 11, 12, 17, 18, 20])
  16 [3:1]
-- < 8 [2:-1]
---- < 2 [0:0] L
---- > 12 [1:0]
------ < 11 [0:0] L
------ > 15 [0:0] L
-- > 20 [1:1]
---- < 17 [0:0] L
set([2, 8, 11, 12, 15, 16, 17, 20])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103ee1d88>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
Original test has 20 steps

SAVING TEST AS failure.406.test.3
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 15                                                                # STEP 0
ACTION: int2 = 15 
int2 = None : <type 'NoneType'>
=> int2 = 15 : <type 'int'>
==================================================
int3 = 8                                                                 # STEP 1
ACTION: int3 = 8 
int3 = None : <type 'NoneType'>
=> int3 = 8 : <type 'int'>
==================================================
int0 = 19                                                                # STEP 2
ACTION: int0 = 19 
int0 = None : <type 'NoneType'>
=> int0 = 19 : <type 'int'>
==================================================
int1 = 6                                                                 # STEP 3
ACTION: int1 = 6 
int1 = None : <type 'NoneType'>
=> int1 = 6 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 4
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x103ee64d0> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.delete(int3)                                                        # STEP 5
ACTION: avl0.delete(int3) 
int3 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103ee64d0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.insert(int2)                                                        # STEP 6
ACTION: avl0.insert(int2) 
int2 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103ee64d0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([15]) : <type 'set'>
==================================================
avl0.insert(int0)                                                        # STEP 7
ACTION: avl0.insert(int0) 
int0 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103ee64d0> : <type 'instance'>
avl_REF0 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([19, 15]) : <type 'set'>
==================================================
avl0.insert(int3)                                                        # STEP 8
ACTION: avl0.insert(int3) 
int3 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103ee64d0> : <type 'instance'>
avl_REF0 = set([19, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([8, 19, 15]) : <type 'set'>
==================================================
result = avl0.inorder()                                                  # STEP 9
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x103ee64d0> : <type 'instance'>
avl_REF0 = set([8, 19, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int1)                                                       # STEP 10
ACTION: avl0.insert(int1) 
int1 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103ee64d0> : <type 'instance'>
avl_REF0 = set([8, 19, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([8, 19, 6, 15]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 11
ACTION: avl0.delete(int1) 
int1 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103ee64d0> : <type 'instance'>
avl_REF0 = set([8, 19, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([8, 19, 15]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 12
ACTION: avl0.insert(int1) 
int1 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103ee64d0> : <type 'instance'>
avl_REF0 = set([8, 19, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([8, 19, 6, 15]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 13
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x103ee64d0> : <type 'instance'>
avl_REF0 = set([8, 19, 6, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int1 = 14                                                               # STEP 14
ACTION: int1 = 14 
int1 = 6 : <type 'int'>
=> int1 = 14 : <type 'int'>
==================================================
int0 = 14                                                               # STEP 15
ACTION: int0 = 14 
int0 = 19 : <type 'int'>
=> int0 = 14 : <type 'int'>
==================================================
int2 = 19                                                               # STEP 16
ACTION: int2 = 19 
int2 = 15 : <type 'int'>
=> int2 = 19 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 17
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x103ee8a28> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 18
ACTION: avl0.delete(int0) 
int0 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103ee64d0> : <type 'instance'>
avl_REF0 = set([8, 19, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.delete(int2)                                                       # STEP 19
ACTION: avl0.delete(int2) 
int2 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103ee64d0> : <type 'instance'>
avl_REF0 = set([8, 19, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([8, 6, 15]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103ec2098>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 4 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104101758>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
Original test has 23 steps

SAVING TEST AS failure.406.test.4
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 15                                                                # STEP 0
ACTION: int1 = 15 
int1 = None : <type 'NoneType'>
=> int1 = 15 : <type 'int'>
==================================================
int0 = 18                                                                # STEP 1
ACTION: int0 = 18 
int0 = None : <type 'NoneType'>
=> int0 = 18 : <type 'int'>
==================================================
int2 = 8                                                                 # STEP 2
ACTION: int2 = 8 
int2 = None : <type 'NoneType'>
=> int2 = 8 : <type 'int'>
==================================================
int3 = 11                                                                # STEP 3
ACTION: int3 = 11 
int3 = None : <type 'NoneType'>
=> int3 = 11 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 4
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x104101ea8> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.delete(int1)                                                        # STEP 5
ACTION: avl0.delete(int1) 
int1 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104101ea8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.insert(int3)                                                        # STEP 6
ACTION: avl0.insert(int3) 
int3 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104101ea8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([11]) : <type 'set'>
==================================================
result = avl0.inorder()                                                  # STEP 7
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104101ea8> : <type 'instance'>
avl_REF0 = set([11]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.delete(int2)                                                        # STEP 8
ACTION: avl0.delete(int2) 
int2 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104101ea8> : <type 'instance'>
avl_REF0 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
result = avl0.inorder()                                                  # STEP 9
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104101ea8> : <type 'instance'>
avl_REF0 = set([11]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int3)                                                       # STEP 10
ACTION: avl0.insert(int3) 
int3 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104101ea8> : <type 'instance'>
avl_REF0 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
avl0.insert(int1)                                                       # STEP 11
ACTION: avl0.insert(int1) 
int1 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104101ea8> : <type 'instance'>
avl_REF0 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([11, 15]) : <type 'set'>
==================================================
avl0 == avl0                                                            # STEP 12
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x104101ea8> : <type 'instance'>
avl_REF0 = set([11, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
result = avl0.inorder()                                                 # STEP 13
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104101ea8> : <type 'instance'>
avl_REF0 = set([11, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int2)                                                       # STEP 14
ACTION: avl0.insert(int2) 
int2 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104101ea8> : <type 'instance'>
avl_REF0 = set([11, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([8, 11, 15]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 15
ACTION: avl0.delete(int0) 
int0 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104101ea8> : <type 'instance'>
avl_REF0 = set([8, 11, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int2 = 18                                                               # STEP 16
ACTION: int2 = 18 
int2 = 8 : <type 'int'>
=> int2 = 18 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 17
ACTION: avl0.insert(int2) 
int2 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104101ea8> : <type 'instance'>
avl_REF0 = set([8, 11, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([8, 18, 11, 15]) : <type 'set'>
==================================================
int2 = 2                                                                # STEP 18
ACTION: int2 = 2 
int2 = 18 : <type 'int'>
=> int2 = 2 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 19
ACTION: avl0.insert(int0) 
int0 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104101ea8> : <type 'instance'>
avl_REF0 = set([8, 18, 11, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
avl0.delete(int3)                                                       # STEP 20
ACTION: avl0.delete(int3) 
int3 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104101ea8> : <type 'instance'>
avl_REF0 = set([8, 18, 11, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([8, 18, 15]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 21
ACTION: avl0.insert(int2) 
int2 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104101ea8> : <type 'instance'>
avl_REF0 = set([8, 18, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([8, 18, 2, 15]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 22
ACTION: avl0.delete(int1) 
int1 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104101ea8> : <type 'instance'>
avl_REF0 = set([8, 18, 2, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([8, 18, 2]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10410b1b8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 5 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10411fdd0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 19 steps

SAVING TEST AS failure.406.test.5
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 17                                                                # STEP 0
ACTION: int2 = 17 
int2 = None : <type 'NoneType'>
=> int2 = 17 : <type 'int'>
==================================================
int3 = 13                                                                # STEP 1
ACTION: int3 = 13 
int3 = None : <type 'NoneType'>
=> int3 = 13 : <type 'int'>
==================================================
int0 = 15                                                                # STEP 2
ACTION: int0 = 15 
int0 = None : <type 'NoneType'>
=> int0 = 15 : <type 'int'>
==================================================
int1 = 15                                                                # STEP 3
ACTION: int1 = 15 
int1 = None : <type 'NoneType'>
=> int1 = 15 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x104103560> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.insert(int0)                                                        # STEP 5
ACTION: avl1.insert(int0) 
int0 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104103560> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([15]) : <type 'set'>
==================================================
result = avl1.inorder()                                                  # STEP 6
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104103560> : <type 'instance'>
avl_REF1 = set([15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int2)                                                        # STEP 7
ACTION: avl1.insert(int2) 
int2 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104103560> : <type 'instance'>
avl_REF1 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([17, 15]) : <type 'set'>
==================================================
int2 = 12                                                                # STEP 8
ACTION: int2 = 12 
int2 = 17 : <type 'int'>
=> int2 = 12 : <type 'int'>
==================================================
avl1.insert(int1)                                                        # STEP 9
ACTION: avl1.insert(int1) 
int1 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104103560> : <type 'instance'>
avl_REF1 = set([17, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl1.insert(int0)                                                       # STEP 10
ACTION: avl1.insert(int0) 
int0 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104103560> : <type 'instance'>
avl_REF1 = set([17, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.insert(int2)                                                       # STEP 11
ACTION: avl1.insert(int2) 
int2 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104103560> : <type 'instance'>
avl_REF1 = set([17, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([17, 12, 15]) : <type 'set'>
==================================================
int1 = 18                                                               # STEP 12
ACTION: int1 = 18 
int1 = 15 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 13
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104103560> : <type 'instance'>
avl_REF1 = set([17, 12, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int1)                                                       # STEP 14
ACTION: avl1.insert(int1) 
int1 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104103560> : <type 'instance'>
avl_REF1 = set([17, 12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([17, 18, 12, 15]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 15
ACTION: avl1.insert(int0) 
int0 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104103560> : <type 'instance'>
avl_REF1 = set([17, 18, 12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
int1 = 14                                                               # STEP 16
ACTION: int1 = 14 
int1 = 18 : <type 'int'>
=> int1 = 14 : <type 'int'>
==================================================
result = avl1.find(int3)                                                # STEP 17
ACTION: result = avl1.find(int3) 
int3 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104103560> : <type 'instance'>
avl_REF1 = set([17, 18, 12, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl1.delete(int2)                                                       # STEP 18
ACTION: avl1.delete(int2) 
int2 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104103560> : <type 'instance'>
avl_REF1 = set([17, 18, 12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([17, 18, 15]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104120dd0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 6 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 26
STOPPING TESTING DUE TO TIMEOUT
8.6528673227 PERCENT COVERED
60.1895439625 TOTAL RUNTIME
10 EXECUTED
554 TOTAL TEST OPERATIONS
21.2773914337 TIME SPENT EXECUTING TEST OPERATIONS
0.0612964630127 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
21.3361968994 TIME SPENT CHECKING PROPERTIES
42.6135883331 TOTAL TIME SPENT RUNNING SUT
0.00521159172058 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
6 FAILED
0 REPEATS OF FAILURES
6 ACTUAL DISTINCT FAILURES

FAILURE 0
int0 = 20                                                                # STEP 0
int3 = 18                                                                # STEP 1
int1 = 15                                                                # STEP 2
avl2 = avl.AVLTree()                                                     # STEP 3
avl2.insert(int1)                                                        # STEP 4
avl2.insert(int1)                                                        # STEP 5
avl2.delete(int3)                                                        # STEP 6
avl2.insert(int1)                                                        # STEP 7
avl2.delete(int3)                                                        # STEP 8
result = avl2.find(int0)                                                 # STEP 9
int0 = 4                                                                # STEP 10
int3 = 15                                                               # STEP 11
avl2.delete(int3)                                                       # STEP 12
avl2.delete(int1)                                                       # STEP 13
int3 = 2                                                                # STEP 14
int1 = 16                                                               # STEP 15
result = avl2.inorder()                                                 # STEP 16
int2 = 20                                                               # STEP 17
avl2.delete(int3)                                                       # STEP 18
avl2.delete(int1)                                                       # STEP 19
avl2.insert(int0)                                                       # STEP 20
avl2.delete(int3)                                                       # STEP 21
avl2.insert(int2)                                                       # STEP 22
avl2.delete(int2)                                                       # STEP 23
avl2.insert(int2)                                                       # STEP 24
avl2.delete(int0)                                                       # STEP 25
avl2.insert(int0)                                                       # STEP 26
avl2.insert(int3)                                                       # STEP 27
avl2.delete(int3)                                                       # STEP 28
avl2.delete(int0)                                                       # STEP 29
result = avl2.inorder()                                                 # STEP 30
int3 = 16                                                               # STEP 31
avl2.insert(int3)                                                       # STEP 32
avl2.insert(int2)                                                       # STEP 33
avl2.delete(int1)                                                       # STEP 34
int3 = 14                                                               # STEP 35
avl2.insert(int2)                                                       # STEP 36
avl2.insert(int3)                                                       # STEP 37
avl2.insert(int0)                                                       # STEP 38
avl2.delete(int3)                                                       # STEP 39
avl2.delete(int2)                                                       # STEP 40
int3 = 7                                                                # STEP 41
avl2.delete(int3)                                                       # STEP 42
avl2.insert(int1)                                                       # STEP 43
int1 = 18                                                               # STEP 44
int2 = 13                                                               # STEP 45
avl2.insert(int1)                                                       # STEP 46
avl2.insert(int1)                                                       # STEP 47
avl2.insert(int3)                                                       # STEP 48
avl2.delete(int1)                                                       # STEP 49
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10391c878>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE 1
avl0 = avl.AVLTree()                                                     # STEP 0
int3 = 7                                                                 # STEP 1
avl0.delete(int3)                                                        # STEP 2
int2 = 6                                                                 # STEP 3
int0 = 20                                                                # STEP 4
int3 = 11                                                                # STEP 5
avl0.insert(int2)                                                        # STEP 6
result = avl0.find(int2)                                                 # STEP 7
avl0.delete(int2)                                                        # STEP 8
int2 = 18                                                                # STEP 9
avl0.insert(int3)                                                       # STEP 10
int3 = 9                                                                # STEP 11
avl0.insert(int2)                                                       # STEP 12
result = avl0.inorder()                                                 # STEP 13
avl0.delete(int2)                                                       # STEP 14
avl0.insert(int2)                                                       # STEP 15
result = avl0.find(int3)                                                # STEP 16
result = avl0.inorder()                                                 # STEP 17
avl0.delete(int2)                                                       # STEP 18
result = avl0.find(int2)                                                # STEP 19
avl0.delete(int0)                                                       # STEP 20
int0 = 6                                                                # STEP 21
avl0.insert(int3)                                                       # STEP 22
avl0.insert(int3)                                                       # STEP 23
result = avl0.inorder()                                                 # STEP 24
avl0.delete(int2)                                                       # STEP 25
avl0.insert(int2)                                                       # STEP 26
result = avl0.find(int2)                                                # STEP 27
avl0 == avl0                                                            # STEP 28
int2 = 15                                                               # STEP 29
result = avl0.find(int0)                                                # STEP 30
result = avl0.inorder()                                                 # STEP 31
avl0.insert(int0)                                                       # STEP 32
int1 = 15                                                               # STEP 33
avl0.insert(int3)                                                       # STEP 34
int0 = 12                                                               # STEP 35
int3 = 19                                                               # STEP 36
avl0.insert(int1)                                                       # STEP 37
avl0.insert(int1)                                                       # STEP 38
int1 = 3                                                                # STEP 39
avl0.delete(int3)                                                       # STEP 40
avl0.insert(int1)                                                       # STEP 41
avl0.insert(int3)                                                       # STEP 42
avl0.delete(int2)                                                       # STEP 43
avl0.insert(int1)                                                       # STEP 44
avl0.insert(int0)                                                       # STEP 45
avl0.delete(int2)                                                       # STEP 46
avl0.display()                                                          # STEP 47
result = avl0.find(int0)                                                # STEP 48
result = avl0.find(int3)                                                # STEP 49
avl0.delete(int0)                                                       # STEP 50
avl0.delete(int3)                                                       # STEP 51
avl0 == avl0                                                            # STEP 52
avl0.delete(int2)                                                       # STEP 53
avl0.delete(int3)                                                       # STEP 54
result = avl0.inorder()                                                 # STEP 55
avl0.insert(int3)                                                       # STEP 56
avl0.display()                                                          # STEP 57
avl2 = avl.AVLTree()                                                    # STEP 58
avl2.insert(int2)                                                       # STEP 59
avl2.delete(int3)                                                       # STEP 60
avl0.insert(int2)                                                       # STEP 61
int2 = 17                                                               # STEP 62
result = avl2.inorder()                                                 # STEP 63
avl0.display()                                                          # STEP 64
int3 = 10                                                               # STEP 65
result = avl0.inorder()                                                 # STEP 66
avl0.delete(int3)                                                       # STEP 67
avl0.insert(int1)                                                       # STEP 68
avl2.insert(int2)                                                       # STEP 69
avl2.insert(int2)                                                       # STEP 70
avl2.insert(int2)                                                       # STEP 71
int3 = 13                                                               # STEP 72
int1 = 20                                                               # STEP 73
avl0.display()                                                          # STEP 74
avl0.display()                                                          # STEP 75
avl0.insert(int2)                                                       # STEP 76
result = avl0.find(int0)                                                # STEP 77
avl0.display()                                                          # STEP 78
avl0.insert(int3)                                                       # STEP 79
int3 = 3                                                                # STEP 80
avl0.display()                                                          # STEP 81
avl2.insert(int1)                                                       # STEP 82
int2 = 8                                                                # STEP 83
avl0.delete(int1)                                                       # STEP 84
avl0.insert(int2)                                                       # STEP 85
avl0.display()                                                          # STEP 86
int1 = 10                                                               # STEP 87
avl2.delete(int0)                                                       # STEP 88
int0 = 18                                                               # STEP 89
avl2.delete(int2)                                                       # STEP 90
avl0.insert(int3)                                                       # STEP 91
avl0.delete(int0)                                                       # STEP 92
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103eba518>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE 2
avl2 = avl.AVLTree()                                                     # STEP 0
int0 = 13                                                                # STEP 1
int2 = 16                                                                # STEP 2
avl2.insert(int0)                                                        # STEP 3
int1 = 10                                                                # STEP 4
avl2.delete(int0)                                                        # STEP 5
int3 = 20                                                                # STEP 6
avl2.insert(int2)                                                        # STEP 7
int2 = 14                                                                # STEP 8
avl2.insert(int2)                                                        # STEP 9
int0 = 4                                                                # STEP 10
avl2.delete(int3)                                                       # STEP 11
avl2.delete(int2)                                                       # STEP 12
avl2.delete(int1)                                                       # STEP 13
avl2.insert(int0)                                                       # STEP 14
result = avl2.find(int2)                                                # STEP 15
result = avl2.find(int3)                                                # STEP 16
result = avl2.inorder()                                                 # STEP 17
avl2.insert(int2)                                                       # STEP 18
avl2.insert(int0)                                                       # STEP 19
avl2.delete(int1)                                                       # STEP 20
avl2.insert(int3)                                                       # STEP 21
avl2.delete(int0)                                                       # STEP 22
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103e822d8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE 3
int2 = 15                                                                # STEP 0
int3 = 8                                                                 # STEP 1
int0 = 19                                                                # STEP 2
int1 = 6                                                                 # STEP 3
avl0 = avl.AVLTree()                                                     # STEP 4
avl0.delete(int3)                                                        # STEP 5
avl0.insert(int2)                                                        # STEP 6
avl0.insert(int0)                                                        # STEP 7
avl0.insert(int3)                                                        # STEP 8
result = avl0.inorder()                                                  # STEP 9
avl0.insert(int1)                                                       # STEP 10
avl0.delete(int1)                                                       # STEP 11
avl0.insert(int1)                                                       # STEP 12
result = avl0.inorder()                                                 # STEP 13
int1 = 14                                                               # STEP 14
int0 = 14                                                               # STEP 15
int2 = 19                                                               # STEP 16
avl2 = avl.AVLTree()                                                    # STEP 17
avl0.delete(int0)                                                       # STEP 18
avl0.delete(int2)                                                       # STEP 19
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103ec2098>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE 4
int1 = 15                                                                # STEP 0
int0 = 18                                                                # STEP 1
int2 = 8                                                                 # STEP 2
int3 = 11                                                                # STEP 3
avl0 = avl.AVLTree()                                                     # STEP 4
avl0.delete(int1)                                                        # STEP 5
avl0.insert(int3)                                                        # STEP 6
result = avl0.inorder()                                                  # STEP 7
avl0.delete(int2)                                                        # STEP 8
result = avl0.inorder()                                                  # STEP 9
avl0.insert(int3)                                                       # STEP 10
avl0.insert(int1)                                                       # STEP 11
avl0 == avl0                                                            # STEP 12
result = avl0.inorder()                                                 # STEP 13
avl0.insert(int2)                                                       # STEP 14
avl0.delete(int0)                                                       # STEP 15
int2 = 18                                                               # STEP 16
avl0.insert(int2)                                                       # STEP 17
int2 = 2                                                                # STEP 18
avl0.insert(int0)                                                       # STEP 19
avl0.delete(int3)                                                       # STEP 20
avl0.insert(int2)                                                       # STEP 21
avl0.delete(int1)                                                       # STEP 22
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10410b1b8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE 5
int2 = 17                                                                # STEP 0
int3 = 13                                                                # STEP 1
int0 = 15                                                                # STEP 2
int1 = 15                                                                # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
avl1.insert(int0)                                                        # STEP 5
result = avl1.inorder()                                                  # STEP 6
avl1.insert(int2)                                                        # STEP 7
int2 = 12                                                                # STEP 8
avl1.insert(int1)                                                        # STEP 9
avl1.insert(int0)                                                       # STEP 10
avl1.insert(int2)                                                       # STEP 11
int1 = 18                                                               # STEP 12
result = avl1.inorder()                                                 # STEP 13
avl1.insert(int1)                                                       # STEP 14
avl1.insert(int0)                                                       # STEP 15
int1 = 14                                                               # STEP 16
result = avl1.find(int3)                                                # STEP 17
avl1.delete(int2)                                                       # STEP 18
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104120dd0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
218 BRANCHES COVERED
163 STATEMENTS COVERED

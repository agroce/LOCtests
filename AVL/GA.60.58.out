Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.14520.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
TEST #3 STEP #86 (0:00:30.033550) Sun Apr 30 04:19:50 2017 [ 137 stmts 185 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104618488>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
Original test has 61 steps

SAVING TEST AS failure.14520.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 5                                                                 # STEP 0
ACTION: int0 = 5 
int0 = None : <type 'NoneType'>
=> int0 = 5 : <type 'int'>
==================================================
int3 = 12                                                                # STEP 1
ACTION: int3 = 12 
int3 = None : <type 'NoneType'>
=> int3 = 12 : <type 'int'>
==================================================
int1 = 10                                                                # STEP 2
ACTION: int1 = 10 
int1 = None : <type 'NoneType'>
=> int1 = 10 : <type 'int'>
==================================================
int2 = 8                                                                 # STEP 3
ACTION: int2 = 8 
int2 = None : <type 'NoneType'>
=> int2 = 8 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x10418acb0> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
result = avl1.find(int2)                                                 # STEP 5
ACTION: result = avl1.find(int2) 
int2 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10418acb0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int2 = 18                                                                # STEP 6
ACTION: int2 = 18 
int2 = 8 : <type 'int'>
=> int2 = 18 : <type 'int'>
==================================================
result = avl1.find(int0)                                                 # STEP 7
ACTION: result = avl1.find(int0) 
int0 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10418acb0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
int0 = 2                                                                 # STEP 8
ACTION: int0 = 2 
int0 = 5 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 9
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x104082a28> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2 == avl1                                                            # STEP 10
ACTION: avl2 == avl1 
avl2 = <avlbug2.AVLTree instance at 0x104082a28> : <type 'instance'>
avl1 = <avlbug2.AVLTree instance at 0x10418acb0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
result = avl2.find(int3)                                                # STEP 11
ACTION: result = avl2.find(int3) 
int3 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104082a28> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl1.insert(int0)                                                       # STEP 12
ACTION: avl1.insert(int0) 
int0 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10418acb0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([2]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 13
ACTION: avl1.delete(int0) 
int0 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10418acb0> : <type 'instance'>
avl_REF1 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int0 = 14                                                               # STEP 14
ACTION: int0 = 14 
int0 = 2 : <type 'int'>
=> int0 = 14 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 15
ACTION: avl1.insert(int3) 
int3 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10418acb0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([12]) : <type 'set'>
==================================================
result = avl2.find(int0)                                                # STEP 16
ACTION: result = avl2.find(int0) 
int0 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104082a28> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
int3 = 6                                                                # STEP 17
ACTION: int3 = 6 
int3 = 12 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
result = avl2.find(int1)                                                # STEP 18
ACTION: result = avl2.find(int1) 
int1 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104082a28> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int0 = 9                                                                # STEP 19
ACTION: int0 = 9 
int0 = 14 : <type 'int'>
=> int0 = 9 : <type 'int'>
==================================================
result = avl2.find(int1)                                                # STEP 20
ACTION: result = avl2.find(int1) 
int1 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104082a28> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
result = avl1.inorder()                                                 # STEP 21
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x10418acb0> : <type 'instance'>
avl_REF1 = set([12]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int1 = 19                                                               # STEP 22
ACTION: int1 = 19 
int1 = 10 : <type 'int'>
=> int1 = 19 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 23
ACTION: avl1.insert(int3) 
int3 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10418acb0> : <type 'instance'>
avl_REF1 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([12, 6]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 24
ACTION: avl2.delete(int3) 
int3 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104082a28> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.delete(int0)                                                       # STEP 25
ACTION: avl2.delete(int0) 
int0 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104082a28> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int0 = 20                                                               # STEP 26
ACTION: int0 = 20 
int0 = 9 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 27
ACTION: avl1.delete(int0) 
int0 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10418acb0> : <type 'instance'>
avl_REF1 = set([12, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int3 = 11                                                               # STEP 28
ACTION: int3 = 11 
int3 = 6 : <type 'int'>
=> int3 = 11 : <type 'int'>
==================================================
int0 = 20                                                               # STEP 29
ACTION: int0 = 20 
int0 = 20 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 30
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x10418acb0> : <type 'instance'>
avl_REF1 = set([12, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl2.insert(int1)                                                       # STEP 31
ACTION: avl2.insert(int1) 
int1 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104082a28> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([19]) : <type 'set'>
==================================================
avl2 == avl1                                                            # STEP 32
ACTION: avl2 == avl1 
avl2 = <avlbug2.AVLTree instance at 0x104082a28> : <type 'instance'>
avl1 = <avlbug2.AVLTree instance at 0x10418acb0> : <type 'instance'>
avl_REF2 = set([19]) : <type 'set'>
avl_REF1 = set([12, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
avl2.insert(int0)                                                       # STEP 33
ACTION: avl2.insert(int0) 
int0 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104082a28> : <type 'instance'>
avl_REF2 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([19, 20]) : <type 'set'>
==================================================
int0 = 13                                                               # STEP 34
ACTION: int0 = 13 
int0 = 20 : <type 'int'>
=> int0 = 13 : <type 'int'>
==================================================
int1 = 20                                                               # STEP 35
ACTION: int1 = 20 
int1 = 19 : <type 'int'>
=> int1 = 20 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 36
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x10418acb0> : <type 'instance'>
avl_REF1 = set([12, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
result = avl1.find(int0)                                                # STEP 37
ACTION: result = avl1.find(int0) 
int0 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10418acb0> : <type 'instance'>
avl_REF1 = set([12, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
result = avl1.find(int3)                                                # STEP 38
ACTION: result = avl1.find(int3) 
int3 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10418acb0> : <type 'instance'>
avl_REF1 = set([12, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
int3 = 20                                                               # STEP 39
ACTION: int3 = 20 
int3 = 11 : <type 'int'>
=> int3 = 20 : <type 'int'>
==================================================
int0 = 19                                                               # STEP 40
ACTION: int0 = 19 
int0 = 13 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 41
ACTION: avl1.insert(int3) 
int3 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10418acb0> : <type 'instance'>
avl_REF1 = set([12, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([20, 12, 6]) : <type 'set'>
==================================================
int3 = 1                                                                # STEP 42
ACTION: int3 = 1 
int3 = 20 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 43
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x104082a28> : <type 'instance'>
avl_REF2 = set([19, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl0 = avl.AVLTree()                                                    # STEP 44
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x1040578c0> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 45
ACTION: avl1.delete(int3) 
int3 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10418acb0> : <type 'instance'>
avl_REF1 = set([20, 12, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl2.delete(int0)                                                       # STEP 46
ACTION: avl2.delete(int0) 
int0 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104082a28> : <type 'instance'>
avl_REF2 = set([19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([20]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 47
ACTION: avl1.insert(int3) 
int3 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10418acb0> : <type 'instance'>
avl_REF1 = set([20, 12, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([20, 12, 6, 1]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 48
ACTION: avl0.insert(int0) 
int0 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1040578c0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([19]) : <type 'set'>
==================================================
avl2 == avl1                                                            # STEP 49
ACTION: avl2 == avl1 
avl2 = <avlbug2.AVLTree instance at 0x104082a28> : <type 'instance'>
avl1 = <avlbug2.AVLTree instance at 0x10418acb0> : <type 'instance'>
avl_REF2 = set([20]) : <type 'set'>
avl_REF1 = set([20, 12, 6, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
int3 = 17                                                               # STEP 50
ACTION: int3 = 17 
int3 = 1 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 51
ACTION: avl2.insert(int3) 
int3 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104082a28> : <type 'instance'>
avl_REF2 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([17, 20]) : <type 'set'>
==================================================
int3 = 9                                                                # STEP 52
ACTION: int3 = 9 
int3 = 17 : <type 'int'>
=> int3 = 9 : <type 'int'>
==================================================
int0 = 17                                                               # STEP 53
ACTION: int0 = 17 
int0 = 19 : <type 'int'>
=> int0 = 17 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 54
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x104082a28> : <type 'instance'>
avl_REF2 = set([17, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl1.inorder()                                                 # STEP 55
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x10418acb0> : <type 'instance'>
avl_REF1 = set([20, 12, 6, 1]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
result = avl2.find(int2)                                                # STEP 56
ACTION: result = avl2.find(int2) 
int2 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104082a28> : <type 'instance'>
avl_REF2 = set([17, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl0.delete(int3)                                                       # STEP 57
ACTION: avl0.delete(int3) 
int3 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1040578c0> : <type 'instance'>
avl_REF0 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl2.delete(int3)                                                       # STEP 58
ACTION: avl2.delete(int3) 
int3 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104082a28> : <type 'instance'>
avl_REF2 = set([17, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int2 = 9                                                                # STEP 59
ACTION: int2 = 9 
int2 = 18 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 60
ACTION: avl1.delete(int1) 
int1 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10418acb0> : <type 'instance'>
avl_REF1 = set([20, 12, 6, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([12, 6, 1]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1040484d0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 48
STOPPING TESTING DUE TO TIMEOUT
7.4147633234 PERCENT COVERED
60.2469499111 TOTAL RUNTIME
6 EXECUTED
509 TOTAL TEST OPERATIONS
26.6997880936 TIME SPENT EXECUTING TEST OPERATIONS
0.0192852020264 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
26.8351581097 TIME SPENT CHECKING PROPERTIES
53.5349462032 TOTAL TIME SPENT RUNNING SUT
0.00460410118103 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int0 = 5                                                                 # STEP 0
int3 = 12                                                                # STEP 1
int1 = 10                                                                # STEP 2
int2 = 8                                                                 # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
result = avl1.find(int2)                                                 # STEP 5
int2 = 18                                                                # STEP 6
result = avl1.find(int0)                                                 # STEP 7
int0 = 2                                                                 # STEP 8
avl2 = avl.AVLTree()                                                     # STEP 9
avl2 == avl1                                                            # STEP 10
result = avl2.find(int3)                                                # STEP 11
avl1.insert(int0)                                                       # STEP 12
avl1.delete(int0)                                                       # STEP 13
int0 = 14                                                               # STEP 14
avl1.insert(int3)                                                       # STEP 15
result = avl2.find(int0)                                                # STEP 16
int3 = 6                                                                # STEP 17
result = avl2.find(int1)                                                # STEP 18
int0 = 9                                                                # STEP 19
result = avl2.find(int1)                                                # STEP 20
result = avl1.inorder()                                                 # STEP 21
int1 = 19                                                               # STEP 22
avl1.insert(int3)                                                       # STEP 23
avl2.delete(int3)                                                       # STEP 24
avl2.delete(int0)                                                       # STEP 25
int0 = 20                                                               # STEP 26
avl1.delete(int0)                                                       # STEP 27
int3 = 11                                                               # STEP 28
int0 = 20                                                               # STEP 29
avl1 == avl1                                                            # STEP 30
avl2.insert(int1)                                                       # STEP 31
avl2 == avl1                                                            # STEP 32
avl2.insert(int0)                                                       # STEP 33
int0 = 13                                                               # STEP 34
int1 = 20                                                               # STEP 35
avl1 == avl1                                                            # STEP 36
result = avl1.find(int0)                                                # STEP 37
result = avl1.find(int3)                                                # STEP 38
int3 = 20                                                               # STEP 39
int0 = 19                                                               # STEP 40
avl1.insert(int3)                                                       # STEP 41
int3 = 1                                                                # STEP 42
result = avl2.inorder()                                                 # STEP 43
avl0 = avl.AVLTree()                                                    # STEP 44
avl1.delete(int3)                                                       # STEP 45
avl2.delete(int0)                                                       # STEP 46
avl1.insert(int3)                                                       # STEP 47
avl0.insert(int0)                                                       # STEP 48
avl2 == avl1                                                            # STEP 49
int3 = 17                                                               # STEP 50
avl2.insert(int3)                                                       # STEP 51
int3 = 9                                                                # STEP 52
int0 = 17                                                               # STEP 53
result = avl2.inorder()                                                 # STEP 54
result = avl1.inorder()                                                 # STEP 55
result = avl2.find(int2)                                                # STEP 56
avl0.delete(int3)                                                       # STEP 57
avl2.delete(int3)                                                       # STEP 58
int2 = 9                                                                # STEP 59
avl1.delete(int1)                                                       # STEP 60
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1040484d0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
185 BRANCHES COVERED
137 STATEMENTS COVERED

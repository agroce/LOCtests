Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.171.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  13 [2:0]
-- < 7 [1:0]
---- < 2 [0:0] L
---- > 10 [0:0] L
-- > 17 [1:-1]
---- > 20 [0:0] L
set([2, 7, 10, 13, 17, 20])
TEST #4 STEP #75 (0:00:30.063569) Fri Apr 28 05:41:48 2017 [ 164 stmts 220 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105012638>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
Original test has 62 steps

SAVING TEST AS failure.171.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 16                                                                # STEP 0
ACTION: int0 = 16 
int0 = None : <type 'NoneType'>
=> int0 = 16 : <type 'int'>
==================================================
int3 = 1                                                                 # STEP 1
ACTION: int3 = 1 
int3 = None : <type 'NoneType'>
=> int3 = 1 : <type 'int'>
==================================================
int2 = 17                                                                # STEP 2
ACTION: int2 = 17 
int2 = None : <type 'NoneType'>
=> int2 = 17 : <type 'int'>
==================================================
int1 = 1                                                                 # STEP 3
ACTION: int1 = 1 
int1 = None : <type 'NoneType'>
=> int1 = 1 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 4
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x105054f80> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
result = avl0.find(int2)                                                 # STEP 5
ACTION: result = avl0.find(int2) 
int2 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105054f80> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl0.delete(int1)                                                        # STEP 6
ACTION: avl0.delete(int1) 
int1 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105054f80> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl2 = avl.AVLTree()                                                     # STEP 7
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x1045a57e8> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.delete(int1)                                                        # STEP 8
ACTION: avl2.delete(int1) 
int1 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1045a57e8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int2 = 14                                                                # STEP 9
ACTION: int2 = 14 
int2 = 17 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 10
ACTION: avl0.insert(int3) 
int3 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105054f80> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([1]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 11
ACTION: avl0.delete(int2) 
int2 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105054f80> : <type 'instance'>
avl_REF0 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int2 = 18                                                               # STEP 12
ACTION: int2 = 18 
int2 = 14 : <type 'int'>
=> int2 = 18 : <type 'int'>
==================================================
avl2 == avl0                                                            # STEP 13
ACTION: avl2 == avl0 
avl2 = <avl.AVLTree instance at 0x1045a57e8> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x105054f80> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
avl_REF0 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF0 
==================================================
int1 = 5                                                                # STEP 14
ACTION: int1 = 5 
int1 = 1 : <type 'int'>
=> int1 = 5 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 15
ACTION: avl2.insert(int2) 
int2 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1045a57e8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([18]) : <type 'set'>
==================================================
int3 = 11                                                               # STEP 16
ACTION: int3 = 11 
int3 = 1 : <type 'int'>
=> int3 = 11 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 17
ACTION: avl2.delete(int3) 
int3 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1045a57e8> : <type 'instance'>
avl_REF2 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int3 = 4                                                                # STEP 18
ACTION: int3 = 4 
int3 = 11 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
int2 = 5                                                                # STEP 19
ACTION: int2 = 5 
int2 = 18 : <type 'int'>
=> int2 = 5 : <type 'int'>
==================================================
avl0 == avl0                                                            # STEP 20
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x105054f80> : <type 'instance'>
avl_REF0 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl0.insert(int1)                                                       # STEP 21
ACTION: avl0.insert(int1) 
int1 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105054f80> : <type 'instance'>
avl_REF0 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([1, 5]) : <type 'set'>
==================================================
result = avl2.find(int2)                                                # STEP 22
ACTION: result = avl2.find(int2) 
int2 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1045a57e8> : <type 'instance'>
avl_REF2 = set([18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl2.delete(int1)                                                       # STEP 23
ACTION: avl2.delete(int1) 
int1 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1045a57e8> : <type 'instance'>
avl_REF2 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2 == avl2                                                            # STEP 24
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x1045a57e8> : <type 'instance'>
avl_REF2 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
int1 = 4                                                                # STEP 25
ACTION: int1 = 4 
int1 = 5 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
int2 = 5                                                                # STEP 26
ACTION: int2 = 5 
int2 = 5 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 27
ACTION: avl0.insert(int0) 
int0 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105054f80> : <type 'instance'>
avl_REF0 = set([1, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([16, 1, 5]) : <type 'set'>
==================================================
result = avl2.find(int3)                                                # STEP 28
ACTION: result = avl2.find(int3) 
int3 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1045a57e8> : <type 'instance'>
avl_REF2 = set([18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl2.delete(int0)                                                       # STEP 29
ACTION: avl2.delete(int0) 
int0 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1045a57e8> : <type 'instance'>
avl_REF2 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
result = avl0.find(int0)                                                # STEP 30
ACTION: result = avl0.find(int0) 
int0 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105054f80> : <type 'instance'>
avl_REF0 = set([16, 1, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
int0 = 3                                                                # STEP 31
ACTION: int0 = 3 
int0 = 16 : <type 'int'>
=> int0 = 3 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 32
ACTION: avl2.delete(int0) 
int0 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1045a57e8> : <type 'instance'>
avl_REF2 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int0 = 5                                                                # STEP 33
ACTION: int0 = 5 
int0 = 3 : <type 'int'>
=> int0 = 5 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 34
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x1045a57e8> : <type 'instance'>
avl_REF2 = set([18]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int3 = 1                                                                # STEP 35
ACTION: int3 = 1 
int3 = 4 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
result = avl0.find(int2)                                                # STEP 36
ACTION: result = avl0.find(int2) 
int2 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105054f80> : <type 'instance'>
avl_REF0 = set([16, 1, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
int2 = 13                                                               # STEP 37
ACTION: int2 = 13 
int2 = 5 : <type 'int'>
=> int2 = 13 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 38
ACTION: avl0.insert(int2) 
int2 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105054f80> : <type 'instance'>
avl_REF0 = set([16, 1, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([16, 1, 5, 13]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 39
ACTION: avl2.insert(int0) 
int0 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1045a57e8> : <type 'instance'>
avl_REF2 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([18, 5]) : <type 'set'>
==================================================
int2 = 1                                                                # STEP 40
ACTION: int2 = 1 
int2 = 13 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 41
ACTION: avl2.delete(int2) 
int2 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1045a57e8> : <type 'instance'>
avl_REF2 = set([18, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
result = avl0.find(int2)                                                # STEP 42
ACTION: result = avl0.find(int2) 
int2 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105054f80> : <type 'instance'>
avl_REF0 = set([16, 1, 5, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
int0 = 6                                                                # STEP 43
ACTION: int0 = 6 
int0 = 5 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 44
ACTION: avl2.insert(int1) 
int1 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1045a57e8> : <type 'instance'>
avl_REF2 = set([18, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([18, 4, 5]) : <type 'set'>
==================================================
result = avl2.find(int3)                                                # STEP 45
ACTION: result = avl2.find(int3) 
int3 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1045a57e8> : <type 'instance'>
avl_REF2 = set([18, 4, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
int1 = 17                                                               # STEP 46
ACTION: int1 = 17 
int1 = 4 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 47
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x1045a57e8> : <type 'instance'>
avl_REF2 = set([18, 4, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int3 = 10                                                               # STEP 48
ACTION: int3 = 10 
int3 = 1 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
int2 = 5                                                                # STEP 49
ACTION: int2 = 5 
int2 = 1 : <type 'int'>
=> int2 = 5 : <type 'int'>
==================================================
result = avl0.find(int1)                                                # STEP 50
ACTION: result = avl0.find(int1) 
int1 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105054f80> : <type 'instance'>
avl_REF0 = set([16, 1, 5, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl2.delete(int0)                                                       # STEP 51
ACTION: avl2.delete(int0) 
int0 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1045a57e8> : <type 'instance'>
avl_REF2 = set([18, 4, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.delete(int2)                                                       # STEP 52
ACTION: avl2.delete(int2) 
int2 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1045a57e8> : <type 'instance'>
avl_REF2 = set([18, 4, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([18, 4]) : <type 'set'>
==================================================
int1 = 5                                                                # STEP 53
ACTION: int1 = 5 
int1 = 17 : <type 'int'>
=> int1 = 5 : <type 'int'>
==================================================
int2 = 4                                                                # STEP 54
ACTION: int2 = 4 
int2 = 5 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
int0 = 1                                                                # STEP 55
ACTION: int0 = 1 
int0 = 6 : <type 'int'>
=> int0 = 1 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 56
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x1045a57e8> : <type 'instance'>
avl_REF2 = set([18, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl0 == avl2                                                            # STEP 57
ACTION: avl0 == avl2 
avl0 = <avl.AVLTree instance at 0x105054f80> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x1045a57e8> : <type 'instance'>
avl_REF0 = set([16, 1, 5, 13]) : <type 'set'>
avl_REF2 = set([18, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
result = avl0.find(int3)                                                # STEP 58
ACTION: result = avl0.find(int3) 
int3 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105054f80> : <type 'instance'>
avl_REF0 = set([16, 1, 5, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
result = avl0.find(int0)                                                # STEP 59
ACTION: result = avl0.find(int0) 
int0 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105054f80> : <type 'instance'>
avl_REF0 = set([16, 1, 5, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
int3 = 11                                                               # STEP 60
ACTION: int3 = 11 
int3 = 10 : <type 'int'>
=> int3 = 11 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 61
ACTION: avl0.delete(int0) 
int0 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105054f80> : <type 'instance'>
avl_REF0 = set([16, 1, 5, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([16, 5, 13]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1042be8c0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 15
STOPPING TESTING DUE TO TIMEOUT
8.72073294876 PERCENT COVERED
60.2421588898 TOTAL RUNTIME
8 EXECUTED
677 TOTAL TEST OPERATIONS
27.2212753296 TIME SPENT EXECUTING TEST OPERATIONS
0.0237691402435 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
27.4754698277 TIME SPENT CHECKING PROPERTIES
54.6967451572 TOTAL TIME SPENT RUNNING SUT
0.00582766532898 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int0 = 16                                                                # STEP 0
int3 = 1                                                                 # STEP 1
int2 = 17                                                                # STEP 2
int1 = 1                                                                 # STEP 3
avl0 = avl.AVLTree()                                                     # STEP 4
result = avl0.find(int2)                                                 # STEP 5
avl0.delete(int1)                                                        # STEP 6
avl2 = avl.AVLTree()                                                     # STEP 7
avl2.delete(int1)                                                        # STEP 8
int2 = 14                                                                # STEP 9
avl0.insert(int3)                                                       # STEP 10
avl0.delete(int2)                                                       # STEP 11
int2 = 18                                                               # STEP 12
avl2 == avl0                                                            # STEP 13
int1 = 5                                                                # STEP 14
avl2.insert(int2)                                                       # STEP 15
int3 = 11                                                               # STEP 16
avl2.delete(int3)                                                       # STEP 17
int3 = 4                                                                # STEP 18
int2 = 5                                                                # STEP 19
avl0 == avl0                                                            # STEP 20
avl0.insert(int1)                                                       # STEP 21
result = avl2.find(int2)                                                # STEP 22
avl2.delete(int1)                                                       # STEP 23
avl2 == avl2                                                            # STEP 24
int1 = 4                                                                # STEP 25
int2 = 5                                                                # STEP 26
avl0.insert(int0)                                                       # STEP 27
result = avl2.find(int3)                                                # STEP 28
avl2.delete(int0)                                                       # STEP 29
result = avl0.find(int0)                                                # STEP 30
int0 = 3                                                                # STEP 31
avl2.delete(int0)                                                       # STEP 32
int0 = 5                                                                # STEP 33
result = avl2.inorder()                                                 # STEP 34
int3 = 1                                                                # STEP 35
result = avl0.find(int2)                                                # STEP 36
int2 = 13                                                               # STEP 37
avl0.insert(int2)                                                       # STEP 38
avl2.insert(int0)                                                       # STEP 39
int2 = 1                                                                # STEP 40
avl2.delete(int2)                                                       # STEP 41
result = avl0.find(int2)                                                # STEP 42
int0 = 6                                                                # STEP 43
avl2.insert(int1)                                                       # STEP 44
result = avl2.find(int3)                                                # STEP 45
int1 = 17                                                               # STEP 46
result = avl2.inorder()                                                 # STEP 47
int3 = 10                                                               # STEP 48
int2 = 5                                                                # STEP 49
result = avl0.find(int1)                                                # STEP 50
avl2.delete(int0)                                                       # STEP 51
avl2.delete(int2)                                                       # STEP 52
int1 = 5                                                                # STEP 53
int2 = 4                                                                # STEP 54
int0 = 1                                                                # STEP 55
result = avl2.inorder()                                                 # STEP 56
avl0 == avl2                                                            # STEP 57
result = avl0.find(int3)                                                # STEP 58
result = avl0.find(int0)                                                # STEP 59
int3 = 11                                                               # STEP 60
avl0.delete(int0)                                                       # STEP 61
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1042be8c0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
220 BRANCHES COVERED
164 STATEMENTS COVERED

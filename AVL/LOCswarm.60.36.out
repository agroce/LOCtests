Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=True, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.40530.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  13 [2:0]
-- < 4 [1:-1]
---- > 5 [0:0] L
-- > 18 [1:0]
---- < 16 [0:0] L
---- > 20 [0:0] L
set([4, 5, 13, 16, 18, 20])
  13 [2:0]
-- < 4 [1:-1]
---- > 5 [0:0] L
-- > 18 [1:0]
---- < 16 [0:0] L
---- > 20 [0:0] L
set([4, 5, 13, 16, 18, 20])
  15 [2:0]
-- < 5 [1:0]
---- < 2 [0:0] L
---- > 12 [0:0] L
-- > 16 [1:-1]
---- > 18 [0:0] L
set([2, 5, 12, 15, 16, 18])
  15 [2:0]
-- < 5 [1:0]
---- < 2 [0:0] L
---- > 12 [0:0] L
-- > 16 [1:-1]
---- > 18 [0:0] L
set([2, 5, 12, 15, 16, 18])
  15 [3:1]
-- < 5 [2:1]
---- < 2 [1:-1]
------ > 4 [0:0] L
---- > 12 [0:0] L
-- > 16 [1:-1]
---- > 18 [0:0] L
set([2, 4, 5, 12, 15, 16, 18])
  15 [3:1]
-- < 5 [2:1]
---- < 2 [1:-1]
------ > 4 [0:0] L
---- > 12 [0:0] L
-- > 16 [1:-1]
---- > 18 [0:0] L
set([2, 4, 5, 12, 15, 16, 18])
  15 [3:1]
-- < 5 [2:0]
---- < 2 [1:-1]
------ > 4 [0:0] L
---- > 12 [1:1]
------ < 9 [0:0] L
-- > 16 [1:-1]
---- > 18 [0:0] L
set([2, 4, 5, 9, 12, 15, 16, 18])
  16 [2:0]
-- < 6 [1:0]
---- < 4 [0:0] L
---- > 15 [0:0] L
-- > 18 [1:-1]
---- > 19 [0:0] L
set([4, 6, 15, 16, 18, 19])
  4 [3:-1]
-- < 2 [1:1]
---- < 1 [0:0] L
-- > 9 [2:-1]
---- < 6 [0:0] L
---- > 18 [1:-1]
------ > 19 [0:0] L
set([1, 2, 4, 6, 9, 18, 19])
  4 [3:-1]
-- < 2 [1:1]
---- < 1 [0:0] L
-- > 9 [2:-1]
---- < 6 [0:0] L
---- > 18 [1:-1]
------ > 19 [0:0] L
set([1, 2, 4, 6, 9, 18, 19])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1026de950>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
Original test has 52 steps

SAVING TEST AS failure.40530.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 18                                                                # STEP 0
ACTION: int3 = 18 
int3 = None : <type 'NoneType'>
=> int3 = 18 : <type 'int'>
==================================================
int0 = 12                                                                # STEP 1
ACTION: int0 = 12 
int0 = None : <type 'NoneType'>
=> int0 = 12 : <type 'int'>
==================================================
int2 = 5                                                                 # STEP 2
ACTION: int2 = 5 
int2 = None : <type 'NoneType'>
=> int2 = 5 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 3
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x10369e5f0> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int0)                                                        # STEP 4
ACTION: avl2.insert(int0) 
int0 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10369e5f0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([12]) : <type 'set'>
==================================================
avl2.delete(int3)                                                        # STEP 5
ACTION: avl2.delete(int3) 
int3 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10369e5f0> : <type 'instance'>
avl_REF2 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int3 = 17                                                                # STEP 6
ACTION: int3 = 17 
int3 = 18 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
avl2.delete(int2)                                                        # STEP 7
ACTION: avl2.delete(int2) 
int2 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10369e5f0> : <type 'instance'>
avl_REF2 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.insert(int0)                                                        # STEP 8
ACTION: avl2.insert(int0) 
int0 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10369e5f0> : <type 'instance'>
avl_REF2 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl2.insert(int2)                                                        # STEP 9
ACTION: avl2.insert(int2) 
int2 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10369e5f0> : <type 'instance'>
avl_REF2 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([12, 5]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 10
ACTION: avl2.delete(int2) 
int2 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10369e5f0> : <type 'instance'>
avl_REF2 = set([12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([12]) : <type 'set'>
==================================================
int0 = 15                                                               # STEP 11
ACTION: int0 = 15 
int0 = 12 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
result = avl2.find(int2)                                                # STEP 12
ACTION: result = avl2.find(int2) 
int2 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10369e5f0> : <type 'instance'>
avl_REF2 = set([12]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl2.insert(int3)                                                       # STEP 13
ACTION: avl2.insert(int3) 
int3 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10369e5f0> : <type 'instance'>
avl_REF2 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([17, 12]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 14
ACTION: avl2.insert(int3) 
int3 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10369e5f0> : <type 'instance'>
avl_REF2 = set([17, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
avl2.delete(int3)                                                       # STEP 15
ACTION: avl2.delete(int3) 
int3 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10369e5f0> : <type 'instance'>
avl_REF2 = set([17, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([12]) : <type 'set'>
==================================================
int2 = 16                                                               # STEP 16
ACTION: int2 = 16 
int2 = 5 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 17
ACTION: avl2.insert(int0) 
int0 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10369e5f0> : <type 'instance'>
avl_REF2 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([12, 15]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 18
ACTION: avl2.insert(int0) 
int0 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10369e5f0> : <type 'instance'>
avl_REF2 = set([12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl2.delete(int2)                                                       # STEP 19
ACTION: avl2.delete(int2) 
int2 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10369e5f0> : <type 'instance'>
avl_REF2 = set([12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int3 = 14                                                               # STEP 20
ACTION: int3 = 14 
int3 = 17 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
int0 = 16                                                               # STEP 21
ACTION: int0 = 16 
int0 = 15 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 22
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x10373b5a8> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 23
ACTION: avl2.delete(int0) 
int0 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10369e5f0> : <type 'instance'>
avl_REF2 = set([12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.insert(int2)                                                       # STEP 24
ACTION: avl2.insert(int2) 
int2 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10369e5f0> : <type 'instance'>
avl_REF2 = set([12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([16, 12, 15]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 25
ACTION: avl1.insert(int0) 
int0 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10373b5a8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([16]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 26
ACTION: avl1.delete(int2) 
int2 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10373b5a8> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int1 = 4                                                                # STEP 27
ACTION: int1 = 4 
int1 = None : <type 'NoneType'>
=> int1 = 4 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 28
ACTION: avl2.insert(int0) 
int0 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10369e5f0> : <type 'instance'>
avl_REF2 = set([16, 12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl1.insert(int2)                                                       # STEP 29
ACTION: avl1.insert(int2) 
int2 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10373b5a8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([16]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 30
ACTION: avl2.insert(int0) 
int0 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10369e5f0> : <type 'instance'>
avl_REF2 = set([16, 12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl1.delete(int1)                                                       # STEP 31
ACTION: avl1.delete(int1) 
int1 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10373b5a8> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int2 = 2                                                                # STEP 32
ACTION: int2 = 2 
int2 = 16 : <type 'int'>
=> int2 = 2 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 33
ACTION: avl2.delete(int1) 
int1 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10369e5f0> : <type 'instance'>
avl_REF2 = set([16, 12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int0 = 15                                                               # STEP 34
ACTION: int0 = 15 
int0 = 16 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 35
ACTION: avl1.insert(int3) 
int3 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10373b5a8> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([16, 14]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 36
ACTION: avl1.insert(int1) 
int1 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10373b5a8> : <type 'instance'>
avl_REF1 = set([16, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([16, 4, 14]) : <type 'set'>
==================================================
int1 = 11                                                               # STEP 37
ACTION: int1 = 11 
int1 = 4 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 38
ACTION: avl1.insert(int2) 
int2 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10373b5a8> : <type 'instance'>
avl_REF1 = set([16, 4, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([16, 2, 4, 14]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 39
ACTION: avl2.insert(int1) 
int1 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10369e5f0> : <type 'instance'>
avl_REF2 = set([16, 12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([11, 12, 15, 16]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 40
ACTION: avl2.insert(int2) 
int2 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10369e5f0> : <type 'instance'>
avl_REF2 = set([11, 12, 15, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([2, 11, 12, 15, 16]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 41
ACTION: avl2.insert(int1) 
int1 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10369e5f0> : <type 'instance'>
avl_REF2 = set([2, 11, 12, 15, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
int3 = 8                                                                # STEP 42
ACTION: int3 = 8 
int3 = 14 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 43
ACTION: avl1.delete(int2) 
int2 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10373b5a8> : <type 'instance'>
avl_REF1 = set([16, 2, 4, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([16, 4, 14]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 44
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x10373b5a8> : <type 'instance'>
avl_REF1 = set([16, 4, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int2 = 1                                                                # STEP 45
ACTION: int2 = 1 
int2 = 2 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 46
ACTION: avl2.insert(int1) 
int1 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10369e5f0> : <type 'instance'>
avl_REF2 = set([2, 11, 12, 15, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
result = avl2.inorder()                                                 # STEP 47
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x10369e5f0> : <type 'instance'>
avl_REF2 = set([2, 11, 12, 15, 16]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int1)                                                       # STEP 48
ACTION: avl2.insert(int1) 
int1 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10369e5f0> : <type 'instance'>
avl_REF2 = set([2, 11, 12, 15, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl2.delete(int2)                                                       # STEP 49
ACTION: avl2.delete(int2) 
int2 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10369e5f0> : <type 'instance'>
avl_REF2 = set([2, 11, 12, 15, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl1.delete(int2)                                                       # STEP 50
ACTION: avl1.delete(int2) 
int2 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10373b5a8> : <type 'instance'>
avl_REF1 = set([16, 4, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl2.delete(int0)                                                       # STEP 51
ACTION: avl2.delete(int0) 
int0 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10369e5f0> : <type 'instance'>
avl_REF2 = set([2, 11, 12, 15, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([2, 11, 12, 16]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102632d88>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #4 STEP #22 (0:00:30.036827) Mon May  1 02:25:07 2017 [ 149 stmts 197 branches ]
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 37
STOPPING TESTING DUE TO TIMEOUT
8.15199740175 PERCENT COVERED
60.2403280735 TOTAL RUNTIME
7 EXECUTED
589 TOTAL TEST OPERATIONS
27.4353539944 TIME SPENT EXECUTING TEST OPERATIONS
0.07648396492 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
27.563762188 TIME SPENT CHECKING PROPERTIES
54.9991161823 TOTAL TIME SPENT RUNNING SUT
0.00381112098694 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int3 = 18                                                                # STEP 0
int0 = 12                                                                # STEP 1
int2 = 5                                                                 # STEP 2
avl2 = avl.AVLTree()                                                     # STEP 3
avl2.insert(int0)                                                        # STEP 4
avl2.delete(int3)                                                        # STEP 5
int3 = 17                                                                # STEP 6
avl2.delete(int2)                                                        # STEP 7
avl2.insert(int0)                                                        # STEP 8
avl2.insert(int2)                                                        # STEP 9
avl2.delete(int2)                                                       # STEP 10
int0 = 15                                                               # STEP 11
result = avl2.find(int2)                                                # STEP 12
avl2.insert(int3)                                                       # STEP 13
avl2.insert(int3)                                                       # STEP 14
avl2.delete(int3)                                                       # STEP 15
int2 = 16                                                               # STEP 16
avl2.insert(int0)                                                       # STEP 17
avl2.insert(int0)                                                       # STEP 18
avl2.delete(int2)                                                       # STEP 19
int3 = 14                                                               # STEP 20
int0 = 16                                                               # STEP 21
avl1 = avl.AVLTree()                                                    # STEP 22
avl2.delete(int0)                                                       # STEP 23
avl2.insert(int2)                                                       # STEP 24
avl1.insert(int0)                                                       # STEP 25
avl1.delete(int2)                                                       # STEP 26
int1 = 4                                                                # STEP 27
avl2.insert(int0)                                                       # STEP 28
avl1.insert(int2)                                                       # STEP 29
avl2.insert(int0)                                                       # STEP 30
avl1.delete(int1)                                                       # STEP 31
int2 = 2                                                                # STEP 32
avl2.delete(int1)                                                       # STEP 33
int0 = 15                                                               # STEP 34
avl1.insert(int3)                                                       # STEP 35
avl1.insert(int1)                                                       # STEP 36
int1 = 11                                                               # STEP 37
avl1.insert(int2)                                                       # STEP 38
avl2.insert(int1)                                                       # STEP 39
avl2.insert(int2)                                                       # STEP 40
avl2.insert(int1)                                                       # STEP 41
int3 = 8                                                                # STEP 42
avl1.delete(int2)                                                       # STEP 43
result = avl1.inorder()                                                 # STEP 44
int2 = 1                                                                # STEP 45
avl2.insert(int1)                                                       # STEP 46
result = avl2.inorder()                                                 # STEP 47
avl2.insert(int1)                                                       # STEP 48
avl2.delete(int2)                                                       # STEP 49
avl1.delete(int2)                                                       # STEP 50
avl2.delete(int0)                                                       # STEP 51
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102632d88>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
197 BRANCHES COVERED
149 STATEMENTS COVERED

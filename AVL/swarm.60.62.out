Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=True, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.438.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  11 [2:0]
-- < 7 [1:1]
---- < 4 [0:0] L
-- > 17 [1:0]
---- < 15 [0:0] L
---- > 19 [0:0] L
set([4, 7, 11, 15, 17, 19])
  11 [3:0]
-- < 6 [2:0]
---- < 4 [1:1]
------ < 2 [0:0] L
---- > 7 [1:-1]
------ > 8 [0:0] L
-- > 17 [2:1]
---- < 15 [1:1]
------ < 13 [0:0] L
---- > 19 [0:0] L
set([2, 4, 6, 7, 8, 11, 13, 15, 17, 19])
TEST #4 STEP #70 (0:00:30.058974) Fri Apr 28 06:22:32 2017 [ 134 stmts 179 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10584a680>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 75 steps

SAVING TEST AS failure.438.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 11                                                                # STEP 0
ACTION: int1 = 11 
int1 = None : <type 'NoneType'>
=> int1 = 11 : <type 'int'>
==================================================
int3 = 16                                                                # STEP 1
ACTION: int3 = 16 
int3 = None : <type 'NoneType'>
=> int3 = 16 : <type 'int'>
==================================================
int2 = 20                                                                # STEP 2
ACTION: int2 = 20 
int2 = None : <type 'NoneType'>
=> int2 = 20 : <type 'int'>
==================================================
int0 = 4                                                                 # STEP 3
ACTION: int0 = 4 
int0 = None : <type 'NoneType'>
=> int0 = 4 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 4
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x1058b65f0> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
result = avl0.inorder()                                                  # STEP 5
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x1058b65f0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.delete(int1)                                                        # STEP 6
ACTION: avl0.delete(int1) 
int1 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058b65f0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int1 = 1                                                                 # STEP 7
ACTION: int1 = 1 
int1 = 11 : <type 'int'>
=> int1 = 1 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 8
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x1058b7710> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
result = avl1.find(int2)                                                 # STEP 9
ACTION: result = avl1.find(int2) 
int2 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058b7710> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int2 = 10                                                               # STEP 10
ACTION: int2 = 10 
int2 = 20 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 11
ACTION: avl0.insert(int1) 
int1 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058b65f0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([1]) : <type 'set'>
==================================================
result = avl0.find(int1)                                                # STEP 12
ACTION: result = avl0.find(int1) 
int1 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058b65f0> : <type 'instance'>
avl_REF0 = set([1]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl1.insert(int0)                                                       # STEP 13
ACTION: avl1.insert(int0) 
int0 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058b7710> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([4]) : <type 'set'>
==================================================
int1 = 17                                                               # STEP 14
ACTION: int1 = 17 
int1 = 1 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 15
ACTION: avl1.delete(int1) 
int1 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058b7710> : <type 'instance'>
avl_REF1 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.delete(int1)                                                       # STEP 16
ACTION: avl1.delete(int1) 
int1 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058b7710> : <type 'instance'>
avl_REF1 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int1 = 3                                                                # STEP 17
ACTION: int1 = 3 
int1 = 17 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 18
ACTION: avl0.delete(int3) 
int3 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058b65f0> : <type 'instance'>
avl_REF0 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl1.delete(int0)                                                       # STEP 19
ACTION: avl1.delete(int0) 
int0 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058b7710> : <type 'instance'>
avl_REF1 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int0 = 4                                                                # STEP 20
ACTION: int0 = 4 
int0 = 4 : <type 'int'>
==================================================
int3 = 12                                                               # STEP 21
ACTION: int3 = 12 
int3 = 16 : <type 'int'>
=> int3 = 12 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 22
ACTION: avl0.delete(int3) 
int3 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058b65f0> : <type 'instance'>
avl_REF0 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
result = avl1.find(int0)                                                # STEP 23
ACTION: result = avl1.find(int0) 
int0 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058b7710> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl0.insert(int1)                                                       # STEP 24
ACTION: avl0.insert(int1) 
int1 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058b65f0> : <type 'instance'>
avl_REF0 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([1, 3]) : <type 'set'>
==================================================
int0 = 17                                                               # STEP 25
ACTION: int0 = 17 
int0 = 4 : <type 'int'>
=> int0 = 17 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 26
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x1058b65f0> : <type 'instance'>
avl_REF0 = set([1, 3]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int1 = 12                                                               # STEP 27
ACTION: int1 = 12 
int1 = 3 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
result = avl0.find(int3)                                                # STEP 28
ACTION: result = avl0.find(int3) 
int3 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058b65f0> : <type 'instance'>
avl_REF0 = set([1, 3]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
result = avl1.find(int2)                                                # STEP 29
ACTION: result = avl1.find(int2) 
int2 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058b7710> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
result = avl1.find(int0)                                                # STEP 30
ACTION: result = avl1.find(int0) 
int0 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058b7710> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
int2 = 11                                                               # STEP 31
ACTION: int2 = 11 
int2 = 10 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
int0 = 7                                                                # STEP 32
ACTION: int0 = 7 
int0 = 17 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 33
ACTION: avl0.delete(int3) 
int3 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058b65f0> : <type 'instance'>
avl_REF0 = set([1, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int3 = 13                                                               # STEP 34
ACTION: int3 = 13 
int3 = 12 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 35
ACTION: avl0.insert(int2) 
int2 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058b65f0> : <type 'instance'>
avl_REF0 = set([1, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([11, 1, 3]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 36
ACTION: avl1.insert(int2) 
int2 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058b7710> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([11]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 37
ACTION: avl0.delete(int1) 
int1 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058b65f0> : <type 'instance'>
avl_REF0 = set([11, 1, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl1.delete(int3)                                                       # STEP 38
ACTION: avl1.delete(int3) 
int3 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058b7710> : <type 'instance'>
avl_REF1 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int3 = 8                                                                # STEP 39
ACTION: int3 = 8 
int3 = 13 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 40
ACTION: avl1.insert(int3) 
int3 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058b7710> : <type 'instance'>
avl_REF1 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([8, 11]) : <type 'set'>
==================================================
result = avl0.find(int0)                                                # STEP 41
ACTION: result = avl0.find(int0) 
int0 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058b65f0> : <type 'instance'>
avl_REF0 = set([11, 1, 3]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
int1 = 12                                                               # STEP 42
ACTION: int1 = 12 
int1 = 12 : <type 'int'>
==================================================
int2 = 6                                                                # STEP 43
ACTION: int2 = 6 
int2 = 11 : <type 'int'>
=> int2 = 6 : <type 'int'>
==================================================
int3 = 18                                                               # STEP 44
ACTION: int3 = 18 
int3 = 8 : <type 'int'>
=> int3 = 18 : <type 'int'>
==================================================
int0 = 10                                                               # STEP 45
ACTION: int0 = 10 
int0 = 7 : <type 'int'>
=> int0 = 10 : <type 'int'>
==================================================
result = avl1.find(int0)                                                # STEP 46
ACTION: result = avl1.find(int0) 
int0 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058b7710> : <type 'instance'>
avl_REF1 = set([8, 11]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
int0 = 4                                                                # STEP 47
ACTION: int0 = 4 
int0 = 10 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
result = avl0.find(int2)                                                # STEP 48
ACTION: result = avl0.find(int2) 
int2 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058b65f0> : <type 'instance'>
avl_REF0 = set([11, 1, 3]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl0.delete(int0)                                                       # STEP 49
ACTION: avl0.delete(int0) 
int0 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058b65f0> : <type 'instance'>
avl_REF0 = set([11, 1, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int2 = 1                                                                # STEP 50
ACTION: int2 = 1 
int2 = 6 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 51
ACTION: avl1.insert(int3) 
int3 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058b7710> : <type 'instance'>
avl_REF1 = set([8, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([8, 18, 11]) : <type 'set'>
==================================================
int3 = 20                                                               # STEP 52
ACTION: int3 = 20 
int3 = 18 : <type 'int'>
=> int3 = 20 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 53
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1058b7710> : <type 'instance'>
avl_REF1 = set([8, 18, 11]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
result = avl1.find(int3)                                                # STEP 54
ACTION: result = avl1.find(int3) 
int3 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058b7710> : <type 'instance'>
avl_REF1 = set([8, 18, 11]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl0.insert(int2)                                                       # STEP 55
ACTION: avl0.insert(int2) 
int2 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058b65f0> : <type 'instance'>
avl_REF0 = set([11, 1, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
int3 = 1                                                                # STEP 56
ACTION: int3 = 1 
int3 = 20 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
int0 = 1                                                                # STEP 57
ACTION: int0 = 1 
int0 = 4 : <type 'int'>
=> int0 = 1 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 58
ACTION: avl1.insert(int3) 
int3 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058b7710> : <type 'instance'>
avl_REF1 = set([8, 18, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([8, 1, 18, 11]) : <type 'set'>
==================================================
result = avl1.find(int3)                                                # STEP 59
ACTION: result = avl1.find(int3) 
int3 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058b7710> : <type 'instance'>
avl_REF1 = set([8, 1, 18, 11]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
int2 = 3                                                                # STEP 60
ACTION: int2 = 3 
int2 = 1 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
int3 = 13                                                               # STEP 61
ACTION: int3 = 13 
int3 = 1 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 62
ACTION: avl1.insert(int0) 
int0 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058b7710> : <type 'instance'>
avl_REF1 = set([8, 1, 18, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
int0 = 17                                                               # STEP 63
ACTION: int0 = 17 
int0 = 1 : <type 'int'>
=> int0 = 17 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 64
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1058b7710> : <type 'instance'>
avl_REF1 = set([8, 1, 18, 11]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl0.insert(int0)                                                       # STEP 65
ACTION: avl0.insert(int0) 
int0 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058b65f0> : <type 'instance'>
avl_REF0 = set([11, 1, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([11, 1, 3, 17]) : <type 'set'>
==================================================
int0 = 17                                                               # STEP 66
ACTION: int0 = 17 
int0 = 17 : <type 'int'>
==================================================
result = avl0.find(int0)                                                # STEP 67
ACTION: result = avl0.find(int0) 
int0 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058b65f0> : <type 'instance'>
avl_REF0 = set([11, 1, 3, 17]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
int0 = 18                                                               # STEP 68
ACTION: int0 = 18 
int0 = 17 : <type 'int'>
=> int0 = 18 : <type 'int'>
==================================================
result = avl1.find(int1)                                                # STEP 69
ACTION: result = avl1.find(int1) 
int1 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058b7710> : <type 'instance'>
avl_REF1 = set([8, 1, 18, 11]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int1 = 5                                                                # STEP 70
ACTION: int1 = 5 
int1 = 12 : <type 'int'>
=> int1 = 5 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 71
ACTION: avl0.insert(int0) 
int0 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1058b65f0> : <type 'instance'>
avl_REF0 = set([11, 1, 3, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([11, 1, 18, 3, 17]) : <type 'set'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 72
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x10415b320> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 73
ACTION: avl2.insert(int1) 
int1 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10415b320> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([5]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 74
ACTION: avl1.delete(int0) 
int0 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058b7710> : <type 'instance'>
avl_REF1 = set([8, 1, 18, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([8, 1, 11]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10415ba28>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 0
STOPPING TESTING DUE TO TIMEOUT
7.87241262301 PERCENT COVERED
61.936398983 TOTAL RUNTIME
8 EXECUTED
675 TOTAL TEST OPERATIONS
27.6476507187 TIME SPENT EXECUTING TEST OPERATIONS
0.0240910053253 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
27.8311612606 TIME SPENT CHECKING PROPERTIES
55.4788119793 TOTAL TIME SPENT RUNNING SUT
0.00567817687988 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int1 = 11                                                                # STEP 0
int3 = 16                                                                # STEP 1
int2 = 20                                                                # STEP 2
int0 = 4                                                                 # STEP 3
avl0 = avl.AVLTree()                                                     # STEP 4
result = avl0.inorder()                                                  # STEP 5
avl0.delete(int1)                                                        # STEP 6
int1 = 1                                                                 # STEP 7
avl1 = avl.AVLTree()                                                     # STEP 8
result = avl1.find(int2)                                                 # STEP 9
int2 = 10                                                               # STEP 10
avl0.insert(int1)                                                       # STEP 11
result = avl0.find(int1)                                                # STEP 12
avl1.insert(int0)                                                       # STEP 13
int1 = 17                                                               # STEP 14
avl1.delete(int1)                                                       # STEP 15
avl1.delete(int1)                                                       # STEP 16
int1 = 3                                                                # STEP 17
avl0.delete(int3)                                                       # STEP 18
avl1.delete(int0)                                                       # STEP 19
int0 = 4                                                                # STEP 20
int3 = 12                                                               # STEP 21
avl0.delete(int3)                                                       # STEP 22
result = avl1.find(int0)                                                # STEP 23
avl0.insert(int1)                                                       # STEP 24
int0 = 17                                                               # STEP 25
result = avl0.inorder()                                                 # STEP 26
int1 = 12                                                               # STEP 27
result = avl0.find(int3)                                                # STEP 28
result = avl1.find(int2)                                                # STEP 29
result = avl1.find(int0)                                                # STEP 30
int2 = 11                                                               # STEP 31
int0 = 7                                                                # STEP 32
avl0.delete(int3)                                                       # STEP 33
int3 = 13                                                               # STEP 34
avl0.insert(int2)                                                       # STEP 35
avl1.insert(int2)                                                       # STEP 36
avl0.delete(int1)                                                       # STEP 37
avl1.delete(int3)                                                       # STEP 38
int3 = 8                                                                # STEP 39
avl1.insert(int3)                                                       # STEP 40
result = avl0.find(int0)                                                # STEP 41
int1 = 12                                                               # STEP 42
int2 = 6                                                                # STEP 43
int3 = 18                                                               # STEP 44
int0 = 10                                                               # STEP 45
result = avl1.find(int0)                                                # STEP 46
int0 = 4                                                                # STEP 47
result = avl0.find(int2)                                                # STEP 48
avl0.delete(int0)                                                       # STEP 49
int2 = 1                                                                # STEP 50
avl1.insert(int3)                                                       # STEP 51
int3 = 20                                                               # STEP 52
result = avl1.inorder()                                                 # STEP 53
result = avl1.find(int3)                                                # STEP 54
avl0.insert(int2)                                                       # STEP 55
int3 = 1                                                                # STEP 56
int0 = 1                                                                # STEP 57
avl1.insert(int3)                                                       # STEP 58
result = avl1.find(int3)                                                # STEP 59
int2 = 3                                                                # STEP 60
int3 = 13                                                               # STEP 61
avl1.insert(int0)                                                       # STEP 62
int0 = 17                                                               # STEP 63
result = avl1.inorder()                                                 # STEP 64
avl0.insert(int0)                                                       # STEP 65
int0 = 17                                                               # STEP 66
result = avl0.find(int0)                                                # STEP 67
int0 = 18                                                               # STEP 68
result = avl1.find(int1)                                                # STEP 69
int1 = 5                                                                # STEP 70
avl0.insert(int0)                                                       # STEP 71
avl2 = avl.AVLTree()                                                    # STEP 72
avl2.insert(int1)                                                       # STEP 73
avl1.delete(int0)                                                       # STEP 74
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10415ba28>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
200 BRANCHES COVERED
148 STATEMENTS COVERED

Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.99440.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103d24dd0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
Original test has 97 steps

SAVING TEST AS failure.99440.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 6                                                                 # STEP 0
ACTION: int1 = 6 
int1 = None : <type 'NoneType'>
=> int1 = 6 : <type 'int'>
==================================================
int2 = 6                                                                 # STEP 1
ACTION: int2 = 6 
int2 = None : <type 'NoneType'>
=> int2 = 6 : <type 'int'>
==================================================
int3 = 4                                                                 # STEP 2
ACTION: int3 = 4 
int3 = None : <type 'NoneType'>
=> int3 = 4 : <type 'int'>
==================================================
int0 = 5                                                                 # STEP 3
ACTION: int0 = 5 
int0 = None : <type 'NoneType'>
=> int0 = 5 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x103a7ddd0> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl2.inorder()                                                  # STEP 5
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x103a7ddd0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl2.find(int2)                                                 # STEP 6
ACTION: result = avl2.find(int2) 
int2 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a7ddd0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int2 = 8                                                                 # STEP 7
ACTION: int2 = 8 
int2 = 6 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
result = avl2.find(int2)                                                 # STEP 8
ACTION: result = avl2.find(int2) 
int2 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a7ddd0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl2 = avl.AVLTree()                                                     # STEP 9
ACTION: avl2 = avl.AVLTree() 
avl2 = <avl.AVLTree instance at 0x103a7ddd0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
=> avl2 = <avl.AVLTree instance at 0x103a7d248> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
==================================================
int2 = 11                                                               # STEP 10
ACTION: int2 = 11 
int2 = 8 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 11
ACTION: avl2.insert(int0) 
int0 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a7d248> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([5]) : <type 'set'>
==================================================
int0 = 1                                                                # STEP 12
ACTION: int0 = 1 
int0 = 5 : <type 'int'>
=> int0 = 1 : <type 'int'>
==================================================
result = avl2.find(int0)                                                # STEP 13
ACTION: result = avl2.find(int0) 
int0 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a7d248> : <type 'instance'>
avl_REF2 = set([5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
int0 = 18                                                               # STEP 14
ACTION: int0 = 18 
int0 = 1 : <type 'int'>
=> int0 = 18 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 15
ACTION: avl2.insert(int2) 
int2 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a7d248> : <type 'instance'>
avl_REF2 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([11, 5]) : <type 'set'>
==================================================
result = avl2.find(int3)                                                # STEP 16
ACTION: result = avl2.find(int3) 
int3 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a7d248> : <type 'instance'>
avl_REF2 = set([11, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl2 == avl2                                                            # STEP 17
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x103a7d248> : <type 'instance'>
avl_REF2 = set([11, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
int3 = 19                                                               # STEP 18
ACTION: int3 = 19 
int3 = 4 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
int2 = 8                                                                # STEP 19
ACTION: int2 = 8 
int2 = 11 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 20
ACTION: avl2.insert(int1) 
int1 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a7d248> : <type 'instance'>
avl_REF2 = set([11, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([11, 5, 6]) : <type 'set'>
==================================================
result = avl2.find(int2)                                                # STEP 21
ACTION: result = avl2.find(int2) 
int2 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a7d248> : <type 'instance'>
avl_REF2 = set([11, 5, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int2 = 13                                                               # STEP 22
ACTION: int2 = 13 
int2 = 8 : <type 'int'>
=> int2 = 13 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 23
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x103a7d248> : <type 'instance'>
avl_REF2 = set([11, 5, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int1 = 1                                                                # STEP 24
ACTION: int1 = 1 
int1 = 6 : <type 'int'>
=> int1 = 1 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 25
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x103a7d248> : <type 'instance'>
avl_REF2 = set([11, 5, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int3)                                                       # STEP 26
ACTION: avl2.delete(int3) 
int3 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a7d248> : <type 'instance'>
avl_REF2 = set([11, 5, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl0 = avl.AVLTree()                                                    # STEP 27
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x103932d88> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
result = avl0.find(int0)                                                # STEP 28
ACTION: result = avl0.find(int0) 
int0 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103932d88> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
int3 = 20                                                               # STEP 29
ACTION: int3 = 20 
int3 = 19 : <type 'int'>
=> int3 = 20 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 30
ACTION: avl0.delete(int2) 
int2 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103932d88> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl2.delete(int0)                                                       # STEP 31
ACTION: avl2.delete(int0) 
int0 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a7d248> : <type 'instance'>
avl_REF2 = set([11, 5, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl0 == avl2                                                            # STEP 32
ACTION: avl0 == avl2 
avl0 = <avl.AVLTree instance at 0x103932d88> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x103a7d248> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
avl_REF2 = set([11, 5, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
int2 = 7                                                                # STEP 33
ACTION: int2 = 7 
int2 = 13 : <type 'int'>
=> int2 = 7 : <type 'int'>
==================================================
int0 = 18                                                               # STEP 34
ACTION: int0 = 18 
int0 = 18 : <type 'int'>
==================================================
result = avl0.find(int2)                                                # STEP 35
ACTION: result = avl0.find(int2) 
int2 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103932d88> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
result = avl0.find(int1)                                                # STEP 36
ACTION: result = avl0.find(int1) 
int1 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103932d88> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
int1 = 3                                                                # STEP 37
ACTION: int1 = 3 
int1 = 1 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 38
ACTION: avl2.insert(int2) 
int2 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a7d248> : <type 'instance'>
avl_REF2 = set([11, 5, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([11, 5, 6, 7]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 39
ACTION: avl2.delete(int0) 
int0 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a7d248> : <type 'instance'>
avl_REF2 = set([11, 5, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
result = avl2.find(int1)                                                # STEP 40
ACTION: result = avl2.find(int1) 
int1 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a7d248> : <type 'instance'>
avl_REF2 = set([11, 5, 6, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl0.insert(int3)                                                       # STEP 41
ACTION: avl0.insert(int3) 
int3 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103932d88> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([20]) : <type 'set'>
==================================================
int1 = 12                                                               # STEP 42
ACTION: int1 = 12 
int1 = 3 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
int0 = 18                                                               # STEP 43
ACTION: int0 = 18 
int0 = 18 : <type 'int'>
==================================================
result = avl0.find(int2)                                                # STEP 44
ACTION: result = avl0.find(int2) 
int2 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103932d88> : <type 'instance'>
avl_REF0 = set([20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl0 == avl2                                                            # STEP 45
ACTION: avl0 == avl2 
avl0 = <avl.AVLTree instance at 0x103932d88> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x103a7d248> : <type 'instance'>
avl_REF0 = set([20]) : <type 'set'>
avl_REF2 = set([11, 5, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
int3 = 8                                                                # STEP 46
ACTION: int3 = 8 
int3 = 20 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 47
ACTION: avl0.insert(int1) 
int1 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103932d88> : <type 'instance'>
avl_REF0 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([12, 20]) : <type 'set'>
==================================================
result = avl0.find(int1)                                                # STEP 48
ACTION: result = avl0.find(int1) 
int1 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103932d88> : <type 'instance'>
avl_REF0 = set([12, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
int2 = 1                                                                # STEP 49
ACTION: int2 = 1 
int2 = 7 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
result = avl0.find(int0)                                                # STEP 50
ACTION: result = avl0.find(int0) 
int0 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103932d88> : <type 'instance'>
avl_REF0 = set([12, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
int0 = 6                                                                # STEP 51
ACTION: int0 = 6 
int0 = 18 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
int1 = 3                                                                # STEP 52
ACTION: int1 = 3 
int1 = 12 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 53
ACTION: avl0.delete(int1) 
int1 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103932d88> : <type 'instance'>
avl_REF0 = set([12, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int1 = 13                                                               # STEP 54
ACTION: int1 = 13 
int1 = 3 : <type 'int'>
=> int1 = 13 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 55
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x103a6dc68> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 56
ACTION: avl2.insert(int2) 
int2 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a7d248> : <type 'instance'>
avl_REF2 = set([11, 5, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([1, 11, 5, 6, 7]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 57
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x103a6dc68> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl0 == avl1                                                            # STEP 58
ACTION: avl0 == avl1 
avl0 = <avl.AVLTree instance at 0x103932d88> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x103a6dc68> : <type 'instance'>
avl_REF0 = set([12, 20]) : <type 'set'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF1 
==================================================
int2 = 10                                                               # STEP 59
ACTION: int2 = 10 
int2 = 1 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
avl2 == avl1                                                            # STEP 60
ACTION: avl2 == avl1 
avl2 = <avl.AVLTree instance at 0x103a7d248> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x103a6dc68> : <type 'instance'>
avl_REF2 = set([1, 11, 5, 6, 7]) : <type 'set'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
avl0.insert(int2)                                                       # STEP 61
ACTION: avl0.insert(int2) 
int2 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103932d88> : <type 'instance'>
avl_REF0 = set([12, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([12, 10, 20]) : <type 'set'>
==================================================
int2 = 9                                                                # STEP 62
ACTION: int2 = 9 
int2 = 10 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 63
ACTION: avl0.insert(int0) 
int0 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103932d88> : <type 'instance'>
avl_REF0 = set([12, 10, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([12, 10, 20, 6]) : <type 'set'>
==================================================
result = avl0.find(int2)                                                # STEP 64
ACTION: result = avl0.find(int2) 
int2 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103932d88> : <type 'instance'>
avl_REF0 = set([12, 10, 20, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
int0 = 14                                                               # STEP 65
ACTION: int0 = 14 
int0 = 6 : <type 'int'>
=> int0 = 14 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 66
ACTION: avl0.delete(int0) 
int0 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103932d88> : <type 'instance'>
avl_REF0 = set([12, 10, 20, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int0 = 4                                                                # STEP 67
ACTION: int0 = 4 
int0 = 14 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 68
ACTION: avl1.delete(int1) 
int1 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103a6dc68> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
result = avl1.find(int0)                                                # STEP 69
ACTION: result = avl1.find(int0) 
int0 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103a6dc68> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
int1 = 17                                                               # STEP 70
ACTION: int1 = 17 
int1 = 13 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 71
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x103a6dc68> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
int0 = 12                                                               # STEP 72
ACTION: int0 = 12 
int0 = 4 : <type 'int'>
=> int0 = 12 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 73
ACTION: avl0.delete(int1) 
int1 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103932d88> : <type 'instance'>
avl_REF0 = set([12, 10, 20, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int1 = 9                                                                # STEP 74
ACTION: int1 = 9 
int1 = 17 : <type 'int'>
=> int1 = 9 : <type 'int'>
==================================================
avl1 == avl0                                                            # STEP 75
ACTION: avl1 == avl0 
avl1 = <avl.AVLTree instance at 0x103a6dc68> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x103932d88> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
avl_REF0 = set([12, 10, 20, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
int2 = 10                                                               # STEP 76
ACTION: int2 = 10 
int2 = 9 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 77
ACTION: avl1.insert(int3) 
int3 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103a6dc68> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([8]) : <type 'set'>
==================================================
result = avl0.find(int2)                                                # STEP 78
ACTION: result = avl0.find(int2) 
int2 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103932d88> : <type 'instance'>
avl_REF0 = set([12, 10, 20, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
int3 = 7                                                                # STEP 79
ACTION: int3 = 7 
int3 = 8 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
result = avl0.find(int1)                                                # STEP 80
ACTION: result = avl0.find(int1) 
int1 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103932d88> : <type 'instance'>
avl_REF0 = set([12, 10, 20, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
int1 = 20                                                               # STEP 81
ACTION: int1 = 20 
int1 = 9 : <type 'int'>
=> int1 = 20 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 82
ACTION: avl1.delete(int3) 
int3 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103a6dc68> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int2 = 15                                                               # STEP 83
ACTION: int2 = 15 
int2 = 10 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
result = avl1.find(int3)                                                # STEP 84
ACTION: result = avl1.find(int3) 
int3 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103a6dc68> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl0.insert(int0)                                                       # STEP 85
ACTION: avl0.insert(int0) 
int0 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103932d88> : <type 'instance'>
avl_REF0 = set([12, 10, 20, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
avl2.delete(int2)                                                       # STEP 86
ACTION: avl2.delete(int2) 
int2 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a7d248> : <type 'instance'>
avl_REF2 = set([1, 11, 5, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int3 = 8                                                                # STEP 87
ACTION: int3 = 8 
int3 = 7 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
int2 = 13                                                               # STEP 88
ACTION: int2 = 13 
int2 = 15 : <type 'int'>
=> int2 = 13 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 89
ACTION: avl0.insert(int3) 
int3 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103932d88> : <type 'instance'>
avl_REF0 = set([12, 10, 20, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([8, 12, 10, 20, 6]) : <type 'set'>
==================================================
int3 = 10                                                               # STEP 90
ACTION: int3 = 10 
int3 = 8 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 91
ACTION: avl2.delete(int0) 
int0 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a7d248> : <type 'instance'>
avl_REF2 = set([1, 11, 5, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
result = avl2.inorder()                                                 # STEP 92
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x103a7d248> : <type 'instance'>
avl_REF2 = set([1, 11, 5, 6, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int0 = 9                                                                # STEP 93
ACTION: int0 = 9 
int0 = 12 : <type 'int'>
=> int0 = 9 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 94
ACTION: avl2.delete(int3) 
int3 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a7d248> : <type 'instance'>
avl_REF2 = set([1, 11, 5, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl0.delete(int3)                                                       # STEP 95
ACTION: avl0.delete(int3) 
int3 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103932d88> : <type 'instance'>
avl_REF0 = set([8, 12, 10, 20, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([8, 12, 20, 6]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 96
ACTION: avl0.delete(int1) 
int1 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103932d88> : <type 'instance'>
avl_REF0 = set([8, 12, 20, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([8, 12, 6]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103952050>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #4 STEP #43 (0:00:30.055958) Fri Apr 28 03:57:58 2017 [ 133 stmts 178 branches ]
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 76
STOPPING TESTING DUE TO TIMEOUT
8.10994231422 PERCENT COVERED
60.1748719215 TOTAL RUNTIME
8 EXECUTED
773 TOTAL TEST OPERATIONS
26.540248394 TIME SPENT EXECUTING TEST OPERATIONS
0.0254855155945 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
26.7884662151 TIME SPENT CHECKING PROPERTIES
53.3287146091 TOTAL TIME SPENT RUNNING SUT
0.00436043739319 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int1 = 6                                                                 # STEP 0
int2 = 6                                                                 # STEP 1
int3 = 4                                                                 # STEP 2
int0 = 5                                                                 # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
result = avl2.inorder()                                                  # STEP 5
result = avl2.find(int2)                                                 # STEP 6
int2 = 8                                                                 # STEP 7
result = avl2.find(int2)                                                 # STEP 8
avl2 = avl.AVLTree()                                                     # STEP 9
int2 = 11                                                               # STEP 10
avl2.insert(int0)                                                       # STEP 11
int0 = 1                                                                # STEP 12
result = avl2.find(int0)                                                # STEP 13
int0 = 18                                                               # STEP 14
avl2.insert(int2)                                                       # STEP 15
result = avl2.find(int3)                                                # STEP 16
avl2 == avl2                                                            # STEP 17
int3 = 19                                                               # STEP 18
int2 = 8                                                                # STEP 19
avl2.insert(int1)                                                       # STEP 20
result = avl2.find(int2)                                                # STEP 21
int2 = 13                                                               # STEP 22
result = avl2.inorder()                                                 # STEP 23
int1 = 1                                                                # STEP 24
result = avl2.inorder()                                                 # STEP 25
avl2.delete(int3)                                                       # STEP 26
avl0 = avl.AVLTree()                                                    # STEP 27
result = avl0.find(int0)                                                # STEP 28
int3 = 20                                                               # STEP 29
avl0.delete(int2)                                                       # STEP 30
avl2.delete(int0)                                                       # STEP 31
avl0 == avl2                                                            # STEP 32
int2 = 7                                                                # STEP 33
int0 = 18                                                               # STEP 34
result = avl0.find(int2)                                                # STEP 35
result = avl0.find(int1)                                                # STEP 36
int1 = 3                                                                # STEP 37
avl2.insert(int2)                                                       # STEP 38
avl2.delete(int0)                                                       # STEP 39
result = avl2.find(int1)                                                # STEP 40
avl0.insert(int3)                                                       # STEP 41
int1 = 12                                                               # STEP 42
int0 = 18                                                               # STEP 43
result = avl0.find(int2)                                                # STEP 44
avl0 == avl2                                                            # STEP 45
int3 = 8                                                                # STEP 46
avl0.insert(int1)                                                       # STEP 47
result = avl0.find(int1)                                                # STEP 48
int2 = 1                                                                # STEP 49
result = avl0.find(int0)                                                # STEP 50
int0 = 6                                                                # STEP 51
int1 = 3                                                                # STEP 52
avl0.delete(int1)                                                       # STEP 53
int1 = 13                                                               # STEP 54
avl1 = avl.AVLTree()                                                    # STEP 55
avl2.insert(int2)                                                       # STEP 56
result = avl1.inorder()                                                 # STEP 57
avl0 == avl1                                                            # STEP 58
int2 = 10                                                               # STEP 59
avl2 == avl1                                                            # STEP 60
avl0.insert(int2)                                                       # STEP 61
int2 = 9                                                                # STEP 62
avl0.insert(int0)                                                       # STEP 63
result = avl0.find(int2)                                                # STEP 64
int0 = 14                                                               # STEP 65
avl0.delete(int0)                                                       # STEP 66
int0 = 4                                                                # STEP 67
avl1.delete(int1)                                                       # STEP 68
result = avl1.find(int0)                                                # STEP 69
int1 = 17                                                               # STEP 70
avl1 == avl1                                                            # STEP 71
int0 = 12                                                               # STEP 72
avl0.delete(int1)                                                       # STEP 73
int1 = 9                                                                # STEP 74
avl1 == avl0                                                            # STEP 75
int2 = 10                                                               # STEP 76
avl1.insert(int3)                                                       # STEP 77
result = avl0.find(int2)                                                # STEP 78
int3 = 7                                                                # STEP 79
result = avl0.find(int1)                                                # STEP 80
int1 = 20                                                               # STEP 81
avl1.delete(int3)                                                       # STEP 82
int2 = 15                                                               # STEP 83
result = avl1.find(int3)                                                # STEP 84
avl0.insert(int0)                                                       # STEP 85
avl2.delete(int2)                                                       # STEP 86
int3 = 8                                                                # STEP 87
int2 = 13                                                               # STEP 88
avl0.insert(int3)                                                       # STEP 89
int3 = 10                                                               # STEP 90
avl2.delete(int0)                                                       # STEP 91
result = avl2.inorder()                                                 # STEP 92
int0 = 9                                                                # STEP 93
avl2.delete(int3)                                                       # STEP 94
avl0.delete(int3)                                                       # STEP 95
avl0.delete(int1)                                                       # STEP 96
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103952050>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
204 BRANCHES COVERED
152 STATEMENTS COVERED

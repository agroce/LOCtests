Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.14912.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
TEST #3 STEP #68 (0:00:30.079097) Sun Apr 30 05:19:01 2017 [ 146 stmts 194 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1052fefc8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
Original test has 97 steps

SAVING TEST AS failure.14912.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 8                                                                 # STEP 0
ACTION: int3 = 8 
int3 = None : <type 'NoneType'>
=> int3 = 8 : <type 'int'>
==================================================
int0 = 10                                                                # STEP 1
ACTION: int0 = 10 
int0 = None : <type 'NoneType'>
=> int0 = 10 : <type 'int'>
==================================================
int1 = 11                                                                # STEP 2
ACTION: int1 = 11 
int1 = None : <type 'NoneType'>
=> int1 = 11 : <type 'int'>
==================================================
int2 = 11                                                                # STEP 3
ACTION: int2 = 11 
int2 = None : <type 'NoneType'>
=> int2 = 11 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x10554d7a0> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
result = avl1.find(int1)                                                 # STEP 5
ACTION: result = avl1.find(int1) 
int1 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10554d7a0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
result = avl1.find(int1)                                                 # STEP 6
ACTION: result = avl1.find(int1) 
int1 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10554d7a0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int1 = 8                                                                 # STEP 7
ACTION: int1 = 8 
int1 = 11 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
avl1.delete(int1)                                                        # STEP 8
ACTION: avl1.delete(int1) 
int1 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10554d7a0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int1 = 15                                                                # STEP 9
ACTION: int1 = 15 
int1 = 8 : <type 'int'>
=> int1 = 15 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 10
ACTION: avl1.insert(int1) 
int1 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10554d7a0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([15]) : <type 'set'>
==================================================
int1 = 13                                                               # STEP 11
ACTION: int1 = 13 
int1 = 15 : <type 'int'>
=> int1 = 13 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 12
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x10554d7a0> : <type 'instance'>
avl_REF1 = set([15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1 = avl.AVLTree()                                                    # STEP 13
ACTION: avl1 = avl.AVLTree() 
avl1 = <avlbug2.AVLTree instance at 0x10554d7a0> : <type 'instance'>
avl_REF1 = set([15]) : <type 'set'>
=> avl1 = <avlbug2.AVLTree instance at 0x1057aaea8> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 14
ACTION: avl1.delete(int0) 
int0 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1057aaea8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int0 = 6                                                                # STEP 15
ACTION: int0 = 6 
int0 = 10 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 16
ACTION: avl1.insert(int0) 
int0 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1057aaea8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([6]) : <type 'set'>
==================================================
result = avl1.find(int1)                                                # STEP 17
ACTION: result = avl1.find(int1) 
int1 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1057aaea8> : <type 'instance'>
avl_REF1 = set([6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int0 = 20                                                               # STEP 18
ACTION: int0 = 20 
int0 = 6 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 19
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x1057aaea8> : <type 'instance'>
avl_REF1 = set([6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1 == avl1                                                            # STEP 20
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x1057aaea8> : <type 'instance'>
avl_REF1 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
int1 = 11                                                               # STEP 21
ACTION: int1 = 11 
int1 = 13 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 22
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x1057aaea8> : <type 'instance'>
avl_REF1 = set([6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
result = avl1.inorder()                                                 # STEP 23
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x1057aaea8> : <type 'instance'>
avl_REF1 = set([6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.delete(int1)                                                       # STEP 24
ACTION: avl1.delete(int1) 
int1 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1057aaea8> : <type 'instance'>
avl_REF1 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.insert(int3)                                                       # STEP 25
ACTION: avl1.insert(int3) 
int3 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1057aaea8> : <type 'instance'>
avl_REF1 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([8, 6]) : <type 'set'>
==================================================
int1 = 5                                                                # STEP 26
ACTION: int1 = 5 
int1 = 11 : <type 'int'>
=> int1 = 5 : <type 'int'>
==================================================
int3 = 8                                                                # STEP 27
ACTION: int3 = 8 
int3 = 8 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 28
ACTION: avl1 = avl.AVLTree() 
avl1 = <avlbug2.AVLTree instance at 0x1057aaea8> : <type 'instance'>
avl_REF1 = set([8, 6]) : <type 'set'>
=> avl1 = <avlbug2.AVLTree instance at 0x1057a6128> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1 == avl1                                                            # STEP 29
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x1057a6128> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.insert(int0)                                                       # STEP 30
ACTION: avl1.insert(int0) 
int0 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1057a6128> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([20]) : <type 'set'>
==================================================
int0 = 4                                                                # STEP 31
ACTION: int0 = 4 
int0 = 20 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 32
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x1057a6ab8> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 33
ACTION: avl0.delete(int0) 
int0 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1057a6ab8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int0 = 8                                                                # STEP 34
ACTION: int0 = 8 
int0 = 4 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 35
ACTION: avl0.delete(int0) 
int0 = 8 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1057a6ab8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int0 = 8                                                                # STEP 36
ACTION: int0 = 8 
int0 = 8 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 37
ACTION: avl0.delete(int1) 
int1 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1057a6ab8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int1 = 7                                                                # STEP 38
ACTION: int1 = 7 
int1 = 5 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
avl0 == avl0                                                            # STEP 39
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x1057a6ab8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl0.insert(int2)                                                       # STEP 40
ACTION: avl0.insert(int2) 
int2 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1057a6ab8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([11]) : <type 'set'>
==================================================
int2 = 13                                                               # STEP 41
ACTION: int2 = 13 
int2 = 11 : <type 'int'>
=> int2 = 13 : <type 'int'>
==================================================
result = avl0.find(int0)                                                # STEP 42
ACTION: result = avl0.find(int0) 
int0 = 8 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1057a6ab8> : <type 'instance'>
avl_REF0 = set([11]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
avl1.insert(int2)                                                       # STEP 43
ACTION: avl1.insert(int2) 
int2 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1057a6128> : <type 'instance'>
avl_REF1 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([20, 13]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 44
ACTION: avl0.delete(int2) 
int2 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1057a6ab8> : <type 'instance'>
avl_REF0 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int0 = 3                                                                # STEP 45
ACTION: int0 = 3 
int0 = 8 : <type 'int'>
=> int0 = 3 : <type 'int'>
==================================================
int2 = 7                                                                # STEP 46
ACTION: int2 = 7 
int2 = 13 : <type 'int'>
=> int2 = 7 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 47
ACTION: avl1.insert(int0) 
int0 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1057a6128> : <type 'instance'>
avl_REF1 = set([20, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([3, 20, 13]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 48
ACTION: avl1.insert(int3) 
int3 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1057a6128> : <type 'instance'>
avl_REF1 = set([3, 20, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([8, 3, 20, 13]) : <type 'set'>
==================================================
int3 = 20                                                               # STEP 49
ACTION: int3 = 20 
int3 = 8 : <type 'int'>
=> int3 = 20 : <type 'int'>
==================================================
int0 = 15                                                               # STEP 50
ACTION: int0 = 15 
int0 = 3 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 51
ACTION: avl1.delete(int0) 
int0 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1057a6128> : <type 'instance'>
avl_REF1 = set([8, 3, 20, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl0.insert(int1)                                                       # STEP 52
ACTION: avl0.insert(int1) 
int1 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1057a6ab8> : <type 'instance'>
avl_REF0 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([11, 7]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 53
ACTION: avl1.insert(int1) 
int1 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1057a6128> : <type 'instance'>
avl_REF1 = set([8, 3, 20, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([8, 3, 20, 13, 7]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 54
ACTION: avl0.delete(int3) 
int3 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1057a6ab8> : <type 'instance'>
avl_REF0 = set([11, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int3 = 5                                                                # STEP 55
ACTION: int3 = 5 
int3 = 20 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 56
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x1057a6128> : <type 'instance'>
avl_REF1 = set([8, 3, 20, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
int0 = 3                                                                # STEP 57
ACTION: int0 = 3 
int0 = 15 : <type 'int'>
=> int0 = 3 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 58
ACTION: avl0.insert(int2) 
int2 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1057a6ab8> : <type 'instance'>
avl_REF0 = set([11, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
int1 = 2                                                                # STEP 59
ACTION: int1 = 2 
int1 = 7 : <type 'int'>
=> int1 = 2 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 60
ACTION: avl0.delete(int3) 
int3 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1057a6ab8> : <type 'instance'>
avl_REF0 = set([11, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int3 = 12                                                               # STEP 61
ACTION: int3 = 12 
int3 = 5 : <type 'int'>
=> int3 = 12 : <type 'int'>
==================================================
int2 = 16                                                               # STEP 62
ACTION: int2 = 16 
int2 = 7 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 63
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x105575368> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl0.find(int0)                                                # STEP 64
ACTION: result = avl0.find(int0) 
int0 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1057a6ab8> : <type 'instance'>
avl_REF0 = set([11, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
avl2.delete(int1)                                                       # STEP 65
ACTION: avl2.delete(int1) 
int1 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105575368> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl1.delete(int0)                                                       # STEP 66
ACTION: avl1.delete(int0) 
int0 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1057a6128> : <type 'instance'>
avl_REF1 = set([8, 3, 20, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([8, 20, 13, 7]) : <type 'set'>
==================================================
int1 = 16                                                               # STEP 67
ACTION: int1 = 16 
int1 = 2 : <type 'int'>
=> int1 = 16 : <type 'int'>
==================================================
avl2 == avl0                                                            # STEP 68
ACTION: avl2 == avl0 
avl2 = <avlbug2.AVLTree instance at 0x105575368> : <type 'instance'>
avl0 = <avlbug2.AVLTree instance at 0x1057a6ab8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
avl_REF0 = set([11, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF0 
==================================================
avl2.insert(int1)                                                       # STEP 69
ACTION: avl2.insert(int1) 
int1 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105575368> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([16]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 70
ACTION: avl2.delete(int1) 
int1 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105575368> : <type 'instance'>
avl_REF2 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int0 = 3                                                                # STEP 71
ACTION: int0 = 3 
int0 = 3 : <type 'int'>
==================================================
avl1 == avl2                                                            # STEP 72
ACTION: avl1 == avl2 
avl1 = <avlbug2.AVLTree instance at 0x1057a6128> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x105575368> : <type 'instance'>
avl_REF1 = set([8, 20, 13, 7]) : <type 'set'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
result = avl1.find(int2)                                                # STEP 73
ACTION: result = avl1.find(int2) 
int2 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1057a6128> : <type 'instance'>
avl_REF1 = set([8, 20, 13, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl0.insert(int0)                                                       # STEP 74
ACTION: avl0.insert(int0) 
int0 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1057a6ab8> : <type 'instance'>
avl_REF0 = set([11, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([3, 11, 7]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 75
ACTION: avl1.delete(int3) 
int3 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1057a6128> : <type 'instance'>
avl_REF1 = set([8, 20, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1 == avl1                                                            # STEP 76
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x1057a6128> : <type 'instance'>
avl_REF1 = set([8, 20, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
int2 = 8                                                                # STEP 77
ACTION: int2 = 8 
int2 = 16 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
int3 = 2                                                                # STEP 78
ACTION: int3 = 2 
int3 = 12 : <type 'int'>
=> int3 = 2 : <type 'int'>
==================================================
result = avl0.find(int2)                                                # STEP 79
ACTION: result = avl0.find(int2) 
int2 = 8 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1057a6ab8> : <type 'instance'>
avl_REF0 = set([3, 11, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
int1 = 7                                                                # STEP 80
ACTION: int1 = 7 
int1 = 16 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
int2 = 13                                                               # STEP 81
ACTION: int2 = 13 
int2 = 8 : <type 'int'>
=> int2 = 13 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 82
ACTION: avl0.insert(int1) 
int1 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1057a6ab8> : <type 'instance'>
avl_REF0 = set([3, 11, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
int0 = 20                                                               # STEP 83
ACTION: int0 = 20 
int0 = 3 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
avl1 == avl2                                                            # STEP 84
ACTION: avl1 == avl2 
avl1 = <avlbug2.AVLTree instance at 0x1057a6128> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x105575368> : <type 'instance'>
avl_REF1 = set([8, 20, 13, 7]) : <type 'set'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
avl1 == avl0                                                            # STEP 85
ACTION: avl1 == avl0 
avl1 = <avlbug2.AVLTree instance at 0x1057a6128> : <type 'instance'>
avl0 = <avlbug2.AVLTree instance at 0x1057a6ab8> : <type 'instance'>
avl_REF1 = set([8, 20, 13, 7]) : <type 'set'>
avl_REF0 = set([3, 11, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
avl1 == avl2                                                            # STEP 86
ACTION: avl1 == avl2 
avl1 = <avlbug2.AVLTree instance at 0x1057a6128> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x105575368> : <type 'instance'>
avl_REF1 = set([8, 20, 13, 7]) : <type 'set'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
result = avl2.find(int1)                                                # STEP 87
ACTION: result = avl2.find(int1) 
int1 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105575368> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
result = avl1.inorder()                                                 # STEP 88
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x1057a6128> : <type 'instance'>
avl_REF1 = set([8, 20, 13, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl2.insert(int2)                                                       # STEP 89
ACTION: avl2.insert(int2) 
int2 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105575368> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([13]) : <type 'set'>
==================================================
result = avl1.find(int1)                                                # STEP 90
ACTION: result = avl1.find(int1) 
int1 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1057a6128> : <type 'instance'>
avl_REF1 = set([8, 20, 13, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int2 = 16                                                               # STEP 91
ACTION: int2 = 16 
int2 = 13 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 92
ACTION: avl1.insert(int3) 
int3 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1057a6128> : <type 'instance'>
avl_REF1 = set([8, 20, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([2, 7, 8, 13, 20]) : <type 'set'>
==================================================
int1 = 9                                                                # STEP 93
ACTION: int1 = 9 
int1 = 7 : <type 'int'>
=> int1 = 9 : <type 'int'>
==================================================
int3 = 14                                                               # STEP 94
ACTION: int3 = 14 
int3 = 2 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 95
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x1057a6128> : <type 'instance'>
avl_REF1 = set([2, 7, 8, 13, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.delete(int0)                                                       # STEP 96
ACTION: avl1.delete(int0) 
int0 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1057a6128> : <type 'instance'>
avl_REF1 = set([2, 7, 8, 13, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([2, 7, 8, 13]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105578b00>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 45
STOPPING TESTING DUE TO TIMEOUT
7.97749089705 PERCENT COVERED
60.2144830227 TOTAL RUNTIME
5 EXECUTED
442 TOTAL TEST OPERATIONS
24.4628033638 TIME SPENT EXECUTING TEST OPERATIONS
0.0185883045197 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
24.561745882 TIME SPENT CHECKING PROPERTIES
49.0245492458 TOTAL TIME SPENT RUNNING SUT
0.00393605232239 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int3 = 8                                                                 # STEP 0
int0 = 10                                                                # STEP 1
int1 = 11                                                                # STEP 2
int2 = 11                                                                # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
result = avl1.find(int1)                                                 # STEP 5
result = avl1.find(int1)                                                 # STEP 6
int1 = 8                                                                 # STEP 7
avl1.delete(int1)                                                        # STEP 8
int1 = 15                                                                # STEP 9
avl1.insert(int1)                                                       # STEP 10
int1 = 13                                                               # STEP 11
result = avl1.inorder()                                                 # STEP 12
avl1 = avl.AVLTree()                                                    # STEP 13
avl1.delete(int0)                                                       # STEP 14
int0 = 6                                                                # STEP 15
avl1.insert(int0)                                                       # STEP 16
result = avl1.find(int1)                                                # STEP 17
int0 = 20                                                               # STEP 18
result = avl1.inorder()                                                 # STEP 19
avl1 == avl1                                                            # STEP 20
int1 = 11                                                               # STEP 21
result = avl1.inorder()                                                 # STEP 22
result = avl1.inorder()                                                 # STEP 23
avl1.delete(int1)                                                       # STEP 24
avl1.insert(int3)                                                       # STEP 25
int1 = 5                                                                # STEP 26
int3 = 8                                                                # STEP 27
avl1 = avl.AVLTree()                                                    # STEP 28
avl1 == avl1                                                            # STEP 29
avl1.insert(int0)                                                       # STEP 30
int0 = 4                                                                # STEP 31
avl0 = avl.AVLTree()                                                    # STEP 32
avl0.delete(int0)                                                       # STEP 33
int0 = 8                                                                # STEP 34
avl0.delete(int0)                                                       # STEP 35
int0 = 8                                                                # STEP 36
avl0.delete(int1)                                                       # STEP 37
int1 = 7                                                                # STEP 38
avl0 == avl0                                                            # STEP 39
avl0.insert(int2)                                                       # STEP 40
int2 = 13                                                               # STEP 41
result = avl0.find(int0)                                                # STEP 42
avl1.insert(int2)                                                       # STEP 43
avl0.delete(int2)                                                       # STEP 44
int0 = 3                                                                # STEP 45
int2 = 7                                                                # STEP 46
avl1.insert(int0)                                                       # STEP 47
avl1.insert(int3)                                                       # STEP 48
int3 = 20                                                               # STEP 49
int0 = 15                                                               # STEP 50
avl1.delete(int0)                                                       # STEP 51
avl0.insert(int1)                                                       # STEP 52
avl1.insert(int1)                                                       # STEP 53
avl0.delete(int3)                                                       # STEP 54
int3 = 5                                                                # STEP 55
avl1 == avl1                                                            # STEP 56
int0 = 3                                                                # STEP 57
avl0.insert(int2)                                                       # STEP 58
int1 = 2                                                                # STEP 59
avl0.delete(int3)                                                       # STEP 60
int3 = 12                                                               # STEP 61
int2 = 16                                                               # STEP 62
avl2 = avl.AVLTree()                                                    # STEP 63
result = avl0.find(int0)                                                # STEP 64
avl2.delete(int1)                                                       # STEP 65
avl1.delete(int0)                                                       # STEP 66
int1 = 16                                                               # STEP 67
avl2 == avl0                                                            # STEP 68
avl2.insert(int1)                                                       # STEP 69
avl2.delete(int1)                                                       # STEP 70
int0 = 3                                                                # STEP 71
avl1 == avl2                                                            # STEP 72
result = avl1.find(int2)                                                # STEP 73
avl0.insert(int0)                                                       # STEP 74
avl1.delete(int3)                                                       # STEP 75
avl1 == avl1                                                            # STEP 76
int2 = 8                                                                # STEP 77
int3 = 2                                                                # STEP 78
result = avl0.find(int2)                                                # STEP 79
int1 = 7                                                                # STEP 80
int2 = 13                                                               # STEP 81
avl0.insert(int1)                                                       # STEP 82
int0 = 20                                                               # STEP 83
avl1 == avl2                                                            # STEP 84
avl1 == avl0                                                            # STEP 85
avl1 == avl2                                                            # STEP 86
result = avl2.find(int1)                                                # STEP 87
result = avl1.inorder()                                                 # STEP 88
avl2.insert(int2)                                                       # STEP 89
result = avl1.find(int1)                                                # STEP 90
int2 = 16                                                               # STEP 91
avl1.insert(int3)                                                       # STEP 92
int1 = 9                                                                # STEP 93
int3 = 14                                                               # STEP 94
avl1 == avl1                                                            # STEP 95
avl1.delete(int0)                                                       # STEP 96
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105578b00>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
198 BRANCHES COVERED
149 STATEMENTS COVERED

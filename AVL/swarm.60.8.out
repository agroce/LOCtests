Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=True, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.99318.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  14 [2:0]
-- < 11 [1:0]
---- < 3 [0:0] L
---- > 13 [0:0] L
-- > 16 [1:1]
---- < 15 [0:0] L
set([3, 11, 13, 14, 15, 16])
  12 [2:0]
-- < 9 [1:0]
---- < 6 [0:0] L
---- > 11 [0:0] L
-- > 14 [1:-1]
---- > 15 [0:0] L
set([6, 9, 11, 12, 14, 15])
  14 [3:1]
-- < 5 [2:0]
---- < 3 [1:1]
------ < 2 [0:0] L
---- > 9 [1:-1]
------ > 13 [0:0] L
-- > 16 [1:-1]
---- > 18 [0:0] L
set([2, 3, 5, 9, 13, 14, 16, 18])
  14 [3:1]
-- < 5 [2:0]
---- < 3 [1:1]
------ < 2 [0:0] L
---- > 9 [1:-1]
------ > 13 [0:0] L
-- > 16 [1:-1]
---- > 18 [0:0] L
set([2, 3, 5, 9, 13, 14, 16, 18])
  12 [3:0]
-- < 6 [2:0]
---- < 1 [1:-1]
------ > 5 [0:0] L
---- > 9 [1:0]
------ < 7 [0:0] L
------ > 11 [0:0] L
-- > 15 [2:0]
---- < 14 [1:1]
------ < 13 [0:0] L
---- > 16 [1:-1]
------ > 20 [0:0] L
set([1, 5, 6, 7, 9, 11, 12, 13, 14, 15, 16, 20])
  12 [3:0]
-- < 6 [2:0]
---- < 1 [1:-1]
------ > 5 [0:0] L
---- > 9 [1:0]
------ < 7 [0:0] L
------ > 11 [0:0] L
-- > 15 [2:0]
---- < 14 [1:1]
------ < 13 [0:0] L
---- > 16 [1:-1]
------ > 20 [0:0] L
set([1, 5, 6, 7, 9, 11, 12, 13, 14, 15, 16, 20])
  12 [3:0]
-- < 6 [2:0]
---- < 1 [1:-1]
------ > 5 [0:0] L
---- > 9 [1:0]
------ < 7 [0:0] L
------ > 11 [0:0] L
-- > 15 [2:0]
---- < 14 [1:1]
------ < 13 [0:0] L
---- > 16 [1:-1]
------ > 20 [0:0] L
set([1, 5, 6, 7, 9, 11, 12, 13, 14, 15, 16, 20])
TEST #5 STEP #7 (0:00:30.048025) Fri Apr 28 03:37:27 2017 [ 161 stmts 214 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103e86680>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 96 steps

SAVING TEST AS failure.99318.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 12                                                                # STEP 0
ACTION: int1 = 12 
int1 = None : <type 'NoneType'>
=> int1 = 12 : <type 'int'>
==================================================
int2 = 7                                                                 # STEP 1
ACTION: int2 = 7 
int2 = None : <type 'NoneType'>
=> int2 = 7 : <type 'int'>
==================================================
int3 = 9                                                                 # STEP 2
ACTION: int3 = 9 
int3 = None : <type 'NoneType'>
=> int3 = 9 : <type 'int'>
==================================================
int0 = 12                                                                # STEP 3
ACTION: int0 = 12 
int0 = None : <type 'NoneType'>
=> int0 = 12 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x103e1d0e0> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
result = avl1.find(int3)                                                 # STEP 5
ACTION: result = avl1.find(int3) 
int3 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103e1d0e0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
int3 = 17                                                                # STEP 6
ACTION: int3 = 17 
int3 = 9 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
avl1.insert(int2)                                                        # STEP 7
ACTION: avl1.insert(int2) 
int2 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103e1d0e0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([7]) : <type 'set'>
==================================================
int2 = 6                                                                 # STEP 8
ACTION: int2 = 6 
int2 = 7 : <type 'int'>
=> int2 = 6 : <type 'int'>
==================================================
result = avl1.find(int1)                                                 # STEP 9
ACTION: result = avl1.find(int1) 
int1 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103e1d0e0> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl1.insert(int3)                                                       # STEP 10
ACTION: avl1.insert(int3) 
int3 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103e1d0e0> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([17, 7]) : <type 'set'>
==================================================
int3 = 11                                                               # STEP 11
ACTION: int3 = 11 
int3 = 17 : <type 'int'>
=> int3 = 11 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 12
ACTION: avl1.delete(int1) 
int1 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103e1d0e0> : <type 'instance'>
avl_REF1 = set([17, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int1 = 15                                                               # STEP 13
ACTION: int1 = 15 
int1 = 12 : <type 'int'>
=> int1 = 15 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 14
ACTION: avl1.insert(int0) 
int0 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103e1d0e0> : <type 'instance'>
avl_REF1 = set([17, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([17, 12, 7]) : <type 'set'>
==================================================
result = avl1.find(int3)                                                # STEP 15
ACTION: result = avl1.find(int3) 
int3 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103e1d0e0> : <type 'instance'>
avl_REF1 = set([17, 12, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
int0 = 9                                                                # STEP 16
ACTION: int0 = 9 
int0 = 12 : <type 'int'>
=> int0 = 9 : <type 'int'>
==================================================
int3 = 7                                                                # STEP 17
ACTION: int3 = 7 
int3 = 11 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
result = avl1.find(int0)                                                # STEP 18
ACTION: result = avl1.find(int0) 
int0 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103e1d0e0> : <type 'instance'>
avl_REF1 = set([17, 12, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl1.insert(int2)                                                       # STEP 19
ACTION: avl1.insert(int2) 
int2 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103e1d0e0> : <type 'instance'>
avl_REF1 = set([17, 12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([17, 12, 6, 7]) : <type 'set'>
==================================================
int0 = 14                                                               # STEP 20
ACTION: int0 = 14 
int0 = 9 : <type 'int'>
=> int0 = 14 : <type 'int'>
==================================================
int2 = 1                                                                # STEP 21
ACTION: int2 = 1 
int2 = 6 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
result = avl1.find(int3)                                                # STEP 22
ACTION: result = avl1.find(int3) 
int3 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103e1d0e0> : <type 'instance'>
avl_REF1 = set([17, 12, 6, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
int3 = 11                                                               # STEP 23
ACTION: int3 = 11 
int3 = 7 : <type 'int'>
=> int3 = 11 : <type 'int'>
==================================================
result = avl1.find(int1)                                                # STEP 24
ACTION: result = avl1.find(int1) 
int1 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103e1d0e0> : <type 'instance'>
avl_REF1 = set([17, 12, 6, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int1 = 18                                                               # STEP 25
ACTION: int1 = 18 
int1 = 15 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 26
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x103dcc560> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl2.find(int3)                                                # STEP 27
ACTION: result = avl2.find(int3) 
int3 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103dcc560> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
int3 = 8                                                                # STEP 28
ACTION: int3 = 8 
int3 = 11 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
result = avl2.find(int1)                                                # STEP 29
ACTION: result = avl2.find(int1) 
int1 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103dcc560> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl1.insert(int2)                                                       # STEP 30
ACTION: avl1.insert(int2) 
int2 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103e1d0e0> : <type 'instance'>
avl_REF1 = set([17, 12, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([17, 12, 1, 6, 7]) : <type 'set'>
==================================================
int2 = 3                                                                # STEP 31
ACTION: int2 = 3 
int2 = 1 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
int1 = 20                                                               # STEP 32
ACTION: int1 = 20 
int1 = 18 : <type 'int'>
=> int1 = 20 : <type 'int'>
==================================================
result = avl1.find(int0)                                                # STEP 33
ACTION: result = avl1.find(int0) 
int0 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103e1d0e0> : <type 'instance'>
avl_REF1 = set([17, 12, 1, 6, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl1.delete(int0)                                                       # STEP 34
ACTION: avl1.delete(int0) 
int0 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103e1d0e0> : <type 'instance'>
avl_REF1 = set([17, 12, 1, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
result = avl2.find(int1)                                                # STEP 35
ACTION: result = avl2.find(int1) 
int1 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103dcc560> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int0 = 20                                                               # STEP 36
ACTION: int0 = 20 
int0 = 14 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 37
ACTION: avl1.insert(int3) 
int3 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103e1d0e0> : <type 'instance'>
avl_REF1 = set([17, 12, 1, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([1, 6, 7, 8, 12, 17]) : <type 'set'>
==================================================
int1 = 12                                                               # STEP 38
ACTION: int1 = 12 
int1 = 20 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
int3 = 15                                                               # STEP 39
ACTION: int3 = 15 
int3 = 8 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
result = avl2.find(int1)                                                # STEP 40
ACTION: result = avl2.find(int1) 
int1 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103dcc560> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int1 = 3                                                                # STEP 41
ACTION: int1 = 3 
int1 = 12 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
result = avl1.find(int1)                                                # STEP 42
ACTION: result = avl1.find(int1) 
int1 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103e1d0e0> : <type 'instance'>
avl_REF1 = set([1, 6, 7, 8, 12, 17]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int1 = 13                                                               # STEP 43
ACTION: int1 = 13 
int1 = 3 : <type 'int'>
=> int1 = 13 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 44
ACTION: avl2.delete(int0) 
int0 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103dcc560> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl1.insert(int0)                                                       # STEP 45
ACTION: avl1.insert(int0) 
int0 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103e1d0e0> : <type 'instance'>
avl_REF1 = set([1, 6, 7, 8, 12, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([1, 6, 7, 8, 12, 17, 20]) : <type 'set'>
==================================================
result = avl1.find(int2)                                                # STEP 46
ACTION: result = avl1.find(int2) 
int2 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103e1d0e0> : <type 'instance'>
avl_REF1 = set([1, 6, 7, 8, 12, 17, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl2.insert(int2)                                                       # STEP 47
ACTION: avl2.insert(int2) 
int2 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103dcc560> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([3]) : <type 'set'>
==================================================
int2 = 16                                                               # STEP 48
ACTION: int2 = 16 
int2 = 3 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
int0 = 9                                                                # STEP 49
ACTION: int0 = 9 
int0 = 20 : <type 'int'>
=> int0 = 9 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 50
ACTION: avl2.insert(int3) 
int3 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103dcc560> : <type 'instance'>
avl_REF2 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([3, 15]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 51
ACTION: avl1.insert(int1) 
int1 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103e1d0e0> : <type 'instance'>
avl_REF1 = set([1, 6, 7, 8, 12, 17, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([1, 6, 7, 8, 12, 13, 17, 20]) : <type 'set'>
==================================================
int1 = 20                                                               # STEP 52
ACTION: int1 = 20 
int1 = 13 : <type 'int'>
=> int1 = 20 : <type 'int'>
==================================================
result = avl1.find(int3)                                                # STEP 53
ACTION: result = avl1.find(int3) 
int3 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103e1d0e0> : <type 'instance'>
avl_REF1 = set([1, 6, 7, 8, 12, 13, 17, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl2.insert(int0)                                                       # STEP 54
ACTION: avl2.insert(int0) 
int0 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103dcc560> : <type 'instance'>
avl_REF2 = set([3, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([9, 3, 15]) : <type 'set'>
==================================================
result = avl2.find(int2)                                                # STEP 55
ACTION: result = avl2.find(int2) 
int2 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103dcc560> : <type 'instance'>
avl_REF2 = set([9, 3, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int2 = 19                                                               # STEP 56
ACTION: int2 = 19 
int2 = 16 : <type 'int'>
=> int2 = 19 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 57
ACTION: avl1.delete(int2) 
int2 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103e1d0e0> : <type 'instance'>
avl_REF1 = set([1, 6, 7, 8, 12, 13, 17, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl0 = avl.AVLTree()                                                    # STEP 58
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x103de0e18> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 59
ACTION: avl2.insert(int2) 
int2 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103dcc560> : <type 'instance'>
avl_REF2 = set([9, 3, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([19, 9, 3, 15]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 60
ACTION: avl1.delete(int2) 
int2 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103e1d0e0> : <type 'instance'>
avl_REF1 = set([1, 6, 7, 8, 12, 13, 17, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int0 = 17                                                               # STEP 61
ACTION: int0 = 17 
int0 = 9 : <type 'int'>
=> int0 = 17 : <type 'int'>
==================================================
int2 = 18                                                               # STEP 62
ACTION: int2 = 18 
int2 = 19 : <type 'int'>
=> int2 = 18 : <type 'int'>
==================================================
result = avl0.find(int0)                                                # STEP 63
ACTION: result = avl0.find(int0) 
int0 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103de0e18> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
int3 = 19                                                               # STEP 64
ACTION: int3 = 19 
int3 = 15 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
int0 = 4                                                                # STEP 65
ACTION: int0 = 4 
int0 = 17 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 66
ACTION: avl0.delete(int0) 
int0 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103de0e18> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int0 = 1                                                                # STEP 67
ACTION: int0 = 1 
int0 = 4 : <type 'int'>
=> int0 = 1 : <type 'int'>
==================================================
result = avl1.find(int3)                                                # STEP 68
ACTION: result = avl1.find(int3) 
int3 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103e1d0e0> : <type 'instance'>
avl_REF1 = set([1, 6, 7, 8, 12, 13, 17, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
result = avl0.find(int0)                                                # STEP 69
ACTION: result = avl0.find(int0) 
int0 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103de0e18> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
avl1.insert(int2)                                                       # STEP 70
ACTION: avl1.insert(int2) 
int2 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103e1d0e0> : <type 'instance'>
avl_REF1 = set([1, 6, 7, 8, 12, 13, 17, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([1, 6, 7, 8, 12, 13, 17, 18, 20]) : <type 'set'>
==================================================
int2 = 5                                                                # STEP 71
ACTION: int2 = 5 
int2 = 18 : <type 'int'>
=> int2 = 5 : <type 'int'>
==================================================
int3 = 12                                                               # STEP 72
ACTION: int3 = 12 
int3 = 19 : <type 'int'>
=> int3 = 12 : <type 'int'>
==================================================
int0 = 5                                                                # STEP 73
ACTION: int0 = 5 
int0 = 1 : <type 'int'>
=> int0 = 5 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 74
ACTION: avl2.insert(int1) 
int1 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103dcc560> : <type 'instance'>
avl_REF2 = set([19, 9, 3, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([19, 9, 3, 20, 15]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 75
ACTION: avl0.delete(int3) 
int3 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103de0e18> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int3 = 6                                                                # STEP 76
ACTION: int3 = 6 
int3 = 12 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 77
ACTION: avl0.delete(int0) 
int0 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103de0e18> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int1 = 2                                                                # STEP 78
ACTION: int1 = 2 
int1 = 20 : <type 'int'>
=> int1 = 2 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 79
ACTION: avl0.delete(int3) 
int3 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103de0e18> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
result = avl1.find(int3)                                                # STEP 80
ACTION: result = avl1.find(int3) 
int3 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103e1d0e0> : <type 'instance'>
avl_REF1 = set([1, 6, 7, 8, 12, 13, 17, 18, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
int0 = 15                                                               # STEP 81
ACTION: int0 = 15 
int0 = 5 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 82
ACTION: avl0.insert(int3) 
int3 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103de0e18> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([6]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 83
ACTION: avl2.insert(int2) 
int2 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103dcc560> : <type 'instance'>
avl_REF2 = set([19, 9, 3, 20, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([3, 5, 9, 15, 19, 20]) : <type 'set'>
==================================================
result = avl0.find(int2)                                                # STEP 84
ACTION: result = avl0.find(int2) 
int2 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103de0e18> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
int3 = 16                                                               # STEP 85
ACTION: int3 = 16 
int3 = 6 : <type 'int'>
=> int3 = 16 : <type 'int'>
==================================================
int2 = 9                                                                # STEP 86
ACTION: int2 = 9 
int2 = 5 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 87
ACTION: avl0.delete(int1) 
int1 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103de0e18> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int1 = 19                                                               # STEP 88
ACTION: int1 = 19 
int1 = 2 : <type 'int'>
=> int1 = 19 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 89
ACTION: avl2.insert(int2) 
int2 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103dcc560> : <type 'instance'>
avl_REF2 = set([3, 5, 9, 15, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl2.delete(int2)                                                       # STEP 90
ACTION: avl2.delete(int2) 
int2 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103dcc560> : <type 'instance'>
avl_REF2 = set([3, 5, 9, 15, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([3, 5, 15, 19, 20]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 91
ACTION: avl2.delete(int1) 
int1 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103dcc560> : <type 'instance'>
avl_REF2 = set([3, 5, 15, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([3, 5, 15, 20]) : <type 'set'>
==================================================
int1 = 2                                                                # STEP 92
ACTION: int1 = 2 
int1 = 19 : <type 'int'>
=> int1 = 2 : <type 'int'>
==================================================
int2 = 17                                                               # STEP 93
ACTION: int2 = 17 
int2 = 9 : <type 'int'>
=> int2 = 17 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 94
ACTION: avl0.delete(int2) 
int2 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103de0e18> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl2.delete(int0)                                                       # STEP 95
ACTION: avl2.delete(int0) 
int0 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103dcc560> : <type 'instance'>
avl_REF2 = set([3, 5, 15, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([3, 5, 20]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1038773f8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 28
STOPPING TESTING DUE TO TIMEOUT
8.72073294876 PERCENT COVERED
60.2249059677 TOTAL RUNTIME
8 EXECUTED
724 TOTAL TEST OPERATIONS
26.5929238796 TIME SPENT EXECUTING TEST OPERATIONS
0.0271384716034 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
26.7088932991 TIME SPENT CHECKING PROPERTIES
53.3018171787 TOTAL TIME SPENT RUNNING SUT
0.00456666946411 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int1 = 12                                                                # STEP 0
int2 = 7                                                                 # STEP 1
int3 = 9                                                                 # STEP 2
int0 = 12                                                                # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
result = avl1.find(int3)                                                 # STEP 5
int3 = 17                                                                # STEP 6
avl1.insert(int2)                                                        # STEP 7
int2 = 6                                                                 # STEP 8
result = avl1.find(int1)                                                 # STEP 9
avl1.insert(int3)                                                       # STEP 10
int3 = 11                                                               # STEP 11
avl1.delete(int1)                                                       # STEP 12
int1 = 15                                                               # STEP 13
avl1.insert(int0)                                                       # STEP 14
result = avl1.find(int3)                                                # STEP 15
int0 = 9                                                                # STEP 16
int3 = 7                                                                # STEP 17
result = avl1.find(int0)                                                # STEP 18
avl1.insert(int2)                                                       # STEP 19
int0 = 14                                                               # STEP 20
int2 = 1                                                                # STEP 21
result = avl1.find(int3)                                                # STEP 22
int3 = 11                                                               # STEP 23
result = avl1.find(int1)                                                # STEP 24
int1 = 18                                                               # STEP 25
avl2 = avl.AVLTree()                                                    # STEP 26
result = avl2.find(int3)                                                # STEP 27
int3 = 8                                                                # STEP 28
result = avl2.find(int1)                                                # STEP 29
avl1.insert(int2)                                                       # STEP 30
int2 = 3                                                                # STEP 31
int1 = 20                                                               # STEP 32
result = avl1.find(int0)                                                # STEP 33
avl1.delete(int0)                                                       # STEP 34
result = avl2.find(int1)                                                # STEP 35
int0 = 20                                                               # STEP 36
avl1.insert(int3)                                                       # STEP 37
int1 = 12                                                               # STEP 38
int3 = 15                                                               # STEP 39
result = avl2.find(int1)                                                # STEP 40
int1 = 3                                                                # STEP 41
result = avl1.find(int1)                                                # STEP 42
int1 = 13                                                               # STEP 43
avl2.delete(int0)                                                       # STEP 44
avl1.insert(int0)                                                       # STEP 45
result = avl1.find(int2)                                                # STEP 46
avl2.insert(int2)                                                       # STEP 47
int2 = 16                                                               # STEP 48
int0 = 9                                                                # STEP 49
avl2.insert(int3)                                                       # STEP 50
avl1.insert(int1)                                                       # STEP 51
int1 = 20                                                               # STEP 52
result = avl1.find(int3)                                                # STEP 53
avl2.insert(int0)                                                       # STEP 54
result = avl2.find(int2)                                                # STEP 55
int2 = 19                                                               # STEP 56
avl1.delete(int2)                                                       # STEP 57
avl0 = avl.AVLTree()                                                    # STEP 58
avl2.insert(int2)                                                       # STEP 59
avl1.delete(int2)                                                       # STEP 60
int0 = 17                                                               # STEP 61
int2 = 18                                                               # STEP 62
result = avl0.find(int0)                                                # STEP 63
int3 = 19                                                               # STEP 64
int0 = 4                                                                # STEP 65
avl0.delete(int0)                                                       # STEP 66
int0 = 1                                                                # STEP 67
result = avl1.find(int3)                                                # STEP 68
result = avl0.find(int0)                                                # STEP 69
avl1.insert(int2)                                                       # STEP 70
int2 = 5                                                                # STEP 71
int3 = 12                                                               # STEP 72
int0 = 5                                                                # STEP 73
avl2.insert(int1)                                                       # STEP 74
avl0.delete(int3)                                                       # STEP 75
int3 = 6                                                                # STEP 76
avl0.delete(int0)                                                       # STEP 77
int1 = 2                                                                # STEP 78
avl0.delete(int3)                                                       # STEP 79
result = avl1.find(int3)                                                # STEP 80
int0 = 15                                                               # STEP 81
avl0.insert(int3)                                                       # STEP 82
avl2.insert(int2)                                                       # STEP 83
result = avl0.find(int2)                                                # STEP 84
int3 = 16                                                               # STEP 85
int2 = 9                                                                # STEP 86
avl0.delete(int1)                                                       # STEP 87
int1 = 19                                                               # STEP 88
avl2.insert(int2)                                                       # STEP 89
avl2.delete(int2)                                                       # STEP 90
avl2.delete(int1)                                                       # STEP 91
int1 = 2                                                                # STEP 92
int2 = 17                                                               # STEP 93
avl0.delete(int2)                                                       # STEP 94
avl2.delete(int0)                                                       # STEP 95
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1038773f8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
220 BRANCHES COVERED
164 STATEMENTS COVERED

Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.1067.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
TEST #4 STEP #66 (0:00:30.017587) Fri Apr 28 08:05:30 2017 [ 149 stmts 198 branches ]
  15 [2:0]
-- < 4 [1:-1]
---- > 11 [0:0] L
-- > 17 [1:0]
---- < 16 [0:0] L
---- > 20 [0:0] L
set([4, 11, 15, 16, 17, 20])
  14 [3:1]
-- < 6 [2:0]
---- < 4 [1:1]
------ < 2 [0:0] L
---- > 11 [1:1]
------ < 8 [0:0] L
-- > 18 [1:-1]
---- > 19 [0:0] L
set([2, 4, 6, 8, 11, 14, 18, 19])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1050956c8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 67 steps

SAVING TEST AS failure.1067.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 9                                                                 # STEP 0
ACTION: int1 = 9 
int1 = None : <type 'NoneType'>
=> int1 = 9 : <type 'int'>
==================================================
int0 = 14                                                                # STEP 1
ACTION: int0 = 14 
int0 = None : <type 'NoneType'>
=> int0 = 14 : <type 'int'>
==================================================
int3 = 3                                                                 # STEP 2
ACTION: int3 = 3 
int3 = None : <type 'NoneType'>
=> int3 = 3 : <type 'int'>
==================================================
int2 = 18                                                                # STEP 3
ACTION: int2 = 18 
int2 = None : <type 'NoneType'>
=> int2 = 18 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x103acde18> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl2.inorder()                                                  # STEP 5
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x103acde18> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2 = avl.AVLTree()                                                     # STEP 6
ACTION: avl2 = avl.AVLTree() 
avl2 = <avl.AVLTree instance at 0x103acde18> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
=> avl2 = <avl.AVLTree instance at 0x103a693f8> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
==================================================
avl2.insert(int2)                                                        # STEP 7
ACTION: avl2.insert(int2) 
int2 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a693f8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([18]) : <type 'set'>
==================================================
int2 = 19                                                                # STEP 8
ACTION: int2 = 19 
int2 = 18 : <type 'int'>
=> int2 = 19 : <type 'int'>
==================================================
result = avl2.find(int0)                                                 # STEP 9
ACTION: result = avl2.find(int0) 
int0 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a693f8> : <type 'instance'>
avl_REF2 = set([18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
int0 = 17                                                               # STEP 10
ACTION: int0 = 17 
int0 = 14 : <type 'int'>
=> int0 = 17 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 11
ACTION: avl2.insert(int3) 
int3 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a693f8> : <type 'instance'>
avl_REF2 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([18, 3]) : <type 'set'>
==================================================
int3 = 14                                                               # STEP 12
ACTION: int3 = 14 
int3 = 3 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 13
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x103a717e8> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 14
ACTION: avl0.insert(int0) 
int0 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a717e8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([17]) : <type 'set'>
==================================================
int0 = 11                                                               # STEP 15
ACTION: int0 = 11 
int0 = 17 : <type 'int'>
=> int0 = 11 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 16
ACTION: avl0.insert(int3) 
int3 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a717e8> : <type 'instance'>
avl_REF0 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([17, 14]) : <type 'set'>
==================================================
int3 = 19                                                               # STEP 17
ACTION: int3 = 19 
int3 = 14 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 18
ACTION: avl2.insert(int0) 
int0 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a693f8> : <type 'instance'>
avl_REF2 = set([18, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([11, 18, 3]) : <type 'set'>
==================================================
result = avl0.find(int0)                                                # STEP 19
ACTION: result = avl0.find(int0) 
int0 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a717e8> : <type 'instance'>
avl_REF0 = set([17, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
avl2 == avl2                                                            # STEP 20
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x103a693f8> : <type 'instance'>
avl_REF2 = set([11, 18, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
int0 = 13                                                               # STEP 21
ACTION: int0 = 13 
int0 = 11 : <type 'int'>
=> int0 = 13 : <type 'int'>
==================================================
result = avl0.find(int3)                                                # STEP 22
ACTION: result = avl0.find(int3) 
int3 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a717e8> : <type 'instance'>
avl_REF0 = set([17, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
avl1 = avl.AVLTree()                                                    # STEP 23
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x103a6d4d0> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
result = avl2.find(int2)                                                # STEP 24
ACTION: result = avl2.find(int2) 
int2 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a693f8> : <type 'instance'>
avl_REF2 = set([11, 18, 3]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int2 = 4                                                                # STEP 25
ACTION: int2 = 4 
int2 = 19 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 26
ACTION: avl2.insert(int3) 
int3 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a693f8> : <type 'instance'>
avl_REF2 = set([11, 18, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([11, 19, 18, 3]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 27
ACTION: avl1.insert(int3) 
int3 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103a6d4d0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([19]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 28
ACTION: avl1.insert(int0) 
int0 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103a6d4d0> : <type 'instance'>
avl_REF1 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([19, 13]) : <type 'set'>
==================================================
int3 = 15                                                               # STEP 29
ACTION: int3 = 15 
int3 = 19 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 30
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x103a693f8> : <type 'instance'>
avl_REF2 = set([11, 19, 18, 3]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl0.find(int2)                                                # STEP 31
ACTION: result = avl0.find(int2) 
int2 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a717e8> : <type 'instance'>
avl_REF0 = set([17, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl0.insert(int0)                                                       # STEP 32
ACTION: avl0.insert(int0) 
int0 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a717e8> : <type 'instance'>
avl_REF0 = set([17, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([17, 13, 14]) : <type 'set'>
==================================================
int2 = 7                                                                # STEP 33
ACTION: int2 = 7 
int2 = 4 : <type 'int'>
=> int2 = 7 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 34
ACTION: avl1.delete(int0) 
int0 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103a6d4d0> : <type 'instance'>
avl_REF1 = set([19, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([19]) : <type 'set'>
==================================================
int0 = 7                                                                # STEP 35
ACTION: int0 = 7 
int0 = 13 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 36
ACTION: avl2.delete(int0) 
int0 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a693f8> : <type 'instance'>
avl_REF2 = set([11, 19, 18, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2 == avl0                                                            # STEP 37
ACTION: avl2 == avl0 
avl2 = <avl.AVLTree instance at 0x103a693f8> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x103a717e8> : <type 'instance'>
avl_REF2 = set([11, 19, 18, 3]) : <type 'set'>
avl_REF0 = set([17, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF0 
==================================================
avl0.delete(int1)                                                       # STEP 38
ACTION: avl0.delete(int1) 
int1 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a717e8> : <type 'instance'>
avl_REF0 = set([17, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl2 == avl1                                                            # STEP 39
ACTION: avl2 == avl1 
avl2 = <avl.AVLTree instance at 0x103a693f8> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x103a6d4d0> : <type 'instance'>
avl_REF2 = set([11, 19, 18, 3]) : <type 'set'>
avl_REF1 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
avl1.delete(int0)                                                       # STEP 40
ACTION: avl1.delete(int0) 
int0 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103a6d4d0> : <type 'instance'>
avl_REF1 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
result = avl2.find(int0)                                                # STEP 41
ACTION: result = avl2.find(int0) 
int0 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a693f8> : <type 'instance'>
avl_REF2 = set([11, 19, 18, 3]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
int1 = 10                                                               # STEP 42
ACTION: int1 = 10 
int1 = 9 : <type 'int'>
=> int1 = 10 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 43
ACTION: avl2.insert(int1) 
int1 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a693f8> : <type 'instance'>
avl_REF2 = set([11, 19, 18, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([11, 19, 18, 3, 10]) : <type 'set'>
==================================================
result = avl2.find(int2)                                                # STEP 44
ACTION: result = avl2.find(int2) 
int2 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a693f8> : <type 'instance'>
avl_REF2 = set([11, 19, 18, 3, 10]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int0 = 19                                                               # STEP 45
ACTION: int0 = 19 
int0 = 7 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
int1 = 9                                                                # STEP 46
ACTION: int1 = 9 
int1 = 10 : <type 'int'>
=> int1 = 9 : <type 'int'>
==================================================
int2 = 3                                                                # STEP 47
ACTION: int2 = 3 
int2 = 7 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 48
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x103a693f8> : <type 'instance'>
avl_REF2 = set([11, 19, 18, 3, 10]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl2.find(int3)                                                # STEP 49
ACTION: result = avl2.find(int3) 
int3 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a693f8> : <type 'instance'>
avl_REF2 = set([11, 19, 18, 3, 10]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
result = avl1.find(int0)                                                # STEP 50
ACTION: result = avl1.find(int0) 
int0 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103a6d4d0> : <type 'instance'>
avl_REF1 = set([19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
int3 = 13                                                               # STEP 51
ACTION: int3 = 13 
int3 = 15 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 52
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x103a693f8> : <type 'instance'>
avl_REF2 = set([11, 19, 18, 3, 10]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl1.insert(int1)                                                       # STEP 53
ACTION: avl1.insert(int1) 
int1 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103a6d4d0> : <type 'instance'>
avl_REF1 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([9, 19]) : <type 'set'>
==================================================
avl1 == avl0                                                            # STEP 54
ACTION: avl1 == avl0 
avl1 = <avl.AVLTree instance at 0x103a6d4d0> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x103a717e8> : <type 'instance'>
avl_REF1 = set([9, 19]) : <type 'set'>
avl_REF0 = set([17, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
avl1.delete(int1)                                                       # STEP 55
ACTION: avl1.delete(int1) 
int1 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103a6d4d0> : <type 'instance'>
avl_REF1 = set([9, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([19]) : <type 'set'>
==================================================
avl2 == avl0                                                            # STEP 56
ACTION: avl2 == avl0 
avl2 = <avl.AVLTree instance at 0x103a693f8> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x103a717e8> : <type 'instance'>
avl_REF2 = set([11, 19, 18, 3, 10]) : <type 'set'>
avl_REF0 = set([17, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF0 
==================================================
int0 = 17                                                               # STEP 57
ACTION: int0 = 17 
int0 = 19 : <type 'int'>
=> int0 = 17 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 58
ACTION: avl2.delete(int2) 
int2 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a693f8> : <type 'instance'>
avl_REF2 = set([11, 19, 18, 3, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([11, 19, 18, 10]) : <type 'set'>
==================================================
avl1 == avl0                                                            # STEP 59
ACTION: avl1 == avl0 
avl1 = <avl.AVLTree instance at 0x103a6d4d0> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x103a717e8> : <type 'instance'>
avl_REF1 = set([19]) : <type 'set'>
avl_REF0 = set([17, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
avl0 == avl1                                                            # STEP 60
ACTION: avl0 == avl1 
avl0 = <avl.AVLTree instance at 0x103a717e8> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x103a6d4d0> : <type 'instance'>
avl_REF0 = set([17, 13, 14]) : <type 'set'>
avl_REF1 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF1 
==================================================
int1 = 10                                                               # STEP 61
ACTION: int1 = 10 
int1 = 9 : <type 'int'>
=> int1 = 10 : <type 'int'>
==================================================
avl1 == avl0                                                            # STEP 62
ACTION: avl1 == avl0 
avl1 = <avl.AVLTree instance at 0x103a6d4d0> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x103a717e8> : <type 'instance'>
avl_REF1 = set([19]) : <type 'set'>
avl_REF0 = set([17, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
result = avl2.find(int0)                                                # STEP 63
ACTION: result = avl2.find(int0) 
int0 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a693f8> : <type 'instance'>
avl_REF2 = set([11, 19, 18, 10]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl1 == avl1                                                            # STEP 64
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x103a6d4d0> : <type 'instance'>
avl_REF1 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
int0 = 1                                                                # STEP 65
ACTION: int0 = 1 
int0 = 17 : <type 'int'>
=> int0 = 1 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 66
ACTION: avl2.delete(int1) 
int1 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a693f8> : <type 'instance'>
avl_REF2 = set([11, 19, 18, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([11, 19, 18]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103af9710>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 0
STOPPING TESTING DUE TO TIMEOUT
8.6528673227 PERCENT COVERED
63.3591051102 TOTAL RUNTIME
8 EXECUTED
667 TOTAL TEST OPERATIONS
28.3085927963 TIME SPENT EXECUTING TEST OPERATIONS
0.0233609676361 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
28.5416722298 TIME SPENT CHECKING PROPERTIES
56.8502650261 TOTAL TIME SPENT RUNNING SUT
0.00494384765625 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int1 = 9                                                                 # STEP 0
int0 = 14                                                                # STEP 1
int3 = 3                                                                 # STEP 2
int2 = 18                                                                # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
result = avl2.inorder()                                                  # STEP 5
avl2 = avl.AVLTree()                                                     # STEP 6
avl2.insert(int2)                                                        # STEP 7
int2 = 19                                                                # STEP 8
result = avl2.find(int0)                                                 # STEP 9
int0 = 17                                                               # STEP 10
avl2.insert(int3)                                                       # STEP 11
int3 = 14                                                               # STEP 12
avl0 = avl.AVLTree()                                                    # STEP 13
avl0.insert(int0)                                                       # STEP 14
int0 = 11                                                               # STEP 15
avl0.insert(int3)                                                       # STEP 16
int3 = 19                                                               # STEP 17
avl2.insert(int0)                                                       # STEP 18
result = avl0.find(int0)                                                # STEP 19
avl2 == avl2                                                            # STEP 20
int0 = 13                                                               # STEP 21
result = avl0.find(int3)                                                # STEP 22
avl1 = avl.AVLTree()                                                    # STEP 23
result = avl2.find(int2)                                                # STEP 24
int2 = 4                                                                # STEP 25
avl2.insert(int3)                                                       # STEP 26
avl1.insert(int3)                                                       # STEP 27
avl1.insert(int0)                                                       # STEP 28
int3 = 15                                                               # STEP 29
result = avl2.inorder()                                                 # STEP 30
result = avl0.find(int2)                                                # STEP 31
avl0.insert(int0)                                                       # STEP 32
int2 = 7                                                                # STEP 33
avl1.delete(int0)                                                       # STEP 34
int0 = 7                                                                # STEP 35
avl2.delete(int0)                                                       # STEP 36
avl2 == avl0                                                            # STEP 37
avl0.delete(int1)                                                       # STEP 38
avl2 == avl1                                                            # STEP 39
avl1.delete(int0)                                                       # STEP 40
result = avl2.find(int0)                                                # STEP 41
int1 = 10                                                               # STEP 42
avl2.insert(int1)                                                       # STEP 43
result = avl2.find(int2)                                                # STEP 44
int0 = 19                                                               # STEP 45
int1 = 9                                                                # STEP 46
int2 = 3                                                                # STEP 47
result = avl2.inorder()                                                 # STEP 48
result = avl2.find(int3)                                                # STEP 49
result = avl1.find(int0)                                                # STEP 50
int3 = 13                                                               # STEP 51
result = avl2.inorder()                                                 # STEP 52
avl1.insert(int1)                                                       # STEP 53
avl1 == avl0                                                            # STEP 54
avl1.delete(int1)                                                       # STEP 55
avl2 == avl0                                                            # STEP 56
int0 = 17                                                               # STEP 57
avl2.delete(int2)                                                       # STEP 58
avl1 == avl0                                                            # STEP 59
avl0 == avl1                                                            # STEP 60
int1 = 10                                                               # STEP 61
avl1 == avl0                                                            # STEP 62
result = avl2.find(int0)                                                # STEP 63
avl1 == avl1                                                            # STEP 64
int0 = 1                                                                # STEP 65
avl2.delete(int1)                                                       # STEP 66
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103af9710>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
218 BRANCHES COVERED
163 STATEMENTS COVERED

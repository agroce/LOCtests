Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=True, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.43706.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104aa5b00>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
Original test has 77 steps

SAVING TEST AS failure.43706.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 19                                                                # STEP 0
ACTION: int3 = 19 
int3 = None : <type 'NoneType'>
=> int3 = 19 : <type 'int'>
==================================================
int2 = 11                                                                # STEP 1
ACTION: int2 = 11 
int2 = None : <type 'NoneType'>
=> int2 = 11 : <type 'int'>
==================================================
int1 = 17                                                                # STEP 2
ACTION: int1 = 17 
int1 = None : <type 'NoneType'>
=> int1 = 17 : <type 'int'>
==================================================
int0 = 13                                                                # STEP 3
ACTION: int0 = 13 
int0 = None : <type 'NoneType'>
=> int0 = 13 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x103492098> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int0)                                                        # STEP 5
ACTION: avl2.insert(int0) 
int0 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103492098> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([13]) : <type 'set'>
==================================================
int0 = 14                                                                # STEP 6
ACTION: int0 = 14 
int0 = 13 : <type 'int'>
=> int0 = 14 : <type 'int'>
==================================================
avl2.delete(int3)                                                        # STEP 7
ACTION: avl2.delete(int3) 
int3 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103492098> : <type 'instance'>
avl_REF2 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.insert(int3)                                                        # STEP 8
ACTION: avl2.insert(int3) 
int3 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103492098> : <type 'instance'>
avl_REF2 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([19, 13]) : <type 'set'>
==================================================
avl2.insert(int3)                                                        # STEP 9
ACTION: avl2.insert(int3) 
int3 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103492098> : <type 'instance'>
avl_REF2 = set([19, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
avl2.delete(int2)                                                       # STEP 10
ACTION: avl2.delete(int2) 
int2 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103492098> : <type 'instance'>
avl_REF2 = set([19, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.delete(int1)                                                       # STEP 11
ACTION: avl2.delete(int1) 
int1 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103492098> : <type 'instance'>
avl_REF2 = set([19, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int3 = 12                                                               # STEP 12
ACTION: int3 = 12 
int3 = 19 : <type 'int'>
=> int3 = 12 : <type 'int'>
==================================================
result = avl2.find(int0)                                                # STEP 13
ACTION: result = avl2.find(int0) 
int0 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103492098> : <type 'instance'>
avl_REF2 = set([19, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
int0 = 7                                                                # STEP 14
ACTION: int0 = 7 
int0 = 14 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 15
ACTION: avl2.delete(int0) 
int0 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103492098> : <type 'instance'>
avl_REF2 = set([19, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.insert(int1)                                                       # STEP 16
ACTION: avl2.insert(int1) 
int1 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103492098> : <type 'instance'>
avl_REF2 = set([19, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([17, 19, 13]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 17
ACTION: avl2.delete(int0) 
int0 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103492098> : <type 'instance'>
avl_REF2 = set([17, 19, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.delete(int0)                                                       # STEP 18
ACTION: avl2.delete(int0) 
int0 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103492098> : <type 'instance'>
avl_REF2 = set([17, 19, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.insert(int0)                                                       # STEP 19
ACTION: avl2.insert(int0) 
int0 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103492098> : <type 'instance'>
avl_REF2 = set([17, 19, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([17, 19, 13, 7]) : <type 'set'>
==================================================
int2 = 5                                                                # STEP 20
ACTION: int2 = 5 
int2 = 11 : <type 'int'>
=> int2 = 5 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 21
ACTION: avl2.delete(int0) 
int0 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103492098> : <type 'instance'>
avl_REF2 = set([17, 19, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([17, 19, 13]) : <type 'set'>
==================================================
result = avl2.find(int1)                                                # STEP 22
ACTION: result = avl2.find(int1) 
int1 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103492098> : <type 'instance'>
avl_REF2 = set([17, 19, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl2.delete(int3)                                                       # STEP 23
ACTION: avl2.delete(int3) 
int3 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103492098> : <type 'instance'>
avl_REF2 = set([17, 19, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.delete(int0)                                                       # STEP 24
ACTION: avl2.delete(int0) 
int0 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103492098> : <type 'instance'>
avl_REF2 = set([17, 19, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int0 = 4                                                                # STEP 25
ACTION: int0 = 4 
int0 = 7 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
int3 = 8                                                                # STEP 26
ACTION: int3 = 8 
int3 = 12 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 27
ACTION: avl2.delete(int3) 
int3 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103492098> : <type 'instance'>
avl_REF2 = set([17, 19, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.insert(int0)                                                       # STEP 28
ACTION: avl2.insert(int0) 
int0 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103492098> : <type 'instance'>
avl_REF2 = set([17, 19, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([17, 19, 4, 13]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 29
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x103492098> : <type 'instance'>
avl_REF2 = set([17, 19, 4, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int0)                                                       # STEP 30
ACTION: avl2.insert(int0) 
int0 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103492098> : <type 'instance'>
avl_REF2 = set([17, 19, 4, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
int1 = 5                                                                # STEP 31
ACTION: int1 = 5 
int1 = 17 : <type 'int'>
=> int1 = 5 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 32
ACTION: avl2.insert(int2) 
int2 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103492098> : <type 'instance'>
avl_REF2 = set([17, 19, 4, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([17, 19, 4, 13, 5]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 33
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x103492098> : <type 'instance'>
avl_REF2 = set([17, 19, 4, 13, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int0)                                                       # STEP 34
ACTION: avl2.insert(int0) 
int0 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103492098> : <type 'instance'>
avl_REF2 = set([17, 19, 4, 13, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl2.insert(int0)                                                       # STEP 35
ACTION: avl2.insert(int0) 
int0 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103492098> : <type 'instance'>
avl_REF2 = set([17, 19, 4, 13, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl2.insert(int2)                                                       # STEP 36
ACTION: avl2.insert(int2) 
int2 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103492098> : <type 'instance'>
avl_REF2 = set([17, 19, 4, 13, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
int3 = 2                                                                # STEP 37
ACTION: int3 = 2 
int3 = 8 : <type 'int'>
=> int3 = 2 : <type 'int'>
==================================================
int0 = 16                                                               # STEP 38
ACTION: int0 = 16 
int0 = 4 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 39
ACTION: avl2.insert(int3) 
int3 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103492098> : <type 'instance'>
avl_REF2 = set([17, 19, 4, 13, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([2, 4, 5, 13, 17, 19]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 40
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x103492098> : <type 'instance'>
avl_REF2 = set([2, 4, 5, 13, 17, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int3 = 20                                                               # STEP 41
ACTION: int3 = 20 
int3 = 2 : <type 'int'>
=> int3 = 20 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 42
ACTION: avl2.delete(int0) 
int0 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103492098> : <type 'instance'>
avl_REF2 = set([2, 4, 5, 13, 17, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2 = avl.AVLTree()                                                    # STEP 43
ACTION: avl2 = avl.AVLTree() 
avl2 = <avlbug2.AVLTree instance at 0x103492098> : <type 'instance'>
avl_REF2 = set([2, 4, 5, 13, 17, 19]) : <type 'set'>
=> avl2 = <avlbug2.AVLTree instance at 0x103374d88> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int0 = 5                                                                # STEP 44
ACTION: int0 = 5 
int0 = 16 : <type 'int'>
=> int0 = 5 : <type 'int'>
==================================================
int2 = 18                                                               # STEP 45
ACTION: int2 = 18 
int2 = 5 : <type 'int'>
=> int2 = 18 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 46
ACTION: avl2.delete(int0) 
int0 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103374d88> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.insert(int2)                                                       # STEP 47
ACTION: avl2.insert(int2) 
int2 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103374d88> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([18]) : <type 'set'>
==================================================
result = avl2.find(int1)                                                # STEP 48
ACTION: result = avl2.find(int1) 
int1 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103374d88> : <type 'instance'>
avl_REF2 = set([18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl2.insert(int2)                                                       # STEP 49
ACTION: avl2.insert(int2) 
int2 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103374d88> : <type 'instance'>
avl_REF2 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl2.delete(int1)                                                       # STEP 50
ACTION: avl2.delete(int1) 
int1 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103374d88> : <type 'instance'>
avl_REF2 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int0)                                                       # STEP 51
ACTION: avl2.insert(int0) 
int0 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103374d88> : <type 'instance'>
avl_REF2 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([18, 5]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 52
ACTION: avl2.insert(int3) 
int3 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103374d88> : <type 'instance'>
avl_REF2 = set([18, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([18, 20, 5]) : <type 'set'>
==================================================
int0 = 1                                                                # STEP 53
ACTION: int0 = 1 
int0 = 5 : <type 'int'>
=> int0 = 1 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 54
ACTION: avl2.delete(int0) 
int0 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103374d88> : <type 'instance'>
avl_REF2 = set([18, 20, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
result = avl2.find(int2)                                                # STEP 55
ACTION: result = avl2.find(int2) 
int2 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103374d88> : <type 'instance'>
avl_REF2 = set([18, 20, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int2 = 20                                                               # STEP 56
ACTION: int2 = 20 
int2 = 18 : <type 'int'>
=> int2 = 20 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 57
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x103374d88> : <type 'instance'>
avl_REF2 = set([18, 20, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int3)                                                       # STEP 58
ACTION: avl2.insert(int3) 
int3 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103374d88> : <type 'instance'>
avl_REF2 = set([18, 20, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
avl2.insert(int1)                                                       # STEP 59
ACTION: avl2.insert(int1) 
int1 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103374d88> : <type 'instance'>
avl_REF2 = set([18, 20, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl2.insert(int1)                                                       # STEP 60
ACTION: avl2.insert(int1) 
int1 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103374d88> : <type 'instance'>
avl_REF2 = set([18, 20, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl2.insert(int2)                                                       # STEP 61
ACTION: avl2.insert(int2) 
int2 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103374d88> : <type 'instance'>
avl_REF2 = set([18, 20, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
result = avl2.find(int2)                                                # STEP 62
ACTION: result = avl2.find(int2) 
int2 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103374d88> : <type 'instance'>
avl_REF2 = set([18, 20, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int1 = 15                                                               # STEP 63
ACTION: int1 = 15 
int1 = 5 : <type 'int'>
=> int1 = 15 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 64
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x103374d88> : <type 'instance'>
avl_REF2 = set([18, 20, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int2)                                                       # STEP 65
ACTION: avl2.insert(int2) 
int2 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103374d88> : <type 'instance'>
avl_REF2 = set([18, 20, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl2.insert(int3)                                                       # STEP 66
ACTION: avl2.insert(int3) 
int3 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103374d88> : <type 'instance'>
avl_REF2 = set([18, 20, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
int0 = 8                                                                # STEP 67
ACTION: int0 = 8 
int0 = 1 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 68
ACTION: avl2.insert(int1) 
int1 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103374d88> : <type 'instance'>
avl_REF2 = set([18, 20, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([18, 20, 5, 15]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 69
ACTION: avl2.insert(int3) 
int3 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103374d88> : <type 'instance'>
avl_REF2 = set([18, 20, 5, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
avl2.insert(int2)                                                       # STEP 70
ACTION: avl2.insert(int2) 
int2 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103374d88> : <type 'instance'>
avl_REF2 = set([18, 20, 5, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl2.delete(int1)                                                       # STEP 71
ACTION: avl2.delete(int1) 
int1 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103374d88> : <type 'instance'>
avl_REF2 = set([18, 20, 5, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([18, 20, 5]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 72
ACTION: avl2.delete(int2) 
int2 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103374d88> : <type 'instance'>
avl_REF2 = set([18, 20, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([18, 5]) : <type 'set'>
==================================================
int2 = 8                                                                # STEP 73
ACTION: int2 = 8 
int2 = 20 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 74
ACTION: avl2.insert(int3) 
int3 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103374d88> : <type 'instance'>
avl_REF2 = set([18, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([18, 20, 5]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 75
ACTION: avl2.insert(int1) 
int1 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103374d88> : <type 'instance'>
avl_REF2 = set([18, 20, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([18, 20, 5, 15]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 76
ACTION: avl2.delete(int3) 
int3 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103374d88> : <type 'instance'>
avl_REF2 = set([18, 20, 5, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([18, 5, 15]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1037a2050>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
  12 [2:0]
-- < 10 [1:1]
---- < 5 [0:0] L
-- > 18 [1:0]
---- < 15 [0:0] L
---- > 20 [0:0] L
set([5, 10, 12, 15, 18, 20])
  14 [2:0]
-- < 7 [1:0]
---- < 4 [0:0] L
---- > 8 [0:0] L
-- > 19 [1:0]
---- < 17 [0:0] L
---- > 20 [0:0] L
set([4, 7, 8, 14, 17, 19, 20])
  17 [2:0]
-- < 7 [1:0]
---- < 1 [0:0] L
---- > 9 [0:0] L
-- > 18 [1:-1]
---- > 19 [0:0] L
set([1, 7, 9, 17, 18, 19])
  17 [3:1]
-- < 7 [2:-1]
---- < 1 [0:0] L
---- > 9 [1:-1]
------ > 14 [0:0] L
-- > 18 [1:-1]
---- > 19 [0:0] L
set([1, 7, 9, 14, 17, 18, 19])
TEST #3 STEP #87 (0:00:30.005623) Mon May  1 02:57:42 2017 [ 145 stmts 194 branches ]
  18 [2:0]
-- < 14 [1:0]
---- < 13 [0:0] L
---- > 17 [0:0] L
-- > 19 [1:-1]
---- > 20 [0:0] L
set([13, 14, 17, 18, 19, 20])
  18 [2:0]
-- < 14 [1:0]
---- < 13 [0:0] L
---- > 17 [0:0] L
-- > 19 [1:-1]
---- > 20 [0:0] L
set([13, 14, 17, 18, 19, 20])
  17 [3:1]
-- < 10 [2:0]
---- < 7 [1:0]
------ < 1 [0:0] L
------ > 9 [0:0] L
---- > 14 [1:1]
------ < 11 [0:0] L
-- > 18 [1:-1]
---- > 19 [0:0] L
set([1, 7, 9, 10, 11, 14, 17, 18, 19])
  17 [3:1]
-- < 10 [2:0]
---- < 7 [1:0]
------ < 1 [0:0] L
------ > 9 [0:0] L
---- > 14 [1:1]
------ < 11 [0:0] L
-- > 18 [1:-1]
---- > 19 [0:0] L
set([1, 7, 9, 10, 11, 14, 17, 18, 19])
  9 [2:0]
-- < 5 [1:-1]
---- > 7 [0:0] L
-- > 14 [1:0]
---- < 13 [0:0] L
---- > 18 [0:0] L
set([5, 7, 9, 13, 14, 18])
  17 [3:1]
-- < 13 [2:1]
---- < 5 [1:-1]
------ > 9 [0:0] L
---- > 14 [0:0] L
-- > 18 [1:-1]
---- > 20 [0:0] L
set([5, 9, 13, 14, 17, 18, 20])
  15 [2:0]
-- < 3 [1:0]
---- < 1 [0:0] L
---- > 14 [0:0] L
-- > 17 [1:-1]
---- > 20 [0:0] L
set([1, 3, 14, 15, 17, 20])
  15 [3:1]
-- < 3 [2:1]
---- < 1 [1:-1]
------ > 2 [0:0] L
---- > 14 [0:0] L
-- > 17 [1:-1]
---- > 20 [0:0] L
set([1, 2, 3, 14, 15, 17, 20])
  15 [3:1]
-- < 3 [2:1]
---- < 1 [1:-1]
------ > 2 [0:0] L
---- > 14 [0:0] L
-- > 17 [1:-1]
---- > 20 [0:0] L
set([1, 2, 3, 14, 15, 17, 20])
  15 [3:1]
-- < 3 [2:1]
---- < 1 [1:-1]
------ > 2 [0:0] L
---- > 14 [0:0] L
-- > 17 [1:-1]
---- > 20 [0:0] L
set([1, 2, 3, 14, 15, 17, 20])
  17 [3:1]
-- < 5 [2:0]
---- < 3 [1:1]
------ < 1 [0:0] L
---- > 13 [1:0]
------ < 9 [0:0] L
------ > 14 [0:0] L
-- > 19 [1:0]
---- < 18 [0:0] L
---- > 20 [0:0] L
set([1, 3, 5, 9, 13, 14, 17, 18, 19, 20])
  17 [3:1]
-- < 5 [2:0]
---- < 3 [1:1]
------ < 1 [0:0] L
---- > 13 [1:0]
------ < 9 [0:0] L
------ > 14 [0:0] L
-- > 19 [1:0]
---- < 18 [0:0] L
---- > 20 [0:0] L
set([1, 3, 5, 9, 13, 14, 17, 18, 19, 20])
  15 [3:1]
-- < 3 [2:0]
---- < 1 [1:-1]
------ > 2 [0:0] L
---- > 14 [1:1]
------ < 7 [0:0] L
-- > 17 [1:-1]
---- > 20 [0:0] L
set([1, 2, 3, 7, 14, 15, 17, 20])
  13 [3:0]
-- < 5 [2:0]
---- < 3 [1:1]
------ < 1 [0:0] L
---- > 9 [1:1]
------ < 6 [0:0] L
-- > 17 [2:-1]
---- < 14 [0:0] L
---- > 19 [1:0]
------ < 18 [0:0] L
------ > 20 [0:0] L
set([1, 3, 5, 6, 9, 13, 14, 17, 18, 19, 20])
  15 [3:1]
-- < 3 [2:0]
---- < 1 [1:-1]
------ > 2 [0:0] L
---- > 14 [1:1]
------ < 7 [0:0] L
-- > 17 [1:-1]
---- > 20 [0:0] L
set([1, 2, 3, 7, 14, 15, 17, 20])
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 24
STOPPING TESTING DUE TO TIMEOUT
7.98960701526 PERCENT COVERED
60.2252910137 TOTAL RUNTIME
7 EXECUTED
601 TOTAL TEST OPERATIONS
26.5197918415 TIME SPENT EXECUTING TEST OPERATIONS
0.0817794799805 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
26.7265763283 TIME SPENT CHECKING PROPERTIES
53.2463681698 TOTAL TIME SPENT RUNNING SUT
0.00391697883606 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int3 = 19                                                                # STEP 0
int2 = 11                                                                # STEP 1
int1 = 17                                                                # STEP 2
int0 = 13                                                                # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
avl2.insert(int0)                                                        # STEP 5
int0 = 14                                                                # STEP 6
avl2.delete(int3)                                                        # STEP 7
avl2.insert(int3)                                                        # STEP 8
avl2.insert(int3)                                                        # STEP 9
avl2.delete(int2)                                                       # STEP 10
avl2.delete(int1)                                                       # STEP 11
int3 = 12                                                               # STEP 12
result = avl2.find(int0)                                                # STEP 13
int0 = 7                                                                # STEP 14
avl2.delete(int0)                                                       # STEP 15
avl2.insert(int1)                                                       # STEP 16
avl2.delete(int0)                                                       # STEP 17
avl2.delete(int0)                                                       # STEP 18
avl2.insert(int0)                                                       # STEP 19
int2 = 5                                                                # STEP 20
avl2.delete(int0)                                                       # STEP 21
result = avl2.find(int1)                                                # STEP 22
avl2.delete(int3)                                                       # STEP 23
avl2.delete(int0)                                                       # STEP 24
int0 = 4                                                                # STEP 25
int3 = 8                                                                # STEP 26
avl2.delete(int3)                                                       # STEP 27
avl2.insert(int0)                                                       # STEP 28
result = avl2.inorder()                                                 # STEP 29
avl2.insert(int0)                                                       # STEP 30
int1 = 5                                                                # STEP 31
avl2.insert(int2)                                                       # STEP 32
result = avl2.inorder()                                                 # STEP 33
avl2.insert(int0)                                                       # STEP 34
avl2.insert(int0)                                                       # STEP 35
avl2.insert(int2)                                                       # STEP 36
int3 = 2                                                                # STEP 37
int0 = 16                                                               # STEP 38
avl2.insert(int3)                                                       # STEP 39
result = avl2.inorder()                                                 # STEP 40
int3 = 20                                                               # STEP 41
avl2.delete(int0)                                                       # STEP 42
avl2 = avl.AVLTree()                                                    # STEP 43
int0 = 5                                                                # STEP 44
int2 = 18                                                               # STEP 45
avl2.delete(int0)                                                       # STEP 46
avl2.insert(int2)                                                       # STEP 47
result = avl2.find(int1)                                                # STEP 48
avl2.insert(int2)                                                       # STEP 49
avl2.delete(int1)                                                       # STEP 50
avl2.insert(int0)                                                       # STEP 51
avl2.insert(int3)                                                       # STEP 52
int0 = 1                                                                # STEP 53
avl2.delete(int0)                                                       # STEP 54
result = avl2.find(int2)                                                # STEP 55
int2 = 20                                                               # STEP 56
result = avl2.inorder()                                                 # STEP 57
avl2.insert(int3)                                                       # STEP 58
avl2.insert(int1)                                                       # STEP 59
avl2.insert(int1)                                                       # STEP 60
avl2.insert(int2)                                                       # STEP 61
result = avl2.find(int2)                                                # STEP 62
int1 = 15                                                               # STEP 63
result = avl2.inorder()                                                 # STEP 64
avl2.insert(int2)                                                       # STEP 65
avl2.insert(int3)                                                       # STEP 66
int0 = 8                                                                # STEP 67
avl2.insert(int1)                                                       # STEP 68
avl2.insert(int3)                                                       # STEP 69
avl2.insert(int2)                                                       # STEP 70
avl2.delete(int1)                                                       # STEP 71
avl2.delete(int2)                                                       # STEP 72
int2 = 8                                                                # STEP 73
avl2.insert(int3)                                                       # STEP 74
avl2.insert(int1)                                                       # STEP 75
avl2.delete(int3)                                                       # STEP 76
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1037a2050>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
194 BRANCHES COVERED
145 STATEMENTS COVERED

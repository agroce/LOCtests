Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.14006.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
TEST #3 STEP #92 (0:00:30.014071) Sun Apr 30 03:06:06 2017 [ 147 stmts 193 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103041248>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
Original test has 60 steps

SAVING TEST AS failure.14006.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 10                                                                # STEP 0
ACTION: int2 = 10 
int2 = None : <type 'NoneType'>
=> int2 = 10 : <type 'int'>
==================================================
int1 = 6                                                                 # STEP 1
ACTION: int1 = 6 
int1 = None : <type 'NoneType'>
=> int1 = 6 : <type 'int'>
==================================================
int0 = 18                                                                # STEP 2
ACTION: int0 = 18 
int0 = None : <type 'NoneType'>
=> int0 = 18 : <type 'int'>
==================================================
int3 = 8                                                                 # STEP 3
ACTION: int3 = 8 
int3 = None : <type 'NoneType'>
=> int3 = 8 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 4
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x1033b99e0> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.delete(int3)                                                        # STEP 5
ACTION: avl0.delete(int3) 
int3 = 8 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1033b99e0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.insert(int2)                                                        # STEP 6
ACTION: avl0.insert(int2) 
int2 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1033b99e0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([10]) : <type 'set'>
==================================================
int2 = 1                                                                 # STEP 7
ACTION: int2 = 1 
int2 = 10 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
avl0.insert(int2)                                                        # STEP 8
ACTION: avl0.insert(int2) 
int2 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1033b99e0> : <type 'instance'>
avl_REF0 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([1, 10]) : <type 'set'>
==================================================
int2 = 10                                                                # STEP 9
ACTION: int2 = 10 
int2 = 1 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
int3 = 14                                                               # STEP 10
ACTION: int3 = 14 
int3 = 8 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 11
ACTION: avl0.insert(int0) 
int0 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1033b99e0> : <type 'instance'>
avl_REF0 = set([1, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([1, 10, 18]) : <type 'set'>
==================================================
int0 = 15                                                               # STEP 12
ACTION: int0 = 15 
int0 = 18 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 13
ACTION: avl0.delete(int3) 
int3 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1033b99e0> : <type 'instance'>
avl_REF0 = set([1, 10, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.insert(int3)                                                       # STEP 14
ACTION: avl0.insert(int3) 
int3 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1033b99e0> : <type 'instance'>
avl_REF0 = set([1, 10, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([1, 10, 18, 14]) : <type 'set'>
==================================================
result = avl0.find(int1)                                                # STEP 15
ACTION: result = avl0.find(int1) 
int1 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1033b99e0> : <type 'instance'>
avl_REF0 = set([1, 10, 18, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
int1 = 10                                                               # STEP 16
ACTION: int1 = 10 
int1 = 6 : <type 'int'>
=> int1 = 10 : <type 'int'>
==================================================
result = avl0.find(int0)                                                # STEP 17
ACTION: result = avl0.find(int0) 
int0 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1033b99e0> : <type 'instance'>
avl_REF0 = set([1, 10, 18, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
int0 = 12                                                               # STEP 18
ACTION: int0 = 12 
int0 = 15 : <type 'int'>
=> int0 = 12 : <type 'int'>
==================================================
result = avl0.find(int3)                                                # STEP 19
ACTION: result = avl0.find(int3) 
int3 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1033b99e0> : <type 'instance'>
avl_REF0 = set([1, 10, 18, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
result = avl0.find(int0)                                                # STEP 20
ACTION: result = avl0.find(int0) 
int0 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1033b99e0> : <type 'instance'>
avl_REF0 = set([1, 10, 18, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
int3 = 19                                                               # STEP 21
ACTION: int3 = 19 
int3 = 14 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
int0 = 15                                                               # STEP 22
ACTION: int0 = 15 
int0 = 12 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
result = avl0.find(int2)                                                # STEP 23
ACTION: result = avl0.find(int2) 
int2 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1033b99e0> : <type 'instance'>
avl_REF0 = set([1, 10, 18, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
int2 = 4                                                                # STEP 24
ACTION: int2 = 4 
int2 = 10 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 25
ACTION: avl0.insert(int0) 
int0 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1033b99e0> : <type 'instance'>
avl_REF0 = set([1, 10, 18, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([1, 10, 18, 14, 15]) : <type 'set'>
==================================================
int0 = 19                                                               # STEP 26
ACTION: int0 = 19 
int0 = 15 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 27
ACTION: avl0.delete(int1) 
int1 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1033b99e0> : <type 'instance'>
avl_REF0 = set([1, 10, 18, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([1, 18, 14, 15]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 28
ACTION: avl0.insert(int2) 
int2 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1033b99e0> : <type 'instance'>
avl_REF0 = set([1, 18, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([1, 4, 14, 15, 18]) : <type 'set'>
==================================================
int1 = 18                                                               # STEP 29
ACTION: int1 = 18 
int1 = 10 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
result = avl0.find(int0)                                                # STEP 30
ACTION: result = avl0.find(int0) 
int0 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1033b99e0> : <type 'instance'>
avl_REF0 = set([1, 4, 14, 15, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
int2 = 8                                                                # STEP 31
ACTION: int2 = 8 
int2 = 4 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
int0 = 14                                                               # STEP 32
ACTION: int0 = 14 
int0 = 19 : <type 'int'>
=> int0 = 14 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 33
ACTION: avl0.delete(int3) 
int3 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1033b99e0> : <type 'instance'>
avl_REF0 = set([1, 4, 14, 15, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.insert(int2)                                                       # STEP 34
ACTION: avl0.insert(int2) 
int2 = 8 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1033b99e0> : <type 'instance'>
avl_REF0 = set([1, 4, 14, 15, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([1, 4, 8, 14, 15, 18]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 35
ACTION: avl0.insert(int1) 
int1 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1033b99e0> : <type 'instance'>
avl_REF0 = set([1, 4, 8, 14, 15, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
int2 = 5                                                                # STEP 36
ACTION: int2 = 5 
int2 = 8 : <type 'int'>
=> int2 = 5 : <type 'int'>
==================================================
int3 = 10                                                               # STEP 37
ACTION: int3 = 10 
int3 = 19 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
int1 = 16                                                               # STEP 38
ACTION: int1 = 16 
int1 = 18 : <type 'int'>
=> int1 = 16 : <type 'int'>
==================================================
result = avl0.find(int2)                                                # STEP 39
ACTION: result = avl0.find(int2) 
int2 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1033b99e0> : <type 'instance'>
avl_REF0 = set([1, 4, 8, 14, 15, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
result = avl0.find(int0)                                                # STEP 40
ACTION: result = avl0.find(int0) 
int0 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1033b99e0> : <type 'instance'>
avl_REF0 = set([1, 4, 8, 14, 15, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
avl0.delete(int3)                                                       # STEP 41
ACTION: avl0.delete(int3) 
int3 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1033b99e0> : <type 'instance'>
avl_REF0 = set([1, 4, 8, 14, 15, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int0 = 10                                                               # STEP 42
ACTION: int0 = 10 
int0 = 14 : <type 'int'>
=> int0 = 10 : <type 'int'>
==================================================
int3 = 13                                                               # STEP 43
ACTION: int3 = 13 
int3 = 10 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
int2 = 14                                                               # STEP 44
ACTION: int2 = 14 
int2 = 5 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 45
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x10338e248> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
result = avl1.find(int3)                                                # STEP 46
ACTION: result = avl1.find(int3) 
int3 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10338e248> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
int3 = 15                                                               # STEP 47
ACTION: int3 = 15 
int3 = 13 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
result = avl1.find(int1)                                                # STEP 48
ACTION: result = avl1.find(int1) 
int1 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10338e248> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl0.insert(int3)                                                       # STEP 49
ACTION: avl0.insert(int3) 
int3 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1033b99e0> : <type 'instance'>
avl_REF0 = set([1, 4, 8, 14, 15, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
int3 = 17                                                               # STEP 50
ACTION: int3 = 17 
int3 = 15 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 51
ACTION: avl1.delete(int0) 
int0 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10338e248> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl0.delete(int0)                                                       # STEP 52
ACTION: avl0.delete(int0) 
int0 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1033b99e0> : <type 'instance'>
avl_REF0 = set([1, 4, 8, 14, 15, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int1 = 11                                                               # STEP 53
ACTION: int1 = 11 
int1 = 16 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
result = avl1.find(int2)                                                # STEP 54
ACTION: result = avl1.find(int2) 
int2 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10338e248> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl0.insert(int1)                                                       # STEP 55
ACTION: avl0.insert(int1) 
int1 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1033b99e0> : <type 'instance'>
avl_REF0 = set([1, 4, 8, 14, 15, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([1, 4, 8, 11, 14, 15, 18]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 56
ACTION: avl0.insert(int0) 
int0 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1033b99e0> : <type 'instance'>
avl_REF0 = set([1, 4, 8, 11, 14, 15, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([1, 4, 8, 10, 11, 14, 15, 18]) : <type 'set'>
==================================================
int0 = 1                                                                # STEP 57
ACTION: int0 = 1 
int0 = 10 : <type 'int'>
=> int0 = 1 : <type 'int'>
==================================================
result = avl1.find(int0)                                                # STEP 58
ACTION: result = avl1.find(int0) 
int0 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10338e248> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl0.delete(int0)                                                       # STEP 59
ACTION: avl0.delete(int0) 
int0 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1033b99e0> : <type 'instance'>
avl_REF0 = set([1, 4, 8, 10, 11, 14, 15, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([4, 8, 10, 11, 14, 15, 18]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10338ee18>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
  15 [3:1]
-- < 11 [2:1]
---- < 10 [1:1]
------ < 1 [0:0] L
---- > 14 [0:0] L
-- > 16 [1:-1]
---- > 18 [0:0] L
set([1, 10, 11, 14, 15, 16, 18])
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 61
STOPPING TESTING DUE TO TIMEOUT
8.7057265806 PERCENT COVERED
60.3145370483 TOTAL RUNTIME
6 EXECUTED
521 TOTAL TEST OPERATIONS
26.805535078 TIME SPENT EXECUTING TEST OPERATIONS
0.0214064121246 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
27.0225541592 TIME SPENT CHECKING PROPERTIES
53.8280892372 TOTAL TIME SPENT RUNNING SUT
0.00467610359192 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int2 = 10                                                                # STEP 0
int1 = 6                                                                 # STEP 1
int0 = 18                                                                # STEP 2
int3 = 8                                                                 # STEP 3
avl0 = avl.AVLTree()                                                     # STEP 4
avl0.delete(int3)                                                        # STEP 5
avl0.insert(int2)                                                        # STEP 6
int2 = 1                                                                 # STEP 7
avl0.insert(int2)                                                        # STEP 8
int2 = 10                                                                # STEP 9
int3 = 14                                                               # STEP 10
avl0.insert(int0)                                                       # STEP 11
int0 = 15                                                               # STEP 12
avl0.delete(int3)                                                       # STEP 13
avl0.insert(int3)                                                       # STEP 14
result = avl0.find(int1)                                                # STEP 15
int1 = 10                                                               # STEP 16
result = avl0.find(int0)                                                # STEP 17
int0 = 12                                                               # STEP 18
result = avl0.find(int3)                                                # STEP 19
result = avl0.find(int0)                                                # STEP 20
int3 = 19                                                               # STEP 21
int0 = 15                                                               # STEP 22
result = avl0.find(int2)                                                # STEP 23
int2 = 4                                                                # STEP 24
avl0.insert(int0)                                                       # STEP 25
int0 = 19                                                               # STEP 26
avl0.delete(int1)                                                       # STEP 27
avl0.insert(int2)                                                       # STEP 28
int1 = 18                                                               # STEP 29
result = avl0.find(int0)                                                # STEP 30
int2 = 8                                                                # STEP 31
int0 = 14                                                               # STEP 32
avl0.delete(int3)                                                       # STEP 33
avl0.insert(int2)                                                       # STEP 34
avl0.insert(int1)                                                       # STEP 35
int2 = 5                                                                # STEP 36
int3 = 10                                                               # STEP 37
int1 = 16                                                               # STEP 38
result = avl0.find(int2)                                                # STEP 39
result = avl0.find(int0)                                                # STEP 40
avl0.delete(int3)                                                       # STEP 41
int0 = 10                                                               # STEP 42
int3 = 13                                                               # STEP 43
int2 = 14                                                               # STEP 44
avl1 = avl.AVLTree()                                                    # STEP 45
result = avl1.find(int3)                                                # STEP 46
int3 = 15                                                               # STEP 47
result = avl1.find(int1)                                                # STEP 48
avl0.insert(int3)                                                       # STEP 49
int3 = 17                                                               # STEP 50
avl1.delete(int0)                                                       # STEP 51
avl0.delete(int0)                                                       # STEP 52
int1 = 11                                                               # STEP 53
result = avl1.find(int2)                                                # STEP 54
avl0.insert(int1)                                                       # STEP 55
avl0.insert(int0)                                                       # STEP 56
int0 = 1                                                                # STEP 57
result = avl1.find(int0)                                                # STEP 58
avl0.delete(int0)                                                       # STEP 59
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10338ee18>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
218 BRANCHES COVERED
163 STATEMENTS COVERED

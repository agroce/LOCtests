Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.99456.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
TEST #5 STEP #9 (0:00:30.008146) Fri Apr 28 04:01:06 2017 [ 127 stmts 170 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10376e830>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 98 steps

SAVING TEST AS failure.99456.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 11                                                                # STEP 0
ACTION: int3 = 11 
int3 = None : <type 'NoneType'>
=> int3 = 11 : <type 'int'>
==================================================
int0 = 16                                                                # STEP 1
ACTION: int0 = 16 
int0 = None : <type 'NoneType'>
=> int0 = 16 : <type 'int'>
==================================================
int1 = 16                                                                # STEP 2
ACTION: int1 = 16 
int1 = None : <type 'NoneType'>
=> int1 = 16 : <type 'int'>
==================================================
int2 = 3                                                                 # STEP 3
ACTION: int2 = 3 
int2 = None : <type 'NoneType'>
=> int2 = 3 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x103111098> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int3)                                                        # STEP 5
ACTION: avl2.insert(int3) 
int3 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103111098> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([11]) : <type 'set'>
==================================================
int3 = 20                                                                # STEP 6
ACTION: int3 = 20 
int3 = 11 : <type 'int'>
=> int3 = 20 : <type 'int'>
==================================================
avl2.insert(int1)                                                        # STEP 7
ACTION: avl2.insert(int1) 
int1 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103111098> : <type 'instance'>
avl_REF2 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([16, 11]) : <type 'set'>
==================================================
int1 = 12                                                                # STEP 8
ACTION: int1 = 12 
int1 = 16 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
result = avl2.inorder()                                                  # STEP 9
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x103111098> : <type 'instance'>
avl_REF2 = set([16, 11]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl2.inorder()                                                 # STEP 10
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x103111098> : <type 'instance'>
avl_REF2 = set([16, 11]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl1 = avl.AVLTree()                                                    # STEP 11
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x1036104d0> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1 == avl2                                                            # STEP 12
ACTION: avl1 == avl2 
avl1 = <avl.AVLTree instance at 0x1036104d0> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x103111098> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
avl_REF2 = set([16, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
avl1.insert(int3)                                                       # STEP 13
ACTION: avl1.insert(int3) 
int3 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1036104d0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([20]) : <type 'set'>
==================================================
result = avl1.find(int2)                                                # STEP 14
ACTION: result = avl1.find(int2) 
int2 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1036104d0> : <type 'instance'>
avl_REF1 = set([20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int3 = 13                                                               # STEP 15
ACTION: int3 = 13 
int3 = 20 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 16
ACTION: avl2.delete(int1) 
int1 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103111098> : <type 'instance'>
avl_REF2 = set([16, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int2 = 1                                                                # STEP 17
ACTION: int2 = 1 
int2 = 3 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 18
ACTION: avl1.delete(int1) 
int1 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1036104d0> : <type 'instance'>
avl_REF1 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1 == avl1                                                            # STEP 19
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x1036104d0> : <type 'instance'>
avl_REF1 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
int1 = 19                                                               # STEP 20
ACTION: int1 = 19 
int1 = 12 : <type 'int'>
=> int1 = 19 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 21
ACTION: avl2.delete(int3) 
int3 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103111098> : <type 'instance'>
avl_REF2 = set([16, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl1.insert(int2)                                                       # STEP 22
ACTION: avl1.insert(int2) 
int2 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1036104d0> : <type 'instance'>
avl_REF1 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([1, 20]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 23
ACTION: avl2.insert(int2) 
int2 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103111098> : <type 'instance'>
avl_REF2 = set([16, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([16, 1, 11]) : <type 'set'>
==================================================
result = avl1.find(int3)                                                # STEP 24
ACTION: result = avl1.find(int3) 
int3 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1036104d0> : <type 'instance'>
avl_REF1 = set([1, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl2.insert(int1)                                                       # STEP 25
ACTION: avl2.insert(int1) 
int1 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103111098> : <type 'instance'>
avl_REF2 = set([16, 1, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([16, 1, 11, 19]) : <type 'set'>
==================================================
int3 = 5                                                                # STEP 26
ACTION: int3 = 5 
int3 = 13 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 27
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x1035f1200> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 28
ACTION: avl2.delete(int3) 
int3 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103111098> : <type 'instance'>
avl_REF2 = set([16, 1, 11, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl1 == avl1                                                            # STEP 29
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x1036104d0> : <type 'instance'>
avl_REF1 = set([1, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
result = avl1.inorder()                                                 # STEP 30
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1036104d0> : <type 'instance'>
avl_REF1 = set([1, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int1 = 15                                                               # STEP 31
ACTION: int1 = 15 
int1 = 19 : <type 'int'>
=> int1 = 15 : <type 'int'>
==================================================
int3 = 17                                                               # STEP 32
ACTION: int3 = 17 
int3 = 5 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
int2 = 15                                                               # STEP 33
ACTION: int2 = 15 
int2 = 1 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 34
ACTION: avl0.delete(int0) 
int0 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1035f1200> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
result = avl0.find(int1)                                                # STEP 35
ACTION: result = avl0.find(int1) 
int1 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1035f1200> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl2.insert(int0)                                                       # STEP 36
ACTION: avl2.insert(int0) 
int0 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103111098> : <type 'instance'>
avl_REF2 = set([16, 1, 11, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl2.insert(int2)                                                       # STEP 37
ACTION: avl2.insert(int2) 
int2 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103111098> : <type 'instance'>
avl_REF2 = set([16, 1, 11, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([16, 1, 11, 19, 15]) : <type 'set'>
==================================================
int2 = 12                                                               # STEP 38
ACTION: int2 = 12 
int2 = 15 : <type 'int'>
=> int2 = 12 : <type 'int'>
==================================================
result = avl2.find(int3)                                                # STEP 39
ACTION: result = avl2.find(int3) 
int3 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103111098> : <type 'instance'>
avl_REF2 = set([16, 1, 11, 19, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
int1 = 15                                                               # STEP 40
ACTION: int1 = 15 
int1 = 15 : <type 'int'>
==================================================
int3 = 6                                                                # STEP 41
ACTION: int3 = 6 
int3 = 17 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
int0 = 3                                                                # STEP 42
ACTION: int0 = 3 
int0 = 16 : <type 'int'>
=> int0 = 3 : <type 'int'>
==================================================
result = avl1.find(int3)                                                # STEP 43
ACTION: result = avl1.find(int3) 
int3 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1036104d0> : <type 'instance'>
avl_REF1 = set([1, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
int3 = 17                                                               # STEP 44
ACTION: int3 = 17 
int3 = 6 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 45
ACTION: avl1.insert(int2) 
int2 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1036104d0> : <type 'instance'>
avl_REF1 = set([1, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([1, 20, 12]) : <type 'set'>
==================================================
int2 = 13                                                               # STEP 46
ACTION: int2 = 13 
int2 = 12 : <type 'int'>
=> int2 = 13 : <type 'int'>
==================================================
avl1 == avl0                                                            # STEP 47
ACTION: avl1 == avl0 
avl1 = <avl.AVLTree instance at 0x1036104d0> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x1035f1200> : <type 'instance'>
avl_REF1 = set([1, 20, 12]) : <type 'set'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
avl1.insert(int1)                                                       # STEP 48
ACTION: avl1.insert(int1) 
int1 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1036104d0> : <type 'instance'>
avl_REF1 = set([1, 20, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([1, 20, 12, 15]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 49
ACTION: avl2.delete(int1) 
int1 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103111098> : <type 'instance'>
avl_REF2 = set([16, 1, 11, 19, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([16, 1, 11, 19]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 50
ACTION: avl1.delete(int1) 
int1 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1036104d0> : <type 'instance'>
avl_REF1 = set([1, 20, 12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([1, 20, 12]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 51
ACTION: avl0.delete(int1) 
int1 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1035f1200> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.insert(int1)                                                       # STEP 52
ACTION: avl0.insert(int1) 
int1 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1035f1200> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([15]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 53
ACTION: avl2.insert(int2) 
int2 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103111098> : <type 'instance'>
avl_REF2 = set([16, 1, 11, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([1, 11, 13, 16, 19]) : <type 'set'>
==================================================
avl2 == avl0                                                            # STEP 54
ACTION: avl2 == avl0 
avl2 = <avl.AVLTree instance at 0x103111098> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x1035f1200> : <type 'instance'>
avl_REF2 = set([1, 11, 13, 16, 19]) : <type 'set'>
avl_REF0 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF0 
==================================================
int1 = 10                                                               # STEP 55
ACTION: int1 = 10 
int1 = 15 : <type 'int'>
=> int1 = 10 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 56
ACTION: avl0.delete(int2) 
int2 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1035f1200> : <type 'instance'>
avl_REF0 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int2 = 11                                                               # STEP 57
ACTION: int2 = 11 
int2 = 13 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 58
ACTION: avl2.delete(int1) 
int1 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103111098> : <type 'instance'>
avl_REF2 = set([1, 11, 13, 16, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
result = avl2.find(int2)                                                # STEP 59
ACTION: result = avl2.find(int2) 
int2 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103111098> : <type 'instance'>
avl_REF2 = set([1, 11, 13, 16, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int1 = 13                                                               # STEP 60
ACTION: int1 = 13 
int1 = 10 : <type 'int'>
=> int1 = 13 : <type 'int'>
==================================================
int2 = 10                                                               # STEP 61
ACTION: int2 = 10 
int2 = 11 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 62
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x103111098> : <type 'instance'>
avl_REF2 = set([1, 11, 13, 16, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int2)                                                       # STEP 63
ACTION: avl2.insert(int2) 
int2 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103111098> : <type 'instance'>
avl_REF2 = set([1, 11, 13, 16, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([1, 10, 11, 13, 16, 19]) : <type 'set'>
==================================================
avl1 == avl2                                                            # STEP 64
ACTION: avl1 == avl2 
avl1 = <avl.AVLTree instance at 0x1036104d0> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x103111098> : <type 'instance'>
avl_REF1 = set([1, 20, 12]) : <type 'set'>
avl_REF2 = set([1, 10, 11, 13, 16, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
avl1 == avl0                                                            # STEP 65
ACTION: avl1 == avl0 
avl1 = <avl.AVLTree instance at 0x1036104d0> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x1035f1200> : <type 'instance'>
avl_REF1 = set([1, 20, 12]) : <type 'set'>
avl_REF0 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
int2 = 3                                                                # STEP 66
ACTION: int2 = 3 
int2 = 10 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
result = avl1.find(int3)                                                # STEP 67
ACTION: result = avl1.find(int3) 
int3 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1036104d0> : <type 'instance'>
avl_REF1 = set([1, 20, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
result = avl1.find(int0)                                                # STEP 68
ACTION: result = avl1.find(int0) 
int0 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1036104d0> : <type 'instance'>
avl_REF1 = set([1, 20, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl0.delete(int1)                                                       # STEP 69
ACTION: avl0.delete(int1) 
int1 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1035f1200> : <type 'instance'>
avl_REF0 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
result = avl0.find(int1)                                                # STEP 70
ACTION: result = avl0.find(int1) 
int1 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1035f1200> : <type 'instance'>
avl_REF0 = set([15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
int1 = 2                                                                # STEP 71
ACTION: int1 = 2 
int1 = 13 : <type 'int'>
=> int1 = 2 : <type 'int'>
==================================================
result = avl2.find(int1)                                                # STEP 72
ACTION: result = avl2.find(int1) 
int1 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103111098> : <type 'instance'>
avl_REF2 = set([1, 10, 11, 13, 16, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl0.delete(int2)                                                       # STEP 73
ACTION: avl0.delete(int2) 
int2 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1035f1200> : <type 'instance'>
avl_REF0 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int3 = 12                                                               # STEP 74
ACTION: int3 = 12 
int3 = 17 : <type 'int'>
=> int3 = 12 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 75
ACTION: avl1.insert(int0) 
int0 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1036104d0> : <type 'instance'>
avl_REF1 = set([1, 20, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([1, 3, 20, 12]) : <type 'set'>
==================================================
int2 = 13                                                               # STEP 76
ACTION: int2 = 13 
int2 = 3 : <type 'int'>
=> int2 = 13 : <type 'int'>
==================================================
result = avl2.find(int0)                                                # STEP 77
ACTION: result = avl2.find(int0) 
int0 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103111098> : <type 'instance'>
avl_REF2 = set([1, 10, 11, 13, 16, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl1.insert(int1)                                                       # STEP 78
ACTION: avl1.insert(int1) 
int1 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1036104d0> : <type 'instance'>
avl_REF1 = set([1, 3, 20, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([1, 2, 3, 12, 20]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 79
ACTION: avl1.insert(int1) 
int1 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1036104d0> : <type 'instance'>
avl_REF1 = set([1, 2, 3, 12, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl1.insert(int0)                                                       # STEP 80
ACTION: avl1.insert(int0) 
int0 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1036104d0> : <type 'instance'>
avl_REF1 = set([1, 2, 3, 12, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl0.delete(int1)                                                       # STEP 81
ACTION: avl0.delete(int1) 
int1 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1035f1200> : <type 'instance'>
avl_REF0 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl2.delete(int0)                                                       # STEP 82
ACTION: avl2.delete(int0) 
int0 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103111098> : <type 'instance'>
avl_REF2 = set([1, 10, 11, 13, 16, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int0 = 12                                                               # STEP 83
ACTION: int0 = 12 
int0 = 3 : <type 'int'>
=> int0 = 12 : <type 'int'>
==================================================
int1 = 10                                                               # STEP 84
ACTION: int1 = 10 
int1 = 2 : <type 'int'>
=> int1 = 10 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 85
ACTION: avl2.insert(int1) 
int1 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103111098> : <type 'instance'>
avl_REF2 = set([1, 10, 11, 13, 16, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl2.insert(int0)                                                       # STEP 86
ACTION: avl2.insert(int0) 
int0 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103111098> : <type 'instance'>
avl_REF2 = set([1, 10, 11, 13, 16, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([1, 10, 11, 12, 13, 16, 19]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 87
ACTION: avl0.delete(int0) 
int0 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1035f1200> : <type 'instance'>
avl_REF0 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
result = avl0.find(int3)                                                # STEP 88
ACTION: result = avl0.find(int3) 
int3 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1035f1200> : <type 'instance'>
avl_REF0 = set([15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
result = avl0.find(int0)                                                # STEP 89
ACTION: result = avl0.find(int0) 
int0 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1035f1200> : <type 'instance'>
avl_REF0 = set([15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
result = avl0.inorder()                                                 # STEP 90
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x1035f1200> : <type 'instance'>
avl_REF0 = set([15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl2 = avl.AVLTree()                                                    # STEP 91
ACTION: avl2 = avl.AVLTree() 
avl2 = <avl.AVLTree instance at 0x103111098> : <type 'instance'>
avl_REF2 = set([1, 10, 11, 12, 13, 16, 19]) : <type 'set'>
=> avl2 = <avl.AVLTree instance at 0x1037c23f8> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int1 = 10                                                               # STEP 92
ACTION: int1 = 10 
int1 = 10 : <type 'int'>
==================================================
result = avl2.find(int1)                                                # STEP 93
ACTION: result = avl2.find(int1) 
int1 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1037c23f8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl2.insert(int0)                                                       # STEP 94
ACTION: avl2.insert(int0) 
int0 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1037c23f8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([12]) : <type 'set'>
==================================================
result = avl0.find(int0)                                                # STEP 95
ACTION: result = avl0.find(int0) 
int0 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1035f1200> : <type 'instance'>
avl_REF0 = set([15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
int1 = 2                                                                # STEP 96
ACTION: int1 = 2 
int1 = 10 : <type 'int'>
=> int1 = 2 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 97
ACTION: avl1.delete(int3) 
int3 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1036104d0> : <type 'instance'>
avl_REF1 = set([1, 2, 3, 12, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([1, 2, 3, 20]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1037af320>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 2
STOPPING TESTING DUE TO TIMEOUT
8.04207668816 PERCENT COVERED
60.1707909107 TOTAL RUNTIME
8 EXECUTED
700 TOTAL TEST OPERATIONS
26.0505132675 TIME SPENT EXECUTING TEST OPERATIONS
0.0229463577271 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
26.1740748882 TIME SPENT CHECKING PROPERTIES
52.2245881557 TOTAL TIME SPENT RUNNING SUT
0.0050060749054 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int3 = 11                                                                # STEP 0
int0 = 16                                                                # STEP 1
int1 = 16                                                                # STEP 2
int2 = 3                                                                 # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
avl2.insert(int3)                                                        # STEP 5
int3 = 20                                                                # STEP 6
avl2.insert(int1)                                                        # STEP 7
int1 = 12                                                                # STEP 8
result = avl2.inorder()                                                  # STEP 9
result = avl2.inorder()                                                 # STEP 10
avl1 = avl.AVLTree()                                                    # STEP 11
avl1 == avl2                                                            # STEP 12
avl1.insert(int3)                                                       # STEP 13
result = avl1.find(int2)                                                # STEP 14
int3 = 13                                                               # STEP 15
avl2.delete(int1)                                                       # STEP 16
int2 = 1                                                                # STEP 17
avl1.delete(int1)                                                       # STEP 18
avl1 == avl1                                                            # STEP 19
int1 = 19                                                               # STEP 20
avl2.delete(int3)                                                       # STEP 21
avl1.insert(int2)                                                       # STEP 22
avl2.insert(int2)                                                       # STEP 23
result = avl1.find(int3)                                                # STEP 24
avl2.insert(int1)                                                       # STEP 25
int3 = 5                                                                # STEP 26
avl0 = avl.AVLTree()                                                    # STEP 27
avl2.delete(int3)                                                       # STEP 28
avl1 == avl1                                                            # STEP 29
result = avl1.inorder()                                                 # STEP 30
int1 = 15                                                               # STEP 31
int3 = 17                                                               # STEP 32
int2 = 15                                                               # STEP 33
avl0.delete(int0)                                                       # STEP 34
result = avl0.find(int1)                                                # STEP 35
avl2.insert(int0)                                                       # STEP 36
avl2.insert(int2)                                                       # STEP 37
int2 = 12                                                               # STEP 38
result = avl2.find(int3)                                                # STEP 39
int1 = 15                                                               # STEP 40
int3 = 6                                                                # STEP 41
int0 = 3                                                                # STEP 42
result = avl1.find(int3)                                                # STEP 43
int3 = 17                                                               # STEP 44
avl1.insert(int2)                                                       # STEP 45
int2 = 13                                                               # STEP 46
avl1 == avl0                                                            # STEP 47
avl1.insert(int1)                                                       # STEP 48
avl2.delete(int1)                                                       # STEP 49
avl1.delete(int1)                                                       # STEP 50
avl0.delete(int1)                                                       # STEP 51
avl0.insert(int1)                                                       # STEP 52
avl2.insert(int2)                                                       # STEP 53
avl2 == avl0                                                            # STEP 54
int1 = 10                                                               # STEP 55
avl0.delete(int2)                                                       # STEP 56
int2 = 11                                                               # STEP 57
avl2.delete(int1)                                                       # STEP 58
result = avl2.find(int2)                                                # STEP 59
int1 = 13                                                               # STEP 60
int2 = 10                                                               # STEP 61
result = avl2.inorder()                                                 # STEP 62
avl2.insert(int2)                                                       # STEP 63
avl1 == avl2                                                            # STEP 64
avl1 == avl0                                                            # STEP 65
int2 = 3                                                                # STEP 66
result = avl1.find(int3)                                                # STEP 67
result = avl1.find(int0)                                                # STEP 68
avl0.delete(int1)                                                       # STEP 69
result = avl0.find(int1)                                                # STEP 70
int1 = 2                                                                # STEP 71
result = avl2.find(int1)                                                # STEP 72
avl0.delete(int2)                                                       # STEP 73
int3 = 12                                                               # STEP 74
avl1.insert(int0)                                                       # STEP 75
int2 = 13                                                               # STEP 76
result = avl2.find(int0)                                                # STEP 77
avl1.insert(int1)                                                       # STEP 78
avl1.insert(int1)                                                       # STEP 79
avl1.insert(int0)                                                       # STEP 80
avl0.delete(int1)                                                       # STEP 81
avl2.delete(int0)                                                       # STEP 82
int0 = 12                                                               # STEP 83
int1 = 10                                                               # STEP 84
avl2.insert(int1)                                                       # STEP 85
avl2.insert(int0)                                                       # STEP 86
avl0.delete(int0)                                                       # STEP 87
result = avl0.find(int3)                                                # STEP 88
result = avl0.find(int0)                                                # STEP 89
result = avl0.inorder()                                                 # STEP 90
avl2 = avl.AVLTree()                                                    # STEP 91
int1 = 10                                                               # STEP 92
result = avl2.find(int1)                                                # STEP 93
avl2.insert(int0)                                                       # STEP 94
result = avl0.find(int0)                                                # STEP 95
int1 = 2                                                                # STEP 96
avl1.delete(int3)                                                       # STEP 97
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1037af320>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
202 BRANCHES COVERED
151 STATEMENTS COVERED

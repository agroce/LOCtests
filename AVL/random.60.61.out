Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.413.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
TEST #4 STEP #70 (0:00:30.004185) Fri Apr 28 06:18:25 2017 [ 131 stmts 175 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1042618c0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 45 steps

SAVING TEST AS failure.413.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 13                                                                # STEP 0
ACTION: int2 = 13 
int2 = None : <type 'NoneType'>
=> int2 = 13 : <type 'int'>
==================================================
int1 = 17                                                                # STEP 1
ACTION: int1 = 17 
int1 = None : <type 'NoneType'>
=> int1 = 17 : <type 'int'>
==================================================
int0 = 14                                                                # STEP 2
ACTION: int0 = 14 
int0 = None : <type 'NoneType'>
=> int0 = 14 : <type 'int'>
==================================================
int3 = 17                                                                # STEP 3
ACTION: int3 = 17 
int3 = None : <type 'NoneType'>
=> int3 = 17 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 4
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x10424a248> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 5
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x10424a560> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.insert(int1)                                                        # STEP 6
ACTION: avl1.insert(int1) 
int1 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10424a560> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([17]) : <type 'set'>
==================================================
avl0.delete(int3)                                                        # STEP 7
ACTION: avl0.delete(int3) 
int3 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10424a248> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int1 = 13                                                                # STEP 8
ACTION: int1 = 13 
int1 = 17 : <type 'int'>
=> int1 = 13 : <type 'int'>
==================================================
result = avl0.inorder()                                                  # STEP 9
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x10424a248> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl1.insert(int0)                                                       # STEP 10
ACTION: avl1.insert(int0) 
int0 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10424a560> : <type 'instance'>
avl_REF1 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([17, 14]) : <type 'set'>
==================================================
int3 = 6                                                                # STEP 11
ACTION: int3 = 6 
int3 = 17 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
int0 = 10                                                               # STEP 12
ACTION: int0 = 10 
int0 = 14 : <type 'int'>
=> int0 = 10 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 13
ACTION: avl0.insert(int2) 
int2 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10424a248> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([13]) : <type 'set'>
==================================================
int2 = 11                                                               # STEP 14
ACTION: int2 = 11 
int2 = 13 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
result = avl0.find(int1)                                                # STEP 15
ACTION: result = avl0.find(int1) 
int1 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10424a248> : <type 'instance'>
avl_REF0 = set([13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
result = avl1.find(int1)                                                # STEP 16
ACTION: result = avl1.find(int1) 
int1 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10424a560> : <type 'instance'>
avl_REF1 = set([17, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int1 = 5                                                                # STEP 17
ACTION: int1 = 5 
int1 = 13 : <type 'int'>
=> int1 = 5 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 18
ACTION: avl1.insert(int1) 
int1 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10424a560> : <type 'instance'>
avl_REF1 = set([17, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([17, 5, 14]) : <type 'set'>
==================================================
result = avl0.find(int0)                                                # STEP 19
ACTION: result = avl0.find(int0) 
int0 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10424a248> : <type 'instance'>
avl_REF0 = set([13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
int1 = 17                                                               # STEP 20
ACTION: int1 = 17 
int1 = 5 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
result = avl1.find(int3)                                                # STEP 21
ACTION: result = avl1.find(int3) 
int3 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10424a560> : <type 'instance'>
avl_REF1 = set([17, 5, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
int0 = 4                                                                # STEP 22
ACTION: int0 = 4 
int0 = 10 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
result = avl1.find(int3)                                                # STEP 23
ACTION: result = avl1.find(int3) 
int3 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10424a560> : <type 'instance'>
avl_REF1 = set([17, 5, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl1.delete(int2)                                                       # STEP 24
ACTION: avl1.delete(int2) 
int2 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10424a560> : <type 'instance'>
avl_REF1 = set([17, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int3 = 7                                                                # STEP 25
ACTION: int3 = 7 
int3 = 6 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
int2 = 3                                                                # STEP 26
ACTION: int2 = 3 
int2 = 11 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 27
ACTION: avl1.insert(int2) 
int2 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10424a560> : <type 'instance'>
avl_REF1 = set([17, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([17, 3, 5, 14]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 28
ACTION: avl0.delete(int3) 
int3 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10424a248> : <type 'instance'>
avl_REF0 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
result = avl0.find(int3)                                                # STEP 29
ACTION: result = avl0.find(int3) 
int3 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10424a248> : <type 'instance'>
avl_REF0 = set([13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
result = avl1.find(int2)                                                # STEP 30
ACTION: result = avl1.find(int2) 
int2 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10424a560> : <type 'instance'>
avl_REF1 = set([17, 3, 5, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
result = avl1.find(int1)                                                # STEP 31
ACTION: result = avl1.find(int1) 
int1 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10424a560> : <type 'instance'>
avl_REF1 = set([17, 3, 5, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl0.insert(int1)                                                       # STEP 32
ACTION: avl0.insert(int1) 
int1 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10424a248> : <type 'instance'>
avl_REF0 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([17, 13]) : <type 'set'>
==================================================
int2 = 5                                                                # STEP 33
ACTION: int2 = 5 
int2 = 3 : <type 'int'>
=> int2 = 5 : <type 'int'>
==================================================
int1 = 11                                                               # STEP 34
ACTION: int1 = 11 
int1 = 17 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
int3 = 15                                                               # STEP 35
ACTION: int3 = 15 
int3 = 7 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
result = avl0.find(int0)                                                # STEP 36
ACTION: result = avl0.find(int0) 
int0 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10424a248> : <type 'instance'>
avl_REF0 = set([17, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
result = avl1.inorder()                                                 # STEP 37
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x10424a560> : <type 'instance'>
avl_REF1 = set([17, 3, 5, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
result = avl1.find(int3)                                                # STEP 38
ACTION: result = avl1.find(int3) 
int3 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10424a560> : <type 'instance'>
avl_REF1 = set([17, 3, 5, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
result = avl0.find(int0)                                                # STEP 39
ACTION: result = avl0.find(int0) 
int0 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10424a248> : <type 'instance'>
avl_REF0 = set([17, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
result = avl1.inorder()                                                 # STEP 40
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x10424a560> : <type 'instance'>
avl_REF1 = set([17, 3, 5, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int0 = 10                                                               # STEP 41
ACTION: int0 = 10 
int0 = 4 : <type 'int'>
=> int0 = 10 : <type 'int'>
==================================================
result = avl1.find(int3)                                                # STEP 42
ACTION: result = avl1.find(int3) 
int3 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10424a560> : <type 'instance'>
avl_REF1 = set([17, 3, 5, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
int3 = 17                                                               # STEP 43
ACTION: int3 = 17 
int3 = 15 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 44
ACTION: avl1.delete(int3) 
int3 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10424a560> : <type 'instance'>
avl_REF1 = set([17, 3, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([3, 5, 14]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105938fc8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
  13 [3:1]
-- < 4 [2:1]
---- < 2 [1:-1]
------ > 3 [0:0] L
---- > 9 [0:0] L
-- > 20 [1:1]
---- < 15 [0:0] L
set([2, 3, 4, 9, 13, 15, 20])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1046636c8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 61 steps

SAVING TEST AS failure.413.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 5                                                                 # STEP 0
ACTION: int3 = 5 
int3 = None : <type 'NoneType'>
=> int3 = 5 : <type 'int'>
==================================================
int1 = 20                                                                # STEP 1
ACTION: int1 = 20 
int1 = None : <type 'NoneType'>
=> int1 = 20 : <type 'int'>
==================================================
int0 = 19                                                                # STEP 2
ACTION: int0 = 19 
int0 = None : <type 'NoneType'>
=> int0 = 19 : <type 'int'>
==================================================
int2 = 2                                                                 # STEP 3
ACTION: int2 = 2 
int2 = None : <type 'NoneType'>
=> int2 = 2 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x104663ab8> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.delete(int0)                                                        # STEP 5
ACTION: avl1.delete(int0) 
int0 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104663ab8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int0 = 13                                                                # STEP 6
ACTION: int0 = 13 
int0 = 19 : <type 'int'>
=> int0 = 13 : <type 'int'>
==================================================
avl1.insert(int0)                                                        # STEP 7
ACTION: avl1.insert(int0) 
int0 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104663ab8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([13]) : <type 'set'>
==================================================
int0 = 20                                                                # STEP 8
ACTION: int0 = 20 
int0 = 13 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
result = avl1.find(int1)                                                 # STEP 9
ACTION: result = avl1.find(int1) 
int1 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104663ab8> : <type 'instance'>
avl_REF1 = set([13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int1 = 9                                                                # STEP 10
ACTION: int1 = 9 
int1 = 20 : <type 'int'>
=> int1 = 9 : <type 'int'>
==================================================
result = avl1.find(int3)                                                # STEP 11
ACTION: result = avl1.find(int3) 
int3 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104663ab8> : <type 'instance'>
avl_REF1 = set([13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
int3 = 18                                                               # STEP 12
ACTION: int3 = 18 
int3 = 5 : <type 'int'>
=> int3 = 18 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 13
ACTION: avl1.insert(int0) 
int0 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104663ab8> : <type 'instance'>
avl_REF1 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([20, 13]) : <type 'set'>
==================================================
int0 = 2                                                                # STEP 14
ACTION: int0 = 2 
int0 = 20 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 15
ACTION: avl1.insert(int1) 
int1 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104663ab8> : <type 'instance'>
avl_REF1 = set([20, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([9, 20, 13]) : <type 'set'>
==================================================
result = avl1.find(int2)                                                # STEP 16
ACTION: result = avl1.find(int2) 
int2 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104663ab8> : <type 'instance'>
avl_REF1 = set([9, 20, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
result = avl1.inorder()                                                 # STEP 17
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104663ab8> : <type 'instance'>
avl_REF1 = set([9, 20, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.delete(int3)                                                       # STEP 18
ACTION: avl1.delete(int3) 
int3 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104663ab8> : <type 'instance'>
avl_REF1 = set([9, 20, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int1 = 13                                                               # STEP 19
ACTION: int1 = 13 
int1 = 9 : <type 'int'>
=> int1 = 13 : <type 'int'>
==================================================
int3 = 17                                                               # STEP 20
ACTION: int3 = 17 
int3 = 18 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 21
ACTION: avl1.delete(int3) 
int3 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104663ab8> : <type 'instance'>
avl_REF1 = set([9, 20, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int3 = 20                                                               # STEP 22
ACTION: int3 = 20 
int3 = 17 : <type 'int'>
=> int3 = 20 : <type 'int'>
==================================================
int2 = 2                                                                # STEP 23
ACTION: int2 = 2 
int2 = 2 : <type 'int'>
==================================================
result = avl1.find(int1)                                                # STEP 24
ACTION: result = avl1.find(int1) 
int1 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104663ab8> : <type 'instance'>
avl_REF1 = set([9, 20, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl1.insert(int3)                                                       # STEP 25
ACTION: avl1.insert(int3) 
int3 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104663ab8> : <type 'instance'>
avl_REF1 = set([9, 20, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
result = avl1.find(int2)                                                # STEP 26
ACTION: result = avl1.find(int2) 
int2 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104663ab8> : <type 'instance'>
avl_REF1 = set([9, 20, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
result = avl1.find(int3)                                                # STEP 27
ACTION: result = avl1.find(int3) 
int3 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104663ab8> : <type 'instance'>
avl_REF1 = set([9, 20, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl1.insert(int0)                                                       # STEP 28
ACTION: avl1.insert(int0) 
int0 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104663ab8> : <type 'instance'>
avl_REF1 = set([9, 20, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([9, 2, 20, 13]) : <type 'set'>
==================================================
int3 = 4                                                                # STEP 29
ACTION: int3 = 4 
int3 = 20 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
int0 = 15                                                               # STEP 30
ACTION: int0 = 15 
int0 = 2 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
int2 = 15                                                               # STEP 31
ACTION: int2 = 15 
int2 = 2 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
int1 = 12                                                               # STEP 32
ACTION: int1 = 12 
int1 = 13 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
result = avl1.find(int1)                                                # STEP 33
ACTION: result = avl1.find(int1) 
int1 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104663ab8> : <type 'instance'>
avl_REF1 = set([9, 2, 20, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl1.insert(int3)                                                       # STEP 34
ACTION: avl1.insert(int3) 
int3 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104663ab8> : <type 'instance'>
avl_REF1 = set([9, 2, 20, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([9, 2, 20, 13, 4]) : <type 'set'>
==================================================
int3 = 19                                                               # STEP 35
ACTION: int3 = 19 
int3 = 4 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
int1 = 3                                                                # STEP 36
ACTION: int1 = 3 
int1 = 12 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
result = avl1.find(int0)                                                # STEP 37
ACTION: result = avl1.find(int0) 
int0 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104663ab8> : <type 'instance'>
avl_REF1 = set([9, 2, 20, 13, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl1.insert(int2)                                                       # STEP 38
ACTION: avl1.insert(int2) 
int2 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104663ab8> : <type 'instance'>
avl_REF1 = set([9, 2, 20, 13, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([2, 4, 9, 13, 15, 20]) : <type 'set'>
==================================================
int2 = 20                                                               # STEP 39
ACTION: int2 = 20 
int2 = 15 : <type 'int'>
=> int2 = 20 : <type 'int'>
==================================================
int0 = 13                                                               # STEP 40
ACTION: int0 = 13 
int0 = 15 : <type 'int'>
=> int0 = 13 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 41
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x104685f38> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl1 == avl2                                                            # STEP 42
ACTION: avl1 == avl2 
avl1 = <avl.AVLTree instance at 0x104663ab8> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x104685f38> : <type 'instance'>
avl_REF1 = set([2, 4, 9, 13, 15, 20]) : <type 'set'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
avl2.delete(int2)                                                       # STEP 43
ACTION: avl2.delete(int2) 
int2 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104685f38> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl1.insert(int1)                                                       # STEP 44
ACTION: avl1.insert(int1) 
int1 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104663ab8> : <type 'instance'>
avl_REF1 = set([2, 4, 9, 13, 15, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([2, 3, 4, 9, 13, 15, 20]) : <type 'set'>
==================================================
int1 = 12                                                               # STEP 45
ACTION: int1 = 12 
int1 = 3 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 46
ACTION: avl1.delete(int3) 
int3 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104663ab8> : <type 'instance'>
avl_REF1 = set([2, 3, 4, 9, 13, 15, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int2 = 9                                                                # STEP 47
ACTION: int2 = 9 
int2 = 20 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
result = avl1.find(int1)                                                # STEP 48
ACTION: result = avl1.find(int1) 
int1 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104663ab8> : <type 'instance'>
avl_REF1 = set([2, 3, 4, 9, 13, 15, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl1 == avl1                                                            # STEP 49
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x104663ab8> : <type 'instance'>
avl_REF1 = set([2, 3, 4, 9, 13, 15, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
int3 = 5                                                                # STEP 50
ACTION: int3 = 5 
int3 = 19 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
int1 = 11                                                               # STEP 51
ACTION: int1 = 11 
int1 = 12 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 52
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104685f38> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl1.insert(int2)                                                       # STEP 53
ACTION: avl1.insert(int2) 
int2 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104663ab8> : <type 'instance'>
avl_REF1 = set([2, 3, 4, 9, 13, 15, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
result = avl1.find(int0)                                                # STEP 54
ACTION: result = avl1.find(int0) 
int0 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104663ab8> : <type 'instance'>
avl_REF1 = set([2, 3, 4, 9, 13, 15, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl1.display()                                                          # STEP 55
ACTION: avl1.display() 
avl1 = <avl.AVLTree instance at 0x104663ab8> : <type 'instance'>
avl_REF1 = set([2, 3, 4, 9, 13, 15, 20]) : <type 'set'>
  13 [3:1]
-- < 4 [2:1]
---- < 2 [1:-1]
------ > 3 [0:0] L
---- > 9 [0:0] L
-- > 20 [1:1]
---- < 15 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([2, 3, 4, 9, 13, 15, 20])
==================================================
int2 = 10                                                               # STEP 56
ACTION: int2 = 10 
int2 = 9 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 57
ACTION: avl1.insert(int2) 
int2 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104663ab8> : <type 'instance'>
avl_REF1 = set([2, 3, 4, 9, 13, 15, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([2, 3, 4, 9, 10, 13, 15, 20]) : <type 'set'>
==================================================
int2 = 9                                                                # STEP 58
ACTION: int2 = 9 
int2 = 10 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 59
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x104663ab8> : <type 'instance'>
avl_REF1 = set([2, 3, 4, 9, 10, 13, 15, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.delete(int0)                                                       # STEP 60
ACTION: avl1.delete(int0) 
int0 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104663ab8> : <type 'instance'>
avl_REF1 = set([2, 3, 4, 9, 10, 13, 15, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([2, 3, 4, 9, 10, 15, 20]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104695f38>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 10
STOPPING TESTING DUE TO TIMEOUT
8.58500169664 PERCENT COVERED
60.2081828117 TOTAL RUNTIME
8 EXECUTED
616 TOTAL TEST OPERATIONS
25.3831646442 TIME SPENT EXECUTING TEST OPERATIONS
0.0219256877899 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
25.5773589611 TIME SPENT CHECKING PROPERTIES
50.9605236053 TOTAL TIME SPENT RUNNING SUT
0.00439190864563 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
2 FAILED
0 REPEATS OF FAILURES
2 ACTUAL DISTINCT FAILURES

FAILURE 0
int2 = 13                                                                # STEP 0
int1 = 17                                                                # STEP 1
int0 = 14                                                                # STEP 2
int3 = 17                                                                # STEP 3
avl0 = avl.AVLTree()                                                     # STEP 4
avl1 = avl.AVLTree()                                                     # STEP 5
avl1.insert(int1)                                                        # STEP 6
avl0.delete(int3)                                                        # STEP 7
int1 = 13                                                                # STEP 8
result = avl0.inorder()                                                  # STEP 9
avl1.insert(int0)                                                       # STEP 10
int3 = 6                                                                # STEP 11
int0 = 10                                                               # STEP 12
avl0.insert(int2)                                                       # STEP 13
int2 = 11                                                               # STEP 14
result = avl0.find(int1)                                                # STEP 15
result = avl1.find(int1)                                                # STEP 16
int1 = 5                                                                # STEP 17
avl1.insert(int1)                                                       # STEP 18
result = avl0.find(int0)                                                # STEP 19
int1 = 17                                                               # STEP 20
result = avl1.find(int3)                                                # STEP 21
int0 = 4                                                                # STEP 22
result = avl1.find(int3)                                                # STEP 23
avl1.delete(int2)                                                       # STEP 24
int3 = 7                                                                # STEP 25
int2 = 3                                                                # STEP 26
avl1.insert(int2)                                                       # STEP 27
avl0.delete(int3)                                                       # STEP 28
result = avl0.find(int3)                                                # STEP 29
result = avl1.find(int2)                                                # STEP 30
result = avl1.find(int1)                                                # STEP 31
avl0.insert(int1)                                                       # STEP 32
int2 = 5                                                                # STEP 33
int1 = 11                                                               # STEP 34
int3 = 15                                                               # STEP 35
result = avl0.find(int0)                                                # STEP 36
result = avl1.inorder()                                                 # STEP 37
result = avl1.find(int3)                                                # STEP 38
result = avl0.find(int0)                                                # STEP 39
result = avl1.inorder()                                                 # STEP 40
int0 = 10                                                               # STEP 41
result = avl1.find(int3)                                                # STEP 42
int3 = 17                                                               # STEP 43
avl1.delete(int3)                                                       # STEP 44
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105938fc8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE 1
int3 = 5                                                                 # STEP 0
int1 = 20                                                                # STEP 1
int0 = 19                                                                # STEP 2
int2 = 2                                                                 # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
avl1.delete(int0)                                                        # STEP 5
int0 = 13                                                                # STEP 6
avl1.insert(int0)                                                        # STEP 7
int0 = 20                                                                # STEP 8
result = avl1.find(int1)                                                 # STEP 9
int1 = 9                                                                # STEP 10
result = avl1.find(int3)                                                # STEP 11
int3 = 18                                                               # STEP 12
avl1.insert(int0)                                                       # STEP 13
int0 = 2                                                                # STEP 14
avl1.insert(int1)                                                       # STEP 15
result = avl1.find(int2)                                                # STEP 16
result = avl1.inorder()                                                 # STEP 17
avl1.delete(int3)                                                       # STEP 18
int1 = 13                                                               # STEP 19
int3 = 17                                                               # STEP 20
avl1.delete(int3)                                                       # STEP 21
int3 = 20                                                               # STEP 22
int2 = 2                                                                # STEP 23
result = avl1.find(int1)                                                # STEP 24
avl1.insert(int3)                                                       # STEP 25
result = avl1.find(int2)                                                # STEP 26
result = avl1.find(int3)                                                # STEP 27
avl1.insert(int0)                                                       # STEP 28
int3 = 4                                                                # STEP 29
int0 = 15                                                               # STEP 30
int2 = 15                                                               # STEP 31
int1 = 12                                                               # STEP 32
result = avl1.find(int1)                                                # STEP 33
avl1.insert(int3)                                                       # STEP 34
int3 = 19                                                               # STEP 35
int1 = 3                                                                # STEP 36
result = avl1.find(int0)                                                # STEP 37
avl1.insert(int2)                                                       # STEP 38
int2 = 20                                                               # STEP 39
int0 = 13                                                               # STEP 40
avl2 = avl.AVLTree()                                                    # STEP 41
avl1 == avl2                                                            # STEP 42
avl2.delete(int2)                                                       # STEP 43
avl1.insert(int1)                                                       # STEP 44
int1 = 12                                                               # STEP 45
avl1.delete(int3)                                                       # STEP 46
int2 = 9                                                                # STEP 47
result = avl1.find(int1)                                                # STEP 48
avl1 == avl1                                                            # STEP 49
int3 = 5                                                                # STEP 50
int1 = 11                                                               # STEP 51
result = avl2.inorder()                                                 # STEP 52
avl1.insert(int2)                                                       # STEP 53
result = avl1.find(int0)                                                # STEP 54
avl1.display()                                                          # STEP 55
int2 = 10                                                               # STEP 56
avl1.insert(int2)                                                       # STEP 57
int2 = 9                                                                # STEP 58
avl1 == avl1                                                            # STEP 59
avl1.delete(int0)                                                       # STEP 60
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104695f38>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
216 BRANCHES COVERED
162 STATEMENTS COVERED

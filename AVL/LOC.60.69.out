Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.572.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  9 [3:-1]
-- < 6 [1:1]
---- < 2 [0:0] L
-- > 16 [2:-1]
---- < 15 [0:0] L
---- > 19 [1:1]
------ < 18 [0:0] L
set([2, 6, 9, 15, 16, 18, 19])
  9 [3:-1]
-- < 6 [1:1]
---- < 2 [0:0] L
-- > 16 [2:-1]
---- < 15 [0:0] L
---- > 19 [1:1]
------ < 18 [0:0] L
set([2, 6, 9, 15, 16, 18, 19])
  9 [3:-1]
-- < 6 [1:1]
---- < 2 [0:0] L
-- > 16 [2:-1]
---- < 15 [0:0] L
---- > 19 [1:1]
------ < 18 [0:0] L
set([2, 6, 9, 15, 16, 18, 19])
  9 [2:0]
-- < 6 [1:1]
---- < 2 [0:0] L
-- > 18 [1:0]
---- < 16 [0:0] L
---- > 19 [0:0] L
set([2, 6, 9, 16, 18, 19])
  9 [2:0]
-- < 6 [1:1]
---- < 2 [0:0] L
-- > 18 [1:0]
---- < 16 [0:0] L
---- > 19 [0:0] L
set([2, 6, 9, 16, 18, 19])
  9 [2:0]
-- < 6 [1:1]
---- < 5 [0:0] L
-- > 14 [1:0]
---- < 12 [0:0] L
---- > 19 [0:0] L
set([5, 6, 9, 12, 14, 19])
  9 [2:0]
-- < 6 [1:1]
---- < 5 [0:0] L
-- > 14 [1:0]
---- < 12 [0:0] L
---- > 19 [0:0] L
set([5, 6, 9, 12, 14, 19])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103293368>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
Original test has 17 steps

SAVING TEST AS failure.572.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 5                                                                 # STEP 0
ACTION: int3 = 5 
int3 = None : <type 'NoneType'>
=> int3 = 5 : <type 'int'>
==================================================
int2 = 6                                                                 # STEP 1
ACTION: int2 = 6 
int2 = None : <type 'NoneType'>
=> int2 = 6 : <type 'int'>
==================================================
int1 = 4                                                                 # STEP 2
ACTION: int1 = 4 
int1 = None : <type 'NoneType'>
=> int1 = 4 : <type 'int'>
==================================================
int0 = 3                                                                 # STEP 3
ACTION: int0 = 3 
int0 = None : <type 'NoneType'>
=> int0 = 3 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 4
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x1037cff80> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.insert(int3)                                                        # STEP 5
ACTION: avl0.insert(int3) 
int3 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1037cff80> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([5]) : <type 'set'>
==================================================
avl0.delete(int1)                                                        # STEP 6
ACTION: avl0.delete(int1) 
int1 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1037cff80> : <type 'instance'>
avl_REF0 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.insert(int3)                                                        # STEP 7
ACTION: avl0.insert(int3) 
int3 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1037cff80> : <type 'instance'>
avl_REF0 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
int1 = 8                                                                 # STEP 8
ACTION: int1 = 8 
int1 = 4 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
int3 = 2                                                                 # STEP 9
ACTION: int3 = 2 
int3 = 5 : <type 'int'>
=> int3 = 2 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 10
ACTION: avl0.delete(int1) 
int1 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1037cff80> : <type 'instance'>
avl_REF0 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.delete(int1)                                                       # STEP 11
ACTION: avl0.delete(int1) 
int1 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1037cff80> : <type 'instance'>
avl_REF0 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.insert(int1)                                                       # STEP 12
ACTION: avl0.insert(int1) 
int1 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1037cff80> : <type 'instance'>
avl_REF0 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([8, 5]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 13
ACTION: avl0.insert(int3) 
int3 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1037cff80> : <type 'instance'>
avl_REF0 = set([8, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([8, 2, 5]) : <type 'set'>
==================================================
int1 = 17                                                               # STEP 14
ACTION: int1 = 17 
int1 = 8 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 15
ACTION: avl0.insert(int2) 
int2 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1037cff80> : <type 'instance'>
avl_REF0 = set([8, 2, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([8, 2, 5, 6]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 16
ACTION: avl0.delete(int3) 
int3 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1037cff80> : <type 'instance'>
avl_REF0 = set([8, 2, 5, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([8, 5, 6]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10588d320>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #5 STEP #11 (0:00:30.010904) Fri Apr 28 06:41:52 2017 [ 160 stmts 212 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1037eaf80>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 59 steps

SAVING TEST AS failure.572.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 3                                                                 # STEP 0
ACTION: int1 = 3 
int1 = None : <type 'NoneType'>
=> int1 = 3 : <type 'int'>
==================================================
int0 = 2                                                                 # STEP 1
ACTION: int0 = 2 
int0 = None : <type 'NoneType'>
=> int0 = 2 : <type 'int'>
==================================================
int2 = 5                                                                 # STEP 2
ACTION: int2 = 5 
int2 = None : <type 'NoneType'>
=> int2 = 5 : <type 'int'>
==================================================
int3 = 16                                                                # STEP 3
ACTION: int3 = 16 
int3 = None : <type 'NoneType'>
=> int3 = 16 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x1037fd5f0> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.delete(int1)                                                        # STEP 5
ACTION: avl1.delete(int1) 
int1 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1037fd5f0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int1 = 12                                                                # STEP 6
ACTION: int1 = 12 
int1 = 3 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
result = avl1.inorder()                                                  # STEP 7
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1037fd5f0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
result = avl1.inorder()                                                  # STEP 8
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1037fd5f0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int0)                                                        # STEP 9
ACTION: avl1.insert(int0) 
int0 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1037fd5f0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([2]) : <type 'set'>
==================================================
avl1 == avl1                                                            # STEP 10
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x1037fd5f0> : <type 'instance'>
avl_REF1 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.delete(int2)                                                       # STEP 11
ACTION: avl1.delete(int2) 
int2 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1037fd5f0> : <type 'instance'>
avl_REF1 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.insert(int2)                                                       # STEP 12
ACTION: avl1.insert(int2) 
int2 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1037fd5f0> : <type 'instance'>
avl_REF1 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([2, 5]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 13
ACTION: avl1.insert(int0) 
int0 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1037fd5f0> : <type 'instance'>
avl_REF1 = set([2, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
result = avl1.inorder()                                                 # STEP 14
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1037fd5f0> : <type 'instance'>
avl_REF1 = set([2, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int2 = 16                                                               # STEP 15
ACTION: int2 = 16 
int2 = 5 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
result = avl1.find(int2)                                                # STEP 16
ACTION: result = avl1.find(int2) 
int2 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1037fd5f0> : <type 'instance'>
avl_REF1 = set([2, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl1.insert(int0)                                                       # STEP 17
ACTION: avl1.insert(int0) 
int0 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1037fd5f0> : <type 'instance'>
avl_REF1 = set([2, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.insert(int3)                                                       # STEP 18
ACTION: avl1.insert(int3) 
int3 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1037fd5f0> : <type 'instance'>
avl_REF1 = set([2, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([16, 2, 5]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 19
ACTION: avl1.insert(int1) 
int1 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1037fd5f0> : <type 'instance'>
avl_REF1 = set([16, 2, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([16, 2, 12, 5]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 20
ACTION: avl1.delete(int3) 
int3 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1037fd5f0> : <type 'instance'>
avl_REF1 = set([16, 2, 12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([2, 12, 5]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 21
ACTION: avl1.insert(int1) 
int1 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1037fd5f0> : <type 'instance'>
avl_REF1 = set([2, 12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl1.delete(int2)                                                       # STEP 22
ACTION: avl1.delete(int2) 
int2 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1037fd5f0> : <type 'instance'>
avl_REF1 = set([2, 12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.delete(int0)                                                       # STEP 23
ACTION: avl1.delete(int0) 
int0 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1037fd5f0> : <type 'instance'>
avl_REF1 = set([2, 12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([12, 5]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 24
ACTION: avl1.insert(int0) 
int0 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1037fd5f0> : <type 'instance'>
avl_REF1 = set([12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([2, 12, 5]) : <type 'set'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 25
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x10367aef0> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 26
ACTION: avl1.delete(int2) 
int2 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1037fd5f0> : <type 'instance'>
avl_REF1 = set([2, 12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int2 = 1                                                                # STEP 27
ACTION: int2 = 1 
int2 = 16 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 28
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x1037fd5f0> : <type 'instance'>
avl_REF1 = set([2, 12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl2.insert(int0)                                                       # STEP 29
ACTION: avl2.insert(int0) 
int0 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10367aef0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([2]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 30
ACTION: avl2.delete(int2) 
int2 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10367aef0> : <type 'instance'>
avl_REF2 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.delete(int1)                                                       # STEP 31
ACTION: avl2.delete(int1) 
int1 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10367aef0> : <type 'instance'>
avl_REF2 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl1.delete(int1)                                                       # STEP 32
ACTION: avl1.delete(int1) 
int1 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1037fd5f0> : <type 'instance'>
avl_REF1 = set([2, 12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([2, 5]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 33
ACTION: avl2.delete(int1) 
int1 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10367aef0> : <type 'instance'>
avl_REF2 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int2 = 2                                                                # STEP 34
ACTION: int2 = 2 
int2 = 1 : <type 'int'>
=> int2 = 2 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 35
ACTION: avl1.insert(int0) 
int0 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1037fd5f0> : <type 'instance'>
avl_REF1 = set([2, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.delete(int0)                                                       # STEP 36
ACTION: avl1.delete(int0) 
int0 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1037fd5f0> : <type 'instance'>
avl_REF1 = set([2, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([5]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 37
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1037fd5f0> : <type 'instance'>
avl_REF1 = set([5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int3 = 19                                                               # STEP 38
ACTION: int3 = 19 
int3 = 16 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 39
ACTION: avl1.delete(int1) 
int1 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1037fd5f0> : <type 'instance'>
avl_REF1 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int0 = 10                                                               # STEP 40
ACTION: int0 = 10 
int0 = 2 : <type 'int'>
=> int0 = 10 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 41
ACTION: avl1.insert(int1) 
int1 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1037fd5f0> : <type 'instance'>
avl_REF1 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([12, 5]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 42
ACTION: avl2.delete(int1) 
int1 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10367aef0> : <type 'instance'>
avl_REF2 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl1.insert(int0)                                                       # STEP 43
ACTION: avl1.insert(int0) 
int0 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1037fd5f0> : <type 'instance'>
avl_REF1 = set([12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([10, 12, 5]) : <type 'set'>
==================================================
int1 = 3                                                                # STEP 44
ACTION: int1 = 3 
int1 = 12 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 45
ACTION: avl1.delete(int0) 
int0 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1037fd5f0> : <type 'instance'>
avl_REF1 = set([10, 12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([12, 5]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 46
ACTION: avl2.delete(int3) 
int3 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10367aef0> : <type 'instance'>
avl_REF2 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.delete(int2)                                                       # STEP 47
ACTION: avl2.delete(int2) 
int2 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10367aef0> : <type 'instance'>
avl_REF2 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 48
ACTION: avl1.insert(int3) 
int3 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1037fd5f0> : <type 'instance'>
avl_REF1 = set([12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([19, 12, 5]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 49
ACTION: avl1.insert(int1) 
int1 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1037fd5f0> : <type 'instance'>
avl_REF1 = set([19, 12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([3, 19, 12, 5]) : <type 'set'>
==================================================
int1 = 6                                                                # STEP 50
ACTION: int1 = 6 
int1 = 3 : <type 'int'>
=> int1 = 6 : <type 'int'>
==================================================
int2 = 17                                                               # STEP 51
ACTION: int2 = 17 
int2 = 2 : <type 'int'>
=> int2 = 17 : <type 'int'>
==================================================
int0 = 7                                                                # STEP 52
ACTION: int0 = 7 
int0 = 10 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 53
ACTION: avl1.delete(int0) 
int0 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1037fd5f0> : <type 'instance'>
avl_REF1 = set([3, 19, 12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.delete(int2)                                                       # STEP 54
ACTION: avl1.delete(int2) 
int2 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1037fd5f0> : <type 'instance'>
avl_REF1 = set([3, 19, 12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl2.insert(int3)                                                       # STEP 55
ACTION: avl2.insert(int3) 
int3 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10367aef0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([19]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 56
ACTION: avl1.insert(int3) 
int3 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1037fd5f0> : <type 'instance'>
avl_REF1 = set([3, 19, 12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
int2 = 15                                                               # STEP 57
ACTION: int2 = 15 
int2 = 17 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 58
ACTION: avl1.delete(int3) 
int3 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1037fd5f0> : <type 'instance'>
avl_REF1 = set([3, 19, 12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([3, 12, 5]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1036f96c8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
  10 [2:0]
-- < 6 [1:-1]
---- > 7 [0:0] L
-- > 14 [1:0]
---- < 13 [0:0] L
---- > 17 [0:0] L
set([6, 7, 10, 13, 14, 17])
  10 [2:0]
-- < 6 [1:-1]
---- > 7 [0:0] L
-- > 14 [1:0]
---- < 13 [0:0] L
---- > 17 [0:0] L
set([6, 7, 10, 13, 14, 17])
  13 [2:0]
-- < 3 [1:0]
---- < 2 [0:0] L
---- > 6 [0:0] L
-- > 14 [1:-1]
---- > 15 [0:0] L
set([2, 3, 6, 13, 14, 15])
  10 [2:0]
-- < 6 [1:0]
---- < 5 [0:0] L
---- > 7 [0:0] L
-- > 17 [1:-1]
---- > 19 [0:0] L
set([5, 6, 7, 10, 17, 19])
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 60
STOPPING TESTING DUE TO TIMEOUT
8.58500169664 PERCENT COVERED
60.2047460079 TOTAL RUNTIME
8 EXECUTED
636 TOTAL TEST OPERATIONS
26.6944367886 TIME SPENT EXECUTING TEST OPERATIONS
0.0694377422333 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
26.851313591 TIME SPENT CHECKING PROPERTIES
53.5457503796 TOTAL TIME SPENT RUNNING SUT
0.00480175018311 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
2 FAILED
0 REPEATS OF FAILURES
2 ACTUAL DISTINCT FAILURES

FAILURE 0
int3 = 5                                                                 # STEP 0
int2 = 6                                                                 # STEP 1
int1 = 4                                                                 # STEP 2
int0 = 3                                                                 # STEP 3
avl0 = avl.AVLTree()                                                     # STEP 4
avl0.insert(int3)                                                        # STEP 5
avl0.delete(int1)                                                        # STEP 6
avl0.insert(int3)                                                        # STEP 7
int1 = 8                                                                 # STEP 8
int3 = 2                                                                 # STEP 9
avl0.delete(int1)                                                       # STEP 10
avl0.delete(int1)                                                       # STEP 11
avl0.insert(int1)                                                       # STEP 12
avl0.insert(int3)                                                       # STEP 13
int1 = 17                                                               # STEP 14
avl0.insert(int2)                                                       # STEP 15
avl0.delete(int3)                                                       # STEP 16
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10588d320>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE 1
int1 = 3                                                                 # STEP 0
int0 = 2                                                                 # STEP 1
int2 = 5                                                                 # STEP 2
int3 = 16                                                                # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
avl1.delete(int1)                                                        # STEP 5
int1 = 12                                                                # STEP 6
result = avl1.inorder()                                                  # STEP 7
result = avl1.inorder()                                                  # STEP 8
avl1.insert(int0)                                                        # STEP 9
avl1 == avl1                                                            # STEP 10
avl1.delete(int2)                                                       # STEP 11
avl1.insert(int2)                                                       # STEP 12
avl1.insert(int0)                                                       # STEP 13
result = avl1.inorder()                                                 # STEP 14
int2 = 16                                                               # STEP 15
result = avl1.find(int2)                                                # STEP 16
avl1.insert(int0)                                                       # STEP 17
avl1.insert(int3)                                                       # STEP 18
avl1.insert(int1)                                                       # STEP 19
avl1.delete(int3)                                                       # STEP 20
avl1.insert(int1)                                                       # STEP 21
avl1.delete(int2)                                                       # STEP 22
avl1.delete(int0)                                                       # STEP 23
avl1.insert(int0)                                                       # STEP 24
avl2 = avl.AVLTree()                                                    # STEP 25
avl1.delete(int2)                                                       # STEP 26
int2 = 1                                                                # STEP 27
avl1 == avl1                                                            # STEP 28
avl2.insert(int0)                                                       # STEP 29
avl2.delete(int2)                                                       # STEP 30
avl2.delete(int1)                                                       # STEP 31
avl1.delete(int1)                                                       # STEP 32
avl2.delete(int1)                                                       # STEP 33
int2 = 2                                                                # STEP 34
avl1.insert(int0)                                                       # STEP 35
avl1.delete(int0)                                                       # STEP 36
result = avl1.inorder()                                                 # STEP 37
int3 = 19                                                               # STEP 38
avl1.delete(int1)                                                       # STEP 39
int0 = 10                                                               # STEP 40
avl1.insert(int1)                                                       # STEP 41
avl2.delete(int1)                                                       # STEP 42
avl1.insert(int0)                                                       # STEP 43
int1 = 3                                                                # STEP 44
avl1.delete(int0)                                                       # STEP 45
avl2.delete(int3)                                                       # STEP 46
avl2.delete(int2)                                                       # STEP 47
avl1.insert(int3)                                                       # STEP 48
avl1.insert(int1)                                                       # STEP 49
int1 = 6                                                                # STEP 50
int2 = 17                                                               # STEP 51
int0 = 7                                                                # STEP 52
avl1.delete(int0)                                                       # STEP 53
avl1.delete(int2)                                                       # STEP 54
avl2.insert(int3)                                                       # STEP 55
avl1.insert(int3)                                                       # STEP 56
int2 = 15                                                               # STEP 57
avl1.delete(int3)                                                       # STEP 58
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1036f96c8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
216 BRANCHES COVERED
162 STATEMENTS COVERED

Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.62198.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  9 [2:0]
-- < 3 [1:0]
---- < 1 [0:0] L
---- > 6 [0:0] L
-- > 15 [1:0]
---- < 13 [0:0] L
---- > 20 [0:0] L
set([1, 3, 6, 9, 13, 15, 20])
  9 [2:0]
-- < 3 [1:0]
---- < 1 [0:0] L
---- > 6 [0:0] L
-- > 15 [1:0]
---- < 13 [0:0] L
---- > 20 [0:0] L
set([1, 3, 6, 9, 13, 15, 20])
  9 [2:0]
-- < 3 [1:0]
---- < 1 [0:0] L
---- > 6 [0:0] L
-- > 15 [1:0]
---- < 13 [0:0] L
---- > 20 [0:0] L
set([1, 3, 6, 9, 13, 15, 20])
  14 [3:1]
-- < 6 [2:-1]
---- < 2 [0:0] L
---- > 8 [1:-1]
------ > 12 [0:0] L
-- > 16 [1:-1]
---- > 18 [0:0] L
set([2, 6, 8, 12, 14, 16, 18])
  14 [3:1]
-- < 6 [2:-1]
---- < 2 [0:0] L
---- > 8 [1:-1]
------ > 12 [0:0] L
-- > 16 [1:-1]
---- > 18 [0:0] L
set([2, 6, 8, 12, 14, 16, 18])
  14 [3:1]
-- < 6 [2:-1]
---- < 2 [0:0] L
---- > 8 [1:-1]
------ > 12 [0:0] L
-- > 16 [1:-1]
---- > 18 [0:0] L
set([2, 6, 8, 12, 14, 16, 18])
  14 [3:1]
-- < 6 [2:-1]
---- < 2 [0:0] L
---- > 8 [1:-1]
------ > 12 [0:0] L
-- > 16 [1:-1]
---- > 18 [0:0] L
set([2, 6, 8, 12, 14, 16, 18])
  14 [3:1]
-- < 6 [2:-1]
---- < 2 [0:0] L
---- > 8 [1:-1]
------ > 12 [0:0] L
-- > 16 [1:-1]
---- > 18 [0:0] L
set([2, 6, 8, 12, 14, 16, 18])
  14 [3:1]
-- < 6 [2:-1]
---- < 2 [0:0] L
---- > 8 [1:-1]
------ > 12 [0:0] L
-- > 17 [1:0]
---- < 16 [0:0] L
---- > 18 [0:0] L
set([2, 6, 8, 12, 14, 16, 17, 18])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102ab7320>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
Original test has 76 steps

SAVING TEST AS failure.62198.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
avl2 = avl.AVLTree()                                                     # STEP 0
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x101b97170> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl2.inorder()                                                  # STEP 1
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x101b97170> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl0 = avl.AVLTree()                                                     # STEP 2
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x101ff6560> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
result = avl0.inorder()                                                  # STEP 3
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x101ff6560> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
result = avl2.inorder()                                                  # STEP 4
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x101b97170> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int1 = 3                                                                 # STEP 5
ACTION: int1 = 3 
int1 = None : <type 'NoneType'>
=> int1 = 3 : <type 'int'>
==================================================
avl2.insert(int1)                                                        # STEP 6
ACTION: avl2.insert(int1) 
int1 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101b97170> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([3]) : <type 'set'>
==================================================
int1 = 6                                                                 # STEP 7
ACTION: int1 = 6 
int1 = 3 : <type 'int'>
=> int1 = 6 : <type 'int'>
==================================================
avl0.insert(int1)                                                        # STEP 8
ACTION: avl0.insert(int1) 
int1 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101ff6560> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([6]) : <type 'set'>
==================================================
avl2.delete(int1)                                                        # STEP 9
ACTION: avl2.delete(int1) 
int1 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101b97170> : <type 'instance'>
avl_REF2 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2 = avl.AVLTree()                                                    # STEP 10
ACTION: avl2 = avl.AVLTree() 
avl2 = <avlbug2.AVLTree instance at 0x101b97170> : <type 'instance'>
avl_REF2 = set([3]) : <type 'set'>
=> avl2 = <avlbug2.AVLTree instance at 0x1029d84d0> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 11
ACTION: avl0.delete(int1) 
int1 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101ff6560> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 12
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x1029d84d0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl0.delete(int1)                                                       # STEP 13
ACTION: avl0.delete(int1) 
int1 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101ff6560> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl2.delete(int1)                                                       # STEP 14
ACTION: avl2.delete(int1) 
int1 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1029d84d0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
result = avl0.find(int1)                                                # STEP 15
ACTION: result = avl0.find(int1) 
int1 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101ff6560> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl2.insert(int1)                                                       # STEP 16
ACTION: avl2.insert(int1) 
int1 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1029d84d0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([6]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 17
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x101ff6560> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int2 = 2                                                                # STEP 18
ACTION: int2 = 2 
int2 = None : <type 'NoneType'>
=> int2 = 2 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 19
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x1029d84d0> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl0.insert(int1)                                                       # STEP 20
ACTION: avl0.insert(int1) 
int1 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101ff6560> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([6]) : <type 'set'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 21
ACTION: avl2 = avl.AVLTree() 
avl2 = <avlbug2.AVLTree instance at 0x1029d84d0> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
=> avl2 = <avlbug2.AVLTree instance at 0x1029ed170> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 22
ACTION: avl0.insert(int1) 
int1 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101ff6560> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl0.delete(int1)                                                       # STEP 23
ACTION: avl0.delete(int1) 
int1 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101ff6560> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 24
ACTION: avl2.insert(int2) 
int2 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1029ed170> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([2]) : <type 'set'>
==================================================
int0 = 20                                                               # STEP 25
ACTION: int0 = 20 
int0 = None : <type 'NoneType'>
=> int0 = 20 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 26
ACTION: avl0.insert(int2) 
int2 = 2 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101ff6560> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([2]) : <type 'set'>
==================================================
int3 = 19                                                               # STEP 27
ACTION: int3 = 19 
int3 = None : <type 'NoneType'>
=> int3 = 19 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 28
ACTION: avl2.insert(int0) 
int0 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1029ed170> : <type 'instance'>
avl_REF2 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([2, 20]) : <type 'set'>
==================================================
int1 = 17                                                               # STEP 29
ACTION: int1 = 17 
int1 = 6 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 30
ACTION: avl0.insert(int3) 
int3 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101ff6560> : <type 'instance'>
avl_REF0 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([2, 19]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 31
ACTION: avl0.insert(int3) 
int3 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101ff6560> : <type 'instance'>
avl_REF0 = set([2, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
avl2.insert(int3)                                                       # STEP 32
ACTION: avl2.insert(int3) 
int3 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1029ed170> : <type 'instance'>
avl_REF2 = set([2, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([2, 19, 20]) : <type 'set'>
==================================================
int2 = 4                                                                # STEP 33
ACTION: int2 = 4 
int2 = 2 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 34
ACTION: avl0.delete(int3) 
int3 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101ff6560> : <type 'instance'>
avl_REF0 = set([2, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([2]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 35
ACTION: avl0.delete(int0) 
int0 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101ff6560> : <type 'instance'>
avl_REF0 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int3 = 18                                                               # STEP 36
ACTION: int3 = 18 
int3 = 19 : <type 'int'>
=> int3 = 18 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 37
ACTION: avl2.insert(int3) 
int3 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1029ed170> : <type 'instance'>
avl_REF2 = set([2, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([2, 19, 20, 18]) : <type 'set'>
==================================================
result = avl0.find(int3)                                                # STEP 38
ACTION: result = avl0.find(int3) 
int3 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101ff6560> : <type 'instance'>
avl_REF0 = set([2]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
avl0 = avl.AVLTree()                                                    # STEP 39
ACTION: avl0 = avl.AVLTree() 
avl0 = <avlbug2.AVLTree instance at 0x101ff6560> : <type 'instance'>
avl_REF0 = set([2]) : <type 'set'>
=> avl0 = <avlbug2.AVLTree instance at 0x1029fd290> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 40
ACTION: avl2.delete(int2) 
int2 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1029ed170> : <type 'instance'>
avl_REF2 = set([2, 19, 20, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.insert(int3)                                                       # STEP 41
ACTION: avl2.insert(int3) 
int3 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1029ed170> : <type 'instance'>
avl_REF2 = set([2, 19, 20, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
avl2.insert(int3)                                                       # STEP 42
ACTION: avl2.insert(int3) 
int3 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1029ed170> : <type 'instance'>
avl_REF2 = set([2, 19, 20, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
avl0.delete(int0)                                                       # STEP 43
ACTION: avl0.delete(int0) 
int0 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1029fd290> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int2 = 1                                                                # STEP 44
ACTION: int2 = 1 
int2 = 4 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 45
ACTION: avl0.delete(int1) 
int1 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1029fd290> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl2.insert(int1)                                                       # STEP 46
ACTION: avl2.insert(int1) 
int1 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1029ed170> : <type 'instance'>
avl_REF2 = set([2, 19, 20, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([17, 2, 19, 20, 18]) : <type 'set'>
==================================================
int0 = 6                                                                # STEP 47
ACTION: int0 = 6 
int0 = 20 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
int1 = 4                                                                # STEP 48
ACTION: int1 = 4 
int1 = 17 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 49
ACTION: avl2.insert(int3) 
int3 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1029ed170> : <type 'instance'>
avl_REF2 = set([17, 2, 19, 20, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
result = avl0.inorder()                                                 # STEP 50
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x1029fd290> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int3 = 12                                                               # STEP 51
ACTION: int3 = 12 
int3 = 18 : <type 'int'>
=> int3 = 12 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 52
ACTION: avl0.delete(int1) 
int1 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1029fd290> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int1 = 3                                                                # STEP 53
ACTION: int1 = 3 
int1 = 4 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 54
ACTION: avl0.delete(int0) 
int0 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1029fd290> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl2.delete(int2)                                                       # STEP 55
ACTION: avl2.delete(int2) 
int2 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1029ed170> : <type 'instance'>
avl_REF2 = set([17, 2, 19, 20, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.delete(int2)                                                       # STEP 56
ACTION: avl2.delete(int2) 
int2 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1029ed170> : <type 'instance'>
avl_REF2 = set([17, 2, 19, 20, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl0 = avl.AVLTree()                                                    # STEP 57
ACTION: avl0 = avl.AVLTree() 
avl0 = <avlbug2.AVLTree instance at 0x1029fd290> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
=> avl0 = <avlbug2.AVLTree instance at 0x102a97128> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
==================================================
avl2.delete(int3)                                                       # STEP 58
ACTION: avl2.delete(int3) 
int3 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1029ed170> : <type 'instance'>
avl_REF2 = set([17, 2, 19, 20, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl0 == avl0                                                            # STEP 59
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x102a97128> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
int2 = 16                                                               # STEP 60
ACTION: int2 = 16 
int2 = 1 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 61
ACTION: avl2.delete(int1) 
int1 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1029ed170> : <type 'instance'>
avl_REF2 = set([17, 2, 19, 20, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int0 = 18                                                               # STEP 62
ACTION: int0 = 18 
int0 = 6 : <type 'int'>
=> int0 = 18 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 63
ACTION: avl0.delete(int2) 
int2 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102a97128> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
result = avl0.inorder()                                                 # STEP 64
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x102a97128> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int0)                                                       # STEP 65
ACTION: avl0.insert(int0) 
int0 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102a97128> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([18]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 66
ACTION: avl2.delete(int1) 
int1 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1029ed170> : <type 'instance'>
avl_REF2 = set([17, 2, 19, 20, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int0 = 20                                                               # STEP 67
ACTION: int0 = 20 
int0 = 18 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 68
ACTION: avl0.insert(int3) 
int3 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102a97128> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([18, 12]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 69
ACTION: avl0.insert(int2) 
int2 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102a97128> : <type 'instance'>
avl_REF0 = set([18, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([16, 18, 12]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 70
ACTION: avl0.delete(int3) 
int3 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102a97128> : <type 'instance'>
avl_REF0 = set([16, 18, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([16, 18]) : <type 'set'>
==================================================
int2 = 20                                                               # STEP 71
ACTION: int2 = 20 
int2 = 16 : <type 'int'>
=> int2 = 20 : <type 'int'>
==================================================
result = avl2.find(int1)                                                # STEP 72
ACTION: result = avl2.find(int1) 
int1 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1029ed170> : <type 'instance'>
avl_REF2 = set([17, 2, 19, 20, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
result = avl2.inorder()                                                 # STEP 73
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x1029ed170> : <type 'instance'>
avl_REF2 = set([17, 2, 19, 20, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int1)                                                       # STEP 74
ACTION: avl2.delete(int1) 
int1 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1029ed170> : <type 'instance'>
avl_REF2 = set([17, 2, 19, 20, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.delete(int2)                                                       # STEP 75
ACTION: avl2.delete(int2) 
int2 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1029ed170> : <type 'instance'>
avl_REF2 = set([17, 2, 19, 20, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([17, 2, 19, 18]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102aaa200>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #4 STEP #0 (0:00:36.515940) Mon May  1 17:55:51 2017 [ 161 stmts 213 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1029e6878>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
Original test has 30 steps

SAVING TEST AS failure.62198.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 9                                                                 # STEP 0
ACTION: int3 = 9 
int3 = None : <type 'NoneType'>
=> int3 = 9 : <type 'int'>
==================================================
int1 = 20                                                                # STEP 1
ACTION: int1 = 20 
int1 = None : <type 'NoneType'>
=> int1 = 20 : <type 'int'>
==================================================
int2 = 12                                                                # STEP 2
ACTION: int2 = 12 
int2 = None : <type 'NoneType'>
=> int2 = 12 : <type 'int'>
==================================================
int0 = 19                                                                # STEP 3
ACTION: int0 = 19 
int0 = None : <type 'NoneType'>
=> int0 = 19 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x1029e6ea8> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
result = avl1.find(int0)                                                 # STEP 5
ACTION: result = avl1.find(int0) 
int0 = 19 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1029e6ea8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
int0 = 14                                                                # STEP 6
ACTION: int0 = 14 
int0 = 19 : <type 'int'>
=> int0 = 14 : <type 'int'>
==================================================
avl1.insert(int0)                                                        # STEP 7
ACTION: avl1.insert(int0) 
int0 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1029e6ea8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([14]) : <type 'set'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 8
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x102ab2a70> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int1)                                                        # STEP 9
ACTION: avl2.insert(int1) 
int1 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102ab2a70> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([20]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 10
ACTION: avl2.insert(int0) 
int0 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102ab2a70> : <type 'instance'>
avl_REF2 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([20, 14]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 11
ACTION: avl2.insert(int3) 
int3 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102ab2a70> : <type 'instance'>
avl_REF2 = set([20, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([9, 20, 14]) : <type 'set'>
==================================================
int3 = 13                                                               # STEP 12
ACTION: int3 = 13 
int3 = 9 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 13
ACTION: avl1.delete(int2) 
int2 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1029e6ea8> : <type 'instance'>
avl_REF1 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl2.insert(int0)                                                       # STEP 14
ACTION: avl2.insert(int0) 
int0 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102ab2a70> : <type 'instance'>
avl_REF2 = set([9, 20, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl2.delete(int3)                                                       # STEP 15
ACTION: avl2.delete(int3) 
int3 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102ab2a70> : <type 'instance'>
avl_REF2 = set([9, 20, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.insert(int0)                                                       # STEP 16
ACTION: avl2.insert(int0) 
int0 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102ab2a70> : <type 'instance'>
avl_REF2 = set([9, 20, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl1.delete(int2)                                                       # STEP 17
ACTION: avl1.delete(int2) 
int2 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1029e6ea8> : <type 'instance'>
avl_REF1 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int2 = 15                                                               # STEP 18
ACTION: int2 = 15 
int2 = 12 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 19
ACTION: avl1.delete(int3) 
int3 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1029e6ea8> : <type 'instance'>
avl_REF1 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl2.insert(int3)                                                       # STEP 20
ACTION: avl2.insert(int3) 
int3 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102ab2a70> : <type 'instance'>
avl_REF2 = set([9, 20, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([9, 20, 13, 14]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 21
ACTION: avl1.insert(int0) 
int0 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1029e6ea8> : <type 'instance'>
avl_REF1 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl2.insert(int0)                                                       # STEP 22
ACTION: avl2.insert(int0) 
int0 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102ab2a70> : <type 'instance'>
avl_REF2 = set([9, 20, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl2.insert(int1)                                                       # STEP 23
ACTION: avl2.insert(int1) 
int1 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102ab2a70> : <type 'instance'>
avl_REF2 = set([9, 20, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl1.delete(int2)                                                       # STEP 24
ACTION: avl1.delete(int2) 
int2 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1029e6ea8> : <type 'instance'>
avl_REF1 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl2.insert(int2)                                                       # STEP 25
ACTION: avl2.insert(int2) 
int2 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102ab2a70> : <type 'instance'>
avl_REF2 = set([9, 20, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([9, 20, 13, 14, 15]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 26
ACTION: avl2.delete(int2) 
int2 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102ab2a70> : <type 'instance'>
avl_REF2 = set([9, 20, 13, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([9, 20, 13, 14]) : <type 'set'>
==================================================
int2 = 18                                                               # STEP 27
ACTION: int2 = 18 
int2 = 15 : <type 'int'>
=> int2 = 18 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 28
ACTION: avl2.insert(int1) 
int1 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102ab2a70> : <type 'instance'>
avl_REF2 = set([9, 20, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl2.delete(int0)                                                       # STEP 29
ACTION: avl2.delete(int0) 
int0 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102ab2a70> : <type 'instance'>
avl_REF2 = set([9, 20, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([9, 20, 13]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1029c2518>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
  6 [2:0]
-- < 1 [1:-1]
---- > 2 [0:0] L
-- > 12 [1:0]
---- < 11 [0:0] L
---- > 20 [0:0] L
set([1, 2, 6, 11, 12, 20])
  6 [2:0]
-- < 1 [1:-1]
---- > 2 [0:0] L
-- > 12 [1:0]
---- < 11 [0:0] L
---- > 20 [0:0] L
set([1, 2, 6, 11, 12, 20])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102f95488>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
Original test has 62 steps

SAVING TEST AS failure.62198.test.2
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
avl2 = avl.AVLTree()                                                     # STEP 0
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x102fa0f80> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int2 = 11                                                                # STEP 1
ACTION: int2 = 11 
int2 = None : <type 'NoneType'>
=> int2 = 11 : <type 'int'>
==================================================
avl2.insert(int2)                                                        # STEP 2
ACTION: avl2.insert(int2) 
int2 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102fa0f80> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([11]) : <type 'set'>
==================================================
avl2.insert(int2)                                                        # STEP 3
ACTION: avl2.insert(int2) 
int2 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102fa0f80> : <type 'instance'>
avl_REF2 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl2.insert(int2)                                                        # STEP 4
ACTION: avl2.insert(int2) 
int2 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102fa0f80> : <type 'instance'>
avl_REF2 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
result = avl2.inorder()                                                  # STEP 5
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x102fa0f80> : <type 'instance'>
avl_REF2 = set([11]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int2 = 10                                                                # STEP 6
ACTION: int2 = 10 
int2 = 11 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
int1 = 6                                                                 # STEP 7
ACTION: int1 = 6 
int1 = None : <type 'NoneType'>
=> int1 = 6 : <type 'int'>
==================================================
avl2.insert(int2)                                                        # STEP 8
ACTION: avl2.insert(int2) 
int2 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102fa0f80> : <type 'instance'>
avl_REF2 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([10, 11]) : <type 'set'>
==================================================
avl2.delete(int2)                                                        # STEP 9
ACTION: avl2.delete(int2) 
int2 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102fa0f80> : <type 'instance'>
avl_REF2 = set([10, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([11]) : <type 'set'>
==================================================
int0 = 12                                                               # STEP 10
ACTION: int0 = 12 
int0 = None : <type 'NoneType'>
=> int0 = 12 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 11
ACTION: avl2.insert(int2) 
int2 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102fa0f80> : <type 'instance'>
avl_REF2 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([10, 11]) : <type 'set'>
==================================================
int3 = 1                                                                # STEP 12
ACTION: int3 = 1 
int3 = None : <type 'NoneType'>
=> int3 = 1 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 13
ACTION: avl2.insert(int2) 
int2 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102fa0f80> : <type 'instance'>
avl_REF2 = set([10, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl2.delete(int2)                                                       # STEP 14
ACTION: avl2.delete(int2) 
int2 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102fa0f80> : <type 'instance'>
avl_REF2 = set([10, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([11]) : <type 'set'>
==================================================
result = avl2.find(int2)                                                # STEP 15
ACTION: result = avl2.find(int2) 
int2 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102fa0f80> : <type 'instance'>
avl_REF2 = set([11]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl2 = avl.AVLTree()                                                    # STEP 16
ACTION: avl2 = avl.AVLTree() 
avl2 = <avlbug2.AVLTree instance at 0x102fa0f80> : <type 'instance'>
avl_REF2 = set([11]) : <type 'set'>
=> avl2 = <avlbug2.AVLTree instance at 0x102fa2cf8> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int2 = 6                                                                # STEP 17
ACTION: int2 = 6 
int2 = 10 : <type 'int'>
=> int2 = 6 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 18
ACTION: avl2.insert(int3) 
int3 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102fa2cf8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([1]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 19
ACTION: avl2.insert(int3) 
int3 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102fa2cf8> : <type 'instance'>
avl_REF2 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
avl2.delete(int0)                                                       # STEP 20
ACTION: avl2.delete(int0) 
int0 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102fa2cf8> : <type 'instance'>
avl_REF2 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.insert(int0)                                                       # STEP 21
ACTION: avl2.insert(int0) 
int0 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102fa2cf8> : <type 'instance'>
avl_REF2 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([1, 12]) : <type 'set'>
==================================================
result = avl2.find(int3)                                                # STEP 22
ACTION: result = avl2.find(int3) 
int3 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102fa2cf8> : <type 'instance'>
avl_REF2 = set([1, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
int0 = 17                                                               # STEP 23
ACTION: int0 = 17 
int0 = 12 : <type 'int'>
=> int0 = 17 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 24
ACTION: avl2.delete(int0) 
int0 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102fa2cf8> : <type 'instance'>
avl_REF2 = set([1, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int0 = 20                                                               # STEP 25
ACTION: int0 = 20 
int0 = 17 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 26
ACTION: avl2.insert(int3) 
int3 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102fa2cf8> : <type 'instance'>
avl_REF2 = set([1, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
result = avl2.inorder()                                                 # STEP 27
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x102fa2cf8> : <type 'instance'>
avl_REF2 = set([1, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int3 = 2                                                                # STEP 28
ACTION: int3 = 2 
int3 = 1 : <type 'int'>
=> int3 = 2 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 29
ACTION: avl2.insert(int3) 
int3 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102fa2cf8> : <type 'instance'>
avl_REF2 = set([1, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([1, 2, 12]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 30
ACTION: avl2.insert(int1) 
int1 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102fa2cf8> : <type 'instance'>
avl_REF2 = set([1, 2, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([1, 2, 12, 6]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 31
ACTION: avl2.insert(int1) 
int1 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102fa2cf8> : <type 'instance'>
avl_REF2 = set([1, 2, 12, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl2.delete(int3)                                                       # STEP 32
ACTION: avl2.delete(int3) 
int3 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102fa2cf8> : <type 'instance'>
avl_REF2 = set([1, 2, 12, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([1, 12, 6]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 33
ACTION: avl2.insert(int3) 
int3 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102fa2cf8> : <type 'instance'>
avl_REF2 = set([1, 12, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([1, 2, 12, 6]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 34
ACTION: avl2.delete(int3) 
int3 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102fa2cf8> : <type 'instance'>
avl_REF2 = set([1, 2, 12, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([1, 12, 6]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 35
ACTION: avl2.insert(int3) 
int3 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102fa2cf8> : <type 'instance'>
avl_REF2 = set([1, 12, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([1, 2, 12, 6]) : <type 'set'>
==================================================
int3 = 20                                                               # STEP 36
ACTION: int3 = 20 
int3 = 2 : <type 'int'>
=> int3 = 20 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 37
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x101f5f518> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int1 = 11                                                               # STEP 38
ACTION: int1 = 11 
int1 = 6 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 39
ACTION: avl1.insert(int2) 
int2 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101f5f518> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([6]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 40
ACTION: avl1.insert(int1) 
int1 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101f5f518> : <type 'instance'>
avl_REF1 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([11, 6]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 41
ACTION: avl2.delete(int1) 
int1 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102fa2cf8> : <type 'instance'>
avl_REF2 = set([1, 2, 12, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.delete(int3)                                                       # STEP 42
ACTION: avl2.delete(int3) 
int3 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102fa2cf8> : <type 'instance'>
avl_REF2 = set([1, 2, 12, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl1.insert(int3)                                                       # STEP 43
ACTION: avl1.insert(int3) 
int3 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101f5f518> : <type 'instance'>
avl_REF1 = set([11, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([11, 20, 6]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 44
ACTION: avl1.insert(int2) 
int2 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101f5f518> : <type 'instance'>
avl_REF1 = set([11, 20, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
result = avl2.find(int2)                                                # STEP 45
ACTION: result = avl2.find(int2) 
int2 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102fa2cf8> : <type 'instance'>
avl_REF2 = set([1, 2, 12, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl1.insert(int1)                                                       # STEP 46
ACTION: avl1.insert(int1) 
int1 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101f5f518> : <type 'instance'>
avl_REF1 = set([11, 20, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl2.delete(int0)                                                       # STEP 47
ACTION: avl2.delete(int0) 
int0 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102fa2cf8> : <type 'instance'>
avl_REF2 = set([1, 2, 12, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.insert(int0)                                                       # STEP 48
ACTION: avl2.insert(int0) 
int0 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102fa2cf8> : <type 'instance'>
avl_REF2 = set([1, 2, 12, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([1, 2, 12, 6, 20]) : <type 'set'>
==================================================
int2 = 8                                                                # STEP 49
ACTION: int2 = 8 
int2 = 6 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 50
ACTION: avl2.insert(int1) 
int1 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102fa2cf8> : <type 'instance'>
avl_REF2 = set([1, 2, 12, 6, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([1, 2, 6, 11, 12, 20]) : <type 'set'>
==================================================
avl2.display()                                                          # STEP 51
ACTION: avl2.display() 
avl2 = <avlbug2.AVLTree instance at 0x102fa2cf8> : <type 'instance'>
avl_REF2 = set([1, 2, 6, 11, 12, 20]) : <type 'set'>
  6 [2:0]
-- < 1 [1:-1]
---- > 2 [0:0] L
-- > 12 [1:0]
---- < 11 [0:0] L
---- > 20 [0:0] L
REFERENCE ACTION: print(avl_REF2) 
set([1, 2, 6, 11, 12, 20])
==================================================
avl1.insert(int2)                                                       # STEP 52
ACTION: avl1.insert(int2) 
int2 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101f5f518> : <type 'instance'>
avl_REF1 = set([11, 20, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([8, 11, 20, 6]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 53
ACTION: avl1.insert(int1) 
int1 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101f5f518> : <type 'instance'>
avl_REF1 = set([8, 11, 20, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl1 == avl2                                                            # STEP 54
ACTION: avl1 == avl2 
avl1 = <avlbug2.AVLTree instance at 0x101f5f518> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x102fa2cf8> : <type 'instance'>
avl_REF1 = set([8, 11, 20, 6]) : <type 'set'>
avl_REF2 = set([1, 2, 6, 11, 12, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
avl2.display()                                                          # STEP 55
ACTION: avl2.display() 
avl2 = <avlbug2.AVLTree instance at 0x102fa2cf8> : <type 'instance'>
avl_REF2 = set([1, 2, 6, 11, 12, 20]) : <type 'set'>
  6 [2:0]
-- < 1 [1:-1]
---- > 2 [0:0] L
-- > 12 [1:0]
---- < 11 [0:0] L
---- > 20 [0:0] L
REFERENCE ACTION: print(avl_REF2) 
set([1, 2, 6, 11, 12, 20])
==================================================
result = avl2.find(int3)                                                # STEP 56
ACTION: result = avl2.find(int3) 
int3 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102fa2cf8> : <type 'instance'>
avl_REF2 = set([1, 2, 6, 11, 12, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
int1 = 7                                                                # STEP 57
ACTION: int1 = 7 
int1 = 11 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
int2 = 10                                                               # STEP 58
ACTION: int2 = 10 
int2 = 8 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 59
ACTION: avl2.insert(int2) 
int2 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102fa2cf8> : <type 'instance'>
avl_REF2 = set([1, 2, 6, 11, 12, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([1, 2, 6, 10, 11, 12, 20]) : <type 'set'>
==================================================
int2 = 7                                                                # STEP 60
ACTION: int2 = 7 
int2 = 10 : <type 'int'>
=> int2 = 7 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 61
ACTION: avl1.delete(int3) 
int3 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101f5f518> : <type 'instance'>
avl_REF1 = set([8, 11, 20, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([8, 11, 6]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x101f6ea28>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 3 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102fa8518>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
Original test has 27 steps

SAVING TEST AS failure.62198.test.3
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 4                                                                 # STEP 0
ACTION: int2 = 4 
int2 = None : <type 'NoneType'>
=> int2 = 4 : <type 'int'>
==================================================
int3 = 19                                                                # STEP 1
ACTION: int3 = 19 
int3 = None : <type 'NoneType'>
=> int3 = 19 : <type 'int'>
==================================================
int1 = 14                                                                # STEP 2
ACTION: int1 = 14 
int1 = None : <type 'NoneType'>
=> int1 = 14 : <type 'int'>
==================================================
int0 = 18                                                                # STEP 3
ACTION: int0 = 18 
int0 = None : <type 'NoneType'>
=> int0 = 18 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x102fa8c68> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.delete(int2)                                                        # STEP 5
ACTION: avl2.delete(int2) 
int2 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102fa8c68> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
result = avl2.find(int2)                                                 # STEP 6
ACTION: result = avl2.find(int2) 
int2 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102fa8c68> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl2.insert(int1)                                                        # STEP 7
ACTION: avl2.insert(int1) 
int1 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102fa8c68> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([14]) : <type 'set'>
==================================================
int1 = 15                                                                # STEP 8
ACTION: int1 = 15 
int1 = 14 : <type 'int'>
=> int1 = 15 : <type 'int'>
==================================================
result = avl2.find(int0)                                                 # STEP 9
ACTION: result = avl2.find(int0) 
int0 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102fa8c68> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl2.insert(int3)                                                       # STEP 10
ACTION: avl2.insert(int3) 
int3 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102fa8c68> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([19, 14]) : <type 'set'>
==================================================
int3 = 20                                                               # STEP 11
ACTION: int3 = 20 
int3 = 19 : <type 'int'>
=> int3 = 20 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 12
ACTION: avl2.insert(int3) 
int3 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102fa8c68> : <type 'instance'>
avl_REF2 = set([19, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([19, 20, 14]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 13
ACTION: avl2.delete(int1) 
int1 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102fa8c68> : <type 'instance'>
avl_REF2 = set([19, 20, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int3)                                                       # STEP 14
ACTION: avl2.insert(int3) 
int3 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102fa8c68> : <type 'instance'>
avl_REF2 = set([19, 20, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
result = avl2.inorder()                                                 # STEP 15
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x102fa8c68> : <type 'instance'>
avl_REF2 = set([19, 20, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int1)                                                       # STEP 16
ACTION: avl2.insert(int1) 
int1 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102fa8c68> : <type 'instance'>
avl_REF2 = set([19, 20, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([19, 20, 14, 15]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 17
ACTION: avl2.delete(int2) 
int2 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102fa8c68> : <type 'instance'>
avl_REF2 = set([19, 20, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.insert(int0)                                                       # STEP 18
ACTION: avl2.insert(int0) 
int0 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102fa8c68> : <type 'instance'>
avl_REF2 = set([19, 20, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([18, 19, 20, 14, 15]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 19
ACTION: avl2.insert(int1) 
int1 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102fa8c68> : <type 'instance'>
avl_REF2 = set([18, 19, 20, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl2.delete(int2)                                                       # STEP 20
ACTION: avl2.delete(int2) 
int2 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102fa8c68> : <type 'instance'>
avl_REF2 = set([18, 19, 20, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.insert(int0)                                                       # STEP 21
ACTION: avl2.insert(int0) 
int0 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102fa8c68> : <type 'instance'>
avl_REF2 = set([18, 19, 20, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl2.delete(int0)                                                       # STEP 22
ACTION: avl2.delete(int0) 
int0 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102fa8c68> : <type 'instance'>
avl_REF2 = set([18, 19, 20, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([19, 20, 14, 15]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 23
ACTION: avl2.delete(int0) 
int0 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102fa8c68> : <type 'instance'>
avl_REF2 = set([19, 20, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.delete(int0)                                                       # STEP 24
ACTION: avl2.delete(int0) 
int0 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102fa8c68> : <type 'instance'>
avl_REF2 = set([19, 20, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.insert(int1)                                                       # STEP 25
ACTION: avl2.insert(int1) 
int1 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102fa8c68> : <type 'instance'>
avl_REF2 = set([19, 20, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl2.delete(int3)                                                       # STEP 26
ACTION: avl2.delete(int3) 
int3 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102fa8c68> : <type 'instance'>
avl_REF2 = set([19, 20, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([19, 14, 15]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x101e13998>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 4 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 0
STOPPING TESTING DUE TO TIMEOUT
8.21242019733 PERCENT COVERED
61.4643330574 TOTAL RUNTIME
7 EXECUTED
395 TOTAL TEST OPERATIONS
20.4297926426 TIME SPENT EXECUTING TEST OPERATIONS
0.0448088645935 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
20.5326387882 TIME SPENT CHECKING PROPERTIES
40.9624314308 TOTAL TIME SPENT RUNNING SUT
0.00440883636475 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
4 FAILED
0 REPEATS OF FAILURES
4 ACTUAL DISTINCT FAILURES

FAILURE 0
avl2 = avl.AVLTree()                                                     # STEP 0
result = avl2.inorder()                                                  # STEP 1
avl0 = avl.AVLTree()                                                     # STEP 2
result = avl0.inorder()                                                  # STEP 3
result = avl2.inorder()                                                  # STEP 4
int1 = 3                                                                 # STEP 5
avl2.insert(int1)                                                        # STEP 6
int1 = 6                                                                 # STEP 7
avl0.insert(int1)                                                        # STEP 8
avl2.delete(int1)                                                        # STEP 9
avl2 = avl.AVLTree()                                                    # STEP 10
avl0.delete(int1)                                                       # STEP 11
result = avl2.inorder()                                                 # STEP 12
avl0.delete(int1)                                                       # STEP 13
avl2.delete(int1)                                                       # STEP 14
result = avl0.find(int1)                                                # STEP 15
avl2.insert(int1)                                                       # STEP 16
result = avl0.inorder()                                                 # STEP 17
int2 = 2                                                                # STEP 18
result = avl2.inorder()                                                 # STEP 19
avl0.insert(int1)                                                       # STEP 20
avl2 = avl.AVLTree()                                                    # STEP 21
avl0.insert(int1)                                                       # STEP 22
avl0.delete(int1)                                                       # STEP 23
avl2.insert(int2)                                                       # STEP 24
int0 = 20                                                               # STEP 25
avl0.insert(int2)                                                       # STEP 26
int3 = 19                                                               # STEP 27
avl2.insert(int0)                                                       # STEP 28
int1 = 17                                                               # STEP 29
avl0.insert(int3)                                                       # STEP 30
avl0.insert(int3)                                                       # STEP 31
avl2.insert(int3)                                                       # STEP 32
int2 = 4                                                                # STEP 33
avl0.delete(int3)                                                       # STEP 34
avl0.delete(int0)                                                       # STEP 35
int3 = 18                                                               # STEP 36
avl2.insert(int3)                                                       # STEP 37
result = avl0.find(int3)                                                # STEP 38
avl0 = avl.AVLTree()                                                    # STEP 39
avl2.delete(int2)                                                       # STEP 40
avl2.insert(int3)                                                       # STEP 41
avl2.insert(int3)                                                       # STEP 42
avl0.delete(int0)                                                       # STEP 43
int2 = 1                                                                # STEP 44
avl0.delete(int1)                                                       # STEP 45
avl2.insert(int1)                                                       # STEP 46
int0 = 6                                                                # STEP 47
int1 = 4                                                                # STEP 48
avl2.insert(int3)                                                       # STEP 49
result = avl0.inorder()                                                 # STEP 50
int3 = 12                                                               # STEP 51
avl0.delete(int1)                                                       # STEP 52
int1 = 3                                                                # STEP 53
avl0.delete(int0)                                                       # STEP 54
avl2.delete(int2)                                                       # STEP 55
avl2.delete(int2)                                                       # STEP 56
avl0 = avl.AVLTree()                                                    # STEP 57
avl2.delete(int3)                                                       # STEP 58
avl0 == avl0                                                            # STEP 59
int2 = 16                                                               # STEP 60
avl2.delete(int1)                                                       # STEP 61
int0 = 18                                                               # STEP 62
avl0.delete(int2)                                                       # STEP 63
result = avl0.inorder()                                                 # STEP 64
avl0.insert(int0)                                                       # STEP 65
avl2.delete(int1)                                                       # STEP 66
int0 = 20                                                               # STEP 67
avl0.insert(int3)                                                       # STEP 68
avl0.insert(int2)                                                       # STEP 69
avl0.delete(int3)                                                       # STEP 70
int2 = 20                                                               # STEP 71
result = avl2.find(int1)                                                # STEP 72
result = avl2.inorder()                                                 # STEP 73
avl2.delete(int1)                                                       # STEP 74
avl2.delete(int2)                                                       # STEP 75
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102aaa200>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE 1
int3 = 9                                                                 # STEP 0
int1 = 20                                                                # STEP 1
int2 = 12                                                                # STEP 2
int0 = 19                                                                # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
result = avl1.find(int0)                                                 # STEP 5
int0 = 14                                                                # STEP 6
avl1.insert(int0)                                                        # STEP 7
avl2 = avl.AVLTree()                                                     # STEP 8
avl2.insert(int1)                                                        # STEP 9
avl2.insert(int0)                                                       # STEP 10
avl2.insert(int3)                                                       # STEP 11
int3 = 13                                                               # STEP 12
avl1.delete(int2)                                                       # STEP 13
avl2.insert(int0)                                                       # STEP 14
avl2.delete(int3)                                                       # STEP 15
avl2.insert(int0)                                                       # STEP 16
avl1.delete(int2)                                                       # STEP 17
int2 = 15                                                               # STEP 18
avl1.delete(int3)                                                       # STEP 19
avl2.insert(int3)                                                       # STEP 20
avl1.insert(int0)                                                       # STEP 21
avl2.insert(int0)                                                       # STEP 22
avl2.insert(int1)                                                       # STEP 23
avl1.delete(int2)                                                       # STEP 24
avl2.insert(int2)                                                       # STEP 25
avl2.delete(int2)                                                       # STEP 26
int2 = 18                                                               # STEP 27
avl2.insert(int1)                                                       # STEP 28
avl2.delete(int0)                                                       # STEP 29
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1029c2518>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE 2
avl2 = avl.AVLTree()                                                     # STEP 0
int2 = 11                                                                # STEP 1
avl2.insert(int2)                                                        # STEP 2
avl2.insert(int2)                                                        # STEP 3
avl2.insert(int2)                                                        # STEP 4
result = avl2.inorder()                                                  # STEP 5
int2 = 10                                                                # STEP 6
int1 = 6                                                                 # STEP 7
avl2.insert(int2)                                                        # STEP 8
avl2.delete(int2)                                                        # STEP 9
int0 = 12                                                               # STEP 10
avl2.insert(int2)                                                       # STEP 11
int3 = 1                                                                # STEP 12
avl2.insert(int2)                                                       # STEP 13
avl2.delete(int2)                                                       # STEP 14
result = avl2.find(int2)                                                # STEP 15
avl2 = avl.AVLTree()                                                    # STEP 16
int2 = 6                                                                # STEP 17
avl2.insert(int3)                                                       # STEP 18
avl2.insert(int3)                                                       # STEP 19
avl2.delete(int0)                                                       # STEP 20
avl2.insert(int0)                                                       # STEP 21
result = avl2.find(int3)                                                # STEP 22
int0 = 17                                                               # STEP 23
avl2.delete(int0)                                                       # STEP 24
int0 = 20                                                               # STEP 25
avl2.insert(int3)                                                       # STEP 26
result = avl2.inorder()                                                 # STEP 27
int3 = 2                                                                # STEP 28
avl2.insert(int3)                                                       # STEP 29
avl2.insert(int1)                                                       # STEP 30
avl2.insert(int1)                                                       # STEP 31
avl2.delete(int3)                                                       # STEP 32
avl2.insert(int3)                                                       # STEP 33
avl2.delete(int3)                                                       # STEP 34
avl2.insert(int3)                                                       # STEP 35
int3 = 20                                                               # STEP 36
avl1 = avl.AVLTree()                                                    # STEP 37
int1 = 11                                                               # STEP 38
avl1.insert(int2)                                                       # STEP 39
avl1.insert(int1)                                                       # STEP 40
avl2.delete(int1)                                                       # STEP 41
avl2.delete(int3)                                                       # STEP 42
avl1.insert(int3)                                                       # STEP 43
avl1.insert(int2)                                                       # STEP 44
result = avl2.find(int2)                                                # STEP 45
avl1.insert(int1)                                                       # STEP 46
avl2.delete(int0)                                                       # STEP 47
avl2.insert(int0)                                                       # STEP 48
int2 = 8                                                                # STEP 49
avl2.insert(int1)                                                       # STEP 50
avl2.display()                                                          # STEP 51
avl1.insert(int2)                                                       # STEP 52
avl1.insert(int1)                                                       # STEP 53
avl1 == avl2                                                            # STEP 54
avl2.display()                                                          # STEP 55
result = avl2.find(int3)                                                # STEP 56
int1 = 7                                                                # STEP 57
int2 = 10                                                               # STEP 58
avl2.insert(int2)                                                       # STEP 59
int2 = 7                                                                # STEP 60
avl1.delete(int3)                                                       # STEP 61
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x101f6ea28>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE 3
int2 = 4                                                                 # STEP 0
int3 = 19                                                                # STEP 1
int1 = 14                                                                # STEP 2
int0 = 18                                                                # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
avl2.delete(int2)                                                        # STEP 5
result = avl2.find(int2)                                                 # STEP 6
avl2.insert(int1)                                                        # STEP 7
int1 = 15                                                                # STEP 8
result = avl2.find(int0)                                                 # STEP 9
avl2.insert(int3)                                                       # STEP 10
int3 = 20                                                               # STEP 11
avl2.insert(int3)                                                       # STEP 12
avl2.delete(int1)                                                       # STEP 13
avl2.insert(int3)                                                       # STEP 14
result = avl2.inorder()                                                 # STEP 15
avl2.insert(int1)                                                       # STEP 16
avl2.delete(int2)                                                       # STEP 17
avl2.insert(int0)                                                       # STEP 18
avl2.insert(int1)                                                       # STEP 19
avl2.delete(int2)                                                       # STEP 20
avl2.insert(int0)                                                       # STEP 21
avl2.delete(int0)                                                       # STEP 22
avl2.delete(int0)                                                       # STEP 23
avl2.delete(int0)                                                       # STEP 24
avl2.insert(int1)                                                       # STEP 25
avl2.delete(int3)                                                       # STEP 26
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x101e13998>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
214 BRANCHES COVERED
161 STATEMENTS COVERED

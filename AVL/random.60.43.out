Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.99945.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10416eb48>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 53 steps

SAVING TEST AS failure.99945.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 10                                                                # STEP 0
ACTION: int2 = 10 
int2 = None : <type 'NoneType'>
=> int2 = 10 : <type 'int'>
==================================================
int1 = 10                                                                # STEP 1
ACTION: int1 = 10 
int1 = None : <type 'NoneType'>
=> int1 = 10 : <type 'int'>
==================================================
int0 = 7                                                                 # STEP 2
ACTION: int0 = 7 
int0 = None : <type 'NoneType'>
=> int0 = 7 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 3
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x1045551b8> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int3 = 14                                                                # STEP 4
ACTION: int3 = 14 
int3 = None : <type 'NoneType'>
=> int3 = 14 : <type 'int'>
==================================================
avl2.delete(int3)                                                        # STEP 5
ACTION: avl2.delete(int3) 
int3 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1045551b8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.insert(int3)                                                        # STEP 6
ACTION: avl2.insert(int3) 
int3 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1045551b8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([14]) : <type 'set'>
==================================================
int3 = 3                                                                 # STEP 7
ACTION: int3 = 3 
int3 = 14 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
result = avl2.find(int1)                                                 # STEP 8
ACTION: result = avl2.find(int1) 
int1 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1045551b8> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
result = avl2.find(int0)                                                 # STEP 9
ACTION: result = avl2.find(int0) 
int0 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1045551b8> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
int0 = 1                                                                # STEP 10
ACTION: int0 = 1 
int0 = 7 : <type 'int'>
=> int0 = 1 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 11
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x1045551b8> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int3)                                                       # STEP 12
ACTION: avl2.delete(int3) 
int3 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1045551b8> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int3 = 15                                                               # STEP 13
ACTION: int3 = 15 
int3 = 3 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
int1 = 9                                                                # STEP 14
ACTION: int1 = 9 
int1 = 10 : <type 'int'>
=> int1 = 9 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 15
ACTION: avl2.insert(int1) 
int1 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1045551b8> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([9, 14]) : <type 'set'>
==================================================
avl2 == avl2                                                            # STEP 16
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x1045551b8> : <type 'instance'>
avl_REF2 = set([9, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl1 = avl.AVLTree()                                                    # STEP 17
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x1047c37e8> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl2 == avl1                                                            # STEP 18
ACTION: avl2 == avl1 
avl2 = <avl.AVLTree instance at 0x1045551b8> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x1047c37e8> : <type 'instance'>
avl_REF2 = set([9, 14]) : <type 'set'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
int1 = 13                                                               # STEP 19
ACTION: int1 = 13 
int1 = 9 : <type 'int'>
=> int1 = 13 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 20
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x1045551b8> : <type 'instance'>
avl_REF2 = set([9, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2 == avl1                                                            # STEP 21
ACTION: avl2 == avl1 
avl2 = <avl.AVLTree instance at 0x1045551b8> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x1047c37e8> : <type 'instance'>
avl_REF2 = set([9, 14]) : <type 'set'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
avl1.insert(int1)                                                       # STEP 22
ACTION: avl1.insert(int1) 
int1 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1047c37e8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([13]) : <type 'set'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 23
ACTION: avl2 = avl.AVLTree() 
avl2 = <avl.AVLTree instance at 0x1045551b8> : <type 'instance'>
avl_REF2 = set([9, 14]) : <type 'set'>
=> avl2 = <avl.AVLTree instance at 0x1047c78c0> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int1 = 19                                                               # STEP 24
ACTION: int1 = 19 
int1 = 13 : <type 'int'>
=> int1 = 19 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 25
ACTION: avl1.delete(int2) 
int2 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1047c37e8> : <type 'instance'>
avl_REF1 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl2.insert(int1)                                                       # STEP 26
ACTION: avl2.insert(int1) 
int1 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1047c78c0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([19]) : <type 'set'>
==================================================
int1 = 7                                                                # STEP 27
ACTION: int1 = 7 
int1 = 19 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
int2 = 6                                                                # STEP 28
ACTION: int2 = 6 
int2 = 10 : <type 'int'>
=> int2 = 6 : <type 'int'>
==================================================
result = avl1.find(int2)                                                # STEP 29
ACTION: result = avl1.find(int2) 
int2 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1047c37e8> : <type 'instance'>
avl_REF1 = set([13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
result = avl1.find(int1)                                                # STEP 30
ACTION: result = avl1.find(int1) 
int1 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1047c37e8> : <type 'instance'>
avl_REF1 = set([13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl2 == avl1                                                            # STEP 31
ACTION: avl2 == avl1 
avl2 = <avl.AVLTree instance at 0x1047c78c0> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x1047c37e8> : <type 'instance'>
avl_REF2 = set([19]) : <type 'set'>
avl_REF1 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
int1 = 2                                                                # STEP 32
ACTION: int1 = 2 
int1 = 7 : <type 'int'>
=> int1 = 2 : <type 'int'>
==================================================
int2 = 4                                                                # STEP 33
ACTION: int2 = 4 
int2 = 6 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 34
ACTION: avl2.insert(int3) 
int3 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1047c78c0> : <type 'instance'>
avl_REF2 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([19, 15]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 35
ACTION: avl1.delete(int3) 
int3 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1047c37e8> : <type 'instance'>
avl_REF1 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int3 = 16                                                               # STEP 36
ACTION: int3 = 16 
int3 = 15 : <type 'int'>
=> int3 = 16 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 37
ACTION: avl1.insert(int2) 
int2 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1047c37e8> : <type 'instance'>
avl_REF1 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([4, 13]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 38
ACTION: avl2.insert(int0) 
int0 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1047c78c0> : <type 'instance'>
avl_REF2 = set([19, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([1, 19, 15]) : <type 'set'>
==================================================
int2 = 5                                                                # STEP 39
ACTION: int2 = 5 
int2 = 4 : <type 'int'>
=> int2 = 5 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 40
ACTION: avl2.delete(int0) 
int0 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1047c78c0> : <type 'instance'>
avl_REF2 = set([1, 19, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([19, 15]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 41
ACTION: avl2.insert(int2) 
int2 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1047c78c0> : <type 'instance'>
avl_REF2 = set([19, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([19, 5, 15]) : <type 'set'>
==================================================
result = avl2.find(int3)                                                # STEP 42
ACTION: result = avl2.find(int3) 
int3 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1047c78c0> : <type 'instance'>
avl_REF2 = set([19, 5, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
result = avl1.find(int0)                                                # STEP 43
ACTION: result = avl1.find(int0) 
int0 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1047c37e8> : <type 'instance'>
avl_REF1 = set([4, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl1.insert(int2)                                                       # STEP 44
ACTION: avl1.insert(int2) 
int2 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1047c37e8> : <type 'instance'>
avl_REF1 = set([4, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([4, 13, 5]) : <type 'set'>
==================================================
int0 = 8                                                                # STEP 45
ACTION: int0 = 8 
int0 = 1 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 46
ACTION: avl2.insert(int0) 
int0 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1047c78c0> : <type 'instance'>
avl_REF2 = set([19, 5, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([8, 19, 5, 15]) : <type 'set'>
==================================================
int0 = 16                                                               # STEP 47
ACTION: int0 = 16 
int0 = 8 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 48
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x1047c37e8> : <type 'instance'>
avl_REF1 = set([4, 13, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
int3 = 14                                                               # STEP 49
ACTION: int3 = 14 
int3 = 16 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
int2 = 15                                                               # STEP 50
ACTION: int2 = 15 
int2 = 5 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 51
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x1047f8098> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 52
ACTION: avl2.delete(int2) 
int2 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1047c78c0> : <type 'instance'>
avl_REF2 = set([8, 19, 5, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([8, 19, 5]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1047f8e18>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #4 STEP #77 (0:00:30.081561) Fri Apr 28 05:23:27 2017 [ 146 stmts 194 branches ]
  10 [3:1]
-- < 7 [2:1]
---- < 1 [1:-1]
------ > 6 [0:0] L
---- > 8 [0:0] L
-- > 13 [1:0]
---- < 11 [0:0] L
---- > 14 [0:0] L
set([1, 6, 7, 8, 10, 11, 13, 14])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1040d8248>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 94 steps

SAVING TEST AS failure.99945.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 10                                                                # STEP 0
ACTION: int3 = 10 
int3 = None : <type 'NoneType'>
=> int3 = 10 : <type 'int'>
==================================================
int2 = 6                                                                 # STEP 1
ACTION: int2 = 6 
int2 = None : <type 'NoneType'>
=> int2 = 6 : <type 'int'>
==================================================
int0 = 2                                                                 # STEP 2
ACTION: int0 = 2 
int0 = None : <type 'NoneType'>
=> int0 = 2 : <type 'int'>
==================================================
int1 = 9                                                                 # STEP 3
ACTION: int1 = 9 
int1 = None : <type 'NoneType'>
=> int1 = 9 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x1040cfb48> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl2.find(int0)                                                 # STEP 5
ACTION: result = avl2.find(int0) 
int0 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1040cfb48> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
result = avl2.find(int1)                                                 # STEP 6
ACTION: result = avl2.find(int1) 
int1 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1040cfb48> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
result = avl2.find(int0)                                                 # STEP 7
ACTION: result = avl2.find(int0) 
int0 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1040cfb48> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl1 = avl.AVLTree()                                                     # STEP 8
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x1040d8b48> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int0 = 16                                                                # STEP 9
ACTION: int0 = 16 
int0 = 2 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 10
ACTION: avl2.delete(int0) 
int0 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1040cfb48> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
result = avl1.find(int3)                                                # STEP 11
ACTION: result = avl1.find(int3) 
int3 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1040d8b48> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl2.insert(int2)                                                       # STEP 12
ACTION: avl2.insert(int2) 
int2 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1040cfb48> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([6]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 13
ACTION: avl1.insert(int0) 
int0 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1040d8b48> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([16]) : <type 'set'>
==================================================
int1 = 6                                                                # STEP 14
ACTION: int1 = 6 
int1 = 9 : <type 'int'>
=> int1 = 6 : <type 'int'>
==================================================
int0 = 1                                                                # STEP 15
ACTION: int0 = 1 
int0 = 16 : <type 'int'>
=> int0 = 1 : <type 'int'>
==================================================
int3 = 17                                                               # STEP 16
ACTION: int3 = 17 
int3 = 10 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 17
ACTION: avl2.delete(int1) 
int1 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1040cfb48> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 18
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1040d8b48> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int2 = 7                                                                # STEP 19
ACTION: int2 = 7 
int2 = 6 : <type 'int'>
=> int2 = 7 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 20
ACTION: avl2.insert(int1) 
int1 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1040cfb48> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([6]) : <type 'set'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 21
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x1040c7ef0> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0 == avl2                                                            # STEP 22
ACTION: avl0 == avl2 
avl0 = <avl.AVLTree instance at 0x1040c7ef0> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x1040cfb48> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
avl0.delete(int3)                                                       # STEP 23
ACTION: avl0.delete(int3) 
int3 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1040c7ef0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int1 = 5                                                                # STEP 24
ACTION: int1 = 5 
int1 = 6 : <type 'int'>
=> int1 = 5 : <type 'int'>
==================================================
int3 = 9                                                                # STEP 25
ACTION: int3 = 9 
int3 = 17 : <type 'int'>
=> int3 = 9 : <type 'int'>
==================================================
result = avl2.find(int2)                                                # STEP 26
ACTION: result = avl2.find(int2) 
int2 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1040cfb48> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
result = avl1.find(int2)                                                # STEP 27
ACTION: result = avl1.find(int2) 
int2 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1040d8b48> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl1.delete(int0)                                                       # STEP 28
ACTION: avl1.delete(int0) 
int0 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1040d8b48> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.insert(int1)                                                       # STEP 29
ACTION: avl1.insert(int1) 
int1 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1040d8b48> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([16, 5]) : <type 'set'>
==================================================
avl2 == avl0                                                            # STEP 30
ACTION: avl2 == avl0 
avl2 = <avl.AVLTree instance at 0x1040cfb48> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x1040c7ef0> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF0 
==================================================
int1 = 1                                                                # STEP 31
ACTION: int1 = 1 
int1 = 5 : <type 'int'>
=> int1 = 1 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 32
ACTION: avl0.insert(int3) 
int3 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1040c7ef0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([9]) : <type 'set'>
==================================================
int2 = 14                                                               # STEP 33
ACTION: int2 = 14 
int2 = 7 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
int3 = 12                                                               # STEP 34
ACTION: int3 = 12 
int3 = 9 : <type 'int'>
=> int3 = 12 : <type 'int'>
==================================================
result = avl1.find(int1)                                                # STEP 35
ACTION: result = avl1.find(int1) 
int1 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1040d8b48> : <type 'instance'>
avl_REF1 = set([16, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int0 = 13                                                               # STEP 36
ACTION: int0 = 13 
int0 = 1 : <type 'int'>
=> int0 = 13 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 37
ACTION: avl0.insert(int1) 
int1 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1040c7ef0> : <type 'instance'>
avl_REF0 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([9, 1]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 38
ACTION: avl1.delete(int2) 
int2 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1040d8b48> : <type 'instance'>
avl_REF1 = set([16, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int2 = 9                                                                # STEP 39
ACTION: int2 = 9 
int2 = 14 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 40
ACTION: avl0.insert(int0) 
int0 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1040c7ef0> : <type 'instance'>
avl_REF0 = set([9, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([9, 13, 1]) : <type 'set'>
==================================================
int1 = 9                                                                # STEP 41
ACTION: int1 = 9 
int1 = 1 : <type 'int'>
=> int1 = 9 : <type 'int'>
==================================================
result = avl2.find(int0)                                                # STEP 42
ACTION: result = avl2.find(int0) 
int0 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1040cfb48> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl2 == avl0                                                            # STEP 43
ACTION: avl2 == avl0 
avl2 = <avl.AVLTree instance at 0x1040cfb48> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x1040c7ef0> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
avl_REF0 = set([9, 13, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF0 
==================================================
avl0.insert(int1)                                                       # STEP 44
ACTION: avl0.insert(int1) 
int1 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1040c7ef0> : <type 'instance'>
avl_REF0 = set([9, 13, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl1 == avl1                                                            # STEP 45
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x1040d8b48> : <type 'instance'>
avl_REF1 = set([16, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl2.delete(int3)                                                       # STEP 46
ACTION: avl2.delete(int3) 
int3 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1040cfb48> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int1 = 4                                                                # STEP 47
ACTION: int1 = 4 
int1 = 9 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
avl0 == avl1                                                            # STEP 48
ACTION: avl0 == avl1 
avl0 = <avl.AVLTree instance at 0x1040c7ef0> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x1040d8b48> : <type 'instance'>
avl_REF0 = set([9, 13, 1]) : <type 'set'>
avl_REF1 = set([16, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF1 
==================================================
int3 = 2                                                                # STEP 49
ACTION: int3 = 2 
int3 = 12 : <type 'int'>
=> int3 = 2 : <type 'int'>
==================================================
avl2 == avl2                                                            # STEP 50
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x1040cfb48> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
result = avl2.find(int3)                                                # STEP 51
ACTION: result = avl2.find(int3) 
int3 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1040cfb48> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
int3 = 4                                                                # STEP 52
ACTION: int3 = 4 
int3 = 2 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 53
ACTION: avl0.insert(int3) 
int3 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1040c7ef0> : <type 'instance'>
avl_REF0 = set([9, 13, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([9, 4, 13, 1]) : <type 'set'>
==================================================
int0 = 4                                                                # STEP 54
ACTION: int0 = 4 
int0 = 13 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
avl2 == avl1                                                            # STEP 55
ACTION: avl2 == avl1 
avl2 = <avl.AVLTree instance at 0x1040cfb48> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x1040d8b48> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
avl_REF1 = set([16, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
int3 = 14                                                               # STEP 56
ACTION: int3 = 14 
int3 = 4 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 57
ACTION: avl0.insert(int0) 
int0 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1040c7ef0> : <type 'instance'>
avl_REF0 = set([9, 4, 13, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
avl1.insert(int3)                                                       # STEP 58
ACTION: avl1.insert(int3) 
int3 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1040d8b48> : <type 'instance'>
avl_REF1 = set([16, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([16, 5, 14]) : <type 'set'>
==================================================
int3 = 13                                                               # STEP 59
ACTION: int3 = 13 
int3 = 14 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 60
ACTION: avl2.delete(int1) 
int1 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1040cfb48> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int1 = 18                                                               # STEP 61
ACTION: int1 = 18 
int1 = 4 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
int0 = 13                                                               # STEP 62
ACTION: int0 = 13 
int0 = 4 : <type 'int'>
=> int0 = 13 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 63
ACTION: avl1.delete(int1) 
int1 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1040d8b48> : <type 'instance'>
avl_REF1 = set([16, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int1 = 3                                                                # STEP 64
ACTION: int1 = 3 
int1 = 18 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
avl1 == avl0                                                            # STEP 65
ACTION: avl1 == avl0 
avl1 = <avl.AVLTree instance at 0x1040d8b48> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x1040c7ef0> : <type 'instance'>
avl_REF1 = set([16, 5, 14]) : <type 'set'>
avl_REF0 = set([9, 4, 13, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
avl2.insert(int0)                                                       # STEP 66
ACTION: avl2.insert(int0) 
int0 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1040cfb48> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([13, 6]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 67
ACTION: avl2.insert(int2) 
int2 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1040cfb48> : <type 'instance'>
avl_REF2 = set([13, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([9, 13, 6]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 68
ACTION: avl1.delete(int3) 
int3 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1040d8b48> : <type 'instance'>
avl_REF1 = set([16, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int0 = 12                                                               # STEP 69
ACTION: int0 = 12 
int0 = 13 : <type 'int'>
=> int0 = 12 : <type 'int'>
==================================================
int3 = 20                                                               # STEP 70
ACTION: int3 = 20 
int3 = 13 : <type 'int'>
=> int3 = 20 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 71
ACTION: avl0.delete(int1) 
int1 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1040c7ef0> : <type 'instance'>
avl_REF0 = set([9, 4, 13, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int1 = 3                                                                # STEP 72
ACTION: int1 = 3 
int1 = 3 : <type 'int'>
==================================================
int2 = 2                                                                # STEP 73
ACTION: int2 = 2 
int2 = 9 : <type 'int'>
=> int2 = 2 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 74
ACTION: avl0.insert(int2) 
int2 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1040c7ef0> : <type 'instance'>
avl_REF0 = set([9, 4, 13, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([9, 2, 4, 13, 1]) : <type 'set'>
==================================================
int2 = 6                                                                # STEP 75
ACTION: int2 = 6 
int2 = 2 : <type 'int'>
=> int2 = 6 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 76
ACTION: avl2.insert(int0) 
int0 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1040cfb48> : <type 'instance'>
avl_REF2 = set([9, 13, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([9, 12, 13, 6]) : <type 'set'>
==================================================
result = avl2.find(int0)                                                # STEP 77
ACTION: result = avl2.find(int0) 
int0 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1040cfb48> : <type 'instance'>
avl_REF2 = set([9, 12, 13, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl2 == avl0                                                            # STEP 78
ACTION: avl2 == avl0 
avl2 = <avl.AVLTree instance at 0x1040cfb48> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x1040c7ef0> : <type 'instance'>
avl_REF2 = set([9, 12, 13, 6]) : <type 'set'>
avl_REF0 = set([9, 2, 4, 13, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF0 
==================================================
int0 = 5                                                                # STEP 79
ACTION: int0 = 5 
int0 = 12 : <type 'int'>
=> int0 = 5 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 80
ACTION: avl1.insert(int1) 
int1 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1040d8b48> : <type 'instance'>
avl_REF1 = set([16, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([16, 3, 5, 14]) : <type 'set'>
==================================================
result = avl0.find(int0)                                                # STEP 81
ACTION: result = avl0.find(int0) 
int0 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1040c7ef0> : <type 'instance'>
avl_REF0 = set([9, 2, 4, 13, 1]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
avl0 == avl2                                                            # STEP 82
ACTION: avl0 == avl2 
avl0 = <avl.AVLTree instance at 0x1040c7ef0> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x1040cfb48> : <type 'instance'>
avl_REF0 = set([9, 2, 4, 13, 1]) : <type 'set'>
avl_REF2 = set([9, 12, 13, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
int1 = 19                                                               # STEP 83
ACTION: int1 = 19 
int1 = 3 : <type 'int'>
=> int1 = 19 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 84
ACTION: avl2.insert(int3) 
int3 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1040cfb48> : <type 'instance'>
avl_REF2 = set([9, 12, 13, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([9, 12, 13, 6, 20]) : <type 'set'>
==================================================
int0 = 9                                                                # STEP 85
ACTION: int0 = 9 
int0 = 5 : <type 'int'>
=> int0 = 9 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 86
ACTION: avl1.insert(int0) 
int0 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1040d8b48> : <type 'instance'>
avl_REF1 = set([16, 3, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([16, 9, 3, 5, 14]) : <type 'set'>
==================================================
avl0 == avl1                                                            # STEP 87
ACTION: avl0 == avl1 
avl0 = <avl.AVLTree instance at 0x1040c7ef0> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x1040d8b48> : <type 'instance'>
avl_REF0 = set([9, 2, 4, 13, 1]) : <type 'set'>
avl_REF1 = set([16, 9, 3, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF1 
==================================================
result = avl2.find(int1)                                                # STEP 88
ACTION: result = avl2.find(int1) 
int1 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1040cfb48> : <type 'instance'>
avl_REF2 = set([9, 12, 13, 6, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl1 == avl1                                                            # STEP 89
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x1040d8b48> : <type 'instance'>
avl_REF1 = set([16, 9, 3, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
int0 = 10                                                               # STEP 90
ACTION: int0 = 10 
int0 = 9 : <type 'int'>
=> int0 = 10 : <type 'int'>
==================================================
int1 = 9                                                                # STEP 91
ACTION: int1 = 9 
int1 = 19 : <type 'int'>
=> int1 = 9 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 92
ACTION: avl1.delete(int1) 
int1 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1040d8b48> : <type 'instance'>
avl_REF1 = set([16, 9, 3, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([16, 3, 5, 14]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 93
ACTION: avl2.delete(int2) 
int2 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1040cfb48> : <type 'instance'>
avl_REF2 = set([9, 12, 13, 6, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([9, 12, 13, 20]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1040ef7e8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 61
STOPPING TESTING DUE TO TIMEOUT
8.58500169664 PERCENT COVERED
60.2033879757 TOTAL RUNTIME
7 EXECUTED
608 TOTAL TEST OPERATIONS
24.0489063263 TIME SPENT EXECUTING TEST OPERATIONS
0.0216588973999 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
24.2142584324 TIME SPENT CHECKING PROPERTIES
48.2631647587 TOTAL TIME SPENT RUNNING SUT
0.00434255599976 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
2 FAILED
0 REPEATS OF FAILURES
2 ACTUAL DISTINCT FAILURES

FAILURE 0
int2 = 10                                                                # STEP 0
int1 = 10                                                                # STEP 1
int0 = 7                                                                 # STEP 2
avl2 = avl.AVLTree()                                                     # STEP 3
int3 = 14                                                                # STEP 4
avl2.delete(int3)                                                        # STEP 5
avl2.insert(int3)                                                        # STEP 6
int3 = 3                                                                 # STEP 7
result = avl2.find(int1)                                                 # STEP 8
result = avl2.find(int0)                                                 # STEP 9
int0 = 1                                                                # STEP 10
result = avl2.inorder()                                                 # STEP 11
avl2.delete(int3)                                                       # STEP 12
int3 = 15                                                               # STEP 13
int1 = 9                                                                # STEP 14
avl2.insert(int1)                                                       # STEP 15
avl2 == avl2                                                            # STEP 16
avl1 = avl.AVLTree()                                                    # STEP 17
avl2 == avl1                                                            # STEP 18
int1 = 13                                                               # STEP 19
result = avl2.inorder()                                                 # STEP 20
avl2 == avl1                                                            # STEP 21
avl1.insert(int1)                                                       # STEP 22
avl2 = avl.AVLTree()                                                    # STEP 23
int1 = 19                                                               # STEP 24
avl1.delete(int2)                                                       # STEP 25
avl2.insert(int1)                                                       # STEP 26
int1 = 7                                                                # STEP 27
int2 = 6                                                                # STEP 28
result = avl1.find(int2)                                                # STEP 29
result = avl1.find(int1)                                                # STEP 30
avl2 == avl1                                                            # STEP 31
int1 = 2                                                                # STEP 32
int2 = 4                                                                # STEP 33
avl2.insert(int3)                                                       # STEP 34
avl1.delete(int3)                                                       # STEP 35
int3 = 16                                                               # STEP 36
avl1.insert(int2)                                                       # STEP 37
avl2.insert(int0)                                                       # STEP 38
int2 = 5                                                                # STEP 39
avl2.delete(int0)                                                       # STEP 40
avl2.insert(int2)                                                       # STEP 41
result = avl2.find(int3)                                                # STEP 42
result = avl1.find(int0)                                                # STEP 43
avl1.insert(int2)                                                       # STEP 44
int0 = 8                                                                # STEP 45
avl2.insert(int0)                                                       # STEP 46
int0 = 16                                                               # STEP 47
avl1 == avl1                                                            # STEP 48
int3 = 14                                                               # STEP 49
int2 = 15                                                               # STEP 50
avl0 = avl.AVLTree()                                                    # STEP 51
avl2.delete(int2)                                                       # STEP 52
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1047f8e18>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE 1
int3 = 10                                                                # STEP 0
int2 = 6                                                                 # STEP 1
int0 = 2                                                                 # STEP 2
int1 = 9                                                                 # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
result = avl2.find(int0)                                                 # STEP 5
result = avl2.find(int1)                                                 # STEP 6
result = avl2.find(int0)                                                 # STEP 7
avl1 = avl.AVLTree()                                                     # STEP 8
int0 = 16                                                                # STEP 9
avl2.delete(int0)                                                       # STEP 10
result = avl1.find(int3)                                                # STEP 11
avl2.insert(int2)                                                       # STEP 12
avl1.insert(int0)                                                       # STEP 13
int1 = 6                                                                # STEP 14
int0 = 1                                                                # STEP 15
int3 = 17                                                               # STEP 16
avl2.delete(int1)                                                       # STEP 17
result = avl1.inorder()                                                 # STEP 18
int2 = 7                                                                # STEP 19
avl2.insert(int1)                                                       # STEP 20
avl0 = avl.AVLTree()                                                    # STEP 21
avl0 == avl2                                                            # STEP 22
avl0.delete(int3)                                                       # STEP 23
int1 = 5                                                                # STEP 24
int3 = 9                                                                # STEP 25
result = avl2.find(int2)                                                # STEP 26
result = avl1.find(int2)                                                # STEP 27
avl1.delete(int0)                                                       # STEP 28
avl1.insert(int1)                                                       # STEP 29
avl2 == avl0                                                            # STEP 30
int1 = 1                                                                # STEP 31
avl0.insert(int3)                                                       # STEP 32
int2 = 14                                                               # STEP 33
int3 = 12                                                               # STEP 34
result = avl1.find(int1)                                                # STEP 35
int0 = 13                                                               # STEP 36
avl0.insert(int1)                                                       # STEP 37
avl1.delete(int2)                                                       # STEP 38
int2 = 9                                                                # STEP 39
avl0.insert(int0)                                                       # STEP 40
int1 = 9                                                                # STEP 41
result = avl2.find(int0)                                                # STEP 42
avl2 == avl0                                                            # STEP 43
avl0.insert(int1)                                                       # STEP 44
avl1 == avl1                                                            # STEP 45
avl2.delete(int3)                                                       # STEP 46
int1 = 4                                                                # STEP 47
avl0 == avl1                                                            # STEP 48
int3 = 2                                                                # STEP 49
avl2 == avl2                                                            # STEP 50
result = avl2.find(int3)                                                # STEP 51
int3 = 4                                                                # STEP 52
avl0.insert(int3)                                                       # STEP 53
int0 = 4                                                                # STEP 54
avl2 == avl1                                                            # STEP 55
int3 = 14                                                               # STEP 56
avl0.insert(int0)                                                       # STEP 57
avl1.insert(int3)                                                       # STEP 58
int3 = 13                                                               # STEP 59
avl2.delete(int1)                                                       # STEP 60
int1 = 18                                                               # STEP 61
int0 = 13                                                               # STEP 62
avl1.delete(int1)                                                       # STEP 63
int1 = 3                                                                # STEP 64
avl1 == avl0                                                            # STEP 65
avl2.insert(int0)                                                       # STEP 66
avl2.insert(int2)                                                       # STEP 67
avl1.delete(int3)                                                       # STEP 68
int0 = 12                                                               # STEP 69
int3 = 20                                                               # STEP 70
avl0.delete(int1)                                                       # STEP 71
int1 = 3                                                                # STEP 72
int2 = 2                                                                # STEP 73
avl0.insert(int2)                                                       # STEP 74
int2 = 6                                                                # STEP 75
avl2.insert(int0)                                                       # STEP 76
result = avl2.find(int0)                                                # STEP 77
avl2 == avl0                                                            # STEP 78
int0 = 5                                                                # STEP 79
avl1.insert(int1)                                                       # STEP 80
result = avl0.find(int0)                                                # STEP 81
avl0 == avl2                                                            # STEP 82
int1 = 19                                                               # STEP 83
avl2.insert(int3)                                                       # STEP 84
int0 = 9                                                                # STEP 85
avl1.insert(int0)                                                       # STEP 86
avl0 == avl1                                                            # STEP 87
result = avl2.find(int1)                                                # STEP 88
avl1 == avl1                                                            # STEP 89
int0 = 10                                                               # STEP 90
int1 = 9                                                                # STEP 91
avl1.delete(int1)                                                       # STEP 92
avl2.delete(int2)                                                       # STEP 93
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1040ef7e8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
216 BRANCHES COVERED
162 STATEMENTS COVERED

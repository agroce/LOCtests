Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.1013.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105913878>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 64 steps

SAVING TEST AS failure.1013.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 3                                                                 # STEP 0
ACTION: int3 = 3 
int3 = None : <type 'NoneType'>
=> int3 = 3 : <type 'int'>
==================================================
int2 = 4                                                                 # STEP 1
ACTION: int2 = 4 
int2 = None : <type 'NoneType'>
=> int2 = 4 : <type 'int'>
==================================================
int1 = 18                                                                # STEP 2
ACTION: int1 = 18 
int1 = None : <type 'NoneType'>
=> int1 = 18 : <type 'int'>
==================================================
int0 = 20                                                                # STEP 3
ACTION: int0 = 20 
int0 = None : <type 'NoneType'>
=> int0 = 20 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x103d15050> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.delete(int0)                                                        # STEP 5
ACTION: avl1.delete(int0) 
int0 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103d15050> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int0 = 19                                                                # STEP 6
ACTION: int0 = 19 
int0 = 20 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
result = avl1.find(int1)                                                 # STEP 7
ACTION: result = avl1.find(int1) 
int1 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103d15050> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int1 = 8                                                                 # STEP 8
ACTION: int1 = 8 
int1 = 18 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
avl1.delete(int0)                                                        # STEP 9
ACTION: avl1.delete(int0) 
int0 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103d15050> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
result = avl1.find(int0)                                                # STEP 10
ACTION: result = avl1.find(int0) 
int0 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103d15050> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl1.delete(int2)                                                       # STEP 11
ACTION: avl1.delete(int2) 
int2 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103d15050> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
result = avl1.find(int3)                                                # STEP 12
ACTION: result = avl1.find(int3) 
int3 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103d15050> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
int3 = 14                                                               # STEP 13
ACTION: int3 = 14 
int3 = 3 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
int0 = 14                                                               # STEP 14
ACTION: int0 = 14 
int0 = 19 : <type 'int'>
=> int0 = 14 : <type 'int'>
==================================================
int2 = 6                                                                # STEP 15
ACTION: int2 = 6 
int2 = 4 : <type 'int'>
=> int2 = 6 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 16
ACTION: avl1.insert(int1) 
int1 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103d15050> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([8]) : <type 'set'>
==================================================
result = avl1.find(int1)                                                # STEP 17
ACTION: result = avl1.find(int1) 
int1 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103d15050> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl2 = avl.AVLTree()                                                    # STEP 18
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x103e1aab8> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int1 = 14                                                               # STEP 19
ACTION: int1 = 14 
int1 = 8 : <type 'int'>
=> int1 = 14 : <type 'int'>
==================================================
result = avl1.find(int2)                                                # STEP 20
ACTION: result = avl1.find(int2) 
int2 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103d15050> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int2 = 10                                                               # STEP 21
ACTION: int2 = 10 
int2 = 6 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
result = avl2.find(int1)                                                # STEP 22
ACTION: result = avl2.find(int1) 
int1 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e1aab8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl2.delete(int0)                                                       # STEP 23
ACTION: avl2.delete(int0) 
int0 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e1aab8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int1 = 20                                                               # STEP 24
ACTION: int1 = 20 
int1 = 14 : <type 'int'>
=> int1 = 20 : <type 'int'>
==================================================
avl2 == avl1                                                            # STEP 25
ACTION: avl2 == avl1 
avl2 = <avl.AVLTree instance at 0x103e1aab8> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x103d15050> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
int0 = 5                                                                # STEP 26
ACTION: int0 = 5 
int0 = 14 : <type 'int'>
=> int0 = 5 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 27
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x103e1aab8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl1 == avl2                                                            # STEP 28
ACTION: avl1 == avl2 
avl1 = <avl.AVLTree instance at 0x103d15050> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x103e1aab8> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
avl1.delete(int0)                                                       # STEP 29
ACTION: avl1.delete(int0) 
int0 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103d15050> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int0 = 17                                                               # STEP 30
ACTION: int0 = 17 
int0 = 5 : <type 'int'>
=> int0 = 17 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 31
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x103d15050> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl2.insert(int1)                                                       # STEP 32
ACTION: avl2.insert(int1) 
int1 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e1aab8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([20]) : <type 'set'>
==================================================
int1 = 19                                                               # STEP 33
ACTION: int1 = 19 
int1 = 20 : <type 'int'>
=> int1 = 19 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 34
ACTION: avl1.insert(int3) 
int3 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103d15050> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([8, 14]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 35
ACTION: avl2.delete(int0) 
int0 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e1aab8> : <type 'instance'>
avl_REF2 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl1.insert(int0)                                                       # STEP 36
ACTION: avl1.insert(int0) 
int0 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103d15050> : <type 'instance'>
avl_REF1 = set([8, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([8, 17, 14]) : <type 'set'>
==================================================
int3 = 14                                                               # STEP 37
ACTION: int3 = 14 
int3 = 14 : <type 'int'>
==================================================
int0 = 7                                                                # STEP 38
ACTION: int0 = 7 
int0 = 17 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 39
ACTION: avl2.insert(int2) 
int2 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e1aab8> : <type 'instance'>
avl_REF2 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([10, 20]) : <type 'set'>
==================================================
result = avl2.find(int2)                                                # STEP 40
ACTION: result = avl2.find(int2) 
int2 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e1aab8> : <type 'instance'>
avl_REF2 = set([10, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl1.insert(int3)                                                       # STEP 41
ACTION: avl1.insert(int3) 
int3 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103d15050> : <type 'instance'>
avl_REF1 = set([8, 17, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
avl1 == avl1                                                            # STEP 42
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x103d15050> : <type 'instance'>
avl_REF1 = set([8, 17, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
int3 = 9                                                                # STEP 43
ACTION: int3 = 9 
int3 = 14 : <type 'int'>
=> int3 = 9 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 44
ACTION: avl1.delete(int3) 
int3 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103d15050> : <type 'instance'>
avl_REF1 = set([8, 17, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int3 = 18                                                               # STEP 45
ACTION: int3 = 18 
int3 = 9 : <type 'int'>
=> int3 = 18 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 46
ACTION: avl1.insert(int0) 
int0 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103d15050> : <type 'instance'>
avl_REF1 = set([8, 17, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([8, 17, 14, 7]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 47
ACTION: avl2.delete(int1) 
int1 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e1aab8> : <type 'instance'>
avl_REF2 = set([10, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int2 = 9                                                                # STEP 48
ACTION: int2 = 9 
int2 = 10 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 49
ACTION: avl1.insert(int2) 
int2 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103d15050> : <type 'instance'>
avl_REF1 = set([8, 17, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([8, 17, 9, 14, 7]) : <type 'set'>
==================================================
int0 = 20                                                               # STEP 50
ACTION: int0 = 20 
int0 = 7 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
int2 = 11                                                               # STEP 51
ACTION: int2 = 11 
int2 = 9 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
result = avl2.find(int3)                                                # STEP 52
ACTION: result = avl2.find(int3) 
int3 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e1aab8> : <type 'instance'>
avl_REF2 = set([10, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
int3 = 10                                                               # STEP 53
ACTION: int3 = 10 
int3 = 18 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
int1 = 17                                                               # STEP 54
ACTION: int1 = 17 
int1 = 19 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 55
ACTION: avl2.delete(int3) 
int3 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e1aab8> : <type 'instance'>
avl_REF2 = set([10, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([20]) : <type 'set'>
==================================================
int3 = 15                                                               # STEP 56
ACTION: int3 = 15 
int3 = 10 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
avl1 == avl2                                                            # STEP 57
ACTION: avl1 == avl2 
avl1 = <avl.AVLTree instance at 0x103d15050> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x103e1aab8> : <type 'instance'>
avl_REF1 = set([8, 17, 9, 14, 7]) : <type 'set'>
avl_REF2 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
result = avl2.find(int3)                                                # STEP 58
ACTION: result = avl2.find(int3) 
int3 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e1aab8> : <type 'instance'>
avl_REF2 = set([20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
int3 = 20                                                               # STEP 59
ACTION: int3 = 20 
int3 = 15 : <type 'int'>
=> int3 = 20 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 60
ACTION: avl2.insert(int3) 
int3 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e1aab8> : <type 'instance'>
avl_REF2 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
avl1 == avl2                                                            # STEP 61
ACTION: avl1 == avl2 
avl1 = <avl.AVLTree instance at 0x103d15050> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x103e1aab8> : <type 'instance'>
avl_REF1 = set([8, 17, 9, 14, 7]) : <type 'set'>
avl_REF2 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
avl2.delete(int1)                                                       # STEP 62
ACTION: avl2.delete(int1) 
int1 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e1aab8> : <type 'instance'>
avl_REF2 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl1.delete(int1)                                                       # STEP 63
ACTION: avl1.delete(int1) 
int1 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103d15050> : <type 'instance'>
avl_REF1 = set([8, 17, 9, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([8, 9, 14, 7]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105804878>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #4 STEP #20 (0:00:30.081370) Fri Apr 28 07:56:15 2017 [ 130 stmts 174 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10589b638>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 52 steps

SAVING TEST AS failure.1013.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 4                                                                 # STEP 0
ACTION: int0 = 4 
int0 = None : <type 'NoneType'>
=> int0 = 4 : <type 'int'>
==================================================
int1 = 14                                                                # STEP 1
ACTION: int1 = 14 
int1 = None : <type 'NoneType'>
=> int1 = 14 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 2
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x103e71a28> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int3 = 16                                                                # STEP 3
ACTION: int3 = 16 
int3 = None : <type 'NoneType'>
=> int3 = 16 : <type 'int'>
==================================================
int2 = 1                                                                 # STEP 4
ACTION: int2 = 1 
int2 = None : <type 'NoneType'>
=> int2 = 1 : <type 'int'>
==================================================
avl1.delete(int0)                                                        # STEP 5
ACTION: avl1.delete(int0) 
int0 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103e71a28> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int0 = 7                                                                 # STEP 6
ACTION: int0 = 7 
int0 = 4 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
avl1.insert(int1)                                                        # STEP 7
ACTION: avl1.insert(int1) 
int1 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103e71a28> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([14]) : <type 'set'>
==================================================
int1 = 8                                                                 # STEP 8
ACTION: int1 = 8 
int1 = 14 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
avl1.insert(int3)                                                        # STEP 9
ACTION: avl1.insert(int3) 
int3 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103e71a28> : <type 'instance'>
avl_REF1 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([16, 14]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 10
ACTION: avl1.insert(int3) 
int3 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103e71a28> : <type 'instance'>
avl_REF1 = set([16, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
int3 = 1                                                                # STEP 11
ACTION: int3 = 1 
int3 = 16 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
result = avl1.find(int0)                                                # STEP 12
ACTION: result = avl1.find(int0) 
int0 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103e71a28> : <type 'instance'>
avl_REF1 = set([16, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
int0 = 8                                                                # STEP 13
ACTION: int0 = 8 
int0 = 7 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 14
ACTION: avl1.delete(int1) 
int1 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103e71a28> : <type 'instance'>
avl_REF1 = set([16, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.insert(int3)                                                       # STEP 15
ACTION: avl1.insert(int3) 
int3 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103e71a28> : <type 'instance'>
avl_REF1 = set([16, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([16, 1, 14]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 16
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x103e71a28> : <type 'instance'>
avl_REF1 = set([16, 1, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int0)                                                       # STEP 17
ACTION: avl1.insert(int0) 
int0 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103e71a28> : <type 'instance'>
avl_REF1 = set([16, 1, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([16, 1, 14, 8]) : <type 'set'>
==================================================
result = avl1.find(int0)                                                # STEP 18
ACTION: result = avl1.find(int0) 
int0 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103e71a28> : <type 'instance'>
avl_REF1 = set([16, 1, 14, 8]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
int1 = 15                                                               # STEP 19
ACTION: int1 = 15 
int1 = 8 : <type 'int'>
=> int1 = 15 : <type 'int'>
==================================================
int3 = 5                                                                # STEP 20
ACTION: int3 = 5 
int3 = 1 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 21
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x105893b48> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int0 = 6                                                                # STEP 22
ACTION: int0 = 6 
int0 = 8 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 23
ACTION: avl1.delete(int0) 
int0 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103e71a28> : <type 'instance'>
avl_REF1 = set([16, 1, 14, 8]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
result = avl2.find(int3)                                                # STEP 24
ACTION: result = avl2.find(int3) 
int3 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105893b48> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl1.delete(int3)                                                       # STEP 25
ACTION: avl1.delete(int3) 
int3 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103e71a28> : <type 'instance'>
avl_REF1 = set([16, 1, 14, 8]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.delete(int2)                                                       # STEP 26
ACTION: avl1.delete(int2) 
int2 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103e71a28> : <type 'instance'>
avl_REF1 = set([16, 1, 14, 8]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([16, 14, 8]) : <type 'set'>
==================================================
result = avl1.find(int3)                                                # STEP 27
ACTION: result = avl1.find(int3) 
int3 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103e71a28> : <type 'instance'>
avl_REF1 = set([16, 14, 8]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
int2 = 10                                                               # STEP 28
ACTION: int2 = 10 
int2 = 1 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 29
ACTION: avl2.insert(int0) 
int0 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105893b48> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([6]) : <type 'set'>
==================================================
int3 = 8                                                                # STEP 30
ACTION: int3 = 8 
int3 = 5 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
result = avl2.find(int3)                                                # STEP 31
ACTION: result = avl2.find(int3) 
int3 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105893b48> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
result = avl1.find(int0)                                                # STEP 32
ACTION: result = avl1.find(int0) 
int0 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103e71a28> : <type 'instance'>
avl_REF1 = set([16, 14, 8]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl1.insert(int3)                                                       # STEP 33
ACTION: avl1.insert(int3) 
int3 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103e71a28> : <type 'instance'>
avl_REF1 = set([16, 14, 8]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
int3 = 7                                                                # STEP 34
ACTION: int3 = 7 
int3 = 8 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 35
ACTION: avl2.insert(int1) 
int1 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105893b48> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([6, 15]) : <type 'set'>
==================================================
int1 = 19                                                               # STEP 36
ACTION: int1 = 19 
int1 = 15 : <type 'int'>
=> int1 = 19 : <type 'int'>
==================================================
int0 = 13                                                               # STEP 37
ACTION: int0 = 13 
int0 = 6 : <type 'int'>
=> int0 = 13 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 38
ACTION: avl1.delete(int2) 
int2 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103e71a28> : <type 'instance'>
avl_REF1 = set([16, 14, 8]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl0 = avl.AVLTree()                                                    # STEP 39
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x103e4ab00> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 40
ACTION: avl1.insert(int3) 
int3 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103e71a28> : <type 'instance'>
avl_REF1 = set([16, 14, 8]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([16, 7, 14, 8]) : <type 'set'>
==================================================
result = avl1.find(int2)                                                # STEP 41
ACTION: result = avl1.find(int2) 
int2 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103e71a28> : <type 'instance'>
avl_REF1 = set([16, 7, 14, 8]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl0.insert(int2)                                                       # STEP 42
ACTION: avl0.insert(int2) 
int2 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103e4ab00> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([10]) : <type 'set'>
==================================================
int2 = 8                                                                # STEP 43
ACTION: int2 = 8 
int2 = 10 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
int3 = 6                                                                # STEP 44
ACTION: int3 = 6 
int3 = 7 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 45
ACTION: avl1.delete(int3) 
int3 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103e71a28> : <type 'instance'>
avl_REF1 = set([16, 7, 14, 8]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int3 = 19                                                               # STEP 46
ACTION: int3 = 19 
int3 = 6 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
result = avl2.find(int3)                                                # STEP 47
ACTION: result = avl2.find(int3) 
int3 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105893b48> : <type 'instance'>
avl_REF2 = set([6, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
result = avl0.find(int1)                                                # STEP 48
ACTION: result = avl0.find(int1) 
int1 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103e4ab00> : <type 'instance'>
avl_REF0 = set([10]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
int3 = 16                                                               # STEP 49
ACTION: int3 = 16 
int3 = 19 : <type 'int'>
=> int3 = 16 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 50
ACTION: avl2.delete(int1) 
int1 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105893b48> : <type 'instance'>
avl_REF2 = set([6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl1.delete(int3)                                                       # STEP 51
ACTION: avl1.delete(int3) 
int3 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103e71a28> : <type 'instance'>
avl_REF1 = set([16, 7, 14, 8]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([7, 14, 8]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10581ecb0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 59
STOPPING TESTING DUE TO TIMEOUT
7.32948761452 PERCENT COVERED
60.182144165 TOTAL RUNTIME
7 EXECUTED
575 TOTAL TEST OPERATIONS
24.8549940586 TIME SPENT EXECUTING TEST OPERATIONS
0.0214645862579 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
24.9721159935 TIME SPENT CHECKING PROPERTIES
49.8271100521 TOTAL TIME SPENT RUNNING SUT
0.00449991226196 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
2 FAILED
0 REPEATS OF FAILURES
2 ACTUAL DISTINCT FAILURES

FAILURE 0
int3 = 3                                                                 # STEP 0
int2 = 4                                                                 # STEP 1
int1 = 18                                                                # STEP 2
int0 = 20                                                                # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
avl1.delete(int0)                                                        # STEP 5
int0 = 19                                                                # STEP 6
result = avl1.find(int1)                                                 # STEP 7
int1 = 8                                                                 # STEP 8
avl1.delete(int0)                                                        # STEP 9
result = avl1.find(int0)                                                # STEP 10
avl1.delete(int2)                                                       # STEP 11
result = avl1.find(int3)                                                # STEP 12
int3 = 14                                                               # STEP 13
int0 = 14                                                               # STEP 14
int2 = 6                                                                # STEP 15
avl1.insert(int1)                                                       # STEP 16
result = avl1.find(int1)                                                # STEP 17
avl2 = avl.AVLTree()                                                    # STEP 18
int1 = 14                                                               # STEP 19
result = avl1.find(int2)                                                # STEP 20
int2 = 10                                                               # STEP 21
result = avl2.find(int1)                                                # STEP 22
avl2.delete(int0)                                                       # STEP 23
int1 = 20                                                               # STEP 24
avl2 == avl1                                                            # STEP 25
int0 = 5                                                                # STEP 26
result = avl2.inorder()                                                 # STEP 27
avl1 == avl2                                                            # STEP 28
avl1.delete(int0)                                                       # STEP 29
int0 = 17                                                               # STEP 30
result = avl1.inorder()                                                 # STEP 31
avl2.insert(int1)                                                       # STEP 32
int1 = 19                                                               # STEP 33
avl1.insert(int3)                                                       # STEP 34
avl2.delete(int0)                                                       # STEP 35
avl1.insert(int0)                                                       # STEP 36
int3 = 14                                                               # STEP 37
int0 = 7                                                                # STEP 38
avl2.insert(int2)                                                       # STEP 39
result = avl2.find(int2)                                                # STEP 40
avl1.insert(int3)                                                       # STEP 41
avl1 == avl1                                                            # STEP 42
int3 = 9                                                                # STEP 43
avl1.delete(int3)                                                       # STEP 44
int3 = 18                                                               # STEP 45
avl1.insert(int0)                                                       # STEP 46
avl2.delete(int1)                                                       # STEP 47
int2 = 9                                                                # STEP 48
avl1.insert(int2)                                                       # STEP 49
int0 = 20                                                               # STEP 50
int2 = 11                                                               # STEP 51
result = avl2.find(int3)                                                # STEP 52
int3 = 10                                                               # STEP 53
int1 = 17                                                               # STEP 54
avl2.delete(int3)                                                       # STEP 55
int3 = 15                                                               # STEP 56
avl1 == avl2                                                            # STEP 57
result = avl2.find(int3)                                                # STEP 58
int3 = 20                                                               # STEP 59
avl2.insert(int3)                                                       # STEP 60
avl1 == avl2                                                            # STEP 61
avl2.delete(int1)                                                       # STEP 62
avl1.delete(int1)                                                       # STEP 63
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105804878>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE 1
int0 = 4                                                                 # STEP 0
int1 = 14                                                                # STEP 1
avl1 = avl.AVLTree()                                                     # STEP 2
int3 = 16                                                                # STEP 3
int2 = 1                                                                 # STEP 4
avl1.delete(int0)                                                        # STEP 5
int0 = 7                                                                 # STEP 6
avl1.insert(int1)                                                        # STEP 7
int1 = 8                                                                 # STEP 8
avl1.insert(int3)                                                        # STEP 9
avl1.insert(int3)                                                       # STEP 10
int3 = 1                                                                # STEP 11
result = avl1.find(int0)                                                # STEP 12
int0 = 8                                                                # STEP 13
avl1.delete(int1)                                                       # STEP 14
avl1.insert(int3)                                                       # STEP 15
result = avl1.inorder()                                                 # STEP 16
avl1.insert(int0)                                                       # STEP 17
result = avl1.find(int0)                                                # STEP 18
int1 = 15                                                               # STEP 19
int3 = 5                                                                # STEP 20
avl2 = avl.AVLTree()                                                    # STEP 21
int0 = 6                                                                # STEP 22
avl1.delete(int0)                                                       # STEP 23
result = avl2.find(int3)                                                # STEP 24
avl1.delete(int3)                                                       # STEP 25
avl1.delete(int2)                                                       # STEP 26
result = avl1.find(int3)                                                # STEP 27
int2 = 10                                                               # STEP 28
avl2.insert(int0)                                                       # STEP 29
int3 = 8                                                                # STEP 30
result = avl2.find(int3)                                                # STEP 31
result = avl1.find(int0)                                                # STEP 32
avl1.insert(int3)                                                       # STEP 33
int3 = 7                                                                # STEP 34
avl2.insert(int1)                                                       # STEP 35
int1 = 19                                                               # STEP 36
int0 = 13                                                               # STEP 37
avl1.delete(int2)                                                       # STEP 38
avl0 = avl.AVLTree()                                                    # STEP 39
avl1.insert(int3)                                                       # STEP 40
result = avl1.find(int2)                                                # STEP 41
avl0.insert(int2)                                                       # STEP 42
int2 = 8                                                                # STEP 43
int3 = 6                                                                # STEP 44
avl1.delete(int3)                                                       # STEP 45
int3 = 19                                                               # STEP 46
result = avl2.find(int3)                                                # STEP 47
result = avl0.find(int1)                                                # STEP 48
int3 = 16                                                               # STEP 49
avl2.delete(int1)                                                       # STEP 50
avl1.delete(int3)                                                       # STEP 51
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10581ecb0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
185 BRANCHES COVERED
137 STATEMENTS COVERED

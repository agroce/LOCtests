Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=True, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.323.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103e59200>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 68 steps

SAVING TEST AS failure.323.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 12                                                                # STEP 0
ACTION: int0 = 12 
int0 = None : <type 'NoneType'>
=> int0 = 12 : <type 'int'>
==================================================
int2 = 6                                                                 # STEP 1
ACTION: int2 = 6 
int2 = None : <type 'NoneType'>
=> int2 = 6 : <type 'int'>
==================================================
int3 = 19                                                                # STEP 2
ACTION: int3 = 19 
int3 = None : <type 'NoneType'>
=> int3 = 19 : <type 'int'>
==================================================
int1 = 2                                                                 # STEP 3
ACTION: int1 = 2 
int1 = None : <type 'NoneType'>
=> int1 = 2 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x103de2170> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int0)                                                        # STEP 5
ACTION: avl2.insert(int0) 
int0 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103de2170> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([12]) : <type 'set'>
==================================================
int0 = 14                                                                # STEP 6
ACTION: int0 = 14 
int0 = 12 : <type 'int'>
=> int0 = 14 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 7
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x103a94c68> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl2.delete(int3)                                                        # STEP 8
ACTION: avl2.delete(int3) 
int3 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103de2170> : <type 'instance'>
avl_REF2 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int3 = 1                                                                 # STEP 9
ACTION: int3 = 1 
int3 = 19 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 10
ACTION: avl1.delete(int1) 
int1 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103a94c68> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.insert(int1)                                                       # STEP 11
ACTION: avl1.insert(int1) 
int1 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103a94c68> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([2]) : <type 'set'>
==================================================
avl1 == avl2                                                            # STEP 12
ACTION: avl1 == avl2 
avl1 = <avl.AVLTree instance at 0x103a94c68> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x103de2170> : <type 'instance'>
avl_REF1 = set([2]) : <type 'set'>
avl_REF2 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
avl1.delete(int2)                                                       # STEP 13
ACTION: avl1.delete(int2) 
int2 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103a94c68> : <type 'instance'>
avl_REF1 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.insert(int1)                                                       # STEP 14
ACTION: avl1.insert(int1) 
int1 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103a94c68> : <type 'instance'>
avl_REF1 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
int1 = 15                                                               # STEP 15
ACTION: int1 = 15 
int1 = 2 : <type 'int'>
=> int1 = 15 : <type 'int'>
==================================================
int2 = 15                                                               # STEP 16
ACTION: int2 = 15 
int2 = 6 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 17
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x103a94c68> : <type 'instance'>
avl_REF1 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.insert(int3)                                                       # STEP 18
ACTION: avl1.insert(int3) 
int3 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103a94c68> : <type 'instance'>
avl_REF1 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([1, 2]) : <type 'set'>
==================================================
int3 = 4                                                                # STEP 19
ACTION: int3 = 4 
int3 = 1 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 20
ACTION: avl2.insert(int0) 
int0 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103de2170> : <type 'instance'>
avl_REF2 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([12, 14]) : <type 'set'>
==================================================
avl2 == avl1                                                            # STEP 21
ACTION: avl2 == avl1 
avl2 = <avl.AVLTree instance at 0x103de2170> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x103a94c68> : <type 'instance'>
avl_REF2 = set([12, 14]) : <type 'set'>
avl_REF1 = set([1, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
int0 = 18                                                               # STEP 22
ACTION: int0 = 18 
int0 = 14 : <type 'int'>
=> int0 = 18 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 23
ACTION: avl1.delete(int0) 
int0 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103a94c68> : <type 'instance'>
avl_REF1 = set([1, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int0 = 6                                                                # STEP 24
ACTION: int0 = 6 
int0 = 18 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 25
ACTION: avl1.delete(int0) 
int0 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103a94c68> : <type 'instance'>
avl_REF1 = set([1, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int0 = 19                                                               # STEP 26
ACTION: int0 = 19 
int0 = 6 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 27
ACTION: avl2.delete(int1) 
int1 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103de2170> : <type 'instance'>
avl_REF2 = set([12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int1 = 3                                                                # STEP 28
ACTION: int1 = 3 
int1 = 15 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 29
ACTION: avl1.insert(int2) 
int2 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103a94c68> : <type 'instance'>
avl_REF1 = set([1, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([1, 2, 15]) : <type 'set'>
==================================================
int2 = 17                                                               # STEP 30
ACTION: int2 = 17 
int2 = 15 : <type 'int'>
=> int2 = 17 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 31
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x103b1fe18> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 32
ACTION: avl0.insert(int3) 
int3 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103b1fe18> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([4]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 33
ACTION: avl1.insert(int1) 
int1 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103a94c68> : <type 'instance'>
avl_REF1 = set([1, 2, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([1, 2, 3, 15]) : <type 'set'>
==================================================
avl2 == avl0                                                            # STEP 34
ACTION: avl2 == avl0 
avl2 = <avl.AVLTree instance at 0x103de2170> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x103b1fe18> : <type 'instance'>
avl_REF2 = set([12, 14]) : <type 'set'>
avl_REF0 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF0 
==================================================
int1 = 11                                                               # STEP 35
ACTION: int1 = 11 
int1 = 3 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 36
ACTION: avl0.delete(int0) 
int0 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103b1fe18> : <type 'instance'>
avl_REF0 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl1.insert(int3)                                                       # STEP 37
ACTION: avl1.insert(int3) 
int3 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103a94c68> : <type 'instance'>
avl_REF1 = set([1, 2, 3, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([1, 2, 3, 4, 15]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 38
ACTION: avl1.insert(int0) 
int0 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103a94c68> : <type 'instance'>
avl_REF1 = set([1, 2, 3, 4, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([1, 2, 3, 4, 15, 19]) : <type 'set'>
==================================================
int0 = 20                                                               # STEP 39
ACTION: int0 = 20 
int0 = 19 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
int3 = 1                                                                # STEP 40
ACTION: int3 = 1 
int3 = 4 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 41
ACTION: avl1.delete(int2) 
int2 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103a94c68> : <type 'instance'>
avl_REF1 = set([1, 2, 3, 4, 15, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl2 == avl2                                                            # STEP 42
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x103de2170> : <type 'instance'>
avl_REF2 = set([12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl1 == avl1                                                            # STEP 43
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x103a94c68> : <type 'instance'>
avl_REF1 = set([1, 2, 3, 4, 15, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
int2 = 16                                                               # STEP 44
ACTION: int2 = 16 
int2 = 17 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 45
ACTION: avl1.insert(int0) 
int0 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103a94c68> : <type 'instance'>
avl_REF1 = set([1, 2, 3, 4, 15, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([1, 2, 3, 4, 15, 19, 20]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 46
ACTION: avl2.insert(int3) 
int3 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103de2170> : <type 'instance'>
avl_REF2 = set([12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([1, 12, 14]) : <type 'set'>
==================================================
int0 = 11                                                               # STEP 47
ACTION: int0 = 11 
int0 = 20 : <type 'int'>
=> int0 = 11 : <type 'int'>
==================================================
avl2 == avl1                                                            # STEP 48
ACTION: avl2 == avl1 
avl2 = <avl.AVLTree instance at 0x103de2170> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x103a94c68> : <type 'instance'>
avl_REF2 = set([1, 12, 14]) : <type 'set'>
avl_REF1 = set([1, 2, 3, 4, 15, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
int3 = 7                                                                # STEP 49
ACTION: int3 = 7 
int3 = 1 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 50
ACTION: avl0.delete(int3) 
int3 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103b1fe18> : <type 'instance'>
avl_REF0 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl1.delete(int1)                                                       # STEP 51
ACTION: avl1.delete(int1) 
int1 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103a94c68> : <type 'instance'>
avl_REF1 = set([1, 2, 3, 4, 15, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1 == avl2                                                            # STEP 52
ACTION: avl1 == avl2 
avl1 = <avl.AVLTree instance at 0x103a94c68> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x103de2170> : <type 'instance'>
avl_REF1 = set([1, 2, 3, 4, 15, 19, 20]) : <type 'set'>
avl_REF2 = set([1, 12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
avl1.insert(int0)                                                       # STEP 53
ACTION: avl1.insert(int0) 
int0 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103a94c68> : <type 'instance'>
avl_REF1 = set([1, 2, 3, 4, 15, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([1, 2, 3, 4, 11, 15, 19, 20]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 54
ACTION: avl0.delete(int3) 
int3 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103b1fe18> : <type 'instance'>
avl_REF0 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl2.insert(int1)                                                       # STEP 55
ACTION: avl2.insert(int1) 
int1 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103de2170> : <type 'instance'>
avl_REF2 = set([1, 12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([1, 11, 12, 14]) : <type 'set'>
==================================================
int3 = 1                                                                # STEP 56
ACTION: int3 = 1 
int3 = 7 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
int1 = 19                                                               # STEP 57
ACTION: int1 = 19 
int1 = 11 : <type 'int'>
=> int1 = 19 : <type 'int'>
==================================================
int0 = 15                                                               # STEP 58
ACTION: int0 = 15 
int0 = 11 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 59
ACTION: avl0.insert(int3) 
int3 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103b1fe18> : <type 'instance'>
avl_REF0 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([1, 4]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 60
ACTION: avl1.insert(int2) 
int2 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103a94c68> : <type 'instance'>
avl_REF1 = set([1, 2, 3, 4, 11, 15, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([1, 2, 3, 4, 11, 15, 16, 19, 20]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 61
ACTION: avl2.delete(int1) 
int1 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103de2170> : <type 'instance'>
avl_REF2 = set([1, 11, 12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int3 = 15                                                               # STEP 62
ACTION: int3 = 15 
int3 = 1 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
int2 = 8                                                                # STEP 63
ACTION: int2 = 8 
int2 = 16 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 64
ACTION: avl0.delete(int0) 
int0 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103b1fe18> : <type 'instance'>
avl_REF0 = set([1, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int1 = 19                                                               # STEP 65
ACTION: int1 = 19 
int1 = 19 : <type 'int'>
==================================================
int0 = 19                                                               # STEP 66
ACTION: int0 = 19 
int0 = 15 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 67
ACTION: avl1.delete(int1) 
int1 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103a94c68> : <type 'instance'>
avl_REF1 = set([1, 2, 3, 4, 11, 15, 16, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([1, 2, 3, 4, 11, 15, 16, 20]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103a8f1b8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #4 STEP #73 (0:00:30.038541) Fri Apr 28 06:04:11 2017 [ 146 stmts 194 branches ]
  7 [2:0]
-- < 1 [1:-1]
---- > 3 [0:0] L
-- > 12 [1:0]
---- < 8 [0:0] L
---- > 13 [0:0] L
set([1, 3, 7, 8, 12, 13])
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 71
STOPPING TESTING DUE TO TIMEOUT
8.51713607058 PERCENT COVERED
60.1789820194 TOTAL RUNTIME
8 EXECUTED
739 TOTAL TEST OPERATIONS
27.4368982315 TIME SPENT EXECUTING TEST OPERATIONS
0.0276782512665 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
27.5160987377 TIME SPENT CHECKING PROPERTIES
54.9529969692 TOTAL TIME SPENT RUNNING SUT
0.00409889221191 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int0 = 12                                                                # STEP 0
int2 = 6                                                                 # STEP 1
int3 = 19                                                                # STEP 2
int1 = 2                                                                 # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
avl2.insert(int0)                                                        # STEP 5
int0 = 14                                                                # STEP 6
avl1 = avl.AVLTree()                                                     # STEP 7
avl2.delete(int3)                                                        # STEP 8
int3 = 1                                                                 # STEP 9
avl1.delete(int1)                                                       # STEP 10
avl1.insert(int1)                                                       # STEP 11
avl1 == avl2                                                            # STEP 12
avl1.delete(int2)                                                       # STEP 13
avl1.insert(int1)                                                       # STEP 14
int1 = 15                                                               # STEP 15
int2 = 15                                                               # STEP 16
avl1 == avl1                                                            # STEP 17
avl1.insert(int3)                                                       # STEP 18
int3 = 4                                                                # STEP 19
avl2.insert(int0)                                                       # STEP 20
avl2 == avl1                                                            # STEP 21
int0 = 18                                                               # STEP 22
avl1.delete(int0)                                                       # STEP 23
int0 = 6                                                                # STEP 24
avl1.delete(int0)                                                       # STEP 25
int0 = 19                                                               # STEP 26
avl2.delete(int1)                                                       # STEP 27
int1 = 3                                                                # STEP 28
avl1.insert(int2)                                                       # STEP 29
int2 = 17                                                               # STEP 30
avl0 = avl.AVLTree()                                                    # STEP 31
avl0.insert(int3)                                                       # STEP 32
avl1.insert(int1)                                                       # STEP 33
avl2 == avl0                                                            # STEP 34
int1 = 11                                                               # STEP 35
avl0.delete(int0)                                                       # STEP 36
avl1.insert(int3)                                                       # STEP 37
avl1.insert(int0)                                                       # STEP 38
int0 = 20                                                               # STEP 39
int3 = 1                                                                # STEP 40
avl1.delete(int2)                                                       # STEP 41
avl2 == avl2                                                            # STEP 42
avl1 == avl1                                                            # STEP 43
int2 = 16                                                               # STEP 44
avl1.insert(int0)                                                       # STEP 45
avl2.insert(int3)                                                       # STEP 46
int0 = 11                                                               # STEP 47
avl2 == avl1                                                            # STEP 48
int3 = 7                                                                # STEP 49
avl0.delete(int3)                                                       # STEP 50
avl1.delete(int1)                                                       # STEP 51
avl1 == avl2                                                            # STEP 52
avl1.insert(int0)                                                       # STEP 53
avl0.delete(int3)                                                       # STEP 54
avl2.insert(int1)                                                       # STEP 55
int3 = 1                                                                # STEP 56
int1 = 19                                                               # STEP 57
int0 = 15                                                               # STEP 58
avl0.insert(int3)                                                       # STEP 59
avl1.insert(int2)                                                       # STEP 60
avl2.delete(int1)                                                       # STEP 61
int3 = 15                                                               # STEP 62
int2 = 8                                                                # STEP 63
avl0.delete(int0)                                                       # STEP 64
int1 = 19                                                               # STEP 65
int0 = 19                                                               # STEP 66
avl1.delete(int1)                                                       # STEP 67
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103a8f1b8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
214 BRANCHES COVERED
161 STATEMENTS COVERED

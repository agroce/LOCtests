Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.62345.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1045545a8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
Original test has 73 steps

SAVING TEST AS failure.62345.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
avl2 = avl.AVLTree()                                                     # STEP 0
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x104550830> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int0 = 15                                                                # STEP 1
ACTION: int0 = 15 
int0 = None : <type 'NoneType'>
=> int0 = 15 : <type 'int'>
==================================================
avl2.delete(int0)                                                        # STEP 2
ACTION: avl2.delete(int0) 
int0 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104550830> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.insert(int0)                                                        # STEP 3
ACTION: avl2.insert(int0) 
int0 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104550830> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([15]) : <type 'set'>
==================================================
int1 = 10                                                                # STEP 4
ACTION: int1 = 10 
int1 = None : <type 'NoneType'>
=> int1 = 10 : <type 'int'>
==================================================
int0 = 10                                                                # STEP 5
ACTION: int0 = 10 
int0 = 15 : <type 'int'>
=> int0 = 10 : <type 'int'>
==================================================
avl2.insert(int0)                                                        # STEP 6
ACTION: avl2.insert(int0) 
int0 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104550830> : <type 'instance'>
avl_REF2 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([10, 15]) : <type 'set'>
==================================================
avl2 == avl2                                                             # STEP 7
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x104550830> : <type 'instance'>
avl_REF2 = set([10, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl2.delete(int1)                                                        # STEP 8
ACTION: avl2.delete(int1) 
int1 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104550830> : <type 'instance'>
avl_REF2 = set([10, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([15]) : <type 'set'>
==================================================
result = avl2.inorder()                                                  # STEP 9
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x104550830> : <type 'instance'>
avl_REF2 = set([15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl2.find(int1)                                                # STEP 10
ACTION: result = avl2.find(int1) 
int1 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104550830> : <type 'instance'>
avl_REF2 = set([15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl2.insert(int0)                                                       # STEP 11
ACTION: avl2.insert(int0) 
int0 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104550830> : <type 'instance'>
avl_REF2 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([10, 15]) : <type 'set'>
==================================================
result = avl2.find(int1)                                                # STEP 12
ACTION: result = avl2.find(int1) 
int1 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104550830> : <type 'instance'>
avl_REF2 = set([10, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl2.insert(int0)                                                       # STEP 13
ACTION: avl2.insert(int0) 
int0 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104550830> : <type 'instance'>
avl_REF2 = set([10, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
result = avl2.find(int1)                                                # STEP 14
ACTION: result = avl2.find(int1) 
int1 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104550830> : <type 'instance'>
avl_REF2 = set([10, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl2.insert(int0)                                                       # STEP 15
ACTION: avl2.insert(int0) 
int0 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104550830> : <type 'instance'>
avl_REF2 = set([10, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl2.insert(int0)                                                       # STEP 16
ACTION: avl2.insert(int0) 
int0 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104550830> : <type 'instance'>
avl_REF2 = set([10, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl2.insert(int1)                                                       # STEP 17
ACTION: avl2.insert(int1) 
int1 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104550830> : <type 'instance'>
avl_REF2 = set([10, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl2.delete(int1)                                                       # STEP 18
ACTION: avl2.delete(int1) 
int1 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104550830> : <type 'instance'>
avl_REF2 = set([10, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([15]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 19
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x104550830> : <type 'instance'>
avl_REF2 = set([15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl2.find(int0)                                                # STEP 20
ACTION: result = avl2.find(int0) 
int0 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104550830> : <type 'instance'>
avl_REF2 = set([15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl2.delete(int1)                                                       # STEP 21
ACTION: avl2.delete(int1) 
int1 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104550830> : <type 'instance'>
avl_REF2 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.delete(int0)                                                       # STEP 22
ACTION: avl2.delete(int0) 
int0 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104550830> : <type 'instance'>
avl_REF2 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.insert(int0)                                                       # STEP 23
ACTION: avl2.insert(int0) 
int0 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104550830> : <type 'instance'>
avl_REF2 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([10, 15]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 24
ACTION: avl2.insert(int1) 
int1 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104550830> : <type 'instance'>
avl_REF2 = set([10, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
int2 = 5                                                                # STEP 25
ACTION: int2 = 5 
int2 = None : <type 'NoneType'>
=> int2 = 5 : <type 'int'>
==================================================
result = avl2.find(int0)                                                # STEP 26
ACTION: result = avl2.find(int0) 
int0 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104550830> : <type 'instance'>
avl_REF2 = set([10, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
result = avl2.find(int1)                                                # STEP 27
ACTION: result = avl2.find(int1) 
int1 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104550830> : <type 'instance'>
avl_REF2 = set([10, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
result = avl2.find(int2)                                                # STEP 28
ACTION: result = avl2.find(int2) 
int2 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104550830> : <type 'instance'>
avl_REF2 = set([10, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl2.insert(int2)                                                       # STEP 29
ACTION: avl2.insert(int2) 
int2 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104550830> : <type 'instance'>
avl_REF2 = set([10, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([10, 5, 15]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 30
ACTION: avl2.insert(int2) 
int2 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104550830> : <type 'instance'>
avl_REF2 = set([10, 5, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl2.insert(int0)                                                       # STEP 31
ACTION: avl2.insert(int0) 
int0 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104550830> : <type 'instance'>
avl_REF2 = set([10, 5, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl2.insert(int0)                                                       # STEP 32
ACTION: avl2.insert(int0) 
int0 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104550830> : <type 'instance'>
avl_REF2 = set([10, 5, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl2.insert(int0)                                                       # STEP 33
ACTION: avl2.insert(int0) 
int0 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104550830> : <type 'instance'>
avl_REF2 = set([10, 5, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl2.insert(int2)                                                       # STEP 34
ACTION: avl2.insert(int2) 
int2 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104550830> : <type 'instance'>
avl_REF2 = set([10, 5, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl2.insert(int1)                                                       # STEP 35
ACTION: avl2.insert(int1) 
int1 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104550830> : <type 'instance'>
avl_REF2 = set([10, 5, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl2.delete(int1)                                                       # STEP 36
ACTION: avl2.delete(int1) 
int1 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104550830> : <type 'instance'>
avl_REF2 = set([10, 5, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([5, 15]) : <type 'set'>
==================================================
result = avl2.find(int1)                                                # STEP 37
ACTION: result = avl2.find(int1) 
int1 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104550830> : <type 'instance'>
avl_REF2 = set([5, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int2 = 15                                                               # STEP 38
ACTION: int2 = 15 
int2 = 5 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 39
ACTION: avl2.delete(int1) 
int1 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104550830> : <type 'instance'>
avl_REF2 = set([5, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.delete(int2)                                                       # STEP 40
ACTION: avl2.delete(int2) 
int2 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104550830> : <type 'instance'>
avl_REF2 = set([5, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([5]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 41
ACTION: avl2.insert(int0) 
int0 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104550830> : <type 'instance'>
avl_REF2 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([10, 5]) : <type 'set'>
==================================================
result = avl2.find(int0)                                                # STEP 42
ACTION: result = avl2.find(int0) 
int0 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104550830> : <type 'instance'>
avl_REF2 = set([10, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl2.delete(int2)                                                       # STEP 43
ACTION: avl2.delete(int2) 
int2 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104550830> : <type 'instance'>
avl_REF2 = set([10, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
result = avl2.inorder()                                                 # STEP 44
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x104550830> : <type 'instance'>
avl_REF2 = set([10, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int1 = 4                                                                # STEP 45
ACTION: int1 = 4 
int1 = 10 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 46
ACTION: avl2.delete(int0) 
int0 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104550830> : <type 'instance'>
avl_REF2 = set([10, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([5]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 47
ACTION: avl2.insert(int1) 
int1 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104550830> : <type 'instance'>
avl_REF2 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([4, 5]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 48
ACTION: avl2.insert(int0) 
int0 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104550830> : <type 'instance'>
avl_REF2 = set([4, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([10, 4, 5]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 49
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x104550830> : <type 'instance'>
avl_REF2 = set([10, 4, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int2)                                                       # STEP 50
ACTION: avl2.insert(int2) 
int2 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104550830> : <type 'instance'>
avl_REF2 = set([10, 4, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([10, 4, 5, 15]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 51
ACTION: avl2.insert(int0) 
int0 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104550830> : <type 'instance'>
avl_REF2 = set([10, 4, 5, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl2.delete(int2)                                                       # STEP 52
ACTION: avl2.delete(int2) 
int2 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104550830> : <type 'instance'>
avl_REF2 = set([10, 4, 5, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([10, 4, 5]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 53
ACTION: avl2.delete(int1) 
int1 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104550830> : <type 'instance'>
avl_REF2 = set([10, 4, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([10, 5]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 54
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x104550830> : <type 'instance'>
avl_REF2 = set([10, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int3 = 13                                                               # STEP 55
ACTION: int3 = 13 
int3 = None : <type 'NoneType'>
=> int3 = 13 : <type 'int'>
==================================================
avl2 == avl2                                                            # STEP 56
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x104550830> : <type 'instance'>
avl_REF2 = set([10, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
int0 = 13                                                               # STEP 57
ACTION: int0 = 13 
int0 = 10 : <type 'int'>
=> int0 = 13 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 58
ACTION: avl2.delete(int0) 
int0 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104550830> : <type 'instance'>
avl_REF2 = set([10, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.delete(int3)                                                       # STEP 59
ACTION: avl2.delete(int3) 
int3 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104550830> : <type 'instance'>
avl_REF2 = set([10, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.delete(int3)                                                       # STEP 60
ACTION: avl2.delete(int3) 
int3 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104550830> : <type 'instance'>
avl_REF2 = set([10, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.insert(int2)                                                       # STEP 61
ACTION: avl2.insert(int2) 
int2 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104550830> : <type 'instance'>
avl_REF2 = set([10, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([10, 5, 15]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 62
ACTION: avl2.delete(int2) 
int2 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104550830> : <type 'instance'>
avl_REF2 = set([10, 5, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([10, 5]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 63
ACTION: avl2.delete(int3) 
int3 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104550830> : <type 'instance'>
avl_REF2 = set([10, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
result = avl2.inorder()                                                 # STEP 64
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x104550830> : <type 'instance'>
avl_REF2 = set([10, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl2.find(int1)                                                # STEP 65
ACTION: result = avl2.find(int1) 
int1 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104550830> : <type 'instance'>
avl_REF2 = set([10, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int2 = 3                                                                # STEP 66
ACTION: int2 = 3 
int2 = 15 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 67
ACTION: avl2.delete(int1) 
int1 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104550830> : <type 'instance'>
avl_REF2 = set([10, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int1)                                                       # STEP 68
ACTION: avl2.insert(int1) 
int1 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104550830> : <type 'instance'>
avl_REF2 = set([10, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([10, 4, 5]) : <type 'set'>
==================================================
int1 = 4                                                                # STEP 69
ACTION: int1 = 4 
int1 = 4 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 70
ACTION: avl2.insert(int0) 
int0 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104550830> : <type 'instance'>
avl_REF2 = set([10, 4, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([10, 4, 5, 13]) : <type 'set'>
==================================================
int3 = 19                                                               # STEP 71
ACTION: int3 = 19 
int3 = 13 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 72
ACTION: avl2.delete(int1) 
int1 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104550830> : <type 'instance'>
avl_REF2 = set([10, 4, 5, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([10, 5, 13]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104348f38>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
  12 [2:0]
-- < 5 [1:0]
---- < 4 [0:0] L
---- > 6 [0:0] L
-- > 20 [1:1]
---- < 13 [0:0] L
set([4, 5, 6, 12, 13, 20])
  13 [3:1]
-- < 5 [2:-1]
---- < 1 [0:0] L
---- > 7 [1:-1]
------ > 8 [0:0] L
-- > 20 [1:1]
---- < 19 [0:0] L
set([1, 5, 7, 8, 13, 19, 20])
TEST #3 STEP #41 (0:00:30.046648) Mon May  1 18:17:30 2017 [ 160 stmts 212 branches ]
  12 [2:0]
-- < 7 [1:-1]
---- > 9 [0:0] L
-- > 16 [1:0]
---- < 15 [0:0] L
---- > 17 [0:0] L
set([7, 9, 12, 15, 16, 17])
  12 [2:0]
-- < 8 [1:-1]
---- > 9 [0:0] L
-- > 17 [1:0]
---- < 15 [0:0] L
---- > 19 [0:0] L
set([8, 9, 12, 15, 17, 19])
  12 [2:0]
-- < 7 [1:0]
---- < 1 [0:0] L
---- > 9 [0:0] L
-- > 16 [1:1]
---- < 15 [0:0] L
set([1, 7, 9, 12, 15, 16])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1046c9a28>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
Original test has 80 steps

SAVING TEST AS failure.62345.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 19                                                                # STEP 0
ACTION: int0 = 19 
int0 = None : <type 'NoneType'>
=> int0 = 19 : <type 'int'>
==================================================
int1 = 9                                                                 # STEP 1
ACTION: int1 = 9 
int1 = None : <type 'NoneType'>
=> int1 = 9 : <type 'int'>
==================================================
int3 = 7                                                                 # STEP 2
ACTION: int3 = 7 
int3 = None : <type 'NoneType'>
=> int3 = 7 : <type 'int'>
==================================================
int2 = 10                                                                # STEP 3
ACTION: int2 = 10 
int2 = None : <type 'NoneType'>
=> int2 = 10 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 4
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x1042af758> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
result = avl0.find(int0)                                                 # STEP 5
ACTION: result = avl0.find(int0) 
int0 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1042af758> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
int0 = 15                                                                # STEP 6
ACTION: int0 = 15 
int0 = 19 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 7
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x1047db1b8> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.delete(int3)                                                        # STEP 8
ACTION: avl2.delete(int3) 
int3 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1047db1b8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl0.delete(int3)                                                        # STEP 9
ACTION: avl0.delete(int3) 
int3 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1042af758> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.insert(int3)                                                       # STEP 10
ACTION: avl0.insert(int3) 
int3 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1042af758> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([7]) : <type 'set'>
==================================================
int3 = 12                                                               # STEP 11
ACTION: int3 = 12 
int3 = 7 : <type 'int'>
=> int3 = 12 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 12
ACTION: avl0.insert(int3) 
int3 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1042af758> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([12, 7]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 13
ACTION: avl0.delete(int2) 
int2 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1042af758> : <type 'instance'>
avl_REF0 = set([12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl2.insert(int0)                                                       # STEP 14
ACTION: avl2.insert(int0) 
int0 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1047db1b8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([15]) : <type 'set'>
==================================================
result = avl0.find(int1)                                                # STEP 15
ACTION: result = avl0.find(int1) 
int1 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1042af758> : <type 'instance'>
avl_REF0 = set([12, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl2.insert(int3)                                                       # STEP 16
ACTION: avl2.insert(int3) 
int3 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1047db1b8> : <type 'instance'>
avl_REF2 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([12, 15]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 17
ACTION: avl0.insert(int1) 
int1 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1042af758> : <type 'instance'>
avl_REF0 = set([12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([9, 12, 7]) : <type 'set'>
==================================================
int2 = 9                                                                # STEP 18
ACTION: int2 = 9 
int2 = 10 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 19
ACTION: avl0.insert(int0) 
int0 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1042af758> : <type 'instance'>
avl_REF0 = set([9, 12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([9, 15, 12, 7]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 20
ACTION: avl2.delete(int1) 
int1 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1047db1b8> : <type 'instance'>
avl_REF2 = set([12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl0.delete(int2)                                                       # STEP 21
ACTION: avl0.delete(int2) 
int2 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1042af758> : <type 'instance'>
avl_REF0 = set([9, 15, 12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([15, 12, 7]) : <type 'set'>
==================================================
int0 = 16                                                               # STEP 22
ACTION: int0 = 16 
int0 = 15 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 23
ACTION: avl2.insert(int3) 
int3 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1047db1b8> : <type 'instance'>
avl_REF2 = set([12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
avl2.delete(int1)                                                       # STEP 24
ACTION: avl2.delete(int1) 
int1 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1047db1b8> : <type 'instance'>
avl_REF2 = set([12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl0.insert(int0)                                                       # STEP 25
ACTION: avl0.insert(int0) 
int0 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1042af758> : <type 'instance'>
avl_REF0 = set([15, 12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([16, 15, 12, 7]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 26
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x1047db1b8> : <type 'instance'>
avl_REF2 = set([12, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int2)                                                       # STEP 27
ACTION: avl2.delete(int2) 
int2 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1047db1b8> : <type 'instance'>
avl_REF2 = set([12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.delete(int2)                                                       # STEP 28
ACTION: avl2.delete(int2) 
int2 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1047db1b8> : <type 'instance'>
avl_REF2 = set([12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int0 = 17                                                               # STEP 29
ACTION: int0 = 17 
int0 = 16 : <type 'int'>
=> int0 = 17 : <type 'int'>
==================================================
int3 = 8                                                                # STEP 30
ACTION: int3 = 8 
int3 = 12 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 31
ACTION: avl0.delete(int0) 
int0 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1042af758> : <type 'instance'>
avl_REF0 = set([16, 15, 12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
result = avl0.find(int3)                                                # STEP 32
ACTION: result = avl0.find(int3) 
int3 = 8 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1042af758> : <type 'instance'>
avl_REF0 = set([16, 15, 12, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
avl2.insert(int3)                                                       # STEP 33
ACTION: avl2.insert(int3) 
int3 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1047db1b8> : <type 'instance'>
avl_REF2 = set([12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([8, 12, 15]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 34
ACTION: avl2.delete(int0) 
int0 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1047db1b8> : <type 'instance'>
avl_REF2 = set([8, 12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl0.insert(int2)                                                       # STEP 35
ACTION: avl0.insert(int2) 
int2 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1042af758> : <type 'instance'>
avl_REF0 = set([16, 15, 12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([16, 9, 15, 12, 7]) : <type 'set'>
==================================================
int3 = 17                                                               # STEP 36
ACTION: int3 = 17 
int3 = 8 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
int0 = 1                                                                # STEP 37
ACTION: int0 = 1 
int0 = 17 : <type 'int'>
=> int0 = 1 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 38
ACTION: avl2.insert(int3) 
int3 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1047db1b8> : <type 'instance'>
avl_REF2 = set([8, 12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([8, 17, 12, 15]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 39
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x1047db1b8> : <type 'instance'>
avl_REF2 = set([8, 17, 12, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int2)                                                       # STEP 40
ACTION: avl2.insert(int2) 
int2 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1047db1b8> : <type 'instance'>
avl_REF2 = set([8, 17, 12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([8, 17, 12, 9, 15]) : <type 'set'>
==================================================
int1 = 17                                                               # STEP 41
ACTION: int1 = 17 
int1 = 9 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
avl2 == avl2                                                            # STEP 42
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x1047db1b8> : <type 'instance'>
avl_REF2 = set([8, 17, 12, 9, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
int3 = 19                                                               # STEP 43
ACTION: int3 = 19 
int3 = 17 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 44
ACTION: avl2.delete(int3) 
int3 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1047db1b8> : <type 'instance'>
avl_REF2 = set([8, 17, 12, 9, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl0.insert(int1)                                                       # STEP 45
ACTION: avl0.insert(int1) 
int1 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1042af758> : <type 'instance'>
avl_REF0 = set([16, 9, 15, 12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([7, 9, 12, 15, 16, 17]) : <type 'set'>
==================================================
int3 = 19                                                               # STEP 46
ACTION: int3 = 19 
int3 = 19 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 47
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x1042af758> : <type 'instance'>
avl_REF0 = set([7, 9, 12, 15, 16, 17]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.display()                                                          # STEP 48
ACTION: avl0.display() 
avl0 = <avlbug2.AVLTree instance at 0x1042af758> : <type 'instance'>
avl_REF0 = set([7, 9, 12, 15, 16, 17]) : <type 'set'>
  12 [2:0]
-- < 7 [1:-1]
---- > 9 [0:0] L
-- > 16 [1:0]
---- < 15 [0:0] L
---- > 17 [0:0] L
REFERENCE ACTION: print(avl_REF0) 
set([7, 9, 12, 15, 16, 17])
==================================================
int1 = 17                                                               # STEP 49
ACTION: int1 = 17 
int1 = 17 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 50
ACTION: avl0.delete(int2) 
int2 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1042af758> : <type 'instance'>
avl_REF0 = set([7, 9, 12, 15, 16, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([7, 12, 15, 16, 17]) : <type 'set'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 51
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x1046dcb48> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 52
ACTION: avl2.insert(int2) 
int2 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1047db1b8> : <type 'instance'>
avl_REF2 = set([8, 17, 12, 9, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl2.insert(int3)                                                       # STEP 53
ACTION: avl2.insert(int3) 
int3 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1047db1b8> : <type 'instance'>
avl_REF2 = set([8, 17, 12, 9, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([8, 9, 12, 15, 17, 19]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 54
ACTION: avl0.insert(int0) 
int0 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1042af758> : <type 'instance'>
avl_REF0 = set([7, 12, 15, 16, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([1, 7, 12, 15, 16, 17]) : <type 'set'>
==================================================
result = avl2.find(int2)                                                # STEP 55
ACTION: result = avl2.find(int2) 
int2 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1047db1b8> : <type 'instance'>
avl_REF2 = set([8, 9, 12, 15, 17, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl1.insert(int2)                                                       # STEP 56
ACTION: avl1.insert(int2) 
int2 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1046dcb48> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([9]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 57
ACTION: avl0.delete(int1) 
int1 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1042af758> : <type 'instance'>
avl_REF0 = set([1, 7, 12, 15, 16, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([1, 7, 12, 15, 16]) : <type 'set'>
==================================================
avl2.display()                                                          # STEP 58
ACTION: avl2.display() 
avl2 = <avlbug2.AVLTree instance at 0x1047db1b8> : <type 'instance'>
avl_REF2 = set([8, 9, 12, 15, 17, 19]) : <type 'set'>
  12 [2:0]
-- < 8 [1:-1]
---- > 9 [0:0] L
-- > 17 [1:0]
---- < 15 [0:0] L
---- > 19 [0:0] L
REFERENCE ACTION: print(avl_REF2) 
set([8, 9, 12, 15, 17, 19])
==================================================
avl2.delete(int2)                                                       # STEP 59
ACTION: avl2.delete(int2) 
int2 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1047db1b8> : <type 'instance'>
avl_REF2 = set([8, 9, 12, 15, 17, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([8, 12, 15, 17, 19]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 60
ACTION: avl0.delete(int1) 
int1 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1042af758> : <type 'instance'>
avl_REF0 = set([1, 7, 12, 15, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
result = avl1.find(int1)                                                # STEP 61
ACTION: result = avl1.find(int1) 
int1 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1046dcb48> : <type 'instance'>
avl_REF1 = set([9]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl2.insert(int1)                                                       # STEP 62
ACTION: avl2.insert(int1) 
int1 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1047db1b8> : <type 'instance'>
avl_REF2 = set([8, 12, 15, 17, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl0.insert(int2)                                                       # STEP 63
ACTION: avl0.insert(int2) 
int2 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1042af758> : <type 'instance'>
avl_REF0 = set([1, 7, 12, 15, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([1, 7, 9, 12, 15, 16]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 64
ACTION: avl2.delete(int3) 
int3 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1047db1b8> : <type 'instance'>
avl_REF2 = set([8, 12, 15, 17, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([8, 12, 15, 17]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 65
ACTION: avl0.delete(int3) 
int3 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1042af758> : <type 'instance'>
avl_REF0 = set([1, 7, 9, 12, 15, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl1.insert(int1)                                                       # STEP 66
ACTION: avl1.insert(int1) 
int1 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1046dcb48> : <type 'instance'>
avl_REF1 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([9, 17]) : <type 'set'>
==================================================
int2 = 14                                                               # STEP 67
ACTION: int2 = 14 
int2 = 9 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
result = avl0.find(int0)                                                # STEP 68
ACTION: result = avl0.find(int0) 
int0 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1042af758> : <type 'instance'>
avl_REF0 = set([1, 7, 9, 12, 15, 16]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
int0 = 4                                                                # STEP 69
ACTION: int0 = 4 
int0 = 1 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 70
ACTION: avl2.delete(int0) 
int0 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1047db1b8> : <type 'instance'>
avl_REF2 = set([8, 12, 15, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
result = avl2.inorder()                                                 # STEP 71
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x1047db1b8> : <type 'instance'>
avl_REF2 = set([8, 12, 15, 17]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl0.display()                                                          # STEP 72
ACTION: avl0.display() 
avl0 = <avlbug2.AVLTree instance at 0x1042af758> : <type 'instance'>
avl_REF0 = set([1, 7, 9, 12, 15, 16]) : <type 'set'>
  12 [2:0]
-- < 7 [1:0]
---- < 1 [0:0] L
---- > 9 [0:0] L
-- > 16 [1:1]
---- < 15 [0:0] L
REFERENCE ACTION: print(avl_REF0) 
set([1, 7, 9, 12, 15, 16])
==================================================
avl2.insert(int2)                                                       # STEP 73
ACTION: avl2.insert(int2) 
int2 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1047db1b8> : <type 'instance'>
avl_REF2 = set([8, 12, 15, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([8, 12, 14, 15, 17]) : <type 'set'>
==================================================
int3 = 8                                                                # STEP 74
ACTION: int3 = 8 
int3 = 19 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
avl2 == avl1                                                            # STEP 75
ACTION: avl2 == avl1 
avl2 = <avlbug2.AVLTree instance at 0x1047db1b8> : <type 'instance'>
avl1 = <avlbug2.AVLTree instance at 0x1046dcb48> : <type 'instance'>
avl_REF2 = set([8, 12, 14, 15, 17]) : <type 'set'>
avl_REF1 = set([9, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
int1 = 2                                                                # STEP 76
ACTION: int1 = 2 
int1 = 17 : <type 'int'>
=> int1 = 2 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 77
ACTION: avl0.delete(int1) 
int1 = 2 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1042af758> : <type 'instance'>
avl_REF0 = set([1, 7, 9, 12, 15, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int0 = 5                                                                # STEP 78
ACTION: int0 = 5 
int0 = 4 : <type 'int'>
=> int0 = 5 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 79
ACTION: avl2.delete(int3) 
int3 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1047db1b8> : <type 'instance'>
avl_REF2 = set([8, 12, 14, 15, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([12, 14, 15, 17]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104287710>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
  15 [2:0]
-- < 8 [1:1]
---- < 5 [0:0] L
-- > 17 [1:0]
---- < 16 [0:0] L
---- > 18 [0:0] L
set([5, 8, 15, 16, 17, 18])
  15 [2:0]
-- < 8 [1:1]
---- < 5 [0:0] L
-- > 17 [1:0]
---- < 16 [0:0] L
---- > 18 [0:0] L
set([5, 8, 15, 16, 17, 18])
  15 [3:-1]
-- < 8 [1:-1]
---- > 12 [0:0] L
-- > 17 [2:-1]
---- < 16 [0:0] L
---- > 18 [1:-1]
------ > 19 [0:0] L
set([8, 12, 15, 16, 17, 18, 19])
  15 [3:-1]
-- < 8 [1:-1]
---- > 12 [0:0] L
-- > 17 [2:-1]
---- < 16 [0:0] L
---- > 18 [1:-1]
------ > 19 [0:0] L
set([8, 12, 15, 16, 17, 18, 19])
  15 [2:0]
-- < 8 [1:0]
---- < 3 [0:0] L
---- > 12 [0:0] L
-- > 17 [1:0]
---- < 16 [0:0] L
---- > 19 [0:0] L
set([3, 8, 12, 15, 16, 17, 19])
  15 [2:0]
-- < 3 [1:1]
---- < 2 [0:0] L
-- > 17 [1:0]
---- < 16 [0:0] L
---- > 18 [0:0] L
set([2, 3, 15, 16, 17, 18])
  15 [2:0]
-- < 3 [1:1]
---- < 2 [0:0] L
-- > 17 [1:0]
---- < 16 [0:0] L
---- > 18 [0:0] L
set([2, 3, 15, 16, 17, 18])
  15 [3:-1]
-- < 8 [1:1]
---- < 3 [0:0] L
-- > 17 [2:-1]
---- < 16 [0:0] L
---- > 19 [1:-1]
------ > 20 [0:0] L
set([3, 8, 15, 16, 17, 19, 20])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1042ba560>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
Original test has 27 steps

SAVING TEST AS failure.62345.test.2
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 3                                                                 # STEP 0
ACTION: int0 = 3 
int0 = None : <type 'NoneType'>
=> int0 = 3 : <type 'int'>
==================================================
int2 = 1                                                                 # STEP 1
ACTION: int2 = 1 
int2 = None : <type 'NoneType'>
=> int2 = 1 : <type 'int'>
==================================================
int1 = 14                                                                # STEP 2
ACTION: int1 = 14 
int1 = None : <type 'NoneType'>
=> int1 = 14 : <type 'int'>
==================================================
int3 = 5                                                                 # STEP 3
ACTION: int3 = 5 
int3 = None : <type 'NoneType'>
=> int3 = 5 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 4
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x1042bacb0> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0 == avl0                                                             # STEP 5
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x1042bacb0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl0.insert(int3)                                                        # STEP 6
ACTION: avl0.insert(int3) 
int3 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1042bacb0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([5]) : <type 'set'>
==================================================
int3 = 14                                                                # STEP 7
ACTION: int3 = 14 
int3 = 5 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
avl0.insert(int0)                                                        # STEP 8
ACTION: avl0.insert(int0) 
int0 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1042bacb0> : <type 'instance'>
avl_REF0 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([3, 5]) : <type 'set'>
==================================================
avl0.delete(int0)                                                        # STEP 9
ACTION: avl0.delete(int0) 
int0 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1042bacb0> : <type 'instance'>
avl_REF0 = set([3, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([5]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 10
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x1042bacb0> : <type 'instance'>
avl_REF0 = set([5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0 == avl0                                                            # STEP 11
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x1042bacb0> : <type 'instance'>
avl_REF0 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
int0 = 13                                                               # STEP 12
ACTION: int0 = 13 
int0 = 3 : <type 'int'>
=> int0 = 13 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 13
ACTION: avl0.insert(int2) 
int2 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1042bacb0> : <type 'instance'>
avl_REF0 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([1, 5]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 14
ACTION: avl0.insert(int1) 
int1 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1042bacb0> : <type 'instance'>
avl_REF0 = set([1, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([1, 5, 14]) : <type 'set'>
==================================================
int1 = 5                                                                # STEP 15
ACTION: int1 = 5 
int1 = 14 : <type 'int'>
=> int1 = 5 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 16
ACTION: avl0.delete(int2) 
int2 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1042bacb0> : <type 'instance'>
avl_REF0 = set([1, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([5, 14]) : <type 'set'>
==================================================
int2 = 5                                                                # STEP 17
ACTION: int2 = 5 
int2 = 1 : <type 'int'>
=> int2 = 5 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 18
ACTION: avl0.delete(int1) 
int1 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1042bacb0> : <type 'instance'>
avl_REF0 = set([5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([14]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 19
ACTION: avl0.delete(int1) 
int1 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1042bacb0> : <type 'instance'>
avl_REF0 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.insert(int0)                                                       # STEP 20
ACTION: avl0.insert(int0) 
int0 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1042bacb0> : <type 'instance'>
avl_REF0 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([13, 14]) : <type 'set'>
==================================================
int0 = 12                                                               # STEP 21
ACTION: int0 = 12 
int0 = 13 : <type 'int'>
=> int0 = 12 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 22
ACTION: avl0.insert(int1) 
int1 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1042bacb0> : <type 'instance'>
avl_REF0 = set([13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([13, 14, 5]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 23
ACTION: avl0.insert(int0) 
int0 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1042bacb0> : <type 'instance'>
avl_REF0 = set([13, 14, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([5, 12, 13, 14]) : <type 'set'>
==================================================
avl0 == avl0                                                            # STEP 24
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x1042bacb0> : <type 'instance'>
avl_REF0 = set([5, 12, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
int1 = 8                                                                # STEP 25
ACTION: int1 = 8 
int1 = 5 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 26
ACTION: avl0.delete(int3) 
int3 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1042bacb0> : <type 'instance'>
avl_REF0 = set([5, 12, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([5, 12, 13]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1046e39e0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 3 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 13
STOPPING TESTING DUE TO TIMEOUT
8.15438189205 PERCENT COVERED
60.2411909103 TOTAL RUNTIME
6 EXECUTED
393 TOTAL TEST OPERATIONS
20.4886541367 TIME SPENT EXECUTING TEST OPERATIONS
0.0451114177704 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
20.5761876106 TIME SPENT CHECKING PROPERTIES
41.0648417473 TOTAL TIME SPENT RUNNING SUT
0.00395393371582 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
3 FAILED
0 REPEATS OF FAILURES
3 ACTUAL DISTINCT FAILURES

FAILURE 0
avl2 = avl.AVLTree()                                                     # STEP 0
int0 = 15                                                                # STEP 1
avl2.delete(int0)                                                        # STEP 2
avl2.insert(int0)                                                        # STEP 3
int1 = 10                                                                # STEP 4
int0 = 10                                                                # STEP 5
avl2.insert(int0)                                                        # STEP 6
avl2 == avl2                                                             # STEP 7
avl2.delete(int1)                                                        # STEP 8
result = avl2.inorder()                                                  # STEP 9
result = avl2.find(int1)                                                # STEP 10
avl2.insert(int0)                                                       # STEP 11
result = avl2.find(int1)                                                # STEP 12
avl2.insert(int0)                                                       # STEP 13
result = avl2.find(int1)                                                # STEP 14
avl2.insert(int0)                                                       # STEP 15
avl2.insert(int0)                                                       # STEP 16
avl2.insert(int1)                                                       # STEP 17
avl2.delete(int1)                                                       # STEP 18
result = avl2.inorder()                                                 # STEP 19
result = avl2.find(int0)                                                # STEP 20
avl2.delete(int1)                                                       # STEP 21
avl2.delete(int0)                                                       # STEP 22
avl2.insert(int0)                                                       # STEP 23
avl2.insert(int1)                                                       # STEP 24
int2 = 5                                                                # STEP 25
result = avl2.find(int0)                                                # STEP 26
result = avl2.find(int1)                                                # STEP 27
result = avl2.find(int2)                                                # STEP 28
avl2.insert(int2)                                                       # STEP 29
avl2.insert(int2)                                                       # STEP 30
avl2.insert(int0)                                                       # STEP 31
avl2.insert(int0)                                                       # STEP 32
avl2.insert(int0)                                                       # STEP 33
avl2.insert(int2)                                                       # STEP 34
avl2.insert(int1)                                                       # STEP 35
avl2.delete(int1)                                                       # STEP 36
result = avl2.find(int1)                                                # STEP 37
int2 = 15                                                               # STEP 38
avl2.delete(int1)                                                       # STEP 39
avl2.delete(int2)                                                       # STEP 40
avl2.insert(int0)                                                       # STEP 41
result = avl2.find(int0)                                                # STEP 42
avl2.delete(int2)                                                       # STEP 43
result = avl2.inorder()                                                 # STEP 44
int1 = 4                                                                # STEP 45
avl2.delete(int0)                                                       # STEP 46
avl2.insert(int1)                                                       # STEP 47
avl2.insert(int0)                                                       # STEP 48
result = avl2.inorder()                                                 # STEP 49
avl2.insert(int2)                                                       # STEP 50
avl2.insert(int0)                                                       # STEP 51
avl2.delete(int2)                                                       # STEP 52
avl2.delete(int1)                                                       # STEP 53
result = avl2.inorder()                                                 # STEP 54
int3 = 13                                                               # STEP 55
avl2 == avl2                                                            # STEP 56
int0 = 13                                                               # STEP 57
avl2.delete(int0)                                                       # STEP 58
avl2.delete(int3)                                                       # STEP 59
avl2.delete(int3)                                                       # STEP 60
avl2.insert(int2)                                                       # STEP 61
avl2.delete(int2)                                                       # STEP 62
avl2.delete(int3)                                                       # STEP 63
result = avl2.inorder()                                                 # STEP 64
result = avl2.find(int1)                                                # STEP 65
int2 = 3                                                                # STEP 66
avl2.delete(int1)                                                       # STEP 67
avl2.insert(int1)                                                       # STEP 68
int1 = 4                                                                # STEP 69
avl2.insert(int0)                                                       # STEP 70
int3 = 19                                                               # STEP 71
avl2.delete(int1)                                                       # STEP 72
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104348f38>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE 1
int0 = 19                                                                # STEP 0
int1 = 9                                                                 # STEP 1
int3 = 7                                                                 # STEP 2
int2 = 10                                                                # STEP 3
avl0 = avl.AVLTree()                                                     # STEP 4
result = avl0.find(int0)                                                 # STEP 5
int0 = 15                                                                # STEP 6
avl2 = avl.AVLTree()                                                     # STEP 7
avl2.delete(int3)                                                        # STEP 8
avl0.delete(int3)                                                        # STEP 9
avl0.insert(int3)                                                       # STEP 10
int3 = 12                                                               # STEP 11
avl0.insert(int3)                                                       # STEP 12
avl0.delete(int2)                                                       # STEP 13
avl2.insert(int0)                                                       # STEP 14
result = avl0.find(int1)                                                # STEP 15
avl2.insert(int3)                                                       # STEP 16
avl0.insert(int1)                                                       # STEP 17
int2 = 9                                                                # STEP 18
avl0.insert(int0)                                                       # STEP 19
avl2.delete(int1)                                                       # STEP 20
avl0.delete(int2)                                                       # STEP 21
int0 = 16                                                               # STEP 22
avl2.insert(int3)                                                       # STEP 23
avl2.delete(int1)                                                       # STEP 24
avl0.insert(int0)                                                       # STEP 25
result = avl2.inorder()                                                 # STEP 26
avl2.delete(int2)                                                       # STEP 27
avl2.delete(int2)                                                       # STEP 28
int0 = 17                                                               # STEP 29
int3 = 8                                                                # STEP 30
avl0.delete(int0)                                                       # STEP 31
result = avl0.find(int3)                                                # STEP 32
avl2.insert(int3)                                                       # STEP 33
avl2.delete(int0)                                                       # STEP 34
avl0.insert(int2)                                                       # STEP 35
int3 = 17                                                               # STEP 36
int0 = 1                                                                # STEP 37
avl2.insert(int3)                                                       # STEP 38
result = avl2.inorder()                                                 # STEP 39
avl2.insert(int2)                                                       # STEP 40
int1 = 17                                                               # STEP 41
avl2 == avl2                                                            # STEP 42
int3 = 19                                                               # STEP 43
avl2.delete(int3)                                                       # STEP 44
avl0.insert(int1)                                                       # STEP 45
int3 = 19                                                               # STEP 46
result = avl0.inorder()                                                 # STEP 47
avl0.display()                                                          # STEP 48
int1 = 17                                                               # STEP 49
avl0.delete(int2)                                                       # STEP 50
avl1 = avl.AVLTree()                                                    # STEP 51
avl2.insert(int2)                                                       # STEP 52
avl2.insert(int3)                                                       # STEP 53
avl0.insert(int0)                                                       # STEP 54
result = avl2.find(int2)                                                # STEP 55
avl1.insert(int2)                                                       # STEP 56
avl0.delete(int1)                                                       # STEP 57
avl2.display()                                                          # STEP 58
avl2.delete(int2)                                                       # STEP 59
avl0.delete(int1)                                                       # STEP 60
result = avl1.find(int1)                                                # STEP 61
avl2.insert(int1)                                                       # STEP 62
avl0.insert(int2)                                                       # STEP 63
avl2.delete(int3)                                                       # STEP 64
avl0.delete(int3)                                                       # STEP 65
avl1.insert(int1)                                                       # STEP 66
int2 = 14                                                               # STEP 67
result = avl0.find(int0)                                                # STEP 68
int0 = 4                                                                # STEP 69
avl2.delete(int0)                                                       # STEP 70
result = avl2.inorder()                                                 # STEP 71
avl0.display()                                                          # STEP 72
avl2.insert(int2)                                                       # STEP 73
int3 = 8                                                                # STEP 74
avl2 == avl1                                                            # STEP 75
int1 = 2                                                                # STEP 76
avl0.delete(int1)                                                       # STEP 77
int0 = 5                                                                # STEP 78
avl2.delete(int3)                                                       # STEP 79
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104287710>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE 2
int0 = 3                                                                 # STEP 0
int2 = 1                                                                 # STEP 1
int1 = 14                                                                # STEP 2
int3 = 5                                                                 # STEP 3
avl0 = avl.AVLTree()                                                     # STEP 4
avl0 == avl0                                                             # STEP 5
avl0.insert(int3)                                                        # STEP 6
int3 = 14                                                                # STEP 7
avl0.insert(int0)                                                        # STEP 8
avl0.delete(int0)                                                        # STEP 9
result = avl0.inorder()                                                 # STEP 10
avl0 == avl0                                                            # STEP 11
int0 = 13                                                               # STEP 12
avl0.insert(int2)                                                       # STEP 13
avl0.insert(int1)                                                       # STEP 14
int1 = 5                                                                # STEP 15
avl0.delete(int2)                                                       # STEP 16
int2 = 5                                                                # STEP 17
avl0.delete(int1)                                                       # STEP 18
avl0.delete(int1)                                                       # STEP 19
avl0.insert(int0)                                                       # STEP 20
int0 = 12                                                               # STEP 21
avl0.insert(int1)                                                       # STEP 22
avl0.insert(int0)                                                       # STEP 23
avl0 == avl0                                                            # STEP 24
int1 = 8                                                                # STEP 25
avl0.delete(int3)                                                       # STEP 26
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1046e39e0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
212 BRANCHES COVERED
160 STATEMENTS COVERED
